// Decompiled with JetBrains decompiler
// Type: SteamNative.Platform
// Assembly: Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 4BDBC255-6935-43E6-AE4B-B6BF8667EAAF
// Assembly location: C:\Program Files (x86)\Steam\steamapps\common\Pathologic\Pathologic_Data\Managed\Assembly-CSharp.dll

using System;
using System.Runtime.InteropServices;
using System.Text;

#nullable disable
namespace SteamNative
{
  internal static class Platform
  {
    private static Facepunch.Steamworks.OperatingSystem _os;
    private static Facepunch.Steamworks.Architecture _arch;

    internal static Facepunch.Steamworks.OperatingSystem Os
    {
      get
      {
        if (Platform._os == Facepunch.Steamworks.OperatingSystem.Unset)
        {
          Platform._os = Facepunch.Steamworks.OperatingSystem.Windows;
          if (Environment.OSVersion.Platform == PlatformID.MacOSX)
            Platform._os = Facepunch.Steamworks.OperatingSystem.Osx;
          if (Environment.OSVersion.Platform == PlatformID.Unix)
            Platform._os = Facepunch.Steamworks.OperatingSystem.Linux;
          if (Environment.OSVersion.VersionString.ToLower().Contains("unix"))
            Platform._os = Facepunch.Steamworks.OperatingSystem.Linux;
          if (Environment.OSVersion.VersionString.ToLower().Contains("osx"))
            Platform._os = Facepunch.Steamworks.OperatingSystem.Osx;
        }
        return Platform._os;
      }
      set => Platform._os = value;
    }

    internal static Facepunch.Steamworks.Architecture Arch
    {
      get
      {
        if (Platform._arch == Facepunch.Steamworks.Architecture.Unset)
        {
          if (IntPtr.Size == 8)
          {
            Platform._arch = Facepunch.Steamworks.Architecture.x64;
          }
          else
          {
            if (IntPtr.Size != 4)
              throw new Exception("Unsupported Architecture!");
            Platform._arch = Facepunch.Steamworks.Architecture.x86;
          }
        }
        return Platform._arch;
      }
      set => Platform._arch = value;
    }

    public static bool IsWindows => Platform.Os == Facepunch.Steamworks.OperatingSystem.Windows;

    public static bool IsWindows64 => Platform.Arch == Facepunch.Steamworks.Architecture.x64 && Platform.IsWindows;

    public static bool IsWindows32 => Platform.Arch == Facepunch.Steamworks.Architecture.x86 && Platform.IsWindows;

    public static bool IsLinux64
    {
      get => Platform.Arch == Facepunch.Steamworks.Architecture.x64 && Platform.Os == Facepunch.Steamworks.OperatingSystem.Linux;
    }

    public static bool IsLinux32
    {
      get => Platform.Arch == Facepunch.Steamworks.Architecture.x86 && Platform.Os == Facepunch.Steamworks.OperatingSystem.Linux;
    }

    public static bool IsOsx => Platform.Os == Facepunch.Steamworks.OperatingSystem.Osx;

    public static bool PackSmall => Platform.Os != Facepunch.Steamworks.OperatingSystem.Windows;

    internal interface Interface : IDisposable
    {
      bool IsValid { get; }

      uint ISteamAppList_GetNumInstalledApps();

      uint ISteamAppList_GetInstalledApps(IntPtr pvecAppID, uint unMaxAppIDs);

      int ISteamAppList_GetAppName(uint nAppID, StringBuilder pchName, int cchNameMax);

      int ISteamAppList_GetAppInstallDir(uint nAppID, StringBuilder pchDirectory, int cchNameMax);

      int ISteamAppList_GetAppBuildId(uint nAppID);

      bool ISteamApps_BIsSubscribed();

      bool ISteamApps_BIsLowViolence();

      bool ISteamApps_BIsCybercafe();

      bool ISteamApps_BIsVACBanned();

      IntPtr ISteamApps_GetCurrentGameLanguage();

      IntPtr ISteamApps_GetAvailableGameLanguages();

      bool ISteamApps_BIsSubscribedApp(uint appID);

      bool ISteamApps_BIsDlcInstalled(uint appID);

      uint ISteamApps_GetEarliestPurchaseUnixTime(uint nAppID);

      bool ISteamApps_BIsSubscribedFromFreeWeekend();

      int ISteamApps_GetDLCCount();

      bool ISteamApps_BGetDLCDataByIndex(
        int iDLC,
        ref uint pAppID,
        [MarshalAs(UnmanagedType.U1)] ref bool pbAvailable,
        StringBuilder pchName,
        int cchNameBufferSize);

      void ISteamApps_InstallDLC(uint nAppID);

      void ISteamApps_UninstallDLC(uint nAppID);

      void ISteamApps_RequestAppProofOfPurchaseKey(uint nAppID);

      bool ISteamApps_GetCurrentBetaName(StringBuilder pchName, int cchNameBufferSize);

      bool ISteamApps_MarkContentCorrupt([MarshalAs(UnmanagedType.U1)] bool bMissingFilesOnly);

      uint ISteamApps_GetInstalledDepots(uint appID, IntPtr pvecDepots, uint cMaxDepots);

      uint ISteamApps_GetAppInstallDir(
        uint appID,
        StringBuilder pchFolder,
        uint cchFolderBufferSize);

      bool ISteamApps_BIsAppInstalled(uint appID);

      CSteamID ISteamApps_GetAppOwner();

      IntPtr ISteamApps_GetLaunchQueryParam(string pchKey);

      bool ISteamApps_GetDlcDownloadProgress(
        uint nAppID,
        out ulong punBytesDownloaded,
        out ulong punBytesTotal);

      int ISteamApps_GetAppBuildId();

      void ISteamApps_RequestAllProofOfPurchaseKeys();

      SteamAPICall_t ISteamApps_GetFileDetails(string pszFileName);

      HSteamPipe ISteamClient_CreateSteamPipe();

      bool ISteamClient_BReleaseSteamPipe(int hSteamPipe);

      HSteamUser ISteamClient_ConnectToGlobalUser(int hSteamPipe);

      HSteamUser ISteamClient_CreateLocalUser(out int phSteamPipe, AccountType eAccountType);

      void ISteamClient_ReleaseUser(int hSteamPipe, int hUser);

      IntPtr ISteamClient_GetISteamUser(int hSteamUser, int hSteamPipe, string pchVersion);

      IntPtr ISteamClient_GetISteamGameServer(int hSteamUser, int hSteamPipe, string pchVersion);

      void ISteamClient_SetLocalIPBinding(uint unIP, ushort usPort);

      IntPtr ISteamClient_GetISteamFriends(int hSteamUser, int hSteamPipe, string pchVersion);

      IntPtr ISteamClient_GetISteamUtils(int hSteamPipe, string pchVersion);

      IntPtr ISteamClient_GetISteamMatchmaking(int hSteamUser, int hSteamPipe, string pchVersion);

      IntPtr ISteamClient_GetISteamMatchmakingServers(
        int hSteamUser,
        int hSteamPipe,
        string pchVersion);

      IntPtr ISteamClient_GetISteamGenericInterface(
        int hSteamUser,
        int hSteamPipe,
        string pchVersion);

      IntPtr ISteamClient_GetISteamUserStats(int hSteamUser, int hSteamPipe, string pchVersion);

      IntPtr ISteamClient_GetISteamGameServerStats(
        int hSteamuser,
        int hSteamPipe,
        string pchVersion);

      IntPtr ISteamClient_GetISteamApps(int hSteamUser, int hSteamPipe, string pchVersion);

      IntPtr ISteamClient_GetISteamNetworking(int hSteamUser, int hSteamPipe, string pchVersion);

      IntPtr ISteamClient_GetISteamRemoteStorage(int hSteamuser, int hSteamPipe, string pchVersion);

      IntPtr ISteamClient_GetISteamScreenshots(int hSteamuser, int hSteamPipe, string pchVersion);

      uint ISteamClient_GetIPCCallCount();

      void ISteamClient_SetWarningMessageHook(IntPtr pFunction);

      bool ISteamClient_BShutdownIfAllPipesClosed();

      IntPtr ISteamClient_GetISteamHTTP(int hSteamuser, int hSteamPipe, string pchVersion);

      IntPtr ISteamClient_GetISteamUnifiedMessages(
        int hSteamuser,
        int hSteamPipe,
        string pchVersion);

      IntPtr ISteamClient_GetISteamController(int hSteamUser, int hSteamPipe, string pchVersion);

      IntPtr ISteamClient_GetISteamUGC(int hSteamUser, int hSteamPipe, string pchVersion);

      IntPtr ISteamClient_GetISteamAppList(int hSteamUser, int hSteamPipe, string pchVersion);

      IntPtr ISteamClient_GetISteamMusic(int hSteamuser, int hSteamPipe, string pchVersion);

      IntPtr ISteamClient_GetISteamMusicRemote(int hSteamuser, int hSteamPipe, string pchVersion);

      IntPtr ISteamClient_GetISteamHTMLSurface(int hSteamuser, int hSteamPipe, string pchVersion);

      IntPtr ISteamClient_GetISteamInventory(int hSteamuser, int hSteamPipe, string pchVersion);

      IntPtr ISteamClient_GetISteamVideo(int hSteamuser, int hSteamPipe, string pchVersion);

      bool ISteamController_Init();

      bool ISteamController_Shutdown();

      void ISteamController_RunFrame();

      int ISteamController_GetConnectedControllers(IntPtr handlesOut);

      bool ISteamController_ShowBindingPanel(ulong controllerHandle);

      ControllerActionSetHandle_t ISteamController_GetActionSetHandle(string pszActionSetName);

      void ISteamController_ActivateActionSet(ulong controllerHandle, ulong actionSetHandle);

      ControllerActionSetHandle_t ISteamController_GetCurrentActionSet(ulong controllerHandle);

      ControllerDigitalActionHandle_t ISteamController_GetDigitalActionHandle(string pszActionName);

      ControllerDigitalActionData_t ISteamController_GetDigitalActionData(
        ulong controllerHandle,
        ulong digitalActionHandle);

      int ISteamController_GetDigitalActionOrigins(
        ulong controllerHandle,
        ulong actionSetHandle,
        ulong digitalActionHandle,
        out ControllerActionOrigin originsOut);

      ControllerAnalogActionHandle_t ISteamController_GetAnalogActionHandle(string pszActionName);

      ControllerAnalogActionData_t ISteamController_GetAnalogActionData(
        ulong controllerHandle,
        ulong analogActionHandle);

      int ISteamController_GetAnalogActionOrigins(
        ulong controllerHandle,
        ulong actionSetHandle,
        ulong analogActionHandle,
        out ControllerActionOrigin originsOut);

      void ISteamController_StopAnalogActionMomentum(ulong controllerHandle, ulong eAction);

      void ISteamController_TriggerHapticPulse(
        ulong controllerHandle,
        SteamControllerPad eTargetPad,
        ushort usDurationMicroSec);

      void ISteamController_TriggerRepeatedHapticPulse(
        ulong controllerHandle,
        SteamControllerPad eTargetPad,
        ushort usDurationMicroSec,
        ushort usOffMicroSec,
        ushort unRepeat,
        uint nFlags);

      void ISteamController_TriggerVibration(
        ulong controllerHandle,
        ushort usLeftSpeed,
        ushort usRightSpeed);

      void ISteamController_SetLEDColor(
        ulong controllerHandle,
        byte nColorR,
        byte nColorG,
        byte nColorB,
        uint nFlags);

      int ISteamController_GetGamepadIndexForController(ulong ulControllerHandle);

      ControllerHandle_t ISteamController_GetControllerForGamepadIndex(int nIndex);

      ControllerMotionData_t ISteamController_GetMotionData(ulong controllerHandle);

      bool ISteamController_ShowDigitalActionOrigins(
        ulong controllerHandle,
        ulong digitalActionHandle,
        float flScale,
        float flXPosition,
        float flYPosition);

      bool ISteamController_ShowAnalogActionOrigins(
        ulong controllerHandle,
        ulong analogActionHandle,
        float flScale,
        float flXPosition,
        float flYPosition);

      IntPtr ISteamController_GetStringForActionOrigin(ControllerActionOrigin eOrigin);

      IntPtr ISteamController_GetGlyphForActionOrigin(ControllerActionOrigin eOrigin);

      IntPtr ISteamFriends_GetPersonaName();

      SteamAPICall_t ISteamFriends_SetPersonaName(string pchPersonaName);

      PersonaState ISteamFriends_GetPersonaState();

      int ISteamFriends_GetFriendCount(int iFriendFlags);

      CSteamID ISteamFriends_GetFriendByIndex(int iFriend, int iFriendFlags);

      FriendRelationship ISteamFriends_GetFriendRelationship(ulong steamIDFriend);

      PersonaState ISteamFriends_GetFriendPersonaState(ulong steamIDFriend);

      IntPtr ISteamFriends_GetFriendPersonaName(ulong steamIDFriend);

      bool ISteamFriends_GetFriendGamePlayed(
        ulong steamIDFriend,
        ref FriendGameInfo_t pFriendGameInfo);

      IntPtr ISteamFriends_GetFriendPersonaNameHistory(ulong steamIDFriend, int iPersonaName);

      int ISteamFriends_GetFriendSteamLevel(ulong steamIDFriend);

      IntPtr ISteamFriends_GetPlayerNickname(ulong steamIDPlayer);

      int ISteamFriends_GetFriendsGroupCount();

      FriendsGroupID_t ISteamFriends_GetFriendsGroupIDByIndex(int iFG);

      IntPtr ISteamFriends_GetFriendsGroupName(short friendsGroupID);

      int ISteamFriends_GetFriendsGroupMembersCount(short friendsGroupID);

      void ISteamFriends_GetFriendsGroupMembersList(
        short friendsGroupID,
        IntPtr pOutSteamIDMembers,
        int nMembersCount);

      bool ISteamFriends_HasFriend(ulong steamIDFriend, int iFriendFlags);

      int ISteamFriends_GetClanCount();

      CSteamID ISteamFriends_GetClanByIndex(int iClan);

      IntPtr ISteamFriends_GetClanName(ulong steamIDClan);

      IntPtr ISteamFriends_GetClanTag(ulong steamIDClan);

      bool ISteamFriends_GetClanActivityCounts(
        ulong steamIDClan,
        out int pnOnline,
        out int pnInGame,
        out int pnChatting);

      SteamAPICall_t ISteamFriends_DownloadClanActivityCounts(
        IntPtr psteamIDClans,
        int cClansToRequest);

      int ISteamFriends_GetFriendCountFromSource(ulong steamIDSource);

      CSteamID ISteamFriends_GetFriendFromSourceByIndex(ulong steamIDSource, int iFriend);

      bool ISteamFriends_IsUserInSource(ulong steamIDUser, ulong steamIDSource);

      void ISteamFriends_SetInGameVoiceSpeaking(ulong steamIDUser, [MarshalAs(UnmanagedType.U1)] bool bSpeaking);

      void ISteamFriends_ActivateGameOverlay(string pchDialog);

      void ISteamFriends_ActivateGameOverlayToUser(string pchDialog, ulong steamID);

      void ISteamFriends_ActivateGameOverlayToWebPage(string pchURL);

      void ISteamFriends_ActivateGameOverlayToStore(uint nAppID, OverlayToStoreFlag eFlag);

      void ISteamFriends_SetPlayedWith(ulong steamIDUserPlayedWith);

      void ISteamFriends_ActivateGameOverlayInviteDialog(ulong steamIDLobby);

      int ISteamFriends_GetSmallFriendAvatar(ulong steamIDFriend);

      int ISteamFriends_GetMediumFriendAvatar(ulong steamIDFriend);

      int ISteamFriends_GetLargeFriendAvatar(ulong steamIDFriend);

      bool ISteamFriends_RequestUserInformation(ulong steamIDUser, [MarshalAs(UnmanagedType.U1)] bool bRequireNameOnly);

      SteamAPICall_t ISteamFriends_RequestClanOfficerList(ulong steamIDClan);

      CSteamID ISteamFriends_GetClanOwner(ulong steamIDClan);

      int ISteamFriends_GetClanOfficerCount(ulong steamIDClan);

      CSteamID ISteamFriends_GetClanOfficerByIndex(ulong steamIDClan, int iOfficer);

      uint ISteamFriends_GetUserRestrictions();

      bool ISteamFriends_SetRichPresence(string pchKey, string pchValue);

      void ISteamFriends_ClearRichPresence();

      IntPtr ISteamFriends_GetFriendRichPresence(ulong steamIDFriend, string pchKey);

      int ISteamFriends_GetFriendRichPresenceKeyCount(ulong steamIDFriend);

      IntPtr ISteamFriends_GetFriendRichPresenceKeyByIndex(ulong steamIDFriend, int iKey);

      void ISteamFriends_RequestFriendRichPresence(ulong steamIDFriend);

      bool ISteamFriends_InviteUserToGame(ulong steamIDFriend, string pchConnectString);

      int ISteamFriends_GetCoplayFriendCount();

      CSteamID ISteamFriends_GetCoplayFriend(int iCoplayFriend);

      int ISteamFriends_GetFriendCoplayTime(ulong steamIDFriend);

      AppId_t ISteamFriends_GetFriendCoplayGame(ulong steamIDFriend);

      SteamAPICall_t ISteamFriends_JoinClanChatRoom(ulong steamIDClan);

      bool ISteamFriends_LeaveClanChatRoom(ulong steamIDClan);

      int ISteamFriends_GetClanChatMemberCount(ulong steamIDClan);

      CSteamID ISteamFriends_GetChatMemberByIndex(ulong steamIDClan, int iUser);

      bool ISteamFriends_SendClanChatMessage(ulong steamIDClanChat, string pchText);

      int ISteamFriends_GetClanChatMessage(
        ulong steamIDClanChat,
        int iMessage,
        IntPtr prgchText,
        int cchTextMax,
        out ChatEntryType peChatEntryType,
        out ulong psteamidChatter);

      bool ISteamFriends_IsClanChatAdmin(ulong steamIDClanChat, ulong steamIDUser);

      bool ISteamFriends_IsClanChatWindowOpenInSteam(ulong steamIDClanChat);

      bool ISteamFriends_OpenClanChatWindowInSteam(ulong steamIDClanChat);

      bool ISteamFriends_CloseClanChatWindowInSteam(ulong steamIDClanChat);

      bool ISteamFriends_SetListenForFriendsMessages([MarshalAs(UnmanagedType.U1)] bool bInterceptEnabled);

      bool ISteamFriends_ReplyToFriendMessage(ulong steamIDFriend, string pchMsgToSend);

      int ISteamFriends_GetFriendMessage(
        ulong steamIDFriend,
        int iMessageID,
        IntPtr pvData,
        int cubData,
        out ChatEntryType peChatEntryType);

      SteamAPICall_t ISteamFriends_GetFollowerCount(ulong steamID);

      SteamAPICall_t ISteamFriends_IsFollowing(ulong steamID);

      SteamAPICall_t ISteamFriends_EnumerateFollowingList(uint unStartIndex);

      bool ISteamGameServer_InitGameServer(
        uint unIP,
        ushort usGamePort,
        ushort usQueryPort,
        uint unFlags,
        uint nGameAppId,
        string pchVersionString);

      void ISteamGameServer_SetProduct(string pszProduct);

      void ISteamGameServer_SetGameDescription(string pszGameDescription);

      void ISteamGameServer_SetModDir(string pszModDir);

      void ISteamGameServer_SetDedicatedServer([MarshalAs(UnmanagedType.U1)] bool bDedicated);

      void ISteamGameServer_LogOn(string pszToken);

      void ISteamGameServer_LogOnAnonymous();

      void ISteamGameServer_LogOff();

      bool ISteamGameServer_BLoggedOn();

      bool ISteamGameServer_BSecure();

      CSteamID ISteamGameServer_GetSteamID();

      bool ISteamGameServer_WasRestartRequested();

      void ISteamGameServer_SetMaxPlayerCount(int cPlayersMax);

      void ISteamGameServer_SetBotPlayerCount(int cBotplayers);

      void ISteamGameServer_SetServerName(string pszServerName);

      void ISteamGameServer_SetMapName(string pszMapName);

      void ISteamGameServer_SetPasswordProtected([MarshalAs(UnmanagedType.U1)] bool bPasswordProtected);

      void ISteamGameServer_SetSpectatorPort(ushort unSpectatorPort);

      void ISteamGameServer_SetSpectatorServerName(string pszSpectatorServerName);

      void ISteamGameServer_ClearAllKeyValues();

      void ISteamGameServer_SetKeyValue(string pKey, string pValue);

      void ISteamGameServer_SetGameTags(string pchGameTags);

      void ISteamGameServer_SetGameData(string pchGameData);

      void ISteamGameServer_SetRegion(string pszRegion);

      bool ISteamGameServer_SendUserConnectAndAuthenticate(
        uint unIPClient,
        IntPtr pvAuthBlob,
        uint cubAuthBlobSize,
        out ulong pSteamIDUser);

      CSteamID ISteamGameServer_CreateUnauthenticatedUserConnection();

      void ISteamGameServer_SendUserDisconnect(ulong steamIDUser);

      bool ISteamGameServer_BUpdateUserData(ulong steamIDUser, string pchPlayerName, uint uScore);

      HAuthTicket ISteamGameServer_GetAuthSessionTicket(
        IntPtr pTicket,
        int cbMaxTicket,
        out uint pcbTicket);

      BeginAuthSessionResult ISteamGameServer_BeginAuthSession(
        IntPtr pAuthTicket,
        int cbAuthTicket,
        ulong steamID);

      void ISteamGameServer_EndAuthSession(ulong steamID);

      void ISteamGameServer_CancelAuthTicket(uint hAuthTicket);

      UserHasLicenseForAppResult ISteamGameServer_UserHasLicenseForApp(ulong steamID, uint appID);

      bool ISteamGameServer_RequestUserGroupStatus(ulong steamIDUser, ulong steamIDGroup);

      void ISteamGameServer_GetGameplayStats();

      SteamAPICall_t ISteamGameServer_GetServerReputation();

      uint ISteamGameServer_GetPublicIP();

      bool ISteamGameServer_HandleIncomingPacket(
        IntPtr pData,
        int cbData,
        uint srcIP,
        ushort srcPort);

      int ISteamGameServer_GetNextOutgoingPacket(
        IntPtr pOut,
        int cbMaxOut,
        out uint pNetAdr,
        out ushort pPort);

      void ISteamGameServer_EnableHeartbeats([MarshalAs(UnmanagedType.U1)] bool bActive);

      void ISteamGameServer_SetHeartbeatInterval(int iHeartbeatInterval);

      void ISteamGameServer_ForceHeartbeat();

      SteamAPICall_t ISteamGameServer_AssociateWithClan(ulong steamIDClan);

      SteamAPICall_t ISteamGameServer_ComputeNewPlayerCompatibility(ulong steamIDNewPlayer);

      SteamAPICall_t ISteamGameServerStats_RequestUserStats(ulong steamIDUser);

      bool ISteamGameServerStats_GetUserStat(ulong steamIDUser, string pchName, out int pData);

      bool ISteamGameServerStats_GetUserStat0(ulong steamIDUser, string pchName, out float pData);

      bool ISteamGameServerStats_GetUserAchievement(
        ulong steamIDUser,
        string pchName,
        [MarshalAs(UnmanagedType.U1)] ref bool pbAchieved);

      bool ISteamGameServerStats_SetUserStat(ulong steamIDUser, string pchName, int nData);

      bool ISteamGameServerStats_SetUserStat0(ulong steamIDUser, string pchName, float fData);

      bool ISteamGameServerStats_UpdateUserAvgRateStat(
        ulong steamIDUser,
        string pchName,
        float flCountThisSession,
        double dSessionLength);

      bool ISteamGameServerStats_SetUserAchievement(ulong steamIDUser, string pchName);

      bool ISteamGameServerStats_ClearUserAchievement(ulong steamIDUser, string pchName);

      SteamAPICall_t ISteamGameServerStats_StoreUserStats(ulong steamIDUser);

      void ISteamHTMLSurface_DestructISteamHTMLSurface();

      bool ISteamHTMLSurface_Init();

      bool ISteamHTMLSurface_Shutdown();

      SteamAPICall_t ISteamHTMLSurface_CreateBrowser(string pchUserAgent, string pchUserCSS);

      void ISteamHTMLSurface_RemoveBrowser(uint unBrowserHandle);

      void ISteamHTMLSurface_LoadURL(uint unBrowserHandle, string pchURL, string pchPostData);

      void ISteamHTMLSurface_SetSize(uint unBrowserHandle, uint unWidth, uint unHeight);

      void ISteamHTMLSurface_StopLoad(uint unBrowserHandle);

      void ISteamHTMLSurface_Reload(uint unBrowserHandle);

      void ISteamHTMLSurface_GoBack(uint unBrowserHandle);

      void ISteamHTMLSurface_GoForward(uint unBrowserHandle);

      void ISteamHTMLSurface_AddHeader(uint unBrowserHandle, string pchKey, string pchValue);

      void ISteamHTMLSurface_ExecuteJavascript(uint unBrowserHandle, string pchScript);

      void ISteamHTMLSurface_MouseUp(uint unBrowserHandle, HTMLMouseButton eMouseButton);

      void ISteamHTMLSurface_MouseDown(uint unBrowserHandle, HTMLMouseButton eMouseButton);

      void ISteamHTMLSurface_MouseDoubleClick(uint unBrowserHandle, HTMLMouseButton eMouseButton);

      void ISteamHTMLSurface_MouseMove(uint unBrowserHandle, int x, int y);

      void ISteamHTMLSurface_MouseWheel(uint unBrowserHandle, int nDelta);

      void ISteamHTMLSurface_KeyDown(
        uint unBrowserHandle,
        uint nNativeKeyCode,
        HTMLKeyModifiers eHTMLKeyModifiers);

      void ISteamHTMLSurface_KeyUp(
        uint unBrowserHandle,
        uint nNativeKeyCode,
        HTMLKeyModifiers eHTMLKeyModifiers);

      void ISteamHTMLSurface_KeyChar(
        uint unBrowserHandle,
        uint cUnicodeChar,
        HTMLKeyModifiers eHTMLKeyModifiers);

      void ISteamHTMLSurface_SetHorizontalScroll(uint unBrowserHandle, uint nAbsolutePixelScroll);

      void ISteamHTMLSurface_SetVerticalScroll(uint unBrowserHandle, uint nAbsolutePixelScroll);

      void ISteamHTMLSurface_SetKeyFocus(uint unBrowserHandle, [MarshalAs(UnmanagedType.U1)] bool bHasKeyFocus);

      void ISteamHTMLSurface_ViewSource(uint unBrowserHandle);

      void ISteamHTMLSurface_CopyToClipboard(uint unBrowserHandle);

      void ISteamHTMLSurface_PasteFromClipboard(uint unBrowserHandle);

      void ISteamHTMLSurface_Find(
        uint unBrowserHandle,
        string pchSearchStr,
        [MarshalAs(UnmanagedType.U1)] bool bCurrentlyInFind,
        [MarshalAs(UnmanagedType.U1)] bool bReverse);

      void ISteamHTMLSurface_StopFind(uint unBrowserHandle);

      void ISteamHTMLSurface_GetLinkAtPosition(uint unBrowserHandle, int x, int y);

      void ISteamHTMLSurface_SetCookie(
        string pchHostname,
        string pchKey,
        string pchValue,
        string pchPath,
        uint nExpires,
        [MarshalAs(UnmanagedType.U1)] bool bSecure,
        [MarshalAs(UnmanagedType.U1)] bool bHTTPOnly);

      void ISteamHTMLSurface_SetPageScaleFactor(
        uint unBrowserHandle,
        float flZoom,
        int nPointX,
        int nPointY);

      void ISteamHTMLSurface_SetBackgroundMode(uint unBrowserHandle, [MarshalAs(UnmanagedType.U1)] bool bBackgroundMode);

      void ISteamHTMLSurface_AllowStartRequest(uint unBrowserHandle, [MarshalAs(UnmanagedType.U1)] bool bAllowed);

      void ISteamHTMLSurface_JSDialogResponse(uint unBrowserHandle, [MarshalAs(UnmanagedType.U1)] bool bResult);

      HTTPRequestHandle ISteamHTTP_CreateHTTPRequest(
        HTTPMethod eHTTPRequestMethod,
        string pchAbsoluteURL);

      bool ISteamHTTP_SetHTTPRequestContextValue(uint hRequest, ulong ulContextValue);

      bool ISteamHTTP_SetHTTPRequestNetworkActivityTimeout(uint hRequest, uint unTimeoutSeconds);

      bool ISteamHTTP_SetHTTPRequestHeaderValue(
        uint hRequest,
        string pchHeaderName,
        string pchHeaderValue);

      bool ISteamHTTP_SetHTTPRequestGetOrPostParameter(
        uint hRequest,
        string pchParamName,
        string pchParamValue);

      bool ISteamHTTP_SendHTTPRequest(uint hRequest, ref ulong pCallHandle);

      bool ISteamHTTP_SendHTTPRequestAndStreamResponse(uint hRequest, ref ulong pCallHandle);

      bool ISteamHTTP_DeferHTTPRequest(uint hRequest);

      bool ISteamHTTP_PrioritizeHTTPRequest(uint hRequest);

      bool ISteamHTTP_GetHTTPResponseHeaderSize(
        uint hRequest,
        string pchHeaderName,
        out uint unResponseHeaderSize);

      bool ISteamHTTP_GetHTTPResponseHeaderValue(
        uint hRequest,
        string pchHeaderName,
        out byte pHeaderValueBuffer,
        uint unBufferSize);

      bool ISteamHTTP_GetHTTPResponseBodySize(uint hRequest, out uint unBodySize);

      bool ISteamHTTP_GetHTTPResponseBodyData(
        uint hRequest,
        out byte pBodyDataBuffer,
        uint unBufferSize);

      bool ISteamHTTP_GetHTTPStreamingResponseBodyData(
        uint hRequest,
        uint cOffset,
        out byte pBodyDataBuffer,
        uint unBufferSize);

      bool ISteamHTTP_ReleaseHTTPRequest(uint hRequest);

      bool ISteamHTTP_GetHTTPDownloadProgressPct(uint hRequest, out float pflPercentOut);

      bool ISteamHTTP_SetHTTPRequestRawPostBody(
        uint hRequest,
        string pchContentType,
        out byte pubBody,
        uint unBodyLen);

      HTTPCookieContainerHandle ISteamHTTP_CreateCookieContainer([MarshalAs(UnmanagedType.U1)] bool bAllowResponsesToModify);

      bool ISteamHTTP_ReleaseCookieContainer(uint hCookieContainer);

      bool ISteamHTTP_SetCookie(
        uint hCookieContainer,
        string pchHost,
        string pchUrl,
        string pchCookie);

      bool ISteamHTTP_SetHTTPRequestCookieContainer(uint hRequest, uint hCookieContainer);

      bool ISteamHTTP_SetHTTPRequestUserAgentInfo(uint hRequest, string pchUserAgentInfo);

      bool ISteamHTTP_SetHTTPRequestRequiresVerifiedCertificate(
        uint hRequest,
        [MarshalAs(UnmanagedType.U1)] bool bRequireVerifiedCertificate);

      bool ISteamHTTP_SetHTTPRequestAbsoluteTimeoutMS(uint hRequest, uint unMilliseconds);

      bool ISteamHTTP_GetHTTPRequestWasTimedOut(uint hRequest, [MarshalAs(UnmanagedType.U1)] ref bool pbWasTimedOut);

      Result ISteamInventory_GetResultStatus(int resultHandle);

      bool ISteamInventory_GetResultItems(
        int resultHandle,
        IntPtr pOutItemsArray,
        out uint punOutItemsArraySize);

      bool ISteamInventory_GetResultItemProperty(
        int resultHandle,
        uint unItemIndex,
        string pchPropertyName,
        StringBuilder pchValueBuffer,
        out uint punValueBufferSizeOut);

      uint ISteamInventory_GetResultTimestamp(int resultHandle);

      bool ISteamInventory_CheckResultSteamID(int resultHandle, ulong steamIDExpected);

      void ISteamInventory_DestroyResult(int resultHandle);

      bool ISteamInventory_GetAllItems(ref int pResultHandle);

      bool ISteamInventory_GetItemsByID(
        ref int pResultHandle,
        ulong[] pInstanceIDs,
        uint unCountInstanceIDs);

      bool ISteamInventory_SerializeResult(
        int resultHandle,
        IntPtr pOutBuffer,
        out uint punOutBufferSize);

      bool ISteamInventory_DeserializeResult(
        ref int pOutResultHandle,
        IntPtr pBuffer,
        uint unBufferSize,
        [MarshalAs(UnmanagedType.U1)] bool bRESERVED_MUST_BE_FALSE);

      bool ISteamInventory_GenerateItems(
        ref int pResultHandle,
        int[] pArrayItemDefs,
        uint[] punArrayQuantity,
        uint unArrayLength);

      bool ISteamInventory_GrantPromoItems(ref int pResultHandle);

      bool ISteamInventory_AddPromoItem(ref int pResultHandle, int itemDef);

      bool ISteamInventory_AddPromoItems(
        ref int pResultHandle,
        int[] pArrayItemDefs,
        uint unArrayLength);

      bool ISteamInventory_ConsumeItem(ref int pResultHandle, ulong itemConsume, uint unQuantity);

      bool ISteamInventory_ExchangeItems(
        ref int pResultHandle,
        int[] pArrayGenerate,
        uint[] punArrayGenerateQuantity,
        uint unArrayGenerateLength,
        ulong[] pArrayDestroy,
        uint[] punArrayDestroyQuantity,
        uint unArrayDestroyLength);

      bool ISteamInventory_TransferItemQuantity(
        ref int pResultHandle,
        ulong itemIdSource,
        uint unQuantity,
        ulong itemIdDest);

      void ISteamInventory_SendItemDropHeartbeat();

      bool ISteamInventory_TriggerItemDrop(ref int pResultHandle, int dropListDefinition);

      bool ISteamInventory_TradeItems(
        ref int pResultHandle,
        ulong steamIDTradePartner,
        ulong[] pArrayGive,
        uint[] pArrayGiveQuantity,
        uint nArrayGiveLength,
        ulong[] pArrayGet,
        uint[] pArrayGetQuantity,
        uint nArrayGetLength);

      bool ISteamInventory_LoadItemDefinitions();

      bool ISteamInventory_GetItemDefinitionIDs(IntPtr pItemDefIDs, out uint punItemDefIDsArraySize);

      bool ISteamInventory_GetItemDefinitionProperty(
        int iDefinition,
        string pchPropertyName,
        StringBuilder pchValueBuffer,
        out uint punValueBufferSizeOut);

      SteamAPICall_t ISteamInventory_RequestEligiblePromoItemDefinitionsIDs(ulong steamID);

      bool ISteamInventory_GetEligiblePromoItemDefinitionIDs(
        ulong steamID,
        IntPtr pItemDefIDs,
        out uint punItemDefIDsArraySize);

      int ISteamMatchmaking_GetFavoriteGameCount();

      bool ISteamMatchmaking_GetFavoriteGame(
        int iGame,
        ref uint pnAppID,
        out uint pnIP,
        out ushort pnConnPort,
        out ushort pnQueryPort,
        out uint punFlags,
        out uint pRTime32LastPlayedOnServer);

      int ISteamMatchmaking_AddFavoriteGame(
        uint nAppID,
        uint nIP,
        ushort nConnPort,
        ushort nQueryPort,
        uint unFlags,
        uint rTime32LastPlayedOnServer);

      bool ISteamMatchmaking_RemoveFavoriteGame(
        uint nAppID,
        uint nIP,
        ushort nConnPort,
        ushort nQueryPort,
        uint unFlags);

      SteamAPICall_t ISteamMatchmaking_RequestLobbyList();

      void ISteamMatchmaking_AddRequestLobbyListStringFilter(
        string pchKeyToMatch,
        string pchValueToMatch,
        LobbyComparison eComparisonType);

      void ISteamMatchmaking_AddRequestLobbyListNumericalFilter(
        string pchKeyToMatch,
        int nValueToMatch,
        LobbyComparison eComparisonType);

      void ISteamMatchmaking_AddRequestLobbyListNearValueFilter(
        string pchKeyToMatch,
        int nValueToBeCloseTo);

      void ISteamMatchmaking_AddRequestLobbyListFilterSlotsAvailable(int nSlotsAvailable);

      void ISteamMatchmaking_AddRequestLobbyListDistanceFilter(
        LobbyDistanceFilter eLobbyDistanceFilter);

      void ISteamMatchmaking_AddRequestLobbyListResultCountFilter(int cMaxResults);

      void ISteamMatchmaking_AddRequestLobbyListCompatibleMembersFilter(ulong steamIDLobby);

      CSteamID ISteamMatchmaking_GetLobbyByIndex(int iLobby);

      SteamAPICall_t ISteamMatchmaking_CreateLobby(LobbyType eLobbyType, int cMaxMembers);

      SteamAPICall_t ISteamMatchmaking_JoinLobby(ulong steamIDLobby);

      void ISteamMatchmaking_LeaveLobby(ulong steamIDLobby);

      bool ISteamMatchmaking_InviteUserToLobby(ulong steamIDLobby, ulong steamIDInvitee);

      int ISteamMatchmaking_GetNumLobbyMembers(ulong steamIDLobby);

      CSteamID ISteamMatchmaking_GetLobbyMemberByIndex(ulong steamIDLobby, int iMember);

      IntPtr ISteamMatchmaking_GetLobbyData(ulong steamIDLobby, string pchKey);

      bool ISteamMatchmaking_SetLobbyData(ulong steamIDLobby, string pchKey, string pchValue);

      int ISteamMatchmaking_GetLobbyDataCount(ulong steamIDLobby);

      bool ISteamMatchmaking_GetLobbyDataByIndex(
        ulong steamIDLobby,
        int iLobbyData,
        StringBuilder pchKey,
        int cchKeyBufferSize,
        StringBuilder pchValue,
        int cchValueBufferSize);

      bool ISteamMatchmaking_DeleteLobbyData(ulong steamIDLobby, string pchKey);

      IntPtr ISteamMatchmaking_GetLobbyMemberData(
        ulong steamIDLobby,
        ulong steamIDUser,
        string pchKey);

      void ISteamMatchmaking_SetLobbyMemberData(ulong steamIDLobby, string pchKey, string pchValue);

      bool ISteamMatchmaking_SendLobbyChatMsg(ulong steamIDLobby, IntPtr pvMsgBody, int cubMsgBody);

      int ISteamMatchmaking_GetLobbyChatEntry(
        ulong steamIDLobby,
        int iChatID,
        out ulong pSteamIDUser,
        IntPtr pvData,
        int cubData,
        out ChatEntryType peChatEntryType);

      bool ISteamMatchmaking_RequestLobbyData(ulong steamIDLobby);

      void ISteamMatchmaking_SetLobbyGameServer(
        ulong steamIDLobby,
        uint unGameServerIP,
        ushort unGameServerPort,
        ulong steamIDGameServer);

      bool ISteamMatchmaking_GetLobbyGameServer(
        ulong steamIDLobby,
        out uint punGameServerIP,
        out ushort punGameServerPort,
        out ulong psteamIDGameServer);

      bool ISteamMatchmaking_SetLobbyMemberLimit(ulong steamIDLobby, int cMaxMembers);

      int ISteamMatchmaking_GetLobbyMemberLimit(ulong steamIDLobby);

      bool ISteamMatchmaking_SetLobbyType(ulong steamIDLobby, LobbyType eLobbyType);

      bool ISteamMatchmaking_SetLobbyJoinable(ulong steamIDLobby, [MarshalAs(UnmanagedType.U1)] bool bLobbyJoinable);

      CSteamID ISteamMatchmaking_GetLobbyOwner(ulong steamIDLobby);

      bool ISteamMatchmaking_SetLobbyOwner(ulong steamIDLobby, ulong steamIDNewOwner);

      bool ISteamMatchmaking_SetLinkedLobby(ulong steamIDLobby, ulong steamIDLobbyDependent);

      HServerListRequest ISteamMatchmakingServers_RequestInternetServerList(
        uint iApp,
        IntPtr ppchFilters,
        uint nFilters,
        IntPtr pRequestServersResponse);

      HServerListRequest ISteamMatchmakingServers_RequestLANServerList(
        uint iApp,
        IntPtr pRequestServersResponse);

      HServerListRequest ISteamMatchmakingServers_RequestFriendsServerList(
        uint iApp,
        IntPtr ppchFilters,
        uint nFilters,
        IntPtr pRequestServersResponse);

      HServerListRequest ISteamMatchmakingServers_RequestFavoritesServerList(
        uint iApp,
        IntPtr ppchFilters,
        uint nFilters,
        IntPtr pRequestServersResponse);

      HServerListRequest ISteamMatchmakingServers_RequestHistoryServerList(
        uint iApp,
        IntPtr ppchFilters,
        uint nFilters,
        IntPtr pRequestServersResponse);

      HServerListRequest ISteamMatchmakingServers_RequestSpectatorServerList(
        uint iApp,
        IntPtr ppchFilters,
        uint nFilters,
        IntPtr pRequestServersResponse);

      void ISteamMatchmakingServers_ReleaseRequest(IntPtr hServerListRequest);

      IntPtr ISteamMatchmakingServers_GetServerDetails(IntPtr hRequest, int iServer);

      void ISteamMatchmakingServers_CancelQuery(IntPtr hRequest);

      void ISteamMatchmakingServers_RefreshQuery(IntPtr hRequest);

      bool ISteamMatchmakingServers_IsRefreshing(IntPtr hRequest);

      int ISteamMatchmakingServers_GetServerCount(IntPtr hRequest);

      void ISteamMatchmakingServers_RefreshServer(IntPtr hRequest, int iServer);

      HServerQuery ISteamMatchmakingServers_PingServer(
        uint unIP,
        ushort usPort,
        IntPtr pRequestServersResponse);

      HServerQuery ISteamMatchmakingServers_PlayerDetails(
        uint unIP,
        ushort usPort,
        IntPtr pRequestServersResponse);

      HServerQuery ISteamMatchmakingServers_ServerRules(
        uint unIP,
        ushort usPort,
        IntPtr pRequestServersResponse);

      void ISteamMatchmakingServers_CancelServerQuery(int hServerQuery);

      bool ISteamMusic_BIsEnabled();

      bool ISteamMusic_BIsPlaying();

      AudioPlayback_Status ISteamMusic_GetPlaybackStatus();

      void ISteamMusic_Play();

      void ISteamMusic_Pause();

      void ISteamMusic_PlayPrevious();

      void ISteamMusic_PlayNext();

      void ISteamMusic_SetVolume(float flVolume);

      float ISteamMusic_GetVolume();

      bool ISteamMusicRemote_RegisterSteamMusicRemote(string pchName);

      bool ISteamMusicRemote_DeregisterSteamMusicRemote();

      bool ISteamMusicRemote_BIsCurrentMusicRemote();

      bool ISteamMusicRemote_BActivationSuccess([MarshalAs(UnmanagedType.U1)] bool bValue);

      bool ISteamMusicRemote_SetDisplayName(string pchDisplayName);

      bool ISteamMusicRemote_SetPNGIcon_64x64(IntPtr pvBuffer, uint cbBufferLength);

      bool ISteamMusicRemote_EnablePlayPrevious([MarshalAs(UnmanagedType.U1)] bool bValue);

      bool ISteamMusicRemote_EnablePlayNext([MarshalAs(UnmanagedType.U1)] bool bValue);

      bool ISteamMusicRemote_EnableShuffled([MarshalAs(UnmanagedType.U1)] bool bValue);

      bool ISteamMusicRemote_EnableLooped([MarshalAs(UnmanagedType.U1)] bool bValue);

      bool ISteamMusicRemote_EnableQueue([MarshalAs(UnmanagedType.U1)] bool bValue);

      bool ISteamMusicRemote_EnablePlaylists([MarshalAs(UnmanagedType.U1)] bool bValue);

      bool ISteamMusicRemote_UpdatePlaybackStatus(AudioPlayback_Status nStatus);

      bool ISteamMusicRemote_UpdateShuffled([MarshalAs(UnmanagedType.U1)] bool bValue);

      bool ISteamMusicRemote_UpdateLooped([MarshalAs(UnmanagedType.U1)] bool bValue);

      bool ISteamMusicRemote_UpdateVolume(float flValue);

      bool ISteamMusicRemote_CurrentEntryWillChange();

      bool ISteamMusicRemote_CurrentEntryIsAvailable([MarshalAs(UnmanagedType.U1)] bool bAvailable);

      bool ISteamMusicRemote_UpdateCurrentEntryText(string pchText);

      bool ISteamMusicRemote_UpdateCurrentEntryElapsedSeconds(int nValue);

      bool ISteamMusicRemote_UpdateCurrentEntryCoverArt(IntPtr pvBuffer, uint cbBufferLength);

      bool ISteamMusicRemote_CurrentEntryDidChange();

      bool ISteamMusicRemote_QueueWillChange();

      bool ISteamMusicRemote_ResetQueueEntries();

      bool ISteamMusicRemote_SetQueueEntry(int nID, int nPosition, string pchEntryText);

      bool ISteamMusicRemote_SetCurrentQueueEntry(int nID);

      bool ISteamMusicRemote_QueueDidChange();

      bool ISteamMusicRemote_PlaylistWillChange();

      bool ISteamMusicRemote_ResetPlaylistEntries();

      bool ISteamMusicRemote_SetPlaylistEntry(int nID, int nPosition, string pchEntryText);

      bool ISteamMusicRemote_SetCurrentPlaylistEntry(int nID);

      bool ISteamMusicRemote_PlaylistDidChange();

      bool ISteamNetworking_SendP2PPacket(
        ulong steamIDRemote,
        IntPtr pubData,
        uint cubData,
        P2PSend eP2PSendType,
        int nChannel);

      bool ISteamNetworking_IsP2PPacketAvailable(out uint pcubMsgSize, int nChannel);

      bool ISteamNetworking_ReadP2PPacket(
        IntPtr pubDest,
        uint cubDest,
        out uint pcubMsgSize,
        out ulong psteamIDRemote,
        int nChannel);

      bool ISteamNetworking_AcceptP2PSessionWithUser(ulong steamIDRemote);

      bool ISteamNetworking_CloseP2PSessionWithUser(ulong steamIDRemote);

      bool ISteamNetworking_CloseP2PChannelWithUser(ulong steamIDRemote, int nChannel);

      bool ISteamNetworking_GetP2PSessionState(
        ulong steamIDRemote,
        ref P2PSessionState_t pConnectionState);

      bool ISteamNetworking_AllowP2PPacketRelay([MarshalAs(UnmanagedType.U1)] bool bAllow);

      SNetListenSocket_t ISteamNetworking_CreateListenSocket(
        int nVirtualP2PPort,
        uint nIP,
        ushort nPort,
        [MarshalAs(UnmanagedType.U1)] bool bAllowUseOfPacketRelay);

      SNetSocket_t ISteamNetworking_CreateP2PConnectionSocket(
        ulong steamIDTarget,
        int nVirtualPort,
        int nTimeoutSec,
        [MarshalAs(UnmanagedType.U1)] bool bAllowUseOfPacketRelay);

      SNetSocket_t ISteamNetworking_CreateConnectionSocket(uint nIP, ushort nPort, int nTimeoutSec);

      bool ISteamNetworking_DestroySocket(uint hSocket, [MarshalAs(UnmanagedType.U1)] bool bNotifyRemoteEnd);

      bool ISteamNetworking_DestroyListenSocket(uint hSocket, [MarshalAs(UnmanagedType.U1)] bool bNotifyRemoteEnd);

      bool ISteamNetworking_SendDataOnSocket(
        uint hSocket,
        IntPtr pubData,
        uint cubData,
        [MarshalAs(UnmanagedType.U1)] bool bReliable);

      bool ISteamNetworking_IsDataAvailableOnSocket(uint hSocket, out uint pcubMsgSize);

      bool ISteamNetworking_RetrieveDataFromSocket(
        uint hSocket,
        IntPtr pubDest,
        uint cubDest,
        out uint pcubMsgSize);

      bool ISteamNetworking_IsDataAvailable(
        uint hListenSocket,
        out uint pcubMsgSize,
        ref uint phSocket);

      bool ISteamNetworking_RetrieveData(
        uint hListenSocket,
        IntPtr pubDest,
        uint cubDest,
        out uint pcubMsgSize,
        ref uint phSocket);

      bool ISteamNetworking_GetSocketInfo(
        uint hSocket,
        out ulong pSteamIDRemote,
        IntPtr peSocketStatus,
        out uint punIPRemote,
        out ushort punPortRemote);

      bool ISteamNetworking_GetListenSocketInfo(
        uint hListenSocket,
        out uint pnIP,
        out ushort pnPort);

      SNetSocketConnectionType ISteamNetworking_GetSocketConnectionType(uint hSocket);

      int ISteamNetworking_GetMaxPacketSize(uint hSocket);

      bool ISteamRemoteStorage_FileWrite(string pchFile, IntPtr pvData, int cubData);

      int ISteamRemoteStorage_FileRead(string pchFile, IntPtr pvData, int cubDataToRead);

      SteamAPICall_t ISteamRemoteStorage_FileWriteAsync(
        string pchFile,
        IntPtr pvData,
        uint cubData);

      SteamAPICall_t ISteamRemoteStorage_FileReadAsync(
        string pchFile,
        uint nOffset,
        uint cubToRead);

      bool ISteamRemoteStorage_FileReadAsyncComplete(
        ulong hReadCall,
        IntPtr pvBuffer,
        uint cubToRead);

      bool ISteamRemoteStorage_FileForget(string pchFile);

      bool ISteamRemoteStorage_FileDelete(string pchFile);

      SteamAPICall_t ISteamRemoteStorage_FileShare(string pchFile);

      bool ISteamRemoteStorage_SetSyncPlatforms(
        string pchFile,
        RemoteStoragePlatform eRemoteStoragePlatform);

      UGCFileWriteStreamHandle_t ISteamRemoteStorage_FileWriteStreamOpen(string pchFile);

      bool ISteamRemoteStorage_FileWriteStreamWriteChunk(
        ulong writeHandle,
        IntPtr pvData,
        int cubData);

      bool ISteamRemoteStorage_FileWriteStreamClose(ulong writeHandle);

      bool ISteamRemoteStorage_FileWriteStreamCancel(ulong writeHandle);

      bool ISteamRemoteStorage_FileExists(string pchFile);

      bool ISteamRemoteStorage_FilePersisted(string pchFile);

      int ISteamRemoteStorage_GetFileSize(string pchFile);

      long ISteamRemoteStorage_GetFileTimestamp(string pchFile);

      RemoteStoragePlatform ISteamRemoteStorage_GetSyncPlatforms(string pchFile);

      int ISteamRemoteStorage_GetFileCount();

      IntPtr ISteamRemoteStorage_GetFileNameAndSize(int iFile, out int pnFileSizeInBytes);

      bool ISteamRemoteStorage_GetQuota(out ulong pnTotalBytes, out ulong puAvailableBytes);

      bool ISteamRemoteStorage_IsCloudEnabledForAccount();

      bool ISteamRemoteStorage_IsCloudEnabledForApp();

      void ISteamRemoteStorage_SetCloudEnabledForApp([MarshalAs(UnmanagedType.U1)] bool bEnabled);

      SteamAPICall_t ISteamRemoteStorage_UGCDownload(ulong hContent, uint unPriority);

      bool ISteamRemoteStorage_GetUGCDownloadProgress(
        ulong hContent,
        out int pnBytesDownloaded,
        out int pnBytesExpected);

      bool ISteamRemoteStorage_GetUGCDetails(
        ulong hContent,
        ref uint pnAppID,
        StringBuilder ppchName,
        out int pnFileSizeInBytes,
        out ulong pSteamIDOwner);

      int ISteamRemoteStorage_UGCRead(
        ulong hContent,
        IntPtr pvData,
        int cubDataToRead,
        uint cOffset,
        UGCReadAction eAction);

      int ISteamRemoteStorage_GetCachedUGCCount();

      UGCHandle_t ISteamRemoteStorage_GetCachedUGCHandle(int iCachedContent);

      SteamAPICall_t ISteamRemoteStorage_PublishWorkshopFile(
        string pchFile,
        string pchPreviewFile,
        uint nConsumerAppId,
        string pchTitle,
        string pchDescription,
        RemoteStoragePublishedFileVisibility eVisibility,
        ref SteamParamStringArray_t pTags,
        WorkshopFileType eWorkshopFileType);

      PublishedFileUpdateHandle_t ISteamRemoteStorage_CreatePublishedFileUpdateRequest(
        ulong unPublishedFileId);

      bool ISteamRemoteStorage_UpdatePublishedFileFile(ulong updateHandle, string pchFile);

      bool ISteamRemoteStorage_UpdatePublishedFilePreviewFile(
        ulong updateHandle,
        string pchPreviewFile);

      bool ISteamRemoteStorage_UpdatePublishedFileTitle(ulong updateHandle, string pchTitle);

      bool ISteamRemoteStorage_UpdatePublishedFileDescription(
        ulong updateHandle,
        string pchDescription);

      bool ISteamRemoteStorage_UpdatePublishedFileVisibility(
        ulong updateHandle,
        RemoteStoragePublishedFileVisibility eVisibility);

      bool ISteamRemoteStorage_UpdatePublishedFileTags(
        ulong updateHandle,
        ref SteamParamStringArray_t pTags);

      SteamAPICall_t ISteamRemoteStorage_CommitPublishedFileUpdate(ulong updateHandle);

      SteamAPICall_t ISteamRemoteStorage_GetPublishedFileDetails(
        ulong unPublishedFileId,
        uint unMaxSecondsOld);

      SteamAPICall_t ISteamRemoteStorage_DeletePublishedFile(ulong unPublishedFileId);

      SteamAPICall_t ISteamRemoteStorage_EnumerateUserPublishedFiles(uint unStartIndex);

      SteamAPICall_t ISteamRemoteStorage_SubscribePublishedFile(ulong unPublishedFileId);

      SteamAPICall_t ISteamRemoteStorage_EnumerateUserSubscribedFiles(uint unStartIndex);

      SteamAPICall_t ISteamRemoteStorage_UnsubscribePublishedFile(ulong unPublishedFileId);

      bool ISteamRemoteStorage_UpdatePublishedFileSetChangeDescription(
        ulong updateHandle,
        string pchChangeDescription);

      SteamAPICall_t ISteamRemoteStorage_GetPublishedItemVoteDetails(ulong unPublishedFileId);

      SteamAPICall_t ISteamRemoteStorage_UpdateUserPublishedItemVote(
        ulong unPublishedFileId,
        [MarshalAs(UnmanagedType.U1)] bool bVoteUp);

      SteamAPICall_t ISteamRemoteStorage_GetUserPublishedItemVoteDetails(ulong unPublishedFileId);

      SteamAPICall_t ISteamRemoteStorage_EnumerateUserSharedWorkshopFiles(
        ulong steamId,
        uint unStartIndex,
        ref SteamParamStringArray_t pRequiredTags,
        ref SteamParamStringArray_t pExcludedTags);

      SteamAPICall_t ISteamRemoteStorage_PublishVideo(
        WorkshopVideoProvider eVideoProvider,
        string pchVideoAccount,
        string pchVideoIdentifier,
        string pchPreviewFile,
        uint nConsumerAppId,
        string pchTitle,
        string pchDescription,
        RemoteStoragePublishedFileVisibility eVisibility,
        ref SteamParamStringArray_t pTags);

      SteamAPICall_t ISteamRemoteStorage_SetUserPublishedFileAction(
        ulong unPublishedFileId,
        WorkshopFileAction eAction);

      SteamAPICall_t ISteamRemoteStorage_EnumeratePublishedFilesByUserAction(
        WorkshopFileAction eAction,
        uint unStartIndex);

      SteamAPICall_t ISteamRemoteStorage_EnumeratePublishedWorkshopFiles(
        WorkshopEnumerationType eEnumerationType,
        uint unStartIndex,
        uint unCount,
        uint unDays,
        ref SteamParamStringArray_t pTags,
        ref SteamParamStringArray_t pUserTags);

      SteamAPICall_t ISteamRemoteStorage_UGCDownloadToLocation(
        ulong hContent,
        string pchLocation,
        uint unPriority);

      ScreenshotHandle ISteamScreenshots_WriteScreenshot(
        IntPtr pubRGB,
        uint cubRGB,
        int nWidth,
        int nHeight);

      ScreenshotHandle ISteamScreenshots_AddScreenshotToLibrary(
        string pchFilename,
        string pchThumbnailFilename,
        int nWidth,
        int nHeight);

      void ISteamScreenshots_TriggerScreenshot();

      void ISteamScreenshots_HookScreenshots([MarshalAs(UnmanagedType.U1)] bool bHook);

      bool ISteamScreenshots_SetLocation(uint hScreenshot, string pchLocation);

      bool ISteamScreenshots_TagUser(uint hScreenshot, ulong steamID);

      bool ISteamScreenshots_TagPublishedFile(uint hScreenshot, ulong unPublishedFileID);

      bool ISteamScreenshots_IsScreenshotsHooked();

      ScreenshotHandle ISteamScreenshots_AddVRScreenshotToLibrary(
        VRScreenshotType eType,
        string pchFilename,
        string pchVRFilename);

      UGCQueryHandle_t ISteamUGC_CreateQueryUserUGCRequest(
        uint unAccountID,
        UserUGCList eListType,
        UGCMatchingUGCType eMatchingUGCType,
        UserUGCListSortOrder eSortOrder,
        uint nCreatorAppID,
        uint nConsumerAppID,
        uint unPage);

      UGCQueryHandle_t ISteamUGC_CreateQueryAllUGCRequest(
        UGCQuery eQueryType,
        UGCMatchingUGCType eMatchingeMatchingUGCTypeFileType,
        uint nCreatorAppID,
        uint nConsumerAppID,
        uint unPage);

      UGCQueryHandle_t ISteamUGC_CreateQueryUGCDetailsRequest(
        IntPtr pvecPublishedFileID,
        uint unNumPublishedFileIDs);

      SteamAPICall_t ISteamUGC_SendQueryUGCRequest(ulong handle);

      bool ISteamUGC_GetQueryUGCResult(ulong handle, uint index, ref SteamUGCDetails_t pDetails);

      bool ISteamUGC_GetQueryUGCPreviewURL(
        ulong handle,
        uint index,
        StringBuilder pchURL,
        uint cchURLSize);

      bool ISteamUGC_GetQueryUGCMetadata(
        ulong handle,
        uint index,
        StringBuilder pchMetadata,
        uint cchMetadatasize);

      bool ISteamUGC_GetQueryUGCChildren(
        ulong handle,
        uint index,
        IntPtr pvecPublishedFileID,
        uint cMaxEntries);

      bool ISteamUGC_GetQueryUGCStatistic(
        ulong handle,
        uint index,
        ItemStatistic eStatType,
        out ulong pStatValue);

      uint ISteamUGC_GetQueryUGCNumAdditionalPreviews(ulong handle, uint index);

      bool ISteamUGC_GetQueryUGCAdditionalPreview(
        ulong handle,
        uint index,
        uint previewIndex,
        StringBuilder pchURLOrVideoID,
        uint cchURLSize,
        StringBuilder pchOriginalFileName,
        uint cchOriginalFileNameSize,
        out ItemPreviewType pPreviewType);

      uint ISteamUGC_GetQueryUGCNumKeyValueTags(ulong handle, uint index);

      bool ISteamUGC_GetQueryUGCKeyValueTag(
        ulong handle,
        uint index,
        uint keyValueTagIndex,
        StringBuilder pchKey,
        uint cchKeySize,
        StringBuilder pchValue,
        uint cchValueSize);

      bool ISteamUGC_ReleaseQueryUGCRequest(ulong handle);

      bool ISteamUGC_AddRequiredTag(ulong handle, string pTagName);

      bool ISteamUGC_AddExcludedTag(ulong handle, string pTagName);

      bool ISteamUGC_SetReturnOnlyIDs(ulong handle, [MarshalAs(UnmanagedType.U1)] bool bReturnOnlyIDs);

      bool ISteamUGC_SetReturnKeyValueTags(ulong handle, [MarshalAs(UnmanagedType.U1)] bool bReturnKeyValueTags);

      bool ISteamUGC_SetReturnLongDescription(ulong handle, [MarshalAs(UnmanagedType.U1)] bool bReturnLongDescription);

      bool ISteamUGC_SetReturnMetadata(ulong handle, [MarshalAs(UnmanagedType.U1)] bool bReturnMetadata);

      bool ISteamUGC_SetReturnChildren(ulong handle, [MarshalAs(UnmanagedType.U1)] bool bReturnChildren);

      bool ISteamUGC_SetReturnAdditionalPreviews(ulong handle, [MarshalAs(UnmanagedType.U1)] bool bReturnAdditionalPreviews);

      bool ISteamUGC_SetReturnTotalOnly(ulong handle, [MarshalAs(UnmanagedType.U1)] bool bReturnTotalOnly);

      bool ISteamUGC_SetReturnPlaytimeStats(ulong handle, uint unDays);

      bool ISteamUGC_SetLanguage(ulong handle, string pchLanguage);

      bool ISteamUGC_SetAllowCachedResponse(ulong handle, uint unMaxAgeSeconds);

      bool ISteamUGC_SetCloudFileNameFilter(ulong handle, string pMatchCloudFileName);

      bool ISteamUGC_SetMatchAnyTag(ulong handle, [MarshalAs(UnmanagedType.U1)] bool bMatchAnyTag);

      bool ISteamUGC_SetSearchText(ulong handle, string pSearchText);

      bool ISteamUGC_SetRankedByTrendDays(ulong handle, uint unDays);

      bool ISteamUGC_AddRequiredKeyValueTag(ulong handle, string pKey, string pValue);

      SteamAPICall_t ISteamUGC_RequestUGCDetails(ulong nPublishedFileID, uint unMaxAgeSeconds);

      SteamAPICall_t ISteamUGC_CreateItem(uint nConsumerAppId, WorkshopFileType eFileType);

      UGCUpdateHandle_t ISteamUGC_StartItemUpdate(uint nConsumerAppId, ulong nPublishedFileID);

      bool ISteamUGC_SetItemTitle(ulong handle, string pchTitle);

      bool ISteamUGC_SetItemDescription(ulong handle, string pchDescription);

      bool ISteamUGC_SetItemUpdateLanguage(ulong handle, string pchLanguage);

      bool ISteamUGC_SetItemMetadata(ulong handle, string pchMetaData);

      bool ISteamUGC_SetItemVisibility(
        ulong handle,
        RemoteStoragePublishedFileVisibility eVisibility);

      bool ISteamUGC_SetItemTags(ulong updateHandle, ref SteamParamStringArray_t pTags);

      bool ISteamUGC_SetItemContent(ulong handle, string pszContentFolder);

      bool ISteamUGC_SetItemPreview(ulong handle, string pszPreviewFile);

      bool ISteamUGC_RemoveItemKeyValueTags(ulong handle, string pchKey);

      bool ISteamUGC_AddItemKeyValueTag(ulong handle, string pchKey, string pchValue);

      bool ISteamUGC_AddItemPreviewFile(ulong handle, string pszPreviewFile, ItemPreviewType type);

      bool ISteamUGC_AddItemPreviewVideo(ulong handle, string pszVideoID);

      bool ISteamUGC_UpdateItemPreviewFile(ulong handle, uint index, string pszPreviewFile);

      bool ISteamUGC_UpdateItemPreviewVideo(ulong handle, uint index, string pszVideoID);

      bool ISteamUGC_RemoveItemPreview(ulong handle, uint index);

      SteamAPICall_t ISteamUGC_SubmitItemUpdate(ulong handle, string pchChangeNote);

      ItemUpdateStatus ISteamUGC_GetItemUpdateProgress(
        ulong handle,
        out ulong punBytesProcessed,
        out ulong punBytesTotal);

      SteamAPICall_t ISteamUGC_SetUserItemVote(ulong nPublishedFileID, [MarshalAs(UnmanagedType.U1)] bool bVoteUp);

      SteamAPICall_t ISteamUGC_GetUserItemVote(ulong nPublishedFileID);

      SteamAPICall_t ISteamUGC_AddItemToFavorites(uint nAppId, ulong nPublishedFileID);

      SteamAPICall_t ISteamUGC_RemoveItemFromFavorites(uint nAppId, ulong nPublishedFileID);

      SteamAPICall_t ISteamUGC_SubscribeItem(ulong nPublishedFileID);

      SteamAPICall_t ISteamUGC_UnsubscribeItem(ulong nPublishedFileID);

      uint ISteamUGC_GetNumSubscribedItems();

      uint ISteamUGC_GetSubscribedItems(IntPtr pvecPublishedFileID, uint cMaxEntries);

      uint ISteamUGC_GetItemState(ulong nPublishedFileID);

      bool ISteamUGC_GetItemInstallInfo(
        ulong nPublishedFileID,
        out ulong punSizeOnDisk,
        StringBuilder pchFolder,
        uint cchFolderSize,
        out uint punTimeStamp);

      bool ISteamUGC_GetItemDownloadInfo(
        ulong nPublishedFileID,
        out ulong punBytesDownloaded,
        out ulong punBytesTotal);

      bool ISteamUGC_DownloadItem(ulong nPublishedFileID, [MarshalAs(UnmanagedType.U1)] bool bHighPriority);

      bool ISteamUGC_BInitWorkshopForGameServer(uint unWorkshopDepotID, string pszFolder);

      void ISteamUGC_SuspendDownloads([MarshalAs(UnmanagedType.U1)] bool bSuspend);

      SteamAPICall_t ISteamUGC_StartPlaytimeTracking(
        IntPtr pvecPublishedFileID,
        uint unNumPublishedFileIDs);

      SteamAPICall_t ISteamUGC_StopPlaytimeTracking(
        IntPtr pvecPublishedFileID,
        uint unNumPublishedFileIDs);

      SteamAPICall_t ISteamUGC_StopPlaytimeTrackingForAllItems();

      SteamAPICall_t ISteamUGC_AddDependency(
        ulong nParentPublishedFileID,
        ulong nChildPublishedFileID);

      SteamAPICall_t ISteamUGC_RemoveDependency(
        ulong nParentPublishedFileID,
        ulong nChildPublishedFileID);

      ClientUnifiedMessageHandle ISteamUnifiedMessages_SendMethod(
        string pchServiceMethod,
        IntPtr pRequestBuffer,
        uint unRequestBufferSize,
        ulong unContext);

      bool ISteamUnifiedMessages_GetMethodResponseInfo(
        ulong hHandle,
        out uint punResponseSize,
        out Result peResult);

      bool ISteamUnifiedMessages_GetMethodResponseData(
        ulong hHandle,
        IntPtr pResponseBuffer,
        uint unResponseBufferSize,
        [MarshalAs(UnmanagedType.U1)] bool bAutoRelease);

      bool ISteamUnifiedMessages_ReleaseMethod(ulong hHandle);

      bool ISteamUnifiedMessages_SendNotification(
        string pchServiceNotification,
        IntPtr pNotificationBuffer,
        uint unNotificationBufferSize);

      HSteamUser ISteamUser_GetHSteamUser();

      bool ISteamUser_BLoggedOn();

      CSteamID ISteamUser_GetSteamID();

      int ISteamUser_InitiateGameConnection(
        IntPtr pAuthBlob,
        int cbMaxAuthBlob,
        ulong steamIDGameServer,
        uint unIPServer,
        ushort usPortServer,
        [MarshalAs(UnmanagedType.U1)] bool bSecure);

      void ISteamUser_TerminateGameConnection(uint unIPServer, ushort usPortServer);

      void ISteamUser_TrackAppUsageEvent(ulong gameID, int eAppUsageEvent, string pchExtraInfo);

      bool ISteamUser_GetUserDataFolder(StringBuilder pchBuffer, int cubBuffer);

      void ISteamUser_StartVoiceRecording();

      void ISteamUser_StopVoiceRecording();

      VoiceResult ISteamUser_GetAvailableVoice(
        out uint pcbCompressed,
        out uint pcbUncompressed_Deprecated,
        uint nUncompressedVoiceDesiredSampleRate_Deprecated);

      VoiceResult ISteamUser_GetVoice(
        [MarshalAs(UnmanagedType.U1)] bool bWantCompressed,
        IntPtr pDestBuffer,
        uint cbDestBufferSize,
        out uint nBytesWritten,
        [MarshalAs(UnmanagedType.U1)] bool bWantUncompressed_Deprecated,
        IntPtr pUncompressedDestBuffer_Deprecated,
        uint cbUncompressedDestBufferSize_Deprecated,
        out uint nUncompressBytesWritten_Deprecated,
        uint nUncompressedVoiceDesiredSampleRate_Deprecated);

      VoiceResult ISteamUser_DecompressVoice(
        IntPtr pCompressed,
        uint cbCompressed,
        IntPtr pDestBuffer,
        uint cbDestBufferSize,
        out uint nBytesWritten,
        uint nDesiredSampleRate);

      uint ISteamUser_GetVoiceOptimalSampleRate();

      HAuthTicket ISteamUser_GetAuthSessionTicket(
        IntPtr pTicket,
        int cbMaxTicket,
        out uint pcbTicket);

      BeginAuthSessionResult ISteamUser_BeginAuthSession(
        IntPtr pAuthTicket,
        int cbAuthTicket,
        ulong steamID);

      void ISteamUser_EndAuthSession(ulong steamID);

      void ISteamUser_CancelAuthTicket(uint hAuthTicket);

      UserHasLicenseForAppResult ISteamUser_UserHasLicenseForApp(ulong steamID, uint appID);

      bool ISteamUser_BIsBehindNAT();

      void ISteamUser_AdvertiseGame(ulong steamIDGameServer, uint unIPServer, ushort usPortServer);

      SteamAPICall_t ISteamUser_RequestEncryptedAppTicket(
        IntPtr pDataToInclude,
        int cbDataToInclude);

      bool ISteamUser_GetEncryptedAppTicket(IntPtr pTicket, int cbMaxTicket, out uint pcbTicket);

      int ISteamUser_GetGameBadgeLevel(int nSeries, [MarshalAs(UnmanagedType.U1)] bool bFoil);

      int ISteamUser_GetPlayerSteamLevel();

      SteamAPICall_t ISteamUser_RequestStoreAuthURL(string pchRedirectURL);

      bool ISteamUser_BIsPhoneVerified();

      bool ISteamUser_BIsTwoFactorEnabled();

      bool ISteamUser_BIsPhoneIdentifying();

      bool ISteamUser_BIsPhoneRequiringVerification();

      bool ISteamUserStats_RequestCurrentStats();

      bool ISteamUserStats_GetStat(string pchName, out int pData);

      bool ISteamUserStats_GetStat0(string pchName, out float pData);

      bool ISteamUserStats_SetStat(string pchName, int nData);

      bool ISteamUserStats_SetStat0(string pchName, float fData);

      bool ISteamUserStats_UpdateAvgRateStat(
        string pchName,
        float flCountThisSession,
        double dSessionLength);

      bool ISteamUserStats_GetAchievement(string pchName, [MarshalAs(UnmanagedType.U1)] ref bool pbAchieved);

      bool ISteamUserStats_SetAchievement(string pchName);

      bool ISteamUserStats_ClearAchievement(string pchName);

      bool ISteamUserStats_GetAchievementAndUnlockTime(
        string pchName,
        [MarshalAs(UnmanagedType.U1)] ref bool pbAchieved,
        out uint punUnlockTime);

      bool ISteamUserStats_StoreStats();

      int ISteamUserStats_GetAchievementIcon(string pchName);

      IntPtr ISteamUserStats_GetAchievementDisplayAttribute(string pchName, string pchKey);

      bool ISteamUserStats_IndicateAchievementProgress(
        string pchName,
        uint nCurProgress,
        uint nMaxProgress);

      uint ISteamUserStats_GetNumAchievements();

      IntPtr ISteamUserStats_GetAchievementName(uint iAchievement);

      SteamAPICall_t ISteamUserStats_RequestUserStats(ulong steamIDUser);

      bool ISteamUserStats_GetUserStat(ulong steamIDUser, string pchName, out int pData);

      bool ISteamUserStats_GetUserStat0(ulong steamIDUser, string pchName, out float pData);

      bool ISteamUserStats_GetUserAchievement(
        ulong steamIDUser,
        string pchName,
        [MarshalAs(UnmanagedType.U1)] ref bool pbAchieved);

      bool ISteamUserStats_GetUserAchievementAndUnlockTime(
        ulong steamIDUser,
        string pchName,
        [MarshalAs(UnmanagedType.U1)] ref bool pbAchieved,
        out uint punUnlockTime);

      bool ISteamUserStats_ResetAllStats([MarshalAs(UnmanagedType.U1)] bool bAchievementsToo);

      SteamAPICall_t ISteamUserStats_FindOrCreateLeaderboard(
        string pchLeaderboardName,
        LeaderboardSortMethod eLeaderboardSortMethod,
        LeaderboardDisplayType eLeaderboardDisplayType);

      SteamAPICall_t ISteamUserStats_FindLeaderboard(string pchLeaderboardName);

      IntPtr ISteamUserStats_GetLeaderboardName(ulong hSteamLeaderboard);

      int ISteamUserStats_GetLeaderboardEntryCount(ulong hSteamLeaderboard);

      LeaderboardSortMethod ISteamUserStats_GetLeaderboardSortMethod(ulong hSteamLeaderboard);

      LeaderboardDisplayType ISteamUserStats_GetLeaderboardDisplayType(ulong hSteamLeaderboard);

      SteamAPICall_t ISteamUserStats_DownloadLeaderboardEntries(
        ulong hSteamLeaderboard,
        LeaderboardDataRequest eLeaderboardDataRequest,
        int nRangeStart,
        int nRangeEnd);

      SteamAPICall_t ISteamUserStats_DownloadLeaderboardEntriesForUsers(
        ulong hSteamLeaderboard,
        IntPtr prgUsers,
        int cUsers);

      bool ISteamUserStats_GetDownloadedLeaderboardEntry(
        ulong hSteamLeaderboardEntries,
        int index,
        ref LeaderboardEntry_t pLeaderboardEntry,
        IntPtr pDetails,
        int cDetailsMax);

      SteamAPICall_t ISteamUserStats_UploadLeaderboardScore(
        ulong hSteamLeaderboard,
        LeaderboardUploadScoreMethod eLeaderboardUploadScoreMethod,
        int nScore,
        int[] pScoreDetails,
        int cScoreDetailsCount);

      SteamAPICall_t ISteamUserStats_AttachLeaderboardUGC(ulong hSteamLeaderboard, ulong hUGC);

      SteamAPICall_t ISteamUserStats_GetNumberOfCurrentPlayers();

      SteamAPICall_t ISteamUserStats_RequestGlobalAchievementPercentages();

      int ISteamUserStats_GetMostAchievedAchievementInfo(
        StringBuilder pchName,
        uint unNameBufLen,
        out float pflPercent,
        [MarshalAs(UnmanagedType.U1)] ref bool pbAchieved);

      int ISteamUserStats_GetNextMostAchievedAchievementInfo(
        int iIteratorPrevious,
        StringBuilder pchName,
        uint unNameBufLen,
        out float pflPercent,
        [MarshalAs(UnmanagedType.U1)] ref bool pbAchieved);

      bool ISteamUserStats_GetAchievementAchievedPercent(string pchName, out float pflPercent);

      SteamAPICall_t ISteamUserStats_RequestGlobalStats(int nHistoryDays);

      bool ISteamUserStats_GetGlobalStat(string pchStatName, out long pData);

      bool ISteamUserStats_GetGlobalStat0(string pchStatName, out double pData);

      int ISteamUserStats_GetGlobalStatHistory(string pchStatName, out long pData, uint cubData);

      int ISteamUserStats_GetGlobalStatHistory0(string pchStatName, out double pData, uint cubData);

      uint ISteamUtils_GetSecondsSinceAppActive();

      uint ISteamUtils_GetSecondsSinceComputerActive();

      Universe ISteamUtils_GetConnectedUniverse();

      uint ISteamUtils_GetServerRealTime();

      IntPtr ISteamUtils_GetIPCountry();

      bool ISteamUtils_GetImageSize(int iImage, out uint pnWidth, out uint pnHeight);

      bool ISteamUtils_GetImageRGBA(int iImage, IntPtr pubDest, int nDestBufferSize);

      bool ISteamUtils_GetCSERIPPort(out uint unIP, out ushort usPort);

      byte ISteamUtils_GetCurrentBatteryPower();

      uint ISteamUtils_GetAppID();

      void ISteamUtils_SetOverlayNotificationPosition(NotificationPosition eNotificationPosition);

      bool ISteamUtils_IsAPICallCompleted(ulong hSteamAPICall, [MarshalAs(UnmanagedType.U1)] ref bool pbFailed);

      SteamAPICallFailure ISteamUtils_GetAPICallFailureReason(ulong hSteamAPICall);

      bool ISteamUtils_GetAPICallResult(
        ulong hSteamAPICall,
        IntPtr pCallback,
        int cubCallback,
        int iCallbackExpected,
        [MarshalAs(UnmanagedType.U1)] ref bool pbFailed);

      uint ISteamUtils_GetIPCCallCount();

      void ISteamUtils_SetWarningMessageHook(IntPtr pFunction);

      bool ISteamUtils_IsOverlayEnabled();

      bool ISteamUtils_BOverlayNeedsPresent();

      SteamAPICall_t ISteamUtils_CheckFileSignature(string szFileName);

      bool ISteamUtils_ShowGamepadTextInput(
        GamepadTextInputMode eInputMode,
        GamepadTextInputLineMode eLineInputMode,
        string pchDescription,
        uint unCharMax,
        string pchExistingText);

      uint ISteamUtils_GetEnteredGamepadTextLength();

      bool ISteamUtils_GetEnteredGamepadTextInput(StringBuilder pchText, uint cchText);

      IntPtr ISteamUtils_GetSteamUILanguage();

      bool ISteamUtils_IsSteamRunningInVR();

      void ISteamUtils_SetOverlayNotificationInset(int nHorizontalInset, int nVerticalInset);

      bool ISteamUtils_IsSteamInBigPictureMode();

      void ISteamUtils_StartVRDashboard();

      bool ISteamUtils_IsVRHeadsetStreamingEnabled();

      void ISteamUtils_SetVRHeadsetStreamingEnabled([MarshalAs(UnmanagedType.U1)] bool bEnabled);

      void ISteamVideo_GetVideoURL(uint unVideoAppID);

      bool ISteamVideo_IsBroadcasting(IntPtr pnNumViewers);

      void ISteamVideo_GetOPFSettings(uint unVideoAppID);

      bool ISteamVideo_GetOPFStringForApp(
        uint unVideoAppID,
        StringBuilder pchBuffer,
        out int pnBufferSize);

      bool SteamApi_SteamAPI_Init();

      void SteamApi_SteamAPI_RunCallbacks();

      void SteamApi_SteamGameServer_RunCallbacks();

      void SteamApi_SteamAPI_RegisterCallback(IntPtr pCallback, int callback);

      void SteamApi_SteamAPI_UnregisterCallback(IntPtr pCallback);

      void SteamApi_SteamAPI_RegisterCallResult(IntPtr pCallback, ulong callback);

      void SteamApi_SteamAPI_UnregisterCallResult(IntPtr pCallback, ulong callback);

      bool SteamApi_SteamInternal_GameServer_Init(
        uint unIP,
        ushort usPort,
        ushort usGamePort,
        ushort usQueryPort,
        int eServerMode,
        string pchVersionString);

      void SteamApi_SteamAPI_Shutdown();

      void SteamApi_SteamGameServer_Shutdown();

      HSteamUser SteamApi_SteamAPI_GetHSteamUser();

      HSteamPipe SteamApi_SteamAPI_GetHSteamPipe();

      HSteamUser SteamApi_SteamGameServer_GetHSteamUser();

      HSteamPipe SteamApi_SteamGameServer_GetHSteamPipe();

      IntPtr SteamApi_SteamInternal_CreateInterface(string version);

      bool SteamApi_SteamAPI_RestartAppIfNecessary(uint unOwnAppID);
    }

    internal class Linux32 : Platform.Interface, IDisposable
    {
      internal IntPtr _ptr;

      public bool IsValid => this._ptr != IntPtr.Zero;

      internal Linux32(IntPtr pointer) => this._ptr = pointer;

      public virtual void Dispose() => this._ptr = IntPtr.Zero;

      public virtual HSteamPipe ISteamClient_CreateSteamPipe()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamClient_CreateSteamPipe(this._ptr) : throw new Exception("ISteamClient _ptr is null!");
      }

      public virtual bool ISteamClient_BReleaseSteamPipe(int hSteamPipe)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamClient_BReleaseSteamPipe(this._ptr, hSteamPipe) : throw new Exception("ISteamClient _ptr is null!");
      }

      public virtual HSteamUser ISteamClient_ConnectToGlobalUser(int hSteamPipe)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamClient_ConnectToGlobalUser(this._ptr, hSteamPipe) : throw new Exception("ISteamClient _ptr is null!");
      }

      public virtual HSteamUser ISteamClient_CreateLocalUser(
        out int phSteamPipe,
        AccountType eAccountType)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamClient_CreateLocalUser(this._ptr, out phSteamPipe, eAccountType) : throw new Exception("ISteamClient _ptr is null!");
      }

      public virtual void ISteamClient_ReleaseUser(int hSteamPipe, int hUser)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamClient _ptr is null!");
        Platform.Linux32.Native.SteamAPI_ISteamClient_ReleaseUser(this._ptr, hSteamPipe, hUser);
      }

      public virtual IntPtr ISteamClient_GetISteamUser(
        int hSteamUser,
        int hSteamPipe,
        string pchVersion)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamClient _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamClient_GetISteamUser(this._ptr, hSteamUser, hSteamPipe, pchVersion);
      }

      public virtual IntPtr ISteamClient_GetISteamGameServer(
        int hSteamUser,
        int hSteamPipe,
        string pchVersion)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamClient _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamClient_GetISteamGameServer(this._ptr, hSteamUser, hSteamPipe, pchVersion);
      }

      public virtual void ISteamClient_SetLocalIPBinding(uint unIP, ushort usPort)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamClient _ptr is null!");
        Platform.Linux32.Native.SteamAPI_ISteamClient_SetLocalIPBinding(this._ptr, unIP, usPort);
      }

      public virtual IntPtr ISteamClient_GetISteamFriends(
        int hSteamUser,
        int hSteamPipe,
        string pchVersion)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamClient _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamClient_GetISteamFriends(this._ptr, hSteamUser, hSteamPipe, pchVersion);
      }

      public virtual IntPtr ISteamClient_GetISteamUtils(int hSteamPipe, string pchVersion)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamClient _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamClient_GetISteamUtils(this._ptr, hSteamPipe, pchVersion);
      }

      public virtual IntPtr ISteamClient_GetISteamMatchmaking(
        int hSteamUser,
        int hSteamPipe,
        string pchVersion)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamClient _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamClient_GetISteamMatchmaking(this._ptr, hSteamUser, hSteamPipe, pchVersion);
      }

      public virtual IntPtr ISteamClient_GetISteamMatchmakingServers(
        int hSteamUser,
        int hSteamPipe,
        string pchVersion)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamClient _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamClient_GetISteamMatchmakingServers(this._ptr, hSteamUser, hSteamPipe, pchVersion);
      }

      public virtual IntPtr ISteamClient_GetISteamGenericInterface(
        int hSteamUser,
        int hSteamPipe,
        string pchVersion)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamClient _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamClient_GetISteamGenericInterface(this._ptr, hSteamUser, hSteamPipe, pchVersion);
      }

      public virtual IntPtr ISteamClient_GetISteamUserStats(
        int hSteamUser,
        int hSteamPipe,
        string pchVersion)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamClient _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamClient_GetISteamUserStats(this._ptr, hSteamUser, hSteamPipe, pchVersion);
      }

      public virtual IntPtr ISteamClient_GetISteamGameServerStats(
        int hSteamuser,
        int hSteamPipe,
        string pchVersion)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamClient _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamClient_GetISteamGameServerStats(this._ptr, hSteamuser, hSteamPipe, pchVersion);
      }

      public virtual IntPtr ISteamClient_GetISteamApps(
        int hSteamUser,
        int hSteamPipe,
        string pchVersion)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamClient _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamClient_GetISteamApps(this._ptr, hSteamUser, hSteamPipe, pchVersion);
      }

      public virtual IntPtr ISteamClient_GetISteamNetworking(
        int hSteamUser,
        int hSteamPipe,
        string pchVersion)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamClient _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamClient_GetISteamNetworking(this._ptr, hSteamUser, hSteamPipe, pchVersion);
      }

      public virtual IntPtr ISteamClient_GetISteamRemoteStorage(
        int hSteamuser,
        int hSteamPipe,
        string pchVersion)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamClient _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamClient_GetISteamRemoteStorage(this._ptr, hSteamuser, hSteamPipe, pchVersion);
      }

      public virtual IntPtr ISteamClient_GetISteamScreenshots(
        int hSteamuser,
        int hSteamPipe,
        string pchVersion)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamClient _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamClient_GetISteamScreenshots(this._ptr, hSteamuser, hSteamPipe, pchVersion);
      }

      public virtual uint ISteamClient_GetIPCCallCount()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamClient_GetIPCCallCount(this._ptr) : throw new Exception("ISteamClient _ptr is null!");
      }

      public virtual void ISteamClient_SetWarningMessageHook(IntPtr pFunction)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamClient _ptr is null!");
        Platform.Linux32.Native.SteamAPI_ISteamClient_SetWarningMessageHook(this._ptr, pFunction);
      }

      public virtual bool ISteamClient_BShutdownIfAllPipesClosed()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamClient_BShutdownIfAllPipesClosed(this._ptr) : throw new Exception("ISteamClient _ptr is null!");
      }

      public virtual IntPtr ISteamClient_GetISteamHTTP(
        int hSteamuser,
        int hSteamPipe,
        string pchVersion)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamClient _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamClient_GetISteamHTTP(this._ptr, hSteamuser, hSteamPipe, pchVersion);
      }

      public virtual IntPtr ISteamClient_GetISteamUnifiedMessages(
        int hSteamuser,
        int hSteamPipe,
        string pchVersion)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamClient _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamClient_GetISteamUnifiedMessages(this._ptr, hSteamuser, hSteamPipe, pchVersion);
      }

      public virtual IntPtr ISteamClient_GetISteamController(
        int hSteamUser,
        int hSteamPipe,
        string pchVersion)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamClient _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamClient_GetISteamController(this._ptr, hSteamUser, hSteamPipe, pchVersion);
      }

      public virtual IntPtr ISteamClient_GetISteamUGC(
        int hSteamUser,
        int hSteamPipe,
        string pchVersion)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamClient _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamClient_GetISteamUGC(this._ptr, hSteamUser, hSteamPipe, pchVersion);
      }

      public virtual IntPtr ISteamClient_GetISteamAppList(
        int hSteamUser,
        int hSteamPipe,
        string pchVersion)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamClient _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamClient_GetISteamAppList(this._ptr, hSteamUser, hSteamPipe, pchVersion);
      }

      public virtual IntPtr ISteamClient_GetISteamMusic(
        int hSteamuser,
        int hSteamPipe,
        string pchVersion)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamClient _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamClient_GetISteamMusic(this._ptr, hSteamuser, hSteamPipe, pchVersion);
      }

      public virtual IntPtr ISteamClient_GetISteamMusicRemote(
        int hSteamuser,
        int hSteamPipe,
        string pchVersion)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamClient _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamClient_GetISteamMusicRemote(this._ptr, hSteamuser, hSteamPipe, pchVersion);
      }

      public virtual IntPtr ISteamClient_GetISteamHTMLSurface(
        int hSteamuser,
        int hSteamPipe,
        string pchVersion)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamClient _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamClient_GetISteamHTMLSurface(this._ptr, hSteamuser, hSteamPipe, pchVersion);
      }

      public virtual IntPtr ISteamClient_GetISteamInventory(
        int hSteamuser,
        int hSteamPipe,
        string pchVersion)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamClient _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamClient_GetISteamInventory(this._ptr, hSteamuser, hSteamPipe, pchVersion);
      }

      public virtual IntPtr ISteamClient_GetISteamVideo(
        int hSteamuser,
        int hSteamPipe,
        string pchVersion)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamClient _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamClient_GetISteamVideo(this._ptr, hSteamuser, hSteamPipe, pchVersion);
      }

      public virtual HSteamUser ISteamUser_GetHSteamUser()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamUser_GetHSteamUser(this._ptr) : throw new Exception("ISteamUser _ptr is null!");
      }

      public virtual bool ISteamUser_BLoggedOn()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamUser_BLoggedOn(this._ptr) : throw new Exception("ISteamUser _ptr is null!");
      }

      public virtual CSteamID ISteamUser_GetSteamID()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamUser_GetSteamID(this._ptr) : throw new Exception("ISteamUser _ptr is null!");
      }

      public virtual int ISteamUser_InitiateGameConnection(
        IntPtr pAuthBlob,
        int cbMaxAuthBlob,
        ulong steamIDGameServer,
        uint unIPServer,
        ushort usPortServer,
        [MarshalAs(UnmanagedType.U1)] bool bSecure)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUser _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamUser_InitiateGameConnection(this._ptr, pAuthBlob, cbMaxAuthBlob, steamIDGameServer, unIPServer, usPortServer, bSecure);
      }

      public virtual void ISteamUser_TerminateGameConnection(uint unIPServer, ushort usPortServer)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUser _ptr is null!");
        Platform.Linux32.Native.SteamAPI_ISteamUser_TerminateGameConnection(this._ptr, unIPServer, usPortServer);
      }

      public virtual void ISteamUser_TrackAppUsageEvent(
        ulong gameID,
        int eAppUsageEvent,
        string pchExtraInfo)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUser _ptr is null!");
        Platform.Linux32.Native.SteamAPI_ISteamUser_TrackAppUsageEvent(this._ptr, gameID, eAppUsageEvent, pchExtraInfo);
      }

      public virtual bool ISteamUser_GetUserDataFolder(StringBuilder pchBuffer, int cubBuffer)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUser _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamUser_GetUserDataFolder(this._ptr, pchBuffer, cubBuffer);
      }

      public virtual void ISteamUser_StartVoiceRecording()
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUser _ptr is null!");
        Platform.Linux32.Native.SteamAPI_ISteamUser_StartVoiceRecording(this._ptr);
      }

      public virtual void ISteamUser_StopVoiceRecording()
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUser _ptr is null!");
        Platform.Linux32.Native.SteamAPI_ISteamUser_StopVoiceRecording(this._ptr);
      }

      public virtual VoiceResult ISteamUser_GetAvailableVoice(
        out uint pcbCompressed,
        out uint pcbUncompressed_Deprecated,
        uint nUncompressedVoiceDesiredSampleRate_Deprecated)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamUser_GetAvailableVoice(this._ptr, out pcbCompressed, out pcbUncompressed_Deprecated, nUncompressedVoiceDesiredSampleRate_Deprecated) : throw new Exception("ISteamUser _ptr is null!");
      }

      public virtual VoiceResult ISteamUser_GetVoice(
        [MarshalAs(UnmanagedType.U1)] bool bWantCompressed,
        IntPtr pDestBuffer,
        uint cbDestBufferSize,
        out uint nBytesWritten,
        [MarshalAs(UnmanagedType.U1)] bool bWantUncompressed_Deprecated,
        IntPtr pUncompressedDestBuffer_Deprecated,
        uint cbUncompressedDestBufferSize_Deprecated,
        out uint nUncompressBytesWritten_Deprecated,
        uint nUncompressedVoiceDesiredSampleRate_Deprecated)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUser _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamUser_GetVoice(this._ptr, bWantCompressed, pDestBuffer, cbDestBufferSize, out nBytesWritten, bWantUncompressed_Deprecated, pUncompressedDestBuffer_Deprecated, cbUncompressedDestBufferSize_Deprecated, out nUncompressBytesWritten_Deprecated, nUncompressedVoiceDesiredSampleRate_Deprecated);
      }

      public virtual VoiceResult ISteamUser_DecompressVoice(
        IntPtr pCompressed,
        uint cbCompressed,
        IntPtr pDestBuffer,
        uint cbDestBufferSize,
        out uint nBytesWritten,
        uint nDesiredSampleRate)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUser _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamUser_DecompressVoice(this._ptr, pCompressed, cbCompressed, pDestBuffer, cbDestBufferSize, out nBytesWritten, nDesiredSampleRate);
      }

      public virtual uint ISteamUser_GetVoiceOptimalSampleRate()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamUser_GetVoiceOptimalSampleRate(this._ptr) : throw new Exception("ISteamUser _ptr is null!");
      }

      public virtual HAuthTicket ISteamUser_GetAuthSessionTicket(
        IntPtr pTicket,
        int cbMaxTicket,
        out uint pcbTicket)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUser _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamUser_GetAuthSessionTicket(this._ptr, pTicket, cbMaxTicket, out pcbTicket);
      }

      public virtual BeginAuthSessionResult ISteamUser_BeginAuthSession(
        IntPtr pAuthTicket,
        int cbAuthTicket,
        ulong steamID)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUser _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamUser_BeginAuthSession(this._ptr, pAuthTicket, cbAuthTicket, steamID);
      }

      public virtual void ISteamUser_EndAuthSession(ulong steamID)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUser _ptr is null!");
        Platform.Linux32.Native.SteamAPI_ISteamUser_EndAuthSession(this._ptr, steamID);
      }

      public virtual void ISteamUser_CancelAuthTicket(uint hAuthTicket)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUser _ptr is null!");
        Platform.Linux32.Native.SteamAPI_ISteamUser_CancelAuthTicket(this._ptr, hAuthTicket);
      }

      public virtual UserHasLicenseForAppResult ISteamUser_UserHasLicenseForApp(
        ulong steamID,
        uint appID)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUser _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamUser_UserHasLicenseForApp(this._ptr, steamID, appID);
      }

      public virtual bool ISteamUser_BIsBehindNAT()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamUser_BIsBehindNAT(this._ptr) : throw new Exception("ISteamUser _ptr is null!");
      }

      public virtual void ISteamUser_AdvertiseGame(
        ulong steamIDGameServer,
        uint unIPServer,
        ushort usPortServer)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUser _ptr is null!");
        Platform.Linux32.Native.SteamAPI_ISteamUser_AdvertiseGame(this._ptr, steamIDGameServer, unIPServer, usPortServer);
      }

      public virtual SteamAPICall_t ISteamUser_RequestEncryptedAppTicket(
        IntPtr pDataToInclude,
        int cbDataToInclude)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUser _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamUser_RequestEncryptedAppTicket(this._ptr, pDataToInclude, cbDataToInclude);
      }

      public virtual bool ISteamUser_GetEncryptedAppTicket(
        IntPtr pTicket,
        int cbMaxTicket,
        out uint pcbTicket)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUser _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamUser_GetEncryptedAppTicket(this._ptr, pTicket, cbMaxTicket, out pcbTicket);
      }

      public virtual int ISteamUser_GetGameBadgeLevel(int nSeries, [MarshalAs(UnmanagedType.U1)] bool bFoil)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUser _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamUser_GetGameBadgeLevel(this._ptr, nSeries, bFoil);
      }

      public virtual int ISteamUser_GetPlayerSteamLevel()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamUser_GetPlayerSteamLevel(this._ptr) : throw new Exception("ISteamUser _ptr is null!");
      }

      public virtual SteamAPICall_t ISteamUser_RequestStoreAuthURL(string pchRedirectURL)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamUser_RequestStoreAuthURL(this._ptr, pchRedirectURL) : throw new Exception("ISteamUser _ptr is null!");
      }

      public virtual bool ISteamUser_BIsPhoneVerified()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamUser_BIsPhoneVerified(this._ptr) : throw new Exception("ISteamUser _ptr is null!");
      }

      public virtual bool ISteamUser_BIsTwoFactorEnabled()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamUser_BIsTwoFactorEnabled(this._ptr) : throw new Exception("ISteamUser _ptr is null!");
      }

      public virtual bool ISteamUser_BIsPhoneIdentifying()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamUser_BIsPhoneIdentifying(this._ptr) : throw new Exception("ISteamUser _ptr is null!");
      }

      public virtual bool ISteamUser_BIsPhoneRequiringVerification()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamUser_BIsPhoneRequiringVerification(this._ptr) : throw new Exception("ISteamUser _ptr is null!");
      }

      public virtual IntPtr ISteamFriends_GetPersonaName()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamFriends_GetPersonaName(this._ptr) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual SteamAPICall_t ISteamFriends_SetPersonaName(string pchPersonaName)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamFriends_SetPersonaName(this._ptr, pchPersonaName) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual PersonaState ISteamFriends_GetPersonaState()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamFriends_GetPersonaState(this._ptr) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual int ISteamFriends_GetFriendCount(int iFriendFlags)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamFriends_GetFriendCount(this._ptr, iFriendFlags) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual CSteamID ISteamFriends_GetFriendByIndex(int iFriend, int iFriendFlags)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamFriends _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamFriends_GetFriendByIndex(this._ptr, iFriend, iFriendFlags);
      }

      public virtual FriendRelationship ISteamFriends_GetFriendRelationship(ulong steamIDFriend)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamFriends_GetFriendRelationship(this._ptr, steamIDFriend) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual PersonaState ISteamFriends_GetFriendPersonaState(ulong steamIDFriend)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamFriends_GetFriendPersonaState(this._ptr, steamIDFriend) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual IntPtr ISteamFriends_GetFriendPersonaName(ulong steamIDFriend)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamFriends_GetFriendPersonaName(this._ptr, steamIDFriend) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual bool ISteamFriends_GetFriendGamePlayed(
        ulong steamIDFriend,
        ref FriendGameInfo_t pFriendGameInfo)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamFriends _ptr is null!");
        FriendGameInfo_t.PackSmall pFriendGameInfo1 = new FriendGameInfo_t.PackSmall();
        bool friendGamePlayed = Platform.Linux32.Native.SteamAPI_ISteamFriends_GetFriendGamePlayed(this._ptr, steamIDFriend, ref pFriendGameInfo1);
        pFriendGameInfo = (FriendGameInfo_t) pFriendGameInfo1;
        return friendGamePlayed;
      }

      public virtual IntPtr ISteamFriends_GetFriendPersonaNameHistory(
        ulong steamIDFriend,
        int iPersonaName)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamFriends _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamFriends_GetFriendPersonaNameHistory(this._ptr, steamIDFriend, iPersonaName);
      }

      public virtual int ISteamFriends_GetFriendSteamLevel(ulong steamIDFriend)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamFriends_GetFriendSteamLevel(this._ptr, steamIDFriend) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual IntPtr ISteamFriends_GetPlayerNickname(ulong steamIDPlayer)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamFriends_GetPlayerNickname(this._ptr, steamIDPlayer) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual int ISteamFriends_GetFriendsGroupCount()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamFriends_GetFriendsGroupCount(this._ptr) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual FriendsGroupID_t ISteamFriends_GetFriendsGroupIDByIndex(int iFG)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamFriends_GetFriendsGroupIDByIndex(this._ptr, iFG) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual IntPtr ISteamFriends_GetFriendsGroupName(short friendsGroupID)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamFriends_GetFriendsGroupName(this._ptr, friendsGroupID) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual int ISteamFriends_GetFriendsGroupMembersCount(short friendsGroupID)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamFriends_GetFriendsGroupMembersCount(this._ptr, friendsGroupID) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual void ISteamFriends_GetFriendsGroupMembersList(
        short friendsGroupID,
        IntPtr pOutSteamIDMembers,
        int nMembersCount)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamFriends _ptr is null!");
        Platform.Linux32.Native.SteamAPI_ISteamFriends_GetFriendsGroupMembersList(this._ptr, friendsGroupID, pOutSteamIDMembers, nMembersCount);
      }

      public virtual bool ISteamFriends_HasFriend(ulong steamIDFriend, int iFriendFlags)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamFriends _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamFriends_HasFriend(this._ptr, steamIDFriend, iFriendFlags);
      }

      public virtual int ISteamFriends_GetClanCount()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamFriends_GetClanCount(this._ptr) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual CSteamID ISteamFriends_GetClanByIndex(int iClan)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamFriends_GetClanByIndex(this._ptr, iClan) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual IntPtr ISteamFriends_GetClanName(ulong steamIDClan)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamFriends_GetClanName(this._ptr, steamIDClan) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual IntPtr ISteamFriends_GetClanTag(ulong steamIDClan)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamFriends_GetClanTag(this._ptr, steamIDClan) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual bool ISteamFriends_GetClanActivityCounts(
        ulong steamIDClan,
        out int pnOnline,
        out int pnInGame,
        out int pnChatting)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamFriends_GetClanActivityCounts(this._ptr, steamIDClan, out pnOnline, out pnInGame, out pnChatting) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual SteamAPICall_t ISteamFriends_DownloadClanActivityCounts(
        IntPtr psteamIDClans,
        int cClansToRequest)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamFriends _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamFriends_DownloadClanActivityCounts(this._ptr, psteamIDClans, cClansToRequest);
      }

      public virtual int ISteamFriends_GetFriendCountFromSource(ulong steamIDSource)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamFriends_GetFriendCountFromSource(this._ptr, steamIDSource) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual CSteamID ISteamFriends_GetFriendFromSourceByIndex(
        ulong steamIDSource,
        int iFriend)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamFriends _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamFriends_GetFriendFromSourceByIndex(this._ptr, steamIDSource, iFriend);
      }

      public virtual bool ISteamFriends_IsUserInSource(ulong steamIDUser, ulong steamIDSource)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamFriends _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamFriends_IsUserInSource(this._ptr, steamIDUser, steamIDSource);
      }

      public virtual void ISteamFriends_SetInGameVoiceSpeaking(ulong steamIDUser, [MarshalAs(UnmanagedType.U1)] bool bSpeaking)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamFriends _ptr is null!");
        Platform.Linux32.Native.SteamAPI_ISteamFriends_SetInGameVoiceSpeaking(this._ptr, steamIDUser, bSpeaking);
      }

      public virtual void ISteamFriends_ActivateGameOverlay(string pchDialog)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamFriends _ptr is null!");
        Platform.Linux32.Native.SteamAPI_ISteamFriends_ActivateGameOverlay(this._ptr, pchDialog);
      }

      public virtual void ISteamFriends_ActivateGameOverlayToUser(string pchDialog, ulong steamID)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamFriends _ptr is null!");
        Platform.Linux32.Native.SteamAPI_ISteamFriends_ActivateGameOverlayToUser(this._ptr, pchDialog, steamID);
      }

      public virtual void ISteamFriends_ActivateGameOverlayToWebPage(string pchURL)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamFriends _ptr is null!");
        Platform.Linux32.Native.SteamAPI_ISteamFriends_ActivateGameOverlayToWebPage(this._ptr, pchURL);
      }

      public virtual void ISteamFriends_ActivateGameOverlayToStore(
        uint nAppID,
        OverlayToStoreFlag eFlag)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamFriends _ptr is null!");
        Platform.Linux32.Native.SteamAPI_ISteamFriends_ActivateGameOverlayToStore(this._ptr, nAppID, eFlag);
      }

      public virtual void ISteamFriends_SetPlayedWith(ulong steamIDUserPlayedWith)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamFriends _ptr is null!");
        Platform.Linux32.Native.SteamAPI_ISteamFriends_SetPlayedWith(this._ptr, steamIDUserPlayedWith);
      }

      public virtual void ISteamFriends_ActivateGameOverlayInviteDialog(ulong steamIDLobby)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamFriends _ptr is null!");
        Platform.Linux32.Native.SteamAPI_ISteamFriends_ActivateGameOverlayInviteDialog(this._ptr, steamIDLobby);
      }

      public virtual int ISteamFriends_GetSmallFriendAvatar(ulong steamIDFriend)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamFriends_GetSmallFriendAvatar(this._ptr, steamIDFriend) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual int ISteamFriends_GetMediumFriendAvatar(ulong steamIDFriend)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamFriends_GetMediumFriendAvatar(this._ptr, steamIDFriend) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual int ISteamFriends_GetLargeFriendAvatar(ulong steamIDFriend)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamFriends_GetLargeFriendAvatar(this._ptr, steamIDFriend) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual bool ISteamFriends_RequestUserInformation(
        ulong steamIDUser,
        [MarshalAs(UnmanagedType.U1)] bool bRequireNameOnly)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamFriends _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamFriends_RequestUserInformation(this._ptr, steamIDUser, bRequireNameOnly);
      }

      public virtual SteamAPICall_t ISteamFriends_RequestClanOfficerList(ulong steamIDClan)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamFriends_RequestClanOfficerList(this._ptr, steamIDClan) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual CSteamID ISteamFriends_GetClanOwner(ulong steamIDClan)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamFriends_GetClanOwner(this._ptr, steamIDClan) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual int ISteamFriends_GetClanOfficerCount(ulong steamIDClan)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamFriends_GetClanOfficerCount(this._ptr, steamIDClan) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual CSteamID ISteamFriends_GetClanOfficerByIndex(ulong steamIDClan, int iOfficer)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamFriends _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamFriends_GetClanOfficerByIndex(this._ptr, steamIDClan, iOfficer);
      }

      public virtual uint ISteamFriends_GetUserRestrictions()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamFriends_GetUserRestrictions(this._ptr) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual bool ISteamFriends_SetRichPresence(string pchKey, string pchValue)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamFriends _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamFriends_SetRichPresence(this._ptr, pchKey, pchValue);
      }

      public virtual void ISteamFriends_ClearRichPresence()
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamFriends _ptr is null!");
        Platform.Linux32.Native.SteamAPI_ISteamFriends_ClearRichPresence(this._ptr);
      }

      public virtual IntPtr ISteamFriends_GetFriendRichPresence(ulong steamIDFriend, string pchKey)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamFriends _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamFriends_GetFriendRichPresence(this._ptr, steamIDFriend, pchKey);
      }

      public virtual int ISteamFriends_GetFriendRichPresenceKeyCount(ulong steamIDFriend)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamFriends_GetFriendRichPresenceKeyCount(this._ptr, steamIDFriend) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual IntPtr ISteamFriends_GetFriendRichPresenceKeyByIndex(
        ulong steamIDFriend,
        int iKey)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamFriends _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamFriends_GetFriendRichPresenceKeyByIndex(this._ptr, steamIDFriend, iKey);
      }

      public virtual void ISteamFriends_RequestFriendRichPresence(ulong steamIDFriend)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamFriends _ptr is null!");
        Platform.Linux32.Native.SteamAPI_ISteamFriends_RequestFriendRichPresence(this._ptr, steamIDFriend);
      }

      public virtual bool ISteamFriends_InviteUserToGame(
        ulong steamIDFriend,
        string pchConnectString)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamFriends _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamFriends_InviteUserToGame(this._ptr, steamIDFriend, pchConnectString);
      }

      public virtual int ISteamFriends_GetCoplayFriendCount()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamFriends_GetCoplayFriendCount(this._ptr) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual CSteamID ISteamFriends_GetCoplayFriend(int iCoplayFriend)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamFriends_GetCoplayFriend(this._ptr, iCoplayFriend) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual int ISteamFriends_GetFriendCoplayTime(ulong steamIDFriend)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamFriends_GetFriendCoplayTime(this._ptr, steamIDFriend) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual AppId_t ISteamFriends_GetFriendCoplayGame(ulong steamIDFriend)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamFriends_GetFriendCoplayGame(this._ptr, steamIDFriend) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual SteamAPICall_t ISteamFriends_JoinClanChatRoom(ulong steamIDClan)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamFriends_JoinClanChatRoom(this._ptr, steamIDClan) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual bool ISteamFriends_LeaveClanChatRoom(ulong steamIDClan)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamFriends_LeaveClanChatRoom(this._ptr, steamIDClan) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual int ISteamFriends_GetClanChatMemberCount(ulong steamIDClan)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamFriends_GetClanChatMemberCount(this._ptr, steamIDClan) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual CSteamID ISteamFriends_GetChatMemberByIndex(ulong steamIDClan, int iUser)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamFriends _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamFriends_GetChatMemberByIndex(this._ptr, steamIDClan, iUser);
      }

      public virtual bool ISteamFriends_SendClanChatMessage(ulong steamIDClanChat, string pchText)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamFriends _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamFriends_SendClanChatMessage(this._ptr, steamIDClanChat, pchText);
      }

      public virtual int ISteamFriends_GetClanChatMessage(
        ulong steamIDClanChat,
        int iMessage,
        IntPtr prgchText,
        int cchTextMax,
        out ChatEntryType peChatEntryType,
        out ulong psteamidChatter)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamFriends _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamFriends_GetClanChatMessage(this._ptr, steamIDClanChat, iMessage, prgchText, cchTextMax, out peChatEntryType, out psteamidChatter);
      }

      public virtual bool ISteamFriends_IsClanChatAdmin(ulong steamIDClanChat, ulong steamIDUser)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamFriends _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamFriends_IsClanChatAdmin(this._ptr, steamIDClanChat, steamIDUser);
      }

      public virtual bool ISteamFriends_IsClanChatWindowOpenInSteam(ulong steamIDClanChat)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamFriends_IsClanChatWindowOpenInSteam(this._ptr, steamIDClanChat) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual bool ISteamFriends_OpenClanChatWindowInSteam(ulong steamIDClanChat)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamFriends_OpenClanChatWindowInSteam(this._ptr, steamIDClanChat) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual bool ISteamFriends_CloseClanChatWindowInSteam(ulong steamIDClanChat)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamFriends_CloseClanChatWindowInSteam(this._ptr, steamIDClanChat) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual bool ISteamFriends_SetListenForFriendsMessages([MarshalAs(UnmanagedType.U1)] bool bInterceptEnabled)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamFriends_SetListenForFriendsMessages(this._ptr, bInterceptEnabled) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual bool ISteamFriends_ReplyToFriendMessage(
        ulong steamIDFriend,
        string pchMsgToSend)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamFriends _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamFriends_ReplyToFriendMessage(this._ptr, steamIDFriend, pchMsgToSend);
      }

      public virtual int ISteamFriends_GetFriendMessage(
        ulong steamIDFriend,
        int iMessageID,
        IntPtr pvData,
        int cubData,
        out ChatEntryType peChatEntryType)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamFriends _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamFriends_GetFriendMessage(this._ptr, steamIDFriend, iMessageID, pvData, cubData, out peChatEntryType);
      }

      public virtual SteamAPICall_t ISteamFriends_GetFollowerCount(ulong steamID)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamFriends_GetFollowerCount(this._ptr, steamID) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual SteamAPICall_t ISteamFriends_IsFollowing(ulong steamID)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamFriends_IsFollowing(this._ptr, steamID) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual SteamAPICall_t ISteamFriends_EnumerateFollowingList(uint unStartIndex)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamFriends_EnumerateFollowingList(this._ptr, unStartIndex) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual uint ISteamUtils_GetSecondsSinceAppActive()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamUtils_GetSecondsSinceAppActive(this._ptr) : throw new Exception("ISteamUtils _ptr is null!");
      }

      public virtual uint ISteamUtils_GetSecondsSinceComputerActive()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamUtils_GetSecondsSinceComputerActive(this._ptr) : throw new Exception("ISteamUtils _ptr is null!");
      }

      public virtual Universe ISteamUtils_GetConnectedUniverse()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamUtils_GetConnectedUniverse(this._ptr) : throw new Exception("ISteamUtils _ptr is null!");
      }

      public virtual uint ISteamUtils_GetServerRealTime()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamUtils_GetServerRealTime(this._ptr) : throw new Exception("ISteamUtils _ptr is null!");
      }

      public virtual IntPtr ISteamUtils_GetIPCountry()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamUtils_GetIPCountry(this._ptr) : throw new Exception("ISteamUtils _ptr is null!");
      }

      public virtual bool ISteamUtils_GetImageSize(int iImage, out uint pnWidth, out uint pnHeight)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamUtils_GetImageSize(this._ptr, iImage, out pnWidth, out pnHeight) : throw new Exception("ISteamUtils _ptr is null!");
      }

      public virtual bool ISteamUtils_GetImageRGBA(int iImage, IntPtr pubDest, int nDestBufferSize)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUtils _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamUtils_GetImageRGBA(this._ptr, iImage, pubDest, nDestBufferSize);
      }

      public virtual bool ISteamUtils_GetCSERIPPort(out uint unIP, out ushort usPort)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamUtils_GetCSERIPPort(this._ptr, out unIP, out usPort) : throw new Exception("ISteamUtils _ptr is null!");
      }

      public virtual byte ISteamUtils_GetCurrentBatteryPower()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamUtils_GetCurrentBatteryPower(this._ptr) : throw new Exception("ISteamUtils _ptr is null!");
      }

      public virtual uint ISteamUtils_GetAppID()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamUtils_GetAppID(this._ptr) : throw new Exception("ISteamUtils _ptr is null!");
      }

      public virtual void ISteamUtils_SetOverlayNotificationPosition(
        NotificationPosition eNotificationPosition)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUtils _ptr is null!");
        Platform.Linux32.Native.SteamAPI_ISteamUtils_SetOverlayNotificationPosition(this._ptr, eNotificationPosition);
      }

      public virtual bool ISteamUtils_IsAPICallCompleted(ulong hSteamAPICall, [MarshalAs(UnmanagedType.U1)] ref bool pbFailed)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUtils _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamUtils_IsAPICallCompleted(this._ptr, hSteamAPICall, ref pbFailed);
      }

      public virtual SteamAPICallFailure ISteamUtils_GetAPICallFailureReason(ulong hSteamAPICall)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamUtils_GetAPICallFailureReason(this._ptr, hSteamAPICall) : throw new Exception("ISteamUtils _ptr is null!");
      }

      public virtual bool ISteamUtils_GetAPICallResult(
        ulong hSteamAPICall,
        IntPtr pCallback,
        int cubCallback,
        int iCallbackExpected,
        [MarshalAs(UnmanagedType.U1)] ref bool pbFailed)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUtils _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamUtils_GetAPICallResult(this._ptr, hSteamAPICall, pCallback, cubCallback, iCallbackExpected, ref pbFailed);
      }

      public virtual uint ISteamUtils_GetIPCCallCount()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamUtils_GetIPCCallCount(this._ptr) : throw new Exception("ISteamUtils _ptr is null!");
      }

      public virtual void ISteamUtils_SetWarningMessageHook(IntPtr pFunction)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUtils _ptr is null!");
        Platform.Linux32.Native.SteamAPI_ISteamUtils_SetWarningMessageHook(this._ptr, pFunction);
      }

      public virtual bool ISteamUtils_IsOverlayEnabled()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamUtils_IsOverlayEnabled(this._ptr) : throw new Exception("ISteamUtils _ptr is null!");
      }

      public virtual bool ISteamUtils_BOverlayNeedsPresent()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamUtils_BOverlayNeedsPresent(this._ptr) : throw new Exception("ISteamUtils _ptr is null!");
      }

      public virtual SteamAPICall_t ISteamUtils_CheckFileSignature(string szFileName)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamUtils_CheckFileSignature(this._ptr, szFileName) : throw new Exception("ISteamUtils _ptr is null!");
      }

      public virtual bool ISteamUtils_ShowGamepadTextInput(
        GamepadTextInputMode eInputMode,
        GamepadTextInputLineMode eLineInputMode,
        string pchDescription,
        uint unCharMax,
        string pchExistingText)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUtils _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamUtils_ShowGamepadTextInput(this._ptr, eInputMode, eLineInputMode, pchDescription, unCharMax, pchExistingText);
      }

      public virtual uint ISteamUtils_GetEnteredGamepadTextLength()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamUtils_GetEnteredGamepadTextLength(this._ptr) : throw new Exception("ISteamUtils _ptr is null!");
      }

      public virtual bool ISteamUtils_GetEnteredGamepadTextInput(
        StringBuilder pchText,
        uint cchText)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUtils _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamUtils_GetEnteredGamepadTextInput(this._ptr, pchText, cchText);
      }

      public virtual IntPtr ISteamUtils_GetSteamUILanguage()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamUtils_GetSteamUILanguage(this._ptr) : throw new Exception("ISteamUtils _ptr is null!");
      }

      public virtual bool ISteamUtils_IsSteamRunningInVR()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamUtils_IsSteamRunningInVR(this._ptr) : throw new Exception("ISteamUtils _ptr is null!");
      }

      public virtual void ISteamUtils_SetOverlayNotificationInset(
        int nHorizontalInset,
        int nVerticalInset)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUtils _ptr is null!");
        Platform.Linux32.Native.SteamAPI_ISteamUtils_SetOverlayNotificationInset(this._ptr, nHorizontalInset, nVerticalInset);
      }

      public virtual bool ISteamUtils_IsSteamInBigPictureMode()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamUtils_IsSteamInBigPictureMode(this._ptr) : throw new Exception("ISteamUtils _ptr is null!");
      }

      public virtual void ISteamUtils_StartVRDashboard()
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUtils _ptr is null!");
        Platform.Linux32.Native.SteamAPI_ISteamUtils_StartVRDashboard(this._ptr);
      }

      public virtual bool ISteamUtils_IsVRHeadsetStreamingEnabled()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamUtils_IsVRHeadsetStreamingEnabled(this._ptr) : throw new Exception("ISteamUtils _ptr is null!");
      }

      public virtual void ISteamUtils_SetVRHeadsetStreamingEnabled([MarshalAs(UnmanagedType.U1)] bool bEnabled)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUtils _ptr is null!");
        Platform.Linux32.Native.SteamAPI_ISteamUtils_SetVRHeadsetStreamingEnabled(this._ptr, bEnabled);
      }

      public virtual int ISteamMatchmaking_GetFavoriteGameCount()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamMatchmaking_GetFavoriteGameCount(this._ptr) : throw new Exception("ISteamMatchmaking _ptr is null!");
      }

      public virtual bool ISteamMatchmaking_GetFavoriteGame(
        int iGame,
        ref uint pnAppID,
        out uint pnIP,
        out ushort pnConnPort,
        out ushort pnQueryPort,
        out uint punFlags,
        out uint pRTime32LastPlayedOnServer)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmaking _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamMatchmaking_GetFavoriteGame(this._ptr, iGame, ref pnAppID, out pnIP, out pnConnPort, out pnQueryPort, out punFlags, out pRTime32LastPlayedOnServer);
      }

      public virtual int ISteamMatchmaking_AddFavoriteGame(
        uint nAppID,
        uint nIP,
        ushort nConnPort,
        ushort nQueryPort,
        uint unFlags,
        uint rTime32LastPlayedOnServer)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmaking _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamMatchmaking_AddFavoriteGame(this._ptr, nAppID, nIP, nConnPort, nQueryPort, unFlags, rTime32LastPlayedOnServer);
      }

      public virtual bool ISteamMatchmaking_RemoveFavoriteGame(
        uint nAppID,
        uint nIP,
        ushort nConnPort,
        ushort nQueryPort,
        uint unFlags)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmaking _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamMatchmaking_RemoveFavoriteGame(this._ptr, nAppID, nIP, nConnPort, nQueryPort, unFlags);
      }

      public virtual SteamAPICall_t ISteamMatchmaking_RequestLobbyList()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamMatchmaking_RequestLobbyList(this._ptr) : throw new Exception("ISteamMatchmaking _ptr is null!");
      }

      public virtual void ISteamMatchmaking_AddRequestLobbyListStringFilter(
        string pchKeyToMatch,
        string pchValueToMatch,
        LobbyComparison eComparisonType)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmaking _ptr is null!");
        Platform.Linux32.Native.SteamAPI_ISteamMatchmaking_AddRequestLobbyListStringFilter(this._ptr, pchKeyToMatch, pchValueToMatch, eComparisonType);
      }

      public virtual void ISteamMatchmaking_AddRequestLobbyListNumericalFilter(
        string pchKeyToMatch,
        int nValueToMatch,
        LobbyComparison eComparisonType)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmaking _ptr is null!");
        Platform.Linux32.Native.SteamAPI_ISteamMatchmaking_AddRequestLobbyListNumericalFilter(this._ptr, pchKeyToMatch, nValueToMatch, eComparisonType);
      }

      public virtual void ISteamMatchmaking_AddRequestLobbyListNearValueFilter(
        string pchKeyToMatch,
        int nValueToBeCloseTo)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmaking _ptr is null!");
        Platform.Linux32.Native.SteamAPI_ISteamMatchmaking_AddRequestLobbyListNearValueFilter(this._ptr, pchKeyToMatch, nValueToBeCloseTo);
      }

      public virtual void ISteamMatchmaking_AddRequestLobbyListFilterSlotsAvailable(
        int nSlotsAvailable)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmaking _ptr is null!");
        Platform.Linux32.Native.SteamAPI_ISteamMatchmaking_AddRequestLobbyListFilterSlotsAvailable(this._ptr, nSlotsAvailable);
      }

      public virtual void ISteamMatchmaking_AddRequestLobbyListDistanceFilter(
        LobbyDistanceFilter eLobbyDistanceFilter)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmaking _ptr is null!");
        Platform.Linux32.Native.SteamAPI_ISteamMatchmaking_AddRequestLobbyListDistanceFilter(this._ptr, eLobbyDistanceFilter);
      }

      public virtual void ISteamMatchmaking_AddRequestLobbyListResultCountFilter(int cMaxResults)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmaking _ptr is null!");
        Platform.Linux32.Native.SteamAPI_ISteamMatchmaking_AddRequestLobbyListResultCountFilter(this._ptr, cMaxResults);
      }

      public virtual void ISteamMatchmaking_AddRequestLobbyListCompatibleMembersFilter(
        ulong steamIDLobby)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmaking _ptr is null!");
        Platform.Linux32.Native.SteamAPI_ISteamMatchmaking_AddRequestLobbyListCompatibleMembersFilter(this._ptr, steamIDLobby);
      }

      public virtual CSteamID ISteamMatchmaking_GetLobbyByIndex(int iLobby)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamMatchmaking_GetLobbyByIndex(this._ptr, iLobby) : throw new Exception("ISteamMatchmaking _ptr is null!");
      }

      public virtual SteamAPICall_t ISteamMatchmaking_CreateLobby(
        LobbyType eLobbyType,
        int cMaxMembers)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmaking _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamMatchmaking_CreateLobby(this._ptr, eLobbyType, cMaxMembers);
      }

      public virtual SteamAPICall_t ISteamMatchmaking_JoinLobby(ulong steamIDLobby)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamMatchmaking_JoinLobby(this._ptr, steamIDLobby) : throw new Exception("ISteamMatchmaking _ptr is null!");
      }

      public virtual void ISteamMatchmaking_LeaveLobby(ulong steamIDLobby)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmaking _ptr is null!");
        Platform.Linux32.Native.SteamAPI_ISteamMatchmaking_LeaveLobby(this._ptr, steamIDLobby);
      }

      public virtual bool ISteamMatchmaking_InviteUserToLobby(
        ulong steamIDLobby,
        ulong steamIDInvitee)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmaking _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamMatchmaking_InviteUserToLobby(this._ptr, steamIDLobby, steamIDInvitee);
      }

      public virtual int ISteamMatchmaking_GetNumLobbyMembers(ulong steamIDLobby)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamMatchmaking_GetNumLobbyMembers(this._ptr, steamIDLobby) : throw new Exception("ISteamMatchmaking _ptr is null!");
      }

      public virtual CSteamID ISteamMatchmaking_GetLobbyMemberByIndex(
        ulong steamIDLobby,
        int iMember)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmaking _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamMatchmaking_GetLobbyMemberByIndex(this._ptr, steamIDLobby, iMember);
      }

      public virtual IntPtr ISteamMatchmaking_GetLobbyData(ulong steamIDLobby, string pchKey)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmaking _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamMatchmaking_GetLobbyData(this._ptr, steamIDLobby, pchKey);
      }

      public virtual bool ISteamMatchmaking_SetLobbyData(
        ulong steamIDLobby,
        string pchKey,
        string pchValue)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmaking _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamMatchmaking_SetLobbyData(this._ptr, steamIDLobby, pchKey, pchValue);
      }

      public virtual int ISteamMatchmaking_GetLobbyDataCount(ulong steamIDLobby)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamMatchmaking_GetLobbyDataCount(this._ptr, steamIDLobby) : throw new Exception("ISteamMatchmaking _ptr is null!");
      }

      public virtual bool ISteamMatchmaking_GetLobbyDataByIndex(
        ulong steamIDLobby,
        int iLobbyData,
        StringBuilder pchKey,
        int cchKeyBufferSize,
        StringBuilder pchValue,
        int cchValueBufferSize)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmaking _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamMatchmaking_GetLobbyDataByIndex(this._ptr, steamIDLobby, iLobbyData, pchKey, cchKeyBufferSize, pchValue, cchValueBufferSize);
      }

      public virtual bool ISteamMatchmaking_DeleteLobbyData(ulong steamIDLobby, string pchKey)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmaking _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamMatchmaking_DeleteLobbyData(this._ptr, steamIDLobby, pchKey);
      }

      public virtual IntPtr ISteamMatchmaking_GetLobbyMemberData(
        ulong steamIDLobby,
        ulong steamIDUser,
        string pchKey)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmaking _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamMatchmaking_GetLobbyMemberData(this._ptr, steamIDLobby, steamIDUser, pchKey);
      }

      public virtual void ISteamMatchmaking_SetLobbyMemberData(
        ulong steamIDLobby,
        string pchKey,
        string pchValue)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmaking _ptr is null!");
        Platform.Linux32.Native.SteamAPI_ISteamMatchmaking_SetLobbyMemberData(this._ptr, steamIDLobby, pchKey, pchValue);
      }

      public virtual bool ISteamMatchmaking_SendLobbyChatMsg(
        ulong steamIDLobby,
        IntPtr pvMsgBody,
        int cubMsgBody)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmaking _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamMatchmaking_SendLobbyChatMsg(this._ptr, steamIDLobby, pvMsgBody, cubMsgBody);
      }

      public virtual int ISteamMatchmaking_GetLobbyChatEntry(
        ulong steamIDLobby,
        int iChatID,
        out ulong pSteamIDUser,
        IntPtr pvData,
        int cubData,
        out ChatEntryType peChatEntryType)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmaking _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamMatchmaking_GetLobbyChatEntry(this._ptr, steamIDLobby, iChatID, out pSteamIDUser, pvData, cubData, out peChatEntryType);
      }

      public virtual bool ISteamMatchmaking_RequestLobbyData(ulong steamIDLobby)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamMatchmaking_RequestLobbyData(this._ptr, steamIDLobby) : throw new Exception("ISteamMatchmaking _ptr is null!");
      }

      public virtual void ISteamMatchmaking_SetLobbyGameServer(
        ulong steamIDLobby,
        uint unGameServerIP,
        ushort unGameServerPort,
        ulong steamIDGameServer)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmaking _ptr is null!");
        Platform.Linux32.Native.SteamAPI_ISteamMatchmaking_SetLobbyGameServer(this._ptr, steamIDLobby, unGameServerIP, unGameServerPort, steamIDGameServer);
      }

      public virtual bool ISteamMatchmaking_GetLobbyGameServer(
        ulong steamIDLobby,
        out uint punGameServerIP,
        out ushort punGameServerPort,
        out ulong psteamIDGameServer)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamMatchmaking_GetLobbyGameServer(this._ptr, steamIDLobby, out punGameServerIP, out punGameServerPort, out psteamIDGameServer) : throw new Exception("ISteamMatchmaking _ptr is null!");
      }

      public virtual bool ISteamMatchmaking_SetLobbyMemberLimit(ulong steamIDLobby, int cMaxMembers)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmaking _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamMatchmaking_SetLobbyMemberLimit(this._ptr, steamIDLobby, cMaxMembers);
      }

      public virtual int ISteamMatchmaking_GetLobbyMemberLimit(ulong steamIDLobby)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamMatchmaking_GetLobbyMemberLimit(this._ptr, steamIDLobby) : throw new Exception("ISteamMatchmaking _ptr is null!");
      }

      public virtual bool ISteamMatchmaking_SetLobbyType(ulong steamIDLobby, LobbyType eLobbyType)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmaking _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamMatchmaking_SetLobbyType(this._ptr, steamIDLobby, eLobbyType);
      }

      public virtual bool ISteamMatchmaking_SetLobbyJoinable(
        ulong steamIDLobby,
        [MarshalAs(UnmanagedType.U1)] bool bLobbyJoinable)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmaking _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamMatchmaking_SetLobbyJoinable(this._ptr, steamIDLobby, bLobbyJoinable);
      }

      public virtual CSteamID ISteamMatchmaking_GetLobbyOwner(ulong steamIDLobby)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamMatchmaking_GetLobbyOwner(this._ptr, steamIDLobby) : throw new Exception("ISteamMatchmaking _ptr is null!");
      }

      public virtual bool ISteamMatchmaking_SetLobbyOwner(ulong steamIDLobby, ulong steamIDNewOwner)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmaking _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamMatchmaking_SetLobbyOwner(this._ptr, steamIDLobby, steamIDNewOwner);
      }

      public virtual bool ISteamMatchmaking_SetLinkedLobby(
        ulong steamIDLobby,
        ulong steamIDLobbyDependent)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmaking _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamMatchmaking_SetLinkedLobby(this._ptr, steamIDLobby, steamIDLobbyDependent);
      }

      public virtual HServerListRequest ISteamMatchmakingServers_RequestInternetServerList(
        uint iApp,
        IntPtr ppchFilters,
        uint nFilters,
        IntPtr pRequestServersResponse)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmakingServers _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamMatchmakingServers_RequestInternetServerList(this._ptr, iApp, ppchFilters, nFilters, pRequestServersResponse);
      }

      public virtual HServerListRequest ISteamMatchmakingServers_RequestLANServerList(
        uint iApp,
        IntPtr pRequestServersResponse)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmakingServers _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamMatchmakingServers_RequestLANServerList(this._ptr, iApp, pRequestServersResponse);
      }

      public virtual HServerListRequest ISteamMatchmakingServers_RequestFriendsServerList(
        uint iApp,
        IntPtr ppchFilters,
        uint nFilters,
        IntPtr pRequestServersResponse)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmakingServers _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamMatchmakingServers_RequestFriendsServerList(this._ptr, iApp, ppchFilters, nFilters, pRequestServersResponse);
      }

      public virtual HServerListRequest ISteamMatchmakingServers_RequestFavoritesServerList(
        uint iApp,
        IntPtr ppchFilters,
        uint nFilters,
        IntPtr pRequestServersResponse)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmakingServers _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamMatchmakingServers_RequestFavoritesServerList(this._ptr, iApp, ppchFilters, nFilters, pRequestServersResponse);
      }

      public virtual HServerListRequest ISteamMatchmakingServers_RequestHistoryServerList(
        uint iApp,
        IntPtr ppchFilters,
        uint nFilters,
        IntPtr pRequestServersResponse)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmakingServers _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamMatchmakingServers_RequestHistoryServerList(this._ptr, iApp, ppchFilters, nFilters, pRequestServersResponse);
      }

      public virtual HServerListRequest ISteamMatchmakingServers_RequestSpectatorServerList(
        uint iApp,
        IntPtr ppchFilters,
        uint nFilters,
        IntPtr pRequestServersResponse)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmakingServers _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamMatchmakingServers_RequestSpectatorServerList(this._ptr, iApp, ppchFilters, nFilters, pRequestServersResponse);
      }

      public virtual void ISteamMatchmakingServers_ReleaseRequest(IntPtr hServerListRequest)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmakingServers _ptr is null!");
        Platform.Linux32.Native.SteamAPI_ISteamMatchmakingServers_ReleaseRequest(this._ptr, hServerListRequest);
      }

      public virtual IntPtr ISteamMatchmakingServers_GetServerDetails(IntPtr hRequest, int iServer)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmakingServers _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamMatchmakingServers_GetServerDetails(this._ptr, hRequest, iServer);
      }

      public virtual void ISteamMatchmakingServers_CancelQuery(IntPtr hRequest)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmakingServers _ptr is null!");
        Platform.Linux32.Native.SteamAPI_ISteamMatchmakingServers_CancelQuery(this._ptr, hRequest);
      }

      public virtual void ISteamMatchmakingServers_RefreshQuery(IntPtr hRequest)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmakingServers _ptr is null!");
        Platform.Linux32.Native.SteamAPI_ISteamMatchmakingServers_RefreshQuery(this._ptr, hRequest);
      }

      public virtual bool ISteamMatchmakingServers_IsRefreshing(IntPtr hRequest)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamMatchmakingServers_IsRefreshing(this._ptr, hRequest) : throw new Exception("ISteamMatchmakingServers _ptr is null!");
      }

      public virtual int ISteamMatchmakingServers_GetServerCount(IntPtr hRequest)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamMatchmakingServers_GetServerCount(this._ptr, hRequest) : throw new Exception("ISteamMatchmakingServers _ptr is null!");
      }

      public virtual void ISteamMatchmakingServers_RefreshServer(IntPtr hRequest, int iServer)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmakingServers _ptr is null!");
        Platform.Linux32.Native.SteamAPI_ISteamMatchmakingServers_RefreshServer(this._ptr, hRequest, iServer);
      }

      public virtual HServerQuery ISteamMatchmakingServers_PingServer(
        uint unIP,
        ushort usPort,
        IntPtr pRequestServersResponse)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmakingServers _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamMatchmakingServers_PingServer(this._ptr, unIP, usPort, pRequestServersResponse);
      }

      public virtual HServerQuery ISteamMatchmakingServers_PlayerDetails(
        uint unIP,
        ushort usPort,
        IntPtr pRequestServersResponse)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmakingServers _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamMatchmakingServers_PlayerDetails(this._ptr, unIP, usPort, pRequestServersResponse);
      }

      public virtual HServerQuery ISteamMatchmakingServers_ServerRules(
        uint unIP,
        ushort usPort,
        IntPtr pRequestServersResponse)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmakingServers _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamMatchmakingServers_ServerRules(this._ptr, unIP, usPort, pRequestServersResponse);
      }

      public virtual void ISteamMatchmakingServers_CancelServerQuery(int hServerQuery)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmakingServers _ptr is null!");
        Platform.Linux32.Native.SteamAPI_ISteamMatchmakingServers_CancelServerQuery(this._ptr, hServerQuery);
      }

      public virtual bool ISteamRemoteStorage_FileWrite(string pchFile, IntPtr pvData, int cubData)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamRemoteStorage _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamRemoteStorage_FileWrite(this._ptr, pchFile, pvData, cubData);
      }

      public virtual int ISteamRemoteStorage_FileRead(
        string pchFile,
        IntPtr pvData,
        int cubDataToRead)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamRemoteStorage _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamRemoteStorage_FileRead(this._ptr, pchFile, pvData, cubDataToRead);
      }

      public virtual SteamAPICall_t ISteamRemoteStorage_FileWriteAsync(
        string pchFile,
        IntPtr pvData,
        uint cubData)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamRemoteStorage _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamRemoteStorage_FileWriteAsync(this._ptr, pchFile, pvData, cubData);
      }

      public virtual SteamAPICall_t ISteamRemoteStorage_FileReadAsync(
        string pchFile,
        uint nOffset,
        uint cubToRead)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamRemoteStorage _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamRemoteStorage_FileReadAsync(this._ptr, pchFile, nOffset, cubToRead);
      }

      public virtual bool ISteamRemoteStorage_FileReadAsyncComplete(
        ulong hReadCall,
        IntPtr pvBuffer,
        uint cubToRead)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamRemoteStorage _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamRemoteStorage_FileReadAsyncComplete(this._ptr, hReadCall, pvBuffer, cubToRead);
      }

      public virtual bool ISteamRemoteStorage_FileForget(string pchFile)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamRemoteStorage_FileForget(this._ptr, pchFile) : throw new Exception("ISteamRemoteStorage _ptr is null!");
      }

      public virtual bool ISteamRemoteStorage_FileDelete(string pchFile)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamRemoteStorage_FileDelete(this._ptr, pchFile) : throw new Exception("ISteamRemoteStorage _ptr is null!");
      }

      public virtual SteamAPICall_t ISteamRemoteStorage_FileShare(string pchFile)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamRemoteStorage_FileShare(this._ptr, pchFile) : throw new Exception("ISteamRemoteStorage _ptr is null!");
      }

      public virtual bool ISteamRemoteStorage_SetSyncPlatforms(
        string pchFile,
        RemoteStoragePlatform eRemoteStoragePlatform)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamRemoteStorage _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamRemoteStorage_SetSyncPlatforms(this._ptr, pchFile, eRemoteStoragePlatform);
      }

      public virtual UGCFileWriteStreamHandle_t ISteamRemoteStorage_FileWriteStreamOpen(
        string pchFile)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamRemoteStorage_FileWriteStreamOpen(this._ptr, pchFile) : throw new Exception("ISteamRemoteStorage _ptr is null!");
      }

      public virtual bool ISteamRemoteStorage_FileWriteStreamWriteChunk(
        ulong writeHandle,
        IntPtr pvData,
        int cubData)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamRemoteStorage _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamRemoteStorage_FileWriteStreamWriteChunk(this._ptr, writeHandle, pvData, cubData);
      }

      public virtual bool ISteamRemoteStorage_FileWriteStreamClose(ulong writeHandle)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamRemoteStorage_FileWriteStreamClose(this._ptr, writeHandle) : throw new Exception("ISteamRemoteStorage _ptr is null!");
      }

      public virtual bool ISteamRemoteStorage_FileWriteStreamCancel(ulong writeHandle)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamRemoteStorage_FileWriteStreamCancel(this._ptr, writeHandle) : throw new Exception("ISteamRemoteStorage _ptr is null!");
      }

      public virtual bool ISteamRemoteStorage_FileExists(string pchFile)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamRemoteStorage_FileExists(this._ptr, pchFile) : throw new Exception("ISteamRemoteStorage _ptr is null!");
      }

      public virtual bool ISteamRemoteStorage_FilePersisted(string pchFile)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamRemoteStorage_FilePersisted(this._ptr, pchFile) : throw new Exception("ISteamRemoteStorage _ptr is null!");
      }

      public virtual int ISteamRemoteStorage_GetFileSize(string pchFile)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamRemoteStorage_GetFileSize(this._ptr, pchFile) : throw new Exception("ISteamRemoteStorage _ptr is null!");
      }

      public virtual long ISteamRemoteStorage_GetFileTimestamp(string pchFile)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamRemoteStorage_GetFileTimestamp(this._ptr, pchFile) : throw new Exception("ISteamRemoteStorage _ptr is null!");
      }

      public virtual RemoteStoragePlatform ISteamRemoteStorage_GetSyncPlatforms(string pchFile)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamRemoteStorage_GetSyncPlatforms(this._ptr, pchFile) : throw new Exception("ISteamRemoteStorage _ptr is null!");
      }

      public virtual int ISteamRemoteStorage_GetFileCount()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamRemoteStorage_GetFileCount(this._ptr) : throw new Exception("ISteamRemoteStorage _ptr is null!");
      }

      public virtual IntPtr ISteamRemoteStorage_GetFileNameAndSize(
        int iFile,
        out int pnFileSizeInBytes)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamRemoteStorage_GetFileNameAndSize(this._ptr, iFile, out pnFileSizeInBytes) : throw new Exception("ISteamRemoteStorage _ptr is null!");
      }

      public virtual bool ISteamRemoteStorage_GetQuota(
        out ulong pnTotalBytes,
        out ulong puAvailableBytes)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamRemoteStorage_GetQuota(this._ptr, out pnTotalBytes, out puAvailableBytes) : throw new Exception("ISteamRemoteStorage _ptr is null!");
      }

      public virtual bool ISteamRemoteStorage_IsCloudEnabledForAccount()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamRemoteStorage_IsCloudEnabledForAccount(this._ptr) : throw new Exception("ISteamRemoteStorage _ptr is null!");
      }

      public virtual bool ISteamRemoteStorage_IsCloudEnabledForApp()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamRemoteStorage_IsCloudEnabledForApp(this._ptr) : throw new Exception("ISteamRemoteStorage _ptr is null!");
      }

      public virtual void ISteamRemoteStorage_SetCloudEnabledForApp([MarshalAs(UnmanagedType.U1)] bool bEnabled)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamRemoteStorage _ptr is null!");
        Platform.Linux32.Native.SteamAPI_ISteamRemoteStorage_SetCloudEnabledForApp(this._ptr, bEnabled);
      }

      public virtual SteamAPICall_t ISteamRemoteStorage_UGCDownload(ulong hContent, uint unPriority)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamRemoteStorage _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamRemoteStorage_UGCDownload(this._ptr, hContent, unPriority);
      }

      public virtual bool ISteamRemoteStorage_GetUGCDownloadProgress(
        ulong hContent,
        out int pnBytesDownloaded,
        out int pnBytesExpected)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamRemoteStorage_GetUGCDownloadProgress(this._ptr, hContent, out pnBytesDownloaded, out pnBytesExpected) : throw new Exception("ISteamRemoteStorage _ptr is null!");
      }

      public virtual bool ISteamRemoteStorage_GetUGCDetails(
        ulong hContent,
        ref uint pnAppID,
        StringBuilder ppchName,
        out int pnFileSizeInBytes,
        out ulong pSteamIDOwner)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamRemoteStorage _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamRemoteStorage_GetUGCDetails(this._ptr, hContent, ref pnAppID, ppchName, out pnFileSizeInBytes, out pSteamIDOwner);
      }

      public virtual int ISteamRemoteStorage_UGCRead(
        ulong hContent,
        IntPtr pvData,
        int cubDataToRead,
        uint cOffset,
        UGCReadAction eAction)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamRemoteStorage _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamRemoteStorage_UGCRead(this._ptr, hContent, pvData, cubDataToRead, cOffset, eAction);
      }

      public virtual int ISteamRemoteStorage_GetCachedUGCCount()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamRemoteStorage_GetCachedUGCCount(this._ptr) : throw new Exception("ISteamRemoteStorage _ptr is null!");
      }

      public virtual UGCHandle_t ISteamRemoteStorage_GetCachedUGCHandle(int iCachedContent)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamRemoteStorage_GetCachedUGCHandle(this._ptr, iCachedContent) : throw new Exception("ISteamRemoteStorage _ptr is null!");
      }

      public virtual SteamAPICall_t ISteamRemoteStorage_PublishWorkshopFile(
        string pchFile,
        string pchPreviewFile,
        uint nConsumerAppId,
        string pchTitle,
        string pchDescription,
        RemoteStoragePublishedFileVisibility eVisibility,
        ref SteamParamStringArray_t pTags,
        WorkshopFileType eWorkshopFileType)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamRemoteStorage _ptr is null!");
        SteamParamStringArray_t.PackSmall pTags1 = new SteamParamStringArray_t.PackSmall();
        SteamAPICall_t steamApiCallT = Platform.Linux32.Native.SteamAPI_ISteamRemoteStorage_PublishWorkshopFile(this._ptr, pchFile, pchPreviewFile, nConsumerAppId, pchTitle, pchDescription, eVisibility, ref pTags1, eWorkshopFileType);
        pTags = (SteamParamStringArray_t) pTags1;
        return steamApiCallT;
      }

      public virtual PublishedFileUpdateHandle_t ISteamRemoteStorage_CreatePublishedFileUpdateRequest(
        ulong unPublishedFileId)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamRemoteStorage_CreatePublishedFileUpdateRequest(this._ptr, unPublishedFileId) : throw new Exception("ISteamRemoteStorage _ptr is null!");
      }

      public virtual bool ISteamRemoteStorage_UpdatePublishedFileFile(
        ulong updateHandle,
        string pchFile)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamRemoteStorage _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamRemoteStorage_UpdatePublishedFileFile(this._ptr, updateHandle, pchFile);
      }

      public virtual bool ISteamRemoteStorage_UpdatePublishedFilePreviewFile(
        ulong updateHandle,
        string pchPreviewFile)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamRemoteStorage _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamRemoteStorage_UpdatePublishedFilePreviewFile(this._ptr, updateHandle, pchPreviewFile);
      }

      public virtual bool ISteamRemoteStorage_UpdatePublishedFileTitle(
        ulong updateHandle,
        string pchTitle)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamRemoteStorage _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamRemoteStorage_UpdatePublishedFileTitle(this._ptr, updateHandle, pchTitle);
      }

      public virtual bool ISteamRemoteStorage_UpdatePublishedFileDescription(
        ulong updateHandle,
        string pchDescription)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamRemoteStorage _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamRemoteStorage_UpdatePublishedFileDescription(this._ptr, updateHandle, pchDescription);
      }

      public virtual bool ISteamRemoteStorage_UpdatePublishedFileVisibility(
        ulong updateHandle,
        RemoteStoragePublishedFileVisibility eVisibility)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamRemoteStorage _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamRemoteStorage_UpdatePublishedFileVisibility(this._ptr, updateHandle, eVisibility);
      }

      public virtual bool ISteamRemoteStorage_UpdatePublishedFileTags(
        ulong updateHandle,
        ref SteamParamStringArray_t pTags)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamRemoteStorage _ptr is null!");
        SteamParamStringArray_t.PackSmall pTags1 = new SteamParamStringArray_t.PackSmall();
        bool flag = Platform.Linux32.Native.SteamAPI_ISteamRemoteStorage_UpdatePublishedFileTags(this._ptr, updateHandle, ref pTags1);
        pTags = (SteamParamStringArray_t) pTags1;
        return flag;
      }

      public virtual SteamAPICall_t ISteamRemoteStorage_CommitPublishedFileUpdate(ulong updateHandle)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamRemoteStorage_CommitPublishedFileUpdate(this._ptr, updateHandle) : throw new Exception("ISteamRemoteStorage _ptr is null!");
      }

      public virtual SteamAPICall_t ISteamRemoteStorage_GetPublishedFileDetails(
        ulong unPublishedFileId,
        uint unMaxSecondsOld)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamRemoteStorage _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamRemoteStorage_GetPublishedFileDetails(this._ptr, unPublishedFileId, unMaxSecondsOld);
      }

      public virtual SteamAPICall_t ISteamRemoteStorage_DeletePublishedFile(ulong unPublishedFileId)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamRemoteStorage_DeletePublishedFile(this._ptr, unPublishedFileId) : throw new Exception("ISteamRemoteStorage _ptr is null!");
      }

      public virtual SteamAPICall_t ISteamRemoteStorage_EnumerateUserPublishedFiles(
        uint unStartIndex)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamRemoteStorage_EnumerateUserPublishedFiles(this._ptr, unStartIndex) : throw new Exception("ISteamRemoteStorage _ptr is null!");
      }

      public virtual SteamAPICall_t ISteamRemoteStorage_SubscribePublishedFile(
        ulong unPublishedFileId)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamRemoteStorage_SubscribePublishedFile(this._ptr, unPublishedFileId) : throw new Exception("ISteamRemoteStorage _ptr is null!");
      }

      public virtual SteamAPICall_t ISteamRemoteStorage_EnumerateUserSubscribedFiles(
        uint unStartIndex)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamRemoteStorage_EnumerateUserSubscribedFiles(this._ptr, unStartIndex) : throw new Exception("ISteamRemoteStorage _ptr is null!");
      }

      public virtual SteamAPICall_t ISteamRemoteStorage_UnsubscribePublishedFile(
        ulong unPublishedFileId)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamRemoteStorage_UnsubscribePublishedFile(this._ptr, unPublishedFileId) : throw new Exception("ISteamRemoteStorage _ptr is null!");
      }

      public virtual bool ISteamRemoteStorage_UpdatePublishedFileSetChangeDescription(
        ulong updateHandle,
        string pchChangeDescription)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamRemoteStorage _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamRemoteStorage_UpdatePublishedFileSetChangeDescription(this._ptr, updateHandle, pchChangeDescription);
      }

      public virtual SteamAPICall_t ISteamRemoteStorage_GetPublishedItemVoteDetails(
        ulong unPublishedFileId)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamRemoteStorage_GetPublishedItemVoteDetails(this._ptr, unPublishedFileId) : throw new Exception("ISteamRemoteStorage _ptr is null!");
      }

      public virtual SteamAPICall_t ISteamRemoteStorage_UpdateUserPublishedItemVote(
        ulong unPublishedFileId,
        [MarshalAs(UnmanagedType.U1)] bool bVoteUp)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamRemoteStorage _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamRemoteStorage_UpdateUserPublishedItemVote(this._ptr, unPublishedFileId, bVoteUp);
      }

      public virtual SteamAPICall_t ISteamRemoteStorage_GetUserPublishedItemVoteDetails(
        ulong unPublishedFileId)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamRemoteStorage_GetUserPublishedItemVoteDetails(this._ptr, unPublishedFileId) : throw new Exception("ISteamRemoteStorage _ptr is null!");
      }

      public virtual SteamAPICall_t ISteamRemoteStorage_EnumerateUserSharedWorkshopFiles(
        ulong steamId,
        uint unStartIndex,
        ref SteamParamStringArray_t pRequiredTags,
        ref SteamParamStringArray_t pExcludedTags)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamRemoteStorage _ptr is null!");
        SteamParamStringArray_t.PackSmall pRequiredTags1 = new SteamParamStringArray_t.PackSmall();
        SteamParamStringArray_t.PackSmall pExcludedTags1 = new SteamParamStringArray_t.PackSmall();
        SteamAPICall_t steamApiCallT = Platform.Linux32.Native.SteamAPI_ISteamRemoteStorage_EnumerateUserSharedWorkshopFiles(this._ptr, steamId, unStartIndex, ref pRequiredTags1, ref pExcludedTags1);
        pRequiredTags = (SteamParamStringArray_t) pRequiredTags1;
        pExcludedTags = (SteamParamStringArray_t) pExcludedTags1;
        return steamApiCallT;
      }

      public virtual SteamAPICall_t ISteamRemoteStorage_PublishVideo(
        WorkshopVideoProvider eVideoProvider,
        string pchVideoAccount,
        string pchVideoIdentifier,
        string pchPreviewFile,
        uint nConsumerAppId,
        string pchTitle,
        string pchDescription,
        RemoteStoragePublishedFileVisibility eVisibility,
        ref SteamParamStringArray_t pTags)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamRemoteStorage _ptr is null!");
        SteamParamStringArray_t.PackSmall pTags1 = new SteamParamStringArray_t.PackSmall();
        SteamAPICall_t steamApiCallT = Platform.Linux32.Native.SteamAPI_ISteamRemoteStorage_PublishVideo(this._ptr, eVideoProvider, pchVideoAccount, pchVideoIdentifier, pchPreviewFile, nConsumerAppId, pchTitle, pchDescription, eVisibility, ref pTags1);
        pTags = (SteamParamStringArray_t) pTags1;
        return steamApiCallT;
      }

      public virtual SteamAPICall_t ISteamRemoteStorage_SetUserPublishedFileAction(
        ulong unPublishedFileId,
        WorkshopFileAction eAction)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamRemoteStorage _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamRemoteStorage_SetUserPublishedFileAction(this._ptr, unPublishedFileId, eAction);
      }

      public virtual SteamAPICall_t ISteamRemoteStorage_EnumeratePublishedFilesByUserAction(
        WorkshopFileAction eAction,
        uint unStartIndex)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamRemoteStorage _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamRemoteStorage_EnumeratePublishedFilesByUserAction(this._ptr, eAction, unStartIndex);
      }

      public virtual SteamAPICall_t ISteamRemoteStorage_EnumeratePublishedWorkshopFiles(
        WorkshopEnumerationType eEnumerationType,
        uint unStartIndex,
        uint unCount,
        uint unDays,
        ref SteamParamStringArray_t pTags,
        ref SteamParamStringArray_t pUserTags)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamRemoteStorage _ptr is null!");
        SteamParamStringArray_t.PackSmall pTags1 = new SteamParamStringArray_t.PackSmall();
        SteamParamStringArray_t.PackSmall pUserTags1 = new SteamParamStringArray_t.PackSmall();
        SteamAPICall_t steamApiCallT = Platform.Linux32.Native.SteamAPI_ISteamRemoteStorage_EnumeratePublishedWorkshopFiles(this._ptr, eEnumerationType, unStartIndex, unCount, unDays, ref pTags1, ref pUserTags1);
        pTags = (SteamParamStringArray_t) pTags1;
        pUserTags = (SteamParamStringArray_t) pUserTags1;
        return steamApiCallT;
      }

      public virtual SteamAPICall_t ISteamRemoteStorage_UGCDownloadToLocation(
        ulong hContent,
        string pchLocation,
        uint unPriority)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamRemoteStorage _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamRemoteStorage_UGCDownloadToLocation(this._ptr, hContent, pchLocation, unPriority);
      }

      public virtual bool ISteamUserStats_RequestCurrentStats()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamUserStats_RequestCurrentStats(this._ptr) : throw new Exception("ISteamUserStats _ptr is null!");
      }

      public virtual bool ISteamUserStats_GetStat(string pchName, out int pData)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamUserStats_GetStat(this._ptr, pchName, out pData) : throw new Exception("ISteamUserStats _ptr is null!");
      }

      public virtual bool ISteamUserStats_GetStat0(string pchName, out float pData)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamUserStats_GetStat0(this._ptr, pchName, out pData) : throw new Exception("ISteamUserStats _ptr is null!");
      }

      public virtual bool ISteamUserStats_SetStat(string pchName, int nData)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUserStats _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamUserStats_SetStat(this._ptr, pchName, nData);
      }

      public virtual bool ISteamUserStats_SetStat0(string pchName, float fData)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUserStats _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamUserStats_SetStat0(this._ptr, pchName, fData);
      }

      public virtual bool ISteamUserStats_UpdateAvgRateStat(
        string pchName,
        float flCountThisSession,
        double dSessionLength)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUserStats _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamUserStats_UpdateAvgRateStat(this._ptr, pchName, flCountThisSession, dSessionLength);
      }

      public virtual bool ISteamUserStats_GetAchievement(string pchName, [MarshalAs(UnmanagedType.U1)] ref bool pbAchieved)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUserStats _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamUserStats_GetAchievement(this._ptr, pchName, ref pbAchieved);
      }

      public virtual bool ISteamUserStats_SetAchievement(string pchName)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamUserStats_SetAchievement(this._ptr, pchName) : throw new Exception("ISteamUserStats _ptr is null!");
      }

      public virtual bool ISteamUserStats_ClearAchievement(string pchName)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamUserStats_ClearAchievement(this._ptr, pchName) : throw new Exception("ISteamUserStats _ptr is null!");
      }

      public virtual bool ISteamUserStats_GetAchievementAndUnlockTime(
        string pchName,
        [MarshalAs(UnmanagedType.U1)] ref bool pbAchieved,
        out uint punUnlockTime)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUserStats _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamUserStats_GetAchievementAndUnlockTime(this._ptr, pchName, ref pbAchieved, out punUnlockTime);
      }

      public virtual bool ISteamUserStats_StoreStats()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamUserStats_StoreStats(this._ptr) : throw new Exception("ISteamUserStats _ptr is null!");
      }

      public virtual int ISteamUserStats_GetAchievementIcon(string pchName)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamUserStats_GetAchievementIcon(this._ptr, pchName) : throw new Exception("ISteamUserStats _ptr is null!");
      }

      public virtual IntPtr ISteamUserStats_GetAchievementDisplayAttribute(
        string pchName,
        string pchKey)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUserStats _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamUserStats_GetAchievementDisplayAttribute(this._ptr, pchName, pchKey);
      }

      public virtual bool ISteamUserStats_IndicateAchievementProgress(
        string pchName,
        uint nCurProgress,
        uint nMaxProgress)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUserStats _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamUserStats_IndicateAchievementProgress(this._ptr, pchName, nCurProgress, nMaxProgress);
      }

      public virtual uint ISteamUserStats_GetNumAchievements()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamUserStats_GetNumAchievements(this._ptr) : throw new Exception("ISteamUserStats _ptr is null!");
      }

      public virtual IntPtr ISteamUserStats_GetAchievementName(uint iAchievement)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamUserStats_GetAchievementName(this._ptr, iAchievement) : throw new Exception("ISteamUserStats _ptr is null!");
      }

      public virtual SteamAPICall_t ISteamUserStats_RequestUserStats(ulong steamIDUser)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamUserStats_RequestUserStats(this._ptr, steamIDUser) : throw new Exception("ISteamUserStats _ptr is null!");
      }

      public virtual bool ISteamUserStats_GetUserStat(
        ulong steamIDUser,
        string pchName,
        out int pData)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUserStats _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamUserStats_GetUserStat(this._ptr, steamIDUser, pchName, out pData);
      }

      public virtual bool ISteamUserStats_GetUserStat0(
        ulong steamIDUser,
        string pchName,
        out float pData)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUserStats _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamUserStats_GetUserStat0(this._ptr, steamIDUser, pchName, out pData);
      }

      public virtual bool ISteamUserStats_GetUserAchievement(
        ulong steamIDUser,
        string pchName,
        [MarshalAs(UnmanagedType.U1)] ref bool pbAchieved)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUserStats _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamUserStats_GetUserAchievement(this._ptr, steamIDUser, pchName, ref pbAchieved);
      }

      public virtual bool ISteamUserStats_GetUserAchievementAndUnlockTime(
        ulong steamIDUser,
        string pchName,
        [MarshalAs(UnmanagedType.U1)] ref bool pbAchieved,
        out uint punUnlockTime)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUserStats _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamUserStats_GetUserAchievementAndUnlockTime(this._ptr, steamIDUser, pchName, ref pbAchieved, out punUnlockTime);
      }

      public virtual bool ISteamUserStats_ResetAllStats([MarshalAs(UnmanagedType.U1)] bool bAchievementsToo)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamUserStats_ResetAllStats(this._ptr, bAchievementsToo) : throw new Exception("ISteamUserStats _ptr is null!");
      }

      public virtual SteamAPICall_t ISteamUserStats_FindOrCreateLeaderboard(
        string pchLeaderboardName,
        LeaderboardSortMethod eLeaderboardSortMethod,
        LeaderboardDisplayType eLeaderboardDisplayType)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUserStats _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamUserStats_FindOrCreateLeaderboard(this._ptr, pchLeaderboardName, eLeaderboardSortMethod, eLeaderboardDisplayType);
      }

      public virtual SteamAPICall_t ISteamUserStats_FindLeaderboard(string pchLeaderboardName)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamUserStats_FindLeaderboard(this._ptr, pchLeaderboardName) : throw new Exception("ISteamUserStats _ptr is null!");
      }

      public virtual IntPtr ISteamUserStats_GetLeaderboardName(ulong hSteamLeaderboard)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamUserStats_GetLeaderboardName(this._ptr, hSteamLeaderboard) : throw new Exception("ISteamUserStats _ptr is null!");
      }

      public virtual int ISteamUserStats_GetLeaderboardEntryCount(ulong hSteamLeaderboard)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamUserStats_GetLeaderboardEntryCount(this._ptr, hSteamLeaderboard) : throw new Exception("ISteamUserStats _ptr is null!");
      }

      public virtual LeaderboardSortMethod ISteamUserStats_GetLeaderboardSortMethod(
        ulong hSteamLeaderboard)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamUserStats_GetLeaderboardSortMethod(this._ptr, hSteamLeaderboard) : throw new Exception("ISteamUserStats _ptr is null!");
      }

      public virtual LeaderboardDisplayType ISteamUserStats_GetLeaderboardDisplayType(
        ulong hSteamLeaderboard)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamUserStats_GetLeaderboardDisplayType(this._ptr, hSteamLeaderboard) : throw new Exception("ISteamUserStats _ptr is null!");
      }

      public virtual SteamAPICall_t ISteamUserStats_DownloadLeaderboardEntries(
        ulong hSteamLeaderboard,
        LeaderboardDataRequest eLeaderboardDataRequest,
        int nRangeStart,
        int nRangeEnd)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUserStats _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamUserStats_DownloadLeaderboardEntries(this._ptr, hSteamLeaderboard, eLeaderboardDataRequest, nRangeStart, nRangeEnd);
      }

      public virtual SteamAPICall_t ISteamUserStats_DownloadLeaderboardEntriesForUsers(
        ulong hSteamLeaderboard,
        IntPtr prgUsers,
        int cUsers)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUserStats _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamUserStats_DownloadLeaderboardEntriesForUsers(this._ptr, hSteamLeaderboard, prgUsers, cUsers);
      }

      public virtual bool ISteamUserStats_GetDownloadedLeaderboardEntry(
        ulong hSteamLeaderboardEntries,
        int index,
        ref LeaderboardEntry_t pLeaderboardEntry,
        IntPtr pDetails,
        int cDetailsMax)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUserStats _ptr is null!");
        LeaderboardEntry_t.PackSmall pLeaderboardEntry1 = new LeaderboardEntry_t.PackSmall();
        bool leaderboardEntry = Platform.Linux32.Native.SteamAPI_ISteamUserStats_GetDownloadedLeaderboardEntry(this._ptr, hSteamLeaderboardEntries, index, ref pLeaderboardEntry1, pDetails, cDetailsMax);
        pLeaderboardEntry = (LeaderboardEntry_t) pLeaderboardEntry1;
        return leaderboardEntry;
      }

      public virtual SteamAPICall_t ISteamUserStats_UploadLeaderboardScore(
        ulong hSteamLeaderboard,
        LeaderboardUploadScoreMethod eLeaderboardUploadScoreMethod,
        int nScore,
        int[] pScoreDetails,
        int cScoreDetailsCount)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUserStats _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamUserStats_UploadLeaderboardScore(this._ptr, hSteamLeaderboard, eLeaderboardUploadScoreMethod, nScore, pScoreDetails, cScoreDetailsCount);
      }

      public virtual SteamAPICall_t ISteamUserStats_AttachLeaderboardUGC(
        ulong hSteamLeaderboard,
        ulong hUGC)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUserStats _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamUserStats_AttachLeaderboardUGC(this._ptr, hSteamLeaderboard, hUGC);
      }

      public virtual SteamAPICall_t ISteamUserStats_GetNumberOfCurrentPlayers()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamUserStats_GetNumberOfCurrentPlayers(this._ptr) : throw new Exception("ISteamUserStats _ptr is null!");
      }

      public virtual SteamAPICall_t ISteamUserStats_RequestGlobalAchievementPercentages()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamUserStats_RequestGlobalAchievementPercentages(this._ptr) : throw new Exception("ISteamUserStats _ptr is null!");
      }

      public virtual int ISteamUserStats_GetMostAchievedAchievementInfo(
        StringBuilder pchName,
        uint unNameBufLen,
        out float pflPercent,
        [MarshalAs(UnmanagedType.U1)] ref bool pbAchieved)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUserStats _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamUserStats_GetMostAchievedAchievementInfo(this._ptr, pchName, unNameBufLen, out pflPercent, ref pbAchieved);
      }

      public virtual int ISteamUserStats_GetNextMostAchievedAchievementInfo(
        int iIteratorPrevious,
        StringBuilder pchName,
        uint unNameBufLen,
        out float pflPercent,
        [MarshalAs(UnmanagedType.U1)] ref bool pbAchieved)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUserStats _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamUserStats_GetNextMostAchievedAchievementInfo(this._ptr, iIteratorPrevious, pchName, unNameBufLen, out pflPercent, ref pbAchieved);
      }

      public virtual bool ISteamUserStats_GetAchievementAchievedPercent(
        string pchName,
        out float pflPercent)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamUserStats_GetAchievementAchievedPercent(this._ptr, pchName, out pflPercent) : throw new Exception("ISteamUserStats _ptr is null!");
      }

      public virtual SteamAPICall_t ISteamUserStats_RequestGlobalStats(int nHistoryDays)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamUserStats_RequestGlobalStats(this._ptr, nHistoryDays) : throw new Exception("ISteamUserStats _ptr is null!");
      }

      public virtual bool ISteamUserStats_GetGlobalStat(string pchStatName, out long pData)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamUserStats_GetGlobalStat(this._ptr, pchStatName, out pData) : throw new Exception("ISteamUserStats _ptr is null!");
      }

      public virtual bool ISteamUserStats_GetGlobalStat0(string pchStatName, out double pData)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamUserStats_GetGlobalStat0(this._ptr, pchStatName, out pData) : throw new Exception("ISteamUserStats _ptr is null!");
      }

      public virtual int ISteamUserStats_GetGlobalStatHistory(
        string pchStatName,
        out long pData,
        uint cubData)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUserStats _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamUserStats_GetGlobalStatHistory(this._ptr, pchStatName, out pData, cubData);
      }

      public virtual int ISteamUserStats_GetGlobalStatHistory0(
        string pchStatName,
        out double pData,
        uint cubData)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUserStats _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamUserStats_GetGlobalStatHistory0(this._ptr, pchStatName, out pData, cubData);
      }

      public virtual bool ISteamApps_BIsSubscribed()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamApps_BIsSubscribed(this._ptr) : throw new Exception("ISteamApps _ptr is null!");
      }

      public virtual bool ISteamApps_BIsLowViolence()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamApps_BIsLowViolence(this._ptr) : throw new Exception("ISteamApps _ptr is null!");
      }

      public virtual bool ISteamApps_BIsCybercafe()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamApps_BIsCybercafe(this._ptr) : throw new Exception("ISteamApps _ptr is null!");
      }

      public virtual bool ISteamApps_BIsVACBanned()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamApps_BIsVACBanned(this._ptr) : throw new Exception("ISteamApps _ptr is null!");
      }

      public virtual IntPtr ISteamApps_GetCurrentGameLanguage()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamApps_GetCurrentGameLanguage(this._ptr) : throw new Exception("ISteamApps _ptr is null!");
      }

      public virtual IntPtr ISteamApps_GetAvailableGameLanguages()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamApps_GetAvailableGameLanguages(this._ptr) : throw new Exception("ISteamApps _ptr is null!");
      }

      public virtual bool ISteamApps_BIsSubscribedApp(uint appID)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamApps_BIsSubscribedApp(this._ptr, appID) : throw new Exception("ISteamApps _ptr is null!");
      }

      public virtual bool ISteamApps_BIsDlcInstalled(uint appID)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamApps_BIsDlcInstalled(this._ptr, appID) : throw new Exception("ISteamApps _ptr is null!");
      }

      public virtual uint ISteamApps_GetEarliestPurchaseUnixTime(uint nAppID)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamApps_GetEarliestPurchaseUnixTime(this._ptr, nAppID) : throw new Exception("ISteamApps _ptr is null!");
      }

      public virtual bool ISteamApps_BIsSubscribedFromFreeWeekend()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamApps_BIsSubscribedFromFreeWeekend(this._ptr) : throw new Exception("ISteamApps _ptr is null!");
      }

      public virtual int ISteamApps_GetDLCCount()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamApps_GetDLCCount(this._ptr) : throw new Exception("ISteamApps _ptr is null!");
      }

      public virtual bool ISteamApps_BGetDLCDataByIndex(
        int iDLC,
        ref uint pAppID,
        [MarshalAs(UnmanagedType.U1)] ref bool pbAvailable,
        StringBuilder pchName,
        int cchNameBufferSize)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamApps _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamApps_BGetDLCDataByIndex(this._ptr, iDLC, ref pAppID, ref pbAvailable, pchName, cchNameBufferSize);
      }

      public virtual void ISteamApps_InstallDLC(uint nAppID)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamApps _ptr is null!");
        Platform.Linux32.Native.SteamAPI_ISteamApps_InstallDLC(this._ptr, nAppID);
      }

      public virtual void ISteamApps_UninstallDLC(uint nAppID)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamApps _ptr is null!");
        Platform.Linux32.Native.SteamAPI_ISteamApps_UninstallDLC(this._ptr, nAppID);
      }

      public virtual void ISteamApps_RequestAppProofOfPurchaseKey(uint nAppID)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamApps _ptr is null!");
        Platform.Linux32.Native.SteamAPI_ISteamApps_RequestAppProofOfPurchaseKey(this._ptr, nAppID);
      }

      public virtual bool ISteamApps_GetCurrentBetaName(
        StringBuilder pchName,
        int cchNameBufferSize)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamApps _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamApps_GetCurrentBetaName(this._ptr, pchName, cchNameBufferSize);
      }

      public virtual bool ISteamApps_MarkContentCorrupt([MarshalAs(UnmanagedType.U1)] bool bMissingFilesOnly)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamApps_MarkContentCorrupt(this._ptr, bMissingFilesOnly) : throw new Exception("ISteamApps _ptr is null!");
      }

      public virtual uint ISteamApps_GetInstalledDepots(
        uint appID,
        IntPtr pvecDepots,
        uint cMaxDepots)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamApps _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamApps_GetInstalledDepots(this._ptr, appID, pvecDepots, cMaxDepots);
      }

      public virtual uint ISteamApps_GetAppInstallDir(
        uint appID,
        StringBuilder pchFolder,
        uint cchFolderBufferSize)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamApps _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamApps_GetAppInstallDir(this._ptr, appID, pchFolder, cchFolderBufferSize);
      }

      public virtual bool ISteamApps_BIsAppInstalled(uint appID)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamApps_BIsAppInstalled(this._ptr, appID) : throw new Exception("ISteamApps _ptr is null!");
      }

      public virtual CSteamID ISteamApps_GetAppOwner()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamApps_GetAppOwner(this._ptr) : throw new Exception("ISteamApps _ptr is null!");
      }

      public virtual IntPtr ISteamApps_GetLaunchQueryParam(string pchKey)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamApps_GetLaunchQueryParam(this._ptr, pchKey) : throw new Exception("ISteamApps _ptr is null!");
      }

      public virtual bool ISteamApps_GetDlcDownloadProgress(
        uint nAppID,
        out ulong punBytesDownloaded,
        out ulong punBytesTotal)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamApps_GetDlcDownloadProgress(this._ptr, nAppID, out punBytesDownloaded, out punBytesTotal) : throw new Exception("ISteamApps _ptr is null!");
      }

      public virtual int ISteamApps_GetAppBuildId()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamApps_GetAppBuildId(this._ptr) : throw new Exception("ISteamApps _ptr is null!");
      }

      public virtual void ISteamApps_RequestAllProofOfPurchaseKeys()
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamApps _ptr is null!");
        Platform.Linux32.Native.SteamAPI_ISteamApps_RequestAllProofOfPurchaseKeys(this._ptr);
      }

      public virtual SteamAPICall_t ISteamApps_GetFileDetails(string pszFileName)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamApps_GetFileDetails(this._ptr, pszFileName) : throw new Exception("ISteamApps _ptr is null!");
      }

      public virtual bool ISteamNetworking_SendP2PPacket(
        ulong steamIDRemote,
        IntPtr pubData,
        uint cubData,
        P2PSend eP2PSendType,
        int nChannel)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamNetworking _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamNetworking_SendP2PPacket(this._ptr, steamIDRemote, pubData, cubData, eP2PSendType, nChannel);
      }

      public virtual bool ISteamNetworking_IsP2PPacketAvailable(out uint pcubMsgSize, int nChannel)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamNetworking_IsP2PPacketAvailable(this._ptr, out pcubMsgSize, nChannel) : throw new Exception("ISteamNetworking _ptr is null!");
      }

      public virtual bool ISteamNetworking_ReadP2PPacket(
        IntPtr pubDest,
        uint cubDest,
        out uint pcubMsgSize,
        out ulong psteamIDRemote,
        int nChannel)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamNetworking _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamNetworking_ReadP2PPacket(this._ptr, pubDest, cubDest, out pcubMsgSize, out psteamIDRemote, nChannel);
      }

      public virtual bool ISteamNetworking_AcceptP2PSessionWithUser(ulong steamIDRemote)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamNetworking_AcceptP2PSessionWithUser(this._ptr, steamIDRemote) : throw new Exception("ISteamNetworking _ptr is null!");
      }

      public virtual bool ISteamNetworking_CloseP2PSessionWithUser(ulong steamIDRemote)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamNetworking_CloseP2PSessionWithUser(this._ptr, steamIDRemote) : throw new Exception("ISteamNetworking _ptr is null!");
      }

      public virtual bool ISteamNetworking_CloseP2PChannelWithUser(
        ulong steamIDRemote,
        int nChannel)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamNetworking _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamNetworking_CloseP2PChannelWithUser(this._ptr, steamIDRemote, nChannel);
      }

      public virtual bool ISteamNetworking_GetP2PSessionState(
        ulong steamIDRemote,
        ref P2PSessionState_t pConnectionState)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamNetworking _ptr is null!");
        P2PSessionState_t.PackSmall pConnectionState1 = new P2PSessionState_t.PackSmall();
        bool p2PsessionState = Platform.Linux32.Native.SteamAPI_ISteamNetworking_GetP2PSessionState(this._ptr, steamIDRemote, ref pConnectionState1);
        pConnectionState = (P2PSessionState_t) pConnectionState1;
        return p2PsessionState;
      }

      public virtual bool ISteamNetworking_AllowP2PPacketRelay([MarshalAs(UnmanagedType.U1)] bool bAllow)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamNetworking_AllowP2PPacketRelay(this._ptr, bAllow) : throw new Exception("ISteamNetworking _ptr is null!");
      }

      public virtual SNetListenSocket_t ISteamNetworking_CreateListenSocket(
        int nVirtualP2PPort,
        uint nIP,
        ushort nPort,
        [MarshalAs(UnmanagedType.U1)] bool bAllowUseOfPacketRelay)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamNetworking _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamNetworking_CreateListenSocket(this._ptr, nVirtualP2PPort, nIP, nPort, bAllowUseOfPacketRelay);
      }

      public virtual SNetSocket_t ISteamNetworking_CreateP2PConnectionSocket(
        ulong steamIDTarget,
        int nVirtualPort,
        int nTimeoutSec,
        [MarshalAs(UnmanagedType.U1)] bool bAllowUseOfPacketRelay)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamNetworking _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamNetworking_CreateP2PConnectionSocket(this._ptr, steamIDTarget, nVirtualPort, nTimeoutSec, bAllowUseOfPacketRelay);
      }

      public virtual SNetSocket_t ISteamNetworking_CreateConnectionSocket(
        uint nIP,
        ushort nPort,
        int nTimeoutSec)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamNetworking _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamNetworking_CreateConnectionSocket(this._ptr, nIP, nPort, nTimeoutSec);
      }

      public virtual bool ISteamNetworking_DestroySocket(uint hSocket, [MarshalAs(UnmanagedType.U1)] bool bNotifyRemoteEnd)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamNetworking _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamNetworking_DestroySocket(this._ptr, hSocket, bNotifyRemoteEnd);
      }

      public virtual bool ISteamNetworking_DestroyListenSocket(uint hSocket, [MarshalAs(UnmanagedType.U1)] bool bNotifyRemoteEnd)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamNetworking _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamNetworking_DestroyListenSocket(this._ptr, hSocket, bNotifyRemoteEnd);
      }

      public virtual bool ISteamNetworking_SendDataOnSocket(
        uint hSocket,
        IntPtr pubData,
        uint cubData,
        [MarshalAs(UnmanagedType.U1)] bool bReliable)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamNetworking _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamNetworking_SendDataOnSocket(this._ptr, hSocket, pubData, cubData, bReliable);
      }

      public virtual bool ISteamNetworking_IsDataAvailableOnSocket(
        uint hSocket,
        out uint pcubMsgSize)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamNetworking_IsDataAvailableOnSocket(this._ptr, hSocket, out pcubMsgSize) : throw new Exception("ISteamNetworking _ptr is null!");
      }

      public virtual bool ISteamNetworking_RetrieveDataFromSocket(
        uint hSocket,
        IntPtr pubDest,
        uint cubDest,
        out uint pcubMsgSize)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamNetworking _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamNetworking_RetrieveDataFromSocket(this._ptr, hSocket, pubDest, cubDest, out pcubMsgSize);
      }

      public virtual bool ISteamNetworking_IsDataAvailable(
        uint hListenSocket,
        out uint pcubMsgSize,
        ref uint phSocket)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamNetworking _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamNetworking_IsDataAvailable(this._ptr, hListenSocket, out pcubMsgSize, ref phSocket);
      }

      public virtual bool ISteamNetworking_RetrieveData(
        uint hListenSocket,
        IntPtr pubDest,
        uint cubDest,
        out uint pcubMsgSize,
        ref uint phSocket)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamNetworking _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamNetworking_RetrieveData(this._ptr, hListenSocket, pubDest, cubDest, out pcubMsgSize, ref phSocket);
      }

      public virtual bool ISteamNetworking_GetSocketInfo(
        uint hSocket,
        out ulong pSteamIDRemote,
        IntPtr peSocketStatus,
        out uint punIPRemote,
        out ushort punPortRemote)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamNetworking _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamNetworking_GetSocketInfo(this._ptr, hSocket, out pSteamIDRemote, peSocketStatus, out punIPRemote, out punPortRemote);
      }

      public virtual bool ISteamNetworking_GetListenSocketInfo(
        uint hListenSocket,
        out uint pnIP,
        out ushort pnPort)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamNetworking_GetListenSocketInfo(this._ptr, hListenSocket, out pnIP, out pnPort) : throw new Exception("ISteamNetworking _ptr is null!");
      }

      public virtual SNetSocketConnectionType ISteamNetworking_GetSocketConnectionType(uint hSocket)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamNetworking_GetSocketConnectionType(this._ptr, hSocket) : throw new Exception("ISteamNetworking _ptr is null!");
      }

      public virtual int ISteamNetworking_GetMaxPacketSize(uint hSocket)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamNetworking_GetMaxPacketSize(this._ptr, hSocket) : throw new Exception("ISteamNetworking _ptr is null!");
      }

      public virtual ScreenshotHandle ISteamScreenshots_WriteScreenshot(
        IntPtr pubRGB,
        uint cubRGB,
        int nWidth,
        int nHeight)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamScreenshots _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamScreenshots_WriteScreenshot(this._ptr, pubRGB, cubRGB, nWidth, nHeight);
      }

      public virtual ScreenshotHandle ISteamScreenshots_AddScreenshotToLibrary(
        string pchFilename,
        string pchThumbnailFilename,
        int nWidth,
        int nHeight)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamScreenshots _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamScreenshots_AddScreenshotToLibrary(this._ptr, pchFilename, pchThumbnailFilename, nWidth, nHeight);
      }

      public virtual void ISteamScreenshots_TriggerScreenshot()
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamScreenshots _ptr is null!");
        Platform.Linux32.Native.SteamAPI_ISteamScreenshots_TriggerScreenshot(this._ptr);
      }

      public virtual void ISteamScreenshots_HookScreenshots([MarshalAs(UnmanagedType.U1)] bool bHook)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamScreenshots _ptr is null!");
        Platform.Linux32.Native.SteamAPI_ISteamScreenshots_HookScreenshots(this._ptr, bHook);
      }

      public virtual bool ISteamScreenshots_SetLocation(uint hScreenshot, string pchLocation)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamScreenshots _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamScreenshots_SetLocation(this._ptr, hScreenshot, pchLocation);
      }

      public virtual bool ISteamScreenshots_TagUser(uint hScreenshot, ulong steamID)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamScreenshots _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamScreenshots_TagUser(this._ptr, hScreenshot, steamID);
      }

      public virtual bool ISteamScreenshots_TagPublishedFile(
        uint hScreenshot,
        ulong unPublishedFileID)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamScreenshots _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamScreenshots_TagPublishedFile(this._ptr, hScreenshot, unPublishedFileID);
      }

      public virtual bool ISteamScreenshots_IsScreenshotsHooked()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamScreenshots_IsScreenshotsHooked(this._ptr) : throw new Exception("ISteamScreenshots _ptr is null!");
      }

      public virtual ScreenshotHandle ISteamScreenshots_AddVRScreenshotToLibrary(
        VRScreenshotType eType,
        string pchFilename,
        string pchVRFilename)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamScreenshots _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamScreenshots_AddVRScreenshotToLibrary(this._ptr, eType, pchFilename, pchVRFilename);
      }

      public virtual bool ISteamMusic_BIsEnabled()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamMusic_BIsEnabled(this._ptr) : throw new Exception("ISteamMusic _ptr is null!");
      }

      public virtual bool ISteamMusic_BIsPlaying()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamMusic_BIsPlaying(this._ptr) : throw new Exception("ISteamMusic _ptr is null!");
      }

      public virtual AudioPlayback_Status ISteamMusic_GetPlaybackStatus()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamMusic_GetPlaybackStatus(this._ptr) : throw new Exception("ISteamMusic _ptr is null!");
      }

      public virtual void ISteamMusic_Play()
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMusic _ptr is null!");
        Platform.Linux32.Native.SteamAPI_ISteamMusic_Play(this._ptr);
      }

      public virtual void ISteamMusic_Pause()
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMusic _ptr is null!");
        Platform.Linux32.Native.SteamAPI_ISteamMusic_Pause(this._ptr);
      }

      public virtual void ISteamMusic_PlayPrevious()
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMusic _ptr is null!");
        Platform.Linux32.Native.SteamAPI_ISteamMusic_PlayPrevious(this._ptr);
      }

      public virtual void ISteamMusic_PlayNext()
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMusic _ptr is null!");
        Platform.Linux32.Native.SteamAPI_ISteamMusic_PlayNext(this._ptr);
      }

      public virtual void ISteamMusic_SetVolume(float flVolume)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMusic _ptr is null!");
        Platform.Linux32.Native.SteamAPI_ISteamMusic_SetVolume(this._ptr, flVolume);
      }

      public virtual float ISteamMusic_GetVolume()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamMusic_GetVolume(this._ptr) : throw new Exception("ISteamMusic _ptr is null!");
      }

      public virtual bool ISteamMusicRemote_RegisterSteamMusicRemote(string pchName)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamMusicRemote_RegisterSteamMusicRemote(this._ptr, pchName) : throw new Exception("ISteamMusicRemote _ptr is null!");
      }

      public virtual bool ISteamMusicRemote_DeregisterSteamMusicRemote()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamMusicRemote_DeregisterSteamMusicRemote(this._ptr) : throw new Exception("ISteamMusicRemote _ptr is null!");
      }

      public virtual bool ISteamMusicRemote_BIsCurrentMusicRemote()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamMusicRemote_BIsCurrentMusicRemote(this._ptr) : throw new Exception("ISteamMusicRemote _ptr is null!");
      }

      public virtual bool ISteamMusicRemote_BActivationSuccess([MarshalAs(UnmanagedType.U1)] bool bValue)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamMusicRemote_BActivationSuccess(this._ptr, bValue) : throw new Exception("ISteamMusicRemote _ptr is null!");
      }

      public virtual bool ISteamMusicRemote_SetDisplayName(string pchDisplayName)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamMusicRemote_SetDisplayName(this._ptr, pchDisplayName) : throw new Exception("ISteamMusicRemote _ptr is null!");
      }

      public virtual bool ISteamMusicRemote_SetPNGIcon_64x64(IntPtr pvBuffer, uint cbBufferLength)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMusicRemote _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamMusicRemote_SetPNGIcon_64x64(this._ptr, pvBuffer, cbBufferLength);
      }

      public virtual bool ISteamMusicRemote_EnablePlayPrevious([MarshalAs(UnmanagedType.U1)] bool bValue)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamMusicRemote_EnablePlayPrevious(this._ptr, bValue) : throw new Exception("ISteamMusicRemote _ptr is null!");
      }

      public virtual bool ISteamMusicRemote_EnablePlayNext([MarshalAs(UnmanagedType.U1)] bool bValue)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamMusicRemote_EnablePlayNext(this._ptr, bValue) : throw new Exception("ISteamMusicRemote _ptr is null!");
      }

      public virtual bool ISteamMusicRemote_EnableShuffled([MarshalAs(UnmanagedType.U1)] bool bValue)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamMusicRemote_EnableShuffled(this._ptr, bValue) : throw new Exception("ISteamMusicRemote _ptr is null!");
      }

      public virtual bool ISteamMusicRemote_EnableLooped([MarshalAs(UnmanagedType.U1)] bool bValue)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamMusicRemote_EnableLooped(this._ptr, bValue) : throw new Exception("ISteamMusicRemote _ptr is null!");
      }

      public virtual bool ISteamMusicRemote_EnableQueue([MarshalAs(UnmanagedType.U1)] bool bValue)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamMusicRemote_EnableQueue(this._ptr, bValue) : throw new Exception("ISteamMusicRemote _ptr is null!");
      }

      public virtual bool ISteamMusicRemote_EnablePlaylists([MarshalAs(UnmanagedType.U1)] bool bValue)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamMusicRemote_EnablePlaylists(this._ptr, bValue) : throw new Exception("ISteamMusicRemote _ptr is null!");
      }

      public virtual bool ISteamMusicRemote_UpdatePlaybackStatus(AudioPlayback_Status nStatus)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamMusicRemote_UpdatePlaybackStatus(this._ptr, nStatus) : throw new Exception("ISteamMusicRemote _ptr is null!");
      }

      public virtual bool ISteamMusicRemote_UpdateShuffled([MarshalAs(UnmanagedType.U1)] bool bValue)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamMusicRemote_UpdateShuffled(this._ptr, bValue) : throw new Exception("ISteamMusicRemote _ptr is null!");
      }

      public virtual bool ISteamMusicRemote_UpdateLooped([MarshalAs(UnmanagedType.U1)] bool bValue)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamMusicRemote_UpdateLooped(this._ptr, bValue) : throw new Exception("ISteamMusicRemote _ptr is null!");
      }

      public virtual bool ISteamMusicRemote_UpdateVolume(float flValue)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamMusicRemote_UpdateVolume(this._ptr, flValue) : throw new Exception("ISteamMusicRemote _ptr is null!");
      }

      public virtual bool ISteamMusicRemote_CurrentEntryWillChange()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamMusicRemote_CurrentEntryWillChange(this._ptr) : throw new Exception("ISteamMusicRemote _ptr is null!");
      }

      public virtual bool ISteamMusicRemote_CurrentEntryIsAvailable([MarshalAs(UnmanagedType.U1)] bool bAvailable)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamMusicRemote_CurrentEntryIsAvailable(this._ptr, bAvailable) : throw new Exception("ISteamMusicRemote _ptr is null!");
      }

      public virtual bool ISteamMusicRemote_UpdateCurrentEntryText(string pchText)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamMusicRemote_UpdateCurrentEntryText(this._ptr, pchText) : throw new Exception("ISteamMusicRemote _ptr is null!");
      }

      public virtual bool ISteamMusicRemote_UpdateCurrentEntryElapsedSeconds(int nValue)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamMusicRemote_UpdateCurrentEntryElapsedSeconds(this._ptr, nValue) : throw new Exception("ISteamMusicRemote _ptr is null!");
      }

      public virtual bool ISteamMusicRemote_UpdateCurrentEntryCoverArt(
        IntPtr pvBuffer,
        uint cbBufferLength)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMusicRemote _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamMusicRemote_UpdateCurrentEntryCoverArt(this._ptr, pvBuffer, cbBufferLength);
      }

      public virtual bool ISteamMusicRemote_CurrentEntryDidChange()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamMusicRemote_CurrentEntryDidChange(this._ptr) : throw new Exception("ISteamMusicRemote _ptr is null!");
      }

      public virtual bool ISteamMusicRemote_QueueWillChange()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamMusicRemote_QueueWillChange(this._ptr) : throw new Exception("ISteamMusicRemote _ptr is null!");
      }

      public virtual bool ISteamMusicRemote_ResetQueueEntries()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamMusicRemote_ResetQueueEntries(this._ptr) : throw new Exception("ISteamMusicRemote _ptr is null!");
      }

      public virtual bool ISteamMusicRemote_SetQueueEntry(
        int nID,
        int nPosition,
        string pchEntryText)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMusicRemote _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamMusicRemote_SetQueueEntry(this._ptr, nID, nPosition, pchEntryText);
      }

      public virtual bool ISteamMusicRemote_SetCurrentQueueEntry(int nID)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamMusicRemote_SetCurrentQueueEntry(this._ptr, nID) : throw new Exception("ISteamMusicRemote _ptr is null!");
      }

      public virtual bool ISteamMusicRemote_QueueDidChange()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamMusicRemote_QueueDidChange(this._ptr) : throw new Exception("ISteamMusicRemote _ptr is null!");
      }

      public virtual bool ISteamMusicRemote_PlaylistWillChange()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamMusicRemote_PlaylistWillChange(this._ptr) : throw new Exception("ISteamMusicRemote _ptr is null!");
      }

      public virtual bool ISteamMusicRemote_ResetPlaylistEntries()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamMusicRemote_ResetPlaylistEntries(this._ptr) : throw new Exception("ISteamMusicRemote _ptr is null!");
      }

      public virtual bool ISteamMusicRemote_SetPlaylistEntry(
        int nID,
        int nPosition,
        string pchEntryText)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMusicRemote _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamMusicRemote_SetPlaylistEntry(this._ptr, nID, nPosition, pchEntryText);
      }

      public virtual bool ISteamMusicRemote_SetCurrentPlaylistEntry(int nID)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamMusicRemote_SetCurrentPlaylistEntry(this._ptr, nID) : throw new Exception("ISteamMusicRemote _ptr is null!");
      }

      public virtual bool ISteamMusicRemote_PlaylistDidChange()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamMusicRemote_PlaylistDidChange(this._ptr) : throw new Exception("ISteamMusicRemote _ptr is null!");
      }

      public virtual HTTPRequestHandle ISteamHTTP_CreateHTTPRequest(
        HTTPMethod eHTTPRequestMethod,
        string pchAbsoluteURL)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTTP _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamHTTP_CreateHTTPRequest(this._ptr, eHTTPRequestMethod, pchAbsoluteURL);
      }

      public virtual bool ISteamHTTP_SetHTTPRequestContextValue(uint hRequest, ulong ulContextValue)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTTP _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamHTTP_SetHTTPRequestContextValue(this._ptr, hRequest, ulContextValue);
      }

      public virtual bool ISteamHTTP_SetHTTPRequestNetworkActivityTimeout(
        uint hRequest,
        uint unTimeoutSeconds)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTTP _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamHTTP_SetHTTPRequestNetworkActivityTimeout(this._ptr, hRequest, unTimeoutSeconds);
      }

      public virtual bool ISteamHTTP_SetHTTPRequestHeaderValue(
        uint hRequest,
        string pchHeaderName,
        string pchHeaderValue)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTTP _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamHTTP_SetHTTPRequestHeaderValue(this._ptr, hRequest, pchHeaderName, pchHeaderValue);
      }

      public virtual bool ISteamHTTP_SetHTTPRequestGetOrPostParameter(
        uint hRequest,
        string pchParamName,
        string pchParamValue)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTTP _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamHTTP_SetHTTPRequestGetOrPostParameter(this._ptr, hRequest, pchParamName, pchParamValue);
      }

      public virtual bool ISteamHTTP_SendHTTPRequest(uint hRequest, ref ulong pCallHandle)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTTP _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamHTTP_SendHTTPRequest(this._ptr, hRequest, ref pCallHandle);
      }

      public virtual bool ISteamHTTP_SendHTTPRequestAndStreamResponse(
        uint hRequest,
        ref ulong pCallHandle)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTTP _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamHTTP_SendHTTPRequestAndStreamResponse(this._ptr, hRequest, ref pCallHandle);
      }

      public virtual bool ISteamHTTP_DeferHTTPRequest(uint hRequest)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamHTTP_DeferHTTPRequest(this._ptr, hRequest) : throw new Exception("ISteamHTTP _ptr is null!");
      }

      public virtual bool ISteamHTTP_PrioritizeHTTPRequest(uint hRequest)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamHTTP_PrioritizeHTTPRequest(this._ptr, hRequest) : throw new Exception("ISteamHTTP _ptr is null!");
      }

      public virtual bool ISteamHTTP_GetHTTPResponseHeaderSize(
        uint hRequest,
        string pchHeaderName,
        out uint unResponseHeaderSize)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTTP _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamHTTP_GetHTTPResponseHeaderSize(this._ptr, hRequest, pchHeaderName, out unResponseHeaderSize);
      }

      public virtual bool ISteamHTTP_GetHTTPResponseHeaderValue(
        uint hRequest,
        string pchHeaderName,
        out byte pHeaderValueBuffer,
        uint unBufferSize)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTTP _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamHTTP_GetHTTPResponseHeaderValue(this._ptr, hRequest, pchHeaderName, out pHeaderValueBuffer, unBufferSize);
      }

      public virtual bool ISteamHTTP_GetHTTPResponseBodySize(uint hRequest, out uint unBodySize)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamHTTP_GetHTTPResponseBodySize(this._ptr, hRequest, out unBodySize) : throw new Exception("ISteamHTTP _ptr is null!");
      }

      public virtual bool ISteamHTTP_GetHTTPResponseBodyData(
        uint hRequest,
        out byte pBodyDataBuffer,
        uint unBufferSize)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTTP _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamHTTP_GetHTTPResponseBodyData(this._ptr, hRequest, out pBodyDataBuffer, unBufferSize);
      }

      public virtual bool ISteamHTTP_GetHTTPStreamingResponseBodyData(
        uint hRequest,
        uint cOffset,
        out byte pBodyDataBuffer,
        uint unBufferSize)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTTP _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamHTTP_GetHTTPStreamingResponseBodyData(this._ptr, hRequest, cOffset, out pBodyDataBuffer, unBufferSize);
      }

      public virtual bool ISteamHTTP_ReleaseHTTPRequest(uint hRequest)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamHTTP_ReleaseHTTPRequest(this._ptr, hRequest) : throw new Exception("ISteamHTTP _ptr is null!");
      }

      public virtual bool ISteamHTTP_GetHTTPDownloadProgressPct(
        uint hRequest,
        out float pflPercentOut)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamHTTP_GetHTTPDownloadProgressPct(this._ptr, hRequest, out pflPercentOut) : throw new Exception("ISteamHTTP _ptr is null!");
      }

      public virtual bool ISteamHTTP_SetHTTPRequestRawPostBody(
        uint hRequest,
        string pchContentType,
        out byte pubBody,
        uint unBodyLen)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTTP _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamHTTP_SetHTTPRequestRawPostBody(this._ptr, hRequest, pchContentType, out pubBody, unBodyLen);
      }

      public virtual HTTPCookieContainerHandle ISteamHTTP_CreateCookieContainer(
        [MarshalAs(UnmanagedType.U1)] bool bAllowResponsesToModify)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamHTTP_CreateCookieContainer(this._ptr, bAllowResponsesToModify) : throw new Exception("ISteamHTTP _ptr is null!");
      }

      public virtual bool ISteamHTTP_ReleaseCookieContainer(uint hCookieContainer)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamHTTP_ReleaseCookieContainer(this._ptr, hCookieContainer) : throw new Exception("ISteamHTTP _ptr is null!");
      }

      public virtual bool ISteamHTTP_SetCookie(
        uint hCookieContainer,
        string pchHost,
        string pchUrl,
        string pchCookie)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTTP _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamHTTP_SetCookie(this._ptr, hCookieContainer, pchHost, pchUrl, pchCookie);
      }

      public virtual bool ISteamHTTP_SetHTTPRequestCookieContainer(
        uint hRequest,
        uint hCookieContainer)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTTP _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamHTTP_SetHTTPRequestCookieContainer(this._ptr, hRequest, hCookieContainer);
      }

      public virtual bool ISteamHTTP_SetHTTPRequestUserAgentInfo(
        uint hRequest,
        string pchUserAgentInfo)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTTP _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamHTTP_SetHTTPRequestUserAgentInfo(this._ptr, hRequest, pchUserAgentInfo);
      }

      public virtual bool ISteamHTTP_SetHTTPRequestRequiresVerifiedCertificate(
        uint hRequest,
        [MarshalAs(UnmanagedType.U1)] bool bRequireVerifiedCertificate)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTTP _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamHTTP_SetHTTPRequestRequiresVerifiedCertificate(this._ptr, hRequest, bRequireVerifiedCertificate);
      }

      public virtual bool ISteamHTTP_SetHTTPRequestAbsoluteTimeoutMS(
        uint hRequest,
        uint unMilliseconds)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTTP _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamHTTP_SetHTTPRequestAbsoluteTimeoutMS(this._ptr, hRequest, unMilliseconds);
      }

      public virtual bool ISteamHTTP_GetHTTPRequestWasTimedOut(
        uint hRequest,
        [MarshalAs(UnmanagedType.U1)] ref bool pbWasTimedOut)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTTP _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamHTTP_GetHTTPRequestWasTimedOut(this._ptr, hRequest, ref pbWasTimedOut);
      }

      public virtual ClientUnifiedMessageHandle ISteamUnifiedMessages_SendMethod(
        string pchServiceMethod,
        IntPtr pRequestBuffer,
        uint unRequestBufferSize,
        ulong unContext)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUnifiedMessages _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamUnifiedMessages_SendMethod(this._ptr, pchServiceMethod, pRequestBuffer, unRequestBufferSize, unContext);
      }

      public virtual bool ISteamUnifiedMessages_GetMethodResponseInfo(
        ulong hHandle,
        out uint punResponseSize,
        out Result peResult)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamUnifiedMessages_GetMethodResponseInfo(this._ptr, hHandle, out punResponseSize, out peResult) : throw new Exception("ISteamUnifiedMessages _ptr is null!");
      }

      public virtual bool ISteamUnifiedMessages_GetMethodResponseData(
        ulong hHandle,
        IntPtr pResponseBuffer,
        uint unResponseBufferSize,
        [MarshalAs(UnmanagedType.U1)] bool bAutoRelease)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUnifiedMessages _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamUnifiedMessages_GetMethodResponseData(this._ptr, hHandle, pResponseBuffer, unResponseBufferSize, bAutoRelease);
      }

      public virtual bool ISteamUnifiedMessages_ReleaseMethod(ulong hHandle)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamUnifiedMessages_ReleaseMethod(this._ptr, hHandle) : throw new Exception("ISteamUnifiedMessages _ptr is null!");
      }

      public virtual bool ISteamUnifiedMessages_SendNotification(
        string pchServiceNotification,
        IntPtr pNotificationBuffer,
        uint unNotificationBufferSize)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUnifiedMessages _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamUnifiedMessages_SendNotification(this._ptr, pchServiceNotification, pNotificationBuffer, unNotificationBufferSize);
      }

      public virtual bool ISteamController_Init()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamController_Init(this._ptr) : throw new Exception("ISteamController _ptr is null!");
      }

      public virtual bool ISteamController_Shutdown()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamController_Shutdown(this._ptr) : throw new Exception("ISteamController _ptr is null!");
      }

      public virtual void ISteamController_RunFrame()
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamController _ptr is null!");
        Platform.Linux32.Native.SteamAPI_ISteamController_RunFrame(this._ptr);
      }

      public virtual int ISteamController_GetConnectedControllers(IntPtr handlesOut)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamController_GetConnectedControllers(this._ptr, handlesOut) : throw new Exception("ISteamController _ptr is null!");
      }

      public virtual bool ISteamController_ShowBindingPanel(ulong controllerHandle)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamController_ShowBindingPanel(this._ptr, controllerHandle) : throw new Exception("ISteamController _ptr is null!");
      }

      public virtual ControllerActionSetHandle_t ISteamController_GetActionSetHandle(
        string pszActionSetName)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamController_GetActionSetHandle(this._ptr, pszActionSetName) : throw new Exception("ISteamController _ptr is null!");
      }

      public virtual void ISteamController_ActivateActionSet(
        ulong controllerHandle,
        ulong actionSetHandle)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamController _ptr is null!");
        Platform.Linux32.Native.SteamAPI_ISteamController_ActivateActionSet(this._ptr, controllerHandle, actionSetHandle);
      }

      public virtual ControllerActionSetHandle_t ISteamController_GetCurrentActionSet(
        ulong controllerHandle)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamController_GetCurrentActionSet(this._ptr, controllerHandle) : throw new Exception("ISteamController _ptr is null!");
      }

      public virtual ControllerDigitalActionHandle_t ISteamController_GetDigitalActionHandle(
        string pszActionName)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamController_GetDigitalActionHandle(this._ptr, pszActionName) : throw new Exception("ISteamController _ptr is null!");
      }

      public virtual ControllerDigitalActionData_t ISteamController_GetDigitalActionData(
        ulong controllerHandle,
        ulong digitalActionHandle)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamController _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamController_GetDigitalActionData(this._ptr, controllerHandle, digitalActionHandle);
      }

      public virtual int ISteamController_GetDigitalActionOrigins(
        ulong controllerHandle,
        ulong actionSetHandle,
        ulong digitalActionHandle,
        out ControllerActionOrigin originsOut)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamController _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamController_GetDigitalActionOrigins(this._ptr, controllerHandle, actionSetHandle, digitalActionHandle, out originsOut);
      }

      public virtual ControllerAnalogActionHandle_t ISteamController_GetAnalogActionHandle(
        string pszActionName)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamController_GetAnalogActionHandle(this._ptr, pszActionName) : throw new Exception("ISteamController _ptr is null!");
      }

      public virtual ControllerAnalogActionData_t ISteamController_GetAnalogActionData(
        ulong controllerHandle,
        ulong analogActionHandle)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamController _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamController_GetAnalogActionData(this._ptr, controllerHandle, analogActionHandle);
      }

      public virtual int ISteamController_GetAnalogActionOrigins(
        ulong controllerHandle,
        ulong actionSetHandle,
        ulong analogActionHandle,
        out ControllerActionOrigin originsOut)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamController _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamController_GetAnalogActionOrigins(this._ptr, controllerHandle, actionSetHandle, analogActionHandle, out originsOut);
      }

      public virtual void ISteamController_StopAnalogActionMomentum(
        ulong controllerHandle,
        ulong eAction)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamController _ptr is null!");
        Platform.Linux32.Native.SteamAPI_ISteamController_StopAnalogActionMomentum(this._ptr, controllerHandle, eAction);
      }

      public virtual void ISteamController_TriggerHapticPulse(
        ulong controllerHandle,
        SteamControllerPad eTargetPad,
        ushort usDurationMicroSec)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamController _ptr is null!");
        Platform.Linux32.Native.SteamAPI_ISteamController_TriggerHapticPulse(this._ptr, controllerHandle, eTargetPad, usDurationMicroSec);
      }

      public virtual void ISteamController_TriggerRepeatedHapticPulse(
        ulong controllerHandle,
        SteamControllerPad eTargetPad,
        ushort usDurationMicroSec,
        ushort usOffMicroSec,
        ushort unRepeat,
        uint nFlags)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamController _ptr is null!");
        Platform.Linux32.Native.SteamAPI_ISteamController_TriggerRepeatedHapticPulse(this._ptr, controllerHandle, eTargetPad, usDurationMicroSec, usOffMicroSec, unRepeat, nFlags);
      }

      public virtual void ISteamController_TriggerVibration(
        ulong controllerHandle,
        ushort usLeftSpeed,
        ushort usRightSpeed)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamController _ptr is null!");
        Platform.Linux32.Native.SteamAPI_ISteamController_TriggerVibration(this._ptr, controllerHandle, usLeftSpeed, usRightSpeed);
      }

      public virtual void ISteamController_SetLEDColor(
        ulong controllerHandle,
        byte nColorR,
        byte nColorG,
        byte nColorB,
        uint nFlags)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamController _ptr is null!");
        Platform.Linux32.Native.SteamAPI_ISteamController_SetLEDColor(this._ptr, controllerHandle, nColorR, nColorG, nColorB, nFlags);
      }

      public virtual int ISteamController_GetGamepadIndexForController(ulong ulControllerHandle)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamController_GetGamepadIndexForController(this._ptr, ulControllerHandle) : throw new Exception("ISteamController _ptr is null!");
      }

      public virtual ControllerHandle_t ISteamController_GetControllerForGamepadIndex(int nIndex)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamController_GetControllerForGamepadIndex(this._ptr, nIndex) : throw new Exception("ISteamController _ptr is null!");
      }

      public virtual ControllerMotionData_t ISteamController_GetMotionData(ulong controllerHandle)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamController_GetMotionData(this._ptr, controllerHandle) : throw new Exception("ISteamController _ptr is null!");
      }

      public virtual bool ISteamController_ShowDigitalActionOrigins(
        ulong controllerHandle,
        ulong digitalActionHandle,
        float flScale,
        float flXPosition,
        float flYPosition)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamController _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamController_ShowDigitalActionOrigins(this._ptr, controllerHandle, digitalActionHandle, flScale, flXPosition, flYPosition);
      }

      public virtual bool ISteamController_ShowAnalogActionOrigins(
        ulong controllerHandle,
        ulong analogActionHandle,
        float flScale,
        float flXPosition,
        float flYPosition)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamController _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamController_ShowAnalogActionOrigins(this._ptr, controllerHandle, analogActionHandle, flScale, flXPosition, flYPosition);
      }

      public virtual IntPtr ISteamController_GetStringForActionOrigin(ControllerActionOrigin eOrigin)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamController_GetStringForActionOrigin(this._ptr, eOrigin) : throw new Exception("ISteamController _ptr is null!");
      }

      public virtual IntPtr ISteamController_GetGlyphForActionOrigin(ControllerActionOrigin eOrigin)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamController_GetGlyphForActionOrigin(this._ptr, eOrigin) : throw new Exception("ISteamController _ptr is null!");
      }

      public virtual UGCQueryHandle_t ISteamUGC_CreateQueryUserUGCRequest(
        uint unAccountID,
        UserUGCList eListType,
        UGCMatchingUGCType eMatchingUGCType,
        UserUGCListSortOrder eSortOrder,
        uint nCreatorAppID,
        uint nConsumerAppID,
        uint unPage)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamUGC_CreateQueryUserUGCRequest(this._ptr, unAccountID, eListType, eMatchingUGCType, eSortOrder, nCreatorAppID, nConsumerAppID, unPage);
      }

      public virtual UGCQueryHandle_t ISteamUGC_CreateQueryAllUGCRequest(
        UGCQuery eQueryType,
        UGCMatchingUGCType eMatchingeMatchingUGCTypeFileType,
        uint nCreatorAppID,
        uint nConsumerAppID,
        uint unPage)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamUGC_CreateQueryAllUGCRequest(this._ptr, eQueryType, eMatchingeMatchingUGCTypeFileType, nCreatorAppID, nConsumerAppID, unPage);
      }

      public virtual UGCQueryHandle_t ISteamUGC_CreateQueryUGCDetailsRequest(
        IntPtr pvecPublishedFileID,
        uint unNumPublishedFileIDs)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamUGC_CreateQueryUGCDetailsRequest(this._ptr, pvecPublishedFileID, unNumPublishedFileIDs);
      }

      public virtual SteamAPICall_t ISteamUGC_SendQueryUGCRequest(ulong handle)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamUGC_SendQueryUGCRequest(this._ptr, handle) : throw new Exception("ISteamUGC _ptr is null!");
      }

      public virtual bool ISteamUGC_GetQueryUGCResult(
        ulong handle,
        uint index,
        ref SteamUGCDetails_t pDetails)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        SteamUGCDetails_t.PackSmall pDetails1 = new SteamUGCDetails_t.PackSmall();
        bool queryUgcResult = Platform.Linux32.Native.SteamAPI_ISteamUGC_GetQueryUGCResult(this._ptr, handle, index, ref pDetails1);
        pDetails = (SteamUGCDetails_t) pDetails1;
        return queryUgcResult;
      }

      public virtual bool ISteamUGC_GetQueryUGCPreviewURL(
        ulong handle,
        uint index,
        StringBuilder pchURL,
        uint cchURLSize)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamUGC_GetQueryUGCPreviewURL(this._ptr, handle, index, pchURL, cchURLSize);
      }

      public virtual bool ISteamUGC_GetQueryUGCMetadata(
        ulong handle,
        uint index,
        StringBuilder pchMetadata,
        uint cchMetadatasize)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamUGC_GetQueryUGCMetadata(this._ptr, handle, index, pchMetadata, cchMetadatasize);
      }

      public virtual bool ISteamUGC_GetQueryUGCChildren(
        ulong handle,
        uint index,
        IntPtr pvecPublishedFileID,
        uint cMaxEntries)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamUGC_GetQueryUGCChildren(this._ptr, handle, index, pvecPublishedFileID, cMaxEntries);
      }

      public virtual bool ISteamUGC_GetQueryUGCStatistic(
        ulong handle,
        uint index,
        ItemStatistic eStatType,
        out ulong pStatValue)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamUGC_GetQueryUGCStatistic(this._ptr, handle, index, eStatType, out pStatValue);
      }

      public virtual uint ISteamUGC_GetQueryUGCNumAdditionalPreviews(ulong handle, uint index)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamUGC_GetQueryUGCNumAdditionalPreviews(this._ptr, handle, index);
      }

      public virtual bool ISteamUGC_GetQueryUGCAdditionalPreview(
        ulong handle,
        uint index,
        uint previewIndex,
        StringBuilder pchURLOrVideoID,
        uint cchURLSize,
        StringBuilder pchOriginalFileName,
        uint cchOriginalFileNameSize,
        out ItemPreviewType pPreviewType)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamUGC_GetQueryUGCAdditionalPreview(this._ptr, handle, index, previewIndex, pchURLOrVideoID, cchURLSize, pchOriginalFileName, cchOriginalFileNameSize, out pPreviewType);
      }

      public virtual uint ISteamUGC_GetQueryUGCNumKeyValueTags(ulong handle, uint index)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamUGC_GetQueryUGCNumKeyValueTags(this._ptr, handle, index);
      }

      public virtual bool ISteamUGC_GetQueryUGCKeyValueTag(
        ulong handle,
        uint index,
        uint keyValueTagIndex,
        StringBuilder pchKey,
        uint cchKeySize,
        StringBuilder pchValue,
        uint cchValueSize)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamUGC_GetQueryUGCKeyValueTag(this._ptr, handle, index, keyValueTagIndex, pchKey, cchKeySize, pchValue, cchValueSize);
      }

      public virtual bool ISteamUGC_ReleaseQueryUGCRequest(ulong handle)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamUGC_ReleaseQueryUGCRequest(this._ptr, handle) : throw new Exception("ISteamUGC _ptr is null!");
      }

      public virtual bool ISteamUGC_AddRequiredTag(ulong handle, string pTagName)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamUGC_AddRequiredTag(this._ptr, handle, pTagName);
      }

      public virtual bool ISteamUGC_AddExcludedTag(ulong handle, string pTagName)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamUGC_AddExcludedTag(this._ptr, handle, pTagName);
      }

      public virtual bool ISteamUGC_SetReturnOnlyIDs(ulong handle, [MarshalAs(UnmanagedType.U1)] bool bReturnOnlyIDs)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamUGC_SetReturnOnlyIDs(this._ptr, handle, bReturnOnlyIDs);
      }

      public virtual bool ISteamUGC_SetReturnKeyValueTags(ulong handle, [MarshalAs(UnmanagedType.U1)] bool bReturnKeyValueTags)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamUGC_SetReturnKeyValueTags(this._ptr, handle, bReturnKeyValueTags);
      }

      public virtual bool ISteamUGC_SetReturnLongDescription(
        ulong handle,
        [MarshalAs(UnmanagedType.U1)] bool bReturnLongDescription)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamUGC_SetReturnLongDescription(this._ptr, handle, bReturnLongDescription);
      }

      public virtual bool ISteamUGC_SetReturnMetadata(ulong handle, [MarshalAs(UnmanagedType.U1)] bool bReturnMetadata)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamUGC_SetReturnMetadata(this._ptr, handle, bReturnMetadata);
      }

      public virtual bool ISteamUGC_SetReturnChildren(ulong handle, [MarshalAs(UnmanagedType.U1)] bool bReturnChildren)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamUGC_SetReturnChildren(this._ptr, handle, bReturnChildren);
      }

      public virtual bool ISteamUGC_SetReturnAdditionalPreviews(
        ulong handle,
        [MarshalAs(UnmanagedType.U1)] bool bReturnAdditionalPreviews)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamUGC_SetReturnAdditionalPreviews(this._ptr, handle, bReturnAdditionalPreviews);
      }

      public virtual bool ISteamUGC_SetReturnTotalOnly(ulong handle, [MarshalAs(UnmanagedType.U1)] bool bReturnTotalOnly)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamUGC_SetReturnTotalOnly(this._ptr, handle, bReturnTotalOnly);
      }

      public virtual bool ISteamUGC_SetReturnPlaytimeStats(ulong handle, uint unDays)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamUGC_SetReturnPlaytimeStats(this._ptr, handle, unDays);
      }

      public virtual bool ISteamUGC_SetLanguage(ulong handle, string pchLanguage)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamUGC_SetLanguage(this._ptr, handle, pchLanguage);
      }

      public virtual bool ISteamUGC_SetAllowCachedResponse(ulong handle, uint unMaxAgeSeconds)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamUGC_SetAllowCachedResponse(this._ptr, handle, unMaxAgeSeconds);
      }

      public virtual bool ISteamUGC_SetCloudFileNameFilter(ulong handle, string pMatchCloudFileName)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamUGC_SetCloudFileNameFilter(this._ptr, handle, pMatchCloudFileName);
      }

      public virtual bool ISteamUGC_SetMatchAnyTag(ulong handle, [MarshalAs(UnmanagedType.U1)] bool bMatchAnyTag)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamUGC_SetMatchAnyTag(this._ptr, handle, bMatchAnyTag);
      }

      public virtual bool ISteamUGC_SetSearchText(ulong handle, string pSearchText)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamUGC_SetSearchText(this._ptr, handle, pSearchText);
      }

      public virtual bool ISteamUGC_SetRankedByTrendDays(ulong handle, uint unDays)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamUGC_SetRankedByTrendDays(this._ptr, handle, unDays);
      }

      public virtual bool ISteamUGC_AddRequiredKeyValueTag(
        ulong handle,
        string pKey,
        string pValue)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamUGC_AddRequiredKeyValueTag(this._ptr, handle, pKey, pValue);
      }

      public virtual SteamAPICall_t ISteamUGC_RequestUGCDetails(
        ulong nPublishedFileID,
        uint unMaxAgeSeconds)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamUGC_RequestUGCDetails(this._ptr, nPublishedFileID, unMaxAgeSeconds);
      }

      public virtual SteamAPICall_t ISteamUGC_CreateItem(
        uint nConsumerAppId,
        WorkshopFileType eFileType)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamUGC_CreateItem(this._ptr, nConsumerAppId, eFileType);
      }

      public virtual UGCUpdateHandle_t ISteamUGC_StartItemUpdate(
        uint nConsumerAppId,
        ulong nPublishedFileID)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamUGC_StartItemUpdate(this._ptr, nConsumerAppId, nPublishedFileID);
      }

      public virtual bool ISteamUGC_SetItemTitle(ulong handle, string pchTitle)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamUGC_SetItemTitle(this._ptr, handle, pchTitle);
      }

      public virtual bool ISteamUGC_SetItemDescription(ulong handle, string pchDescription)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamUGC_SetItemDescription(this._ptr, handle, pchDescription);
      }

      public virtual bool ISteamUGC_SetItemUpdateLanguage(ulong handle, string pchLanguage)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamUGC_SetItemUpdateLanguage(this._ptr, handle, pchLanguage);
      }

      public virtual bool ISteamUGC_SetItemMetadata(ulong handle, string pchMetaData)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamUGC_SetItemMetadata(this._ptr, handle, pchMetaData);
      }

      public virtual bool ISteamUGC_SetItemVisibility(
        ulong handle,
        RemoteStoragePublishedFileVisibility eVisibility)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamUGC_SetItemVisibility(this._ptr, handle, eVisibility);
      }

      public virtual bool ISteamUGC_SetItemTags(
        ulong updateHandle,
        ref SteamParamStringArray_t pTags)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        SteamParamStringArray_t.PackSmall pTags1 = new SteamParamStringArray_t.PackSmall();
        bool flag = Platform.Linux32.Native.SteamAPI_ISteamUGC_SetItemTags(this._ptr, updateHandle, ref pTags1);
        pTags = (SteamParamStringArray_t) pTags1;
        return flag;
      }

      public virtual bool ISteamUGC_SetItemContent(ulong handle, string pszContentFolder)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamUGC_SetItemContent(this._ptr, handle, pszContentFolder);
      }

      public virtual bool ISteamUGC_SetItemPreview(ulong handle, string pszPreviewFile)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamUGC_SetItemPreview(this._ptr, handle, pszPreviewFile);
      }

      public virtual bool ISteamUGC_RemoveItemKeyValueTags(ulong handle, string pchKey)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamUGC_RemoveItemKeyValueTags(this._ptr, handle, pchKey);
      }

      public virtual bool ISteamUGC_AddItemKeyValueTag(
        ulong handle,
        string pchKey,
        string pchValue)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamUGC_AddItemKeyValueTag(this._ptr, handle, pchKey, pchValue);
      }

      public virtual bool ISteamUGC_AddItemPreviewFile(
        ulong handle,
        string pszPreviewFile,
        ItemPreviewType type)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamUGC_AddItemPreviewFile(this._ptr, handle, pszPreviewFile, type);
      }

      public virtual bool ISteamUGC_AddItemPreviewVideo(ulong handle, string pszVideoID)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamUGC_AddItemPreviewVideo(this._ptr, handle, pszVideoID);
      }

      public virtual bool ISteamUGC_UpdateItemPreviewFile(
        ulong handle,
        uint index,
        string pszPreviewFile)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamUGC_UpdateItemPreviewFile(this._ptr, handle, index, pszPreviewFile);
      }

      public virtual bool ISteamUGC_UpdateItemPreviewVideo(
        ulong handle,
        uint index,
        string pszVideoID)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamUGC_UpdateItemPreviewVideo(this._ptr, handle, index, pszVideoID);
      }

      public virtual bool ISteamUGC_RemoveItemPreview(ulong handle, uint index)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamUGC_RemoveItemPreview(this._ptr, handle, index);
      }

      public virtual SteamAPICall_t ISteamUGC_SubmitItemUpdate(ulong handle, string pchChangeNote)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamUGC_SubmitItemUpdate(this._ptr, handle, pchChangeNote);
      }

      public virtual ItemUpdateStatus ISteamUGC_GetItemUpdateProgress(
        ulong handle,
        out ulong punBytesProcessed,
        out ulong punBytesTotal)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamUGC_GetItemUpdateProgress(this._ptr, handle, out punBytesProcessed, out punBytesTotal) : throw new Exception("ISteamUGC _ptr is null!");
      }

      public virtual SteamAPICall_t ISteamUGC_SetUserItemVote(ulong nPublishedFileID, [MarshalAs(UnmanagedType.U1)] bool bVoteUp)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamUGC_SetUserItemVote(this._ptr, nPublishedFileID, bVoteUp);
      }

      public virtual SteamAPICall_t ISteamUGC_GetUserItemVote(ulong nPublishedFileID)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamUGC_GetUserItemVote(this._ptr, nPublishedFileID) : throw new Exception("ISteamUGC _ptr is null!");
      }

      public virtual SteamAPICall_t ISteamUGC_AddItemToFavorites(
        uint nAppId,
        ulong nPublishedFileID)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamUGC_AddItemToFavorites(this._ptr, nAppId, nPublishedFileID);
      }

      public virtual SteamAPICall_t ISteamUGC_RemoveItemFromFavorites(
        uint nAppId,
        ulong nPublishedFileID)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamUGC_RemoveItemFromFavorites(this._ptr, nAppId, nPublishedFileID);
      }

      public virtual SteamAPICall_t ISteamUGC_SubscribeItem(ulong nPublishedFileID)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamUGC_SubscribeItem(this._ptr, nPublishedFileID) : throw new Exception("ISteamUGC _ptr is null!");
      }

      public virtual SteamAPICall_t ISteamUGC_UnsubscribeItem(ulong nPublishedFileID)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamUGC_UnsubscribeItem(this._ptr, nPublishedFileID) : throw new Exception("ISteamUGC _ptr is null!");
      }

      public virtual uint ISteamUGC_GetNumSubscribedItems()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamUGC_GetNumSubscribedItems(this._ptr) : throw new Exception("ISteamUGC _ptr is null!");
      }

      public virtual uint ISteamUGC_GetSubscribedItems(IntPtr pvecPublishedFileID, uint cMaxEntries)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamUGC_GetSubscribedItems(this._ptr, pvecPublishedFileID, cMaxEntries);
      }

      public virtual uint ISteamUGC_GetItemState(ulong nPublishedFileID)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamUGC_GetItemState(this._ptr, nPublishedFileID) : throw new Exception("ISteamUGC _ptr is null!");
      }

      public virtual bool ISteamUGC_GetItemInstallInfo(
        ulong nPublishedFileID,
        out ulong punSizeOnDisk,
        StringBuilder pchFolder,
        uint cchFolderSize,
        out uint punTimeStamp)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamUGC_GetItemInstallInfo(this._ptr, nPublishedFileID, out punSizeOnDisk, pchFolder, cchFolderSize, out punTimeStamp);
      }

      public virtual bool ISteamUGC_GetItemDownloadInfo(
        ulong nPublishedFileID,
        out ulong punBytesDownloaded,
        out ulong punBytesTotal)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamUGC_GetItemDownloadInfo(this._ptr, nPublishedFileID, out punBytesDownloaded, out punBytesTotal) : throw new Exception("ISteamUGC _ptr is null!");
      }

      public virtual bool ISteamUGC_DownloadItem(ulong nPublishedFileID, [MarshalAs(UnmanagedType.U1)] bool bHighPriority)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamUGC_DownloadItem(this._ptr, nPublishedFileID, bHighPriority);
      }

      public virtual bool ISteamUGC_BInitWorkshopForGameServer(
        uint unWorkshopDepotID,
        string pszFolder)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamUGC_BInitWorkshopForGameServer(this._ptr, unWorkshopDepotID, pszFolder);
      }

      public virtual void ISteamUGC_SuspendDownloads([MarshalAs(UnmanagedType.U1)] bool bSuspend)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        Platform.Linux32.Native.SteamAPI_ISteamUGC_SuspendDownloads(this._ptr, bSuspend);
      }

      public virtual SteamAPICall_t ISteamUGC_StartPlaytimeTracking(
        IntPtr pvecPublishedFileID,
        uint unNumPublishedFileIDs)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamUGC_StartPlaytimeTracking(this._ptr, pvecPublishedFileID, unNumPublishedFileIDs);
      }

      public virtual SteamAPICall_t ISteamUGC_StopPlaytimeTracking(
        IntPtr pvecPublishedFileID,
        uint unNumPublishedFileIDs)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamUGC_StopPlaytimeTracking(this._ptr, pvecPublishedFileID, unNumPublishedFileIDs);
      }

      public virtual SteamAPICall_t ISteamUGC_StopPlaytimeTrackingForAllItems()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamUGC_StopPlaytimeTrackingForAllItems(this._ptr) : throw new Exception("ISteamUGC _ptr is null!");
      }

      public virtual SteamAPICall_t ISteamUGC_AddDependency(
        ulong nParentPublishedFileID,
        ulong nChildPublishedFileID)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamUGC_AddDependency(this._ptr, nParentPublishedFileID, nChildPublishedFileID);
      }

      public virtual SteamAPICall_t ISteamUGC_RemoveDependency(
        ulong nParentPublishedFileID,
        ulong nChildPublishedFileID)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamUGC_RemoveDependency(this._ptr, nParentPublishedFileID, nChildPublishedFileID);
      }

      public virtual uint ISteamAppList_GetNumInstalledApps()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamAppList_GetNumInstalledApps(this._ptr) : throw new Exception("ISteamAppList _ptr is null!");
      }

      public virtual uint ISteamAppList_GetInstalledApps(IntPtr pvecAppID, uint unMaxAppIDs)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamAppList _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamAppList_GetInstalledApps(this._ptr, pvecAppID, unMaxAppIDs);
      }

      public virtual int ISteamAppList_GetAppName(
        uint nAppID,
        StringBuilder pchName,
        int cchNameMax)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamAppList _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamAppList_GetAppName(this._ptr, nAppID, pchName, cchNameMax);
      }

      public virtual int ISteamAppList_GetAppInstallDir(
        uint nAppID,
        StringBuilder pchDirectory,
        int cchNameMax)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamAppList _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamAppList_GetAppInstallDir(this._ptr, nAppID, pchDirectory, cchNameMax);
      }

      public virtual int ISteamAppList_GetAppBuildId(uint nAppID)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamAppList_GetAppBuildId(this._ptr, nAppID) : throw new Exception("ISteamAppList _ptr is null!");
      }

      public virtual void ISteamHTMLSurface_DestructISteamHTMLSurface()
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTMLSurface _ptr is null!");
        Platform.Linux32.Native.SteamAPI_ISteamHTMLSurface_DestructISteamHTMLSurface(this._ptr);
      }

      public virtual bool ISteamHTMLSurface_Init()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamHTMLSurface_Init(this._ptr) : throw new Exception("ISteamHTMLSurface _ptr is null!");
      }

      public virtual bool ISteamHTMLSurface_Shutdown()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamHTMLSurface_Shutdown(this._ptr) : throw new Exception("ISteamHTMLSurface _ptr is null!");
      }

      public virtual SteamAPICall_t ISteamHTMLSurface_CreateBrowser(
        string pchUserAgent,
        string pchUserCSS)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTMLSurface _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamHTMLSurface_CreateBrowser(this._ptr, pchUserAgent, pchUserCSS);
      }

      public virtual void ISteamHTMLSurface_RemoveBrowser(uint unBrowserHandle)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTMLSurface _ptr is null!");
        Platform.Linux32.Native.SteamAPI_ISteamHTMLSurface_RemoveBrowser(this._ptr, unBrowserHandle);
      }

      public virtual void ISteamHTMLSurface_LoadURL(
        uint unBrowserHandle,
        string pchURL,
        string pchPostData)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTMLSurface _ptr is null!");
        Platform.Linux32.Native.SteamAPI_ISteamHTMLSurface_LoadURL(this._ptr, unBrowserHandle, pchURL, pchPostData);
      }

      public virtual void ISteamHTMLSurface_SetSize(
        uint unBrowserHandle,
        uint unWidth,
        uint unHeight)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTMLSurface _ptr is null!");
        Platform.Linux32.Native.SteamAPI_ISteamHTMLSurface_SetSize(this._ptr, unBrowserHandle, unWidth, unHeight);
      }

      public virtual void ISteamHTMLSurface_StopLoad(uint unBrowserHandle)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTMLSurface _ptr is null!");
        Platform.Linux32.Native.SteamAPI_ISteamHTMLSurface_StopLoad(this._ptr, unBrowserHandle);
      }

      public virtual void ISteamHTMLSurface_Reload(uint unBrowserHandle)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTMLSurface _ptr is null!");
        Platform.Linux32.Native.SteamAPI_ISteamHTMLSurface_Reload(this._ptr, unBrowserHandle);
      }

      public virtual void ISteamHTMLSurface_GoBack(uint unBrowserHandle)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTMLSurface _ptr is null!");
        Platform.Linux32.Native.SteamAPI_ISteamHTMLSurface_GoBack(this._ptr, unBrowserHandle);
      }

      public virtual void ISteamHTMLSurface_GoForward(uint unBrowserHandle)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTMLSurface _ptr is null!");
        Platform.Linux32.Native.SteamAPI_ISteamHTMLSurface_GoForward(this._ptr, unBrowserHandle);
      }

      public virtual void ISteamHTMLSurface_AddHeader(
        uint unBrowserHandle,
        string pchKey,
        string pchValue)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTMLSurface _ptr is null!");
        Platform.Linux32.Native.SteamAPI_ISteamHTMLSurface_AddHeader(this._ptr, unBrowserHandle, pchKey, pchValue);
      }

      public virtual void ISteamHTMLSurface_ExecuteJavascript(
        uint unBrowserHandle,
        string pchScript)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTMLSurface _ptr is null!");
        Platform.Linux32.Native.SteamAPI_ISteamHTMLSurface_ExecuteJavascript(this._ptr, unBrowserHandle, pchScript);
      }

      public virtual void ISteamHTMLSurface_MouseUp(
        uint unBrowserHandle,
        HTMLMouseButton eMouseButton)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTMLSurface _ptr is null!");
        Platform.Linux32.Native.SteamAPI_ISteamHTMLSurface_MouseUp(this._ptr, unBrowserHandle, eMouseButton);
      }

      public virtual void ISteamHTMLSurface_MouseDown(
        uint unBrowserHandle,
        HTMLMouseButton eMouseButton)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTMLSurface _ptr is null!");
        Platform.Linux32.Native.SteamAPI_ISteamHTMLSurface_MouseDown(this._ptr, unBrowserHandle, eMouseButton);
      }

      public virtual void ISteamHTMLSurface_MouseDoubleClick(
        uint unBrowserHandle,
        HTMLMouseButton eMouseButton)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTMLSurface _ptr is null!");
        Platform.Linux32.Native.SteamAPI_ISteamHTMLSurface_MouseDoubleClick(this._ptr, unBrowserHandle, eMouseButton);
      }

      public virtual void ISteamHTMLSurface_MouseMove(uint unBrowserHandle, int x, int y)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTMLSurface _ptr is null!");
        Platform.Linux32.Native.SteamAPI_ISteamHTMLSurface_MouseMove(this._ptr, unBrowserHandle, x, y);
      }

      public virtual void ISteamHTMLSurface_MouseWheel(uint unBrowserHandle, int nDelta)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTMLSurface _ptr is null!");
        Platform.Linux32.Native.SteamAPI_ISteamHTMLSurface_MouseWheel(this._ptr, unBrowserHandle, nDelta);
      }

      public virtual void ISteamHTMLSurface_KeyDown(
        uint unBrowserHandle,
        uint nNativeKeyCode,
        HTMLKeyModifiers eHTMLKeyModifiers)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTMLSurface _ptr is null!");
        Platform.Linux32.Native.SteamAPI_ISteamHTMLSurface_KeyDown(this._ptr, unBrowserHandle, nNativeKeyCode, eHTMLKeyModifiers);
      }

      public virtual void ISteamHTMLSurface_KeyUp(
        uint unBrowserHandle,
        uint nNativeKeyCode,
        HTMLKeyModifiers eHTMLKeyModifiers)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTMLSurface _ptr is null!");
        Platform.Linux32.Native.SteamAPI_ISteamHTMLSurface_KeyUp(this._ptr, unBrowserHandle, nNativeKeyCode, eHTMLKeyModifiers);
      }

      public virtual void ISteamHTMLSurface_KeyChar(
        uint unBrowserHandle,
        uint cUnicodeChar,
        HTMLKeyModifiers eHTMLKeyModifiers)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTMLSurface _ptr is null!");
        Platform.Linux32.Native.SteamAPI_ISteamHTMLSurface_KeyChar(this._ptr, unBrowserHandle, cUnicodeChar, eHTMLKeyModifiers);
      }

      public virtual void ISteamHTMLSurface_SetHorizontalScroll(
        uint unBrowserHandle,
        uint nAbsolutePixelScroll)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTMLSurface _ptr is null!");
        Platform.Linux32.Native.SteamAPI_ISteamHTMLSurface_SetHorizontalScroll(this._ptr, unBrowserHandle, nAbsolutePixelScroll);
      }

      public virtual void ISteamHTMLSurface_SetVerticalScroll(
        uint unBrowserHandle,
        uint nAbsolutePixelScroll)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTMLSurface _ptr is null!");
        Platform.Linux32.Native.SteamAPI_ISteamHTMLSurface_SetVerticalScroll(this._ptr, unBrowserHandle, nAbsolutePixelScroll);
      }

      public virtual void ISteamHTMLSurface_SetKeyFocus(uint unBrowserHandle, [MarshalAs(UnmanagedType.U1)] bool bHasKeyFocus)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTMLSurface _ptr is null!");
        Platform.Linux32.Native.SteamAPI_ISteamHTMLSurface_SetKeyFocus(this._ptr, unBrowserHandle, bHasKeyFocus);
      }

      public virtual void ISteamHTMLSurface_ViewSource(uint unBrowserHandle)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTMLSurface _ptr is null!");
        Platform.Linux32.Native.SteamAPI_ISteamHTMLSurface_ViewSource(this._ptr, unBrowserHandle);
      }

      public virtual void ISteamHTMLSurface_CopyToClipboard(uint unBrowserHandle)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTMLSurface _ptr is null!");
        Platform.Linux32.Native.SteamAPI_ISteamHTMLSurface_CopyToClipboard(this._ptr, unBrowserHandle);
      }

      public virtual void ISteamHTMLSurface_PasteFromClipboard(uint unBrowserHandle)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTMLSurface _ptr is null!");
        Platform.Linux32.Native.SteamAPI_ISteamHTMLSurface_PasteFromClipboard(this._ptr, unBrowserHandle);
      }

      public virtual void ISteamHTMLSurface_Find(
        uint unBrowserHandle,
        string pchSearchStr,
        [MarshalAs(UnmanagedType.U1)] bool bCurrentlyInFind,
        [MarshalAs(UnmanagedType.U1)] bool bReverse)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTMLSurface _ptr is null!");
        Platform.Linux32.Native.SteamAPI_ISteamHTMLSurface_Find(this._ptr, unBrowserHandle, pchSearchStr, bCurrentlyInFind, bReverse);
      }

      public virtual void ISteamHTMLSurface_StopFind(uint unBrowserHandle)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTMLSurface _ptr is null!");
        Platform.Linux32.Native.SteamAPI_ISteamHTMLSurface_StopFind(this._ptr, unBrowserHandle);
      }

      public virtual void ISteamHTMLSurface_GetLinkAtPosition(uint unBrowserHandle, int x, int y)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTMLSurface _ptr is null!");
        Platform.Linux32.Native.SteamAPI_ISteamHTMLSurface_GetLinkAtPosition(this._ptr, unBrowserHandle, x, y);
      }

      public virtual void ISteamHTMLSurface_SetCookie(
        string pchHostname,
        string pchKey,
        string pchValue,
        string pchPath,
        uint nExpires,
        [MarshalAs(UnmanagedType.U1)] bool bSecure,
        [MarshalAs(UnmanagedType.U1)] bool bHTTPOnly)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTMLSurface _ptr is null!");
        Platform.Linux32.Native.SteamAPI_ISteamHTMLSurface_SetCookie(this._ptr, pchHostname, pchKey, pchValue, pchPath, nExpires, bSecure, bHTTPOnly);
      }

      public virtual void ISteamHTMLSurface_SetPageScaleFactor(
        uint unBrowserHandle,
        float flZoom,
        int nPointX,
        int nPointY)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTMLSurface _ptr is null!");
        Platform.Linux32.Native.SteamAPI_ISteamHTMLSurface_SetPageScaleFactor(this._ptr, unBrowserHandle, flZoom, nPointX, nPointY);
      }

      public virtual void ISteamHTMLSurface_SetBackgroundMode(
        uint unBrowserHandle,
        [MarshalAs(UnmanagedType.U1)] bool bBackgroundMode)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTMLSurface _ptr is null!");
        Platform.Linux32.Native.SteamAPI_ISteamHTMLSurface_SetBackgroundMode(this._ptr, unBrowserHandle, bBackgroundMode);
      }

      public virtual void ISteamHTMLSurface_AllowStartRequest(uint unBrowserHandle, [MarshalAs(UnmanagedType.U1)] bool bAllowed)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTMLSurface _ptr is null!");
        Platform.Linux32.Native.SteamAPI_ISteamHTMLSurface_AllowStartRequest(this._ptr, unBrowserHandle, bAllowed);
      }

      public virtual void ISteamHTMLSurface_JSDialogResponse(uint unBrowserHandle, [MarshalAs(UnmanagedType.U1)] bool bResult)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTMLSurface _ptr is null!");
        Platform.Linux32.Native.SteamAPI_ISteamHTMLSurface_JSDialogResponse(this._ptr, unBrowserHandle, bResult);
      }

      public virtual Result ISteamInventory_GetResultStatus(int resultHandle)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamInventory_GetResultStatus(this._ptr, resultHandle) : throw new Exception("ISteamInventory _ptr is null!");
      }

      public virtual bool ISteamInventory_GetResultItems(
        int resultHandle,
        IntPtr pOutItemsArray,
        out uint punOutItemsArraySize)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamInventory _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamInventory_GetResultItems(this._ptr, resultHandle, pOutItemsArray, out punOutItemsArraySize);
      }

      public virtual bool ISteamInventory_GetResultItemProperty(
        int resultHandle,
        uint unItemIndex,
        string pchPropertyName,
        StringBuilder pchValueBuffer,
        out uint punValueBufferSizeOut)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamInventory _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamInventory_GetResultItemProperty(this._ptr, resultHandle, unItemIndex, pchPropertyName, pchValueBuffer, out punValueBufferSizeOut);
      }

      public virtual uint ISteamInventory_GetResultTimestamp(int resultHandle)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamInventory_GetResultTimestamp(this._ptr, resultHandle) : throw new Exception("ISteamInventory _ptr is null!");
      }

      public virtual bool ISteamInventory_CheckResultSteamID(
        int resultHandle,
        ulong steamIDExpected)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamInventory _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamInventory_CheckResultSteamID(this._ptr, resultHandle, steamIDExpected);
      }

      public virtual void ISteamInventory_DestroyResult(int resultHandle)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamInventory _ptr is null!");
        Platform.Linux32.Native.SteamAPI_ISteamInventory_DestroyResult(this._ptr, resultHandle);
      }

      public virtual bool ISteamInventory_GetAllItems(ref int pResultHandle)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamInventory_GetAllItems(this._ptr, ref pResultHandle) : throw new Exception("ISteamInventory _ptr is null!");
      }

      public virtual bool ISteamInventory_GetItemsByID(
        ref int pResultHandle,
        ulong[] pInstanceIDs,
        uint unCountInstanceIDs)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamInventory _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamInventory_GetItemsByID(this._ptr, ref pResultHandle, pInstanceIDs, unCountInstanceIDs);
      }

      public virtual bool ISteamInventory_SerializeResult(
        int resultHandle,
        IntPtr pOutBuffer,
        out uint punOutBufferSize)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamInventory _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamInventory_SerializeResult(this._ptr, resultHandle, pOutBuffer, out punOutBufferSize);
      }

      public virtual bool ISteamInventory_DeserializeResult(
        ref int pOutResultHandle,
        IntPtr pBuffer,
        uint unBufferSize,
        [MarshalAs(UnmanagedType.U1)] bool bRESERVED_MUST_BE_FALSE)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamInventory _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamInventory_DeserializeResult(this._ptr, ref pOutResultHandle, pBuffer, unBufferSize, bRESERVED_MUST_BE_FALSE);
      }

      public virtual bool ISteamInventory_GenerateItems(
        ref int pResultHandle,
        int[] pArrayItemDefs,
        uint[] punArrayQuantity,
        uint unArrayLength)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamInventory _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamInventory_GenerateItems(this._ptr, ref pResultHandle, pArrayItemDefs, punArrayQuantity, unArrayLength);
      }

      public virtual bool ISteamInventory_GrantPromoItems(ref int pResultHandle)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamInventory_GrantPromoItems(this._ptr, ref pResultHandle) : throw new Exception("ISteamInventory _ptr is null!");
      }

      public virtual bool ISteamInventory_AddPromoItem(ref int pResultHandle, int itemDef)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamInventory _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamInventory_AddPromoItem(this._ptr, ref pResultHandle, itemDef);
      }

      public virtual bool ISteamInventory_AddPromoItems(
        ref int pResultHandle,
        int[] pArrayItemDefs,
        uint unArrayLength)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamInventory _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamInventory_AddPromoItems(this._ptr, ref pResultHandle, pArrayItemDefs, unArrayLength);
      }

      public virtual bool ISteamInventory_ConsumeItem(
        ref int pResultHandle,
        ulong itemConsume,
        uint unQuantity)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamInventory _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamInventory_ConsumeItem(this._ptr, ref pResultHandle, itemConsume, unQuantity);
      }

      public virtual bool ISteamInventory_ExchangeItems(
        ref int pResultHandle,
        int[] pArrayGenerate,
        uint[] punArrayGenerateQuantity,
        uint unArrayGenerateLength,
        ulong[] pArrayDestroy,
        uint[] punArrayDestroyQuantity,
        uint unArrayDestroyLength)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamInventory _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamInventory_ExchangeItems(this._ptr, ref pResultHandle, pArrayGenerate, punArrayGenerateQuantity, unArrayGenerateLength, pArrayDestroy, punArrayDestroyQuantity, unArrayDestroyLength);
      }

      public virtual bool ISteamInventory_TransferItemQuantity(
        ref int pResultHandle,
        ulong itemIdSource,
        uint unQuantity,
        ulong itemIdDest)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamInventory _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamInventory_TransferItemQuantity(this._ptr, ref pResultHandle, itemIdSource, unQuantity, itemIdDest);
      }

      public virtual void ISteamInventory_SendItemDropHeartbeat()
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamInventory _ptr is null!");
        Platform.Linux32.Native.SteamAPI_ISteamInventory_SendItemDropHeartbeat(this._ptr);
      }

      public virtual bool ISteamInventory_TriggerItemDrop(
        ref int pResultHandle,
        int dropListDefinition)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamInventory _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamInventory_TriggerItemDrop(this._ptr, ref pResultHandle, dropListDefinition);
      }

      public virtual bool ISteamInventory_TradeItems(
        ref int pResultHandle,
        ulong steamIDTradePartner,
        ulong[] pArrayGive,
        uint[] pArrayGiveQuantity,
        uint nArrayGiveLength,
        ulong[] pArrayGet,
        uint[] pArrayGetQuantity,
        uint nArrayGetLength)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamInventory _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamInventory_TradeItems(this._ptr, ref pResultHandle, steamIDTradePartner, pArrayGive, pArrayGiveQuantity, nArrayGiveLength, pArrayGet, pArrayGetQuantity, nArrayGetLength);
      }

      public virtual bool ISteamInventory_LoadItemDefinitions()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamInventory_LoadItemDefinitions(this._ptr) : throw new Exception("ISteamInventory _ptr is null!");
      }

      public virtual bool ISteamInventory_GetItemDefinitionIDs(
        IntPtr pItemDefIDs,
        out uint punItemDefIDsArraySize)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamInventory_GetItemDefinitionIDs(this._ptr, pItemDefIDs, out punItemDefIDsArraySize) : throw new Exception("ISteamInventory _ptr is null!");
      }

      public virtual bool ISteamInventory_GetItemDefinitionProperty(
        int iDefinition,
        string pchPropertyName,
        StringBuilder pchValueBuffer,
        out uint punValueBufferSizeOut)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamInventory _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamInventory_GetItemDefinitionProperty(this._ptr, iDefinition, pchPropertyName, pchValueBuffer, out punValueBufferSizeOut);
      }

      public virtual SteamAPICall_t ISteamInventory_RequestEligiblePromoItemDefinitionsIDs(
        ulong steamID)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamInventory_RequestEligiblePromoItemDefinitionsIDs(this._ptr, steamID) : throw new Exception("ISteamInventory _ptr is null!");
      }

      public virtual bool ISteamInventory_GetEligiblePromoItemDefinitionIDs(
        ulong steamID,
        IntPtr pItemDefIDs,
        out uint punItemDefIDsArraySize)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamInventory _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamInventory_GetEligiblePromoItemDefinitionIDs(this._ptr, steamID, pItemDefIDs, out punItemDefIDsArraySize);
      }

      public virtual void ISteamVideo_GetVideoURL(uint unVideoAppID)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamVideo _ptr is null!");
        Platform.Linux32.Native.SteamAPI_ISteamVideo_GetVideoURL(this._ptr, unVideoAppID);
      }

      public virtual bool ISteamVideo_IsBroadcasting(IntPtr pnNumViewers)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamVideo_IsBroadcasting(this._ptr, pnNumViewers) : throw new Exception("ISteamVideo _ptr is null!");
      }

      public virtual void ISteamVideo_GetOPFSettings(uint unVideoAppID)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamVideo _ptr is null!");
        Platform.Linux32.Native.SteamAPI_ISteamVideo_GetOPFSettings(this._ptr, unVideoAppID);
      }

      public virtual bool ISteamVideo_GetOPFStringForApp(
        uint unVideoAppID,
        StringBuilder pchBuffer,
        out int pnBufferSize)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamVideo _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamVideo_GetOPFStringForApp(this._ptr, unVideoAppID, pchBuffer, out pnBufferSize);
      }

      public virtual bool ISteamGameServer_InitGameServer(
        uint unIP,
        ushort usGamePort,
        ushort usQueryPort,
        uint unFlags,
        uint nGameAppId,
        string pchVersionString)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServer _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamGameServer_InitGameServer(this._ptr, unIP, usGamePort, usQueryPort, unFlags, nGameAppId, pchVersionString);
      }

      public virtual void ISteamGameServer_SetProduct(string pszProduct)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServer _ptr is null!");
        Platform.Linux32.Native.SteamAPI_ISteamGameServer_SetProduct(this._ptr, pszProduct);
      }

      public virtual void ISteamGameServer_SetGameDescription(string pszGameDescription)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServer _ptr is null!");
        Platform.Linux32.Native.SteamAPI_ISteamGameServer_SetGameDescription(this._ptr, pszGameDescription);
      }

      public virtual void ISteamGameServer_SetModDir(string pszModDir)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServer _ptr is null!");
        Platform.Linux32.Native.SteamAPI_ISteamGameServer_SetModDir(this._ptr, pszModDir);
      }

      public virtual void ISteamGameServer_SetDedicatedServer([MarshalAs(UnmanagedType.U1)] bool bDedicated)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServer _ptr is null!");
        Platform.Linux32.Native.SteamAPI_ISteamGameServer_SetDedicatedServer(this._ptr, bDedicated);
      }

      public virtual void ISteamGameServer_LogOn(string pszToken)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServer _ptr is null!");
        Platform.Linux32.Native.SteamAPI_ISteamGameServer_LogOn(this._ptr, pszToken);
      }

      public virtual void ISteamGameServer_LogOnAnonymous()
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServer _ptr is null!");
        Platform.Linux32.Native.SteamAPI_ISteamGameServer_LogOnAnonymous(this._ptr);
      }

      public virtual void ISteamGameServer_LogOff()
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServer _ptr is null!");
        Platform.Linux32.Native.SteamAPI_ISteamGameServer_LogOff(this._ptr);
      }

      public virtual bool ISteamGameServer_BLoggedOn()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamGameServer_BLoggedOn(this._ptr) : throw new Exception("ISteamGameServer _ptr is null!");
      }

      public virtual bool ISteamGameServer_BSecure()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamGameServer_BSecure(this._ptr) : throw new Exception("ISteamGameServer _ptr is null!");
      }

      public virtual CSteamID ISteamGameServer_GetSteamID()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamGameServer_GetSteamID(this._ptr) : throw new Exception("ISteamGameServer _ptr is null!");
      }

      public virtual bool ISteamGameServer_WasRestartRequested()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamGameServer_WasRestartRequested(this._ptr) : throw new Exception("ISteamGameServer _ptr is null!");
      }

      public virtual void ISteamGameServer_SetMaxPlayerCount(int cPlayersMax)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServer _ptr is null!");
        Platform.Linux32.Native.SteamAPI_ISteamGameServer_SetMaxPlayerCount(this._ptr, cPlayersMax);
      }

      public virtual void ISteamGameServer_SetBotPlayerCount(int cBotplayers)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServer _ptr is null!");
        Platform.Linux32.Native.SteamAPI_ISteamGameServer_SetBotPlayerCount(this._ptr, cBotplayers);
      }

      public virtual void ISteamGameServer_SetServerName(string pszServerName)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServer _ptr is null!");
        Platform.Linux32.Native.SteamAPI_ISteamGameServer_SetServerName(this._ptr, pszServerName);
      }

      public virtual void ISteamGameServer_SetMapName(string pszMapName)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServer _ptr is null!");
        Platform.Linux32.Native.SteamAPI_ISteamGameServer_SetMapName(this._ptr, pszMapName);
      }

      public virtual void ISteamGameServer_SetPasswordProtected([MarshalAs(UnmanagedType.U1)] bool bPasswordProtected)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServer _ptr is null!");
        Platform.Linux32.Native.SteamAPI_ISteamGameServer_SetPasswordProtected(this._ptr, bPasswordProtected);
      }

      public virtual void ISteamGameServer_SetSpectatorPort(ushort unSpectatorPort)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServer _ptr is null!");
        Platform.Linux32.Native.SteamAPI_ISteamGameServer_SetSpectatorPort(this._ptr, unSpectatorPort);
      }

      public virtual void ISteamGameServer_SetSpectatorServerName(string pszSpectatorServerName)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServer _ptr is null!");
        Platform.Linux32.Native.SteamAPI_ISteamGameServer_SetSpectatorServerName(this._ptr, pszSpectatorServerName);
      }

      public virtual void ISteamGameServer_ClearAllKeyValues()
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServer _ptr is null!");
        Platform.Linux32.Native.SteamAPI_ISteamGameServer_ClearAllKeyValues(this._ptr);
      }

      public virtual void ISteamGameServer_SetKeyValue(string pKey, string pValue)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServer _ptr is null!");
        Platform.Linux32.Native.SteamAPI_ISteamGameServer_SetKeyValue(this._ptr, pKey, pValue);
      }

      public virtual void ISteamGameServer_SetGameTags(string pchGameTags)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServer _ptr is null!");
        Platform.Linux32.Native.SteamAPI_ISteamGameServer_SetGameTags(this._ptr, pchGameTags);
      }

      public virtual void ISteamGameServer_SetGameData(string pchGameData)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServer _ptr is null!");
        Platform.Linux32.Native.SteamAPI_ISteamGameServer_SetGameData(this._ptr, pchGameData);
      }

      public virtual void ISteamGameServer_SetRegion(string pszRegion)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServer _ptr is null!");
        Platform.Linux32.Native.SteamAPI_ISteamGameServer_SetRegion(this._ptr, pszRegion);
      }

      public virtual bool ISteamGameServer_SendUserConnectAndAuthenticate(
        uint unIPClient,
        IntPtr pvAuthBlob,
        uint cubAuthBlobSize,
        out ulong pSteamIDUser)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServer _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamGameServer_SendUserConnectAndAuthenticate(this._ptr, unIPClient, pvAuthBlob, cubAuthBlobSize, out pSteamIDUser);
      }

      public virtual CSteamID ISteamGameServer_CreateUnauthenticatedUserConnection()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamGameServer_CreateUnauthenticatedUserConnection(this._ptr) : throw new Exception("ISteamGameServer _ptr is null!");
      }

      public virtual void ISteamGameServer_SendUserDisconnect(ulong steamIDUser)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServer _ptr is null!");
        Platform.Linux32.Native.SteamAPI_ISteamGameServer_SendUserDisconnect(this._ptr, steamIDUser);
      }

      public virtual bool ISteamGameServer_BUpdateUserData(
        ulong steamIDUser,
        string pchPlayerName,
        uint uScore)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServer _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamGameServer_BUpdateUserData(this._ptr, steamIDUser, pchPlayerName, uScore);
      }

      public virtual HAuthTicket ISteamGameServer_GetAuthSessionTicket(
        IntPtr pTicket,
        int cbMaxTicket,
        out uint pcbTicket)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServer _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamGameServer_GetAuthSessionTicket(this._ptr, pTicket, cbMaxTicket, out pcbTicket);
      }

      public virtual BeginAuthSessionResult ISteamGameServer_BeginAuthSession(
        IntPtr pAuthTicket,
        int cbAuthTicket,
        ulong steamID)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServer _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamGameServer_BeginAuthSession(this._ptr, pAuthTicket, cbAuthTicket, steamID);
      }

      public virtual void ISteamGameServer_EndAuthSession(ulong steamID)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServer _ptr is null!");
        Platform.Linux32.Native.SteamAPI_ISteamGameServer_EndAuthSession(this._ptr, steamID);
      }

      public virtual void ISteamGameServer_CancelAuthTicket(uint hAuthTicket)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServer _ptr is null!");
        Platform.Linux32.Native.SteamAPI_ISteamGameServer_CancelAuthTicket(this._ptr, hAuthTicket);
      }

      public virtual UserHasLicenseForAppResult ISteamGameServer_UserHasLicenseForApp(
        ulong steamID,
        uint appID)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServer _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamGameServer_UserHasLicenseForApp(this._ptr, steamID, appID);
      }

      public virtual bool ISteamGameServer_RequestUserGroupStatus(
        ulong steamIDUser,
        ulong steamIDGroup)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServer _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamGameServer_RequestUserGroupStatus(this._ptr, steamIDUser, steamIDGroup);
      }

      public virtual void ISteamGameServer_GetGameplayStats()
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServer _ptr is null!");
        Platform.Linux32.Native.SteamAPI_ISteamGameServer_GetGameplayStats(this._ptr);
      }

      public virtual SteamAPICall_t ISteamGameServer_GetServerReputation()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamGameServer_GetServerReputation(this._ptr) : throw new Exception("ISteamGameServer _ptr is null!");
      }

      public virtual uint ISteamGameServer_GetPublicIP()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamGameServer_GetPublicIP(this._ptr) : throw new Exception("ISteamGameServer _ptr is null!");
      }

      public virtual bool ISteamGameServer_HandleIncomingPacket(
        IntPtr pData,
        int cbData,
        uint srcIP,
        ushort srcPort)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServer _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamGameServer_HandleIncomingPacket(this._ptr, pData, cbData, srcIP, srcPort);
      }

      public virtual int ISteamGameServer_GetNextOutgoingPacket(
        IntPtr pOut,
        int cbMaxOut,
        out uint pNetAdr,
        out ushort pPort)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServer _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamGameServer_GetNextOutgoingPacket(this._ptr, pOut, cbMaxOut, out pNetAdr, out pPort);
      }

      public virtual void ISteamGameServer_EnableHeartbeats([MarshalAs(UnmanagedType.U1)] bool bActive)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServer _ptr is null!");
        Platform.Linux32.Native.SteamAPI_ISteamGameServer_EnableHeartbeats(this._ptr, bActive);
      }

      public virtual void ISteamGameServer_SetHeartbeatInterval(int iHeartbeatInterval)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServer _ptr is null!");
        Platform.Linux32.Native.SteamAPI_ISteamGameServer_SetHeartbeatInterval(this._ptr, iHeartbeatInterval);
      }

      public virtual void ISteamGameServer_ForceHeartbeat()
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServer _ptr is null!");
        Platform.Linux32.Native.SteamAPI_ISteamGameServer_ForceHeartbeat(this._ptr);
      }

      public virtual SteamAPICall_t ISteamGameServer_AssociateWithClan(ulong steamIDClan)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamGameServer_AssociateWithClan(this._ptr, steamIDClan) : throw new Exception("ISteamGameServer _ptr is null!");
      }

      public virtual SteamAPICall_t ISteamGameServer_ComputeNewPlayerCompatibility(
        ulong steamIDNewPlayer)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamGameServer_ComputeNewPlayerCompatibility(this._ptr, steamIDNewPlayer) : throw new Exception("ISteamGameServer _ptr is null!");
      }

      public virtual SteamAPICall_t ISteamGameServerStats_RequestUserStats(ulong steamIDUser)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamGameServerStats_RequestUserStats(this._ptr, steamIDUser) : throw new Exception("ISteamGameServerStats _ptr is null!");
      }

      public virtual bool ISteamGameServerStats_GetUserStat(
        ulong steamIDUser,
        string pchName,
        out int pData)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServerStats _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamGameServerStats_GetUserStat(this._ptr, steamIDUser, pchName, out pData);
      }

      public virtual bool ISteamGameServerStats_GetUserStat0(
        ulong steamIDUser,
        string pchName,
        out float pData)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServerStats _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamGameServerStats_GetUserStat0(this._ptr, steamIDUser, pchName, out pData);
      }

      public virtual bool ISteamGameServerStats_GetUserAchievement(
        ulong steamIDUser,
        string pchName,
        [MarshalAs(UnmanagedType.U1)] ref bool pbAchieved)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServerStats _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamGameServerStats_GetUserAchievement(this._ptr, steamIDUser, pchName, ref pbAchieved);
      }

      public virtual bool ISteamGameServerStats_SetUserStat(
        ulong steamIDUser,
        string pchName,
        int nData)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServerStats _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamGameServerStats_SetUserStat(this._ptr, steamIDUser, pchName, nData);
      }

      public virtual bool ISteamGameServerStats_SetUserStat0(
        ulong steamIDUser,
        string pchName,
        float fData)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServerStats _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamGameServerStats_SetUserStat0(this._ptr, steamIDUser, pchName, fData);
      }

      public virtual bool ISteamGameServerStats_UpdateUserAvgRateStat(
        ulong steamIDUser,
        string pchName,
        float flCountThisSession,
        double dSessionLength)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServerStats _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamGameServerStats_UpdateUserAvgRateStat(this._ptr, steamIDUser, pchName, flCountThisSession, dSessionLength);
      }

      public virtual bool ISteamGameServerStats_SetUserAchievement(
        ulong steamIDUser,
        string pchName)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServerStats _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamGameServerStats_SetUserAchievement(this._ptr, steamIDUser, pchName);
      }

      public virtual bool ISteamGameServerStats_ClearUserAchievement(
        ulong steamIDUser,
        string pchName)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServerStats _ptr is null!");
        return Platform.Linux32.Native.SteamAPI_ISteamGameServerStats_ClearUserAchievement(this._ptr, steamIDUser, pchName);
      }

      public virtual SteamAPICall_t ISteamGameServerStats_StoreUserStats(ulong steamIDUser)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux32.Native.SteamAPI_ISteamGameServerStats_StoreUserStats(this._ptr, steamIDUser) : throw new Exception("ISteamGameServerStats _ptr is null!");
      }

      public virtual bool SteamApi_SteamAPI_Init() => Platform.Linux32.Native.SteamAPI_Init();

      public virtual void SteamApi_SteamAPI_RunCallbacks()
      {
        Platform.Linux32.Native.SteamAPI_RunCallbacks();
      }

      public virtual void SteamApi_SteamGameServer_RunCallbacks()
      {
        Platform.Linux32.Native.SteamGameServer_RunCallbacks();
      }

      public virtual void SteamApi_SteamAPI_RegisterCallback(IntPtr pCallback, int callback)
      {
        Platform.Linux32.Native.SteamAPI_RegisterCallback(pCallback, callback);
      }

      public virtual void SteamApi_SteamAPI_UnregisterCallback(IntPtr pCallback)
      {
        Platform.Linux32.Native.SteamAPI_UnregisterCallback(pCallback);
      }

      public virtual void SteamApi_SteamAPI_RegisterCallResult(IntPtr pCallback, ulong callback)
      {
        Platform.Linux32.Native.SteamAPI_RegisterCallResult(pCallback, callback);
      }

      public virtual void SteamApi_SteamAPI_UnregisterCallResult(IntPtr pCallback, ulong callback)
      {
        Platform.Linux32.Native.SteamAPI_UnregisterCallResult(pCallback, callback);
      }

      public virtual bool SteamApi_SteamInternal_GameServer_Init(
        uint unIP,
        ushort usPort,
        ushort usGamePort,
        ushort usQueryPort,
        int eServerMode,
        string pchVersionString)
      {
        return Platform.Linux32.Native.SteamInternal_GameServer_Init(unIP, usPort, usGamePort, usQueryPort, eServerMode, pchVersionString);
      }

      public virtual void SteamApi_SteamAPI_Shutdown()
      {
        Platform.Linux32.Native.SteamAPI_Shutdown();
      }

      public virtual void SteamApi_SteamGameServer_Shutdown()
      {
        Platform.Linux32.Native.SteamGameServer_Shutdown();
      }

      public virtual HSteamUser SteamApi_SteamAPI_GetHSteamUser()
      {
        return Platform.Linux32.Native.SteamAPI_GetHSteamUser();
      }

      public virtual HSteamPipe SteamApi_SteamAPI_GetHSteamPipe()
      {
        return Platform.Linux32.Native.SteamAPI_GetHSteamPipe();
      }

      public virtual HSteamUser SteamApi_SteamGameServer_GetHSteamUser()
      {
        return Platform.Linux32.Native.SteamGameServer_GetHSteamUser();
      }

      public virtual HSteamPipe SteamApi_SteamGameServer_GetHSteamPipe()
      {
        return Platform.Linux32.Native.SteamGameServer_GetHSteamPipe();
      }

      public virtual IntPtr SteamApi_SteamInternal_CreateInterface(string version)
      {
        return Platform.Linux32.Native.SteamInternal_CreateInterface(version);
      }

      public virtual bool SteamApi_SteamAPI_RestartAppIfNecessary(uint unOwnAppID)
      {
        return Platform.Linux32.Native.SteamAPI_RestartAppIfNecessary(unOwnAppID);
      }

      internal static class Native
      {
        [DllImport("libsteam_api.so")]
        internal static extern HSteamPipe SteamAPI_ISteamClient_CreateSteamPipe(IntPtr ISteamClient);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamClient_BReleaseSteamPipe(
          IntPtr ISteamClient,
          int hSteamPipe);

        [DllImport("libsteam_api.so")]
        internal static extern HSteamUser SteamAPI_ISteamClient_ConnectToGlobalUser(
          IntPtr ISteamClient,
          int hSteamPipe);

        [DllImport("libsteam_api.so")]
        internal static extern HSteamUser SteamAPI_ISteamClient_CreateLocalUser(
          IntPtr ISteamClient,
          out int phSteamPipe,
          AccountType eAccountType);

        [DllImport("libsteam_api.so")]
        internal static extern void SteamAPI_ISteamClient_ReleaseUser(
          IntPtr ISteamClient,
          int hSteamPipe,
          int hUser);

        [DllImport("libsteam_api.so")]
        internal static extern IntPtr SteamAPI_ISteamClient_GetISteamUser(
          IntPtr ISteamClient,
          int hSteamUser,
          int hSteamPipe,
          string pchVersion);

        [DllImport("libsteam_api.so")]
        internal static extern IntPtr SteamAPI_ISteamClient_GetISteamGameServer(
          IntPtr ISteamClient,
          int hSteamUser,
          int hSteamPipe,
          string pchVersion);

        [DllImport("libsteam_api.so")]
        internal static extern void SteamAPI_ISteamClient_SetLocalIPBinding(
          IntPtr ISteamClient,
          uint unIP,
          ushort usPort);

        [DllImport("libsteam_api.so")]
        internal static extern IntPtr SteamAPI_ISteamClient_GetISteamFriends(
          IntPtr ISteamClient,
          int hSteamUser,
          int hSteamPipe,
          string pchVersion);

        [DllImport("libsteam_api.so")]
        internal static extern IntPtr SteamAPI_ISteamClient_GetISteamUtils(
          IntPtr ISteamClient,
          int hSteamPipe,
          string pchVersion);

        [DllImport("libsteam_api.so")]
        internal static extern IntPtr SteamAPI_ISteamClient_GetISteamMatchmaking(
          IntPtr ISteamClient,
          int hSteamUser,
          int hSteamPipe,
          string pchVersion);

        [DllImport("libsteam_api.so")]
        internal static extern IntPtr SteamAPI_ISteamClient_GetISteamMatchmakingServers(
          IntPtr ISteamClient,
          int hSteamUser,
          int hSteamPipe,
          string pchVersion);

        [DllImport("libsteam_api.so")]
        internal static extern IntPtr SteamAPI_ISteamClient_GetISteamGenericInterface(
          IntPtr ISteamClient,
          int hSteamUser,
          int hSteamPipe,
          string pchVersion);

        [DllImport("libsteam_api.so")]
        internal static extern IntPtr SteamAPI_ISteamClient_GetISteamUserStats(
          IntPtr ISteamClient,
          int hSteamUser,
          int hSteamPipe,
          string pchVersion);

        [DllImport("libsteam_api.so")]
        internal static extern IntPtr SteamAPI_ISteamClient_GetISteamGameServerStats(
          IntPtr ISteamClient,
          int hSteamuser,
          int hSteamPipe,
          string pchVersion);

        [DllImport("libsteam_api.so")]
        internal static extern IntPtr SteamAPI_ISteamClient_GetISteamApps(
          IntPtr ISteamClient,
          int hSteamUser,
          int hSteamPipe,
          string pchVersion);

        [DllImport("libsteam_api.so")]
        internal static extern IntPtr SteamAPI_ISteamClient_GetISteamNetworking(
          IntPtr ISteamClient,
          int hSteamUser,
          int hSteamPipe,
          string pchVersion);

        [DllImport("libsteam_api.so")]
        internal static extern IntPtr SteamAPI_ISteamClient_GetISteamRemoteStorage(
          IntPtr ISteamClient,
          int hSteamuser,
          int hSteamPipe,
          string pchVersion);

        [DllImport("libsteam_api.so")]
        internal static extern IntPtr SteamAPI_ISteamClient_GetISteamScreenshots(
          IntPtr ISteamClient,
          int hSteamuser,
          int hSteamPipe,
          string pchVersion);

        [DllImport("libsteam_api.so")]
        internal static extern uint SteamAPI_ISteamClient_GetIPCCallCount(IntPtr ISteamClient);

        [DllImport("libsteam_api.so")]
        internal static extern void SteamAPI_ISteamClient_SetWarningMessageHook(
          IntPtr ISteamClient,
          IntPtr pFunction);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamClient_BShutdownIfAllPipesClosed(
          IntPtr ISteamClient);

        [DllImport("libsteam_api.so")]
        internal static extern IntPtr SteamAPI_ISteamClient_GetISteamHTTP(
          IntPtr ISteamClient,
          int hSteamuser,
          int hSteamPipe,
          string pchVersion);

        [DllImport("libsteam_api.so")]
        internal static extern IntPtr SteamAPI_ISteamClient_GetISteamUnifiedMessages(
          IntPtr ISteamClient,
          int hSteamuser,
          int hSteamPipe,
          string pchVersion);

        [DllImport("libsteam_api.so")]
        internal static extern IntPtr SteamAPI_ISteamClient_GetISteamController(
          IntPtr ISteamClient,
          int hSteamUser,
          int hSteamPipe,
          string pchVersion);

        [DllImport("libsteam_api.so")]
        internal static extern IntPtr SteamAPI_ISteamClient_GetISteamUGC(
          IntPtr ISteamClient,
          int hSteamUser,
          int hSteamPipe,
          string pchVersion);

        [DllImport("libsteam_api.so")]
        internal static extern IntPtr SteamAPI_ISteamClient_GetISteamAppList(
          IntPtr ISteamClient,
          int hSteamUser,
          int hSteamPipe,
          string pchVersion);

        [DllImport("libsteam_api.so")]
        internal static extern IntPtr SteamAPI_ISteamClient_GetISteamMusic(
          IntPtr ISteamClient,
          int hSteamuser,
          int hSteamPipe,
          string pchVersion);

        [DllImport("libsteam_api.so")]
        internal static extern IntPtr SteamAPI_ISteamClient_GetISteamMusicRemote(
          IntPtr ISteamClient,
          int hSteamuser,
          int hSteamPipe,
          string pchVersion);

        [DllImport("libsteam_api.so")]
        internal static extern IntPtr SteamAPI_ISteamClient_GetISteamHTMLSurface(
          IntPtr ISteamClient,
          int hSteamuser,
          int hSteamPipe,
          string pchVersion);

        [DllImport("libsteam_api.so")]
        internal static extern IntPtr SteamAPI_ISteamClient_GetISteamInventory(
          IntPtr ISteamClient,
          int hSteamuser,
          int hSteamPipe,
          string pchVersion);

        [DllImport("libsteam_api.so")]
        internal static extern IntPtr SteamAPI_ISteamClient_GetISteamVideo(
          IntPtr ISteamClient,
          int hSteamuser,
          int hSteamPipe,
          string pchVersion);

        [DllImport("libsteam_api.so")]
        internal static extern HSteamUser SteamAPI_ISteamUser_GetHSteamUser(IntPtr ISteamUser);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamUser_BLoggedOn(IntPtr ISteamUser);

        [DllImport("libsteam_api.so")]
        internal static extern CSteamID SteamAPI_ISteamUser_GetSteamID(IntPtr ISteamUser);

        [DllImport("libsteam_api.so")]
        internal static extern int SteamAPI_ISteamUser_InitiateGameConnection(
          IntPtr ISteamUser,
          IntPtr pAuthBlob,
          int cbMaxAuthBlob,
          ulong steamIDGameServer,
          uint unIPServer,
          ushort usPortServer,
          [MarshalAs(UnmanagedType.U1)] bool bSecure);

        [DllImport("libsteam_api.so")]
        internal static extern void SteamAPI_ISteamUser_TerminateGameConnection(
          IntPtr ISteamUser,
          uint unIPServer,
          ushort usPortServer);

        [DllImport("libsteam_api.so")]
        internal static extern void SteamAPI_ISteamUser_TrackAppUsageEvent(
          IntPtr ISteamUser,
          ulong gameID,
          int eAppUsageEvent,
          string pchExtraInfo);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamUser_GetUserDataFolder(
          IntPtr ISteamUser,
          StringBuilder pchBuffer,
          int cubBuffer);

        [DllImport("libsteam_api.so")]
        internal static extern void SteamAPI_ISteamUser_StartVoiceRecording(IntPtr ISteamUser);

        [DllImport("libsteam_api.so")]
        internal static extern void SteamAPI_ISteamUser_StopVoiceRecording(IntPtr ISteamUser);

        [DllImport("libsteam_api.so")]
        internal static extern VoiceResult SteamAPI_ISteamUser_GetAvailableVoice(
          IntPtr ISteamUser,
          out uint pcbCompressed,
          out uint pcbUncompressed_Deprecated,
          uint nUncompressedVoiceDesiredSampleRate_Deprecated);

        [DllImport("libsteam_api.so")]
        internal static extern VoiceResult SteamAPI_ISteamUser_GetVoice(
          IntPtr ISteamUser,
          [MarshalAs(UnmanagedType.U1)] bool bWantCompressed,
          IntPtr pDestBuffer,
          uint cbDestBufferSize,
          out uint nBytesWritten,
          [MarshalAs(UnmanagedType.U1)] bool bWantUncompressed_Deprecated,
          IntPtr pUncompressedDestBuffer_Deprecated,
          uint cbUncompressedDestBufferSize_Deprecated,
          out uint nUncompressBytesWritten_Deprecated,
          uint nUncompressedVoiceDesiredSampleRate_Deprecated);

        [DllImport("libsteam_api.so")]
        internal static extern VoiceResult SteamAPI_ISteamUser_DecompressVoice(
          IntPtr ISteamUser,
          IntPtr pCompressed,
          uint cbCompressed,
          IntPtr pDestBuffer,
          uint cbDestBufferSize,
          out uint nBytesWritten,
          uint nDesiredSampleRate);

        [DllImport("libsteam_api.so")]
        internal static extern uint SteamAPI_ISteamUser_GetVoiceOptimalSampleRate(IntPtr ISteamUser);

        [DllImport("libsteam_api.so")]
        internal static extern HAuthTicket SteamAPI_ISteamUser_GetAuthSessionTicket(
          IntPtr ISteamUser,
          IntPtr pTicket,
          int cbMaxTicket,
          out uint pcbTicket);

        [DllImport("libsteam_api.so")]
        internal static extern BeginAuthSessionResult SteamAPI_ISteamUser_BeginAuthSession(
          IntPtr ISteamUser,
          IntPtr pAuthTicket,
          int cbAuthTicket,
          ulong steamID);

        [DllImport("libsteam_api.so")]
        internal static extern void SteamAPI_ISteamUser_EndAuthSession(
          IntPtr ISteamUser,
          ulong steamID);

        [DllImport("libsteam_api.so")]
        internal static extern void SteamAPI_ISteamUser_CancelAuthTicket(
          IntPtr ISteamUser,
          uint hAuthTicket);

        [DllImport("libsteam_api.so")]
        internal static extern UserHasLicenseForAppResult SteamAPI_ISteamUser_UserHasLicenseForApp(
          IntPtr ISteamUser,
          ulong steamID,
          uint appID);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamUser_BIsBehindNAT(IntPtr ISteamUser);

        [DllImport("libsteam_api.so")]
        internal static extern void SteamAPI_ISteamUser_AdvertiseGame(
          IntPtr ISteamUser,
          ulong steamIDGameServer,
          uint unIPServer,
          ushort usPortServer);

        [DllImport("libsteam_api.so")]
        internal static extern SteamAPICall_t SteamAPI_ISteamUser_RequestEncryptedAppTicket(
          IntPtr ISteamUser,
          IntPtr pDataToInclude,
          int cbDataToInclude);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamUser_GetEncryptedAppTicket(
          IntPtr ISteamUser,
          IntPtr pTicket,
          int cbMaxTicket,
          out uint pcbTicket);

        [DllImport("libsteam_api.so")]
        internal static extern int SteamAPI_ISteamUser_GetGameBadgeLevel(
          IntPtr ISteamUser,
          int nSeries,
          [MarshalAs(UnmanagedType.U1)] bool bFoil);

        [DllImport("libsteam_api.so")]
        internal static extern int SteamAPI_ISteamUser_GetPlayerSteamLevel(IntPtr ISteamUser);

        [DllImport("libsteam_api.so")]
        internal static extern SteamAPICall_t SteamAPI_ISteamUser_RequestStoreAuthURL(
          IntPtr ISteamUser,
          string pchRedirectURL);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamUser_BIsPhoneVerified(IntPtr ISteamUser);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamUser_BIsTwoFactorEnabled(IntPtr ISteamUser);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamUser_BIsPhoneIdentifying(IntPtr ISteamUser);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamUser_BIsPhoneRequiringVerification(
          IntPtr ISteamUser);

        [DllImport("libsteam_api.so")]
        internal static extern IntPtr SteamAPI_ISteamFriends_GetPersonaName(IntPtr ISteamFriends);

        [DllImport("libsteam_api.so")]
        internal static extern SteamAPICall_t SteamAPI_ISteamFriends_SetPersonaName(
          IntPtr ISteamFriends,
          string pchPersonaName);

        [DllImport("libsteam_api.so")]
        internal static extern PersonaState SteamAPI_ISteamFriends_GetPersonaState(
          IntPtr ISteamFriends);

        [DllImport("libsteam_api.so")]
        internal static extern int SteamAPI_ISteamFriends_GetFriendCount(
          IntPtr ISteamFriends,
          int iFriendFlags);

        [DllImport("libsteam_api.so")]
        internal static extern CSteamID SteamAPI_ISteamFriends_GetFriendByIndex(
          IntPtr ISteamFriends,
          int iFriend,
          int iFriendFlags);

        [DllImport("libsteam_api.so")]
        internal static extern FriendRelationship SteamAPI_ISteamFriends_GetFriendRelationship(
          IntPtr ISteamFriends,
          ulong steamIDFriend);

        [DllImport("libsteam_api.so")]
        internal static extern PersonaState SteamAPI_ISteamFriends_GetFriendPersonaState(
          IntPtr ISteamFriends,
          ulong steamIDFriend);

        [DllImport("libsteam_api.so")]
        internal static extern IntPtr SteamAPI_ISteamFriends_GetFriendPersonaName(
          IntPtr ISteamFriends,
          ulong steamIDFriend);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamFriends_GetFriendGamePlayed(
          IntPtr ISteamFriends,
          ulong steamIDFriend,
          ref FriendGameInfo_t.PackSmall pFriendGameInfo);

        [DllImport("libsteam_api.so")]
        internal static extern IntPtr SteamAPI_ISteamFriends_GetFriendPersonaNameHistory(
          IntPtr ISteamFriends,
          ulong steamIDFriend,
          int iPersonaName);

        [DllImport("libsteam_api.so")]
        internal static extern int SteamAPI_ISteamFriends_GetFriendSteamLevel(
          IntPtr ISteamFriends,
          ulong steamIDFriend);

        [DllImport("libsteam_api.so")]
        internal static extern IntPtr SteamAPI_ISteamFriends_GetPlayerNickname(
          IntPtr ISteamFriends,
          ulong steamIDPlayer);

        [DllImport("libsteam_api.so")]
        internal static extern int SteamAPI_ISteamFriends_GetFriendsGroupCount(IntPtr ISteamFriends);

        [DllImport("libsteam_api.so")]
        internal static extern FriendsGroupID_t SteamAPI_ISteamFriends_GetFriendsGroupIDByIndex(
          IntPtr ISteamFriends,
          int iFG);

        [DllImport("libsteam_api.so")]
        internal static extern IntPtr SteamAPI_ISteamFriends_GetFriendsGroupName(
          IntPtr ISteamFriends,
          short friendsGroupID);

        [DllImport("libsteam_api.so")]
        internal static extern int SteamAPI_ISteamFriends_GetFriendsGroupMembersCount(
          IntPtr ISteamFriends,
          short friendsGroupID);

        [DllImport("libsteam_api.so")]
        internal static extern void SteamAPI_ISteamFriends_GetFriendsGroupMembersList(
          IntPtr ISteamFriends,
          short friendsGroupID,
          IntPtr pOutSteamIDMembers,
          int nMembersCount);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamFriends_HasFriend(
          IntPtr ISteamFriends,
          ulong steamIDFriend,
          int iFriendFlags);

        [DllImport("libsteam_api.so")]
        internal static extern int SteamAPI_ISteamFriends_GetClanCount(IntPtr ISteamFriends);

        [DllImport("libsteam_api.so")]
        internal static extern CSteamID SteamAPI_ISteamFriends_GetClanByIndex(
          IntPtr ISteamFriends,
          int iClan);

        [DllImport("libsteam_api.so")]
        internal static extern IntPtr SteamAPI_ISteamFriends_GetClanName(
          IntPtr ISteamFriends,
          ulong steamIDClan);

        [DllImport("libsteam_api.so")]
        internal static extern IntPtr SteamAPI_ISteamFriends_GetClanTag(
          IntPtr ISteamFriends,
          ulong steamIDClan);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamFriends_GetClanActivityCounts(
          IntPtr ISteamFriends,
          ulong steamIDClan,
          out int pnOnline,
          out int pnInGame,
          out int pnChatting);

        [DllImport("libsteam_api.so")]
        internal static extern SteamAPICall_t SteamAPI_ISteamFriends_DownloadClanActivityCounts(
          IntPtr ISteamFriends,
          IntPtr psteamIDClans,
          int cClansToRequest);

        [DllImport("libsteam_api.so")]
        internal static extern int SteamAPI_ISteamFriends_GetFriendCountFromSource(
          IntPtr ISteamFriends,
          ulong steamIDSource);

        [DllImport("libsteam_api.so")]
        internal static extern CSteamID SteamAPI_ISteamFriends_GetFriendFromSourceByIndex(
          IntPtr ISteamFriends,
          ulong steamIDSource,
          int iFriend);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamFriends_IsUserInSource(
          IntPtr ISteamFriends,
          ulong steamIDUser,
          ulong steamIDSource);

        [DllImport("libsteam_api.so")]
        internal static extern void SteamAPI_ISteamFriends_SetInGameVoiceSpeaking(
          IntPtr ISteamFriends,
          ulong steamIDUser,
          [MarshalAs(UnmanagedType.U1)] bool bSpeaking);

        [DllImport("libsteam_api.so")]
        internal static extern void SteamAPI_ISteamFriends_ActivateGameOverlay(
          IntPtr ISteamFriends,
          string pchDialog);

        [DllImport("libsteam_api.so")]
        internal static extern void SteamAPI_ISteamFriends_ActivateGameOverlayToUser(
          IntPtr ISteamFriends,
          string pchDialog,
          ulong steamID);

        [DllImport("libsteam_api.so")]
        internal static extern void SteamAPI_ISteamFriends_ActivateGameOverlayToWebPage(
          IntPtr ISteamFriends,
          string pchURL);

        [DllImport("libsteam_api.so")]
        internal static extern void SteamAPI_ISteamFriends_ActivateGameOverlayToStore(
          IntPtr ISteamFriends,
          uint nAppID,
          OverlayToStoreFlag eFlag);

        [DllImport("libsteam_api.so")]
        internal static extern void SteamAPI_ISteamFriends_SetPlayedWith(
          IntPtr ISteamFriends,
          ulong steamIDUserPlayedWith);

        [DllImport("libsteam_api.so")]
        internal static extern void SteamAPI_ISteamFriends_ActivateGameOverlayInviteDialog(
          IntPtr ISteamFriends,
          ulong steamIDLobby);

        [DllImport("libsteam_api.so")]
        internal static extern int SteamAPI_ISteamFriends_GetSmallFriendAvatar(
          IntPtr ISteamFriends,
          ulong steamIDFriend);

        [DllImport("libsteam_api.so")]
        internal static extern int SteamAPI_ISteamFriends_GetMediumFriendAvatar(
          IntPtr ISteamFriends,
          ulong steamIDFriend);

        [DllImport("libsteam_api.so")]
        internal static extern int SteamAPI_ISteamFriends_GetLargeFriendAvatar(
          IntPtr ISteamFriends,
          ulong steamIDFriend);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamFriends_RequestUserInformation(
          IntPtr ISteamFriends,
          ulong steamIDUser,
          [MarshalAs(UnmanagedType.U1)] bool bRequireNameOnly);

        [DllImport("libsteam_api.so")]
        internal static extern SteamAPICall_t SteamAPI_ISteamFriends_RequestClanOfficerList(
          IntPtr ISteamFriends,
          ulong steamIDClan);

        [DllImport("libsteam_api.so")]
        internal static extern CSteamID SteamAPI_ISteamFriends_GetClanOwner(
          IntPtr ISteamFriends,
          ulong steamIDClan);

        [DllImport("libsteam_api.so")]
        internal static extern int SteamAPI_ISteamFriends_GetClanOfficerCount(
          IntPtr ISteamFriends,
          ulong steamIDClan);

        [DllImport("libsteam_api.so")]
        internal static extern CSteamID SteamAPI_ISteamFriends_GetClanOfficerByIndex(
          IntPtr ISteamFriends,
          ulong steamIDClan,
          int iOfficer);

        [DllImport("libsteam_api.so")]
        internal static extern uint SteamAPI_ISteamFriends_GetUserRestrictions(IntPtr ISteamFriends);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamFriends_SetRichPresence(
          IntPtr ISteamFriends,
          string pchKey,
          string pchValue);

        [DllImport("libsteam_api.so")]
        internal static extern void SteamAPI_ISteamFriends_ClearRichPresence(IntPtr ISteamFriends);

        [DllImport("libsteam_api.so")]
        internal static extern IntPtr SteamAPI_ISteamFriends_GetFriendRichPresence(
          IntPtr ISteamFriends,
          ulong steamIDFriend,
          string pchKey);

        [DllImport("libsteam_api.so")]
        internal static extern int SteamAPI_ISteamFriends_GetFriendRichPresenceKeyCount(
          IntPtr ISteamFriends,
          ulong steamIDFriend);

        [DllImport("libsteam_api.so")]
        internal static extern IntPtr SteamAPI_ISteamFriends_GetFriendRichPresenceKeyByIndex(
          IntPtr ISteamFriends,
          ulong steamIDFriend,
          int iKey);

        [DllImport("libsteam_api.so")]
        internal static extern void SteamAPI_ISteamFriends_RequestFriendRichPresence(
          IntPtr ISteamFriends,
          ulong steamIDFriend);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamFriends_InviteUserToGame(
          IntPtr ISteamFriends,
          ulong steamIDFriend,
          string pchConnectString);

        [DllImport("libsteam_api.so")]
        internal static extern int SteamAPI_ISteamFriends_GetCoplayFriendCount(IntPtr ISteamFriends);

        [DllImport("libsteam_api.so")]
        internal static extern CSteamID SteamAPI_ISteamFriends_GetCoplayFriend(
          IntPtr ISteamFriends,
          int iCoplayFriend);

        [DllImport("libsteam_api.so")]
        internal static extern int SteamAPI_ISteamFriends_GetFriendCoplayTime(
          IntPtr ISteamFriends,
          ulong steamIDFriend);

        [DllImport("libsteam_api.so")]
        internal static extern AppId_t SteamAPI_ISteamFriends_GetFriendCoplayGame(
          IntPtr ISteamFriends,
          ulong steamIDFriend);

        [DllImport("libsteam_api.so")]
        internal static extern SteamAPICall_t SteamAPI_ISteamFriends_JoinClanChatRoom(
          IntPtr ISteamFriends,
          ulong steamIDClan);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamFriends_LeaveClanChatRoom(
          IntPtr ISteamFriends,
          ulong steamIDClan);

        [DllImport("libsteam_api.so")]
        internal static extern int SteamAPI_ISteamFriends_GetClanChatMemberCount(
          IntPtr ISteamFriends,
          ulong steamIDClan);

        [DllImport("libsteam_api.so")]
        internal static extern CSteamID SteamAPI_ISteamFriends_GetChatMemberByIndex(
          IntPtr ISteamFriends,
          ulong steamIDClan,
          int iUser);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamFriends_SendClanChatMessage(
          IntPtr ISteamFriends,
          ulong steamIDClanChat,
          string pchText);

        [DllImport("libsteam_api.so")]
        internal static extern int SteamAPI_ISteamFriends_GetClanChatMessage(
          IntPtr ISteamFriends,
          ulong steamIDClanChat,
          int iMessage,
          IntPtr prgchText,
          int cchTextMax,
          out ChatEntryType peChatEntryType,
          out ulong psteamidChatter);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamFriends_IsClanChatAdmin(
          IntPtr ISteamFriends,
          ulong steamIDClanChat,
          ulong steamIDUser);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamFriends_IsClanChatWindowOpenInSteam(
          IntPtr ISteamFriends,
          ulong steamIDClanChat);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamFriends_OpenClanChatWindowInSteam(
          IntPtr ISteamFriends,
          ulong steamIDClanChat);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamFriends_CloseClanChatWindowInSteam(
          IntPtr ISteamFriends,
          ulong steamIDClanChat);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamFriends_SetListenForFriendsMessages(
          IntPtr ISteamFriends,
          [MarshalAs(UnmanagedType.U1)] bool bInterceptEnabled);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamFriends_ReplyToFriendMessage(
          IntPtr ISteamFriends,
          ulong steamIDFriend,
          string pchMsgToSend);

        [DllImport("libsteam_api.so")]
        internal static extern int SteamAPI_ISteamFriends_GetFriendMessage(
          IntPtr ISteamFriends,
          ulong steamIDFriend,
          int iMessageID,
          IntPtr pvData,
          int cubData,
          out ChatEntryType peChatEntryType);

        [DllImport("libsteam_api.so")]
        internal static extern SteamAPICall_t SteamAPI_ISteamFriends_GetFollowerCount(
          IntPtr ISteamFriends,
          ulong steamID);

        [DllImport("libsteam_api.so")]
        internal static extern SteamAPICall_t SteamAPI_ISteamFriends_IsFollowing(
          IntPtr ISteamFriends,
          ulong steamID);

        [DllImport("libsteam_api.so")]
        internal static extern SteamAPICall_t SteamAPI_ISteamFriends_EnumerateFollowingList(
          IntPtr ISteamFriends,
          uint unStartIndex);

        [DllImport("libsteam_api.so")]
        internal static extern uint SteamAPI_ISteamUtils_GetSecondsSinceAppActive(IntPtr ISteamUtils);

        [DllImport("libsteam_api.so")]
        internal static extern uint SteamAPI_ISteamUtils_GetSecondsSinceComputerActive(
          IntPtr ISteamUtils);

        [DllImport("libsteam_api.so")]
        internal static extern Universe SteamAPI_ISteamUtils_GetConnectedUniverse(IntPtr ISteamUtils);

        [DllImport("libsteam_api.so")]
        internal static extern uint SteamAPI_ISteamUtils_GetServerRealTime(IntPtr ISteamUtils);

        [DllImport("libsteam_api.so")]
        internal static extern IntPtr SteamAPI_ISteamUtils_GetIPCountry(IntPtr ISteamUtils);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamUtils_GetImageSize(
          IntPtr ISteamUtils,
          int iImage,
          out uint pnWidth,
          out uint pnHeight);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamUtils_GetImageRGBA(
          IntPtr ISteamUtils,
          int iImage,
          IntPtr pubDest,
          int nDestBufferSize);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamUtils_GetCSERIPPort(
          IntPtr ISteamUtils,
          out uint unIP,
          out ushort usPort);

        [DllImport("libsteam_api.so")]
        internal static extern byte SteamAPI_ISteamUtils_GetCurrentBatteryPower(IntPtr ISteamUtils);

        [DllImport("libsteam_api.so")]
        internal static extern uint SteamAPI_ISteamUtils_GetAppID(IntPtr ISteamUtils);

        [DllImport("libsteam_api.so")]
        internal static extern void SteamAPI_ISteamUtils_SetOverlayNotificationPosition(
          IntPtr ISteamUtils,
          NotificationPosition eNotificationPosition);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamUtils_IsAPICallCompleted(
          IntPtr ISteamUtils,
          ulong hSteamAPICall,
          [MarshalAs(UnmanagedType.U1)] ref bool pbFailed);

        [DllImport("libsteam_api.so")]
        internal static extern SteamAPICallFailure SteamAPI_ISteamUtils_GetAPICallFailureReason(
          IntPtr ISteamUtils,
          ulong hSteamAPICall);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamUtils_GetAPICallResult(
          IntPtr ISteamUtils,
          ulong hSteamAPICall,
          IntPtr pCallback,
          int cubCallback,
          int iCallbackExpected,
          [MarshalAs(UnmanagedType.U1)] ref bool pbFailed);

        [DllImport("libsteam_api.so")]
        internal static extern uint SteamAPI_ISteamUtils_GetIPCCallCount(IntPtr ISteamUtils);

        [DllImport("libsteam_api.so")]
        internal static extern void SteamAPI_ISteamUtils_SetWarningMessageHook(
          IntPtr ISteamUtils,
          IntPtr pFunction);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamUtils_IsOverlayEnabled(IntPtr ISteamUtils);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamUtils_BOverlayNeedsPresent(IntPtr ISteamUtils);

        [DllImport("libsteam_api.so")]
        internal static extern SteamAPICall_t SteamAPI_ISteamUtils_CheckFileSignature(
          IntPtr ISteamUtils,
          string szFileName);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamUtils_ShowGamepadTextInput(
          IntPtr ISteamUtils,
          GamepadTextInputMode eInputMode,
          GamepadTextInputLineMode eLineInputMode,
          string pchDescription,
          uint unCharMax,
          string pchExistingText);

        [DllImport("libsteam_api.so")]
        internal static extern uint SteamAPI_ISteamUtils_GetEnteredGamepadTextLength(
          IntPtr ISteamUtils);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamUtils_GetEnteredGamepadTextInput(
          IntPtr ISteamUtils,
          StringBuilder pchText,
          uint cchText);

        [DllImport("libsteam_api.so")]
        internal static extern IntPtr SteamAPI_ISteamUtils_GetSteamUILanguage(IntPtr ISteamUtils);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamUtils_IsSteamRunningInVR(IntPtr ISteamUtils);

        [DllImport("libsteam_api.so")]
        internal static extern void SteamAPI_ISteamUtils_SetOverlayNotificationInset(
          IntPtr ISteamUtils,
          int nHorizontalInset,
          int nVerticalInset);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamUtils_IsSteamInBigPictureMode(IntPtr ISteamUtils);

        [DllImport("libsteam_api.so")]
        internal static extern void SteamAPI_ISteamUtils_StartVRDashboard(IntPtr ISteamUtils);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamUtils_IsVRHeadsetStreamingEnabled(
          IntPtr ISteamUtils);

        [DllImport("libsteam_api.so")]
        internal static extern void SteamAPI_ISteamUtils_SetVRHeadsetStreamingEnabled(
          IntPtr ISteamUtils,
          [MarshalAs(UnmanagedType.U1)] bool bEnabled);

        [DllImport("libsteam_api.so")]
        internal static extern int SteamAPI_ISteamMatchmaking_GetFavoriteGameCount(
          IntPtr ISteamMatchmaking);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamMatchmaking_GetFavoriteGame(
          IntPtr ISteamMatchmaking,
          int iGame,
          ref uint pnAppID,
          out uint pnIP,
          out ushort pnConnPort,
          out ushort pnQueryPort,
          out uint punFlags,
          out uint pRTime32LastPlayedOnServer);

        [DllImport("libsteam_api.so")]
        internal static extern int SteamAPI_ISteamMatchmaking_AddFavoriteGame(
          IntPtr ISteamMatchmaking,
          uint nAppID,
          uint nIP,
          ushort nConnPort,
          ushort nQueryPort,
          uint unFlags,
          uint rTime32LastPlayedOnServer);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamMatchmaking_RemoveFavoriteGame(
          IntPtr ISteamMatchmaking,
          uint nAppID,
          uint nIP,
          ushort nConnPort,
          ushort nQueryPort,
          uint unFlags);

        [DllImport("libsteam_api.so")]
        internal static extern SteamAPICall_t SteamAPI_ISteamMatchmaking_RequestLobbyList(
          IntPtr ISteamMatchmaking);

        [DllImport("libsteam_api.so")]
        internal static extern void SteamAPI_ISteamMatchmaking_AddRequestLobbyListStringFilter(
          IntPtr ISteamMatchmaking,
          string pchKeyToMatch,
          string pchValueToMatch,
          LobbyComparison eComparisonType);

        [DllImport("libsteam_api.so")]
        internal static extern void SteamAPI_ISteamMatchmaking_AddRequestLobbyListNumericalFilter(
          IntPtr ISteamMatchmaking,
          string pchKeyToMatch,
          int nValueToMatch,
          LobbyComparison eComparisonType);

        [DllImport("libsteam_api.so")]
        internal static extern void SteamAPI_ISteamMatchmaking_AddRequestLobbyListNearValueFilter(
          IntPtr ISteamMatchmaking,
          string pchKeyToMatch,
          int nValueToBeCloseTo);

        [DllImport("libsteam_api.so")]
        internal static extern void SteamAPI_ISteamMatchmaking_AddRequestLobbyListFilterSlotsAvailable(
          IntPtr ISteamMatchmaking,
          int nSlotsAvailable);

        [DllImport("libsteam_api.so")]
        internal static extern void SteamAPI_ISteamMatchmaking_AddRequestLobbyListDistanceFilter(
          IntPtr ISteamMatchmaking,
          LobbyDistanceFilter eLobbyDistanceFilter);

        [DllImport("libsteam_api.so")]
        internal static extern void SteamAPI_ISteamMatchmaking_AddRequestLobbyListResultCountFilter(
          IntPtr ISteamMatchmaking,
          int cMaxResults);

        [DllImport("libsteam_api.so")]
        internal static extern void SteamAPI_ISteamMatchmaking_AddRequestLobbyListCompatibleMembersFilter(
          IntPtr ISteamMatchmaking,
          ulong steamIDLobby);

        [DllImport("libsteam_api.so")]
        internal static extern CSteamID SteamAPI_ISteamMatchmaking_GetLobbyByIndex(
          IntPtr ISteamMatchmaking,
          int iLobby);

        [DllImport("libsteam_api.so")]
        internal static extern SteamAPICall_t SteamAPI_ISteamMatchmaking_CreateLobby(
          IntPtr ISteamMatchmaking,
          LobbyType eLobbyType,
          int cMaxMembers);

        [DllImport("libsteam_api.so")]
        internal static extern SteamAPICall_t SteamAPI_ISteamMatchmaking_JoinLobby(
          IntPtr ISteamMatchmaking,
          ulong steamIDLobby);

        [DllImport("libsteam_api.so")]
        internal static extern void SteamAPI_ISteamMatchmaking_LeaveLobby(
          IntPtr ISteamMatchmaking,
          ulong steamIDLobby);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamMatchmaking_InviteUserToLobby(
          IntPtr ISteamMatchmaking,
          ulong steamIDLobby,
          ulong steamIDInvitee);

        [DllImport("libsteam_api.so")]
        internal static extern int SteamAPI_ISteamMatchmaking_GetNumLobbyMembers(
          IntPtr ISteamMatchmaking,
          ulong steamIDLobby);

        [DllImport("libsteam_api.so")]
        internal static extern CSteamID SteamAPI_ISteamMatchmaking_GetLobbyMemberByIndex(
          IntPtr ISteamMatchmaking,
          ulong steamIDLobby,
          int iMember);

        [DllImport("libsteam_api.so")]
        internal static extern IntPtr SteamAPI_ISteamMatchmaking_GetLobbyData(
          IntPtr ISteamMatchmaking,
          ulong steamIDLobby,
          string pchKey);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamMatchmaking_SetLobbyData(
          IntPtr ISteamMatchmaking,
          ulong steamIDLobby,
          string pchKey,
          string pchValue);

        [DllImport("libsteam_api.so")]
        internal static extern int SteamAPI_ISteamMatchmaking_GetLobbyDataCount(
          IntPtr ISteamMatchmaking,
          ulong steamIDLobby);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamMatchmaking_GetLobbyDataByIndex(
          IntPtr ISteamMatchmaking,
          ulong steamIDLobby,
          int iLobbyData,
          StringBuilder pchKey,
          int cchKeyBufferSize,
          StringBuilder pchValue,
          int cchValueBufferSize);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamMatchmaking_DeleteLobbyData(
          IntPtr ISteamMatchmaking,
          ulong steamIDLobby,
          string pchKey);

        [DllImport("libsteam_api.so")]
        internal static extern IntPtr SteamAPI_ISteamMatchmaking_GetLobbyMemberData(
          IntPtr ISteamMatchmaking,
          ulong steamIDLobby,
          ulong steamIDUser,
          string pchKey);

        [DllImport("libsteam_api.so")]
        internal static extern void SteamAPI_ISteamMatchmaking_SetLobbyMemberData(
          IntPtr ISteamMatchmaking,
          ulong steamIDLobby,
          string pchKey,
          string pchValue);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamMatchmaking_SendLobbyChatMsg(
          IntPtr ISteamMatchmaking,
          ulong steamIDLobby,
          IntPtr pvMsgBody,
          int cubMsgBody);

        [DllImport("libsteam_api.so")]
        internal static extern int SteamAPI_ISteamMatchmaking_GetLobbyChatEntry(
          IntPtr ISteamMatchmaking,
          ulong steamIDLobby,
          int iChatID,
          out ulong pSteamIDUser,
          IntPtr pvData,
          int cubData,
          out ChatEntryType peChatEntryType);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamMatchmaking_RequestLobbyData(
          IntPtr ISteamMatchmaking,
          ulong steamIDLobby);

        [DllImport("libsteam_api.so")]
        internal static extern void SteamAPI_ISteamMatchmaking_SetLobbyGameServer(
          IntPtr ISteamMatchmaking,
          ulong steamIDLobby,
          uint unGameServerIP,
          ushort unGameServerPort,
          ulong steamIDGameServer);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamMatchmaking_GetLobbyGameServer(
          IntPtr ISteamMatchmaking,
          ulong steamIDLobby,
          out uint punGameServerIP,
          out ushort punGameServerPort,
          out ulong psteamIDGameServer);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamMatchmaking_SetLobbyMemberLimit(
          IntPtr ISteamMatchmaking,
          ulong steamIDLobby,
          int cMaxMembers);

        [DllImport("libsteam_api.so")]
        internal static extern int SteamAPI_ISteamMatchmaking_GetLobbyMemberLimit(
          IntPtr ISteamMatchmaking,
          ulong steamIDLobby);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamMatchmaking_SetLobbyType(
          IntPtr ISteamMatchmaking,
          ulong steamIDLobby,
          LobbyType eLobbyType);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamMatchmaking_SetLobbyJoinable(
          IntPtr ISteamMatchmaking,
          ulong steamIDLobby,
          [MarshalAs(UnmanagedType.U1)] bool bLobbyJoinable);

        [DllImport("libsteam_api.so")]
        internal static extern CSteamID SteamAPI_ISteamMatchmaking_GetLobbyOwner(
          IntPtr ISteamMatchmaking,
          ulong steamIDLobby);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamMatchmaking_SetLobbyOwner(
          IntPtr ISteamMatchmaking,
          ulong steamIDLobby,
          ulong steamIDNewOwner);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamMatchmaking_SetLinkedLobby(
          IntPtr ISteamMatchmaking,
          ulong steamIDLobby,
          ulong steamIDLobbyDependent);

        [DllImport("libsteam_api.so")]
        internal static extern HServerListRequest SteamAPI_ISteamMatchmakingServers_RequestInternetServerList(
          IntPtr ISteamMatchmakingServers,
          uint iApp,
          IntPtr ppchFilters,
          uint nFilters,
          IntPtr pRequestServersResponse);

        [DllImport("libsteam_api.so")]
        internal static extern HServerListRequest SteamAPI_ISteamMatchmakingServers_RequestLANServerList(
          IntPtr ISteamMatchmakingServers,
          uint iApp,
          IntPtr pRequestServersResponse);

        [DllImport("libsteam_api.so")]
        internal static extern HServerListRequest SteamAPI_ISteamMatchmakingServers_RequestFriendsServerList(
          IntPtr ISteamMatchmakingServers,
          uint iApp,
          IntPtr ppchFilters,
          uint nFilters,
          IntPtr pRequestServersResponse);

        [DllImport("libsteam_api.so")]
        internal static extern HServerListRequest SteamAPI_ISteamMatchmakingServers_RequestFavoritesServerList(
          IntPtr ISteamMatchmakingServers,
          uint iApp,
          IntPtr ppchFilters,
          uint nFilters,
          IntPtr pRequestServersResponse);

        [DllImport("libsteam_api.so")]
        internal static extern HServerListRequest SteamAPI_ISteamMatchmakingServers_RequestHistoryServerList(
          IntPtr ISteamMatchmakingServers,
          uint iApp,
          IntPtr ppchFilters,
          uint nFilters,
          IntPtr pRequestServersResponse);

        [DllImport("libsteam_api.so")]
        internal static extern HServerListRequest SteamAPI_ISteamMatchmakingServers_RequestSpectatorServerList(
          IntPtr ISteamMatchmakingServers,
          uint iApp,
          IntPtr ppchFilters,
          uint nFilters,
          IntPtr pRequestServersResponse);

        [DllImport("libsteam_api.so")]
        internal static extern void SteamAPI_ISteamMatchmakingServers_ReleaseRequest(
          IntPtr ISteamMatchmakingServers,
          IntPtr hServerListRequest);

        [DllImport("libsteam_api.so")]
        internal static extern IntPtr SteamAPI_ISteamMatchmakingServers_GetServerDetails(
          IntPtr ISteamMatchmakingServers,
          IntPtr hRequest,
          int iServer);

        [DllImport("libsteam_api.so")]
        internal static extern void SteamAPI_ISteamMatchmakingServers_CancelQuery(
          IntPtr ISteamMatchmakingServers,
          IntPtr hRequest);

        [DllImport("libsteam_api.so")]
        internal static extern void SteamAPI_ISteamMatchmakingServers_RefreshQuery(
          IntPtr ISteamMatchmakingServers,
          IntPtr hRequest);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamMatchmakingServers_IsRefreshing(
          IntPtr ISteamMatchmakingServers,
          IntPtr hRequest);

        [DllImport("libsteam_api.so")]
        internal static extern int SteamAPI_ISteamMatchmakingServers_GetServerCount(
          IntPtr ISteamMatchmakingServers,
          IntPtr hRequest);

        [DllImport("libsteam_api.so")]
        internal static extern void SteamAPI_ISteamMatchmakingServers_RefreshServer(
          IntPtr ISteamMatchmakingServers,
          IntPtr hRequest,
          int iServer);

        [DllImport("libsteam_api.so")]
        internal static extern HServerQuery SteamAPI_ISteamMatchmakingServers_PingServer(
          IntPtr ISteamMatchmakingServers,
          uint unIP,
          ushort usPort,
          IntPtr pRequestServersResponse);

        [DllImport("libsteam_api.so")]
        internal static extern HServerQuery SteamAPI_ISteamMatchmakingServers_PlayerDetails(
          IntPtr ISteamMatchmakingServers,
          uint unIP,
          ushort usPort,
          IntPtr pRequestServersResponse);

        [DllImport("libsteam_api.so")]
        internal static extern HServerQuery SteamAPI_ISteamMatchmakingServers_ServerRules(
          IntPtr ISteamMatchmakingServers,
          uint unIP,
          ushort usPort,
          IntPtr pRequestServersResponse);

        [DllImport("libsteam_api.so")]
        internal static extern void SteamAPI_ISteamMatchmakingServers_CancelServerQuery(
          IntPtr ISteamMatchmakingServers,
          int hServerQuery);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamRemoteStorage_FileWrite(
          IntPtr ISteamRemoteStorage,
          string pchFile,
          IntPtr pvData,
          int cubData);

        [DllImport("libsteam_api.so")]
        internal static extern int SteamAPI_ISteamRemoteStorage_FileRead(
          IntPtr ISteamRemoteStorage,
          string pchFile,
          IntPtr pvData,
          int cubDataToRead);

        [DllImport("libsteam_api.so")]
        internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_FileWriteAsync(
          IntPtr ISteamRemoteStorage,
          string pchFile,
          IntPtr pvData,
          uint cubData);

        [DllImport("libsteam_api.so")]
        internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_FileReadAsync(
          IntPtr ISteamRemoteStorage,
          string pchFile,
          uint nOffset,
          uint cubToRead);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamRemoteStorage_FileReadAsyncComplete(
          IntPtr ISteamRemoteStorage,
          ulong hReadCall,
          IntPtr pvBuffer,
          uint cubToRead);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamRemoteStorage_FileForget(
          IntPtr ISteamRemoteStorage,
          string pchFile);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamRemoteStorage_FileDelete(
          IntPtr ISteamRemoteStorage,
          string pchFile);

        [DllImport("libsteam_api.so")]
        internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_FileShare(
          IntPtr ISteamRemoteStorage,
          string pchFile);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamRemoteStorage_SetSyncPlatforms(
          IntPtr ISteamRemoteStorage,
          string pchFile,
          RemoteStoragePlatform eRemoteStoragePlatform);

        [DllImport("libsteam_api.so")]
        internal static extern UGCFileWriteStreamHandle_t SteamAPI_ISteamRemoteStorage_FileWriteStreamOpen(
          IntPtr ISteamRemoteStorage,
          string pchFile);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamRemoteStorage_FileWriteStreamWriteChunk(
          IntPtr ISteamRemoteStorage,
          ulong writeHandle,
          IntPtr pvData,
          int cubData);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamRemoteStorage_FileWriteStreamClose(
          IntPtr ISteamRemoteStorage,
          ulong writeHandle);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamRemoteStorage_FileWriteStreamCancel(
          IntPtr ISteamRemoteStorage,
          ulong writeHandle);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamRemoteStorage_FileExists(
          IntPtr ISteamRemoteStorage,
          string pchFile);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamRemoteStorage_FilePersisted(
          IntPtr ISteamRemoteStorage,
          string pchFile);

        [DllImport("libsteam_api.so")]
        internal static extern int SteamAPI_ISteamRemoteStorage_GetFileSize(
          IntPtr ISteamRemoteStorage,
          string pchFile);

        [DllImport("libsteam_api.so")]
        internal static extern long SteamAPI_ISteamRemoteStorage_GetFileTimestamp(
          IntPtr ISteamRemoteStorage,
          string pchFile);

        [DllImport("libsteam_api.so")]
        internal static extern RemoteStoragePlatform SteamAPI_ISteamRemoteStorage_GetSyncPlatforms(
          IntPtr ISteamRemoteStorage,
          string pchFile);

        [DllImport("libsteam_api.so")]
        internal static extern int SteamAPI_ISteamRemoteStorage_GetFileCount(
          IntPtr ISteamRemoteStorage);

        [DllImport("libsteam_api.so")]
        internal static extern IntPtr SteamAPI_ISteamRemoteStorage_GetFileNameAndSize(
          IntPtr ISteamRemoteStorage,
          int iFile,
          out int pnFileSizeInBytes);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamRemoteStorage_GetQuota(
          IntPtr ISteamRemoteStorage,
          out ulong pnTotalBytes,
          out ulong puAvailableBytes);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamRemoteStorage_IsCloudEnabledForAccount(
          IntPtr ISteamRemoteStorage);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamRemoteStorage_IsCloudEnabledForApp(
          IntPtr ISteamRemoteStorage);

        [DllImport("libsteam_api.so")]
        internal static extern void SteamAPI_ISteamRemoteStorage_SetCloudEnabledForApp(
          IntPtr ISteamRemoteStorage,
          [MarshalAs(UnmanagedType.U1)] bool bEnabled);

        [DllImport("libsteam_api.so")]
        internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_UGCDownload(
          IntPtr ISteamRemoteStorage,
          ulong hContent,
          uint unPriority);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamRemoteStorage_GetUGCDownloadProgress(
          IntPtr ISteamRemoteStorage,
          ulong hContent,
          out int pnBytesDownloaded,
          out int pnBytesExpected);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamRemoteStorage_GetUGCDetails(
          IntPtr ISteamRemoteStorage,
          ulong hContent,
          ref uint pnAppID,
          StringBuilder ppchName,
          out int pnFileSizeInBytes,
          out ulong pSteamIDOwner);

        [DllImport("libsteam_api.so")]
        internal static extern int SteamAPI_ISteamRemoteStorage_UGCRead(
          IntPtr ISteamRemoteStorage,
          ulong hContent,
          IntPtr pvData,
          int cubDataToRead,
          uint cOffset,
          UGCReadAction eAction);

        [DllImport("libsteam_api.so")]
        internal static extern int SteamAPI_ISteamRemoteStorage_GetCachedUGCCount(
          IntPtr ISteamRemoteStorage);

        [DllImport("libsteam_api.so")]
        internal static extern UGCHandle_t SteamAPI_ISteamRemoteStorage_GetCachedUGCHandle(
          IntPtr ISteamRemoteStorage,
          int iCachedContent);

        [DllImport("libsteam_api.so")]
        internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_PublishWorkshopFile(
          IntPtr ISteamRemoteStorage,
          string pchFile,
          string pchPreviewFile,
          uint nConsumerAppId,
          string pchTitle,
          string pchDescription,
          RemoteStoragePublishedFileVisibility eVisibility,
          ref SteamParamStringArray_t.PackSmall pTags,
          WorkshopFileType eWorkshopFileType);

        [DllImport("libsteam_api.so")]
        internal static extern PublishedFileUpdateHandle_t SteamAPI_ISteamRemoteStorage_CreatePublishedFileUpdateRequest(
          IntPtr ISteamRemoteStorage,
          ulong unPublishedFileId);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamRemoteStorage_UpdatePublishedFileFile(
          IntPtr ISteamRemoteStorage,
          ulong updateHandle,
          string pchFile);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamRemoteStorage_UpdatePublishedFilePreviewFile(
          IntPtr ISteamRemoteStorage,
          ulong updateHandle,
          string pchPreviewFile);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamRemoteStorage_UpdatePublishedFileTitle(
          IntPtr ISteamRemoteStorage,
          ulong updateHandle,
          string pchTitle);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamRemoteStorage_UpdatePublishedFileDescription(
          IntPtr ISteamRemoteStorage,
          ulong updateHandle,
          string pchDescription);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamRemoteStorage_UpdatePublishedFileVisibility(
          IntPtr ISteamRemoteStorage,
          ulong updateHandle,
          RemoteStoragePublishedFileVisibility eVisibility);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamRemoteStorage_UpdatePublishedFileTags(
          IntPtr ISteamRemoteStorage,
          ulong updateHandle,
          ref SteamParamStringArray_t.PackSmall pTags);

        [DllImport("libsteam_api.so")]
        internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_CommitPublishedFileUpdate(
          IntPtr ISteamRemoteStorage,
          ulong updateHandle);

        [DllImport("libsteam_api.so")]
        internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_GetPublishedFileDetails(
          IntPtr ISteamRemoteStorage,
          ulong unPublishedFileId,
          uint unMaxSecondsOld);

        [DllImport("libsteam_api.so")]
        internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_DeletePublishedFile(
          IntPtr ISteamRemoteStorage,
          ulong unPublishedFileId);

        [DllImport("libsteam_api.so")]
        internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_EnumerateUserPublishedFiles(
          IntPtr ISteamRemoteStorage,
          uint unStartIndex);

        [DllImport("libsteam_api.so")]
        internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_SubscribePublishedFile(
          IntPtr ISteamRemoteStorage,
          ulong unPublishedFileId);

        [DllImport("libsteam_api.so")]
        internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_EnumerateUserSubscribedFiles(
          IntPtr ISteamRemoteStorage,
          uint unStartIndex);

        [DllImport("libsteam_api.so")]
        internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_UnsubscribePublishedFile(
          IntPtr ISteamRemoteStorage,
          ulong unPublishedFileId);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamRemoteStorage_UpdatePublishedFileSetChangeDescription(
          IntPtr ISteamRemoteStorage,
          ulong updateHandle,
          string pchChangeDescription);

        [DllImport("libsteam_api.so")]
        internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_GetPublishedItemVoteDetails(
          IntPtr ISteamRemoteStorage,
          ulong unPublishedFileId);

        [DllImport("libsteam_api.so")]
        internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_UpdateUserPublishedItemVote(
          IntPtr ISteamRemoteStorage,
          ulong unPublishedFileId,
          [MarshalAs(UnmanagedType.U1)] bool bVoteUp);

        [DllImport("libsteam_api.so")]
        internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_GetUserPublishedItemVoteDetails(
          IntPtr ISteamRemoteStorage,
          ulong unPublishedFileId);

        [DllImport("libsteam_api.so")]
        internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_EnumerateUserSharedWorkshopFiles(
          IntPtr ISteamRemoteStorage,
          ulong steamId,
          uint unStartIndex,
          ref SteamParamStringArray_t.PackSmall pRequiredTags,
          ref SteamParamStringArray_t.PackSmall pExcludedTags);

        [DllImport("libsteam_api.so")]
        internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_PublishVideo(
          IntPtr ISteamRemoteStorage,
          WorkshopVideoProvider eVideoProvider,
          string pchVideoAccount,
          string pchVideoIdentifier,
          string pchPreviewFile,
          uint nConsumerAppId,
          string pchTitle,
          string pchDescription,
          RemoteStoragePublishedFileVisibility eVisibility,
          ref SteamParamStringArray_t.PackSmall pTags);

        [DllImport("libsteam_api.so")]
        internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_SetUserPublishedFileAction(
          IntPtr ISteamRemoteStorage,
          ulong unPublishedFileId,
          WorkshopFileAction eAction);

        [DllImport("libsteam_api.so")]
        internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_EnumeratePublishedFilesByUserAction(
          IntPtr ISteamRemoteStorage,
          WorkshopFileAction eAction,
          uint unStartIndex);

        [DllImport("libsteam_api.so")]
        internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_EnumeratePublishedWorkshopFiles(
          IntPtr ISteamRemoteStorage,
          WorkshopEnumerationType eEnumerationType,
          uint unStartIndex,
          uint unCount,
          uint unDays,
          ref SteamParamStringArray_t.PackSmall pTags,
          ref SteamParamStringArray_t.PackSmall pUserTags);

        [DllImport("libsteam_api.so")]
        internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_UGCDownloadToLocation(
          IntPtr ISteamRemoteStorage,
          ulong hContent,
          string pchLocation,
          uint unPriority);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamUserStats_RequestCurrentStats(
          IntPtr ISteamUserStats);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamUserStats_GetStat(
          IntPtr ISteamUserStats,
          string pchName,
          out int pData);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamUserStats_GetStat0(
          IntPtr ISteamUserStats,
          string pchName,
          out float pData);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamUserStats_SetStat(
          IntPtr ISteamUserStats,
          string pchName,
          int nData);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamUserStats_SetStat0(
          IntPtr ISteamUserStats,
          string pchName,
          float fData);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamUserStats_UpdateAvgRateStat(
          IntPtr ISteamUserStats,
          string pchName,
          float flCountThisSession,
          double dSessionLength);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamUserStats_GetAchievement(
          IntPtr ISteamUserStats,
          string pchName,
          [MarshalAs(UnmanagedType.U1)] ref bool pbAchieved);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamUserStats_SetAchievement(
          IntPtr ISteamUserStats,
          string pchName);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamUserStats_ClearAchievement(
          IntPtr ISteamUserStats,
          string pchName);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamUserStats_GetAchievementAndUnlockTime(
          IntPtr ISteamUserStats,
          string pchName,
          [MarshalAs(UnmanagedType.U1)] ref bool pbAchieved,
          out uint punUnlockTime);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamUserStats_StoreStats(IntPtr ISteamUserStats);

        [DllImport("libsteam_api.so")]
        internal static extern int SteamAPI_ISteamUserStats_GetAchievementIcon(
          IntPtr ISteamUserStats,
          string pchName);

        [DllImport("libsteam_api.so")]
        internal static extern IntPtr SteamAPI_ISteamUserStats_GetAchievementDisplayAttribute(
          IntPtr ISteamUserStats,
          string pchName,
          string pchKey);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamUserStats_IndicateAchievementProgress(
          IntPtr ISteamUserStats,
          string pchName,
          uint nCurProgress,
          uint nMaxProgress);

        [DllImport("libsteam_api.so")]
        internal static extern uint SteamAPI_ISteamUserStats_GetNumAchievements(
          IntPtr ISteamUserStats);

        [DllImport("libsteam_api.so")]
        internal static extern IntPtr SteamAPI_ISteamUserStats_GetAchievementName(
          IntPtr ISteamUserStats,
          uint iAchievement);

        [DllImport("libsteam_api.so")]
        internal static extern SteamAPICall_t SteamAPI_ISteamUserStats_RequestUserStats(
          IntPtr ISteamUserStats,
          ulong steamIDUser);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamUserStats_GetUserStat(
          IntPtr ISteamUserStats,
          ulong steamIDUser,
          string pchName,
          out int pData);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamUserStats_GetUserStat0(
          IntPtr ISteamUserStats,
          ulong steamIDUser,
          string pchName,
          out float pData);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamUserStats_GetUserAchievement(
          IntPtr ISteamUserStats,
          ulong steamIDUser,
          string pchName,
          [MarshalAs(UnmanagedType.U1)] ref bool pbAchieved);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamUserStats_GetUserAchievementAndUnlockTime(
          IntPtr ISteamUserStats,
          ulong steamIDUser,
          string pchName,
          [MarshalAs(UnmanagedType.U1)] ref bool pbAchieved,
          out uint punUnlockTime);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamUserStats_ResetAllStats(
          IntPtr ISteamUserStats,
          [MarshalAs(UnmanagedType.U1)] bool bAchievementsToo);

        [DllImport("libsteam_api.so")]
        internal static extern SteamAPICall_t SteamAPI_ISteamUserStats_FindOrCreateLeaderboard(
          IntPtr ISteamUserStats,
          string pchLeaderboardName,
          LeaderboardSortMethod eLeaderboardSortMethod,
          LeaderboardDisplayType eLeaderboardDisplayType);

        [DllImport("libsteam_api.so")]
        internal static extern SteamAPICall_t SteamAPI_ISteamUserStats_FindLeaderboard(
          IntPtr ISteamUserStats,
          string pchLeaderboardName);

        [DllImport("libsteam_api.so")]
        internal static extern IntPtr SteamAPI_ISteamUserStats_GetLeaderboardName(
          IntPtr ISteamUserStats,
          ulong hSteamLeaderboard);

        [DllImport("libsteam_api.so")]
        internal static extern int SteamAPI_ISteamUserStats_GetLeaderboardEntryCount(
          IntPtr ISteamUserStats,
          ulong hSteamLeaderboard);

        [DllImport("libsteam_api.so")]
        internal static extern LeaderboardSortMethod SteamAPI_ISteamUserStats_GetLeaderboardSortMethod(
          IntPtr ISteamUserStats,
          ulong hSteamLeaderboard);

        [DllImport("libsteam_api.so")]
        internal static extern LeaderboardDisplayType SteamAPI_ISteamUserStats_GetLeaderboardDisplayType(
          IntPtr ISteamUserStats,
          ulong hSteamLeaderboard);

        [DllImport("libsteam_api.so")]
        internal static extern SteamAPICall_t SteamAPI_ISteamUserStats_DownloadLeaderboardEntries(
          IntPtr ISteamUserStats,
          ulong hSteamLeaderboard,
          LeaderboardDataRequest eLeaderboardDataRequest,
          int nRangeStart,
          int nRangeEnd);

        [DllImport("libsteam_api.so")]
        internal static extern SteamAPICall_t SteamAPI_ISteamUserStats_DownloadLeaderboardEntriesForUsers(
          IntPtr ISteamUserStats,
          ulong hSteamLeaderboard,
          IntPtr prgUsers,
          int cUsers);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamUserStats_GetDownloadedLeaderboardEntry(
          IntPtr ISteamUserStats,
          ulong hSteamLeaderboardEntries,
          int index,
          ref LeaderboardEntry_t.PackSmall pLeaderboardEntry,
          IntPtr pDetails,
          int cDetailsMax);

        [DllImport("libsteam_api.so")]
        internal static extern SteamAPICall_t SteamAPI_ISteamUserStats_UploadLeaderboardScore(
          IntPtr ISteamUserStats,
          ulong hSteamLeaderboard,
          LeaderboardUploadScoreMethod eLeaderboardUploadScoreMethod,
          int nScore,
          int[] pScoreDetails,
          int cScoreDetailsCount);

        [DllImport("libsteam_api.so")]
        internal static extern SteamAPICall_t SteamAPI_ISteamUserStats_AttachLeaderboardUGC(
          IntPtr ISteamUserStats,
          ulong hSteamLeaderboard,
          ulong hUGC);

        [DllImport("libsteam_api.so")]
        internal static extern SteamAPICall_t SteamAPI_ISteamUserStats_GetNumberOfCurrentPlayers(
          IntPtr ISteamUserStats);

        [DllImport("libsteam_api.so")]
        internal static extern SteamAPICall_t SteamAPI_ISteamUserStats_RequestGlobalAchievementPercentages(
          IntPtr ISteamUserStats);

        [DllImport("libsteam_api.so")]
        internal static extern int SteamAPI_ISteamUserStats_GetMostAchievedAchievementInfo(
          IntPtr ISteamUserStats,
          StringBuilder pchName,
          uint unNameBufLen,
          out float pflPercent,
          [MarshalAs(UnmanagedType.U1)] ref bool pbAchieved);

        [DllImport("libsteam_api.so")]
        internal static extern int SteamAPI_ISteamUserStats_GetNextMostAchievedAchievementInfo(
          IntPtr ISteamUserStats,
          int iIteratorPrevious,
          StringBuilder pchName,
          uint unNameBufLen,
          out float pflPercent,
          [MarshalAs(UnmanagedType.U1)] ref bool pbAchieved);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamUserStats_GetAchievementAchievedPercent(
          IntPtr ISteamUserStats,
          string pchName,
          out float pflPercent);

        [DllImport("libsteam_api.so")]
        internal static extern SteamAPICall_t SteamAPI_ISteamUserStats_RequestGlobalStats(
          IntPtr ISteamUserStats,
          int nHistoryDays);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamUserStats_GetGlobalStat(
          IntPtr ISteamUserStats,
          string pchStatName,
          out long pData);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamUserStats_GetGlobalStat0(
          IntPtr ISteamUserStats,
          string pchStatName,
          out double pData);

        [DllImport("libsteam_api.so")]
        internal static extern int SteamAPI_ISteamUserStats_GetGlobalStatHistory(
          IntPtr ISteamUserStats,
          string pchStatName,
          out long pData,
          uint cubData);

        [DllImport("libsteam_api.so")]
        internal static extern int SteamAPI_ISteamUserStats_GetGlobalStatHistory0(
          IntPtr ISteamUserStats,
          string pchStatName,
          out double pData,
          uint cubData);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamApps_BIsSubscribed(IntPtr ISteamApps);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamApps_BIsLowViolence(IntPtr ISteamApps);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamApps_BIsCybercafe(IntPtr ISteamApps);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamApps_BIsVACBanned(IntPtr ISteamApps);

        [DllImport("libsteam_api.so")]
        internal static extern IntPtr SteamAPI_ISteamApps_GetCurrentGameLanguage(IntPtr ISteamApps);

        [DllImport("libsteam_api.so")]
        internal static extern IntPtr SteamAPI_ISteamApps_GetAvailableGameLanguages(
          IntPtr ISteamApps);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamApps_BIsSubscribedApp(
          IntPtr ISteamApps,
          uint appID);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamApps_BIsDlcInstalled(
          IntPtr ISteamApps,
          uint appID);

        [DllImport("libsteam_api.so")]
        internal static extern uint SteamAPI_ISteamApps_GetEarliestPurchaseUnixTime(
          IntPtr ISteamApps,
          uint nAppID);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamApps_BIsSubscribedFromFreeWeekend(
          IntPtr ISteamApps);

        [DllImport("libsteam_api.so")]
        internal static extern int SteamAPI_ISteamApps_GetDLCCount(IntPtr ISteamApps);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamApps_BGetDLCDataByIndex(
          IntPtr ISteamApps,
          int iDLC,
          ref uint pAppID,
          [MarshalAs(UnmanagedType.U1)] ref bool pbAvailable,
          StringBuilder pchName,
          int cchNameBufferSize);

        [DllImport("libsteam_api.so")]
        internal static extern void SteamAPI_ISteamApps_InstallDLC(IntPtr ISteamApps, uint nAppID);

        [DllImport("libsteam_api.so")]
        internal static extern void SteamAPI_ISteamApps_UninstallDLC(IntPtr ISteamApps, uint nAppID);

        [DllImport("libsteam_api.so")]
        internal static extern void SteamAPI_ISteamApps_RequestAppProofOfPurchaseKey(
          IntPtr ISteamApps,
          uint nAppID);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamApps_GetCurrentBetaName(
          IntPtr ISteamApps,
          StringBuilder pchName,
          int cchNameBufferSize);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamApps_MarkContentCorrupt(
          IntPtr ISteamApps,
          [MarshalAs(UnmanagedType.U1)] bool bMissingFilesOnly);

        [DllImport("libsteam_api.so")]
        internal static extern uint SteamAPI_ISteamApps_GetInstalledDepots(
          IntPtr ISteamApps,
          uint appID,
          IntPtr pvecDepots,
          uint cMaxDepots);

        [DllImport("libsteam_api.so")]
        internal static extern uint SteamAPI_ISteamApps_GetAppInstallDir(
          IntPtr ISteamApps,
          uint appID,
          StringBuilder pchFolder,
          uint cchFolderBufferSize);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamApps_BIsAppInstalled(
          IntPtr ISteamApps,
          uint appID);

        [DllImport("libsteam_api.so")]
        internal static extern CSteamID SteamAPI_ISteamApps_GetAppOwner(IntPtr ISteamApps);

        [DllImport("libsteam_api.so")]
        internal static extern IntPtr SteamAPI_ISteamApps_GetLaunchQueryParam(
          IntPtr ISteamApps,
          string pchKey);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamApps_GetDlcDownloadProgress(
          IntPtr ISteamApps,
          uint nAppID,
          out ulong punBytesDownloaded,
          out ulong punBytesTotal);

        [DllImport("libsteam_api.so")]
        internal static extern int SteamAPI_ISteamApps_GetAppBuildId(IntPtr ISteamApps);

        [DllImport("libsteam_api.so")]
        internal static extern void SteamAPI_ISteamApps_RequestAllProofOfPurchaseKeys(
          IntPtr ISteamApps);

        [DllImport("libsteam_api.so")]
        internal static extern SteamAPICall_t SteamAPI_ISteamApps_GetFileDetails(
          IntPtr ISteamApps,
          string pszFileName);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamNetworking_SendP2PPacket(
          IntPtr ISteamNetworking,
          ulong steamIDRemote,
          IntPtr pubData,
          uint cubData,
          P2PSend eP2PSendType,
          int nChannel);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamNetworking_IsP2PPacketAvailable(
          IntPtr ISteamNetworking,
          out uint pcubMsgSize,
          int nChannel);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamNetworking_ReadP2PPacket(
          IntPtr ISteamNetworking,
          IntPtr pubDest,
          uint cubDest,
          out uint pcubMsgSize,
          out ulong psteamIDRemote,
          int nChannel);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamNetworking_AcceptP2PSessionWithUser(
          IntPtr ISteamNetworking,
          ulong steamIDRemote);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamNetworking_CloseP2PSessionWithUser(
          IntPtr ISteamNetworking,
          ulong steamIDRemote);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamNetworking_CloseP2PChannelWithUser(
          IntPtr ISteamNetworking,
          ulong steamIDRemote,
          int nChannel);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamNetworking_GetP2PSessionState(
          IntPtr ISteamNetworking,
          ulong steamIDRemote,
          ref P2PSessionState_t.PackSmall pConnectionState);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamNetworking_AllowP2PPacketRelay(
          IntPtr ISteamNetworking,
          [MarshalAs(UnmanagedType.U1)] bool bAllow);

        [DllImport("libsteam_api.so")]
        internal static extern SNetListenSocket_t SteamAPI_ISteamNetworking_CreateListenSocket(
          IntPtr ISteamNetworking,
          int nVirtualP2PPort,
          uint nIP,
          ushort nPort,
          [MarshalAs(UnmanagedType.U1)] bool bAllowUseOfPacketRelay);

        [DllImport("libsteam_api.so")]
        internal static extern SNetSocket_t SteamAPI_ISteamNetworking_CreateP2PConnectionSocket(
          IntPtr ISteamNetworking,
          ulong steamIDTarget,
          int nVirtualPort,
          int nTimeoutSec,
          [MarshalAs(UnmanagedType.U1)] bool bAllowUseOfPacketRelay);

        [DllImport("libsteam_api.so")]
        internal static extern SNetSocket_t SteamAPI_ISteamNetworking_CreateConnectionSocket(
          IntPtr ISteamNetworking,
          uint nIP,
          ushort nPort,
          int nTimeoutSec);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamNetworking_DestroySocket(
          IntPtr ISteamNetworking,
          uint hSocket,
          [MarshalAs(UnmanagedType.U1)] bool bNotifyRemoteEnd);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamNetworking_DestroyListenSocket(
          IntPtr ISteamNetworking,
          uint hSocket,
          [MarshalAs(UnmanagedType.U1)] bool bNotifyRemoteEnd);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamNetworking_SendDataOnSocket(
          IntPtr ISteamNetworking,
          uint hSocket,
          IntPtr pubData,
          uint cubData,
          [MarshalAs(UnmanagedType.U1)] bool bReliable);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamNetworking_IsDataAvailableOnSocket(
          IntPtr ISteamNetworking,
          uint hSocket,
          out uint pcubMsgSize);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamNetworking_RetrieveDataFromSocket(
          IntPtr ISteamNetworking,
          uint hSocket,
          IntPtr pubDest,
          uint cubDest,
          out uint pcubMsgSize);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamNetworking_IsDataAvailable(
          IntPtr ISteamNetworking,
          uint hListenSocket,
          out uint pcubMsgSize,
          ref uint phSocket);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamNetworking_RetrieveData(
          IntPtr ISteamNetworking,
          uint hListenSocket,
          IntPtr pubDest,
          uint cubDest,
          out uint pcubMsgSize,
          ref uint phSocket);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamNetworking_GetSocketInfo(
          IntPtr ISteamNetworking,
          uint hSocket,
          out ulong pSteamIDRemote,
          IntPtr peSocketStatus,
          out uint punIPRemote,
          out ushort punPortRemote);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamNetworking_GetListenSocketInfo(
          IntPtr ISteamNetworking,
          uint hListenSocket,
          out uint pnIP,
          out ushort pnPort);

        [DllImport("libsteam_api.so")]
        internal static extern SNetSocketConnectionType SteamAPI_ISteamNetworking_GetSocketConnectionType(
          IntPtr ISteamNetworking,
          uint hSocket);

        [DllImport("libsteam_api.so")]
        internal static extern int SteamAPI_ISteamNetworking_GetMaxPacketSize(
          IntPtr ISteamNetworking,
          uint hSocket);

        [DllImport("libsteam_api.so")]
        internal static extern ScreenshotHandle SteamAPI_ISteamScreenshots_WriteScreenshot(
          IntPtr ISteamScreenshots,
          IntPtr pubRGB,
          uint cubRGB,
          int nWidth,
          int nHeight);

        [DllImport("libsteam_api.so")]
        internal static extern ScreenshotHandle SteamAPI_ISteamScreenshots_AddScreenshotToLibrary(
          IntPtr ISteamScreenshots,
          string pchFilename,
          string pchThumbnailFilename,
          int nWidth,
          int nHeight);

        [DllImport("libsteam_api.so")]
        internal static extern void SteamAPI_ISteamScreenshots_TriggerScreenshot(
          IntPtr ISteamScreenshots);

        [DllImport("libsteam_api.so")]
        internal static extern void SteamAPI_ISteamScreenshots_HookScreenshots(
          IntPtr ISteamScreenshots,
          [MarshalAs(UnmanagedType.U1)] bool bHook);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamScreenshots_SetLocation(
          IntPtr ISteamScreenshots,
          uint hScreenshot,
          string pchLocation);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamScreenshots_TagUser(
          IntPtr ISteamScreenshots,
          uint hScreenshot,
          ulong steamID);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamScreenshots_TagPublishedFile(
          IntPtr ISteamScreenshots,
          uint hScreenshot,
          ulong unPublishedFileID);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamScreenshots_IsScreenshotsHooked(
          IntPtr ISteamScreenshots);

        [DllImport("libsteam_api.so")]
        internal static extern ScreenshotHandle SteamAPI_ISteamScreenshots_AddVRScreenshotToLibrary(
          IntPtr ISteamScreenshots,
          VRScreenshotType eType,
          string pchFilename,
          string pchVRFilename);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamMusic_BIsEnabled(IntPtr ISteamMusic);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamMusic_BIsPlaying(IntPtr ISteamMusic);

        [DllImport("libsteam_api.so")]
        internal static extern AudioPlayback_Status SteamAPI_ISteamMusic_GetPlaybackStatus(
          IntPtr ISteamMusic);

        [DllImport("libsteam_api.so")]
        internal static extern void SteamAPI_ISteamMusic_Play(IntPtr ISteamMusic);

        [DllImport("libsteam_api.so")]
        internal static extern void SteamAPI_ISteamMusic_Pause(IntPtr ISteamMusic);

        [DllImport("libsteam_api.so")]
        internal static extern void SteamAPI_ISteamMusic_PlayPrevious(IntPtr ISteamMusic);

        [DllImport("libsteam_api.so")]
        internal static extern void SteamAPI_ISteamMusic_PlayNext(IntPtr ISteamMusic);

        [DllImport("libsteam_api.so")]
        internal static extern void SteamAPI_ISteamMusic_SetVolume(
          IntPtr ISteamMusic,
          float flVolume);

        [DllImport("libsteam_api.so")]
        internal static extern float SteamAPI_ISteamMusic_GetVolume(IntPtr ISteamMusic);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamMusicRemote_RegisterSteamMusicRemote(
          IntPtr ISteamMusicRemote,
          string pchName);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamMusicRemote_DeregisterSteamMusicRemote(
          IntPtr ISteamMusicRemote);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamMusicRemote_BIsCurrentMusicRemote(
          IntPtr ISteamMusicRemote);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamMusicRemote_BActivationSuccess(
          IntPtr ISteamMusicRemote,
          [MarshalAs(UnmanagedType.U1)] bool bValue);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamMusicRemote_SetDisplayName(
          IntPtr ISteamMusicRemote,
          string pchDisplayName);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamMusicRemote_SetPNGIcon_64x64(
          IntPtr ISteamMusicRemote,
          IntPtr pvBuffer,
          uint cbBufferLength);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamMusicRemote_EnablePlayPrevious(
          IntPtr ISteamMusicRemote,
          [MarshalAs(UnmanagedType.U1)] bool bValue);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamMusicRemote_EnablePlayNext(
          IntPtr ISteamMusicRemote,
          [MarshalAs(UnmanagedType.U1)] bool bValue);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamMusicRemote_EnableShuffled(
          IntPtr ISteamMusicRemote,
          [MarshalAs(UnmanagedType.U1)] bool bValue);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamMusicRemote_EnableLooped(
          IntPtr ISteamMusicRemote,
          [MarshalAs(UnmanagedType.U1)] bool bValue);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamMusicRemote_EnableQueue(
          IntPtr ISteamMusicRemote,
          [MarshalAs(UnmanagedType.U1)] bool bValue);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamMusicRemote_EnablePlaylists(
          IntPtr ISteamMusicRemote,
          [MarshalAs(UnmanagedType.U1)] bool bValue);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamMusicRemote_UpdatePlaybackStatus(
          IntPtr ISteamMusicRemote,
          AudioPlayback_Status nStatus);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamMusicRemote_UpdateShuffled(
          IntPtr ISteamMusicRemote,
          [MarshalAs(UnmanagedType.U1)] bool bValue);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamMusicRemote_UpdateLooped(
          IntPtr ISteamMusicRemote,
          [MarshalAs(UnmanagedType.U1)] bool bValue);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamMusicRemote_UpdateVolume(
          IntPtr ISteamMusicRemote,
          float flValue);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamMusicRemote_CurrentEntryWillChange(
          IntPtr ISteamMusicRemote);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamMusicRemote_CurrentEntryIsAvailable(
          IntPtr ISteamMusicRemote,
          [MarshalAs(UnmanagedType.U1)] bool bAvailable);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamMusicRemote_UpdateCurrentEntryText(
          IntPtr ISteamMusicRemote,
          string pchText);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamMusicRemote_UpdateCurrentEntryElapsedSeconds(
          IntPtr ISteamMusicRemote,
          int nValue);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamMusicRemote_UpdateCurrentEntryCoverArt(
          IntPtr ISteamMusicRemote,
          IntPtr pvBuffer,
          uint cbBufferLength);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamMusicRemote_CurrentEntryDidChange(
          IntPtr ISteamMusicRemote);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamMusicRemote_QueueWillChange(
          IntPtr ISteamMusicRemote);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamMusicRemote_ResetQueueEntries(
          IntPtr ISteamMusicRemote);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamMusicRemote_SetQueueEntry(
          IntPtr ISteamMusicRemote,
          int nID,
          int nPosition,
          string pchEntryText);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamMusicRemote_SetCurrentQueueEntry(
          IntPtr ISteamMusicRemote,
          int nID);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamMusicRemote_QueueDidChange(
          IntPtr ISteamMusicRemote);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamMusicRemote_PlaylistWillChange(
          IntPtr ISteamMusicRemote);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamMusicRemote_ResetPlaylistEntries(
          IntPtr ISteamMusicRemote);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamMusicRemote_SetPlaylistEntry(
          IntPtr ISteamMusicRemote,
          int nID,
          int nPosition,
          string pchEntryText);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamMusicRemote_SetCurrentPlaylistEntry(
          IntPtr ISteamMusicRemote,
          int nID);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamMusicRemote_PlaylistDidChange(
          IntPtr ISteamMusicRemote);

        [DllImport("libsteam_api.so")]
        internal static extern HTTPRequestHandle SteamAPI_ISteamHTTP_CreateHTTPRequest(
          IntPtr ISteamHTTP,
          HTTPMethod eHTTPRequestMethod,
          string pchAbsoluteURL);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamHTTP_SetHTTPRequestContextValue(
          IntPtr ISteamHTTP,
          uint hRequest,
          ulong ulContextValue);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamHTTP_SetHTTPRequestNetworkActivityTimeout(
          IntPtr ISteamHTTP,
          uint hRequest,
          uint unTimeoutSeconds);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamHTTP_SetHTTPRequestHeaderValue(
          IntPtr ISteamHTTP,
          uint hRequest,
          string pchHeaderName,
          string pchHeaderValue);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamHTTP_SetHTTPRequestGetOrPostParameter(
          IntPtr ISteamHTTP,
          uint hRequest,
          string pchParamName,
          string pchParamValue);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamHTTP_SendHTTPRequest(
          IntPtr ISteamHTTP,
          uint hRequest,
          ref ulong pCallHandle);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamHTTP_SendHTTPRequestAndStreamResponse(
          IntPtr ISteamHTTP,
          uint hRequest,
          ref ulong pCallHandle);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamHTTP_DeferHTTPRequest(
          IntPtr ISteamHTTP,
          uint hRequest);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamHTTP_PrioritizeHTTPRequest(
          IntPtr ISteamHTTP,
          uint hRequest);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamHTTP_GetHTTPResponseHeaderSize(
          IntPtr ISteamHTTP,
          uint hRequest,
          string pchHeaderName,
          out uint unResponseHeaderSize);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamHTTP_GetHTTPResponseHeaderValue(
          IntPtr ISteamHTTP,
          uint hRequest,
          string pchHeaderName,
          out byte pHeaderValueBuffer,
          uint unBufferSize);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamHTTP_GetHTTPResponseBodySize(
          IntPtr ISteamHTTP,
          uint hRequest,
          out uint unBodySize);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamHTTP_GetHTTPResponseBodyData(
          IntPtr ISteamHTTP,
          uint hRequest,
          out byte pBodyDataBuffer,
          uint unBufferSize);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamHTTP_GetHTTPStreamingResponseBodyData(
          IntPtr ISteamHTTP,
          uint hRequest,
          uint cOffset,
          out byte pBodyDataBuffer,
          uint unBufferSize);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamHTTP_ReleaseHTTPRequest(
          IntPtr ISteamHTTP,
          uint hRequest);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamHTTP_GetHTTPDownloadProgressPct(
          IntPtr ISteamHTTP,
          uint hRequest,
          out float pflPercentOut);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamHTTP_SetHTTPRequestRawPostBody(
          IntPtr ISteamHTTP,
          uint hRequest,
          string pchContentType,
          out byte pubBody,
          uint unBodyLen);

        [DllImport("libsteam_api.so")]
        internal static extern HTTPCookieContainerHandle SteamAPI_ISteamHTTP_CreateCookieContainer(
          IntPtr ISteamHTTP,
          [MarshalAs(UnmanagedType.U1)] bool bAllowResponsesToModify);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamHTTP_ReleaseCookieContainer(
          IntPtr ISteamHTTP,
          uint hCookieContainer);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamHTTP_SetCookie(
          IntPtr ISteamHTTP,
          uint hCookieContainer,
          string pchHost,
          string pchUrl,
          string pchCookie);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamHTTP_SetHTTPRequestCookieContainer(
          IntPtr ISteamHTTP,
          uint hRequest,
          uint hCookieContainer);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamHTTP_SetHTTPRequestUserAgentInfo(
          IntPtr ISteamHTTP,
          uint hRequest,
          string pchUserAgentInfo);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamHTTP_SetHTTPRequestRequiresVerifiedCertificate(
          IntPtr ISteamHTTP,
          uint hRequest,
          [MarshalAs(UnmanagedType.U1)] bool bRequireVerifiedCertificate);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamHTTP_SetHTTPRequestAbsoluteTimeoutMS(
          IntPtr ISteamHTTP,
          uint hRequest,
          uint unMilliseconds);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamHTTP_GetHTTPRequestWasTimedOut(
          IntPtr ISteamHTTP,
          uint hRequest,
          [MarshalAs(UnmanagedType.U1)] ref bool pbWasTimedOut);

        [DllImport("libsteam_api.so")]
        internal static extern ClientUnifiedMessageHandle SteamAPI_ISteamUnifiedMessages_SendMethod(
          IntPtr ISteamUnifiedMessages,
          string pchServiceMethod,
          IntPtr pRequestBuffer,
          uint unRequestBufferSize,
          ulong unContext);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamUnifiedMessages_GetMethodResponseInfo(
          IntPtr ISteamUnifiedMessages,
          ulong hHandle,
          out uint punResponseSize,
          out Result peResult);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamUnifiedMessages_GetMethodResponseData(
          IntPtr ISteamUnifiedMessages,
          ulong hHandle,
          IntPtr pResponseBuffer,
          uint unResponseBufferSize,
          [MarshalAs(UnmanagedType.U1)] bool bAutoRelease);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamUnifiedMessages_ReleaseMethod(
          IntPtr ISteamUnifiedMessages,
          ulong hHandle);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamUnifiedMessages_SendNotification(
          IntPtr ISteamUnifiedMessages,
          string pchServiceNotification,
          IntPtr pNotificationBuffer,
          uint unNotificationBufferSize);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamController_Init(IntPtr ISteamController);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamController_Shutdown(IntPtr ISteamController);

        [DllImport("libsteam_api.so")]
        internal static extern void SteamAPI_ISteamController_RunFrame(IntPtr ISteamController);

        [DllImport("libsteam_api.so")]
        internal static extern int SteamAPI_ISteamController_GetConnectedControllers(
          IntPtr ISteamController,
          IntPtr handlesOut);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamController_ShowBindingPanel(
          IntPtr ISteamController,
          ulong controllerHandle);

        [DllImport("libsteam_api.so")]
        internal static extern ControllerActionSetHandle_t SteamAPI_ISteamController_GetActionSetHandle(
          IntPtr ISteamController,
          string pszActionSetName);

        [DllImport("libsteam_api.so")]
        internal static extern void SteamAPI_ISteamController_ActivateActionSet(
          IntPtr ISteamController,
          ulong controllerHandle,
          ulong actionSetHandle);

        [DllImport("libsteam_api.so")]
        internal static extern ControllerActionSetHandle_t SteamAPI_ISteamController_GetCurrentActionSet(
          IntPtr ISteamController,
          ulong controllerHandle);

        [DllImport("libsteam_api.so")]
        internal static extern ControllerDigitalActionHandle_t SteamAPI_ISteamController_GetDigitalActionHandle(
          IntPtr ISteamController,
          string pszActionName);

        [DllImport("libsteam_api.so")]
        internal static extern ControllerDigitalActionData_t SteamAPI_ISteamController_GetDigitalActionData(
          IntPtr ISteamController,
          ulong controllerHandle,
          ulong digitalActionHandle);

        [DllImport("libsteam_api.so")]
        internal static extern int SteamAPI_ISteamController_GetDigitalActionOrigins(
          IntPtr ISteamController,
          ulong controllerHandle,
          ulong actionSetHandle,
          ulong digitalActionHandle,
          out ControllerActionOrigin originsOut);

        [DllImport("libsteam_api.so")]
        internal static extern ControllerAnalogActionHandle_t SteamAPI_ISteamController_GetAnalogActionHandle(
          IntPtr ISteamController,
          string pszActionName);

        [DllImport("libsteam_api.so")]
        internal static extern ControllerAnalogActionData_t SteamAPI_ISteamController_GetAnalogActionData(
          IntPtr ISteamController,
          ulong controllerHandle,
          ulong analogActionHandle);

        [DllImport("libsteam_api.so")]
        internal static extern int SteamAPI_ISteamController_GetAnalogActionOrigins(
          IntPtr ISteamController,
          ulong controllerHandle,
          ulong actionSetHandle,
          ulong analogActionHandle,
          out ControllerActionOrigin originsOut);

        [DllImport("libsteam_api.so")]
        internal static extern void SteamAPI_ISteamController_StopAnalogActionMomentum(
          IntPtr ISteamController,
          ulong controllerHandle,
          ulong eAction);

        [DllImport("libsteam_api.so")]
        internal static extern void SteamAPI_ISteamController_TriggerHapticPulse(
          IntPtr ISteamController,
          ulong controllerHandle,
          SteamControllerPad eTargetPad,
          ushort usDurationMicroSec);

        [DllImport("libsteam_api.so")]
        internal static extern void SteamAPI_ISteamController_TriggerRepeatedHapticPulse(
          IntPtr ISteamController,
          ulong controllerHandle,
          SteamControllerPad eTargetPad,
          ushort usDurationMicroSec,
          ushort usOffMicroSec,
          ushort unRepeat,
          uint nFlags);

        [DllImport("libsteam_api.so")]
        internal static extern void SteamAPI_ISteamController_TriggerVibration(
          IntPtr ISteamController,
          ulong controllerHandle,
          ushort usLeftSpeed,
          ushort usRightSpeed);

        [DllImport("libsteam_api.so")]
        internal static extern void SteamAPI_ISteamController_SetLEDColor(
          IntPtr ISteamController,
          ulong controllerHandle,
          byte nColorR,
          byte nColorG,
          byte nColorB,
          uint nFlags);

        [DllImport("libsteam_api.so")]
        internal static extern int SteamAPI_ISteamController_GetGamepadIndexForController(
          IntPtr ISteamController,
          ulong ulControllerHandle);

        [DllImport("libsteam_api.so")]
        internal static extern ControllerHandle_t SteamAPI_ISteamController_GetControllerForGamepadIndex(
          IntPtr ISteamController,
          int nIndex);

        [DllImport("libsteam_api.so")]
        internal static extern ControllerMotionData_t SteamAPI_ISteamController_GetMotionData(
          IntPtr ISteamController,
          ulong controllerHandle);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamController_ShowDigitalActionOrigins(
          IntPtr ISteamController,
          ulong controllerHandle,
          ulong digitalActionHandle,
          float flScale,
          float flXPosition,
          float flYPosition);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamController_ShowAnalogActionOrigins(
          IntPtr ISteamController,
          ulong controllerHandle,
          ulong analogActionHandle,
          float flScale,
          float flXPosition,
          float flYPosition);

        [DllImport("libsteam_api.so")]
        internal static extern IntPtr SteamAPI_ISteamController_GetStringForActionOrigin(
          IntPtr ISteamController,
          ControllerActionOrigin eOrigin);

        [DllImport("libsteam_api.so")]
        internal static extern IntPtr SteamAPI_ISteamController_GetGlyphForActionOrigin(
          IntPtr ISteamController,
          ControllerActionOrigin eOrigin);

        [DllImport("libsteam_api.so")]
        internal static extern UGCQueryHandle_t SteamAPI_ISteamUGC_CreateQueryUserUGCRequest(
          IntPtr ISteamUGC,
          uint unAccountID,
          UserUGCList eListType,
          UGCMatchingUGCType eMatchingUGCType,
          UserUGCListSortOrder eSortOrder,
          uint nCreatorAppID,
          uint nConsumerAppID,
          uint unPage);

        [DllImport("libsteam_api.so")]
        internal static extern UGCQueryHandle_t SteamAPI_ISteamUGC_CreateQueryAllUGCRequest(
          IntPtr ISteamUGC,
          UGCQuery eQueryType,
          UGCMatchingUGCType eMatchingeMatchingUGCTypeFileType,
          uint nCreatorAppID,
          uint nConsumerAppID,
          uint unPage);

        [DllImport("libsteam_api.so")]
        internal static extern UGCQueryHandle_t SteamAPI_ISteamUGC_CreateQueryUGCDetailsRequest(
          IntPtr ISteamUGC,
          IntPtr pvecPublishedFileID,
          uint unNumPublishedFileIDs);

        [DllImport("libsteam_api.so")]
        internal static extern SteamAPICall_t SteamAPI_ISteamUGC_SendQueryUGCRequest(
          IntPtr ISteamUGC,
          ulong handle);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamUGC_GetQueryUGCResult(
          IntPtr ISteamUGC,
          ulong handle,
          uint index,
          ref SteamUGCDetails_t.PackSmall pDetails);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamUGC_GetQueryUGCPreviewURL(
          IntPtr ISteamUGC,
          ulong handle,
          uint index,
          StringBuilder pchURL,
          uint cchURLSize);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamUGC_GetQueryUGCMetadata(
          IntPtr ISteamUGC,
          ulong handle,
          uint index,
          StringBuilder pchMetadata,
          uint cchMetadatasize);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamUGC_GetQueryUGCChildren(
          IntPtr ISteamUGC,
          ulong handle,
          uint index,
          IntPtr pvecPublishedFileID,
          uint cMaxEntries);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamUGC_GetQueryUGCStatistic(
          IntPtr ISteamUGC,
          ulong handle,
          uint index,
          ItemStatistic eStatType,
          out ulong pStatValue);

        [DllImport("libsteam_api.so")]
        internal static extern uint SteamAPI_ISteamUGC_GetQueryUGCNumAdditionalPreviews(
          IntPtr ISteamUGC,
          ulong handle,
          uint index);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamUGC_GetQueryUGCAdditionalPreview(
          IntPtr ISteamUGC,
          ulong handle,
          uint index,
          uint previewIndex,
          StringBuilder pchURLOrVideoID,
          uint cchURLSize,
          StringBuilder pchOriginalFileName,
          uint cchOriginalFileNameSize,
          out ItemPreviewType pPreviewType);

        [DllImport("libsteam_api.so")]
        internal static extern uint SteamAPI_ISteamUGC_GetQueryUGCNumKeyValueTags(
          IntPtr ISteamUGC,
          ulong handle,
          uint index);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamUGC_GetQueryUGCKeyValueTag(
          IntPtr ISteamUGC,
          ulong handle,
          uint index,
          uint keyValueTagIndex,
          StringBuilder pchKey,
          uint cchKeySize,
          StringBuilder pchValue,
          uint cchValueSize);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamUGC_ReleaseQueryUGCRequest(
          IntPtr ISteamUGC,
          ulong handle);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamUGC_AddRequiredTag(
          IntPtr ISteamUGC,
          ulong handle,
          string pTagName);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamUGC_AddExcludedTag(
          IntPtr ISteamUGC,
          ulong handle,
          string pTagName);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamUGC_SetReturnOnlyIDs(
          IntPtr ISteamUGC,
          ulong handle,
          [MarshalAs(UnmanagedType.U1)] bool bReturnOnlyIDs);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamUGC_SetReturnKeyValueTags(
          IntPtr ISteamUGC,
          ulong handle,
          [MarshalAs(UnmanagedType.U1)] bool bReturnKeyValueTags);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamUGC_SetReturnLongDescription(
          IntPtr ISteamUGC,
          ulong handle,
          [MarshalAs(UnmanagedType.U1)] bool bReturnLongDescription);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamUGC_SetReturnMetadata(
          IntPtr ISteamUGC,
          ulong handle,
          [MarshalAs(UnmanagedType.U1)] bool bReturnMetadata);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamUGC_SetReturnChildren(
          IntPtr ISteamUGC,
          ulong handle,
          [MarshalAs(UnmanagedType.U1)] bool bReturnChildren);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamUGC_SetReturnAdditionalPreviews(
          IntPtr ISteamUGC,
          ulong handle,
          [MarshalAs(UnmanagedType.U1)] bool bReturnAdditionalPreviews);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamUGC_SetReturnTotalOnly(
          IntPtr ISteamUGC,
          ulong handle,
          [MarshalAs(UnmanagedType.U1)] bool bReturnTotalOnly);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamUGC_SetReturnPlaytimeStats(
          IntPtr ISteamUGC,
          ulong handle,
          uint unDays);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamUGC_SetLanguage(
          IntPtr ISteamUGC,
          ulong handle,
          string pchLanguage);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamUGC_SetAllowCachedResponse(
          IntPtr ISteamUGC,
          ulong handle,
          uint unMaxAgeSeconds);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamUGC_SetCloudFileNameFilter(
          IntPtr ISteamUGC,
          ulong handle,
          string pMatchCloudFileName);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamUGC_SetMatchAnyTag(
          IntPtr ISteamUGC,
          ulong handle,
          [MarshalAs(UnmanagedType.U1)] bool bMatchAnyTag);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamUGC_SetSearchText(
          IntPtr ISteamUGC,
          ulong handle,
          string pSearchText);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamUGC_SetRankedByTrendDays(
          IntPtr ISteamUGC,
          ulong handle,
          uint unDays);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamUGC_AddRequiredKeyValueTag(
          IntPtr ISteamUGC,
          ulong handle,
          string pKey,
          string pValue);

        [DllImport("libsteam_api.so")]
        internal static extern SteamAPICall_t SteamAPI_ISteamUGC_RequestUGCDetails(
          IntPtr ISteamUGC,
          ulong nPublishedFileID,
          uint unMaxAgeSeconds);

        [DllImport("libsteam_api.so")]
        internal static extern SteamAPICall_t SteamAPI_ISteamUGC_CreateItem(
          IntPtr ISteamUGC,
          uint nConsumerAppId,
          WorkshopFileType eFileType);

        [DllImport("libsteam_api.so")]
        internal static extern UGCUpdateHandle_t SteamAPI_ISteamUGC_StartItemUpdate(
          IntPtr ISteamUGC,
          uint nConsumerAppId,
          ulong nPublishedFileID);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamUGC_SetItemTitle(
          IntPtr ISteamUGC,
          ulong handle,
          string pchTitle);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamUGC_SetItemDescription(
          IntPtr ISteamUGC,
          ulong handle,
          string pchDescription);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamUGC_SetItemUpdateLanguage(
          IntPtr ISteamUGC,
          ulong handle,
          string pchLanguage);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamUGC_SetItemMetadata(
          IntPtr ISteamUGC,
          ulong handle,
          string pchMetaData);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamUGC_SetItemVisibility(
          IntPtr ISteamUGC,
          ulong handle,
          RemoteStoragePublishedFileVisibility eVisibility);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamUGC_SetItemTags(
          IntPtr ISteamUGC,
          ulong updateHandle,
          ref SteamParamStringArray_t.PackSmall pTags);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamUGC_SetItemContent(
          IntPtr ISteamUGC,
          ulong handle,
          string pszContentFolder);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamUGC_SetItemPreview(
          IntPtr ISteamUGC,
          ulong handle,
          string pszPreviewFile);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamUGC_RemoveItemKeyValueTags(
          IntPtr ISteamUGC,
          ulong handle,
          string pchKey);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamUGC_AddItemKeyValueTag(
          IntPtr ISteamUGC,
          ulong handle,
          string pchKey,
          string pchValue);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamUGC_AddItemPreviewFile(
          IntPtr ISteamUGC,
          ulong handle,
          string pszPreviewFile,
          ItemPreviewType type);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamUGC_AddItemPreviewVideo(
          IntPtr ISteamUGC,
          ulong handle,
          string pszVideoID);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamUGC_UpdateItemPreviewFile(
          IntPtr ISteamUGC,
          ulong handle,
          uint index,
          string pszPreviewFile);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamUGC_UpdateItemPreviewVideo(
          IntPtr ISteamUGC,
          ulong handle,
          uint index,
          string pszVideoID);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamUGC_RemoveItemPreview(
          IntPtr ISteamUGC,
          ulong handle,
          uint index);

        [DllImport("libsteam_api.so")]
        internal static extern SteamAPICall_t SteamAPI_ISteamUGC_SubmitItemUpdate(
          IntPtr ISteamUGC,
          ulong handle,
          string pchChangeNote);

        [DllImport("libsteam_api.so")]
        internal static extern ItemUpdateStatus SteamAPI_ISteamUGC_GetItemUpdateProgress(
          IntPtr ISteamUGC,
          ulong handle,
          out ulong punBytesProcessed,
          out ulong punBytesTotal);

        [DllImport("libsteam_api.so")]
        internal static extern SteamAPICall_t SteamAPI_ISteamUGC_SetUserItemVote(
          IntPtr ISteamUGC,
          ulong nPublishedFileID,
          [MarshalAs(UnmanagedType.U1)] bool bVoteUp);

        [DllImport("libsteam_api.so")]
        internal static extern SteamAPICall_t SteamAPI_ISteamUGC_GetUserItemVote(
          IntPtr ISteamUGC,
          ulong nPublishedFileID);

        [DllImport("libsteam_api.so")]
        internal static extern SteamAPICall_t SteamAPI_ISteamUGC_AddItemToFavorites(
          IntPtr ISteamUGC,
          uint nAppId,
          ulong nPublishedFileID);

        [DllImport("libsteam_api.so")]
        internal static extern SteamAPICall_t SteamAPI_ISteamUGC_RemoveItemFromFavorites(
          IntPtr ISteamUGC,
          uint nAppId,
          ulong nPublishedFileID);

        [DllImport("libsteam_api.so")]
        internal static extern SteamAPICall_t SteamAPI_ISteamUGC_SubscribeItem(
          IntPtr ISteamUGC,
          ulong nPublishedFileID);

        [DllImport("libsteam_api.so")]
        internal static extern SteamAPICall_t SteamAPI_ISteamUGC_UnsubscribeItem(
          IntPtr ISteamUGC,
          ulong nPublishedFileID);

        [DllImport("libsteam_api.so")]
        internal static extern uint SteamAPI_ISteamUGC_GetNumSubscribedItems(IntPtr ISteamUGC);

        [DllImport("libsteam_api.so")]
        internal static extern uint SteamAPI_ISteamUGC_GetSubscribedItems(
          IntPtr ISteamUGC,
          IntPtr pvecPublishedFileID,
          uint cMaxEntries);

        [DllImport("libsteam_api.so")]
        internal static extern uint SteamAPI_ISteamUGC_GetItemState(
          IntPtr ISteamUGC,
          ulong nPublishedFileID);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamUGC_GetItemInstallInfo(
          IntPtr ISteamUGC,
          ulong nPublishedFileID,
          out ulong punSizeOnDisk,
          StringBuilder pchFolder,
          uint cchFolderSize,
          out uint punTimeStamp);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamUGC_GetItemDownloadInfo(
          IntPtr ISteamUGC,
          ulong nPublishedFileID,
          out ulong punBytesDownloaded,
          out ulong punBytesTotal);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamUGC_DownloadItem(
          IntPtr ISteamUGC,
          ulong nPublishedFileID,
          [MarshalAs(UnmanagedType.U1)] bool bHighPriority);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamUGC_BInitWorkshopForGameServer(
          IntPtr ISteamUGC,
          uint unWorkshopDepotID,
          string pszFolder);

        [DllImport("libsteam_api.so")]
        internal static extern void SteamAPI_ISteamUGC_SuspendDownloads(
          IntPtr ISteamUGC,
          [MarshalAs(UnmanagedType.U1)] bool bSuspend);

        [DllImport("libsteam_api.so")]
        internal static extern SteamAPICall_t SteamAPI_ISteamUGC_StartPlaytimeTracking(
          IntPtr ISteamUGC,
          IntPtr pvecPublishedFileID,
          uint unNumPublishedFileIDs);

        [DllImport("libsteam_api.so")]
        internal static extern SteamAPICall_t SteamAPI_ISteamUGC_StopPlaytimeTracking(
          IntPtr ISteamUGC,
          IntPtr pvecPublishedFileID,
          uint unNumPublishedFileIDs);

        [DllImport("libsteam_api.so")]
        internal static extern SteamAPICall_t SteamAPI_ISteamUGC_StopPlaytimeTrackingForAllItems(
          IntPtr ISteamUGC);

        [DllImport("libsteam_api.so")]
        internal static extern SteamAPICall_t SteamAPI_ISteamUGC_AddDependency(
          IntPtr ISteamUGC,
          ulong nParentPublishedFileID,
          ulong nChildPublishedFileID);

        [DllImport("libsteam_api.so")]
        internal static extern SteamAPICall_t SteamAPI_ISteamUGC_RemoveDependency(
          IntPtr ISteamUGC,
          ulong nParentPublishedFileID,
          ulong nChildPublishedFileID);

        [DllImport("libsteam_api.so")]
        internal static extern uint SteamAPI_ISteamAppList_GetNumInstalledApps(IntPtr ISteamAppList);

        [DllImport("libsteam_api.so")]
        internal static extern uint SteamAPI_ISteamAppList_GetInstalledApps(
          IntPtr ISteamAppList,
          IntPtr pvecAppID,
          uint unMaxAppIDs);

        [DllImport("libsteam_api.so")]
        internal static extern int SteamAPI_ISteamAppList_GetAppName(
          IntPtr ISteamAppList,
          uint nAppID,
          StringBuilder pchName,
          int cchNameMax);

        [DllImport("libsteam_api.so")]
        internal static extern int SteamAPI_ISteamAppList_GetAppInstallDir(
          IntPtr ISteamAppList,
          uint nAppID,
          StringBuilder pchDirectory,
          int cchNameMax);

        [DllImport("libsteam_api.so")]
        internal static extern int SteamAPI_ISteamAppList_GetAppBuildId(
          IntPtr ISteamAppList,
          uint nAppID);

        [DllImport("libsteam_api.so")]
        internal static extern void SteamAPI_ISteamHTMLSurface_DestructISteamHTMLSurface(
          IntPtr ISteamHTMLSurface);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamHTMLSurface_Init(IntPtr ISteamHTMLSurface);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamHTMLSurface_Shutdown(IntPtr ISteamHTMLSurface);

        [DllImport("libsteam_api.so")]
        internal static extern SteamAPICall_t SteamAPI_ISteamHTMLSurface_CreateBrowser(
          IntPtr ISteamHTMLSurface,
          string pchUserAgent,
          string pchUserCSS);

        [DllImport("libsteam_api.so")]
        internal static extern void SteamAPI_ISteamHTMLSurface_RemoveBrowser(
          IntPtr ISteamHTMLSurface,
          uint unBrowserHandle);

        [DllImport("libsteam_api.so")]
        internal static extern void SteamAPI_ISteamHTMLSurface_LoadURL(
          IntPtr ISteamHTMLSurface,
          uint unBrowserHandle,
          string pchURL,
          string pchPostData);

        [DllImport("libsteam_api.so")]
        internal static extern void SteamAPI_ISteamHTMLSurface_SetSize(
          IntPtr ISteamHTMLSurface,
          uint unBrowserHandle,
          uint unWidth,
          uint unHeight);

        [DllImport("libsteam_api.so")]
        internal static extern void SteamAPI_ISteamHTMLSurface_StopLoad(
          IntPtr ISteamHTMLSurface,
          uint unBrowserHandle);

        [DllImport("libsteam_api.so")]
        internal static extern void SteamAPI_ISteamHTMLSurface_Reload(
          IntPtr ISteamHTMLSurface,
          uint unBrowserHandle);

        [DllImport("libsteam_api.so")]
        internal static extern void SteamAPI_ISteamHTMLSurface_GoBack(
          IntPtr ISteamHTMLSurface,
          uint unBrowserHandle);

        [DllImport("libsteam_api.so")]
        internal static extern void SteamAPI_ISteamHTMLSurface_GoForward(
          IntPtr ISteamHTMLSurface,
          uint unBrowserHandle);

        [DllImport("libsteam_api.so")]
        internal static extern void SteamAPI_ISteamHTMLSurface_AddHeader(
          IntPtr ISteamHTMLSurface,
          uint unBrowserHandle,
          string pchKey,
          string pchValue);

        [DllImport("libsteam_api.so")]
        internal static extern void SteamAPI_ISteamHTMLSurface_ExecuteJavascript(
          IntPtr ISteamHTMLSurface,
          uint unBrowserHandle,
          string pchScript);

        [DllImport("libsteam_api.so")]
        internal static extern void SteamAPI_ISteamHTMLSurface_MouseUp(
          IntPtr ISteamHTMLSurface,
          uint unBrowserHandle,
          HTMLMouseButton eMouseButton);

        [DllImport("libsteam_api.so")]
        internal static extern void SteamAPI_ISteamHTMLSurface_MouseDown(
          IntPtr ISteamHTMLSurface,
          uint unBrowserHandle,
          HTMLMouseButton eMouseButton);

        [DllImport("libsteam_api.so")]
        internal static extern void SteamAPI_ISteamHTMLSurface_MouseDoubleClick(
          IntPtr ISteamHTMLSurface,
          uint unBrowserHandle,
          HTMLMouseButton eMouseButton);

        [DllImport("libsteam_api.so")]
        internal static extern void SteamAPI_ISteamHTMLSurface_MouseMove(
          IntPtr ISteamHTMLSurface,
          uint unBrowserHandle,
          int x,
          int y);

        [DllImport("libsteam_api.so")]
        internal static extern void SteamAPI_ISteamHTMLSurface_MouseWheel(
          IntPtr ISteamHTMLSurface,
          uint unBrowserHandle,
          int nDelta);

        [DllImport("libsteam_api.so")]
        internal static extern void SteamAPI_ISteamHTMLSurface_KeyDown(
          IntPtr ISteamHTMLSurface,
          uint unBrowserHandle,
          uint nNativeKeyCode,
          HTMLKeyModifiers eHTMLKeyModifiers);

        [DllImport("libsteam_api.so")]
        internal static extern void SteamAPI_ISteamHTMLSurface_KeyUp(
          IntPtr ISteamHTMLSurface,
          uint unBrowserHandle,
          uint nNativeKeyCode,
          HTMLKeyModifiers eHTMLKeyModifiers);

        [DllImport("libsteam_api.so")]
        internal static extern void SteamAPI_ISteamHTMLSurface_KeyChar(
          IntPtr ISteamHTMLSurface,
          uint unBrowserHandle,
          uint cUnicodeChar,
          HTMLKeyModifiers eHTMLKeyModifiers);

        [DllImport("libsteam_api.so")]
        internal static extern void SteamAPI_ISteamHTMLSurface_SetHorizontalScroll(
          IntPtr ISteamHTMLSurface,
          uint unBrowserHandle,
          uint nAbsolutePixelScroll);

        [DllImport("libsteam_api.so")]
        internal static extern void SteamAPI_ISteamHTMLSurface_SetVerticalScroll(
          IntPtr ISteamHTMLSurface,
          uint unBrowserHandle,
          uint nAbsolutePixelScroll);

        [DllImport("libsteam_api.so")]
        internal static extern void SteamAPI_ISteamHTMLSurface_SetKeyFocus(
          IntPtr ISteamHTMLSurface,
          uint unBrowserHandle,
          [MarshalAs(UnmanagedType.U1)] bool bHasKeyFocus);

        [DllImport("libsteam_api.so")]
        internal static extern void SteamAPI_ISteamHTMLSurface_ViewSource(
          IntPtr ISteamHTMLSurface,
          uint unBrowserHandle);

        [DllImport("libsteam_api.so")]
        internal static extern void SteamAPI_ISteamHTMLSurface_CopyToClipboard(
          IntPtr ISteamHTMLSurface,
          uint unBrowserHandle);

        [DllImport("libsteam_api.so")]
        internal static extern void SteamAPI_ISteamHTMLSurface_PasteFromClipboard(
          IntPtr ISteamHTMLSurface,
          uint unBrowserHandle);

        [DllImport("libsteam_api.so")]
        internal static extern void SteamAPI_ISteamHTMLSurface_Find(
          IntPtr ISteamHTMLSurface,
          uint unBrowserHandle,
          string pchSearchStr,
          [MarshalAs(UnmanagedType.U1)] bool bCurrentlyInFind,
          [MarshalAs(UnmanagedType.U1)] bool bReverse);

        [DllImport("libsteam_api.so")]
        internal static extern void SteamAPI_ISteamHTMLSurface_StopFind(
          IntPtr ISteamHTMLSurface,
          uint unBrowserHandle);

        [DllImport("libsteam_api.so")]
        internal static extern void SteamAPI_ISteamHTMLSurface_GetLinkAtPosition(
          IntPtr ISteamHTMLSurface,
          uint unBrowserHandle,
          int x,
          int y);

        [DllImport("libsteam_api.so")]
        internal static extern void SteamAPI_ISteamHTMLSurface_SetCookie(
          IntPtr ISteamHTMLSurface,
          string pchHostname,
          string pchKey,
          string pchValue,
          string pchPath,
          uint nExpires,
          [MarshalAs(UnmanagedType.U1)] bool bSecure,
          [MarshalAs(UnmanagedType.U1)] bool bHTTPOnly);

        [DllImport("libsteam_api.so")]
        internal static extern void SteamAPI_ISteamHTMLSurface_SetPageScaleFactor(
          IntPtr ISteamHTMLSurface,
          uint unBrowserHandle,
          float flZoom,
          int nPointX,
          int nPointY);

        [DllImport("libsteam_api.so")]
        internal static extern void SteamAPI_ISteamHTMLSurface_SetBackgroundMode(
          IntPtr ISteamHTMLSurface,
          uint unBrowserHandle,
          [MarshalAs(UnmanagedType.U1)] bool bBackgroundMode);

        [DllImport("libsteam_api.so")]
        internal static extern void SteamAPI_ISteamHTMLSurface_AllowStartRequest(
          IntPtr ISteamHTMLSurface,
          uint unBrowserHandle,
          [MarshalAs(UnmanagedType.U1)] bool bAllowed);

        [DllImport("libsteam_api.so")]
        internal static extern void SteamAPI_ISteamHTMLSurface_JSDialogResponse(
          IntPtr ISteamHTMLSurface,
          uint unBrowserHandle,
          [MarshalAs(UnmanagedType.U1)] bool bResult);

        [DllImport("libsteam_api.so")]
        internal static extern Result SteamAPI_ISteamInventory_GetResultStatus(
          IntPtr ISteamInventory,
          int resultHandle);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamInventory_GetResultItems(
          IntPtr ISteamInventory,
          int resultHandle,
          IntPtr pOutItemsArray,
          out uint punOutItemsArraySize);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamInventory_GetResultItemProperty(
          IntPtr ISteamInventory,
          int resultHandle,
          uint unItemIndex,
          string pchPropertyName,
          StringBuilder pchValueBuffer,
          out uint punValueBufferSizeOut);

        [DllImport("libsteam_api.so")]
        internal static extern uint SteamAPI_ISteamInventory_GetResultTimestamp(
          IntPtr ISteamInventory,
          int resultHandle);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamInventory_CheckResultSteamID(
          IntPtr ISteamInventory,
          int resultHandle,
          ulong steamIDExpected);

        [DllImport("libsteam_api.so")]
        internal static extern void SteamAPI_ISteamInventory_DestroyResult(
          IntPtr ISteamInventory,
          int resultHandle);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamInventory_GetAllItems(
          IntPtr ISteamInventory,
          ref int pResultHandle);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamInventory_GetItemsByID(
          IntPtr ISteamInventory,
          ref int pResultHandle,
          ulong[] pInstanceIDs,
          uint unCountInstanceIDs);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamInventory_SerializeResult(
          IntPtr ISteamInventory,
          int resultHandle,
          IntPtr pOutBuffer,
          out uint punOutBufferSize);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamInventory_DeserializeResult(
          IntPtr ISteamInventory,
          ref int pOutResultHandle,
          IntPtr pBuffer,
          uint unBufferSize,
          [MarshalAs(UnmanagedType.U1)] bool bRESERVED_MUST_BE_FALSE);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamInventory_GenerateItems(
          IntPtr ISteamInventory,
          ref int pResultHandle,
          int[] pArrayItemDefs,
          uint[] punArrayQuantity,
          uint unArrayLength);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamInventory_GrantPromoItems(
          IntPtr ISteamInventory,
          ref int pResultHandle);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamInventory_AddPromoItem(
          IntPtr ISteamInventory,
          ref int pResultHandle,
          int itemDef);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamInventory_AddPromoItems(
          IntPtr ISteamInventory,
          ref int pResultHandle,
          int[] pArrayItemDefs,
          uint unArrayLength);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamInventory_ConsumeItem(
          IntPtr ISteamInventory,
          ref int pResultHandle,
          ulong itemConsume,
          uint unQuantity);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamInventory_ExchangeItems(
          IntPtr ISteamInventory,
          ref int pResultHandle,
          int[] pArrayGenerate,
          uint[] punArrayGenerateQuantity,
          uint unArrayGenerateLength,
          ulong[] pArrayDestroy,
          uint[] punArrayDestroyQuantity,
          uint unArrayDestroyLength);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamInventory_TransferItemQuantity(
          IntPtr ISteamInventory,
          ref int pResultHandle,
          ulong itemIdSource,
          uint unQuantity,
          ulong itemIdDest);

        [DllImport("libsteam_api.so")]
        internal static extern void SteamAPI_ISteamInventory_SendItemDropHeartbeat(
          IntPtr ISteamInventory);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamInventory_TriggerItemDrop(
          IntPtr ISteamInventory,
          ref int pResultHandle,
          int dropListDefinition);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamInventory_TradeItems(
          IntPtr ISteamInventory,
          ref int pResultHandle,
          ulong steamIDTradePartner,
          ulong[] pArrayGive,
          uint[] pArrayGiveQuantity,
          uint nArrayGiveLength,
          ulong[] pArrayGet,
          uint[] pArrayGetQuantity,
          uint nArrayGetLength);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamInventory_LoadItemDefinitions(
          IntPtr ISteamInventory);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamInventory_GetItemDefinitionIDs(
          IntPtr ISteamInventory,
          IntPtr pItemDefIDs,
          out uint punItemDefIDsArraySize);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamInventory_GetItemDefinitionProperty(
          IntPtr ISteamInventory,
          int iDefinition,
          string pchPropertyName,
          StringBuilder pchValueBuffer,
          out uint punValueBufferSizeOut);

        [DllImport("libsteam_api.so")]
        internal static extern SteamAPICall_t SteamAPI_ISteamInventory_RequestEligiblePromoItemDefinitionsIDs(
          IntPtr ISteamInventory,
          ulong steamID);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamInventory_GetEligiblePromoItemDefinitionIDs(
          IntPtr ISteamInventory,
          ulong steamID,
          IntPtr pItemDefIDs,
          out uint punItemDefIDsArraySize);

        [DllImport("libsteam_api.so")]
        internal static extern void SteamAPI_ISteamVideo_GetVideoURL(
          IntPtr ISteamVideo,
          uint unVideoAppID);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamVideo_IsBroadcasting(
          IntPtr ISteamVideo,
          IntPtr pnNumViewers);

        [DllImport("libsteam_api.so")]
        internal static extern void SteamAPI_ISteamVideo_GetOPFSettings(
          IntPtr ISteamVideo,
          uint unVideoAppID);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamVideo_GetOPFStringForApp(
          IntPtr ISteamVideo,
          uint unVideoAppID,
          StringBuilder pchBuffer,
          out int pnBufferSize);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamGameServer_InitGameServer(
          IntPtr ISteamGameServer,
          uint unIP,
          ushort usGamePort,
          ushort usQueryPort,
          uint unFlags,
          uint nGameAppId,
          string pchVersionString);

        [DllImport("libsteam_api.so")]
        internal static extern void SteamAPI_ISteamGameServer_SetProduct(
          IntPtr ISteamGameServer,
          string pszProduct);

        [DllImport("libsteam_api.so")]
        internal static extern void SteamAPI_ISteamGameServer_SetGameDescription(
          IntPtr ISteamGameServer,
          string pszGameDescription);

        [DllImport("libsteam_api.so")]
        internal static extern void SteamAPI_ISteamGameServer_SetModDir(
          IntPtr ISteamGameServer,
          string pszModDir);

        [DllImport("libsteam_api.so")]
        internal static extern void SteamAPI_ISteamGameServer_SetDedicatedServer(
          IntPtr ISteamGameServer,
          [MarshalAs(UnmanagedType.U1)] bool bDedicated);

        [DllImport("libsteam_api.so")]
        internal static extern void SteamAPI_ISteamGameServer_LogOn(
          IntPtr ISteamGameServer,
          string pszToken);

        [DllImport("libsteam_api.so")]
        internal static extern void SteamAPI_ISteamGameServer_LogOnAnonymous(IntPtr ISteamGameServer);

        [DllImport("libsteam_api.so")]
        internal static extern void SteamAPI_ISteamGameServer_LogOff(IntPtr ISteamGameServer);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamGameServer_BLoggedOn(IntPtr ISteamGameServer);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamGameServer_BSecure(IntPtr ISteamGameServer);

        [DllImport("libsteam_api.so")]
        internal static extern CSteamID SteamAPI_ISteamGameServer_GetSteamID(IntPtr ISteamGameServer);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamGameServer_WasRestartRequested(
          IntPtr ISteamGameServer);

        [DllImport("libsteam_api.so")]
        internal static extern void SteamAPI_ISteamGameServer_SetMaxPlayerCount(
          IntPtr ISteamGameServer,
          int cPlayersMax);

        [DllImport("libsteam_api.so")]
        internal static extern void SteamAPI_ISteamGameServer_SetBotPlayerCount(
          IntPtr ISteamGameServer,
          int cBotplayers);

        [DllImport("libsteam_api.so")]
        internal static extern void SteamAPI_ISteamGameServer_SetServerName(
          IntPtr ISteamGameServer,
          string pszServerName);

        [DllImport("libsteam_api.so")]
        internal static extern void SteamAPI_ISteamGameServer_SetMapName(
          IntPtr ISteamGameServer,
          string pszMapName);

        [DllImport("libsteam_api.so")]
        internal static extern void SteamAPI_ISteamGameServer_SetPasswordProtected(
          IntPtr ISteamGameServer,
          [MarshalAs(UnmanagedType.U1)] bool bPasswordProtected);

        [DllImport("libsteam_api.so")]
        internal static extern void SteamAPI_ISteamGameServer_SetSpectatorPort(
          IntPtr ISteamGameServer,
          ushort unSpectatorPort);

        [DllImport("libsteam_api.so")]
        internal static extern void SteamAPI_ISteamGameServer_SetSpectatorServerName(
          IntPtr ISteamGameServer,
          string pszSpectatorServerName);

        [DllImport("libsteam_api.so")]
        internal static extern void SteamAPI_ISteamGameServer_ClearAllKeyValues(
          IntPtr ISteamGameServer);

        [DllImport("libsteam_api.so")]
        internal static extern void SteamAPI_ISteamGameServer_SetKeyValue(
          IntPtr ISteamGameServer,
          string pKey,
          string pValue);

        [DllImport("libsteam_api.so")]
        internal static extern void SteamAPI_ISteamGameServer_SetGameTags(
          IntPtr ISteamGameServer,
          string pchGameTags);

        [DllImport("libsteam_api.so")]
        internal static extern void SteamAPI_ISteamGameServer_SetGameData(
          IntPtr ISteamGameServer,
          string pchGameData);

        [DllImport("libsteam_api.so")]
        internal static extern void SteamAPI_ISteamGameServer_SetRegion(
          IntPtr ISteamGameServer,
          string pszRegion);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamGameServer_SendUserConnectAndAuthenticate(
          IntPtr ISteamGameServer,
          uint unIPClient,
          IntPtr pvAuthBlob,
          uint cubAuthBlobSize,
          out ulong pSteamIDUser);

        [DllImport("libsteam_api.so")]
        internal static extern CSteamID SteamAPI_ISteamGameServer_CreateUnauthenticatedUserConnection(
          IntPtr ISteamGameServer);

        [DllImport("libsteam_api.so")]
        internal static extern void SteamAPI_ISteamGameServer_SendUserDisconnect(
          IntPtr ISteamGameServer,
          ulong steamIDUser);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamGameServer_BUpdateUserData(
          IntPtr ISteamGameServer,
          ulong steamIDUser,
          string pchPlayerName,
          uint uScore);

        [DllImport("libsteam_api.so")]
        internal static extern HAuthTicket SteamAPI_ISteamGameServer_GetAuthSessionTicket(
          IntPtr ISteamGameServer,
          IntPtr pTicket,
          int cbMaxTicket,
          out uint pcbTicket);

        [DllImport("libsteam_api.so")]
        internal static extern BeginAuthSessionResult SteamAPI_ISteamGameServer_BeginAuthSession(
          IntPtr ISteamGameServer,
          IntPtr pAuthTicket,
          int cbAuthTicket,
          ulong steamID);

        [DllImport("libsteam_api.so")]
        internal static extern void SteamAPI_ISteamGameServer_EndAuthSession(
          IntPtr ISteamGameServer,
          ulong steamID);

        [DllImport("libsteam_api.so")]
        internal static extern void SteamAPI_ISteamGameServer_CancelAuthTicket(
          IntPtr ISteamGameServer,
          uint hAuthTicket);

        [DllImport("libsteam_api.so")]
        internal static extern UserHasLicenseForAppResult SteamAPI_ISteamGameServer_UserHasLicenseForApp(
          IntPtr ISteamGameServer,
          ulong steamID,
          uint appID);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamGameServer_RequestUserGroupStatus(
          IntPtr ISteamGameServer,
          ulong steamIDUser,
          ulong steamIDGroup);

        [DllImport("libsteam_api.so")]
        internal static extern void SteamAPI_ISteamGameServer_GetGameplayStats(
          IntPtr ISteamGameServer);

        [DllImport("libsteam_api.so")]
        internal static extern SteamAPICall_t SteamAPI_ISteamGameServer_GetServerReputation(
          IntPtr ISteamGameServer);

        [DllImport("libsteam_api.so")]
        internal static extern uint SteamAPI_ISteamGameServer_GetPublicIP(IntPtr ISteamGameServer);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamGameServer_HandleIncomingPacket(
          IntPtr ISteamGameServer,
          IntPtr pData,
          int cbData,
          uint srcIP,
          ushort srcPort);

        [DllImport("libsteam_api.so")]
        internal static extern int SteamAPI_ISteamGameServer_GetNextOutgoingPacket(
          IntPtr ISteamGameServer,
          IntPtr pOut,
          int cbMaxOut,
          out uint pNetAdr,
          out ushort pPort);

        [DllImport("libsteam_api.so")]
        internal static extern void SteamAPI_ISteamGameServer_EnableHeartbeats(
          IntPtr ISteamGameServer,
          [MarshalAs(UnmanagedType.U1)] bool bActive);

        [DllImport("libsteam_api.so")]
        internal static extern void SteamAPI_ISteamGameServer_SetHeartbeatInterval(
          IntPtr ISteamGameServer,
          int iHeartbeatInterval);

        [DllImport("libsteam_api.so")]
        internal static extern void SteamAPI_ISteamGameServer_ForceHeartbeat(IntPtr ISteamGameServer);

        [DllImport("libsteam_api.so")]
        internal static extern SteamAPICall_t SteamAPI_ISteamGameServer_AssociateWithClan(
          IntPtr ISteamGameServer,
          ulong steamIDClan);

        [DllImport("libsteam_api.so")]
        internal static extern SteamAPICall_t SteamAPI_ISteamGameServer_ComputeNewPlayerCompatibility(
          IntPtr ISteamGameServer,
          ulong steamIDNewPlayer);

        [DllImport("libsteam_api.so")]
        internal static extern SteamAPICall_t SteamAPI_ISteamGameServerStats_RequestUserStats(
          IntPtr ISteamGameServerStats,
          ulong steamIDUser);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamGameServerStats_GetUserStat(
          IntPtr ISteamGameServerStats,
          ulong steamIDUser,
          string pchName,
          out int pData);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamGameServerStats_GetUserStat0(
          IntPtr ISteamGameServerStats,
          ulong steamIDUser,
          string pchName,
          out float pData);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamGameServerStats_GetUserAchievement(
          IntPtr ISteamGameServerStats,
          ulong steamIDUser,
          string pchName,
          [MarshalAs(UnmanagedType.U1)] ref bool pbAchieved);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamGameServerStats_SetUserStat(
          IntPtr ISteamGameServerStats,
          ulong steamIDUser,
          string pchName,
          int nData);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamGameServerStats_SetUserStat0(
          IntPtr ISteamGameServerStats,
          ulong steamIDUser,
          string pchName,
          float fData);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamGameServerStats_UpdateUserAvgRateStat(
          IntPtr ISteamGameServerStats,
          ulong steamIDUser,
          string pchName,
          float flCountThisSession,
          double dSessionLength);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamGameServerStats_SetUserAchievement(
          IntPtr ISteamGameServerStats,
          ulong steamIDUser,
          string pchName);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_ISteamGameServerStats_ClearUserAchievement(
          IntPtr ISteamGameServerStats,
          ulong steamIDUser,
          string pchName);

        [DllImport("libsteam_api.so")]
        internal static extern SteamAPICall_t SteamAPI_ISteamGameServerStats_StoreUserStats(
          IntPtr ISteamGameServerStats,
          ulong steamIDUser);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_Init();

        [DllImport("libsteam_api.so")]
        internal static extern void SteamAPI_RunCallbacks();

        [DllImport("libsteam_api.so")]
        internal static extern void SteamGameServer_RunCallbacks();

        [DllImport("libsteam_api.so")]
        internal static extern void SteamAPI_RegisterCallback(IntPtr pCallback, int callback);

        [DllImport("libsteam_api.so")]
        internal static extern void SteamAPI_UnregisterCallback(IntPtr pCallback);

        [DllImport("libsteam_api.so")]
        internal static extern void SteamAPI_RegisterCallResult(IntPtr pCallback, ulong callback);

        [DllImport("libsteam_api.so")]
        internal static extern void SteamAPI_UnregisterCallResult(IntPtr pCallback, ulong callback);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamInternal_GameServer_Init(
          uint unIP,
          ushort usPort,
          ushort usGamePort,
          ushort usQueryPort,
          int eServerMode,
          string pchVersionString);

        [DllImport("libsteam_api.so")]
        internal static extern void SteamAPI_Shutdown();

        [DllImport("libsteam_api.so")]
        internal static extern void SteamGameServer_Shutdown();

        [DllImport("libsteam_api.so")]
        internal static extern HSteamUser SteamAPI_GetHSteamUser();

        [DllImport("libsteam_api.so")]
        internal static extern HSteamPipe SteamAPI_GetHSteamPipe();

        [DllImport("libsteam_api.so")]
        internal static extern HSteamUser SteamGameServer_GetHSteamUser();

        [DllImport("libsteam_api.so")]
        internal static extern HSteamPipe SteamGameServer_GetHSteamPipe();

        [DllImport("libsteam_api.so")]
        internal static extern IntPtr SteamInternal_CreateInterface(string version);

        [DllImport("libsteam_api.so")]
        internal static extern bool SteamAPI_RestartAppIfNecessary(uint unOwnAppID);
      }
    }

    internal class Linux64 : Platform.Interface, IDisposable
    {
      internal IntPtr _ptr;

      public bool IsValid => this._ptr != IntPtr.Zero;

      internal Linux64(IntPtr pointer) => this._ptr = pointer;

      public virtual void Dispose() => this._ptr = IntPtr.Zero;

      public virtual HSteamPipe ISteamClient_CreateSteamPipe()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamClient_CreateSteamPipe(this._ptr) : throw new Exception("ISteamClient _ptr is null!");
      }

      public virtual bool ISteamClient_BReleaseSteamPipe(int hSteamPipe)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamClient_BReleaseSteamPipe(this._ptr, hSteamPipe) : throw new Exception("ISteamClient _ptr is null!");
      }

      public virtual HSteamUser ISteamClient_ConnectToGlobalUser(int hSteamPipe)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamClient_ConnectToGlobalUser(this._ptr, hSteamPipe) : throw new Exception("ISteamClient _ptr is null!");
      }

      public virtual HSteamUser ISteamClient_CreateLocalUser(
        out int phSteamPipe,
        AccountType eAccountType)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamClient_CreateLocalUser(this._ptr, out phSteamPipe, eAccountType) : throw new Exception("ISteamClient _ptr is null!");
      }

      public virtual void ISteamClient_ReleaseUser(int hSteamPipe, int hUser)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamClient _ptr is null!");
        Platform.Linux64.Native.SteamAPI_ISteamClient_ReleaseUser(this._ptr, hSteamPipe, hUser);
      }

      public virtual IntPtr ISteamClient_GetISteamUser(
        int hSteamUser,
        int hSteamPipe,
        string pchVersion)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamClient _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamClient_GetISteamUser(this._ptr, hSteamUser, hSteamPipe, pchVersion);
      }

      public virtual IntPtr ISteamClient_GetISteamGameServer(
        int hSteamUser,
        int hSteamPipe,
        string pchVersion)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamClient _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamClient_GetISteamGameServer(this._ptr, hSteamUser, hSteamPipe, pchVersion);
      }

      public virtual void ISteamClient_SetLocalIPBinding(uint unIP, ushort usPort)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamClient _ptr is null!");
        Platform.Linux64.Native.SteamAPI_ISteamClient_SetLocalIPBinding(this._ptr, unIP, usPort);
      }

      public virtual IntPtr ISteamClient_GetISteamFriends(
        int hSteamUser,
        int hSteamPipe,
        string pchVersion)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamClient _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamClient_GetISteamFriends(this._ptr, hSteamUser, hSteamPipe, pchVersion);
      }

      public virtual IntPtr ISteamClient_GetISteamUtils(int hSteamPipe, string pchVersion)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamClient _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamClient_GetISteamUtils(this._ptr, hSteamPipe, pchVersion);
      }

      public virtual IntPtr ISteamClient_GetISteamMatchmaking(
        int hSteamUser,
        int hSteamPipe,
        string pchVersion)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamClient _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamClient_GetISteamMatchmaking(this._ptr, hSteamUser, hSteamPipe, pchVersion);
      }

      public virtual IntPtr ISteamClient_GetISteamMatchmakingServers(
        int hSteamUser,
        int hSteamPipe,
        string pchVersion)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamClient _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamClient_GetISteamMatchmakingServers(this._ptr, hSteamUser, hSteamPipe, pchVersion);
      }

      public virtual IntPtr ISteamClient_GetISteamGenericInterface(
        int hSteamUser,
        int hSteamPipe,
        string pchVersion)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamClient _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamClient_GetISteamGenericInterface(this._ptr, hSteamUser, hSteamPipe, pchVersion);
      }

      public virtual IntPtr ISteamClient_GetISteamUserStats(
        int hSteamUser,
        int hSteamPipe,
        string pchVersion)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamClient _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamClient_GetISteamUserStats(this._ptr, hSteamUser, hSteamPipe, pchVersion);
      }

      public virtual IntPtr ISteamClient_GetISteamGameServerStats(
        int hSteamuser,
        int hSteamPipe,
        string pchVersion)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamClient _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamClient_GetISteamGameServerStats(this._ptr, hSteamuser, hSteamPipe, pchVersion);
      }

      public virtual IntPtr ISteamClient_GetISteamApps(
        int hSteamUser,
        int hSteamPipe,
        string pchVersion)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamClient _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamClient_GetISteamApps(this._ptr, hSteamUser, hSteamPipe, pchVersion);
      }

      public virtual IntPtr ISteamClient_GetISteamNetworking(
        int hSteamUser,
        int hSteamPipe,
        string pchVersion)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamClient _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamClient_GetISteamNetworking(this._ptr, hSteamUser, hSteamPipe, pchVersion);
      }

      public virtual IntPtr ISteamClient_GetISteamRemoteStorage(
        int hSteamuser,
        int hSteamPipe,
        string pchVersion)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamClient _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamClient_GetISteamRemoteStorage(this._ptr, hSteamuser, hSteamPipe, pchVersion);
      }

      public virtual IntPtr ISteamClient_GetISteamScreenshots(
        int hSteamuser,
        int hSteamPipe,
        string pchVersion)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamClient _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamClient_GetISteamScreenshots(this._ptr, hSteamuser, hSteamPipe, pchVersion);
      }

      public virtual uint ISteamClient_GetIPCCallCount()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamClient_GetIPCCallCount(this._ptr) : throw new Exception("ISteamClient _ptr is null!");
      }

      public virtual void ISteamClient_SetWarningMessageHook(IntPtr pFunction)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamClient _ptr is null!");
        Platform.Linux64.Native.SteamAPI_ISteamClient_SetWarningMessageHook(this._ptr, pFunction);
      }

      public virtual bool ISteamClient_BShutdownIfAllPipesClosed()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamClient_BShutdownIfAllPipesClosed(this._ptr) : throw new Exception("ISteamClient _ptr is null!");
      }

      public virtual IntPtr ISteamClient_GetISteamHTTP(
        int hSteamuser,
        int hSteamPipe,
        string pchVersion)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamClient _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamClient_GetISteamHTTP(this._ptr, hSteamuser, hSteamPipe, pchVersion);
      }

      public virtual IntPtr ISteamClient_GetISteamUnifiedMessages(
        int hSteamuser,
        int hSteamPipe,
        string pchVersion)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamClient _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamClient_GetISteamUnifiedMessages(this._ptr, hSteamuser, hSteamPipe, pchVersion);
      }

      public virtual IntPtr ISteamClient_GetISteamController(
        int hSteamUser,
        int hSteamPipe,
        string pchVersion)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamClient _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamClient_GetISteamController(this._ptr, hSteamUser, hSteamPipe, pchVersion);
      }

      public virtual IntPtr ISteamClient_GetISteamUGC(
        int hSteamUser,
        int hSteamPipe,
        string pchVersion)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamClient _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamClient_GetISteamUGC(this._ptr, hSteamUser, hSteamPipe, pchVersion);
      }

      public virtual IntPtr ISteamClient_GetISteamAppList(
        int hSteamUser,
        int hSteamPipe,
        string pchVersion)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamClient _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamClient_GetISteamAppList(this._ptr, hSteamUser, hSteamPipe, pchVersion);
      }

      public virtual IntPtr ISteamClient_GetISteamMusic(
        int hSteamuser,
        int hSteamPipe,
        string pchVersion)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamClient _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamClient_GetISteamMusic(this._ptr, hSteamuser, hSteamPipe, pchVersion);
      }

      public virtual IntPtr ISteamClient_GetISteamMusicRemote(
        int hSteamuser,
        int hSteamPipe,
        string pchVersion)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamClient _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamClient_GetISteamMusicRemote(this._ptr, hSteamuser, hSteamPipe, pchVersion);
      }

      public virtual IntPtr ISteamClient_GetISteamHTMLSurface(
        int hSteamuser,
        int hSteamPipe,
        string pchVersion)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamClient _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamClient_GetISteamHTMLSurface(this._ptr, hSteamuser, hSteamPipe, pchVersion);
      }

      public virtual IntPtr ISteamClient_GetISteamInventory(
        int hSteamuser,
        int hSteamPipe,
        string pchVersion)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamClient _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamClient_GetISteamInventory(this._ptr, hSteamuser, hSteamPipe, pchVersion);
      }

      public virtual IntPtr ISteamClient_GetISteamVideo(
        int hSteamuser,
        int hSteamPipe,
        string pchVersion)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamClient _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamClient_GetISteamVideo(this._ptr, hSteamuser, hSteamPipe, pchVersion);
      }

      public virtual HSteamUser ISteamUser_GetHSteamUser()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamUser_GetHSteamUser(this._ptr) : throw new Exception("ISteamUser _ptr is null!");
      }

      public virtual bool ISteamUser_BLoggedOn()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamUser_BLoggedOn(this._ptr) : throw new Exception("ISteamUser _ptr is null!");
      }

      public virtual CSteamID ISteamUser_GetSteamID()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamUser_GetSteamID(this._ptr) : throw new Exception("ISteamUser _ptr is null!");
      }

      public virtual int ISteamUser_InitiateGameConnection(
        IntPtr pAuthBlob,
        int cbMaxAuthBlob,
        ulong steamIDGameServer,
        uint unIPServer,
        ushort usPortServer,
        [MarshalAs(UnmanagedType.U1)] bool bSecure)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUser _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamUser_InitiateGameConnection(this._ptr, pAuthBlob, cbMaxAuthBlob, steamIDGameServer, unIPServer, usPortServer, bSecure);
      }

      public virtual void ISteamUser_TerminateGameConnection(uint unIPServer, ushort usPortServer)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUser _ptr is null!");
        Platform.Linux64.Native.SteamAPI_ISteamUser_TerminateGameConnection(this._ptr, unIPServer, usPortServer);
      }

      public virtual void ISteamUser_TrackAppUsageEvent(
        ulong gameID,
        int eAppUsageEvent,
        string pchExtraInfo)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUser _ptr is null!");
        Platform.Linux64.Native.SteamAPI_ISteamUser_TrackAppUsageEvent(this._ptr, gameID, eAppUsageEvent, pchExtraInfo);
      }

      public virtual bool ISteamUser_GetUserDataFolder(StringBuilder pchBuffer, int cubBuffer)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUser _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamUser_GetUserDataFolder(this._ptr, pchBuffer, cubBuffer);
      }

      public virtual void ISteamUser_StartVoiceRecording()
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUser _ptr is null!");
        Platform.Linux64.Native.SteamAPI_ISteamUser_StartVoiceRecording(this._ptr);
      }

      public virtual void ISteamUser_StopVoiceRecording()
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUser _ptr is null!");
        Platform.Linux64.Native.SteamAPI_ISteamUser_StopVoiceRecording(this._ptr);
      }

      public virtual VoiceResult ISteamUser_GetAvailableVoice(
        out uint pcbCompressed,
        out uint pcbUncompressed_Deprecated,
        uint nUncompressedVoiceDesiredSampleRate_Deprecated)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamUser_GetAvailableVoice(this._ptr, out pcbCompressed, out pcbUncompressed_Deprecated, nUncompressedVoiceDesiredSampleRate_Deprecated) : throw new Exception("ISteamUser _ptr is null!");
      }

      public virtual VoiceResult ISteamUser_GetVoice(
        [MarshalAs(UnmanagedType.U1)] bool bWantCompressed,
        IntPtr pDestBuffer,
        uint cbDestBufferSize,
        out uint nBytesWritten,
        [MarshalAs(UnmanagedType.U1)] bool bWantUncompressed_Deprecated,
        IntPtr pUncompressedDestBuffer_Deprecated,
        uint cbUncompressedDestBufferSize_Deprecated,
        out uint nUncompressBytesWritten_Deprecated,
        uint nUncompressedVoiceDesiredSampleRate_Deprecated)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUser _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamUser_GetVoice(this._ptr, bWantCompressed, pDestBuffer, cbDestBufferSize, out nBytesWritten, bWantUncompressed_Deprecated, pUncompressedDestBuffer_Deprecated, cbUncompressedDestBufferSize_Deprecated, out nUncompressBytesWritten_Deprecated, nUncompressedVoiceDesiredSampleRate_Deprecated);
      }

      public virtual VoiceResult ISteamUser_DecompressVoice(
        IntPtr pCompressed,
        uint cbCompressed,
        IntPtr pDestBuffer,
        uint cbDestBufferSize,
        out uint nBytesWritten,
        uint nDesiredSampleRate)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUser _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamUser_DecompressVoice(this._ptr, pCompressed, cbCompressed, pDestBuffer, cbDestBufferSize, out nBytesWritten, nDesiredSampleRate);
      }

      public virtual uint ISteamUser_GetVoiceOptimalSampleRate()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamUser_GetVoiceOptimalSampleRate(this._ptr) : throw new Exception("ISteamUser _ptr is null!");
      }

      public virtual HAuthTicket ISteamUser_GetAuthSessionTicket(
        IntPtr pTicket,
        int cbMaxTicket,
        out uint pcbTicket)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUser _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamUser_GetAuthSessionTicket(this._ptr, pTicket, cbMaxTicket, out pcbTicket);
      }

      public virtual BeginAuthSessionResult ISteamUser_BeginAuthSession(
        IntPtr pAuthTicket,
        int cbAuthTicket,
        ulong steamID)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUser _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamUser_BeginAuthSession(this._ptr, pAuthTicket, cbAuthTicket, steamID);
      }

      public virtual void ISteamUser_EndAuthSession(ulong steamID)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUser _ptr is null!");
        Platform.Linux64.Native.SteamAPI_ISteamUser_EndAuthSession(this._ptr, steamID);
      }

      public virtual void ISteamUser_CancelAuthTicket(uint hAuthTicket)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUser _ptr is null!");
        Platform.Linux64.Native.SteamAPI_ISteamUser_CancelAuthTicket(this._ptr, hAuthTicket);
      }

      public virtual UserHasLicenseForAppResult ISteamUser_UserHasLicenseForApp(
        ulong steamID,
        uint appID)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUser _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamUser_UserHasLicenseForApp(this._ptr, steamID, appID);
      }

      public virtual bool ISteamUser_BIsBehindNAT()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamUser_BIsBehindNAT(this._ptr) : throw new Exception("ISteamUser _ptr is null!");
      }

      public virtual void ISteamUser_AdvertiseGame(
        ulong steamIDGameServer,
        uint unIPServer,
        ushort usPortServer)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUser _ptr is null!");
        Platform.Linux64.Native.SteamAPI_ISteamUser_AdvertiseGame(this._ptr, steamIDGameServer, unIPServer, usPortServer);
      }

      public virtual SteamAPICall_t ISteamUser_RequestEncryptedAppTicket(
        IntPtr pDataToInclude,
        int cbDataToInclude)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUser _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamUser_RequestEncryptedAppTicket(this._ptr, pDataToInclude, cbDataToInclude);
      }

      public virtual bool ISteamUser_GetEncryptedAppTicket(
        IntPtr pTicket,
        int cbMaxTicket,
        out uint pcbTicket)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUser _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamUser_GetEncryptedAppTicket(this._ptr, pTicket, cbMaxTicket, out pcbTicket);
      }

      public virtual int ISteamUser_GetGameBadgeLevel(int nSeries, [MarshalAs(UnmanagedType.U1)] bool bFoil)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUser _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamUser_GetGameBadgeLevel(this._ptr, nSeries, bFoil);
      }

      public virtual int ISteamUser_GetPlayerSteamLevel()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamUser_GetPlayerSteamLevel(this._ptr) : throw new Exception("ISteamUser _ptr is null!");
      }

      public virtual SteamAPICall_t ISteamUser_RequestStoreAuthURL(string pchRedirectURL)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamUser_RequestStoreAuthURL(this._ptr, pchRedirectURL) : throw new Exception("ISteamUser _ptr is null!");
      }

      public virtual bool ISteamUser_BIsPhoneVerified()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamUser_BIsPhoneVerified(this._ptr) : throw new Exception("ISteamUser _ptr is null!");
      }

      public virtual bool ISteamUser_BIsTwoFactorEnabled()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamUser_BIsTwoFactorEnabled(this._ptr) : throw new Exception("ISteamUser _ptr is null!");
      }

      public virtual bool ISteamUser_BIsPhoneIdentifying()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamUser_BIsPhoneIdentifying(this._ptr) : throw new Exception("ISteamUser _ptr is null!");
      }

      public virtual bool ISteamUser_BIsPhoneRequiringVerification()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamUser_BIsPhoneRequiringVerification(this._ptr) : throw new Exception("ISteamUser _ptr is null!");
      }

      public virtual IntPtr ISteamFriends_GetPersonaName()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamFriends_GetPersonaName(this._ptr) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual SteamAPICall_t ISteamFriends_SetPersonaName(string pchPersonaName)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamFriends_SetPersonaName(this._ptr, pchPersonaName) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual PersonaState ISteamFriends_GetPersonaState()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamFriends_GetPersonaState(this._ptr) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual int ISteamFriends_GetFriendCount(int iFriendFlags)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamFriends_GetFriendCount(this._ptr, iFriendFlags) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual CSteamID ISteamFriends_GetFriendByIndex(int iFriend, int iFriendFlags)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamFriends _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamFriends_GetFriendByIndex(this._ptr, iFriend, iFriendFlags);
      }

      public virtual FriendRelationship ISteamFriends_GetFriendRelationship(ulong steamIDFriend)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamFriends_GetFriendRelationship(this._ptr, steamIDFriend) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual PersonaState ISteamFriends_GetFriendPersonaState(ulong steamIDFriend)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamFriends_GetFriendPersonaState(this._ptr, steamIDFriend) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual IntPtr ISteamFriends_GetFriendPersonaName(ulong steamIDFriend)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamFriends_GetFriendPersonaName(this._ptr, steamIDFriend) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual bool ISteamFriends_GetFriendGamePlayed(
        ulong steamIDFriend,
        ref FriendGameInfo_t pFriendGameInfo)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamFriends _ptr is null!");
        FriendGameInfo_t.PackSmall pFriendGameInfo1 = new FriendGameInfo_t.PackSmall();
        bool friendGamePlayed = Platform.Linux64.Native.SteamAPI_ISteamFriends_GetFriendGamePlayed(this._ptr, steamIDFriend, ref pFriendGameInfo1);
        pFriendGameInfo = (FriendGameInfo_t) pFriendGameInfo1;
        return friendGamePlayed;
      }

      public virtual IntPtr ISteamFriends_GetFriendPersonaNameHistory(
        ulong steamIDFriend,
        int iPersonaName)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamFriends _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamFriends_GetFriendPersonaNameHistory(this._ptr, steamIDFriend, iPersonaName);
      }

      public virtual int ISteamFriends_GetFriendSteamLevel(ulong steamIDFriend)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamFriends_GetFriendSteamLevel(this._ptr, steamIDFriend) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual IntPtr ISteamFriends_GetPlayerNickname(ulong steamIDPlayer)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamFriends_GetPlayerNickname(this._ptr, steamIDPlayer) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual int ISteamFriends_GetFriendsGroupCount()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamFriends_GetFriendsGroupCount(this._ptr) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual FriendsGroupID_t ISteamFriends_GetFriendsGroupIDByIndex(int iFG)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamFriends_GetFriendsGroupIDByIndex(this._ptr, iFG) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual IntPtr ISteamFriends_GetFriendsGroupName(short friendsGroupID)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamFriends_GetFriendsGroupName(this._ptr, friendsGroupID) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual int ISteamFriends_GetFriendsGroupMembersCount(short friendsGroupID)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamFriends_GetFriendsGroupMembersCount(this._ptr, friendsGroupID) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual void ISteamFriends_GetFriendsGroupMembersList(
        short friendsGroupID,
        IntPtr pOutSteamIDMembers,
        int nMembersCount)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamFriends _ptr is null!");
        Platform.Linux64.Native.SteamAPI_ISteamFriends_GetFriendsGroupMembersList(this._ptr, friendsGroupID, pOutSteamIDMembers, nMembersCount);
      }

      public virtual bool ISteamFriends_HasFriend(ulong steamIDFriend, int iFriendFlags)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamFriends _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamFriends_HasFriend(this._ptr, steamIDFriend, iFriendFlags);
      }

      public virtual int ISteamFriends_GetClanCount()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamFriends_GetClanCount(this._ptr) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual CSteamID ISteamFriends_GetClanByIndex(int iClan)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamFriends_GetClanByIndex(this._ptr, iClan) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual IntPtr ISteamFriends_GetClanName(ulong steamIDClan)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamFriends_GetClanName(this._ptr, steamIDClan) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual IntPtr ISteamFriends_GetClanTag(ulong steamIDClan)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamFriends_GetClanTag(this._ptr, steamIDClan) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual bool ISteamFriends_GetClanActivityCounts(
        ulong steamIDClan,
        out int pnOnline,
        out int pnInGame,
        out int pnChatting)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamFriends_GetClanActivityCounts(this._ptr, steamIDClan, out pnOnline, out pnInGame, out pnChatting) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual SteamAPICall_t ISteamFriends_DownloadClanActivityCounts(
        IntPtr psteamIDClans,
        int cClansToRequest)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamFriends _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamFriends_DownloadClanActivityCounts(this._ptr, psteamIDClans, cClansToRequest);
      }

      public virtual int ISteamFriends_GetFriendCountFromSource(ulong steamIDSource)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamFriends_GetFriendCountFromSource(this._ptr, steamIDSource) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual CSteamID ISteamFriends_GetFriendFromSourceByIndex(
        ulong steamIDSource,
        int iFriend)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamFriends _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamFriends_GetFriendFromSourceByIndex(this._ptr, steamIDSource, iFriend);
      }

      public virtual bool ISteamFriends_IsUserInSource(ulong steamIDUser, ulong steamIDSource)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamFriends _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamFriends_IsUserInSource(this._ptr, steamIDUser, steamIDSource);
      }

      public virtual void ISteamFriends_SetInGameVoiceSpeaking(ulong steamIDUser, [MarshalAs(UnmanagedType.U1)] bool bSpeaking)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamFriends _ptr is null!");
        Platform.Linux64.Native.SteamAPI_ISteamFriends_SetInGameVoiceSpeaking(this._ptr, steamIDUser, bSpeaking);
      }

      public virtual void ISteamFriends_ActivateGameOverlay(string pchDialog)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamFriends _ptr is null!");
        Platform.Linux64.Native.SteamAPI_ISteamFriends_ActivateGameOverlay(this._ptr, pchDialog);
      }

      public virtual void ISteamFriends_ActivateGameOverlayToUser(string pchDialog, ulong steamID)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamFriends _ptr is null!");
        Platform.Linux64.Native.SteamAPI_ISteamFriends_ActivateGameOverlayToUser(this._ptr, pchDialog, steamID);
      }

      public virtual void ISteamFriends_ActivateGameOverlayToWebPage(string pchURL)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamFriends _ptr is null!");
        Platform.Linux64.Native.SteamAPI_ISteamFriends_ActivateGameOverlayToWebPage(this._ptr, pchURL);
      }

      public virtual void ISteamFriends_ActivateGameOverlayToStore(
        uint nAppID,
        OverlayToStoreFlag eFlag)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamFriends _ptr is null!");
        Platform.Linux64.Native.SteamAPI_ISteamFriends_ActivateGameOverlayToStore(this._ptr, nAppID, eFlag);
      }

      public virtual void ISteamFriends_SetPlayedWith(ulong steamIDUserPlayedWith)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamFriends _ptr is null!");
        Platform.Linux64.Native.SteamAPI_ISteamFriends_SetPlayedWith(this._ptr, steamIDUserPlayedWith);
      }

      public virtual void ISteamFriends_ActivateGameOverlayInviteDialog(ulong steamIDLobby)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamFriends _ptr is null!");
        Platform.Linux64.Native.SteamAPI_ISteamFriends_ActivateGameOverlayInviteDialog(this._ptr, steamIDLobby);
      }

      public virtual int ISteamFriends_GetSmallFriendAvatar(ulong steamIDFriend)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamFriends_GetSmallFriendAvatar(this._ptr, steamIDFriend) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual int ISteamFriends_GetMediumFriendAvatar(ulong steamIDFriend)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamFriends_GetMediumFriendAvatar(this._ptr, steamIDFriend) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual int ISteamFriends_GetLargeFriendAvatar(ulong steamIDFriend)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamFriends_GetLargeFriendAvatar(this._ptr, steamIDFriend) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual bool ISteamFriends_RequestUserInformation(
        ulong steamIDUser,
        [MarshalAs(UnmanagedType.U1)] bool bRequireNameOnly)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamFriends _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamFriends_RequestUserInformation(this._ptr, steamIDUser, bRequireNameOnly);
      }

      public virtual SteamAPICall_t ISteamFriends_RequestClanOfficerList(ulong steamIDClan)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamFriends_RequestClanOfficerList(this._ptr, steamIDClan) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual CSteamID ISteamFriends_GetClanOwner(ulong steamIDClan)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamFriends_GetClanOwner(this._ptr, steamIDClan) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual int ISteamFriends_GetClanOfficerCount(ulong steamIDClan)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamFriends_GetClanOfficerCount(this._ptr, steamIDClan) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual CSteamID ISteamFriends_GetClanOfficerByIndex(ulong steamIDClan, int iOfficer)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamFriends _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamFriends_GetClanOfficerByIndex(this._ptr, steamIDClan, iOfficer);
      }

      public virtual uint ISteamFriends_GetUserRestrictions()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamFriends_GetUserRestrictions(this._ptr) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual bool ISteamFriends_SetRichPresence(string pchKey, string pchValue)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamFriends _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamFriends_SetRichPresence(this._ptr, pchKey, pchValue);
      }

      public virtual void ISteamFriends_ClearRichPresence()
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamFriends _ptr is null!");
        Platform.Linux64.Native.SteamAPI_ISteamFriends_ClearRichPresence(this._ptr);
      }

      public virtual IntPtr ISteamFriends_GetFriendRichPresence(ulong steamIDFriend, string pchKey)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamFriends _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamFriends_GetFriendRichPresence(this._ptr, steamIDFriend, pchKey);
      }

      public virtual int ISteamFriends_GetFriendRichPresenceKeyCount(ulong steamIDFriend)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamFriends_GetFriendRichPresenceKeyCount(this._ptr, steamIDFriend) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual IntPtr ISteamFriends_GetFriendRichPresenceKeyByIndex(
        ulong steamIDFriend,
        int iKey)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamFriends _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamFriends_GetFriendRichPresenceKeyByIndex(this._ptr, steamIDFriend, iKey);
      }

      public virtual void ISteamFriends_RequestFriendRichPresence(ulong steamIDFriend)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamFriends _ptr is null!");
        Platform.Linux64.Native.SteamAPI_ISteamFriends_RequestFriendRichPresence(this._ptr, steamIDFriend);
      }

      public virtual bool ISteamFriends_InviteUserToGame(
        ulong steamIDFriend,
        string pchConnectString)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamFriends _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamFriends_InviteUserToGame(this._ptr, steamIDFriend, pchConnectString);
      }

      public virtual int ISteamFriends_GetCoplayFriendCount()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamFriends_GetCoplayFriendCount(this._ptr) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual CSteamID ISteamFriends_GetCoplayFriend(int iCoplayFriend)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamFriends_GetCoplayFriend(this._ptr, iCoplayFriend) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual int ISteamFriends_GetFriendCoplayTime(ulong steamIDFriend)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamFriends_GetFriendCoplayTime(this._ptr, steamIDFriend) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual AppId_t ISteamFriends_GetFriendCoplayGame(ulong steamIDFriend)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamFriends_GetFriendCoplayGame(this._ptr, steamIDFriend) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual SteamAPICall_t ISteamFriends_JoinClanChatRoom(ulong steamIDClan)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamFriends_JoinClanChatRoom(this._ptr, steamIDClan) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual bool ISteamFriends_LeaveClanChatRoom(ulong steamIDClan)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamFriends_LeaveClanChatRoom(this._ptr, steamIDClan) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual int ISteamFriends_GetClanChatMemberCount(ulong steamIDClan)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamFriends_GetClanChatMemberCount(this._ptr, steamIDClan) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual CSteamID ISteamFriends_GetChatMemberByIndex(ulong steamIDClan, int iUser)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamFriends _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamFriends_GetChatMemberByIndex(this._ptr, steamIDClan, iUser);
      }

      public virtual bool ISteamFriends_SendClanChatMessage(ulong steamIDClanChat, string pchText)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamFriends _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamFriends_SendClanChatMessage(this._ptr, steamIDClanChat, pchText);
      }

      public virtual int ISteamFriends_GetClanChatMessage(
        ulong steamIDClanChat,
        int iMessage,
        IntPtr prgchText,
        int cchTextMax,
        out ChatEntryType peChatEntryType,
        out ulong psteamidChatter)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamFriends _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamFriends_GetClanChatMessage(this._ptr, steamIDClanChat, iMessage, prgchText, cchTextMax, out peChatEntryType, out psteamidChatter);
      }

      public virtual bool ISteamFriends_IsClanChatAdmin(ulong steamIDClanChat, ulong steamIDUser)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamFriends _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamFriends_IsClanChatAdmin(this._ptr, steamIDClanChat, steamIDUser);
      }

      public virtual bool ISteamFriends_IsClanChatWindowOpenInSteam(ulong steamIDClanChat)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamFriends_IsClanChatWindowOpenInSteam(this._ptr, steamIDClanChat) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual bool ISteamFriends_OpenClanChatWindowInSteam(ulong steamIDClanChat)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamFriends_OpenClanChatWindowInSteam(this._ptr, steamIDClanChat) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual bool ISteamFriends_CloseClanChatWindowInSteam(ulong steamIDClanChat)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamFriends_CloseClanChatWindowInSteam(this._ptr, steamIDClanChat) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual bool ISteamFriends_SetListenForFriendsMessages([MarshalAs(UnmanagedType.U1)] bool bInterceptEnabled)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamFriends_SetListenForFriendsMessages(this._ptr, bInterceptEnabled) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual bool ISteamFriends_ReplyToFriendMessage(
        ulong steamIDFriend,
        string pchMsgToSend)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamFriends _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamFriends_ReplyToFriendMessage(this._ptr, steamIDFriend, pchMsgToSend);
      }

      public virtual int ISteamFriends_GetFriendMessage(
        ulong steamIDFriend,
        int iMessageID,
        IntPtr pvData,
        int cubData,
        out ChatEntryType peChatEntryType)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamFriends _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamFriends_GetFriendMessage(this._ptr, steamIDFriend, iMessageID, pvData, cubData, out peChatEntryType);
      }

      public virtual SteamAPICall_t ISteamFriends_GetFollowerCount(ulong steamID)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamFriends_GetFollowerCount(this._ptr, steamID) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual SteamAPICall_t ISteamFriends_IsFollowing(ulong steamID)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamFriends_IsFollowing(this._ptr, steamID) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual SteamAPICall_t ISteamFriends_EnumerateFollowingList(uint unStartIndex)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamFriends_EnumerateFollowingList(this._ptr, unStartIndex) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual uint ISteamUtils_GetSecondsSinceAppActive()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamUtils_GetSecondsSinceAppActive(this._ptr) : throw new Exception("ISteamUtils _ptr is null!");
      }

      public virtual uint ISteamUtils_GetSecondsSinceComputerActive()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamUtils_GetSecondsSinceComputerActive(this._ptr) : throw new Exception("ISteamUtils _ptr is null!");
      }

      public virtual Universe ISteamUtils_GetConnectedUniverse()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamUtils_GetConnectedUniverse(this._ptr) : throw new Exception("ISteamUtils _ptr is null!");
      }

      public virtual uint ISteamUtils_GetServerRealTime()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamUtils_GetServerRealTime(this._ptr) : throw new Exception("ISteamUtils _ptr is null!");
      }

      public virtual IntPtr ISteamUtils_GetIPCountry()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamUtils_GetIPCountry(this._ptr) : throw new Exception("ISteamUtils _ptr is null!");
      }

      public virtual bool ISteamUtils_GetImageSize(int iImage, out uint pnWidth, out uint pnHeight)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamUtils_GetImageSize(this._ptr, iImage, out pnWidth, out pnHeight) : throw new Exception("ISteamUtils _ptr is null!");
      }

      public virtual bool ISteamUtils_GetImageRGBA(int iImage, IntPtr pubDest, int nDestBufferSize)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUtils _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamUtils_GetImageRGBA(this._ptr, iImage, pubDest, nDestBufferSize);
      }

      public virtual bool ISteamUtils_GetCSERIPPort(out uint unIP, out ushort usPort)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamUtils_GetCSERIPPort(this._ptr, out unIP, out usPort) : throw new Exception("ISteamUtils _ptr is null!");
      }

      public virtual byte ISteamUtils_GetCurrentBatteryPower()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamUtils_GetCurrentBatteryPower(this._ptr) : throw new Exception("ISteamUtils _ptr is null!");
      }

      public virtual uint ISteamUtils_GetAppID()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamUtils_GetAppID(this._ptr) : throw new Exception("ISteamUtils _ptr is null!");
      }

      public virtual void ISteamUtils_SetOverlayNotificationPosition(
        NotificationPosition eNotificationPosition)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUtils _ptr is null!");
        Platform.Linux64.Native.SteamAPI_ISteamUtils_SetOverlayNotificationPosition(this._ptr, eNotificationPosition);
      }

      public virtual bool ISteamUtils_IsAPICallCompleted(ulong hSteamAPICall, [MarshalAs(UnmanagedType.U1)] ref bool pbFailed)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUtils _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamUtils_IsAPICallCompleted(this._ptr, hSteamAPICall, ref pbFailed);
      }

      public virtual SteamAPICallFailure ISteamUtils_GetAPICallFailureReason(ulong hSteamAPICall)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamUtils_GetAPICallFailureReason(this._ptr, hSteamAPICall) : throw new Exception("ISteamUtils _ptr is null!");
      }

      public virtual bool ISteamUtils_GetAPICallResult(
        ulong hSteamAPICall,
        IntPtr pCallback,
        int cubCallback,
        int iCallbackExpected,
        [MarshalAs(UnmanagedType.U1)] ref bool pbFailed)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUtils _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamUtils_GetAPICallResult(this._ptr, hSteamAPICall, pCallback, cubCallback, iCallbackExpected, ref pbFailed);
      }

      public virtual uint ISteamUtils_GetIPCCallCount()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamUtils_GetIPCCallCount(this._ptr) : throw new Exception("ISteamUtils _ptr is null!");
      }

      public virtual void ISteamUtils_SetWarningMessageHook(IntPtr pFunction)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUtils _ptr is null!");
        Platform.Linux64.Native.SteamAPI_ISteamUtils_SetWarningMessageHook(this._ptr, pFunction);
      }

      public virtual bool ISteamUtils_IsOverlayEnabled()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamUtils_IsOverlayEnabled(this._ptr) : throw new Exception("ISteamUtils _ptr is null!");
      }

      public virtual bool ISteamUtils_BOverlayNeedsPresent()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamUtils_BOverlayNeedsPresent(this._ptr) : throw new Exception("ISteamUtils _ptr is null!");
      }

      public virtual SteamAPICall_t ISteamUtils_CheckFileSignature(string szFileName)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamUtils_CheckFileSignature(this._ptr, szFileName) : throw new Exception("ISteamUtils _ptr is null!");
      }

      public virtual bool ISteamUtils_ShowGamepadTextInput(
        GamepadTextInputMode eInputMode,
        GamepadTextInputLineMode eLineInputMode,
        string pchDescription,
        uint unCharMax,
        string pchExistingText)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUtils _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamUtils_ShowGamepadTextInput(this._ptr, eInputMode, eLineInputMode, pchDescription, unCharMax, pchExistingText);
      }

      public virtual uint ISteamUtils_GetEnteredGamepadTextLength()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamUtils_GetEnteredGamepadTextLength(this._ptr) : throw new Exception("ISteamUtils _ptr is null!");
      }

      public virtual bool ISteamUtils_GetEnteredGamepadTextInput(
        StringBuilder pchText,
        uint cchText)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUtils _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamUtils_GetEnteredGamepadTextInput(this._ptr, pchText, cchText);
      }

      public virtual IntPtr ISteamUtils_GetSteamUILanguage()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamUtils_GetSteamUILanguage(this._ptr) : throw new Exception("ISteamUtils _ptr is null!");
      }

      public virtual bool ISteamUtils_IsSteamRunningInVR()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamUtils_IsSteamRunningInVR(this._ptr) : throw new Exception("ISteamUtils _ptr is null!");
      }

      public virtual void ISteamUtils_SetOverlayNotificationInset(
        int nHorizontalInset,
        int nVerticalInset)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUtils _ptr is null!");
        Platform.Linux64.Native.SteamAPI_ISteamUtils_SetOverlayNotificationInset(this._ptr, nHorizontalInset, nVerticalInset);
      }

      public virtual bool ISteamUtils_IsSteamInBigPictureMode()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamUtils_IsSteamInBigPictureMode(this._ptr) : throw new Exception("ISteamUtils _ptr is null!");
      }

      public virtual void ISteamUtils_StartVRDashboard()
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUtils _ptr is null!");
        Platform.Linux64.Native.SteamAPI_ISteamUtils_StartVRDashboard(this._ptr);
      }

      public virtual bool ISteamUtils_IsVRHeadsetStreamingEnabled()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamUtils_IsVRHeadsetStreamingEnabled(this._ptr) : throw new Exception("ISteamUtils _ptr is null!");
      }

      public virtual void ISteamUtils_SetVRHeadsetStreamingEnabled([MarshalAs(UnmanagedType.U1)] bool bEnabled)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUtils _ptr is null!");
        Platform.Linux64.Native.SteamAPI_ISteamUtils_SetVRHeadsetStreamingEnabled(this._ptr, bEnabled);
      }

      public virtual int ISteamMatchmaking_GetFavoriteGameCount()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamMatchmaking_GetFavoriteGameCount(this._ptr) : throw new Exception("ISteamMatchmaking _ptr is null!");
      }

      public virtual bool ISteamMatchmaking_GetFavoriteGame(
        int iGame,
        ref uint pnAppID,
        out uint pnIP,
        out ushort pnConnPort,
        out ushort pnQueryPort,
        out uint punFlags,
        out uint pRTime32LastPlayedOnServer)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmaking _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamMatchmaking_GetFavoriteGame(this._ptr, iGame, ref pnAppID, out pnIP, out pnConnPort, out pnQueryPort, out punFlags, out pRTime32LastPlayedOnServer);
      }

      public virtual int ISteamMatchmaking_AddFavoriteGame(
        uint nAppID,
        uint nIP,
        ushort nConnPort,
        ushort nQueryPort,
        uint unFlags,
        uint rTime32LastPlayedOnServer)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmaking _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamMatchmaking_AddFavoriteGame(this._ptr, nAppID, nIP, nConnPort, nQueryPort, unFlags, rTime32LastPlayedOnServer);
      }

      public virtual bool ISteamMatchmaking_RemoveFavoriteGame(
        uint nAppID,
        uint nIP,
        ushort nConnPort,
        ushort nQueryPort,
        uint unFlags)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmaking _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamMatchmaking_RemoveFavoriteGame(this._ptr, nAppID, nIP, nConnPort, nQueryPort, unFlags);
      }

      public virtual SteamAPICall_t ISteamMatchmaking_RequestLobbyList()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamMatchmaking_RequestLobbyList(this._ptr) : throw new Exception("ISteamMatchmaking _ptr is null!");
      }

      public virtual void ISteamMatchmaking_AddRequestLobbyListStringFilter(
        string pchKeyToMatch,
        string pchValueToMatch,
        LobbyComparison eComparisonType)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmaking _ptr is null!");
        Platform.Linux64.Native.SteamAPI_ISteamMatchmaking_AddRequestLobbyListStringFilter(this._ptr, pchKeyToMatch, pchValueToMatch, eComparisonType);
      }

      public virtual void ISteamMatchmaking_AddRequestLobbyListNumericalFilter(
        string pchKeyToMatch,
        int nValueToMatch,
        LobbyComparison eComparisonType)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmaking _ptr is null!");
        Platform.Linux64.Native.SteamAPI_ISteamMatchmaking_AddRequestLobbyListNumericalFilter(this._ptr, pchKeyToMatch, nValueToMatch, eComparisonType);
      }

      public virtual void ISteamMatchmaking_AddRequestLobbyListNearValueFilter(
        string pchKeyToMatch,
        int nValueToBeCloseTo)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmaking _ptr is null!");
        Platform.Linux64.Native.SteamAPI_ISteamMatchmaking_AddRequestLobbyListNearValueFilter(this._ptr, pchKeyToMatch, nValueToBeCloseTo);
      }

      public virtual void ISteamMatchmaking_AddRequestLobbyListFilterSlotsAvailable(
        int nSlotsAvailable)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmaking _ptr is null!");
        Platform.Linux64.Native.SteamAPI_ISteamMatchmaking_AddRequestLobbyListFilterSlotsAvailable(this._ptr, nSlotsAvailable);
      }

      public virtual void ISteamMatchmaking_AddRequestLobbyListDistanceFilter(
        LobbyDistanceFilter eLobbyDistanceFilter)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmaking _ptr is null!");
        Platform.Linux64.Native.SteamAPI_ISteamMatchmaking_AddRequestLobbyListDistanceFilter(this._ptr, eLobbyDistanceFilter);
      }

      public virtual void ISteamMatchmaking_AddRequestLobbyListResultCountFilter(int cMaxResults)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmaking _ptr is null!");
        Platform.Linux64.Native.SteamAPI_ISteamMatchmaking_AddRequestLobbyListResultCountFilter(this._ptr, cMaxResults);
      }

      public virtual void ISteamMatchmaking_AddRequestLobbyListCompatibleMembersFilter(
        ulong steamIDLobby)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmaking _ptr is null!");
        Platform.Linux64.Native.SteamAPI_ISteamMatchmaking_AddRequestLobbyListCompatibleMembersFilter(this._ptr, steamIDLobby);
      }

      public virtual CSteamID ISteamMatchmaking_GetLobbyByIndex(int iLobby)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamMatchmaking_GetLobbyByIndex(this._ptr, iLobby) : throw new Exception("ISteamMatchmaking _ptr is null!");
      }

      public virtual SteamAPICall_t ISteamMatchmaking_CreateLobby(
        LobbyType eLobbyType,
        int cMaxMembers)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmaking _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamMatchmaking_CreateLobby(this._ptr, eLobbyType, cMaxMembers);
      }

      public virtual SteamAPICall_t ISteamMatchmaking_JoinLobby(ulong steamIDLobby)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamMatchmaking_JoinLobby(this._ptr, steamIDLobby) : throw new Exception("ISteamMatchmaking _ptr is null!");
      }

      public virtual void ISteamMatchmaking_LeaveLobby(ulong steamIDLobby)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmaking _ptr is null!");
        Platform.Linux64.Native.SteamAPI_ISteamMatchmaking_LeaveLobby(this._ptr, steamIDLobby);
      }

      public virtual bool ISteamMatchmaking_InviteUserToLobby(
        ulong steamIDLobby,
        ulong steamIDInvitee)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmaking _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamMatchmaking_InviteUserToLobby(this._ptr, steamIDLobby, steamIDInvitee);
      }

      public virtual int ISteamMatchmaking_GetNumLobbyMembers(ulong steamIDLobby)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamMatchmaking_GetNumLobbyMembers(this._ptr, steamIDLobby) : throw new Exception("ISteamMatchmaking _ptr is null!");
      }

      public virtual CSteamID ISteamMatchmaking_GetLobbyMemberByIndex(
        ulong steamIDLobby,
        int iMember)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmaking _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamMatchmaking_GetLobbyMemberByIndex(this._ptr, steamIDLobby, iMember);
      }

      public virtual IntPtr ISteamMatchmaking_GetLobbyData(ulong steamIDLobby, string pchKey)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmaking _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamMatchmaking_GetLobbyData(this._ptr, steamIDLobby, pchKey);
      }

      public virtual bool ISteamMatchmaking_SetLobbyData(
        ulong steamIDLobby,
        string pchKey,
        string pchValue)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmaking _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamMatchmaking_SetLobbyData(this._ptr, steamIDLobby, pchKey, pchValue);
      }

      public virtual int ISteamMatchmaking_GetLobbyDataCount(ulong steamIDLobby)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamMatchmaking_GetLobbyDataCount(this._ptr, steamIDLobby) : throw new Exception("ISteamMatchmaking _ptr is null!");
      }

      public virtual bool ISteamMatchmaking_GetLobbyDataByIndex(
        ulong steamIDLobby,
        int iLobbyData,
        StringBuilder pchKey,
        int cchKeyBufferSize,
        StringBuilder pchValue,
        int cchValueBufferSize)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmaking _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamMatchmaking_GetLobbyDataByIndex(this._ptr, steamIDLobby, iLobbyData, pchKey, cchKeyBufferSize, pchValue, cchValueBufferSize);
      }

      public virtual bool ISteamMatchmaking_DeleteLobbyData(ulong steamIDLobby, string pchKey)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmaking _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamMatchmaking_DeleteLobbyData(this._ptr, steamIDLobby, pchKey);
      }

      public virtual IntPtr ISteamMatchmaking_GetLobbyMemberData(
        ulong steamIDLobby,
        ulong steamIDUser,
        string pchKey)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmaking _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamMatchmaking_GetLobbyMemberData(this._ptr, steamIDLobby, steamIDUser, pchKey);
      }

      public virtual void ISteamMatchmaking_SetLobbyMemberData(
        ulong steamIDLobby,
        string pchKey,
        string pchValue)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmaking _ptr is null!");
        Platform.Linux64.Native.SteamAPI_ISteamMatchmaking_SetLobbyMemberData(this._ptr, steamIDLobby, pchKey, pchValue);
      }

      public virtual bool ISteamMatchmaking_SendLobbyChatMsg(
        ulong steamIDLobby,
        IntPtr pvMsgBody,
        int cubMsgBody)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmaking _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamMatchmaking_SendLobbyChatMsg(this._ptr, steamIDLobby, pvMsgBody, cubMsgBody);
      }

      public virtual int ISteamMatchmaking_GetLobbyChatEntry(
        ulong steamIDLobby,
        int iChatID,
        out ulong pSteamIDUser,
        IntPtr pvData,
        int cubData,
        out ChatEntryType peChatEntryType)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmaking _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamMatchmaking_GetLobbyChatEntry(this._ptr, steamIDLobby, iChatID, out pSteamIDUser, pvData, cubData, out peChatEntryType);
      }

      public virtual bool ISteamMatchmaking_RequestLobbyData(ulong steamIDLobby)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamMatchmaking_RequestLobbyData(this._ptr, steamIDLobby) : throw new Exception("ISteamMatchmaking _ptr is null!");
      }

      public virtual void ISteamMatchmaking_SetLobbyGameServer(
        ulong steamIDLobby,
        uint unGameServerIP,
        ushort unGameServerPort,
        ulong steamIDGameServer)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmaking _ptr is null!");
        Platform.Linux64.Native.SteamAPI_ISteamMatchmaking_SetLobbyGameServer(this._ptr, steamIDLobby, unGameServerIP, unGameServerPort, steamIDGameServer);
      }

      public virtual bool ISteamMatchmaking_GetLobbyGameServer(
        ulong steamIDLobby,
        out uint punGameServerIP,
        out ushort punGameServerPort,
        out ulong psteamIDGameServer)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamMatchmaking_GetLobbyGameServer(this._ptr, steamIDLobby, out punGameServerIP, out punGameServerPort, out psteamIDGameServer) : throw new Exception("ISteamMatchmaking _ptr is null!");
      }

      public virtual bool ISteamMatchmaking_SetLobbyMemberLimit(ulong steamIDLobby, int cMaxMembers)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmaking _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamMatchmaking_SetLobbyMemberLimit(this._ptr, steamIDLobby, cMaxMembers);
      }

      public virtual int ISteamMatchmaking_GetLobbyMemberLimit(ulong steamIDLobby)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamMatchmaking_GetLobbyMemberLimit(this._ptr, steamIDLobby) : throw new Exception("ISteamMatchmaking _ptr is null!");
      }

      public virtual bool ISteamMatchmaking_SetLobbyType(ulong steamIDLobby, LobbyType eLobbyType)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmaking _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamMatchmaking_SetLobbyType(this._ptr, steamIDLobby, eLobbyType);
      }

      public virtual bool ISteamMatchmaking_SetLobbyJoinable(
        ulong steamIDLobby,
        [MarshalAs(UnmanagedType.U1)] bool bLobbyJoinable)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmaking _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamMatchmaking_SetLobbyJoinable(this._ptr, steamIDLobby, bLobbyJoinable);
      }

      public virtual CSteamID ISteamMatchmaking_GetLobbyOwner(ulong steamIDLobby)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamMatchmaking_GetLobbyOwner(this._ptr, steamIDLobby) : throw new Exception("ISteamMatchmaking _ptr is null!");
      }

      public virtual bool ISteamMatchmaking_SetLobbyOwner(ulong steamIDLobby, ulong steamIDNewOwner)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmaking _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamMatchmaking_SetLobbyOwner(this._ptr, steamIDLobby, steamIDNewOwner);
      }

      public virtual bool ISteamMatchmaking_SetLinkedLobby(
        ulong steamIDLobby,
        ulong steamIDLobbyDependent)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmaking _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamMatchmaking_SetLinkedLobby(this._ptr, steamIDLobby, steamIDLobbyDependent);
      }

      public virtual HServerListRequest ISteamMatchmakingServers_RequestInternetServerList(
        uint iApp,
        IntPtr ppchFilters,
        uint nFilters,
        IntPtr pRequestServersResponse)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmakingServers _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamMatchmakingServers_RequestInternetServerList(this._ptr, iApp, ppchFilters, nFilters, pRequestServersResponse);
      }

      public virtual HServerListRequest ISteamMatchmakingServers_RequestLANServerList(
        uint iApp,
        IntPtr pRequestServersResponse)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmakingServers _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamMatchmakingServers_RequestLANServerList(this._ptr, iApp, pRequestServersResponse);
      }

      public virtual HServerListRequest ISteamMatchmakingServers_RequestFriendsServerList(
        uint iApp,
        IntPtr ppchFilters,
        uint nFilters,
        IntPtr pRequestServersResponse)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmakingServers _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamMatchmakingServers_RequestFriendsServerList(this._ptr, iApp, ppchFilters, nFilters, pRequestServersResponse);
      }

      public virtual HServerListRequest ISteamMatchmakingServers_RequestFavoritesServerList(
        uint iApp,
        IntPtr ppchFilters,
        uint nFilters,
        IntPtr pRequestServersResponse)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmakingServers _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamMatchmakingServers_RequestFavoritesServerList(this._ptr, iApp, ppchFilters, nFilters, pRequestServersResponse);
      }

      public virtual HServerListRequest ISteamMatchmakingServers_RequestHistoryServerList(
        uint iApp,
        IntPtr ppchFilters,
        uint nFilters,
        IntPtr pRequestServersResponse)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmakingServers _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamMatchmakingServers_RequestHistoryServerList(this._ptr, iApp, ppchFilters, nFilters, pRequestServersResponse);
      }

      public virtual HServerListRequest ISteamMatchmakingServers_RequestSpectatorServerList(
        uint iApp,
        IntPtr ppchFilters,
        uint nFilters,
        IntPtr pRequestServersResponse)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmakingServers _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamMatchmakingServers_RequestSpectatorServerList(this._ptr, iApp, ppchFilters, nFilters, pRequestServersResponse);
      }

      public virtual void ISteamMatchmakingServers_ReleaseRequest(IntPtr hServerListRequest)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmakingServers _ptr is null!");
        Platform.Linux64.Native.SteamAPI_ISteamMatchmakingServers_ReleaseRequest(this._ptr, hServerListRequest);
      }

      public virtual IntPtr ISteamMatchmakingServers_GetServerDetails(IntPtr hRequest, int iServer)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmakingServers _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamMatchmakingServers_GetServerDetails(this._ptr, hRequest, iServer);
      }

      public virtual void ISteamMatchmakingServers_CancelQuery(IntPtr hRequest)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmakingServers _ptr is null!");
        Platform.Linux64.Native.SteamAPI_ISteamMatchmakingServers_CancelQuery(this._ptr, hRequest);
      }

      public virtual void ISteamMatchmakingServers_RefreshQuery(IntPtr hRequest)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmakingServers _ptr is null!");
        Platform.Linux64.Native.SteamAPI_ISteamMatchmakingServers_RefreshQuery(this._ptr, hRequest);
      }

      public virtual bool ISteamMatchmakingServers_IsRefreshing(IntPtr hRequest)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamMatchmakingServers_IsRefreshing(this._ptr, hRequest) : throw new Exception("ISteamMatchmakingServers _ptr is null!");
      }

      public virtual int ISteamMatchmakingServers_GetServerCount(IntPtr hRequest)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamMatchmakingServers_GetServerCount(this._ptr, hRequest) : throw new Exception("ISteamMatchmakingServers _ptr is null!");
      }

      public virtual void ISteamMatchmakingServers_RefreshServer(IntPtr hRequest, int iServer)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmakingServers _ptr is null!");
        Platform.Linux64.Native.SteamAPI_ISteamMatchmakingServers_RefreshServer(this._ptr, hRequest, iServer);
      }

      public virtual HServerQuery ISteamMatchmakingServers_PingServer(
        uint unIP,
        ushort usPort,
        IntPtr pRequestServersResponse)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmakingServers _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamMatchmakingServers_PingServer(this._ptr, unIP, usPort, pRequestServersResponse);
      }

      public virtual HServerQuery ISteamMatchmakingServers_PlayerDetails(
        uint unIP,
        ushort usPort,
        IntPtr pRequestServersResponse)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmakingServers _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamMatchmakingServers_PlayerDetails(this._ptr, unIP, usPort, pRequestServersResponse);
      }

      public virtual HServerQuery ISteamMatchmakingServers_ServerRules(
        uint unIP,
        ushort usPort,
        IntPtr pRequestServersResponse)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmakingServers _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamMatchmakingServers_ServerRules(this._ptr, unIP, usPort, pRequestServersResponse);
      }

      public virtual void ISteamMatchmakingServers_CancelServerQuery(int hServerQuery)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmakingServers _ptr is null!");
        Platform.Linux64.Native.SteamAPI_ISteamMatchmakingServers_CancelServerQuery(this._ptr, hServerQuery);
      }

      public virtual bool ISteamRemoteStorage_FileWrite(string pchFile, IntPtr pvData, int cubData)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamRemoteStorage _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamRemoteStorage_FileWrite(this._ptr, pchFile, pvData, cubData);
      }

      public virtual int ISteamRemoteStorage_FileRead(
        string pchFile,
        IntPtr pvData,
        int cubDataToRead)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamRemoteStorage _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamRemoteStorage_FileRead(this._ptr, pchFile, pvData, cubDataToRead);
      }

      public virtual SteamAPICall_t ISteamRemoteStorage_FileWriteAsync(
        string pchFile,
        IntPtr pvData,
        uint cubData)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamRemoteStorage _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamRemoteStorage_FileWriteAsync(this._ptr, pchFile, pvData, cubData);
      }

      public virtual SteamAPICall_t ISteamRemoteStorage_FileReadAsync(
        string pchFile,
        uint nOffset,
        uint cubToRead)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamRemoteStorage _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamRemoteStorage_FileReadAsync(this._ptr, pchFile, nOffset, cubToRead);
      }

      public virtual bool ISteamRemoteStorage_FileReadAsyncComplete(
        ulong hReadCall,
        IntPtr pvBuffer,
        uint cubToRead)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamRemoteStorage _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamRemoteStorage_FileReadAsyncComplete(this._ptr, hReadCall, pvBuffer, cubToRead);
      }

      public virtual bool ISteamRemoteStorage_FileForget(string pchFile)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamRemoteStorage_FileForget(this._ptr, pchFile) : throw new Exception("ISteamRemoteStorage _ptr is null!");
      }

      public virtual bool ISteamRemoteStorage_FileDelete(string pchFile)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamRemoteStorage_FileDelete(this._ptr, pchFile) : throw new Exception("ISteamRemoteStorage _ptr is null!");
      }

      public virtual SteamAPICall_t ISteamRemoteStorage_FileShare(string pchFile)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamRemoteStorage_FileShare(this._ptr, pchFile) : throw new Exception("ISteamRemoteStorage _ptr is null!");
      }

      public virtual bool ISteamRemoteStorage_SetSyncPlatforms(
        string pchFile,
        RemoteStoragePlatform eRemoteStoragePlatform)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamRemoteStorage _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamRemoteStorage_SetSyncPlatforms(this._ptr, pchFile, eRemoteStoragePlatform);
      }

      public virtual UGCFileWriteStreamHandle_t ISteamRemoteStorage_FileWriteStreamOpen(
        string pchFile)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamRemoteStorage_FileWriteStreamOpen(this._ptr, pchFile) : throw new Exception("ISteamRemoteStorage _ptr is null!");
      }

      public virtual bool ISteamRemoteStorage_FileWriteStreamWriteChunk(
        ulong writeHandle,
        IntPtr pvData,
        int cubData)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamRemoteStorage _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamRemoteStorage_FileWriteStreamWriteChunk(this._ptr, writeHandle, pvData, cubData);
      }

      public virtual bool ISteamRemoteStorage_FileWriteStreamClose(ulong writeHandle)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamRemoteStorage_FileWriteStreamClose(this._ptr, writeHandle) : throw new Exception("ISteamRemoteStorage _ptr is null!");
      }

      public virtual bool ISteamRemoteStorage_FileWriteStreamCancel(ulong writeHandle)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamRemoteStorage_FileWriteStreamCancel(this._ptr, writeHandle) : throw new Exception("ISteamRemoteStorage _ptr is null!");
      }

      public virtual bool ISteamRemoteStorage_FileExists(string pchFile)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamRemoteStorage_FileExists(this._ptr, pchFile) : throw new Exception("ISteamRemoteStorage _ptr is null!");
      }

      public virtual bool ISteamRemoteStorage_FilePersisted(string pchFile)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamRemoteStorage_FilePersisted(this._ptr, pchFile) : throw new Exception("ISteamRemoteStorage _ptr is null!");
      }

      public virtual int ISteamRemoteStorage_GetFileSize(string pchFile)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamRemoteStorage_GetFileSize(this._ptr, pchFile) : throw new Exception("ISteamRemoteStorage _ptr is null!");
      }

      public virtual long ISteamRemoteStorage_GetFileTimestamp(string pchFile)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamRemoteStorage_GetFileTimestamp(this._ptr, pchFile) : throw new Exception("ISteamRemoteStorage _ptr is null!");
      }

      public virtual RemoteStoragePlatform ISteamRemoteStorage_GetSyncPlatforms(string pchFile)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamRemoteStorage_GetSyncPlatforms(this._ptr, pchFile) : throw new Exception("ISteamRemoteStorage _ptr is null!");
      }

      public virtual int ISteamRemoteStorage_GetFileCount()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamRemoteStorage_GetFileCount(this._ptr) : throw new Exception("ISteamRemoteStorage _ptr is null!");
      }

      public virtual IntPtr ISteamRemoteStorage_GetFileNameAndSize(
        int iFile,
        out int pnFileSizeInBytes)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamRemoteStorage_GetFileNameAndSize(this._ptr, iFile, out pnFileSizeInBytes) : throw new Exception("ISteamRemoteStorage _ptr is null!");
      }

      public virtual bool ISteamRemoteStorage_GetQuota(
        out ulong pnTotalBytes,
        out ulong puAvailableBytes)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamRemoteStorage_GetQuota(this._ptr, out pnTotalBytes, out puAvailableBytes) : throw new Exception("ISteamRemoteStorage _ptr is null!");
      }

      public virtual bool ISteamRemoteStorage_IsCloudEnabledForAccount()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamRemoteStorage_IsCloudEnabledForAccount(this._ptr) : throw new Exception("ISteamRemoteStorage _ptr is null!");
      }

      public virtual bool ISteamRemoteStorage_IsCloudEnabledForApp()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamRemoteStorage_IsCloudEnabledForApp(this._ptr) : throw new Exception("ISteamRemoteStorage _ptr is null!");
      }

      public virtual void ISteamRemoteStorage_SetCloudEnabledForApp([MarshalAs(UnmanagedType.U1)] bool bEnabled)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamRemoteStorage _ptr is null!");
        Platform.Linux64.Native.SteamAPI_ISteamRemoteStorage_SetCloudEnabledForApp(this._ptr, bEnabled);
      }

      public virtual SteamAPICall_t ISteamRemoteStorage_UGCDownload(ulong hContent, uint unPriority)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamRemoteStorage _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamRemoteStorage_UGCDownload(this._ptr, hContent, unPriority);
      }

      public virtual bool ISteamRemoteStorage_GetUGCDownloadProgress(
        ulong hContent,
        out int pnBytesDownloaded,
        out int pnBytesExpected)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamRemoteStorage_GetUGCDownloadProgress(this._ptr, hContent, out pnBytesDownloaded, out pnBytesExpected) : throw new Exception("ISteamRemoteStorage _ptr is null!");
      }

      public virtual bool ISteamRemoteStorage_GetUGCDetails(
        ulong hContent,
        ref uint pnAppID,
        StringBuilder ppchName,
        out int pnFileSizeInBytes,
        out ulong pSteamIDOwner)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamRemoteStorage _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamRemoteStorage_GetUGCDetails(this._ptr, hContent, ref pnAppID, ppchName, out pnFileSizeInBytes, out pSteamIDOwner);
      }

      public virtual int ISteamRemoteStorage_UGCRead(
        ulong hContent,
        IntPtr pvData,
        int cubDataToRead,
        uint cOffset,
        UGCReadAction eAction)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamRemoteStorage _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamRemoteStorage_UGCRead(this._ptr, hContent, pvData, cubDataToRead, cOffset, eAction);
      }

      public virtual int ISteamRemoteStorage_GetCachedUGCCount()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamRemoteStorage_GetCachedUGCCount(this._ptr) : throw new Exception("ISteamRemoteStorage _ptr is null!");
      }

      public virtual UGCHandle_t ISteamRemoteStorage_GetCachedUGCHandle(int iCachedContent)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamRemoteStorage_GetCachedUGCHandle(this._ptr, iCachedContent) : throw new Exception("ISteamRemoteStorage _ptr is null!");
      }

      public virtual SteamAPICall_t ISteamRemoteStorage_PublishWorkshopFile(
        string pchFile,
        string pchPreviewFile,
        uint nConsumerAppId,
        string pchTitle,
        string pchDescription,
        RemoteStoragePublishedFileVisibility eVisibility,
        ref SteamParamStringArray_t pTags,
        WorkshopFileType eWorkshopFileType)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamRemoteStorage _ptr is null!");
        SteamParamStringArray_t.PackSmall pTags1 = new SteamParamStringArray_t.PackSmall();
        SteamAPICall_t steamApiCallT = Platform.Linux64.Native.SteamAPI_ISteamRemoteStorage_PublishWorkshopFile(this._ptr, pchFile, pchPreviewFile, nConsumerAppId, pchTitle, pchDescription, eVisibility, ref pTags1, eWorkshopFileType);
        pTags = (SteamParamStringArray_t) pTags1;
        return steamApiCallT;
      }

      public virtual PublishedFileUpdateHandle_t ISteamRemoteStorage_CreatePublishedFileUpdateRequest(
        ulong unPublishedFileId)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamRemoteStorage_CreatePublishedFileUpdateRequest(this._ptr, unPublishedFileId) : throw new Exception("ISteamRemoteStorage _ptr is null!");
      }

      public virtual bool ISteamRemoteStorage_UpdatePublishedFileFile(
        ulong updateHandle,
        string pchFile)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamRemoteStorage _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamRemoteStorage_UpdatePublishedFileFile(this._ptr, updateHandle, pchFile);
      }

      public virtual bool ISteamRemoteStorage_UpdatePublishedFilePreviewFile(
        ulong updateHandle,
        string pchPreviewFile)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamRemoteStorage _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamRemoteStorage_UpdatePublishedFilePreviewFile(this._ptr, updateHandle, pchPreviewFile);
      }

      public virtual bool ISteamRemoteStorage_UpdatePublishedFileTitle(
        ulong updateHandle,
        string pchTitle)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamRemoteStorage _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamRemoteStorage_UpdatePublishedFileTitle(this._ptr, updateHandle, pchTitle);
      }

      public virtual bool ISteamRemoteStorage_UpdatePublishedFileDescription(
        ulong updateHandle,
        string pchDescription)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamRemoteStorage _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamRemoteStorage_UpdatePublishedFileDescription(this._ptr, updateHandle, pchDescription);
      }

      public virtual bool ISteamRemoteStorage_UpdatePublishedFileVisibility(
        ulong updateHandle,
        RemoteStoragePublishedFileVisibility eVisibility)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamRemoteStorage _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamRemoteStorage_UpdatePublishedFileVisibility(this._ptr, updateHandle, eVisibility);
      }

      public virtual bool ISteamRemoteStorage_UpdatePublishedFileTags(
        ulong updateHandle,
        ref SteamParamStringArray_t pTags)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamRemoteStorage _ptr is null!");
        SteamParamStringArray_t.PackSmall pTags1 = new SteamParamStringArray_t.PackSmall();
        bool flag = Platform.Linux64.Native.SteamAPI_ISteamRemoteStorage_UpdatePublishedFileTags(this._ptr, updateHandle, ref pTags1);
        pTags = (SteamParamStringArray_t) pTags1;
        return flag;
      }

      public virtual SteamAPICall_t ISteamRemoteStorage_CommitPublishedFileUpdate(ulong updateHandle)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamRemoteStorage_CommitPublishedFileUpdate(this._ptr, updateHandle) : throw new Exception("ISteamRemoteStorage _ptr is null!");
      }

      public virtual SteamAPICall_t ISteamRemoteStorage_GetPublishedFileDetails(
        ulong unPublishedFileId,
        uint unMaxSecondsOld)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamRemoteStorage _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamRemoteStorage_GetPublishedFileDetails(this._ptr, unPublishedFileId, unMaxSecondsOld);
      }

      public virtual SteamAPICall_t ISteamRemoteStorage_DeletePublishedFile(ulong unPublishedFileId)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamRemoteStorage_DeletePublishedFile(this._ptr, unPublishedFileId) : throw new Exception("ISteamRemoteStorage _ptr is null!");
      }

      public virtual SteamAPICall_t ISteamRemoteStorage_EnumerateUserPublishedFiles(
        uint unStartIndex)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamRemoteStorage_EnumerateUserPublishedFiles(this._ptr, unStartIndex) : throw new Exception("ISteamRemoteStorage _ptr is null!");
      }

      public virtual SteamAPICall_t ISteamRemoteStorage_SubscribePublishedFile(
        ulong unPublishedFileId)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamRemoteStorage_SubscribePublishedFile(this._ptr, unPublishedFileId) : throw new Exception("ISteamRemoteStorage _ptr is null!");
      }

      public virtual SteamAPICall_t ISteamRemoteStorage_EnumerateUserSubscribedFiles(
        uint unStartIndex)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamRemoteStorage_EnumerateUserSubscribedFiles(this._ptr, unStartIndex) : throw new Exception("ISteamRemoteStorage _ptr is null!");
      }

      public virtual SteamAPICall_t ISteamRemoteStorage_UnsubscribePublishedFile(
        ulong unPublishedFileId)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamRemoteStorage_UnsubscribePublishedFile(this._ptr, unPublishedFileId) : throw new Exception("ISteamRemoteStorage _ptr is null!");
      }

      public virtual bool ISteamRemoteStorage_UpdatePublishedFileSetChangeDescription(
        ulong updateHandle,
        string pchChangeDescription)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamRemoteStorage _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamRemoteStorage_UpdatePublishedFileSetChangeDescription(this._ptr, updateHandle, pchChangeDescription);
      }

      public virtual SteamAPICall_t ISteamRemoteStorage_GetPublishedItemVoteDetails(
        ulong unPublishedFileId)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamRemoteStorage_GetPublishedItemVoteDetails(this._ptr, unPublishedFileId) : throw new Exception("ISteamRemoteStorage _ptr is null!");
      }

      public virtual SteamAPICall_t ISteamRemoteStorage_UpdateUserPublishedItemVote(
        ulong unPublishedFileId,
        [MarshalAs(UnmanagedType.U1)] bool bVoteUp)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamRemoteStorage _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamRemoteStorage_UpdateUserPublishedItemVote(this._ptr, unPublishedFileId, bVoteUp);
      }

      public virtual SteamAPICall_t ISteamRemoteStorage_GetUserPublishedItemVoteDetails(
        ulong unPublishedFileId)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamRemoteStorage_GetUserPublishedItemVoteDetails(this._ptr, unPublishedFileId) : throw new Exception("ISteamRemoteStorage _ptr is null!");
      }

      public virtual SteamAPICall_t ISteamRemoteStorage_EnumerateUserSharedWorkshopFiles(
        ulong steamId,
        uint unStartIndex,
        ref SteamParamStringArray_t pRequiredTags,
        ref SteamParamStringArray_t pExcludedTags)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamRemoteStorage _ptr is null!");
        SteamParamStringArray_t.PackSmall pRequiredTags1 = new SteamParamStringArray_t.PackSmall();
        SteamParamStringArray_t.PackSmall pExcludedTags1 = new SteamParamStringArray_t.PackSmall();
        SteamAPICall_t steamApiCallT = Platform.Linux64.Native.SteamAPI_ISteamRemoteStorage_EnumerateUserSharedWorkshopFiles(this._ptr, steamId, unStartIndex, ref pRequiredTags1, ref pExcludedTags1);
        pRequiredTags = (SteamParamStringArray_t) pRequiredTags1;
        pExcludedTags = (SteamParamStringArray_t) pExcludedTags1;
        return steamApiCallT;
      }

      public virtual SteamAPICall_t ISteamRemoteStorage_PublishVideo(
        WorkshopVideoProvider eVideoProvider,
        string pchVideoAccount,
        string pchVideoIdentifier,
        string pchPreviewFile,
        uint nConsumerAppId,
        string pchTitle,
        string pchDescription,
        RemoteStoragePublishedFileVisibility eVisibility,
        ref SteamParamStringArray_t pTags)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamRemoteStorage _ptr is null!");
        SteamParamStringArray_t.PackSmall pTags1 = new SteamParamStringArray_t.PackSmall();
        SteamAPICall_t steamApiCallT = Platform.Linux64.Native.SteamAPI_ISteamRemoteStorage_PublishVideo(this._ptr, eVideoProvider, pchVideoAccount, pchVideoIdentifier, pchPreviewFile, nConsumerAppId, pchTitle, pchDescription, eVisibility, ref pTags1);
        pTags = (SteamParamStringArray_t) pTags1;
        return steamApiCallT;
      }

      public virtual SteamAPICall_t ISteamRemoteStorage_SetUserPublishedFileAction(
        ulong unPublishedFileId,
        WorkshopFileAction eAction)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamRemoteStorage _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamRemoteStorage_SetUserPublishedFileAction(this._ptr, unPublishedFileId, eAction);
      }

      public virtual SteamAPICall_t ISteamRemoteStorage_EnumeratePublishedFilesByUserAction(
        WorkshopFileAction eAction,
        uint unStartIndex)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamRemoteStorage _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamRemoteStorage_EnumeratePublishedFilesByUserAction(this._ptr, eAction, unStartIndex);
      }

      public virtual SteamAPICall_t ISteamRemoteStorage_EnumeratePublishedWorkshopFiles(
        WorkshopEnumerationType eEnumerationType,
        uint unStartIndex,
        uint unCount,
        uint unDays,
        ref SteamParamStringArray_t pTags,
        ref SteamParamStringArray_t pUserTags)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamRemoteStorage _ptr is null!");
        SteamParamStringArray_t.PackSmall pTags1 = new SteamParamStringArray_t.PackSmall();
        SteamParamStringArray_t.PackSmall pUserTags1 = new SteamParamStringArray_t.PackSmall();
        SteamAPICall_t steamApiCallT = Platform.Linux64.Native.SteamAPI_ISteamRemoteStorage_EnumeratePublishedWorkshopFiles(this._ptr, eEnumerationType, unStartIndex, unCount, unDays, ref pTags1, ref pUserTags1);
        pTags = (SteamParamStringArray_t) pTags1;
        pUserTags = (SteamParamStringArray_t) pUserTags1;
        return steamApiCallT;
      }

      public virtual SteamAPICall_t ISteamRemoteStorage_UGCDownloadToLocation(
        ulong hContent,
        string pchLocation,
        uint unPriority)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamRemoteStorage _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamRemoteStorage_UGCDownloadToLocation(this._ptr, hContent, pchLocation, unPriority);
      }

      public virtual bool ISteamUserStats_RequestCurrentStats()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamUserStats_RequestCurrentStats(this._ptr) : throw new Exception("ISteamUserStats _ptr is null!");
      }

      public virtual bool ISteamUserStats_GetStat(string pchName, out int pData)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamUserStats_GetStat(this._ptr, pchName, out pData) : throw new Exception("ISteamUserStats _ptr is null!");
      }

      public virtual bool ISteamUserStats_GetStat0(string pchName, out float pData)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamUserStats_GetStat0(this._ptr, pchName, out pData) : throw new Exception("ISteamUserStats _ptr is null!");
      }

      public virtual bool ISteamUserStats_SetStat(string pchName, int nData)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUserStats _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamUserStats_SetStat(this._ptr, pchName, nData);
      }

      public virtual bool ISteamUserStats_SetStat0(string pchName, float fData)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUserStats _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamUserStats_SetStat0(this._ptr, pchName, fData);
      }

      public virtual bool ISteamUserStats_UpdateAvgRateStat(
        string pchName,
        float flCountThisSession,
        double dSessionLength)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUserStats _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamUserStats_UpdateAvgRateStat(this._ptr, pchName, flCountThisSession, dSessionLength);
      }

      public virtual bool ISteamUserStats_GetAchievement(string pchName, [MarshalAs(UnmanagedType.U1)] ref bool pbAchieved)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUserStats _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamUserStats_GetAchievement(this._ptr, pchName, ref pbAchieved);
      }

      public virtual bool ISteamUserStats_SetAchievement(string pchName)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamUserStats_SetAchievement(this._ptr, pchName) : throw new Exception("ISteamUserStats _ptr is null!");
      }

      public virtual bool ISteamUserStats_ClearAchievement(string pchName)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamUserStats_ClearAchievement(this._ptr, pchName) : throw new Exception("ISteamUserStats _ptr is null!");
      }

      public virtual bool ISteamUserStats_GetAchievementAndUnlockTime(
        string pchName,
        [MarshalAs(UnmanagedType.U1)] ref bool pbAchieved,
        out uint punUnlockTime)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUserStats _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamUserStats_GetAchievementAndUnlockTime(this._ptr, pchName, ref pbAchieved, out punUnlockTime);
      }

      public virtual bool ISteamUserStats_StoreStats()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamUserStats_StoreStats(this._ptr) : throw new Exception("ISteamUserStats _ptr is null!");
      }

      public virtual int ISteamUserStats_GetAchievementIcon(string pchName)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamUserStats_GetAchievementIcon(this._ptr, pchName) : throw new Exception("ISteamUserStats _ptr is null!");
      }

      public virtual IntPtr ISteamUserStats_GetAchievementDisplayAttribute(
        string pchName,
        string pchKey)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUserStats _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamUserStats_GetAchievementDisplayAttribute(this._ptr, pchName, pchKey);
      }

      public virtual bool ISteamUserStats_IndicateAchievementProgress(
        string pchName,
        uint nCurProgress,
        uint nMaxProgress)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUserStats _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamUserStats_IndicateAchievementProgress(this._ptr, pchName, nCurProgress, nMaxProgress);
      }

      public virtual uint ISteamUserStats_GetNumAchievements()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamUserStats_GetNumAchievements(this._ptr) : throw new Exception("ISteamUserStats _ptr is null!");
      }

      public virtual IntPtr ISteamUserStats_GetAchievementName(uint iAchievement)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamUserStats_GetAchievementName(this._ptr, iAchievement) : throw new Exception("ISteamUserStats _ptr is null!");
      }

      public virtual SteamAPICall_t ISteamUserStats_RequestUserStats(ulong steamIDUser)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamUserStats_RequestUserStats(this._ptr, steamIDUser) : throw new Exception("ISteamUserStats _ptr is null!");
      }

      public virtual bool ISteamUserStats_GetUserStat(
        ulong steamIDUser,
        string pchName,
        out int pData)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUserStats _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamUserStats_GetUserStat(this._ptr, steamIDUser, pchName, out pData);
      }

      public virtual bool ISteamUserStats_GetUserStat0(
        ulong steamIDUser,
        string pchName,
        out float pData)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUserStats _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamUserStats_GetUserStat0(this._ptr, steamIDUser, pchName, out pData);
      }

      public virtual bool ISteamUserStats_GetUserAchievement(
        ulong steamIDUser,
        string pchName,
        [MarshalAs(UnmanagedType.U1)] ref bool pbAchieved)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUserStats _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamUserStats_GetUserAchievement(this._ptr, steamIDUser, pchName, ref pbAchieved);
      }

      public virtual bool ISteamUserStats_GetUserAchievementAndUnlockTime(
        ulong steamIDUser,
        string pchName,
        [MarshalAs(UnmanagedType.U1)] ref bool pbAchieved,
        out uint punUnlockTime)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUserStats _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamUserStats_GetUserAchievementAndUnlockTime(this._ptr, steamIDUser, pchName, ref pbAchieved, out punUnlockTime);
      }

      public virtual bool ISteamUserStats_ResetAllStats([MarshalAs(UnmanagedType.U1)] bool bAchievementsToo)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamUserStats_ResetAllStats(this._ptr, bAchievementsToo) : throw new Exception("ISteamUserStats _ptr is null!");
      }

      public virtual SteamAPICall_t ISteamUserStats_FindOrCreateLeaderboard(
        string pchLeaderboardName,
        LeaderboardSortMethod eLeaderboardSortMethod,
        LeaderboardDisplayType eLeaderboardDisplayType)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUserStats _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamUserStats_FindOrCreateLeaderboard(this._ptr, pchLeaderboardName, eLeaderboardSortMethod, eLeaderboardDisplayType);
      }

      public virtual SteamAPICall_t ISteamUserStats_FindLeaderboard(string pchLeaderboardName)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamUserStats_FindLeaderboard(this._ptr, pchLeaderboardName) : throw new Exception("ISteamUserStats _ptr is null!");
      }

      public virtual IntPtr ISteamUserStats_GetLeaderboardName(ulong hSteamLeaderboard)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamUserStats_GetLeaderboardName(this._ptr, hSteamLeaderboard) : throw new Exception("ISteamUserStats _ptr is null!");
      }

      public virtual int ISteamUserStats_GetLeaderboardEntryCount(ulong hSteamLeaderboard)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamUserStats_GetLeaderboardEntryCount(this._ptr, hSteamLeaderboard) : throw new Exception("ISteamUserStats _ptr is null!");
      }

      public virtual LeaderboardSortMethod ISteamUserStats_GetLeaderboardSortMethod(
        ulong hSteamLeaderboard)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamUserStats_GetLeaderboardSortMethod(this._ptr, hSteamLeaderboard) : throw new Exception("ISteamUserStats _ptr is null!");
      }

      public virtual LeaderboardDisplayType ISteamUserStats_GetLeaderboardDisplayType(
        ulong hSteamLeaderboard)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamUserStats_GetLeaderboardDisplayType(this._ptr, hSteamLeaderboard) : throw new Exception("ISteamUserStats _ptr is null!");
      }

      public virtual SteamAPICall_t ISteamUserStats_DownloadLeaderboardEntries(
        ulong hSteamLeaderboard,
        LeaderboardDataRequest eLeaderboardDataRequest,
        int nRangeStart,
        int nRangeEnd)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUserStats _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamUserStats_DownloadLeaderboardEntries(this._ptr, hSteamLeaderboard, eLeaderboardDataRequest, nRangeStart, nRangeEnd);
      }

      public virtual SteamAPICall_t ISteamUserStats_DownloadLeaderboardEntriesForUsers(
        ulong hSteamLeaderboard,
        IntPtr prgUsers,
        int cUsers)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUserStats _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamUserStats_DownloadLeaderboardEntriesForUsers(this._ptr, hSteamLeaderboard, prgUsers, cUsers);
      }

      public virtual bool ISteamUserStats_GetDownloadedLeaderboardEntry(
        ulong hSteamLeaderboardEntries,
        int index,
        ref LeaderboardEntry_t pLeaderboardEntry,
        IntPtr pDetails,
        int cDetailsMax)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUserStats _ptr is null!");
        LeaderboardEntry_t.PackSmall pLeaderboardEntry1 = new LeaderboardEntry_t.PackSmall();
        bool leaderboardEntry = Platform.Linux64.Native.SteamAPI_ISteamUserStats_GetDownloadedLeaderboardEntry(this._ptr, hSteamLeaderboardEntries, index, ref pLeaderboardEntry1, pDetails, cDetailsMax);
        pLeaderboardEntry = (LeaderboardEntry_t) pLeaderboardEntry1;
        return leaderboardEntry;
      }

      public virtual SteamAPICall_t ISteamUserStats_UploadLeaderboardScore(
        ulong hSteamLeaderboard,
        LeaderboardUploadScoreMethod eLeaderboardUploadScoreMethod,
        int nScore,
        int[] pScoreDetails,
        int cScoreDetailsCount)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUserStats _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamUserStats_UploadLeaderboardScore(this._ptr, hSteamLeaderboard, eLeaderboardUploadScoreMethod, nScore, pScoreDetails, cScoreDetailsCount);
      }

      public virtual SteamAPICall_t ISteamUserStats_AttachLeaderboardUGC(
        ulong hSteamLeaderboard,
        ulong hUGC)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUserStats _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamUserStats_AttachLeaderboardUGC(this._ptr, hSteamLeaderboard, hUGC);
      }

      public virtual SteamAPICall_t ISteamUserStats_GetNumberOfCurrentPlayers()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamUserStats_GetNumberOfCurrentPlayers(this._ptr) : throw new Exception("ISteamUserStats _ptr is null!");
      }

      public virtual SteamAPICall_t ISteamUserStats_RequestGlobalAchievementPercentages()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamUserStats_RequestGlobalAchievementPercentages(this._ptr) : throw new Exception("ISteamUserStats _ptr is null!");
      }

      public virtual int ISteamUserStats_GetMostAchievedAchievementInfo(
        StringBuilder pchName,
        uint unNameBufLen,
        out float pflPercent,
        [MarshalAs(UnmanagedType.U1)] ref bool pbAchieved)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUserStats _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamUserStats_GetMostAchievedAchievementInfo(this._ptr, pchName, unNameBufLen, out pflPercent, ref pbAchieved);
      }

      public virtual int ISteamUserStats_GetNextMostAchievedAchievementInfo(
        int iIteratorPrevious,
        StringBuilder pchName,
        uint unNameBufLen,
        out float pflPercent,
        [MarshalAs(UnmanagedType.U1)] ref bool pbAchieved)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUserStats _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamUserStats_GetNextMostAchievedAchievementInfo(this._ptr, iIteratorPrevious, pchName, unNameBufLen, out pflPercent, ref pbAchieved);
      }

      public virtual bool ISteamUserStats_GetAchievementAchievedPercent(
        string pchName,
        out float pflPercent)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamUserStats_GetAchievementAchievedPercent(this._ptr, pchName, out pflPercent) : throw new Exception("ISteamUserStats _ptr is null!");
      }

      public virtual SteamAPICall_t ISteamUserStats_RequestGlobalStats(int nHistoryDays)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamUserStats_RequestGlobalStats(this._ptr, nHistoryDays) : throw new Exception("ISteamUserStats _ptr is null!");
      }

      public virtual bool ISteamUserStats_GetGlobalStat(string pchStatName, out long pData)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamUserStats_GetGlobalStat(this._ptr, pchStatName, out pData) : throw new Exception("ISteamUserStats _ptr is null!");
      }

      public virtual bool ISteamUserStats_GetGlobalStat0(string pchStatName, out double pData)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamUserStats_GetGlobalStat0(this._ptr, pchStatName, out pData) : throw new Exception("ISteamUserStats _ptr is null!");
      }

      public virtual int ISteamUserStats_GetGlobalStatHistory(
        string pchStatName,
        out long pData,
        uint cubData)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUserStats _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamUserStats_GetGlobalStatHistory(this._ptr, pchStatName, out pData, cubData);
      }

      public virtual int ISteamUserStats_GetGlobalStatHistory0(
        string pchStatName,
        out double pData,
        uint cubData)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUserStats _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamUserStats_GetGlobalStatHistory0(this._ptr, pchStatName, out pData, cubData);
      }

      public virtual bool ISteamApps_BIsSubscribed()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamApps_BIsSubscribed(this._ptr) : throw new Exception("ISteamApps _ptr is null!");
      }

      public virtual bool ISteamApps_BIsLowViolence()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamApps_BIsLowViolence(this._ptr) : throw new Exception("ISteamApps _ptr is null!");
      }

      public virtual bool ISteamApps_BIsCybercafe()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamApps_BIsCybercafe(this._ptr) : throw new Exception("ISteamApps _ptr is null!");
      }

      public virtual bool ISteamApps_BIsVACBanned()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamApps_BIsVACBanned(this._ptr) : throw new Exception("ISteamApps _ptr is null!");
      }

      public virtual IntPtr ISteamApps_GetCurrentGameLanguage()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamApps_GetCurrentGameLanguage(this._ptr) : throw new Exception("ISteamApps _ptr is null!");
      }

      public virtual IntPtr ISteamApps_GetAvailableGameLanguages()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamApps_GetAvailableGameLanguages(this._ptr) : throw new Exception("ISteamApps _ptr is null!");
      }

      public virtual bool ISteamApps_BIsSubscribedApp(uint appID)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamApps_BIsSubscribedApp(this._ptr, appID) : throw new Exception("ISteamApps _ptr is null!");
      }

      public virtual bool ISteamApps_BIsDlcInstalled(uint appID)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamApps_BIsDlcInstalled(this._ptr, appID) : throw new Exception("ISteamApps _ptr is null!");
      }

      public virtual uint ISteamApps_GetEarliestPurchaseUnixTime(uint nAppID)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamApps_GetEarliestPurchaseUnixTime(this._ptr, nAppID) : throw new Exception("ISteamApps _ptr is null!");
      }

      public virtual bool ISteamApps_BIsSubscribedFromFreeWeekend()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamApps_BIsSubscribedFromFreeWeekend(this._ptr) : throw new Exception("ISteamApps _ptr is null!");
      }

      public virtual int ISteamApps_GetDLCCount()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamApps_GetDLCCount(this._ptr) : throw new Exception("ISteamApps _ptr is null!");
      }

      public virtual bool ISteamApps_BGetDLCDataByIndex(
        int iDLC,
        ref uint pAppID,
        [MarshalAs(UnmanagedType.U1)] ref bool pbAvailable,
        StringBuilder pchName,
        int cchNameBufferSize)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamApps _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamApps_BGetDLCDataByIndex(this._ptr, iDLC, ref pAppID, ref pbAvailable, pchName, cchNameBufferSize);
      }

      public virtual void ISteamApps_InstallDLC(uint nAppID)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamApps _ptr is null!");
        Platform.Linux64.Native.SteamAPI_ISteamApps_InstallDLC(this._ptr, nAppID);
      }

      public virtual void ISteamApps_UninstallDLC(uint nAppID)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamApps _ptr is null!");
        Platform.Linux64.Native.SteamAPI_ISteamApps_UninstallDLC(this._ptr, nAppID);
      }

      public virtual void ISteamApps_RequestAppProofOfPurchaseKey(uint nAppID)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamApps _ptr is null!");
        Platform.Linux64.Native.SteamAPI_ISteamApps_RequestAppProofOfPurchaseKey(this._ptr, nAppID);
      }

      public virtual bool ISteamApps_GetCurrentBetaName(
        StringBuilder pchName,
        int cchNameBufferSize)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamApps _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamApps_GetCurrentBetaName(this._ptr, pchName, cchNameBufferSize);
      }

      public virtual bool ISteamApps_MarkContentCorrupt([MarshalAs(UnmanagedType.U1)] bool bMissingFilesOnly)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamApps_MarkContentCorrupt(this._ptr, bMissingFilesOnly) : throw new Exception("ISteamApps _ptr is null!");
      }

      public virtual uint ISteamApps_GetInstalledDepots(
        uint appID,
        IntPtr pvecDepots,
        uint cMaxDepots)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamApps _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamApps_GetInstalledDepots(this._ptr, appID, pvecDepots, cMaxDepots);
      }

      public virtual uint ISteamApps_GetAppInstallDir(
        uint appID,
        StringBuilder pchFolder,
        uint cchFolderBufferSize)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamApps _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamApps_GetAppInstallDir(this._ptr, appID, pchFolder, cchFolderBufferSize);
      }

      public virtual bool ISteamApps_BIsAppInstalled(uint appID)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamApps_BIsAppInstalled(this._ptr, appID) : throw new Exception("ISteamApps _ptr is null!");
      }

      public virtual CSteamID ISteamApps_GetAppOwner()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamApps_GetAppOwner(this._ptr) : throw new Exception("ISteamApps _ptr is null!");
      }

      public virtual IntPtr ISteamApps_GetLaunchQueryParam(string pchKey)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamApps_GetLaunchQueryParam(this._ptr, pchKey) : throw new Exception("ISteamApps _ptr is null!");
      }

      public virtual bool ISteamApps_GetDlcDownloadProgress(
        uint nAppID,
        out ulong punBytesDownloaded,
        out ulong punBytesTotal)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamApps_GetDlcDownloadProgress(this._ptr, nAppID, out punBytesDownloaded, out punBytesTotal) : throw new Exception("ISteamApps _ptr is null!");
      }

      public virtual int ISteamApps_GetAppBuildId()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamApps_GetAppBuildId(this._ptr) : throw new Exception("ISteamApps _ptr is null!");
      }

      public virtual void ISteamApps_RequestAllProofOfPurchaseKeys()
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamApps _ptr is null!");
        Platform.Linux64.Native.SteamAPI_ISteamApps_RequestAllProofOfPurchaseKeys(this._ptr);
      }

      public virtual SteamAPICall_t ISteamApps_GetFileDetails(string pszFileName)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamApps_GetFileDetails(this._ptr, pszFileName) : throw new Exception("ISteamApps _ptr is null!");
      }

      public virtual bool ISteamNetworking_SendP2PPacket(
        ulong steamIDRemote,
        IntPtr pubData,
        uint cubData,
        P2PSend eP2PSendType,
        int nChannel)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamNetworking _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamNetworking_SendP2PPacket(this._ptr, steamIDRemote, pubData, cubData, eP2PSendType, nChannel);
      }

      public virtual bool ISteamNetworking_IsP2PPacketAvailable(out uint pcubMsgSize, int nChannel)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamNetworking_IsP2PPacketAvailable(this._ptr, out pcubMsgSize, nChannel) : throw new Exception("ISteamNetworking _ptr is null!");
      }

      public virtual bool ISteamNetworking_ReadP2PPacket(
        IntPtr pubDest,
        uint cubDest,
        out uint pcubMsgSize,
        out ulong psteamIDRemote,
        int nChannel)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamNetworking _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamNetworking_ReadP2PPacket(this._ptr, pubDest, cubDest, out pcubMsgSize, out psteamIDRemote, nChannel);
      }

      public virtual bool ISteamNetworking_AcceptP2PSessionWithUser(ulong steamIDRemote)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamNetworking_AcceptP2PSessionWithUser(this._ptr, steamIDRemote) : throw new Exception("ISteamNetworking _ptr is null!");
      }

      public virtual bool ISteamNetworking_CloseP2PSessionWithUser(ulong steamIDRemote)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamNetworking_CloseP2PSessionWithUser(this._ptr, steamIDRemote) : throw new Exception("ISteamNetworking _ptr is null!");
      }

      public virtual bool ISteamNetworking_CloseP2PChannelWithUser(
        ulong steamIDRemote,
        int nChannel)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamNetworking _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamNetworking_CloseP2PChannelWithUser(this._ptr, steamIDRemote, nChannel);
      }

      public virtual bool ISteamNetworking_GetP2PSessionState(
        ulong steamIDRemote,
        ref P2PSessionState_t pConnectionState)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamNetworking _ptr is null!");
        P2PSessionState_t.PackSmall pConnectionState1 = new P2PSessionState_t.PackSmall();
        bool p2PsessionState = Platform.Linux64.Native.SteamAPI_ISteamNetworking_GetP2PSessionState(this._ptr, steamIDRemote, ref pConnectionState1);
        pConnectionState = (P2PSessionState_t) pConnectionState1;
        return p2PsessionState;
      }

      public virtual bool ISteamNetworking_AllowP2PPacketRelay([MarshalAs(UnmanagedType.U1)] bool bAllow)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamNetworking_AllowP2PPacketRelay(this._ptr, bAllow) : throw new Exception("ISteamNetworking _ptr is null!");
      }

      public virtual SNetListenSocket_t ISteamNetworking_CreateListenSocket(
        int nVirtualP2PPort,
        uint nIP,
        ushort nPort,
        [MarshalAs(UnmanagedType.U1)] bool bAllowUseOfPacketRelay)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamNetworking _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamNetworking_CreateListenSocket(this._ptr, nVirtualP2PPort, nIP, nPort, bAllowUseOfPacketRelay);
      }

      public virtual SNetSocket_t ISteamNetworking_CreateP2PConnectionSocket(
        ulong steamIDTarget,
        int nVirtualPort,
        int nTimeoutSec,
        [MarshalAs(UnmanagedType.U1)] bool bAllowUseOfPacketRelay)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamNetworking _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamNetworking_CreateP2PConnectionSocket(this._ptr, steamIDTarget, nVirtualPort, nTimeoutSec, bAllowUseOfPacketRelay);
      }

      public virtual SNetSocket_t ISteamNetworking_CreateConnectionSocket(
        uint nIP,
        ushort nPort,
        int nTimeoutSec)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamNetworking _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamNetworking_CreateConnectionSocket(this._ptr, nIP, nPort, nTimeoutSec);
      }

      public virtual bool ISteamNetworking_DestroySocket(uint hSocket, [MarshalAs(UnmanagedType.U1)] bool bNotifyRemoteEnd)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamNetworking _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamNetworking_DestroySocket(this._ptr, hSocket, bNotifyRemoteEnd);
      }

      public virtual bool ISteamNetworking_DestroyListenSocket(uint hSocket, [MarshalAs(UnmanagedType.U1)] bool bNotifyRemoteEnd)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamNetworking _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamNetworking_DestroyListenSocket(this._ptr, hSocket, bNotifyRemoteEnd);
      }

      public virtual bool ISteamNetworking_SendDataOnSocket(
        uint hSocket,
        IntPtr pubData,
        uint cubData,
        [MarshalAs(UnmanagedType.U1)] bool bReliable)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamNetworking _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamNetworking_SendDataOnSocket(this._ptr, hSocket, pubData, cubData, bReliable);
      }

      public virtual bool ISteamNetworking_IsDataAvailableOnSocket(
        uint hSocket,
        out uint pcubMsgSize)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamNetworking_IsDataAvailableOnSocket(this._ptr, hSocket, out pcubMsgSize) : throw new Exception("ISteamNetworking _ptr is null!");
      }

      public virtual bool ISteamNetworking_RetrieveDataFromSocket(
        uint hSocket,
        IntPtr pubDest,
        uint cubDest,
        out uint pcubMsgSize)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamNetworking _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamNetworking_RetrieveDataFromSocket(this._ptr, hSocket, pubDest, cubDest, out pcubMsgSize);
      }

      public virtual bool ISteamNetworking_IsDataAvailable(
        uint hListenSocket,
        out uint pcubMsgSize,
        ref uint phSocket)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamNetworking _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamNetworking_IsDataAvailable(this._ptr, hListenSocket, out pcubMsgSize, ref phSocket);
      }

      public virtual bool ISteamNetworking_RetrieveData(
        uint hListenSocket,
        IntPtr pubDest,
        uint cubDest,
        out uint pcubMsgSize,
        ref uint phSocket)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamNetworking _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamNetworking_RetrieveData(this._ptr, hListenSocket, pubDest, cubDest, out pcubMsgSize, ref phSocket);
      }

      public virtual bool ISteamNetworking_GetSocketInfo(
        uint hSocket,
        out ulong pSteamIDRemote,
        IntPtr peSocketStatus,
        out uint punIPRemote,
        out ushort punPortRemote)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamNetworking _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamNetworking_GetSocketInfo(this._ptr, hSocket, out pSteamIDRemote, peSocketStatus, out punIPRemote, out punPortRemote);
      }

      public virtual bool ISteamNetworking_GetListenSocketInfo(
        uint hListenSocket,
        out uint pnIP,
        out ushort pnPort)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamNetworking_GetListenSocketInfo(this._ptr, hListenSocket, out pnIP, out pnPort) : throw new Exception("ISteamNetworking _ptr is null!");
      }

      public virtual SNetSocketConnectionType ISteamNetworking_GetSocketConnectionType(uint hSocket)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamNetworking_GetSocketConnectionType(this._ptr, hSocket) : throw new Exception("ISteamNetworking _ptr is null!");
      }

      public virtual int ISteamNetworking_GetMaxPacketSize(uint hSocket)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamNetworking_GetMaxPacketSize(this._ptr, hSocket) : throw new Exception("ISteamNetworking _ptr is null!");
      }

      public virtual ScreenshotHandle ISteamScreenshots_WriteScreenshot(
        IntPtr pubRGB,
        uint cubRGB,
        int nWidth,
        int nHeight)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamScreenshots _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamScreenshots_WriteScreenshot(this._ptr, pubRGB, cubRGB, nWidth, nHeight);
      }

      public virtual ScreenshotHandle ISteamScreenshots_AddScreenshotToLibrary(
        string pchFilename,
        string pchThumbnailFilename,
        int nWidth,
        int nHeight)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamScreenshots _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamScreenshots_AddScreenshotToLibrary(this._ptr, pchFilename, pchThumbnailFilename, nWidth, nHeight);
      }

      public virtual void ISteamScreenshots_TriggerScreenshot()
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamScreenshots _ptr is null!");
        Platform.Linux64.Native.SteamAPI_ISteamScreenshots_TriggerScreenshot(this._ptr);
      }

      public virtual void ISteamScreenshots_HookScreenshots([MarshalAs(UnmanagedType.U1)] bool bHook)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamScreenshots _ptr is null!");
        Platform.Linux64.Native.SteamAPI_ISteamScreenshots_HookScreenshots(this._ptr, bHook);
      }

      public virtual bool ISteamScreenshots_SetLocation(uint hScreenshot, string pchLocation)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamScreenshots _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamScreenshots_SetLocation(this._ptr, hScreenshot, pchLocation);
      }

      public virtual bool ISteamScreenshots_TagUser(uint hScreenshot, ulong steamID)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamScreenshots _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamScreenshots_TagUser(this._ptr, hScreenshot, steamID);
      }

      public virtual bool ISteamScreenshots_TagPublishedFile(
        uint hScreenshot,
        ulong unPublishedFileID)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamScreenshots _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamScreenshots_TagPublishedFile(this._ptr, hScreenshot, unPublishedFileID);
      }

      public virtual bool ISteamScreenshots_IsScreenshotsHooked()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamScreenshots_IsScreenshotsHooked(this._ptr) : throw new Exception("ISteamScreenshots _ptr is null!");
      }

      public virtual ScreenshotHandle ISteamScreenshots_AddVRScreenshotToLibrary(
        VRScreenshotType eType,
        string pchFilename,
        string pchVRFilename)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamScreenshots _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamScreenshots_AddVRScreenshotToLibrary(this._ptr, eType, pchFilename, pchVRFilename);
      }

      public virtual bool ISteamMusic_BIsEnabled()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamMusic_BIsEnabled(this._ptr) : throw new Exception("ISteamMusic _ptr is null!");
      }

      public virtual bool ISteamMusic_BIsPlaying()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamMusic_BIsPlaying(this._ptr) : throw new Exception("ISteamMusic _ptr is null!");
      }

      public virtual AudioPlayback_Status ISteamMusic_GetPlaybackStatus()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamMusic_GetPlaybackStatus(this._ptr) : throw new Exception("ISteamMusic _ptr is null!");
      }

      public virtual void ISteamMusic_Play()
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMusic _ptr is null!");
        Platform.Linux64.Native.SteamAPI_ISteamMusic_Play(this._ptr);
      }

      public virtual void ISteamMusic_Pause()
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMusic _ptr is null!");
        Platform.Linux64.Native.SteamAPI_ISteamMusic_Pause(this._ptr);
      }

      public virtual void ISteamMusic_PlayPrevious()
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMusic _ptr is null!");
        Platform.Linux64.Native.SteamAPI_ISteamMusic_PlayPrevious(this._ptr);
      }

      public virtual void ISteamMusic_PlayNext()
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMusic _ptr is null!");
        Platform.Linux64.Native.SteamAPI_ISteamMusic_PlayNext(this._ptr);
      }

      public virtual void ISteamMusic_SetVolume(float flVolume)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMusic _ptr is null!");
        Platform.Linux64.Native.SteamAPI_ISteamMusic_SetVolume(this._ptr, flVolume);
      }

      public virtual float ISteamMusic_GetVolume()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamMusic_GetVolume(this._ptr) : throw new Exception("ISteamMusic _ptr is null!");
      }

      public virtual bool ISteamMusicRemote_RegisterSteamMusicRemote(string pchName)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamMusicRemote_RegisterSteamMusicRemote(this._ptr, pchName) : throw new Exception("ISteamMusicRemote _ptr is null!");
      }

      public virtual bool ISteamMusicRemote_DeregisterSteamMusicRemote()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamMusicRemote_DeregisterSteamMusicRemote(this._ptr) : throw new Exception("ISteamMusicRemote _ptr is null!");
      }

      public virtual bool ISteamMusicRemote_BIsCurrentMusicRemote()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamMusicRemote_BIsCurrentMusicRemote(this._ptr) : throw new Exception("ISteamMusicRemote _ptr is null!");
      }

      public virtual bool ISteamMusicRemote_BActivationSuccess([MarshalAs(UnmanagedType.U1)] bool bValue)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamMusicRemote_BActivationSuccess(this._ptr, bValue) : throw new Exception("ISteamMusicRemote _ptr is null!");
      }

      public virtual bool ISteamMusicRemote_SetDisplayName(string pchDisplayName)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamMusicRemote_SetDisplayName(this._ptr, pchDisplayName) : throw new Exception("ISteamMusicRemote _ptr is null!");
      }

      public virtual bool ISteamMusicRemote_SetPNGIcon_64x64(IntPtr pvBuffer, uint cbBufferLength)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMusicRemote _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamMusicRemote_SetPNGIcon_64x64(this._ptr, pvBuffer, cbBufferLength);
      }

      public virtual bool ISteamMusicRemote_EnablePlayPrevious([MarshalAs(UnmanagedType.U1)] bool bValue)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamMusicRemote_EnablePlayPrevious(this._ptr, bValue) : throw new Exception("ISteamMusicRemote _ptr is null!");
      }

      public virtual bool ISteamMusicRemote_EnablePlayNext([MarshalAs(UnmanagedType.U1)] bool bValue)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamMusicRemote_EnablePlayNext(this._ptr, bValue) : throw new Exception("ISteamMusicRemote _ptr is null!");
      }

      public virtual bool ISteamMusicRemote_EnableShuffled([MarshalAs(UnmanagedType.U1)] bool bValue)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamMusicRemote_EnableShuffled(this._ptr, bValue) : throw new Exception("ISteamMusicRemote _ptr is null!");
      }

      public virtual bool ISteamMusicRemote_EnableLooped([MarshalAs(UnmanagedType.U1)] bool bValue)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamMusicRemote_EnableLooped(this._ptr, bValue) : throw new Exception("ISteamMusicRemote _ptr is null!");
      }

      public virtual bool ISteamMusicRemote_EnableQueue([MarshalAs(UnmanagedType.U1)] bool bValue)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamMusicRemote_EnableQueue(this._ptr, bValue) : throw new Exception("ISteamMusicRemote _ptr is null!");
      }

      public virtual bool ISteamMusicRemote_EnablePlaylists([MarshalAs(UnmanagedType.U1)] bool bValue)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamMusicRemote_EnablePlaylists(this._ptr, bValue) : throw new Exception("ISteamMusicRemote _ptr is null!");
      }

      public virtual bool ISteamMusicRemote_UpdatePlaybackStatus(AudioPlayback_Status nStatus)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamMusicRemote_UpdatePlaybackStatus(this._ptr, nStatus) : throw new Exception("ISteamMusicRemote _ptr is null!");
      }

      public virtual bool ISteamMusicRemote_UpdateShuffled([MarshalAs(UnmanagedType.U1)] bool bValue)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamMusicRemote_UpdateShuffled(this._ptr, bValue) : throw new Exception("ISteamMusicRemote _ptr is null!");
      }

      public virtual bool ISteamMusicRemote_UpdateLooped([MarshalAs(UnmanagedType.U1)] bool bValue)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamMusicRemote_UpdateLooped(this._ptr, bValue) : throw new Exception("ISteamMusicRemote _ptr is null!");
      }

      public virtual bool ISteamMusicRemote_UpdateVolume(float flValue)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamMusicRemote_UpdateVolume(this._ptr, flValue) : throw new Exception("ISteamMusicRemote _ptr is null!");
      }

      public virtual bool ISteamMusicRemote_CurrentEntryWillChange()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamMusicRemote_CurrentEntryWillChange(this._ptr) : throw new Exception("ISteamMusicRemote _ptr is null!");
      }

      public virtual bool ISteamMusicRemote_CurrentEntryIsAvailable([MarshalAs(UnmanagedType.U1)] bool bAvailable)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamMusicRemote_CurrentEntryIsAvailable(this._ptr, bAvailable) : throw new Exception("ISteamMusicRemote _ptr is null!");
      }

      public virtual bool ISteamMusicRemote_UpdateCurrentEntryText(string pchText)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamMusicRemote_UpdateCurrentEntryText(this._ptr, pchText) : throw new Exception("ISteamMusicRemote _ptr is null!");
      }

      public virtual bool ISteamMusicRemote_UpdateCurrentEntryElapsedSeconds(int nValue)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamMusicRemote_UpdateCurrentEntryElapsedSeconds(this._ptr, nValue) : throw new Exception("ISteamMusicRemote _ptr is null!");
      }

      public virtual bool ISteamMusicRemote_UpdateCurrentEntryCoverArt(
        IntPtr pvBuffer,
        uint cbBufferLength)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMusicRemote _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamMusicRemote_UpdateCurrentEntryCoverArt(this._ptr, pvBuffer, cbBufferLength);
      }

      public virtual bool ISteamMusicRemote_CurrentEntryDidChange()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamMusicRemote_CurrentEntryDidChange(this._ptr) : throw new Exception("ISteamMusicRemote _ptr is null!");
      }

      public virtual bool ISteamMusicRemote_QueueWillChange()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamMusicRemote_QueueWillChange(this._ptr) : throw new Exception("ISteamMusicRemote _ptr is null!");
      }

      public virtual bool ISteamMusicRemote_ResetQueueEntries()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamMusicRemote_ResetQueueEntries(this._ptr) : throw new Exception("ISteamMusicRemote _ptr is null!");
      }

      public virtual bool ISteamMusicRemote_SetQueueEntry(
        int nID,
        int nPosition,
        string pchEntryText)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMusicRemote _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamMusicRemote_SetQueueEntry(this._ptr, nID, nPosition, pchEntryText);
      }

      public virtual bool ISteamMusicRemote_SetCurrentQueueEntry(int nID)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamMusicRemote_SetCurrentQueueEntry(this._ptr, nID) : throw new Exception("ISteamMusicRemote _ptr is null!");
      }

      public virtual bool ISteamMusicRemote_QueueDidChange()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamMusicRemote_QueueDidChange(this._ptr) : throw new Exception("ISteamMusicRemote _ptr is null!");
      }

      public virtual bool ISteamMusicRemote_PlaylistWillChange()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamMusicRemote_PlaylistWillChange(this._ptr) : throw new Exception("ISteamMusicRemote _ptr is null!");
      }

      public virtual bool ISteamMusicRemote_ResetPlaylistEntries()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamMusicRemote_ResetPlaylistEntries(this._ptr) : throw new Exception("ISteamMusicRemote _ptr is null!");
      }

      public virtual bool ISteamMusicRemote_SetPlaylistEntry(
        int nID,
        int nPosition,
        string pchEntryText)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMusicRemote _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamMusicRemote_SetPlaylistEntry(this._ptr, nID, nPosition, pchEntryText);
      }

      public virtual bool ISteamMusicRemote_SetCurrentPlaylistEntry(int nID)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamMusicRemote_SetCurrentPlaylistEntry(this._ptr, nID) : throw new Exception("ISteamMusicRemote _ptr is null!");
      }

      public virtual bool ISteamMusicRemote_PlaylistDidChange()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamMusicRemote_PlaylistDidChange(this._ptr) : throw new Exception("ISteamMusicRemote _ptr is null!");
      }

      public virtual HTTPRequestHandle ISteamHTTP_CreateHTTPRequest(
        HTTPMethod eHTTPRequestMethod,
        string pchAbsoluteURL)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTTP _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamHTTP_CreateHTTPRequest(this._ptr, eHTTPRequestMethod, pchAbsoluteURL);
      }

      public virtual bool ISteamHTTP_SetHTTPRequestContextValue(uint hRequest, ulong ulContextValue)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTTP _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamHTTP_SetHTTPRequestContextValue(this._ptr, hRequest, ulContextValue);
      }

      public virtual bool ISteamHTTP_SetHTTPRequestNetworkActivityTimeout(
        uint hRequest,
        uint unTimeoutSeconds)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTTP _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamHTTP_SetHTTPRequestNetworkActivityTimeout(this._ptr, hRequest, unTimeoutSeconds);
      }

      public virtual bool ISteamHTTP_SetHTTPRequestHeaderValue(
        uint hRequest,
        string pchHeaderName,
        string pchHeaderValue)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTTP _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamHTTP_SetHTTPRequestHeaderValue(this._ptr, hRequest, pchHeaderName, pchHeaderValue);
      }

      public virtual bool ISteamHTTP_SetHTTPRequestGetOrPostParameter(
        uint hRequest,
        string pchParamName,
        string pchParamValue)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTTP _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamHTTP_SetHTTPRequestGetOrPostParameter(this._ptr, hRequest, pchParamName, pchParamValue);
      }

      public virtual bool ISteamHTTP_SendHTTPRequest(uint hRequest, ref ulong pCallHandle)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTTP _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamHTTP_SendHTTPRequest(this._ptr, hRequest, ref pCallHandle);
      }

      public virtual bool ISteamHTTP_SendHTTPRequestAndStreamResponse(
        uint hRequest,
        ref ulong pCallHandle)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTTP _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamHTTP_SendHTTPRequestAndStreamResponse(this._ptr, hRequest, ref pCallHandle);
      }

      public virtual bool ISteamHTTP_DeferHTTPRequest(uint hRequest)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamHTTP_DeferHTTPRequest(this._ptr, hRequest) : throw new Exception("ISteamHTTP _ptr is null!");
      }

      public virtual bool ISteamHTTP_PrioritizeHTTPRequest(uint hRequest)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamHTTP_PrioritizeHTTPRequest(this._ptr, hRequest) : throw new Exception("ISteamHTTP _ptr is null!");
      }

      public virtual bool ISteamHTTP_GetHTTPResponseHeaderSize(
        uint hRequest,
        string pchHeaderName,
        out uint unResponseHeaderSize)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTTP _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamHTTP_GetHTTPResponseHeaderSize(this._ptr, hRequest, pchHeaderName, out unResponseHeaderSize);
      }

      public virtual bool ISteamHTTP_GetHTTPResponseHeaderValue(
        uint hRequest,
        string pchHeaderName,
        out byte pHeaderValueBuffer,
        uint unBufferSize)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTTP _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamHTTP_GetHTTPResponseHeaderValue(this._ptr, hRequest, pchHeaderName, out pHeaderValueBuffer, unBufferSize);
      }

      public virtual bool ISteamHTTP_GetHTTPResponseBodySize(uint hRequest, out uint unBodySize)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamHTTP_GetHTTPResponseBodySize(this._ptr, hRequest, out unBodySize) : throw new Exception("ISteamHTTP _ptr is null!");
      }

      public virtual bool ISteamHTTP_GetHTTPResponseBodyData(
        uint hRequest,
        out byte pBodyDataBuffer,
        uint unBufferSize)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTTP _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamHTTP_GetHTTPResponseBodyData(this._ptr, hRequest, out pBodyDataBuffer, unBufferSize);
      }

      public virtual bool ISteamHTTP_GetHTTPStreamingResponseBodyData(
        uint hRequest,
        uint cOffset,
        out byte pBodyDataBuffer,
        uint unBufferSize)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTTP _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamHTTP_GetHTTPStreamingResponseBodyData(this._ptr, hRequest, cOffset, out pBodyDataBuffer, unBufferSize);
      }

      public virtual bool ISteamHTTP_ReleaseHTTPRequest(uint hRequest)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamHTTP_ReleaseHTTPRequest(this._ptr, hRequest) : throw new Exception("ISteamHTTP _ptr is null!");
      }

      public virtual bool ISteamHTTP_GetHTTPDownloadProgressPct(
        uint hRequest,
        out float pflPercentOut)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamHTTP_GetHTTPDownloadProgressPct(this._ptr, hRequest, out pflPercentOut) : throw new Exception("ISteamHTTP _ptr is null!");
      }

      public virtual bool ISteamHTTP_SetHTTPRequestRawPostBody(
        uint hRequest,
        string pchContentType,
        out byte pubBody,
        uint unBodyLen)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTTP _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamHTTP_SetHTTPRequestRawPostBody(this._ptr, hRequest, pchContentType, out pubBody, unBodyLen);
      }

      public virtual HTTPCookieContainerHandle ISteamHTTP_CreateCookieContainer(
        [MarshalAs(UnmanagedType.U1)] bool bAllowResponsesToModify)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamHTTP_CreateCookieContainer(this._ptr, bAllowResponsesToModify) : throw new Exception("ISteamHTTP _ptr is null!");
      }

      public virtual bool ISteamHTTP_ReleaseCookieContainer(uint hCookieContainer)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamHTTP_ReleaseCookieContainer(this._ptr, hCookieContainer) : throw new Exception("ISteamHTTP _ptr is null!");
      }

      public virtual bool ISteamHTTP_SetCookie(
        uint hCookieContainer,
        string pchHost,
        string pchUrl,
        string pchCookie)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTTP _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamHTTP_SetCookie(this._ptr, hCookieContainer, pchHost, pchUrl, pchCookie);
      }

      public virtual bool ISteamHTTP_SetHTTPRequestCookieContainer(
        uint hRequest,
        uint hCookieContainer)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTTP _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamHTTP_SetHTTPRequestCookieContainer(this._ptr, hRequest, hCookieContainer);
      }

      public virtual bool ISteamHTTP_SetHTTPRequestUserAgentInfo(
        uint hRequest,
        string pchUserAgentInfo)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTTP _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamHTTP_SetHTTPRequestUserAgentInfo(this._ptr, hRequest, pchUserAgentInfo);
      }

      public virtual bool ISteamHTTP_SetHTTPRequestRequiresVerifiedCertificate(
        uint hRequest,
        [MarshalAs(UnmanagedType.U1)] bool bRequireVerifiedCertificate)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTTP _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamHTTP_SetHTTPRequestRequiresVerifiedCertificate(this._ptr, hRequest, bRequireVerifiedCertificate);
      }

      public virtual bool ISteamHTTP_SetHTTPRequestAbsoluteTimeoutMS(
        uint hRequest,
        uint unMilliseconds)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTTP _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamHTTP_SetHTTPRequestAbsoluteTimeoutMS(this._ptr, hRequest, unMilliseconds);
      }

      public virtual bool ISteamHTTP_GetHTTPRequestWasTimedOut(
        uint hRequest,
        [MarshalAs(UnmanagedType.U1)] ref bool pbWasTimedOut)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTTP _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamHTTP_GetHTTPRequestWasTimedOut(this._ptr, hRequest, ref pbWasTimedOut);
      }

      public virtual ClientUnifiedMessageHandle ISteamUnifiedMessages_SendMethod(
        string pchServiceMethod,
        IntPtr pRequestBuffer,
        uint unRequestBufferSize,
        ulong unContext)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUnifiedMessages _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamUnifiedMessages_SendMethod(this._ptr, pchServiceMethod, pRequestBuffer, unRequestBufferSize, unContext);
      }

      public virtual bool ISteamUnifiedMessages_GetMethodResponseInfo(
        ulong hHandle,
        out uint punResponseSize,
        out Result peResult)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamUnifiedMessages_GetMethodResponseInfo(this._ptr, hHandle, out punResponseSize, out peResult) : throw new Exception("ISteamUnifiedMessages _ptr is null!");
      }

      public virtual bool ISteamUnifiedMessages_GetMethodResponseData(
        ulong hHandle,
        IntPtr pResponseBuffer,
        uint unResponseBufferSize,
        [MarshalAs(UnmanagedType.U1)] bool bAutoRelease)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUnifiedMessages _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamUnifiedMessages_GetMethodResponseData(this._ptr, hHandle, pResponseBuffer, unResponseBufferSize, bAutoRelease);
      }

      public virtual bool ISteamUnifiedMessages_ReleaseMethod(ulong hHandle)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamUnifiedMessages_ReleaseMethod(this._ptr, hHandle) : throw new Exception("ISteamUnifiedMessages _ptr is null!");
      }

      public virtual bool ISteamUnifiedMessages_SendNotification(
        string pchServiceNotification,
        IntPtr pNotificationBuffer,
        uint unNotificationBufferSize)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUnifiedMessages _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamUnifiedMessages_SendNotification(this._ptr, pchServiceNotification, pNotificationBuffer, unNotificationBufferSize);
      }

      public virtual bool ISteamController_Init()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamController_Init(this._ptr) : throw new Exception("ISteamController _ptr is null!");
      }

      public virtual bool ISteamController_Shutdown()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamController_Shutdown(this._ptr) : throw new Exception("ISteamController _ptr is null!");
      }

      public virtual void ISteamController_RunFrame()
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamController _ptr is null!");
        Platform.Linux64.Native.SteamAPI_ISteamController_RunFrame(this._ptr);
      }

      public virtual int ISteamController_GetConnectedControllers(IntPtr handlesOut)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamController_GetConnectedControllers(this._ptr, handlesOut) : throw new Exception("ISteamController _ptr is null!");
      }

      public virtual bool ISteamController_ShowBindingPanel(ulong controllerHandle)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamController_ShowBindingPanel(this._ptr, controllerHandle) : throw new Exception("ISteamController _ptr is null!");
      }

      public virtual ControllerActionSetHandle_t ISteamController_GetActionSetHandle(
        string pszActionSetName)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamController_GetActionSetHandle(this._ptr, pszActionSetName) : throw new Exception("ISteamController _ptr is null!");
      }

      public virtual void ISteamController_ActivateActionSet(
        ulong controllerHandle,
        ulong actionSetHandle)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamController _ptr is null!");
        Platform.Linux64.Native.SteamAPI_ISteamController_ActivateActionSet(this._ptr, controllerHandle, actionSetHandle);
      }

      public virtual ControllerActionSetHandle_t ISteamController_GetCurrentActionSet(
        ulong controllerHandle)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamController_GetCurrentActionSet(this._ptr, controllerHandle) : throw new Exception("ISteamController _ptr is null!");
      }

      public virtual ControllerDigitalActionHandle_t ISteamController_GetDigitalActionHandle(
        string pszActionName)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamController_GetDigitalActionHandle(this._ptr, pszActionName) : throw new Exception("ISteamController _ptr is null!");
      }

      public virtual ControllerDigitalActionData_t ISteamController_GetDigitalActionData(
        ulong controllerHandle,
        ulong digitalActionHandle)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamController _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamController_GetDigitalActionData(this._ptr, controllerHandle, digitalActionHandle);
      }

      public virtual int ISteamController_GetDigitalActionOrigins(
        ulong controllerHandle,
        ulong actionSetHandle,
        ulong digitalActionHandle,
        out ControllerActionOrigin originsOut)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamController _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamController_GetDigitalActionOrigins(this._ptr, controllerHandle, actionSetHandle, digitalActionHandle, out originsOut);
      }

      public virtual ControllerAnalogActionHandle_t ISteamController_GetAnalogActionHandle(
        string pszActionName)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamController_GetAnalogActionHandle(this._ptr, pszActionName) : throw new Exception("ISteamController _ptr is null!");
      }

      public virtual ControllerAnalogActionData_t ISteamController_GetAnalogActionData(
        ulong controllerHandle,
        ulong analogActionHandle)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamController _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamController_GetAnalogActionData(this._ptr, controllerHandle, analogActionHandle);
      }

      public virtual int ISteamController_GetAnalogActionOrigins(
        ulong controllerHandle,
        ulong actionSetHandle,
        ulong analogActionHandle,
        out ControllerActionOrigin originsOut)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamController _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamController_GetAnalogActionOrigins(this._ptr, controllerHandle, actionSetHandle, analogActionHandle, out originsOut);
      }

      public virtual void ISteamController_StopAnalogActionMomentum(
        ulong controllerHandle,
        ulong eAction)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamController _ptr is null!");
        Platform.Linux64.Native.SteamAPI_ISteamController_StopAnalogActionMomentum(this._ptr, controllerHandle, eAction);
      }

      public virtual void ISteamController_TriggerHapticPulse(
        ulong controllerHandle,
        SteamControllerPad eTargetPad,
        ushort usDurationMicroSec)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamController _ptr is null!");
        Platform.Linux64.Native.SteamAPI_ISteamController_TriggerHapticPulse(this._ptr, controllerHandle, eTargetPad, usDurationMicroSec);
      }

      public virtual void ISteamController_TriggerRepeatedHapticPulse(
        ulong controllerHandle,
        SteamControllerPad eTargetPad,
        ushort usDurationMicroSec,
        ushort usOffMicroSec,
        ushort unRepeat,
        uint nFlags)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamController _ptr is null!");
        Platform.Linux64.Native.SteamAPI_ISteamController_TriggerRepeatedHapticPulse(this._ptr, controllerHandle, eTargetPad, usDurationMicroSec, usOffMicroSec, unRepeat, nFlags);
      }

      public virtual void ISteamController_TriggerVibration(
        ulong controllerHandle,
        ushort usLeftSpeed,
        ushort usRightSpeed)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamController _ptr is null!");
        Platform.Linux64.Native.SteamAPI_ISteamController_TriggerVibration(this._ptr, controllerHandle, usLeftSpeed, usRightSpeed);
      }

      public virtual void ISteamController_SetLEDColor(
        ulong controllerHandle,
        byte nColorR,
        byte nColorG,
        byte nColorB,
        uint nFlags)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamController _ptr is null!");
        Platform.Linux64.Native.SteamAPI_ISteamController_SetLEDColor(this._ptr, controllerHandle, nColorR, nColorG, nColorB, nFlags);
      }

      public virtual int ISteamController_GetGamepadIndexForController(ulong ulControllerHandle)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamController_GetGamepadIndexForController(this._ptr, ulControllerHandle) : throw new Exception("ISteamController _ptr is null!");
      }

      public virtual ControllerHandle_t ISteamController_GetControllerForGamepadIndex(int nIndex)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamController_GetControllerForGamepadIndex(this._ptr, nIndex) : throw new Exception("ISteamController _ptr is null!");
      }

      public virtual ControllerMotionData_t ISteamController_GetMotionData(ulong controllerHandle)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamController_GetMotionData(this._ptr, controllerHandle) : throw new Exception("ISteamController _ptr is null!");
      }

      public virtual bool ISteamController_ShowDigitalActionOrigins(
        ulong controllerHandle,
        ulong digitalActionHandle,
        float flScale,
        float flXPosition,
        float flYPosition)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamController _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamController_ShowDigitalActionOrigins(this._ptr, controllerHandle, digitalActionHandle, flScale, flXPosition, flYPosition);
      }

      public virtual bool ISteamController_ShowAnalogActionOrigins(
        ulong controllerHandle,
        ulong analogActionHandle,
        float flScale,
        float flXPosition,
        float flYPosition)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamController _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamController_ShowAnalogActionOrigins(this._ptr, controllerHandle, analogActionHandle, flScale, flXPosition, flYPosition);
      }

      public virtual IntPtr ISteamController_GetStringForActionOrigin(ControllerActionOrigin eOrigin)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamController_GetStringForActionOrigin(this._ptr, eOrigin) : throw new Exception("ISteamController _ptr is null!");
      }

      public virtual IntPtr ISteamController_GetGlyphForActionOrigin(ControllerActionOrigin eOrigin)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamController_GetGlyphForActionOrigin(this._ptr, eOrigin) : throw new Exception("ISteamController _ptr is null!");
      }

      public virtual UGCQueryHandle_t ISteamUGC_CreateQueryUserUGCRequest(
        uint unAccountID,
        UserUGCList eListType,
        UGCMatchingUGCType eMatchingUGCType,
        UserUGCListSortOrder eSortOrder,
        uint nCreatorAppID,
        uint nConsumerAppID,
        uint unPage)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamUGC_CreateQueryUserUGCRequest(this._ptr, unAccountID, eListType, eMatchingUGCType, eSortOrder, nCreatorAppID, nConsumerAppID, unPage);
      }

      public virtual UGCQueryHandle_t ISteamUGC_CreateQueryAllUGCRequest(
        UGCQuery eQueryType,
        UGCMatchingUGCType eMatchingeMatchingUGCTypeFileType,
        uint nCreatorAppID,
        uint nConsumerAppID,
        uint unPage)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamUGC_CreateQueryAllUGCRequest(this._ptr, eQueryType, eMatchingeMatchingUGCTypeFileType, nCreatorAppID, nConsumerAppID, unPage);
      }

      public virtual UGCQueryHandle_t ISteamUGC_CreateQueryUGCDetailsRequest(
        IntPtr pvecPublishedFileID,
        uint unNumPublishedFileIDs)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamUGC_CreateQueryUGCDetailsRequest(this._ptr, pvecPublishedFileID, unNumPublishedFileIDs);
      }

      public virtual SteamAPICall_t ISteamUGC_SendQueryUGCRequest(ulong handle)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamUGC_SendQueryUGCRequest(this._ptr, handle) : throw new Exception("ISteamUGC _ptr is null!");
      }

      public virtual bool ISteamUGC_GetQueryUGCResult(
        ulong handle,
        uint index,
        ref SteamUGCDetails_t pDetails)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        SteamUGCDetails_t.PackSmall pDetails1 = new SteamUGCDetails_t.PackSmall();
        bool queryUgcResult = Platform.Linux64.Native.SteamAPI_ISteamUGC_GetQueryUGCResult(this._ptr, handle, index, ref pDetails1);
        pDetails = (SteamUGCDetails_t) pDetails1;
        return queryUgcResult;
      }

      public virtual bool ISteamUGC_GetQueryUGCPreviewURL(
        ulong handle,
        uint index,
        StringBuilder pchURL,
        uint cchURLSize)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamUGC_GetQueryUGCPreviewURL(this._ptr, handle, index, pchURL, cchURLSize);
      }

      public virtual bool ISteamUGC_GetQueryUGCMetadata(
        ulong handle,
        uint index,
        StringBuilder pchMetadata,
        uint cchMetadatasize)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamUGC_GetQueryUGCMetadata(this._ptr, handle, index, pchMetadata, cchMetadatasize);
      }

      public virtual bool ISteamUGC_GetQueryUGCChildren(
        ulong handle,
        uint index,
        IntPtr pvecPublishedFileID,
        uint cMaxEntries)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamUGC_GetQueryUGCChildren(this._ptr, handle, index, pvecPublishedFileID, cMaxEntries);
      }

      public virtual bool ISteamUGC_GetQueryUGCStatistic(
        ulong handle,
        uint index,
        ItemStatistic eStatType,
        out ulong pStatValue)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamUGC_GetQueryUGCStatistic(this._ptr, handle, index, eStatType, out pStatValue);
      }

      public virtual uint ISteamUGC_GetQueryUGCNumAdditionalPreviews(ulong handle, uint index)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamUGC_GetQueryUGCNumAdditionalPreviews(this._ptr, handle, index);
      }

      public virtual bool ISteamUGC_GetQueryUGCAdditionalPreview(
        ulong handle,
        uint index,
        uint previewIndex,
        StringBuilder pchURLOrVideoID,
        uint cchURLSize,
        StringBuilder pchOriginalFileName,
        uint cchOriginalFileNameSize,
        out ItemPreviewType pPreviewType)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamUGC_GetQueryUGCAdditionalPreview(this._ptr, handle, index, previewIndex, pchURLOrVideoID, cchURLSize, pchOriginalFileName, cchOriginalFileNameSize, out pPreviewType);
      }

      public virtual uint ISteamUGC_GetQueryUGCNumKeyValueTags(ulong handle, uint index)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamUGC_GetQueryUGCNumKeyValueTags(this._ptr, handle, index);
      }

      public virtual bool ISteamUGC_GetQueryUGCKeyValueTag(
        ulong handle,
        uint index,
        uint keyValueTagIndex,
        StringBuilder pchKey,
        uint cchKeySize,
        StringBuilder pchValue,
        uint cchValueSize)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamUGC_GetQueryUGCKeyValueTag(this._ptr, handle, index, keyValueTagIndex, pchKey, cchKeySize, pchValue, cchValueSize);
      }

      public virtual bool ISteamUGC_ReleaseQueryUGCRequest(ulong handle)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamUGC_ReleaseQueryUGCRequest(this._ptr, handle) : throw new Exception("ISteamUGC _ptr is null!");
      }

      public virtual bool ISteamUGC_AddRequiredTag(ulong handle, string pTagName)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamUGC_AddRequiredTag(this._ptr, handle, pTagName);
      }

      public virtual bool ISteamUGC_AddExcludedTag(ulong handle, string pTagName)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamUGC_AddExcludedTag(this._ptr, handle, pTagName);
      }

      public virtual bool ISteamUGC_SetReturnOnlyIDs(ulong handle, [MarshalAs(UnmanagedType.U1)] bool bReturnOnlyIDs)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamUGC_SetReturnOnlyIDs(this._ptr, handle, bReturnOnlyIDs);
      }

      public virtual bool ISteamUGC_SetReturnKeyValueTags(ulong handle, [MarshalAs(UnmanagedType.U1)] bool bReturnKeyValueTags)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamUGC_SetReturnKeyValueTags(this._ptr, handle, bReturnKeyValueTags);
      }

      public virtual bool ISteamUGC_SetReturnLongDescription(
        ulong handle,
        [MarshalAs(UnmanagedType.U1)] bool bReturnLongDescription)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamUGC_SetReturnLongDescription(this._ptr, handle, bReturnLongDescription);
      }

      public virtual bool ISteamUGC_SetReturnMetadata(ulong handle, [MarshalAs(UnmanagedType.U1)] bool bReturnMetadata)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamUGC_SetReturnMetadata(this._ptr, handle, bReturnMetadata);
      }

      public virtual bool ISteamUGC_SetReturnChildren(ulong handle, [MarshalAs(UnmanagedType.U1)] bool bReturnChildren)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamUGC_SetReturnChildren(this._ptr, handle, bReturnChildren);
      }

      public virtual bool ISteamUGC_SetReturnAdditionalPreviews(
        ulong handle,
        [MarshalAs(UnmanagedType.U1)] bool bReturnAdditionalPreviews)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamUGC_SetReturnAdditionalPreviews(this._ptr, handle, bReturnAdditionalPreviews);
      }

      public virtual bool ISteamUGC_SetReturnTotalOnly(ulong handle, [MarshalAs(UnmanagedType.U1)] bool bReturnTotalOnly)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamUGC_SetReturnTotalOnly(this._ptr, handle, bReturnTotalOnly);
      }

      public virtual bool ISteamUGC_SetReturnPlaytimeStats(ulong handle, uint unDays)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamUGC_SetReturnPlaytimeStats(this._ptr, handle, unDays);
      }

      public virtual bool ISteamUGC_SetLanguage(ulong handle, string pchLanguage)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamUGC_SetLanguage(this._ptr, handle, pchLanguage);
      }

      public virtual bool ISteamUGC_SetAllowCachedResponse(ulong handle, uint unMaxAgeSeconds)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamUGC_SetAllowCachedResponse(this._ptr, handle, unMaxAgeSeconds);
      }

      public virtual bool ISteamUGC_SetCloudFileNameFilter(ulong handle, string pMatchCloudFileName)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamUGC_SetCloudFileNameFilter(this._ptr, handle, pMatchCloudFileName);
      }

      public virtual bool ISteamUGC_SetMatchAnyTag(ulong handle, [MarshalAs(UnmanagedType.U1)] bool bMatchAnyTag)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamUGC_SetMatchAnyTag(this._ptr, handle, bMatchAnyTag);
      }

      public virtual bool ISteamUGC_SetSearchText(ulong handle, string pSearchText)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamUGC_SetSearchText(this._ptr, handle, pSearchText);
      }

      public virtual bool ISteamUGC_SetRankedByTrendDays(ulong handle, uint unDays)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamUGC_SetRankedByTrendDays(this._ptr, handle, unDays);
      }

      public virtual bool ISteamUGC_AddRequiredKeyValueTag(
        ulong handle,
        string pKey,
        string pValue)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamUGC_AddRequiredKeyValueTag(this._ptr, handle, pKey, pValue);
      }

      public virtual SteamAPICall_t ISteamUGC_RequestUGCDetails(
        ulong nPublishedFileID,
        uint unMaxAgeSeconds)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamUGC_RequestUGCDetails(this._ptr, nPublishedFileID, unMaxAgeSeconds);
      }

      public virtual SteamAPICall_t ISteamUGC_CreateItem(
        uint nConsumerAppId,
        WorkshopFileType eFileType)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamUGC_CreateItem(this._ptr, nConsumerAppId, eFileType);
      }

      public virtual UGCUpdateHandle_t ISteamUGC_StartItemUpdate(
        uint nConsumerAppId,
        ulong nPublishedFileID)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamUGC_StartItemUpdate(this._ptr, nConsumerAppId, nPublishedFileID);
      }

      public virtual bool ISteamUGC_SetItemTitle(ulong handle, string pchTitle)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamUGC_SetItemTitle(this._ptr, handle, pchTitle);
      }

      public virtual bool ISteamUGC_SetItemDescription(ulong handle, string pchDescription)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamUGC_SetItemDescription(this._ptr, handle, pchDescription);
      }

      public virtual bool ISteamUGC_SetItemUpdateLanguage(ulong handle, string pchLanguage)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamUGC_SetItemUpdateLanguage(this._ptr, handle, pchLanguage);
      }

      public virtual bool ISteamUGC_SetItemMetadata(ulong handle, string pchMetaData)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamUGC_SetItemMetadata(this._ptr, handle, pchMetaData);
      }

      public virtual bool ISteamUGC_SetItemVisibility(
        ulong handle,
        RemoteStoragePublishedFileVisibility eVisibility)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamUGC_SetItemVisibility(this._ptr, handle, eVisibility);
      }

      public virtual bool ISteamUGC_SetItemTags(
        ulong updateHandle,
        ref SteamParamStringArray_t pTags)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        SteamParamStringArray_t.PackSmall pTags1 = new SteamParamStringArray_t.PackSmall();
        bool flag = Platform.Linux64.Native.SteamAPI_ISteamUGC_SetItemTags(this._ptr, updateHandle, ref pTags1);
        pTags = (SteamParamStringArray_t) pTags1;
        return flag;
      }

      public virtual bool ISteamUGC_SetItemContent(ulong handle, string pszContentFolder)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamUGC_SetItemContent(this._ptr, handle, pszContentFolder);
      }

      public virtual bool ISteamUGC_SetItemPreview(ulong handle, string pszPreviewFile)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamUGC_SetItemPreview(this._ptr, handle, pszPreviewFile);
      }

      public virtual bool ISteamUGC_RemoveItemKeyValueTags(ulong handle, string pchKey)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamUGC_RemoveItemKeyValueTags(this._ptr, handle, pchKey);
      }

      public virtual bool ISteamUGC_AddItemKeyValueTag(
        ulong handle,
        string pchKey,
        string pchValue)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamUGC_AddItemKeyValueTag(this._ptr, handle, pchKey, pchValue);
      }

      public virtual bool ISteamUGC_AddItemPreviewFile(
        ulong handle,
        string pszPreviewFile,
        ItemPreviewType type)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamUGC_AddItemPreviewFile(this._ptr, handle, pszPreviewFile, type);
      }

      public virtual bool ISteamUGC_AddItemPreviewVideo(ulong handle, string pszVideoID)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamUGC_AddItemPreviewVideo(this._ptr, handle, pszVideoID);
      }

      public virtual bool ISteamUGC_UpdateItemPreviewFile(
        ulong handle,
        uint index,
        string pszPreviewFile)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamUGC_UpdateItemPreviewFile(this._ptr, handle, index, pszPreviewFile);
      }

      public virtual bool ISteamUGC_UpdateItemPreviewVideo(
        ulong handle,
        uint index,
        string pszVideoID)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamUGC_UpdateItemPreviewVideo(this._ptr, handle, index, pszVideoID);
      }

      public virtual bool ISteamUGC_RemoveItemPreview(ulong handle, uint index)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamUGC_RemoveItemPreview(this._ptr, handle, index);
      }

      public virtual SteamAPICall_t ISteamUGC_SubmitItemUpdate(ulong handle, string pchChangeNote)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamUGC_SubmitItemUpdate(this._ptr, handle, pchChangeNote);
      }

      public virtual ItemUpdateStatus ISteamUGC_GetItemUpdateProgress(
        ulong handle,
        out ulong punBytesProcessed,
        out ulong punBytesTotal)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamUGC_GetItemUpdateProgress(this._ptr, handle, out punBytesProcessed, out punBytesTotal) : throw new Exception("ISteamUGC _ptr is null!");
      }

      public virtual SteamAPICall_t ISteamUGC_SetUserItemVote(ulong nPublishedFileID, [MarshalAs(UnmanagedType.U1)] bool bVoteUp)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamUGC_SetUserItemVote(this._ptr, nPublishedFileID, bVoteUp);
      }

      public virtual SteamAPICall_t ISteamUGC_GetUserItemVote(ulong nPublishedFileID)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamUGC_GetUserItemVote(this._ptr, nPublishedFileID) : throw new Exception("ISteamUGC _ptr is null!");
      }

      public virtual SteamAPICall_t ISteamUGC_AddItemToFavorites(
        uint nAppId,
        ulong nPublishedFileID)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamUGC_AddItemToFavorites(this._ptr, nAppId, nPublishedFileID);
      }

      public virtual SteamAPICall_t ISteamUGC_RemoveItemFromFavorites(
        uint nAppId,
        ulong nPublishedFileID)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamUGC_RemoveItemFromFavorites(this._ptr, nAppId, nPublishedFileID);
      }

      public virtual SteamAPICall_t ISteamUGC_SubscribeItem(ulong nPublishedFileID)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamUGC_SubscribeItem(this._ptr, nPublishedFileID) : throw new Exception("ISteamUGC _ptr is null!");
      }

      public virtual SteamAPICall_t ISteamUGC_UnsubscribeItem(ulong nPublishedFileID)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamUGC_UnsubscribeItem(this._ptr, nPublishedFileID) : throw new Exception("ISteamUGC _ptr is null!");
      }

      public virtual uint ISteamUGC_GetNumSubscribedItems()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamUGC_GetNumSubscribedItems(this._ptr) : throw new Exception("ISteamUGC _ptr is null!");
      }

      public virtual uint ISteamUGC_GetSubscribedItems(IntPtr pvecPublishedFileID, uint cMaxEntries)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamUGC_GetSubscribedItems(this._ptr, pvecPublishedFileID, cMaxEntries);
      }

      public virtual uint ISteamUGC_GetItemState(ulong nPublishedFileID)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamUGC_GetItemState(this._ptr, nPublishedFileID) : throw new Exception("ISteamUGC _ptr is null!");
      }

      public virtual bool ISteamUGC_GetItemInstallInfo(
        ulong nPublishedFileID,
        out ulong punSizeOnDisk,
        StringBuilder pchFolder,
        uint cchFolderSize,
        out uint punTimeStamp)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamUGC_GetItemInstallInfo(this._ptr, nPublishedFileID, out punSizeOnDisk, pchFolder, cchFolderSize, out punTimeStamp);
      }

      public virtual bool ISteamUGC_GetItemDownloadInfo(
        ulong nPublishedFileID,
        out ulong punBytesDownloaded,
        out ulong punBytesTotal)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamUGC_GetItemDownloadInfo(this._ptr, nPublishedFileID, out punBytesDownloaded, out punBytesTotal) : throw new Exception("ISteamUGC _ptr is null!");
      }

      public virtual bool ISteamUGC_DownloadItem(ulong nPublishedFileID, [MarshalAs(UnmanagedType.U1)] bool bHighPriority)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamUGC_DownloadItem(this._ptr, nPublishedFileID, bHighPriority);
      }

      public virtual bool ISteamUGC_BInitWorkshopForGameServer(
        uint unWorkshopDepotID,
        string pszFolder)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamUGC_BInitWorkshopForGameServer(this._ptr, unWorkshopDepotID, pszFolder);
      }

      public virtual void ISteamUGC_SuspendDownloads([MarshalAs(UnmanagedType.U1)] bool bSuspend)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        Platform.Linux64.Native.SteamAPI_ISteamUGC_SuspendDownloads(this._ptr, bSuspend);
      }

      public virtual SteamAPICall_t ISteamUGC_StartPlaytimeTracking(
        IntPtr pvecPublishedFileID,
        uint unNumPublishedFileIDs)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamUGC_StartPlaytimeTracking(this._ptr, pvecPublishedFileID, unNumPublishedFileIDs);
      }

      public virtual SteamAPICall_t ISteamUGC_StopPlaytimeTracking(
        IntPtr pvecPublishedFileID,
        uint unNumPublishedFileIDs)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamUGC_StopPlaytimeTracking(this._ptr, pvecPublishedFileID, unNumPublishedFileIDs);
      }

      public virtual SteamAPICall_t ISteamUGC_StopPlaytimeTrackingForAllItems()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamUGC_StopPlaytimeTrackingForAllItems(this._ptr) : throw new Exception("ISteamUGC _ptr is null!");
      }

      public virtual SteamAPICall_t ISteamUGC_AddDependency(
        ulong nParentPublishedFileID,
        ulong nChildPublishedFileID)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamUGC_AddDependency(this._ptr, nParentPublishedFileID, nChildPublishedFileID);
      }

      public virtual SteamAPICall_t ISteamUGC_RemoveDependency(
        ulong nParentPublishedFileID,
        ulong nChildPublishedFileID)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamUGC_RemoveDependency(this._ptr, nParentPublishedFileID, nChildPublishedFileID);
      }

      public virtual uint ISteamAppList_GetNumInstalledApps()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamAppList_GetNumInstalledApps(this._ptr) : throw new Exception("ISteamAppList _ptr is null!");
      }

      public virtual uint ISteamAppList_GetInstalledApps(IntPtr pvecAppID, uint unMaxAppIDs)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamAppList _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamAppList_GetInstalledApps(this._ptr, pvecAppID, unMaxAppIDs);
      }

      public virtual int ISteamAppList_GetAppName(
        uint nAppID,
        StringBuilder pchName,
        int cchNameMax)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamAppList _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamAppList_GetAppName(this._ptr, nAppID, pchName, cchNameMax);
      }

      public virtual int ISteamAppList_GetAppInstallDir(
        uint nAppID,
        StringBuilder pchDirectory,
        int cchNameMax)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamAppList _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamAppList_GetAppInstallDir(this._ptr, nAppID, pchDirectory, cchNameMax);
      }

      public virtual int ISteamAppList_GetAppBuildId(uint nAppID)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamAppList_GetAppBuildId(this._ptr, nAppID) : throw new Exception("ISteamAppList _ptr is null!");
      }

      public virtual void ISteamHTMLSurface_DestructISteamHTMLSurface()
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTMLSurface _ptr is null!");
        Platform.Linux64.Native.SteamAPI_ISteamHTMLSurface_DestructISteamHTMLSurface(this._ptr);
      }

      public virtual bool ISteamHTMLSurface_Init()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamHTMLSurface_Init(this._ptr) : throw new Exception("ISteamHTMLSurface _ptr is null!");
      }

      public virtual bool ISteamHTMLSurface_Shutdown()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamHTMLSurface_Shutdown(this._ptr) : throw new Exception("ISteamHTMLSurface _ptr is null!");
      }

      public virtual SteamAPICall_t ISteamHTMLSurface_CreateBrowser(
        string pchUserAgent,
        string pchUserCSS)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTMLSurface _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamHTMLSurface_CreateBrowser(this._ptr, pchUserAgent, pchUserCSS);
      }

      public virtual void ISteamHTMLSurface_RemoveBrowser(uint unBrowserHandle)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTMLSurface _ptr is null!");
        Platform.Linux64.Native.SteamAPI_ISteamHTMLSurface_RemoveBrowser(this._ptr, unBrowserHandle);
      }

      public virtual void ISteamHTMLSurface_LoadURL(
        uint unBrowserHandle,
        string pchURL,
        string pchPostData)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTMLSurface _ptr is null!");
        Platform.Linux64.Native.SteamAPI_ISteamHTMLSurface_LoadURL(this._ptr, unBrowserHandle, pchURL, pchPostData);
      }

      public virtual void ISteamHTMLSurface_SetSize(
        uint unBrowserHandle,
        uint unWidth,
        uint unHeight)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTMLSurface _ptr is null!");
        Platform.Linux64.Native.SteamAPI_ISteamHTMLSurface_SetSize(this._ptr, unBrowserHandle, unWidth, unHeight);
      }

      public virtual void ISteamHTMLSurface_StopLoad(uint unBrowserHandle)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTMLSurface _ptr is null!");
        Platform.Linux64.Native.SteamAPI_ISteamHTMLSurface_StopLoad(this._ptr, unBrowserHandle);
      }

      public virtual void ISteamHTMLSurface_Reload(uint unBrowserHandle)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTMLSurface _ptr is null!");
        Platform.Linux64.Native.SteamAPI_ISteamHTMLSurface_Reload(this._ptr, unBrowserHandle);
      }

      public virtual void ISteamHTMLSurface_GoBack(uint unBrowserHandle)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTMLSurface _ptr is null!");
        Platform.Linux64.Native.SteamAPI_ISteamHTMLSurface_GoBack(this._ptr, unBrowserHandle);
      }

      public virtual void ISteamHTMLSurface_GoForward(uint unBrowserHandle)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTMLSurface _ptr is null!");
        Platform.Linux64.Native.SteamAPI_ISteamHTMLSurface_GoForward(this._ptr, unBrowserHandle);
      }

      public virtual void ISteamHTMLSurface_AddHeader(
        uint unBrowserHandle,
        string pchKey,
        string pchValue)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTMLSurface _ptr is null!");
        Platform.Linux64.Native.SteamAPI_ISteamHTMLSurface_AddHeader(this._ptr, unBrowserHandle, pchKey, pchValue);
      }

      public virtual void ISteamHTMLSurface_ExecuteJavascript(
        uint unBrowserHandle,
        string pchScript)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTMLSurface _ptr is null!");
        Platform.Linux64.Native.SteamAPI_ISteamHTMLSurface_ExecuteJavascript(this._ptr, unBrowserHandle, pchScript);
      }

      public virtual void ISteamHTMLSurface_MouseUp(
        uint unBrowserHandle,
        HTMLMouseButton eMouseButton)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTMLSurface _ptr is null!");
        Platform.Linux64.Native.SteamAPI_ISteamHTMLSurface_MouseUp(this._ptr, unBrowserHandle, eMouseButton);
      }

      public virtual void ISteamHTMLSurface_MouseDown(
        uint unBrowserHandle,
        HTMLMouseButton eMouseButton)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTMLSurface _ptr is null!");
        Platform.Linux64.Native.SteamAPI_ISteamHTMLSurface_MouseDown(this._ptr, unBrowserHandle, eMouseButton);
      }

      public virtual void ISteamHTMLSurface_MouseDoubleClick(
        uint unBrowserHandle,
        HTMLMouseButton eMouseButton)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTMLSurface _ptr is null!");
        Platform.Linux64.Native.SteamAPI_ISteamHTMLSurface_MouseDoubleClick(this._ptr, unBrowserHandle, eMouseButton);
      }

      public virtual void ISteamHTMLSurface_MouseMove(uint unBrowserHandle, int x, int y)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTMLSurface _ptr is null!");
        Platform.Linux64.Native.SteamAPI_ISteamHTMLSurface_MouseMove(this._ptr, unBrowserHandle, x, y);
      }

      public virtual void ISteamHTMLSurface_MouseWheel(uint unBrowserHandle, int nDelta)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTMLSurface _ptr is null!");
        Platform.Linux64.Native.SteamAPI_ISteamHTMLSurface_MouseWheel(this._ptr, unBrowserHandle, nDelta);
      }

      public virtual void ISteamHTMLSurface_KeyDown(
        uint unBrowserHandle,
        uint nNativeKeyCode,
        HTMLKeyModifiers eHTMLKeyModifiers)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTMLSurface _ptr is null!");
        Platform.Linux64.Native.SteamAPI_ISteamHTMLSurface_KeyDown(this._ptr, unBrowserHandle, nNativeKeyCode, eHTMLKeyModifiers);
      }

      public virtual void ISteamHTMLSurface_KeyUp(
        uint unBrowserHandle,
        uint nNativeKeyCode,
        HTMLKeyModifiers eHTMLKeyModifiers)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTMLSurface _ptr is null!");
        Platform.Linux64.Native.SteamAPI_ISteamHTMLSurface_KeyUp(this._ptr, unBrowserHandle, nNativeKeyCode, eHTMLKeyModifiers);
      }

      public virtual void ISteamHTMLSurface_KeyChar(
        uint unBrowserHandle,
        uint cUnicodeChar,
        HTMLKeyModifiers eHTMLKeyModifiers)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTMLSurface _ptr is null!");
        Platform.Linux64.Native.SteamAPI_ISteamHTMLSurface_KeyChar(this._ptr, unBrowserHandle, cUnicodeChar, eHTMLKeyModifiers);
      }

      public virtual void ISteamHTMLSurface_SetHorizontalScroll(
        uint unBrowserHandle,
        uint nAbsolutePixelScroll)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTMLSurface _ptr is null!");
        Platform.Linux64.Native.SteamAPI_ISteamHTMLSurface_SetHorizontalScroll(this._ptr, unBrowserHandle, nAbsolutePixelScroll);
      }

      public virtual void ISteamHTMLSurface_SetVerticalScroll(
        uint unBrowserHandle,
        uint nAbsolutePixelScroll)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTMLSurface _ptr is null!");
        Platform.Linux64.Native.SteamAPI_ISteamHTMLSurface_SetVerticalScroll(this._ptr, unBrowserHandle, nAbsolutePixelScroll);
      }

      public virtual void ISteamHTMLSurface_SetKeyFocus(uint unBrowserHandle, [MarshalAs(UnmanagedType.U1)] bool bHasKeyFocus)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTMLSurface _ptr is null!");
        Platform.Linux64.Native.SteamAPI_ISteamHTMLSurface_SetKeyFocus(this._ptr, unBrowserHandle, bHasKeyFocus);
      }

      public virtual void ISteamHTMLSurface_ViewSource(uint unBrowserHandle)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTMLSurface _ptr is null!");
        Platform.Linux64.Native.SteamAPI_ISteamHTMLSurface_ViewSource(this._ptr, unBrowserHandle);
      }

      public virtual void ISteamHTMLSurface_CopyToClipboard(uint unBrowserHandle)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTMLSurface _ptr is null!");
        Platform.Linux64.Native.SteamAPI_ISteamHTMLSurface_CopyToClipboard(this._ptr, unBrowserHandle);
      }

      public virtual void ISteamHTMLSurface_PasteFromClipboard(uint unBrowserHandle)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTMLSurface _ptr is null!");
        Platform.Linux64.Native.SteamAPI_ISteamHTMLSurface_PasteFromClipboard(this._ptr, unBrowserHandle);
      }

      public virtual void ISteamHTMLSurface_Find(
        uint unBrowserHandle,
        string pchSearchStr,
        [MarshalAs(UnmanagedType.U1)] bool bCurrentlyInFind,
        [MarshalAs(UnmanagedType.U1)] bool bReverse)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTMLSurface _ptr is null!");
        Platform.Linux64.Native.SteamAPI_ISteamHTMLSurface_Find(this._ptr, unBrowserHandle, pchSearchStr, bCurrentlyInFind, bReverse);
      }

      public virtual void ISteamHTMLSurface_StopFind(uint unBrowserHandle)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTMLSurface _ptr is null!");
        Platform.Linux64.Native.SteamAPI_ISteamHTMLSurface_StopFind(this._ptr, unBrowserHandle);
      }

      public virtual void ISteamHTMLSurface_GetLinkAtPosition(uint unBrowserHandle, int x, int y)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTMLSurface _ptr is null!");
        Platform.Linux64.Native.SteamAPI_ISteamHTMLSurface_GetLinkAtPosition(this._ptr, unBrowserHandle, x, y);
      }

      public virtual void ISteamHTMLSurface_SetCookie(
        string pchHostname,
        string pchKey,
        string pchValue,
        string pchPath,
        uint nExpires,
        [MarshalAs(UnmanagedType.U1)] bool bSecure,
        [MarshalAs(UnmanagedType.U1)] bool bHTTPOnly)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTMLSurface _ptr is null!");
        Platform.Linux64.Native.SteamAPI_ISteamHTMLSurface_SetCookie(this._ptr, pchHostname, pchKey, pchValue, pchPath, nExpires, bSecure, bHTTPOnly);
      }

      public virtual void ISteamHTMLSurface_SetPageScaleFactor(
        uint unBrowserHandle,
        float flZoom,
        int nPointX,
        int nPointY)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTMLSurface _ptr is null!");
        Platform.Linux64.Native.SteamAPI_ISteamHTMLSurface_SetPageScaleFactor(this._ptr, unBrowserHandle, flZoom, nPointX, nPointY);
      }

      public virtual void ISteamHTMLSurface_SetBackgroundMode(
        uint unBrowserHandle,
        [MarshalAs(UnmanagedType.U1)] bool bBackgroundMode)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTMLSurface _ptr is null!");
        Platform.Linux64.Native.SteamAPI_ISteamHTMLSurface_SetBackgroundMode(this._ptr, unBrowserHandle, bBackgroundMode);
      }

      public virtual void ISteamHTMLSurface_AllowStartRequest(uint unBrowserHandle, [MarshalAs(UnmanagedType.U1)] bool bAllowed)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTMLSurface _ptr is null!");
        Platform.Linux64.Native.SteamAPI_ISteamHTMLSurface_AllowStartRequest(this._ptr, unBrowserHandle, bAllowed);
      }

      public virtual void ISteamHTMLSurface_JSDialogResponse(uint unBrowserHandle, [MarshalAs(UnmanagedType.U1)] bool bResult)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTMLSurface _ptr is null!");
        Platform.Linux64.Native.SteamAPI_ISteamHTMLSurface_JSDialogResponse(this._ptr, unBrowserHandle, bResult);
      }

      public virtual Result ISteamInventory_GetResultStatus(int resultHandle)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamInventory_GetResultStatus(this._ptr, resultHandle) : throw new Exception("ISteamInventory _ptr is null!");
      }

      public virtual bool ISteamInventory_GetResultItems(
        int resultHandle,
        IntPtr pOutItemsArray,
        out uint punOutItemsArraySize)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamInventory _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamInventory_GetResultItems(this._ptr, resultHandle, pOutItemsArray, out punOutItemsArraySize);
      }

      public virtual bool ISteamInventory_GetResultItemProperty(
        int resultHandle,
        uint unItemIndex,
        string pchPropertyName,
        StringBuilder pchValueBuffer,
        out uint punValueBufferSizeOut)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamInventory _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamInventory_GetResultItemProperty(this._ptr, resultHandle, unItemIndex, pchPropertyName, pchValueBuffer, out punValueBufferSizeOut);
      }

      public virtual uint ISteamInventory_GetResultTimestamp(int resultHandle)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamInventory_GetResultTimestamp(this._ptr, resultHandle) : throw new Exception("ISteamInventory _ptr is null!");
      }

      public virtual bool ISteamInventory_CheckResultSteamID(
        int resultHandle,
        ulong steamIDExpected)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamInventory _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamInventory_CheckResultSteamID(this._ptr, resultHandle, steamIDExpected);
      }

      public virtual void ISteamInventory_DestroyResult(int resultHandle)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamInventory _ptr is null!");
        Platform.Linux64.Native.SteamAPI_ISteamInventory_DestroyResult(this._ptr, resultHandle);
      }

      public virtual bool ISteamInventory_GetAllItems(ref int pResultHandle)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamInventory_GetAllItems(this._ptr, ref pResultHandle) : throw new Exception("ISteamInventory _ptr is null!");
      }

      public virtual bool ISteamInventory_GetItemsByID(
        ref int pResultHandle,
        ulong[] pInstanceIDs,
        uint unCountInstanceIDs)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamInventory _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamInventory_GetItemsByID(this._ptr, ref pResultHandle, pInstanceIDs, unCountInstanceIDs);
      }

      public virtual bool ISteamInventory_SerializeResult(
        int resultHandle,
        IntPtr pOutBuffer,
        out uint punOutBufferSize)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamInventory _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamInventory_SerializeResult(this._ptr, resultHandle, pOutBuffer, out punOutBufferSize);
      }

      public virtual bool ISteamInventory_DeserializeResult(
        ref int pOutResultHandle,
        IntPtr pBuffer,
        uint unBufferSize,
        [MarshalAs(UnmanagedType.U1)] bool bRESERVED_MUST_BE_FALSE)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamInventory _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamInventory_DeserializeResult(this._ptr, ref pOutResultHandle, pBuffer, unBufferSize, bRESERVED_MUST_BE_FALSE);
      }

      public virtual bool ISteamInventory_GenerateItems(
        ref int pResultHandle,
        int[] pArrayItemDefs,
        uint[] punArrayQuantity,
        uint unArrayLength)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamInventory _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamInventory_GenerateItems(this._ptr, ref pResultHandle, pArrayItemDefs, punArrayQuantity, unArrayLength);
      }

      public virtual bool ISteamInventory_GrantPromoItems(ref int pResultHandle)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamInventory_GrantPromoItems(this._ptr, ref pResultHandle) : throw new Exception("ISteamInventory _ptr is null!");
      }

      public virtual bool ISteamInventory_AddPromoItem(ref int pResultHandle, int itemDef)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamInventory _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamInventory_AddPromoItem(this._ptr, ref pResultHandle, itemDef);
      }

      public virtual bool ISteamInventory_AddPromoItems(
        ref int pResultHandle,
        int[] pArrayItemDefs,
        uint unArrayLength)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamInventory _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamInventory_AddPromoItems(this._ptr, ref pResultHandle, pArrayItemDefs, unArrayLength);
      }

      public virtual bool ISteamInventory_ConsumeItem(
        ref int pResultHandle,
        ulong itemConsume,
        uint unQuantity)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamInventory _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamInventory_ConsumeItem(this._ptr, ref pResultHandle, itemConsume, unQuantity);
      }

      public virtual bool ISteamInventory_ExchangeItems(
        ref int pResultHandle,
        int[] pArrayGenerate,
        uint[] punArrayGenerateQuantity,
        uint unArrayGenerateLength,
        ulong[] pArrayDestroy,
        uint[] punArrayDestroyQuantity,
        uint unArrayDestroyLength)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamInventory _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamInventory_ExchangeItems(this._ptr, ref pResultHandle, pArrayGenerate, punArrayGenerateQuantity, unArrayGenerateLength, pArrayDestroy, punArrayDestroyQuantity, unArrayDestroyLength);
      }

      public virtual bool ISteamInventory_TransferItemQuantity(
        ref int pResultHandle,
        ulong itemIdSource,
        uint unQuantity,
        ulong itemIdDest)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamInventory _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamInventory_TransferItemQuantity(this._ptr, ref pResultHandle, itemIdSource, unQuantity, itemIdDest);
      }

      public virtual void ISteamInventory_SendItemDropHeartbeat()
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamInventory _ptr is null!");
        Platform.Linux64.Native.SteamAPI_ISteamInventory_SendItemDropHeartbeat(this._ptr);
      }

      public virtual bool ISteamInventory_TriggerItemDrop(
        ref int pResultHandle,
        int dropListDefinition)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamInventory _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamInventory_TriggerItemDrop(this._ptr, ref pResultHandle, dropListDefinition);
      }

      public virtual bool ISteamInventory_TradeItems(
        ref int pResultHandle,
        ulong steamIDTradePartner,
        ulong[] pArrayGive,
        uint[] pArrayGiveQuantity,
        uint nArrayGiveLength,
        ulong[] pArrayGet,
        uint[] pArrayGetQuantity,
        uint nArrayGetLength)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamInventory _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamInventory_TradeItems(this._ptr, ref pResultHandle, steamIDTradePartner, pArrayGive, pArrayGiveQuantity, nArrayGiveLength, pArrayGet, pArrayGetQuantity, nArrayGetLength);
      }

      public virtual bool ISteamInventory_LoadItemDefinitions()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamInventory_LoadItemDefinitions(this._ptr) : throw new Exception("ISteamInventory _ptr is null!");
      }

      public virtual bool ISteamInventory_GetItemDefinitionIDs(
        IntPtr pItemDefIDs,
        out uint punItemDefIDsArraySize)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamInventory_GetItemDefinitionIDs(this._ptr, pItemDefIDs, out punItemDefIDsArraySize) : throw new Exception("ISteamInventory _ptr is null!");
      }

      public virtual bool ISteamInventory_GetItemDefinitionProperty(
        int iDefinition,
        string pchPropertyName,
        StringBuilder pchValueBuffer,
        out uint punValueBufferSizeOut)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamInventory _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamInventory_GetItemDefinitionProperty(this._ptr, iDefinition, pchPropertyName, pchValueBuffer, out punValueBufferSizeOut);
      }

      public virtual SteamAPICall_t ISteamInventory_RequestEligiblePromoItemDefinitionsIDs(
        ulong steamID)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamInventory_RequestEligiblePromoItemDefinitionsIDs(this._ptr, steamID) : throw new Exception("ISteamInventory _ptr is null!");
      }

      public virtual bool ISteamInventory_GetEligiblePromoItemDefinitionIDs(
        ulong steamID,
        IntPtr pItemDefIDs,
        out uint punItemDefIDsArraySize)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamInventory _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamInventory_GetEligiblePromoItemDefinitionIDs(this._ptr, steamID, pItemDefIDs, out punItemDefIDsArraySize);
      }

      public virtual void ISteamVideo_GetVideoURL(uint unVideoAppID)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamVideo _ptr is null!");
        Platform.Linux64.Native.SteamAPI_ISteamVideo_GetVideoURL(this._ptr, unVideoAppID);
      }

      public virtual bool ISteamVideo_IsBroadcasting(IntPtr pnNumViewers)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamVideo_IsBroadcasting(this._ptr, pnNumViewers) : throw new Exception("ISteamVideo _ptr is null!");
      }

      public virtual void ISteamVideo_GetOPFSettings(uint unVideoAppID)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamVideo _ptr is null!");
        Platform.Linux64.Native.SteamAPI_ISteamVideo_GetOPFSettings(this._ptr, unVideoAppID);
      }

      public virtual bool ISteamVideo_GetOPFStringForApp(
        uint unVideoAppID,
        StringBuilder pchBuffer,
        out int pnBufferSize)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamVideo _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamVideo_GetOPFStringForApp(this._ptr, unVideoAppID, pchBuffer, out pnBufferSize);
      }

      public virtual bool ISteamGameServer_InitGameServer(
        uint unIP,
        ushort usGamePort,
        ushort usQueryPort,
        uint unFlags,
        uint nGameAppId,
        string pchVersionString)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServer _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamGameServer_InitGameServer(this._ptr, unIP, usGamePort, usQueryPort, unFlags, nGameAppId, pchVersionString);
      }

      public virtual void ISteamGameServer_SetProduct(string pszProduct)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServer _ptr is null!");
        Platform.Linux64.Native.SteamAPI_ISteamGameServer_SetProduct(this._ptr, pszProduct);
      }

      public virtual void ISteamGameServer_SetGameDescription(string pszGameDescription)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServer _ptr is null!");
        Platform.Linux64.Native.SteamAPI_ISteamGameServer_SetGameDescription(this._ptr, pszGameDescription);
      }

      public virtual void ISteamGameServer_SetModDir(string pszModDir)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServer _ptr is null!");
        Platform.Linux64.Native.SteamAPI_ISteamGameServer_SetModDir(this._ptr, pszModDir);
      }

      public virtual void ISteamGameServer_SetDedicatedServer([MarshalAs(UnmanagedType.U1)] bool bDedicated)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServer _ptr is null!");
        Platform.Linux64.Native.SteamAPI_ISteamGameServer_SetDedicatedServer(this._ptr, bDedicated);
      }

      public virtual void ISteamGameServer_LogOn(string pszToken)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServer _ptr is null!");
        Platform.Linux64.Native.SteamAPI_ISteamGameServer_LogOn(this._ptr, pszToken);
      }

      public virtual void ISteamGameServer_LogOnAnonymous()
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServer _ptr is null!");
        Platform.Linux64.Native.SteamAPI_ISteamGameServer_LogOnAnonymous(this._ptr);
      }

      public virtual void ISteamGameServer_LogOff()
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServer _ptr is null!");
        Platform.Linux64.Native.SteamAPI_ISteamGameServer_LogOff(this._ptr);
      }

      public virtual bool ISteamGameServer_BLoggedOn()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamGameServer_BLoggedOn(this._ptr) : throw new Exception("ISteamGameServer _ptr is null!");
      }

      public virtual bool ISteamGameServer_BSecure()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamGameServer_BSecure(this._ptr) : throw new Exception("ISteamGameServer _ptr is null!");
      }

      public virtual CSteamID ISteamGameServer_GetSteamID()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamGameServer_GetSteamID(this._ptr) : throw new Exception("ISteamGameServer _ptr is null!");
      }

      public virtual bool ISteamGameServer_WasRestartRequested()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamGameServer_WasRestartRequested(this._ptr) : throw new Exception("ISteamGameServer _ptr is null!");
      }

      public virtual void ISteamGameServer_SetMaxPlayerCount(int cPlayersMax)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServer _ptr is null!");
        Platform.Linux64.Native.SteamAPI_ISteamGameServer_SetMaxPlayerCount(this._ptr, cPlayersMax);
      }

      public virtual void ISteamGameServer_SetBotPlayerCount(int cBotplayers)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServer _ptr is null!");
        Platform.Linux64.Native.SteamAPI_ISteamGameServer_SetBotPlayerCount(this._ptr, cBotplayers);
      }

      public virtual void ISteamGameServer_SetServerName(string pszServerName)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServer _ptr is null!");
        Platform.Linux64.Native.SteamAPI_ISteamGameServer_SetServerName(this._ptr, pszServerName);
      }

      public virtual void ISteamGameServer_SetMapName(string pszMapName)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServer _ptr is null!");
        Platform.Linux64.Native.SteamAPI_ISteamGameServer_SetMapName(this._ptr, pszMapName);
      }

      public virtual void ISteamGameServer_SetPasswordProtected([MarshalAs(UnmanagedType.U1)] bool bPasswordProtected)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServer _ptr is null!");
        Platform.Linux64.Native.SteamAPI_ISteamGameServer_SetPasswordProtected(this._ptr, bPasswordProtected);
      }

      public virtual void ISteamGameServer_SetSpectatorPort(ushort unSpectatorPort)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServer _ptr is null!");
        Platform.Linux64.Native.SteamAPI_ISteamGameServer_SetSpectatorPort(this._ptr, unSpectatorPort);
      }

      public virtual void ISteamGameServer_SetSpectatorServerName(string pszSpectatorServerName)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServer _ptr is null!");
        Platform.Linux64.Native.SteamAPI_ISteamGameServer_SetSpectatorServerName(this._ptr, pszSpectatorServerName);
      }

      public virtual void ISteamGameServer_ClearAllKeyValues()
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServer _ptr is null!");
        Platform.Linux64.Native.SteamAPI_ISteamGameServer_ClearAllKeyValues(this._ptr);
      }

      public virtual void ISteamGameServer_SetKeyValue(string pKey, string pValue)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServer _ptr is null!");
        Platform.Linux64.Native.SteamAPI_ISteamGameServer_SetKeyValue(this._ptr, pKey, pValue);
      }

      public virtual void ISteamGameServer_SetGameTags(string pchGameTags)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServer _ptr is null!");
        Platform.Linux64.Native.SteamAPI_ISteamGameServer_SetGameTags(this._ptr, pchGameTags);
      }

      public virtual void ISteamGameServer_SetGameData(string pchGameData)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServer _ptr is null!");
        Platform.Linux64.Native.SteamAPI_ISteamGameServer_SetGameData(this._ptr, pchGameData);
      }

      public virtual void ISteamGameServer_SetRegion(string pszRegion)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServer _ptr is null!");
        Platform.Linux64.Native.SteamAPI_ISteamGameServer_SetRegion(this._ptr, pszRegion);
      }

      public virtual bool ISteamGameServer_SendUserConnectAndAuthenticate(
        uint unIPClient,
        IntPtr pvAuthBlob,
        uint cubAuthBlobSize,
        out ulong pSteamIDUser)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServer _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamGameServer_SendUserConnectAndAuthenticate(this._ptr, unIPClient, pvAuthBlob, cubAuthBlobSize, out pSteamIDUser);
      }

      public virtual CSteamID ISteamGameServer_CreateUnauthenticatedUserConnection()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamGameServer_CreateUnauthenticatedUserConnection(this._ptr) : throw new Exception("ISteamGameServer _ptr is null!");
      }

      public virtual void ISteamGameServer_SendUserDisconnect(ulong steamIDUser)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServer _ptr is null!");
        Platform.Linux64.Native.SteamAPI_ISteamGameServer_SendUserDisconnect(this._ptr, steamIDUser);
      }

      public virtual bool ISteamGameServer_BUpdateUserData(
        ulong steamIDUser,
        string pchPlayerName,
        uint uScore)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServer _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamGameServer_BUpdateUserData(this._ptr, steamIDUser, pchPlayerName, uScore);
      }

      public virtual HAuthTicket ISteamGameServer_GetAuthSessionTicket(
        IntPtr pTicket,
        int cbMaxTicket,
        out uint pcbTicket)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServer _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamGameServer_GetAuthSessionTicket(this._ptr, pTicket, cbMaxTicket, out pcbTicket);
      }

      public virtual BeginAuthSessionResult ISteamGameServer_BeginAuthSession(
        IntPtr pAuthTicket,
        int cbAuthTicket,
        ulong steamID)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServer _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamGameServer_BeginAuthSession(this._ptr, pAuthTicket, cbAuthTicket, steamID);
      }

      public virtual void ISteamGameServer_EndAuthSession(ulong steamID)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServer _ptr is null!");
        Platform.Linux64.Native.SteamAPI_ISteamGameServer_EndAuthSession(this._ptr, steamID);
      }

      public virtual void ISteamGameServer_CancelAuthTicket(uint hAuthTicket)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServer _ptr is null!");
        Platform.Linux64.Native.SteamAPI_ISteamGameServer_CancelAuthTicket(this._ptr, hAuthTicket);
      }

      public virtual UserHasLicenseForAppResult ISteamGameServer_UserHasLicenseForApp(
        ulong steamID,
        uint appID)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServer _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamGameServer_UserHasLicenseForApp(this._ptr, steamID, appID);
      }

      public virtual bool ISteamGameServer_RequestUserGroupStatus(
        ulong steamIDUser,
        ulong steamIDGroup)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServer _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamGameServer_RequestUserGroupStatus(this._ptr, steamIDUser, steamIDGroup);
      }

      public virtual void ISteamGameServer_GetGameplayStats()
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServer _ptr is null!");
        Platform.Linux64.Native.SteamAPI_ISteamGameServer_GetGameplayStats(this._ptr);
      }

      public virtual SteamAPICall_t ISteamGameServer_GetServerReputation()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamGameServer_GetServerReputation(this._ptr) : throw new Exception("ISteamGameServer _ptr is null!");
      }

      public virtual uint ISteamGameServer_GetPublicIP()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamGameServer_GetPublicIP(this._ptr) : throw new Exception("ISteamGameServer _ptr is null!");
      }

      public virtual bool ISteamGameServer_HandleIncomingPacket(
        IntPtr pData,
        int cbData,
        uint srcIP,
        ushort srcPort)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServer _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamGameServer_HandleIncomingPacket(this._ptr, pData, cbData, srcIP, srcPort);
      }

      public virtual int ISteamGameServer_GetNextOutgoingPacket(
        IntPtr pOut,
        int cbMaxOut,
        out uint pNetAdr,
        out ushort pPort)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServer _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamGameServer_GetNextOutgoingPacket(this._ptr, pOut, cbMaxOut, out pNetAdr, out pPort);
      }

      public virtual void ISteamGameServer_EnableHeartbeats([MarshalAs(UnmanagedType.U1)] bool bActive)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServer _ptr is null!");
        Platform.Linux64.Native.SteamAPI_ISteamGameServer_EnableHeartbeats(this._ptr, bActive);
      }

      public virtual void ISteamGameServer_SetHeartbeatInterval(int iHeartbeatInterval)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServer _ptr is null!");
        Platform.Linux64.Native.SteamAPI_ISteamGameServer_SetHeartbeatInterval(this._ptr, iHeartbeatInterval);
      }

      public virtual void ISteamGameServer_ForceHeartbeat()
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServer _ptr is null!");
        Platform.Linux64.Native.SteamAPI_ISteamGameServer_ForceHeartbeat(this._ptr);
      }

      public virtual SteamAPICall_t ISteamGameServer_AssociateWithClan(ulong steamIDClan)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamGameServer_AssociateWithClan(this._ptr, steamIDClan) : throw new Exception("ISteamGameServer _ptr is null!");
      }

      public virtual SteamAPICall_t ISteamGameServer_ComputeNewPlayerCompatibility(
        ulong steamIDNewPlayer)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamGameServer_ComputeNewPlayerCompatibility(this._ptr, steamIDNewPlayer) : throw new Exception("ISteamGameServer _ptr is null!");
      }

      public virtual SteamAPICall_t ISteamGameServerStats_RequestUserStats(ulong steamIDUser)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamGameServerStats_RequestUserStats(this._ptr, steamIDUser) : throw new Exception("ISteamGameServerStats _ptr is null!");
      }

      public virtual bool ISteamGameServerStats_GetUserStat(
        ulong steamIDUser,
        string pchName,
        out int pData)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServerStats _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamGameServerStats_GetUserStat(this._ptr, steamIDUser, pchName, out pData);
      }

      public virtual bool ISteamGameServerStats_GetUserStat0(
        ulong steamIDUser,
        string pchName,
        out float pData)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServerStats _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamGameServerStats_GetUserStat0(this._ptr, steamIDUser, pchName, out pData);
      }

      public virtual bool ISteamGameServerStats_GetUserAchievement(
        ulong steamIDUser,
        string pchName,
        [MarshalAs(UnmanagedType.U1)] ref bool pbAchieved)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServerStats _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamGameServerStats_GetUserAchievement(this._ptr, steamIDUser, pchName, ref pbAchieved);
      }

      public virtual bool ISteamGameServerStats_SetUserStat(
        ulong steamIDUser,
        string pchName,
        int nData)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServerStats _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamGameServerStats_SetUserStat(this._ptr, steamIDUser, pchName, nData);
      }

      public virtual bool ISteamGameServerStats_SetUserStat0(
        ulong steamIDUser,
        string pchName,
        float fData)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServerStats _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamGameServerStats_SetUserStat0(this._ptr, steamIDUser, pchName, fData);
      }

      public virtual bool ISteamGameServerStats_UpdateUserAvgRateStat(
        ulong steamIDUser,
        string pchName,
        float flCountThisSession,
        double dSessionLength)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServerStats _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamGameServerStats_UpdateUserAvgRateStat(this._ptr, steamIDUser, pchName, flCountThisSession, dSessionLength);
      }

      public virtual bool ISteamGameServerStats_SetUserAchievement(
        ulong steamIDUser,
        string pchName)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServerStats _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamGameServerStats_SetUserAchievement(this._ptr, steamIDUser, pchName);
      }

      public virtual bool ISteamGameServerStats_ClearUserAchievement(
        ulong steamIDUser,
        string pchName)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServerStats _ptr is null!");
        return Platform.Linux64.Native.SteamAPI_ISteamGameServerStats_ClearUserAchievement(this._ptr, steamIDUser, pchName);
      }

      public virtual SteamAPICall_t ISteamGameServerStats_StoreUserStats(ulong steamIDUser)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Linux64.Native.SteamAPI_ISteamGameServerStats_StoreUserStats(this._ptr, steamIDUser) : throw new Exception("ISteamGameServerStats _ptr is null!");
      }

      public virtual bool SteamApi_SteamAPI_Init() => Platform.Linux64.Native.SteamAPI_Init();

      public virtual void SteamApi_SteamAPI_RunCallbacks()
      {
        Platform.Linux64.Native.SteamAPI_RunCallbacks();
      }

      public virtual void SteamApi_SteamGameServer_RunCallbacks()
      {
        Platform.Linux64.Native.SteamGameServer_RunCallbacks();
      }

      public virtual void SteamApi_SteamAPI_RegisterCallback(IntPtr pCallback, int callback)
      {
        Platform.Linux64.Native.SteamAPI_RegisterCallback(pCallback, callback);
      }

      public virtual void SteamApi_SteamAPI_UnregisterCallback(IntPtr pCallback)
      {
        Platform.Linux64.Native.SteamAPI_UnregisterCallback(pCallback);
      }

      public virtual void SteamApi_SteamAPI_RegisterCallResult(IntPtr pCallback, ulong callback)
      {
        Platform.Linux64.Native.SteamAPI_RegisterCallResult(pCallback, callback);
      }

      public virtual void SteamApi_SteamAPI_UnregisterCallResult(IntPtr pCallback, ulong callback)
      {
        Platform.Linux64.Native.SteamAPI_UnregisterCallResult(pCallback, callback);
      }

      public virtual bool SteamApi_SteamInternal_GameServer_Init(
        uint unIP,
        ushort usPort,
        ushort usGamePort,
        ushort usQueryPort,
        int eServerMode,
        string pchVersionString)
      {
        return Platform.Linux64.Native.SteamInternal_GameServer_Init(unIP, usPort, usGamePort, usQueryPort, eServerMode, pchVersionString);
      }

      public virtual void SteamApi_SteamAPI_Shutdown()
      {
        Platform.Linux64.Native.SteamAPI_Shutdown();
      }

      public virtual void SteamApi_SteamGameServer_Shutdown()
      {
        Platform.Linux64.Native.SteamGameServer_Shutdown();
      }

      public virtual HSteamUser SteamApi_SteamAPI_GetHSteamUser()
      {
        return Platform.Linux64.Native.SteamAPI_GetHSteamUser();
      }

      public virtual HSteamPipe SteamApi_SteamAPI_GetHSteamPipe()
      {
        return Platform.Linux64.Native.SteamAPI_GetHSteamPipe();
      }

      public virtual HSteamUser SteamApi_SteamGameServer_GetHSteamUser()
      {
        return Platform.Linux64.Native.SteamGameServer_GetHSteamUser();
      }

      public virtual HSteamPipe SteamApi_SteamGameServer_GetHSteamPipe()
      {
        return Platform.Linux64.Native.SteamGameServer_GetHSteamPipe();
      }

      public virtual IntPtr SteamApi_SteamInternal_CreateInterface(string version)
      {
        return Platform.Linux64.Native.SteamInternal_CreateInterface(version);
      }

      public virtual bool SteamApi_SteamAPI_RestartAppIfNecessary(uint unOwnAppID)
      {
        return Platform.Linux64.Native.SteamAPI_RestartAppIfNecessary(unOwnAppID);
      }

      internal static class Native
      {
        [DllImport("libsteam_api64.so")]
        internal static extern HSteamPipe SteamAPI_ISteamClient_CreateSteamPipe(IntPtr ISteamClient);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamClient_BReleaseSteamPipe(
          IntPtr ISteamClient,
          int hSteamPipe);

        [DllImport("libsteam_api64.so")]
        internal static extern HSteamUser SteamAPI_ISteamClient_ConnectToGlobalUser(
          IntPtr ISteamClient,
          int hSteamPipe);

        [DllImport("libsteam_api64.so")]
        internal static extern HSteamUser SteamAPI_ISteamClient_CreateLocalUser(
          IntPtr ISteamClient,
          out int phSteamPipe,
          AccountType eAccountType);

        [DllImport("libsteam_api64.so")]
        internal static extern void SteamAPI_ISteamClient_ReleaseUser(
          IntPtr ISteamClient,
          int hSteamPipe,
          int hUser);

        [DllImport("libsteam_api64.so")]
        internal static extern IntPtr SteamAPI_ISteamClient_GetISteamUser(
          IntPtr ISteamClient,
          int hSteamUser,
          int hSteamPipe,
          string pchVersion);

        [DllImport("libsteam_api64.so")]
        internal static extern IntPtr SteamAPI_ISteamClient_GetISteamGameServer(
          IntPtr ISteamClient,
          int hSteamUser,
          int hSteamPipe,
          string pchVersion);

        [DllImport("libsteam_api64.so")]
        internal static extern void SteamAPI_ISteamClient_SetLocalIPBinding(
          IntPtr ISteamClient,
          uint unIP,
          ushort usPort);

        [DllImport("libsteam_api64.so")]
        internal static extern IntPtr SteamAPI_ISteamClient_GetISteamFriends(
          IntPtr ISteamClient,
          int hSteamUser,
          int hSteamPipe,
          string pchVersion);

        [DllImport("libsteam_api64.so")]
        internal static extern IntPtr SteamAPI_ISteamClient_GetISteamUtils(
          IntPtr ISteamClient,
          int hSteamPipe,
          string pchVersion);

        [DllImport("libsteam_api64.so")]
        internal static extern IntPtr SteamAPI_ISteamClient_GetISteamMatchmaking(
          IntPtr ISteamClient,
          int hSteamUser,
          int hSteamPipe,
          string pchVersion);

        [DllImport("libsteam_api64.so")]
        internal static extern IntPtr SteamAPI_ISteamClient_GetISteamMatchmakingServers(
          IntPtr ISteamClient,
          int hSteamUser,
          int hSteamPipe,
          string pchVersion);

        [DllImport("libsteam_api64.so")]
        internal static extern IntPtr SteamAPI_ISteamClient_GetISteamGenericInterface(
          IntPtr ISteamClient,
          int hSteamUser,
          int hSteamPipe,
          string pchVersion);

        [DllImport("libsteam_api64.so")]
        internal static extern IntPtr SteamAPI_ISteamClient_GetISteamUserStats(
          IntPtr ISteamClient,
          int hSteamUser,
          int hSteamPipe,
          string pchVersion);

        [DllImport("libsteam_api64.so")]
        internal static extern IntPtr SteamAPI_ISteamClient_GetISteamGameServerStats(
          IntPtr ISteamClient,
          int hSteamuser,
          int hSteamPipe,
          string pchVersion);

        [DllImport("libsteam_api64.so")]
        internal static extern IntPtr SteamAPI_ISteamClient_GetISteamApps(
          IntPtr ISteamClient,
          int hSteamUser,
          int hSteamPipe,
          string pchVersion);

        [DllImport("libsteam_api64.so")]
        internal static extern IntPtr SteamAPI_ISteamClient_GetISteamNetworking(
          IntPtr ISteamClient,
          int hSteamUser,
          int hSteamPipe,
          string pchVersion);

        [DllImport("libsteam_api64.so")]
        internal static extern IntPtr SteamAPI_ISteamClient_GetISteamRemoteStorage(
          IntPtr ISteamClient,
          int hSteamuser,
          int hSteamPipe,
          string pchVersion);

        [DllImport("libsteam_api64.so")]
        internal static extern IntPtr SteamAPI_ISteamClient_GetISteamScreenshots(
          IntPtr ISteamClient,
          int hSteamuser,
          int hSteamPipe,
          string pchVersion);

        [DllImport("libsteam_api64.so")]
        internal static extern uint SteamAPI_ISteamClient_GetIPCCallCount(IntPtr ISteamClient);

        [DllImport("libsteam_api64.so")]
        internal static extern void SteamAPI_ISteamClient_SetWarningMessageHook(
          IntPtr ISteamClient,
          IntPtr pFunction);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamClient_BShutdownIfAllPipesClosed(
          IntPtr ISteamClient);

        [DllImport("libsteam_api64.so")]
        internal static extern IntPtr SteamAPI_ISteamClient_GetISteamHTTP(
          IntPtr ISteamClient,
          int hSteamuser,
          int hSteamPipe,
          string pchVersion);

        [DllImport("libsteam_api64.so")]
        internal static extern IntPtr SteamAPI_ISteamClient_GetISteamUnifiedMessages(
          IntPtr ISteamClient,
          int hSteamuser,
          int hSteamPipe,
          string pchVersion);

        [DllImport("libsteam_api64.so")]
        internal static extern IntPtr SteamAPI_ISteamClient_GetISteamController(
          IntPtr ISteamClient,
          int hSteamUser,
          int hSteamPipe,
          string pchVersion);

        [DllImport("libsteam_api64.so")]
        internal static extern IntPtr SteamAPI_ISteamClient_GetISteamUGC(
          IntPtr ISteamClient,
          int hSteamUser,
          int hSteamPipe,
          string pchVersion);

        [DllImport("libsteam_api64.so")]
        internal static extern IntPtr SteamAPI_ISteamClient_GetISteamAppList(
          IntPtr ISteamClient,
          int hSteamUser,
          int hSteamPipe,
          string pchVersion);

        [DllImport("libsteam_api64.so")]
        internal static extern IntPtr SteamAPI_ISteamClient_GetISteamMusic(
          IntPtr ISteamClient,
          int hSteamuser,
          int hSteamPipe,
          string pchVersion);

        [DllImport("libsteam_api64.so")]
        internal static extern IntPtr SteamAPI_ISteamClient_GetISteamMusicRemote(
          IntPtr ISteamClient,
          int hSteamuser,
          int hSteamPipe,
          string pchVersion);

        [DllImport("libsteam_api64.so")]
        internal static extern IntPtr SteamAPI_ISteamClient_GetISteamHTMLSurface(
          IntPtr ISteamClient,
          int hSteamuser,
          int hSteamPipe,
          string pchVersion);

        [DllImport("libsteam_api64.so")]
        internal static extern IntPtr SteamAPI_ISteamClient_GetISteamInventory(
          IntPtr ISteamClient,
          int hSteamuser,
          int hSteamPipe,
          string pchVersion);

        [DllImport("libsteam_api64.so")]
        internal static extern IntPtr SteamAPI_ISteamClient_GetISteamVideo(
          IntPtr ISteamClient,
          int hSteamuser,
          int hSteamPipe,
          string pchVersion);

        [DllImport("libsteam_api64.so")]
        internal static extern HSteamUser SteamAPI_ISteamUser_GetHSteamUser(IntPtr ISteamUser);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamUser_BLoggedOn(IntPtr ISteamUser);

        [DllImport("libsteam_api64.so")]
        internal static extern CSteamID SteamAPI_ISteamUser_GetSteamID(IntPtr ISteamUser);

        [DllImport("libsteam_api64.so")]
        internal static extern int SteamAPI_ISteamUser_InitiateGameConnection(
          IntPtr ISteamUser,
          IntPtr pAuthBlob,
          int cbMaxAuthBlob,
          ulong steamIDGameServer,
          uint unIPServer,
          ushort usPortServer,
          [MarshalAs(UnmanagedType.U1)] bool bSecure);

        [DllImport("libsteam_api64.so")]
        internal static extern void SteamAPI_ISteamUser_TerminateGameConnection(
          IntPtr ISteamUser,
          uint unIPServer,
          ushort usPortServer);

        [DllImport("libsteam_api64.so")]
        internal static extern void SteamAPI_ISteamUser_TrackAppUsageEvent(
          IntPtr ISteamUser,
          ulong gameID,
          int eAppUsageEvent,
          string pchExtraInfo);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamUser_GetUserDataFolder(
          IntPtr ISteamUser,
          StringBuilder pchBuffer,
          int cubBuffer);

        [DllImport("libsteam_api64.so")]
        internal static extern void SteamAPI_ISteamUser_StartVoiceRecording(IntPtr ISteamUser);

        [DllImport("libsteam_api64.so")]
        internal static extern void SteamAPI_ISteamUser_StopVoiceRecording(IntPtr ISteamUser);

        [DllImport("libsteam_api64.so")]
        internal static extern VoiceResult SteamAPI_ISteamUser_GetAvailableVoice(
          IntPtr ISteamUser,
          out uint pcbCompressed,
          out uint pcbUncompressed_Deprecated,
          uint nUncompressedVoiceDesiredSampleRate_Deprecated);

        [DllImport("libsteam_api64.so")]
        internal static extern VoiceResult SteamAPI_ISteamUser_GetVoice(
          IntPtr ISteamUser,
          [MarshalAs(UnmanagedType.U1)] bool bWantCompressed,
          IntPtr pDestBuffer,
          uint cbDestBufferSize,
          out uint nBytesWritten,
          [MarshalAs(UnmanagedType.U1)] bool bWantUncompressed_Deprecated,
          IntPtr pUncompressedDestBuffer_Deprecated,
          uint cbUncompressedDestBufferSize_Deprecated,
          out uint nUncompressBytesWritten_Deprecated,
          uint nUncompressedVoiceDesiredSampleRate_Deprecated);

        [DllImport("libsteam_api64.so")]
        internal static extern VoiceResult SteamAPI_ISteamUser_DecompressVoice(
          IntPtr ISteamUser,
          IntPtr pCompressed,
          uint cbCompressed,
          IntPtr pDestBuffer,
          uint cbDestBufferSize,
          out uint nBytesWritten,
          uint nDesiredSampleRate);

        [DllImport("libsteam_api64.so")]
        internal static extern uint SteamAPI_ISteamUser_GetVoiceOptimalSampleRate(IntPtr ISteamUser);

        [DllImport("libsteam_api64.so")]
        internal static extern HAuthTicket SteamAPI_ISteamUser_GetAuthSessionTicket(
          IntPtr ISteamUser,
          IntPtr pTicket,
          int cbMaxTicket,
          out uint pcbTicket);

        [DllImport("libsteam_api64.so")]
        internal static extern BeginAuthSessionResult SteamAPI_ISteamUser_BeginAuthSession(
          IntPtr ISteamUser,
          IntPtr pAuthTicket,
          int cbAuthTicket,
          ulong steamID);

        [DllImport("libsteam_api64.so")]
        internal static extern void SteamAPI_ISteamUser_EndAuthSession(
          IntPtr ISteamUser,
          ulong steamID);

        [DllImport("libsteam_api64.so")]
        internal static extern void SteamAPI_ISteamUser_CancelAuthTicket(
          IntPtr ISteamUser,
          uint hAuthTicket);

        [DllImport("libsteam_api64.so")]
        internal static extern UserHasLicenseForAppResult SteamAPI_ISteamUser_UserHasLicenseForApp(
          IntPtr ISteamUser,
          ulong steamID,
          uint appID);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamUser_BIsBehindNAT(IntPtr ISteamUser);

        [DllImport("libsteam_api64.so")]
        internal static extern void SteamAPI_ISteamUser_AdvertiseGame(
          IntPtr ISteamUser,
          ulong steamIDGameServer,
          uint unIPServer,
          ushort usPortServer);

        [DllImport("libsteam_api64.so")]
        internal static extern SteamAPICall_t SteamAPI_ISteamUser_RequestEncryptedAppTicket(
          IntPtr ISteamUser,
          IntPtr pDataToInclude,
          int cbDataToInclude);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamUser_GetEncryptedAppTicket(
          IntPtr ISteamUser,
          IntPtr pTicket,
          int cbMaxTicket,
          out uint pcbTicket);

        [DllImport("libsteam_api64.so")]
        internal static extern int SteamAPI_ISteamUser_GetGameBadgeLevel(
          IntPtr ISteamUser,
          int nSeries,
          [MarshalAs(UnmanagedType.U1)] bool bFoil);

        [DllImport("libsteam_api64.so")]
        internal static extern int SteamAPI_ISteamUser_GetPlayerSteamLevel(IntPtr ISteamUser);

        [DllImport("libsteam_api64.so")]
        internal static extern SteamAPICall_t SteamAPI_ISteamUser_RequestStoreAuthURL(
          IntPtr ISteamUser,
          string pchRedirectURL);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamUser_BIsPhoneVerified(IntPtr ISteamUser);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamUser_BIsTwoFactorEnabled(IntPtr ISteamUser);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamUser_BIsPhoneIdentifying(IntPtr ISteamUser);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamUser_BIsPhoneRequiringVerification(
          IntPtr ISteamUser);

        [DllImport("libsteam_api64.so")]
        internal static extern IntPtr SteamAPI_ISteamFriends_GetPersonaName(IntPtr ISteamFriends);

        [DllImport("libsteam_api64.so")]
        internal static extern SteamAPICall_t SteamAPI_ISteamFriends_SetPersonaName(
          IntPtr ISteamFriends,
          string pchPersonaName);

        [DllImport("libsteam_api64.so")]
        internal static extern PersonaState SteamAPI_ISteamFriends_GetPersonaState(
          IntPtr ISteamFriends);

        [DllImport("libsteam_api64.so")]
        internal static extern int SteamAPI_ISteamFriends_GetFriendCount(
          IntPtr ISteamFriends,
          int iFriendFlags);

        [DllImport("libsteam_api64.so")]
        internal static extern CSteamID SteamAPI_ISteamFriends_GetFriendByIndex(
          IntPtr ISteamFriends,
          int iFriend,
          int iFriendFlags);

        [DllImport("libsteam_api64.so")]
        internal static extern FriendRelationship SteamAPI_ISteamFriends_GetFriendRelationship(
          IntPtr ISteamFriends,
          ulong steamIDFriend);

        [DllImport("libsteam_api64.so")]
        internal static extern PersonaState SteamAPI_ISteamFriends_GetFriendPersonaState(
          IntPtr ISteamFriends,
          ulong steamIDFriend);

        [DllImport("libsteam_api64.so")]
        internal static extern IntPtr SteamAPI_ISteamFriends_GetFriendPersonaName(
          IntPtr ISteamFriends,
          ulong steamIDFriend);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamFriends_GetFriendGamePlayed(
          IntPtr ISteamFriends,
          ulong steamIDFriend,
          ref FriendGameInfo_t.PackSmall pFriendGameInfo);

        [DllImport("libsteam_api64.so")]
        internal static extern IntPtr SteamAPI_ISteamFriends_GetFriendPersonaNameHistory(
          IntPtr ISteamFriends,
          ulong steamIDFriend,
          int iPersonaName);

        [DllImport("libsteam_api64.so")]
        internal static extern int SteamAPI_ISteamFriends_GetFriendSteamLevel(
          IntPtr ISteamFriends,
          ulong steamIDFriend);

        [DllImport("libsteam_api64.so")]
        internal static extern IntPtr SteamAPI_ISteamFriends_GetPlayerNickname(
          IntPtr ISteamFriends,
          ulong steamIDPlayer);

        [DllImport("libsteam_api64.so")]
        internal static extern int SteamAPI_ISteamFriends_GetFriendsGroupCount(IntPtr ISteamFriends);

        [DllImport("libsteam_api64.so")]
        internal static extern FriendsGroupID_t SteamAPI_ISteamFriends_GetFriendsGroupIDByIndex(
          IntPtr ISteamFriends,
          int iFG);

        [DllImport("libsteam_api64.so")]
        internal static extern IntPtr SteamAPI_ISteamFriends_GetFriendsGroupName(
          IntPtr ISteamFriends,
          short friendsGroupID);

        [DllImport("libsteam_api64.so")]
        internal static extern int SteamAPI_ISteamFriends_GetFriendsGroupMembersCount(
          IntPtr ISteamFriends,
          short friendsGroupID);

        [DllImport("libsteam_api64.so")]
        internal static extern void SteamAPI_ISteamFriends_GetFriendsGroupMembersList(
          IntPtr ISteamFriends,
          short friendsGroupID,
          IntPtr pOutSteamIDMembers,
          int nMembersCount);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamFriends_HasFriend(
          IntPtr ISteamFriends,
          ulong steamIDFriend,
          int iFriendFlags);

        [DllImport("libsteam_api64.so")]
        internal static extern int SteamAPI_ISteamFriends_GetClanCount(IntPtr ISteamFriends);

        [DllImport("libsteam_api64.so")]
        internal static extern CSteamID SteamAPI_ISteamFriends_GetClanByIndex(
          IntPtr ISteamFriends,
          int iClan);

        [DllImport("libsteam_api64.so")]
        internal static extern IntPtr SteamAPI_ISteamFriends_GetClanName(
          IntPtr ISteamFriends,
          ulong steamIDClan);

        [DllImport("libsteam_api64.so")]
        internal static extern IntPtr SteamAPI_ISteamFriends_GetClanTag(
          IntPtr ISteamFriends,
          ulong steamIDClan);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamFriends_GetClanActivityCounts(
          IntPtr ISteamFriends,
          ulong steamIDClan,
          out int pnOnline,
          out int pnInGame,
          out int pnChatting);

        [DllImport("libsteam_api64.so")]
        internal static extern SteamAPICall_t SteamAPI_ISteamFriends_DownloadClanActivityCounts(
          IntPtr ISteamFriends,
          IntPtr psteamIDClans,
          int cClansToRequest);

        [DllImport("libsteam_api64.so")]
        internal static extern int SteamAPI_ISteamFriends_GetFriendCountFromSource(
          IntPtr ISteamFriends,
          ulong steamIDSource);

        [DllImport("libsteam_api64.so")]
        internal static extern CSteamID SteamAPI_ISteamFriends_GetFriendFromSourceByIndex(
          IntPtr ISteamFriends,
          ulong steamIDSource,
          int iFriend);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamFriends_IsUserInSource(
          IntPtr ISteamFriends,
          ulong steamIDUser,
          ulong steamIDSource);

        [DllImport("libsteam_api64.so")]
        internal static extern void SteamAPI_ISteamFriends_SetInGameVoiceSpeaking(
          IntPtr ISteamFriends,
          ulong steamIDUser,
          [MarshalAs(UnmanagedType.U1)] bool bSpeaking);

        [DllImport("libsteam_api64.so")]
        internal static extern void SteamAPI_ISteamFriends_ActivateGameOverlay(
          IntPtr ISteamFriends,
          string pchDialog);

        [DllImport("libsteam_api64.so")]
        internal static extern void SteamAPI_ISteamFriends_ActivateGameOverlayToUser(
          IntPtr ISteamFriends,
          string pchDialog,
          ulong steamID);

        [DllImport("libsteam_api64.so")]
        internal static extern void SteamAPI_ISteamFriends_ActivateGameOverlayToWebPage(
          IntPtr ISteamFriends,
          string pchURL);

        [DllImport("libsteam_api64.so")]
        internal static extern void SteamAPI_ISteamFriends_ActivateGameOverlayToStore(
          IntPtr ISteamFriends,
          uint nAppID,
          OverlayToStoreFlag eFlag);

        [DllImport("libsteam_api64.so")]
        internal static extern void SteamAPI_ISteamFriends_SetPlayedWith(
          IntPtr ISteamFriends,
          ulong steamIDUserPlayedWith);

        [DllImport("libsteam_api64.so")]
        internal static extern void SteamAPI_ISteamFriends_ActivateGameOverlayInviteDialog(
          IntPtr ISteamFriends,
          ulong steamIDLobby);

        [DllImport("libsteam_api64.so")]
        internal static extern int SteamAPI_ISteamFriends_GetSmallFriendAvatar(
          IntPtr ISteamFriends,
          ulong steamIDFriend);

        [DllImport("libsteam_api64.so")]
        internal static extern int SteamAPI_ISteamFriends_GetMediumFriendAvatar(
          IntPtr ISteamFriends,
          ulong steamIDFriend);

        [DllImport("libsteam_api64.so")]
        internal static extern int SteamAPI_ISteamFriends_GetLargeFriendAvatar(
          IntPtr ISteamFriends,
          ulong steamIDFriend);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamFriends_RequestUserInformation(
          IntPtr ISteamFriends,
          ulong steamIDUser,
          [MarshalAs(UnmanagedType.U1)] bool bRequireNameOnly);

        [DllImport("libsteam_api64.so")]
        internal static extern SteamAPICall_t SteamAPI_ISteamFriends_RequestClanOfficerList(
          IntPtr ISteamFriends,
          ulong steamIDClan);

        [DllImport("libsteam_api64.so")]
        internal static extern CSteamID SteamAPI_ISteamFriends_GetClanOwner(
          IntPtr ISteamFriends,
          ulong steamIDClan);

        [DllImport("libsteam_api64.so")]
        internal static extern int SteamAPI_ISteamFriends_GetClanOfficerCount(
          IntPtr ISteamFriends,
          ulong steamIDClan);

        [DllImport("libsteam_api64.so")]
        internal static extern CSteamID SteamAPI_ISteamFriends_GetClanOfficerByIndex(
          IntPtr ISteamFriends,
          ulong steamIDClan,
          int iOfficer);

        [DllImport("libsteam_api64.so")]
        internal static extern uint SteamAPI_ISteamFriends_GetUserRestrictions(IntPtr ISteamFriends);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamFriends_SetRichPresence(
          IntPtr ISteamFriends,
          string pchKey,
          string pchValue);

        [DllImport("libsteam_api64.so")]
        internal static extern void SteamAPI_ISteamFriends_ClearRichPresence(IntPtr ISteamFriends);

        [DllImport("libsteam_api64.so")]
        internal static extern IntPtr SteamAPI_ISteamFriends_GetFriendRichPresence(
          IntPtr ISteamFriends,
          ulong steamIDFriend,
          string pchKey);

        [DllImport("libsteam_api64.so")]
        internal static extern int SteamAPI_ISteamFriends_GetFriendRichPresenceKeyCount(
          IntPtr ISteamFriends,
          ulong steamIDFriend);

        [DllImport("libsteam_api64.so")]
        internal static extern IntPtr SteamAPI_ISteamFriends_GetFriendRichPresenceKeyByIndex(
          IntPtr ISteamFriends,
          ulong steamIDFriend,
          int iKey);

        [DllImport("libsteam_api64.so")]
        internal static extern void SteamAPI_ISteamFriends_RequestFriendRichPresence(
          IntPtr ISteamFriends,
          ulong steamIDFriend);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamFriends_InviteUserToGame(
          IntPtr ISteamFriends,
          ulong steamIDFriend,
          string pchConnectString);

        [DllImport("libsteam_api64.so")]
        internal static extern int SteamAPI_ISteamFriends_GetCoplayFriendCount(IntPtr ISteamFriends);

        [DllImport("libsteam_api64.so")]
        internal static extern CSteamID SteamAPI_ISteamFriends_GetCoplayFriend(
          IntPtr ISteamFriends,
          int iCoplayFriend);

        [DllImport("libsteam_api64.so")]
        internal static extern int SteamAPI_ISteamFriends_GetFriendCoplayTime(
          IntPtr ISteamFriends,
          ulong steamIDFriend);

        [DllImport("libsteam_api64.so")]
        internal static extern AppId_t SteamAPI_ISteamFriends_GetFriendCoplayGame(
          IntPtr ISteamFriends,
          ulong steamIDFriend);

        [DllImport("libsteam_api64.so")]
        internal static extern SteamAPICall_t SteamAPI_ISteamFriends_JoinClanChatRoom(
          IntPtr ISteamFriends,
          ulong steamIDClan);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamFriends_LeaveClanChatRoom(
          IntPtr ISteamFriends,
          ulong steamIDClan);

        [DllImport("libsteam_api64.so")]
        internal static extern int SteamAPI_ISteamFriends_GetClanChatMemberCount(
          IntPtr ISteamFriends,
          ulong steamIDClan);

        [DllImport("libsteam_api64.so")]
        internal static extern CSteamID SteamAPI_ISteamFriends_GetChatMemberByIndex(
          IntPtr ISteamFriends,
          ulong steamIDClan,
          int iUser);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamFriends_SendClanChatMessage(
          IntPtr ISteamFriends,
          ulong steamIDClanChat,
          string pchText);

        [DllImport("libsteam_api64.so")]
        internal static extern int SteamAPI_ISteamFriends_GetClanChatMessage(
          IntPtr ISteamFriends,
          ulong steamIDClanChat,
          int iMessage,
          IntPtr prgchText,
          int cchTextMax,
          out ChatEntryType peChatEntryType,
          out ulong psteamidChatter);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamFriends_IsClanChatAdmin(
          IntPtr ISteamFriends,
          ulong steamIDClanChat,
          ulong steamIDUser);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamFriends_IsClanChatWindowOpenInSteam(
          IntPtr ISteamFriends,
          ulong steamIDClanChat);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamFriends_OpenClanChatWindowInSteam(
          IntPtr ISteamFriends,
          ulong steamIDClanChat);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamFriends_CloseClanChatWindowInSteam(
          IntPtr ISteamFriends,
          ulong steamIDClanChat);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamFriends_SetListenForFriendsMessages(
          IntPtr ISteamFriends,
          [MarshalAs(UnmanagedType.U1)] bool bInterceptEnabled);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamFriends_ReplyToFriendMessage(
          IntPtr ISteamFriends,
          ulong steamIDFriend,
          string pchMsgToSend);

        [DllImport("libsteam_api64.so")]
        internal static extern int SteamAPI_ISteamFriends_GetFriendMessage(
          IntPtr ISteamFriends,
          ulong steamIDFriend,
          int iMessageID,
          IntPtr pvData,
          int cubData,
          out ChatEntryType peChatEntryType);

        [DllImport("libsteam_api64.so")]
        internal static extern SteamAPICall_t SteamAPI_ISteamFriends_GetFollowerCount(
          IntPtr ISteamFriends,
          ulong steamID);

        [DllImport("libsteam_api64.so")]
        internal static extern SteamAPICall_t SteamAPI_ISteamFriends_IsFollowing(
          IntPtr ISteamFriends,
          ulong steamID);

        [DllImport("libsteam_api64.so")]
        internal static extern SteamAPICall_t SteamAPI_ISteamFriends_EnumerateFollowingList(
          IntPtr ISteamFriends,
          uint unStartIndex);

        [DllImport("libsteam_api64.so")]
        internal static extern uint SteamAPI_ISteamUtils_GetSecondsSinceAppActive(IntPtr ISteamUtils);

        [DllImport("libsteam_api64.so")]
        internal static extern uint SteamAPI_ISteamUtils_GetSecondsSinceComputerActive(
          IntPtr ISteamUtils);

        [DllImport("libsteam_api64.so")]
        internal static extern Universe SteamAPI_ISteamUtils_GetConnectedUniverse(IntPtr ISteamUtils);

        [DllImport("libsteam_api64.so")]
        internal static extern uint SteamAPI_ISteamUtils_GetServerRealTime(IntPtr ISteamUtils);

        [DllImport("libsteam_api64.so")]
        internal static extern IntPtr SteamAPI_ISteamUtils_GetIPCountry(IntPtr ISteamUtils);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamUtils_GetImageSize(
          IntPtr ISteamUtils,
          int iImage,
          out uint pnWidth,
          out uint pnHeight);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamUtils_GetImageRGBA(
          IntPtr ISteamUtils,
          int iImage,
          IntPtr pubDest,
          int nDestBufferSize);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamUtils_GetCSERIPPort(
          IntPtr ISteamUtils,
          out uint unIP,
          out ushort usPort);

        [DllImport("libsteam_api64.so")]
        internal static extern byte SteamAPI_ISteamUtils_GetCurrentBatteryPower(IntPtr ISteamUtils);

        [DllImport("libsteam_api64.so")]
        internal static extern uint SteamAPI_ISteamUtils_GetAppID(IntPtr ISteamUtils);

        [DllImport("libsteam_api64.so")]
        internal static extern void SteamAPI_ISteamUtils_SetOverlayNotificationPosition(
          IntPtr ISteamUtils,
          NotificationPosition eNotificationPosition);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamUtils_IsAPICallCompleted(
          IntPtr ISteamUtils,
          ulong hSteamAPICall,
          [MarshalAs(UnmanagedType.U1)] ref bool pbFailed);

        [DllImport("libsteam_api64.so")]
        internal static extern SteamAPICallFailure SteamAPI_ISteamUtils_GetAPICallFailureReason(
          IntPtr ISteamUtils,
          ulong hSteamAPICall);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamUtils_GetAPICallResult(
          IntPtr ISteamUtils,
          ulong hSteamAPICall,
          IntPtr pCallback,
          int cubCallback,
          int iCallbackExpected,
          [MarshalAs(UnmanagedType.U1)] ref bool pbFailed);

        [DllImport("libsteam_api64.so")]
        internal static extern uint SteamAPI_ISteamUtils_GetIPCCallCount(IntPtr ISteamUtils);

        [DllImport("libsteam_api64.so")]
        internal static extern void SteamAPI_ISteamUtils_SetWarningMessageHook(
          IntPtr ISteamUtils,
          IntPtr pFunction);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamUtils_IsOverlayEnabled(IntPtr ISteamUtils);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamUtils_BOverlayNeedsPresent(IntPtr ISteamUtils);

        [DllImport("libsteam_api64.so")]
        internal static extern SteamAPICall_t SteamAPI_ISteamUtils_CheckFileSignature(
          IntPtr ISteamUtils,
          string szFileName);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamUtils_ShowGamepadTextInput(
          IntPtr ISteamUtils,
          GamepadTextInputMode eInputMode,
          GamepadTextInputLineMode eLineInputMode,
          string pchDescription,
          uint unCharMax,
          string pchExistingText);

        [DllImport("libsteam_api64.so")]
        internal static extern uint SteamAPI_ISteamUtils_GetEnteredGamepadTextLength(
          IntPtr ISteamUtils);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamUtils_GetEnteredGamepadTextInput(
          IntPtr ISteamUtils,
          StringBuilder pchText,
          uint cchText);

        [DllImport("libsteam_api64.so")]
        internal static extern IntPtr SteamAPI_ISteamUtils_GetSteamUILanguage(IntPtr ISteamUtils);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamUtils_IsSteamRunningInVR(IntPtr ISteamUtils);

        [DllImport("libsteam_api64.so")]
        internal static extern void SteamAPI_ISteamUtils_SetOverlayNotificationInset(
          IntPtr ISteamUtils,
          int nHorizontalInset,
          int nVerticalInset);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamUtils_IsSteamInBigPictureMode(IntPtr ISteamUtils);

        [DllImport("libsteam_api64.so")]
        internal static extern void SteamAPI_ISteamUtils_StartVRDashboard(IntPtr ISteamUtils);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamUtils_IsVRHeadsetStreamingEnabled(
          IntPtr ISteamUtils);

        [DllImport("libsteam_api64.so")]
        internal static extern void SteamAPI_ISteamUtils_SetVRHeadsetStreamingEnabled(
          IntPtr ISteamUtils,
          [MarshalAs(UnmanagedType.U1)] bool bEnabled);

        [DllImport("libsteam_api64.so")]
        internal static extern int SteamAPI_ISteamMatchmaking_GetFavoriteGameCount(
          IntPtr ISteamMatchmaking);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamMatchmaking_GetFavoriteGame(
          IntPtr ISteamMatchmaking,
          int iGame,
          ref uint pnAppID,
          out uint pnIP,
          out ushort pnConnPort,
          out ushort pnQueryPort,
          out uint punFlags,
          out uint pRTime32LastPlayedOnServer);

        [DllImport("libsteam_api64.so")]
        internal static extern int SteamAPI_ISteamMatchmaking_AddFavoriteGame(
          IntPtr ISteamMatchmaking,
          uint nAppID,
          uint nIP,
          ushort nConnPort,
          ushort nQueryPort,
          uint unFlags,
          uint rTime32LastPlayedOnServer);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamMatchmaking_RemoveFavoriteGame(
          IntPtr ISteamMatchmaking,
          uint nAppID,
          uint nIP,
          ushort nConnPort,
          ushort nQueryPort,
          uint unFlags);

        [DllImport("libsteam_api64.so")]
        internal static extern SteamAPICall_t SteamAPI_ISteamMatchmaking_RequestLobbyList(
          IntPtr ISteamMatchmaking);

        [DllImport("libsteam_api64.so")]
        internal static extern void SteamAPI_ISteamMatchmaking_AddRequestLobbyListStringFilter(
          IntPtr ISteamMatchmaking,
          string pchKeyToMatch,
          string pchValueToMatch,
          LobbyComparison eComparisonType);

        [DllImport("libsteam_api64.so")]
        internal static extern void SteamAPI_ISteamMatchmaking_AddRequestLobbyListNumericalFilter(
          IntPtr ISteamMatchmaking,
          string pchKeyToMatch,
          int nValueToMatch,
          LobbyComparison eComparisonType);

        [DllImport("libsteam_api64.so")]
        internal static extern void SteamAPI_ISteamMatchmaking_AddRequestLobbyListNearValueFilter(
          IntPtr ISteamMatchmaking,
          string pchKeyToMatch,
          int nValueToBeCloseTo);

        [DllImport("libsteam_api64.so")]
        internal static extern void SteamAPI_ISteamMatchmaking_AddRequestLobbyListFilterSlotsAvailable(
          IntPtr ISteamMatchmaking,
          int nSlotsAvailable);

        [DllImport("libsteam_api64.so")]
        internal static extern void SteamAPI_ISteamMatchmaking_AddRequestLobbyListDistanceFilter(
          IntPtr ISteamMatchmaking,
          LobbyDistanceFilter eLobbyDistanceFilter);

        [DllImport("libsteam_api64.so")]
        internal static extern void SteamAPI_ISteamMatchmaking_AddRequestLobbyListResultCountFilter(
          IntPtr ISteamMatchmaking,
          int cMaxResults);

        [DllImport("libsteam_api64.so")]
        internal static extern void SteamAPI_ISteamMatchmaking_AddRequestLobbyListCompatibleMembersFilter(
          IntPtr ISteamMatchmaking,
          ulong steamIDLobby);

        [DllImport("libsteam_api64.so")]
        internal static extern CSteamID SteamAPI_ISteamMatchmaking_GetLobbyByIndex(
          IntPtr ISteamMatchmaking,
          int iLobby);

        [DllImport("libsteam_api64.so")]
        internal static extern SteamAPICall_t SteamAPI_ISteamMatchmaking_CreateLobby(
          IntPtr ISteamMatchmaking,
          LobbyType eLobbyType,
          int cMaxMembers);

        [DllImport("libsteam_api64.so")]
        internal static extern SteamAPICall_t SteamAPI_ISteamMatchmaking_JoinLobby(
          IntPtr ISteamMatchmaking,
          ulong steamIDLobby);

        [DllImport("libsteam_api64.so")]
        internal static extern void SteamAPI_ISteamMatchmaking_LeaveLobby(
          IntPtr ISteamMatchmaking,
          ulong steamIDLobby);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamMatchmaking_InviteUserToLobby(
          IntPtr ISteamMatchmaking,
          ulong steamIDLobby,
          ulong steamIDInvitee);

        [DllImport("libsteam_api64.so")]
        internal static extern int SteamAPI_ISteamMatchmaking_GetNumLobbyMembers(
          IntPtr ISteamMatchmaking,
          ulong steamIDLobby);

        [DllImport("libsteam_api64.so")]
        internal static extern CSteamID SteamAPI_ISteamMatchmaking_GetLobbyMemberByIndex(
          IntPtr ISteamMatchmaking,
          ulong steamIDLobby,
          int iMember);

        [DllImport("libsteam_api64.so")]
        internal static extern IntPtr SteamAPI_ISteamMatchmaking_GetLobbyData(
          IntPtr ISteamMatchmaking,
          ulong steamIDLobby,
          string pchKey);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamMatchmaking_SetLobbyData(
          IntPtr ISteamMatchmaking,
          ulong steamIDLobby,
          string pchKey,
          string pchValue);

        [DllImport("libsteam_api64.so")]
        internal static extern int SteamAPI_ISteamMatchmaking_GetLobbyDataCount(
          IntPtr ISteamMatchmaking,
          ulong steamIDLobby);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamMatchmaking_GetLobbyDataByIndex(
          IntPtr ISteamMatchmaking,
          ulong steamIDLobby,
          int iLobbyData,
          StringBuilder pchKey,
          int cchKeyBufferSize,
          StringBuilder pchValue,
          int cchValueBufferSize);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamMatchmaking_DeleteLobbyData(
          IntPtr ISteamMatchmaking,
          ulong steamIDLobby,
          string pchKey);

        [DllImport("libsteam_api64.so")]
        internal static extern IntPtr SteamAPI_ISteamMatchmaking_GetLobbyMemberData(
          IntPtr ISteamMatchmaking,
          ulong steamIDLobby,
          ulong steamIDUser,
          string pchKey);

        [DllImport("libsteam_api64.so")]
        internal static extern void SteamAPI_ISteamMatchmaking_SetLobbyMemberData(
          IntPtr ISteamMatchmaking,
          ulong steamIDLobby,
          string pchKey,
          string pchValue);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamMatchmaking_SendLobbyChatMsg(
          IntPtr ISteamMatchmaking,
          ulong steamIDLobby,
          IntPtr pvMsgBody,
          int cubMsgBody);

        [DllImport("libsteam_api64.so")]
        internal static extern int SteamAPI_ISteamMatchmaking_GetLobbyChatEntry(
          IntPtr ISteamMatchmaking,
          ulong steamIDLobby,
          int iChatID,
          out ulong pSteamIDUser,
          IntPtr pvData,
          int cubData,
          out ChatEntryType peChatEntryType);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamMatchmaking_RequestLobbyData(
          IntPtr ISteamMatchmaking,
          ulong steamIDLobby);

        [DllImport("libsteam_api64.so")]
        internal static extern void SteamAPI_ISteamMatchmaking_SetLobbyGameServer(
          IntPtr ISteamMatchmaking,
          ulong steamIDLobby,
          uint unGameServerIP,
          ushort unGameServerPort,
          ulong steamIDGameServer);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamMatchmaking_GetLobbyGameServer(
          IntPtr ISteamMatchmaking,
          ulong steamIDLobby,
          out uint punGameServerIP,
          out ushort punGameServerPort,
          out ulong psteamIDGameServer);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamMatchmaking_SetLobbyMemberLimit(
          IntPtr ISteamMatchmaking,
          ulong steamIDLobby,
          int cMaxMembers);

        [DllImport("libsteam_api64.so")]
        internal static extern int SteamAPI_ISteamMatchmaking_GetLobbyMemberLimit(
          IntPtr ISteamMatchmaking,
          ulong steamIDLobby);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamMatchmaking_SetLobbyType(
          IntPtr ISteamMatchmaking,
          ulong steamIDLobby,
          LobbyType eLobbyType);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamMatchmaking_SetLobbyJoinable(
          IntPtr ISteamMatchmaking,
          ulong steamIDLobby,
          [MarshalAs(UnmanagedType.U1)] bool bLobbyJoinable);

        [DllImport("libsteam_api64.so")]
        internal static extern CSteamID SteamAPI_ISteamMatchmaking_GetLobbyOwner(
          IntPtr ISteamMatchmaking,
          ulong steamIDLobby);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamMatchmaking_SetLobbyOwner(
          IntPtr ISteamMatchmaking,
          ulong steamIDLobby,
          ulong steamIDNewOwner);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamMatchmaking_SetLinkedLobby(
          IntPtr ISteamMatchmaking,
          ulong steamIDLobby,
          ulong steamIDLobbyDependent);

        [DllImport("libsteam_api64.so")]
        internal static extern HServerListRequest SteamAPI_ISteamMatchmakingServers_RequestInternetServerList(
          IntPtr ISteamMatchmakingServers,
          uint iApp,
          IntPtr ppchFilters,
          uint nFilters,
          IntPtr pRequestServersResponse);

        [DllImport("libsteam_api64.so")]
        internal static extern HServerListRequest SteamAPI_ISteamMatchmakingServers_RequestLANServerList(
          IntPtr ISteamMatchmakingServers,
          uint iApp,
          IntPtr pRequestServersResponse);

        [DllImport("libsteam_api64.so")]
        internal static extern HServerListRequest SteamAPI_ISteamMatchmakingServers_RequestFriendsServerList(
          IntPtr ISteamMatchmakingServers,
          uint iApp,
          IntPtr ppchFilters,
          uint nFilters,
          IntPtr pRequestServersResponse);

        [DllImport("libsteam_api64.so")]
        internal static extern HServerListRequest SteamAPI_ISteamMatchmakingServers_RequestFavoritesServerList(
          IntPtr ISteamMatchmakingServers,
          uint iApp,
          IntPtr ppchFilters,
          uint nFilters,
          IntPtr pRequestServersResponse);

        [DllImport("libsteam_api64.so")]
        internal static extern HServerListRequest SteamAPI_ISteamMatchmakingServers_RequestHistoryServerList(
          IntPtr ISteamMatchmakingServers,
          uint iApp,
          IntPtr ppchFilters,
          uint nFilters,
          IntPtr pRequestServersResponse);

        [DllImport("libsteam_api64.so")]
        internal static extern HServerListRequest SteamAPI_ISteamMatchmakingServers_RequestSpectatorServerList(
          IntPtr ISteamMatchmakingServers,
          uint iApp,
          IntPtr ppchFilters,
          uint nFilters,
          IntPtr pRequestServersResponse);

        [DllImport("libsteam_api64.so")]
        internal static extern void SteamAPI_ISteamMatchmakingServers_ReleaseRequest(
          IntPtr ISteamMatchmakingServers,
          IntPtr hServerListRequest);

        [DllImport("libsteam_api64.so")]
        internal static extern IntPtr SteamAPI_ISteamMatchmakingServers_GetServerDetails(
          IntPtr ISteamMatchmakingServers,
          IntPtr hRequest,
          int iServer);

        [DllImport("libsteam_api64.so")]
        internal static extern void SteamAPI_ISteamMatchmakingServers_CancelQuery(
          IntPtr ISteamMatchmakingServers,
          IntPtr hRequest);

        [DllImport("libsteam_api64.so")]
        internal static extern void SteamAPI_ISteamMatchmakingServers_RefreshQuery(
          IntPtr ISteamMatchmakingServers,
          IntPtr hRequest);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamMatchmakingServers_IsRefreshing(
          IntPtr ISteamMatchmakingServers,
          IntPtr hRequest);

        [DllImport("libsteam_api64.so")]
        internal static extern int SteamAPI_ISteamMatchmakingServers_GetServerCount(
          IntPtr ISteamMatchmakingServers,
          IntPtr hRequest);

        [DllImport("libsteam_api64.so")]
        internal static extern void SteamAPI_ISteamMatchmakingServers_RefreshServer(
          IntPtr ISteamMatchmakingServers,
          IntPtr hRequest,
          int iServer);

        [DllImport("libsteam_api64.so")]
        internal static extern HServerQuery SteamAPI_ISteamMatchmakingServers_PingServer(
          IntPtr ISteamMatchmakingServers,
          uint unIP,
          ushort usPort,
          IntPtr pRequestServersResponse);

        [DllImport("libsteam_api64.so")]
        internal static extern HServerQuery SteamAPI_ISteamMatchmakingServers_PlayerDetails(
          IntPtr ISteamMatchmakingServers,
          uint unIP,
          ushort usPort,
          IntPtr pRequestServersResponse);

        [DllImport("libsteam_api64.so")]
        internal static extern HServerQuery SteamAPI_ISteamMatchmakingServers_ServerRules(
          IntPtr ISteamMatchmakingServers,
          uint unIP,
          ushort usPort,
          IntPtr pRequestServersResponse);

        [DllImport("libsteam_api64.so")]
        internal static extern void SteamAPI_ISteamMatchmakingServers_CancelServerQuery(
          IntPtr ISteamMatchmakingServers,
          int hServerQuery);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamRemoteStorage_FileWrite(
          IntPtr ISteamRemoteStorage,
          string pchFile,
          IntPtr pvData,
          int cubData);

        [DllImport("libsteam_api64.so")]
        internal static extern int SteamAPI_ISteamRemoteStorage_FileRead(
          IntPtr ISteamRemoteStorage,
          string pchFile,
          IntPtr pvData,
          int cubDataToRead);

        [DllImport("libsteam_api64.so")]
        internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_FileWriteAsync(
          IntPtr ISteamRemoteStorage,
          string pchFile,
          IntPtr pvData,
          uint cubData);

        [DllImport("libsteam_api64.so")]
        internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_FileReadAsync(
          IntPtr ISteamRemoteStorage,
          string pchFile,
          uint nOffset,
          uint cubToRead);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamRemoteStorage_FileReadAsyncComplete(
          IntPtr ISteamRemoteStorage,
          ulong hReadCall,
          IntPtr pvBuffer,
          uint cubToRead);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamRemoteStorage_FileForget(
          IntPtr ISteamRemoteStorage,
          string pchFile);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamRemoteStorage_FileDelete(
          IntPtr ISteamRemoteStorage,
          string pchFile);

        [DllImport("libsteam_api64.so")]
        internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_FileShare(
          IntPtr ISteamRemoteStorage,
          string pchFile);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamRemoteStorage_SetSyncPlatforms(
          IntPtr ISteamRemoteStorage,
          string pchFile,
          RemoteStoragePlatform eRemoteStoragePlatform);

        [DllImport("libsteam_api64.so")]
        internal static extern UGCFileWriteStreamHandle_t SteamAPI_ISteamRemoteStorage_FileWriteStreamOpen(
          IntPtr ISteamRemoteStorage,
          string pchFile);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamRemoteStorage_FileWriteStreamWriteChunk(
          IntPtr ISteamRemoteStorage,
          ulong writeHandle,
          IntPtr pvData,
          int cubData);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamRemoteStorage_FileWriteStreamClose(
          IntPtr ISteamRemoteStorage,
          ulong writeHandle);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamRemoteStorage_FileWriteStreamCancel(
          IntPtr ISteamRemoteStorage,
          ulong writeHandle);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamRemoteStorage_FileExists(
          IntPtr ISteamRemoteStorage,
          string pchFile);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamRemoteStorage_FilePersisted(
          IntPtr ISteamRemoteStorage,
          string pchFile);

        [DllImport("libsteam_api64.so")]
        internal static extern int SteamAPI_ISteamRemoteStorage_GetFileSize(
          IntPtr ISteamRemoteStorage,
          string pchFile);

        [DllImport("libsteam_api64.so")]
        internal static extern long SteamAPI_ISteamRemoteStorage_GetFileTimestamp(
          IntPtr ISteamRemoteStorage,
          string pchFile);

        [DllImport("libsteam_api64.so")]
        internal static extern RemoteStoragePlatform SteamAPI_ISteamRemoteStorage_GetSyncPlatforms(
          IntPtr ISteamRemoteStorage,
          string pchFile);

        [DllImport("libsteam_api64.so")]
        internal static extern int SteamAPI_ISteamRemoteStorage_GetFileCount(
          IntPtr ISteamRemoteStorage);

        [DllImport("libsteam_api64.so")]
        internal static extern IntPtr SteamAPI_ISteamRemoteStorage_GetFileNameAndSize(
          IntPtr ISteamRemoteStorage,
          int iFile,
          out int pnFileSizeInBytes);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamRemoteStorage_GetQuota(
          IntPtr ISteamRemoteStorage,
          out ulong pnTotalBytes,
          out ulong puAvailableBytes);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamRemoteStorage_IsCloudEnabledForAccount(
          IntPtr ISteamRemoteStorage);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamRemoteStorage_IsCloudEnabledForApp(
          IntPtr ISteamRemoteStorage);

        [DllImport("libsteam_api64.so")]
        internal static extern void SteamAPI_ISteamRemoteStorage_SetCloudEnabledForApp(
          IntPtr ISteamRemoteStorage,
          [MarshalAs(UnmanagedType.U1)] bool bEnabled);

        [DllImport("libsteam_api64.so")]
        internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_UGCDownload(
          IntPtr ISteamRemoteStorage,
          ulong hContent,
          uint unPriority);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamRemoteStorage_GetUGCDownloadProgress(
          IntPtr ISteamRemoteStorage,
          ulong hContent,
          out int pnBytesDownloaded,
          out int pnBytesExpected);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamRemoteStorage_GetUGCDetails(
          IntPtr ISteamRemoteStorage,
          ulong hContent,
          ref uint pnAppID,
          StringBuilder ppchName,
          out int pnFileSizeInBytes,
          out ulong pSteamIDOwner);

        [DllImport("libsteam_api64.so")]
        internal static extern int SteamAPI_ISteamRemoteStorage_UGCRead(
          IntPtr ISteamRemoteStorage,
          ulong hContent,
          IntPtr pvData,
          int cubDataToRead,
          uint cOffset,
          UGCReadAction eAction);

        [DllImport("libsteam_api64.so")]
        internal static extern int SteamAPI_ISteamRemoteStorage_GetCachedUGCCount(
          IntPtr ISteamRemoteStorage);

        [DllImport("libsteam_api64.so")]
        internal static extern UGCHandle_t SteamAPI_ISteamRemoteStorage_GetCachedUGCHandle(
          IntPtr ISteamRemoteStorage,
          int iCachedContent);

        [DllImport("libsteam_api64.so")]
        internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_PublishWorkshopFile(
          IntPtr ISteamRemoteStorage,
          string pchFile,
          string pchPreviewFile,
          uint nConsumerAppId,
          string pchTitle,
          string pchDescription,
          RemoteStoragePublishedFileVisibility eVisibility,
          ref SteamParamStringArray_t.PackSmall pTags,
          WorkshopFileType eWorkshopFileType);

        [DllImport("libsteam_api64.so")]
        internal static extern PublishedFileUpdateHandle_t SteamAPI_ISteamRemoteStorage_CreatePublishedFileUpdateRequest(
          IntPtr ISteamRemoteStorage,
          ulong unPublishedFileId);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamRemoteStorage_UpdatePublishedFileFile(
          IntPtr ISteamRemoteStorage,
          ulong updateHandle,
          string pchFile);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamRemoteStorage_UpdatePublishedFilePreviewFile(
          IntPtr ISteamRemoteStorage,
          ulong updateHandle,
          string pchPreviewFile);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamRemoteStorage_UpdatePublishedFileTitle(
          IntPtr ISteamRemoteStorage,
          ulong updateHandle,
          string pchTitle);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamRemoteStorage_UpdatePublishedFileDescription(
          IntPtr ISteamRemoteStorage,
          ulong updateHandle,
          string pchDescription);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamRemoteStorage_UpdatePublishedFileVisibility(
          IntPtr ISteamRemoteStorage,
          ulong updateHandle,
          RemoteStoragePublishedFileVisibility eVisibility);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamRemoteStorage_UpdatePublishedFileTags(
          IntPtr ISteamRemoteStorage,
          ulong updateHandle,
          ref SteamParamStringArray_t.PackSmall pTags);

        [DllImport("libsteam_api64.so")]
        internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_CommitPublishedFileUpdate(
          IntPtr ISteamRemoteStorage,
          ulong updateHandle);

        [DllImport("libsteam_api64.so")]
        internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_GetPublishedFileDetails(
          IntPtr ISteamRemoteStorage,
          ulong unPublishedFileId,
          uint unMaxSecondsOld);

        [DllImport("libsteam_api64.so")]
        internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_DeletePublishedFile(
          IntPtr ISteamRemoteStorage,
          ulong unPublishedFileId);

        [DllImport("libsteam_api64.so")]
        internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_EnumerateUserPublishedFiles(
          IntPtr ISteamRemoteStorage,
          uint unStartIndex);

        [DllImport("libsteam_api64.so")]
        internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_SubscribePublishedFile(
          IntPtr ISteamRemoteStorage,
          ulong unPublishedFileId);

        [DllImport("libsteam_api64.so")]
        internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_EnumerateUserSubscribedFiles(
          IntPtr ISteamRemoteStorage,
          uint unStartIndex);

        [DllImport("libsteam_api64.so")]
        internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_UnsubscribePublishedFile(
          IntPtr ISteamRemoteStorage,
          ulong unPublishedFileId);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamRemoteStorage_UpdatePublishedFileSetChangeDescription(
          IntPtr ISteamRemoteStorage,
          ulong updateHandle,
          string pchChangeDescription);

        [DllImport("libsteam_api64.so")]
        internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_GetPublishedItemVoteDetails(
          IntPtr ISteamRemoteStorage,
          ulong unPublishedFileId);

        [DllImport("libsteam_api64.so")]
        internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_UpdateUserPublishedItemVote(
          IntPtr ISteamRemoteStorage,
          ulong unPublishedFileId,
          [MarshalAs(UnmanagedType.U1)] bool bVoteUp);

        [DllImport("libsteam_api64.so")]
        internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_GetUserPublishedItemVoteDetails(
          IntPtr ISteamRemoteStorage,
          ulong unPublishedFileId);

        [DllImport("libsteam_api64.so")]
        internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_EnumerateUserSharedWorkshopFiles(
          IntPtr ISteamRemoteStorage,
          ulong steamId,
          uint unStartIndex,
          ref SteamParamStringArray_t.PackSmall pRequiredTags,
          ref SteamParamStringArray_t.PackSmall pExcludedTags);

        [DllImport("libsteam_api64.so")]
        internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_PublishVideo(
          IntPtr ISteamRemoteStorage,
          WorkshopVideoProvider eVideoProvider,
          string pchVideoAccount,
          string pchVideoIdentifier,
          string pchPreviewFile,
          uint nConsumerAppId,
          string pchTitle,
          string pchDescription,
          RemoteStoragePublishedFileVisibility eVisibility,
          ref SteamParamStringArray_t.PackSmall pTags);

        [DllImport("libsteam_api64.so")]
        internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_SetUserPublishedFileAction(
          IntPtr ISteamRemoteStorage,
          ulong unPublishedFileId,
          WorkshopFileAction eAction);

        [DllImport("libsteam_api64.so")]
        internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_EnumeratePublishedFilesByUserAction(
          IntPtr ISteamRemoteStorage,
          WorkshopFileAction eAction,
          uint unStartIndex);

        [DllImport("libsteam_api64.so")]
        internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_EnumeratePublishedWorkshopFiles(
          IntPtr ISteamRemoteStorage,
          WorkshopEnumerationType eEnumerationType,
          uint unStartIndex,
          uint unCount,
          uint unDays,
          ref SteamParamStringArray_t.PackSmall pTags,
          ref SteamParamStringArray_t.PackSmall pUserTags);

        [DllImport("libsteam_api64.so")]
        internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_UGCDownloadToLocation(
          IntPtr ISteamRemoteStorage,
          ulong hContent,
          string pchLocation,
          uint unPriority);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamUserStats_RequestCurrentStats(
          IntPtr ISteamUserStats);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamUserStats_GetStat(
          IntPtr ISteamUserStats,
          string pchName,
          out int pData);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamUserStats_GetStat0(
          IntPtr ISteamUserStats,
          string pchName,
          out float pData);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamUserStats_SetStat(
          IntPtr ISteamUserStats,
          string pchName,
          int nData);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamUserStats_SetStat0(
          IntPtr ISteamUserStats,
          string pchName,
          float fData);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamUserStats_UpdateAvgRateStat(
          IntPtr ISteamUserStats,
          string pchName,
          float flCountThisSession,
          double dSessionLength);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamUserStats_GetAchievement(
          IntPtr ISteamUserStats,
          string pchName,
          [MarshalAs(UnmanagedType.U1)] ref bool pbAchieved);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamUserStats_SetAchievement(
          IntPtr ISteamUserStats,
          string pchName);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamUserStats_ClearAchievement(
          IntPtr ISteamUserStats,
          string pchName);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamUserStats_GetAchievementAndUnlockTime(
          IntPtr ISteamUserStats,
          string pchName,
          [MarshalAs(UnmanagedType.U1)] ref bool pbAchieved,
          out uint punUnlockTime);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamUserStats_StoreStats(IntPtr ISteamUserStats);

        [DllImport("libsteam_api64.so")]
        internal static extern int SteamAPI_ISteamUserStats_GetAchievementIcon(
          IntPtr ISteamUserStats,
          string pchName);

        [DllImport("libsteam_api64.so")]
        internal static extern IntPtr SteamAPI_ISteamUserStats_GetAchievementDisplayAttribute(
          IntPtr ISteamUserStats,
          string pchName,
          string pchKey);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamUserStats_IndicateAchievementProgress(
          IntPtr ISteamUserStats,
          string pchName,
          uint nCurProgress,
          uint nMaxProgress);

        [DllImport("libsteam_api64.so")]
        internal static extern uint SteamAPI_ISteamUserStats_GetNumAchievements(
          IntPtr ISteamUserStats);

        [DllImport("libsteam_api64.so")]
        internal static extern IntPtr SteamAPI_ISteamUserStats_GetAchievementName(
          IntPtr ISteamUserStats,
          uint iAchievement);

        [DllImport("libsteam_api64.so")]
        internal static extern SteamAPICall_t SteamAPI_ISteamUserStats_RequestUserStats(
          IntPtr ISteamUserStats,
          ulong steamIDUser);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamUserStats_GetUserStat(
          IntPtr ISteamUserStats,
          ulong steamIDUser,
          string pchName,
          out int pData);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamUserStats_GetUserStat0(
          IntPtr ISteamUserStats,
          ulong steamIDUser,
          string pchName,
          out float pData);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamUserStats_GetUserAchievement(
          IntPtr ISteamUserStats,
          ulong steamIDUser,
          string pchName,
          [MarshalAs(UnmanagedType.U1)] ref bool pbAchieved);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamUserStats_GetUserAchievementAndUnlockTime(
          IntPtr ISteamUserStats,
          ulong steamIDUser,
          string pchName,
          [MarshalAs(UnmanagedType.U1)] ref bool pbAchieved,
          out uint punUnlockTime);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamUserStats_ResetAllStats(
          IntPtr ISteamUserStats,
          [MarshalAs(UnmanagedType.U1)] bool bAchievementsToo);

        [DllImport("libsteam_api64.so")]
        internal static extern SteamAPICall_t SteamAPI_ISteamUserStats_FindOrCreateLeaderboard(
          IntPtr ISteamUserStats,
          string pchLeaderboardName,
          LeaderboardSortMethod eLeaderboardSortMethod,
          LeaderboardDisplayType eLeaderboardDisplayType);

        [DllImport("libsteam_api64.so")]
        internal static extern SteamAPICall_t SteamAPI_ISteamUserStats_FindLeaderboard(
          IntPtr ISteamUserStats,
          string pchLeaderboardName);

        [DllImport("libsteam_api64.so")]
        internal static extern IntPtr SteamAPI_ISteamUserStats_GetLeaderboardName(
          IntPtr ISteamUserStats,
          ulong hSteamLeaderboard);

        [DllImport("libsteam_api64.so")]
        internal static extern int SteamAPI_ISteamUserStats_GetLeaderboardEntryCount(
          IntPtr ISteamUserStats,
          ulong hSteamLeaderboard);

        [DllImport("libsteam_api64.so")]
        internal static extern LeaderboardSortMethod SteamAPI_ISteamUserStats_GetLeaderboardSortMethod(
          IntPtr ISteamUserStats,
          ulong hSteamLeaderboard);

        [DllImport("libsteam_api64.so")]
        internal static extern LeaderboardDisplayType SteamAPI_ISteamUserStats_GetLeaderboardDisplayType(
          IntPtr ISteamUserStats,
          ulong hSteamLeaderboard);

        [DllImport("libsteam_api64.so")]
        internal static extern SteamAPICall_t SteamAPI_ISteamUserStats_DownloadLeaderboardEntries(
          IntPtr ISteamUserStats,
          ulong hSteamLeaderboard,
          LeaderboardDataRequest eLeaderboardDataRequest,
          int nRangeStart,
          int nRangeEnd);

        [DllImport("libsteam_api64.so")]
        internal static extern SteamAPICall_t SteamAPI_ISteamUserStats_DownloadLeaderboardEntriesForUsers(
          IntPtr ISteamUserStats,
          ulong hSteamLeaderboard,
          IntPtr prgUsers,
          int cUsers);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamUserStats_GetDownloadedLeaderboardEntry(
          IntPtr ISteamUserStats,
          ulong hSteamLeaderboardEntries,
          int index,
          ref LeaderboardEntry_t.PackSmall pLeaderboardEntry,
          IntPtr pDetails,
          int cDetailsMax);

        [DllImport("libsteam_api64.so")]
        internal static extern SteamAPICall_t SteamAPI_ISteamUserStats_UploadLeaderboardScore(
          IntPtr ISteamUserStats,
          ulong hSteamLeaderboard,
          LeaderboardUploadScoreMethod eLeaderboardUploadScoreMethod,
          int nScore,
          int[] pScoreDetails,
          int cScoreDetailsCount);

        [DllImport("libsteam_api64.so")]
        internal static extern SteamAPICall_t SteamAPI_ISteamUserStats_AttachLeaderboardUGC(
          IntPtr ISteamUserStats,
          ulong hSteamLeaderboard,
          ulong hUGC);

        [DllImport("libsteam_api64.so")]
        internal static extern SteamAPICall_t SteamAPI_ISteamUserStats_GetNumberOfCurrentPlayers(
          IntPtr ISteamUserStats);

        [DllImport("libsteam_api64.so")]
        internal static extern SteamAPICall_t SteamAPI_ISteamUserStats_RequestGlobalAchievementPercentages(
          IntPtr ISteamUserStats);

        [DllImport("libsteam_api64.so")]
        internal static extern int SteamAPI_ISteamUserStats_GetMostAchievedAchievementInfo(
          IntPtr ISteamUserStats,
          StringBuilder pchName,
          uint unNameBufLen,
          out float pflPercent,
          [MarshalAs(UnmanagedType.U1)] ref bool pbAchieved);

        [DllImport("libsteam_api64.so")]
        internal static extern int SteamAPI_ISteamUserStats_GetNextMostAchievedAchievementInfo(
          IntPtr ISteamUserStats,
          int iIteratorPrevious,
          StringBuilder pchName,
          uint unNameBufLen,
          out float pflPercent,
          [MarshalAs(UnmanagedType.U1)] ref bool pbAchieved);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamUserStats_GetAchievementAchievedPercent(
          IntPtr ISteamUserStats,
          string pchName,
          out float pflPercent);

        [DllImport("libsteam_api64.so")]
        internal static extern SteamAPICall_t SteamAPI_ISteamUserStats_RequestGlobalStats(
          IntPtr ISteamUserStats,
          int nHistoryDays);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamUserStats_GetGlobalStat(
          IntPtr ISteamUserStats,
          string pchStatName,
          out long pData);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamUserStats_GetGlobalStat0(
          IntPtr ISteamUserStats,
          string pchStatName,
          out double pData);

        [DllImport("libsteam_api64.so")]
        internal static extern int SteamAPI_ISteamUserStats_GetGlobalStatHistory(
          IntPtr ISteamUserStats,
          string pchStatName,
          out long pData,
          uint cubData);

        [DllImport("libsteam_api64.so")]
        internal static extern int SteamAPI_ISteamUserStats_GetGlobalStatHistory0(
          IntPtr ISteamUserStats,
          string pchStatName,
          out double pData,
          uint cubData);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamApps_BIsSubscribed(IntPtr ISteamApps);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamApps_BIsLowViolence(IntPtr ISteamApps);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamApps_BIsCybercafe(IntPtr ISteamApps);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamApps_BIsVACBanned(IntPtr ISteamApps);

        [DllImport("libsteam_api64.so")]
        internal static extern IntPtr SteamAPI_ISteamApps_GetCurrentGameLanguage(IntPtr ISteamApps);

        [DllImport("libsteam_api64.so")]
        internal static extern IntPtr SteamAPI_ISteamApps_GetAvailableGameLanguages(
          IntPtr ISteamApps);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamApps_BIsSubscribedApp(
          IntPtr ISteamApps,
          uint appID);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamApps_BIsDlcInstalled(
          IntPtr ISteamApps,
          uint appID);

        [DllImport("libsteam_api64.so")]
        internal static extern uint SteamAPI_ISteamApps_GetEarliestPurchaseUnixTime(
          IntPtr ISteamApps,
          uint nAppID);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamApps_BIsSubscribedFromFreeWeekend(
          IntPtr ISteamApps);

        [DllImport("libsteam_api64.so")]
        internal static extern int SteamAPI_ISteamApps_GetDLCCount(IntPtr ISteamApps);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamApps_BGetDLCDataByIndex(
          IntPtr ISteamApps,
          int iDLC,
          ref uint pAppID,
          [MarshalAs(UnmanagedType.U1)] ref bool pbAvailable,
          StringBuilder pchName,
          int cchNameBufferSize);

        [DllImport("libsteam_api64.so")]
        internal static extern void SteamAPI_ISteamApps_InstallDLC(IntPtr ISteamApps, uint nAppID);

        [DllImport("libsteam_api64.so")]
        internal static extern void SteamAPI_ISteamApps_UninstallDLC(IntPtr ISteamApps, uint nAppID);

        [DllImport("libsteam_api64.so")]
        internal static extern void SteamAPI_ISteamApps_RequestAppProofOfPurchaseKey(
          IntPtr ISteamApps,
          uint nAppID);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamApps_GetCurrentBetaName(
          IntPtr ISteamApps,
          StringBuilder pchName,
          int cchNameBufferSize);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamApps_MarkContentCorrupt(
          IntPtr ISteamApps,
          [MarshalAs(UnmanagedType.U1)] bool bMissingFilesOnly);

        [DllImport("libsteam_api64.so")]
        internal static extern uint SteamAPI_ISteamApps_GetInstalledDepots(
          IntPtr ISteamApps,
          uint appID,
          IntPtr pvecDepots,
          uint cMaxDepots);

        [DllImport("libsteam_api64.so")]
        internal static extern uint SteamAPI_ISteamApps_GetAppInstallDir(
          IntPtr ISteamApps,
          uint appID,
          StringBuilder pchFolder,
          uint cchFolderBufferSize);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamApps_BIsAppInstalled(
          IntPtr ISteamApps,
          uint appID);

        [DllImport("libsteam_api64.so")]
        internal static extern CSteamID SteamAPI_ISteamApps_GetAppOwner(IntPtr ISteamApps);

        [DllImport("libsteam_api64.so")]
        internal static extern IntPtr SteamAPI_ISteamApps_GetLaunchQueryParam(
          IntPtr ISteamApps,
          string pchKey);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamApps_GetDlcDownloadProgress(
          IntPtr ISteamApps,
          uint nAppID,
          out ulong punBytesDownloaded,
          out ulong punBytesTotal);

        [DllImport("libsteam_api64.so")]
        internal static extern int SteamAPI_ISteamApps_GetAppBuildId(IntPtr ISteamApps);

        [DllImport("libsteam_api64.so")]
        internal static extern void SteamAPI_ISteamApps_RequestAllProofOfPurchaseKeys(
          IntPtr ISteamApps);

        [DllImport("libsteam_api64.so")]
        internal static extern SteamAPICall_t SteamAPI_ISteamApps_GetFileDetails(
          IntPtr ISteamApps,
          string pszFileName);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamNetworking_SendP2PPacket(
          IntPtr ISteamNetworking,
          ulong steamIDRemote,
          IntPtr pubData,
          uint cubData,
          P2PSend eP2PSendType,
          int nChannel);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamNetworking_IsP2PPacketAvailable(
          IntPtr ISteamNetworking,
          out uint pcubMsgSize,
          int nChannel);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamNetworking_ReadP2PPacket(
          IntPtr ISteamNetworking,
          IntPtr pubDest,
          uint cubDest,
          out uint pcubMsgSize,
          out ulong psteamIDRemote,
          int nChannel);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamNetworking_AcceptP2PSessionWithUser(
          IntPtr ISteamNetworking,
          ulong steamIDRemote);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamNetworking_CloseP2PSessionWithUser(
          IntPtr ISteamNetworking,
          ulong steamIDRemote);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamNetworking_CloseP2PChannelWithUser(
          IntPtr ISteamNetworking,
          ulong steamIDRemote,
          int nChannel);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamNetworking_GetP2PSessionState(
          IntPtr ISteamNetworking,
          ulong steamIDRemote,
          ref P2PSessionState_t.PackSmall pConnectionState);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamNetworking_AllowP2PPacketRelay(
          IntPtr ISteamNetworking,
          [MarshalAs(UnmanagedType.U1)] bool bAllow);

        [DllImport("libsteam_api64.so")]
        internal static extern SNetListenSocket_t SteamAPI_ISteamNetworking_CreateListenSocket(
          IntPtr ISteamNetworking,
          int nVirtualP2PPort,
          uint nIP,
          ushort nPort,
          [MarshalAs(UnmanagedType.U1)] bool bAllowUseOfPacketRelay);

        [DllImport("libsteam_api64.so")]
        internal static extern SNetSocket_t SteamAPI_ISteamNetworking_CreateP2PConnectionSocket(
          IntPtr ISteamNetworking,
          ulong steamIDTarget,
          int nVirtualPort,
          int nTimeoutSec,
          [MarshalAs(UnmanagedType.U1)] bool bAllowUseOfPacketRelay);

        [DllImport("libsteam_api64.so")]
        internal static extern SNetSocket_t SteamAPI_ISteamNetworking_CreateConnectionSocket(
          IntPtr ISteamNetworking,
          uint nIP,
          ushort nPort,
          int nTimeoutSec);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamNetworking_DestroySocket(
          IntPtr ISteamNetworking,
          uint hSocket,
          [MarshalAs(UnmanagedType.U1)] bool bNotifyRemoteEnd);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamNetworking_DestroyListenSocket(
          IntPtr ISteamNetworking,
          uint hSocket,
          [MarshalAs(UnmanagedType.U1)] bool bNotifyRemoteEnd);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamNetworking_SendDataOnSocket(
          IntPtr ISteamNetworking,
          uint hSocket,
          IntPtr pubData,
          uint cubData,
          [MarshalAs(UnmanagedType.U1)] bool bReliable);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamNetworking_IsDataAvailableOnSocket(
          IntPtr ISteamNetworking,
          uint hSocket,
          out uint pcubMsgSize);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamNetworking_RetrieveDataFromSocket(
          IntPtr ISteamNetworking,
          uint hSocket,
          IntPtr pubDest,
          uint cubDest,
          out uint pcubMsgSize);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamNetworking_IsDataAvailable(
          IntPtr ISteamNetworking,
          uint hListenSocket,
          out uint pcubMsgSize,
          ref uint phSocket);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamNetworking_RetrieveData(
          IntPtr ISteamNetworking,
          uint hListenSocket,
          IntPtr pubDest,
          uint cubDest,
          out uint pcubMsgSize,
          ref uint phSocket);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamNetworking_GetSocketInfo(
          IntPtr ISteamNetworking,
          uint hSocket,
          out ulong pSteamIDRemote,
          IntPtr peSocketStatus,
          out uint punIPRemote,
          out ushort punPortRemote);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamNetworking_GetListenSocketInfo(
          IntPtr ISteamNetworking,
          uint hListenSocket,
          out uint pnIP,
          out ushort pnPort);

        [DllImport("libsteam_api64.so")]
        internal static extern SNetSocketConnectionType SteamAPI_ISteamNetworking_GetSocketConnectionType(
          IntPtr ISteamNetworking,
          uint hSocket);

        [DllImport("libsteam_api64.so")]
        internal static extern int SteamAPI_ISteamNetworking_GetMaxPacketSize(
          IntPtr ISteamNetworking,
          uint hSocket);

        [DllImport("libsteam_api64.so")]
        internal static extern ScreenshotHandle SteamAPI_ISteamScreenshots_WriteScreenshot(
          IntPtr ISteamScreenshots,
          IntPtr pubRGB,
          uint cubRGB,
          int nWidth,
          int nHeight);

        [DllImport("libsteam_api64.so")]
        internal static extern ScreenshotHandle SteamAPI_ISteamScreenshots_AddScreenshotToLibrary(
          IntPtr ISteamScreenshots,
          string pchFilename,
          string pchThumbnailFilename,
          int nWidth,
          int nHeight);

        [DllImport("libsteam_api64.so")]
        internal static extern void SteamAPI_ISteamScreenshots_TriggerScreenshot(
          IntPtr ISteamScreenshots);

        [DllImport("libsteam_api64.so")]
        internal static extern void SteamAPI_ISteamScreenshots_HookScreenshots(
          IntPtr ISteamScreenshots,
          [MarshalAs(UnmanagedType.U1)] bool bHook);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamScreenshots_SetLocation(
          IntPtr ISteamScreenshots,
          uint hScreenshot,
          string pchLocation);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamScreenshots_TagUser(
          IntPtr ISteamScreenshots,
          uint hScreenshot,
          ulong steamID);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamScreenshots_TagPublishedFile(
          IntPtr ISteamScreenshots,
          uint hScreenshot,
          ulong unPublishedFileID);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamScreenshots_IsScreenshotsHooked(
          IntPtr ISteamScreenshots);

        [DllImport("libsteam_api64.so")]
        internal static extern ScreenshotHandle SteamAPI_ISteamScreenshots_AddVRScreenshotToLibrary(
          IntPtr ISteamScreenshots,
          VRScreenshotType eType,
          string pchFilename,
          string pchVRFilename);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamMusic_BIsEnabled(IntPtr ISteamMusic);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamMusic_BIsPlaying(IntPtr ISteamMusic);

        [DllImport("libsteam_api64.so")]
        internal static extern AudioPlayback_Status SteamAPI_ISteamMusic_GetPlaybackStatus(
          IntPtr ISteamMusic);

        [DllImport("libsteam_api64.so")]
        internal static extern void SteamAPI_ISteamMusic_Play(IntPtr ISteamMusic);

        [DllImport("libsteam_api64.so")]
        internal static extern void SteamAPI_ISteamMusic_Pause(IntPtr ISteamMusic);

        [DllImport("libsteam_api64.so")]
        internal static extern void SteamAPI_ISteamMusic_PlayPrevious(IntPtr ISteamMusic);

        [DllImport("libsteam_api64.so")]
        internal static extern void SteamAPI_ISteamMusic_PlayNext(IntPtr ISteamMusic);

        [DllImport("libsteam_api64.so")]
        internal static extern void SteamAPI_ISteamMusic_SetVolume(
          IntPtr ISteamMusic,
          float flVolume);

        [DllImport("libsteam_api64.so")]
        internal static extern float SteamAPI_ISteamMusic_GetVolume(IntPtr ISteamMusic);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamMusicRemote_RegisterSteamMusicRemote(
          IntPtr ISteamMusicRemote,
          string pchName);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamMusicRemote_DeregisterSteamMusicRemote(
          IntPtr ISteamMusicRemote);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamMusicRemote_BIsCurrentMusicRemote(
          IntPtr ISteamMusicRemote);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamMusicRemote_BActivationSuccess(
          IntPtr ISteamMusicRemote,
          [MarshalAs(UnmanagedType.U1)] bool bValue);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamMusicRemote_SetDisplayName(
          IntPtr ISteamMusicRemote,
          string pchDisplayName);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamMusicRemote_SetPNGIcon_64x64(
          IntPtr ISteamMusicRemote,
          IntPtr pvBuffer,
          uint cbBufferLength);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamMusicRemote_EnablePlayPrevious(
          IntPtr ISteamMusicRemote,
          [MarshalAs(UnmanagedType.U1)] bool bValue);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamMusicRemote_EnablePlayNext(
          IntPtr ISteamMusicRemote,
          [MarshalAs(UnmanagedType.U1)] bool bValue);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamMusicRemote_EnableShuffled(
          IntPtr ISteamMusicRemote,
          [MarshalAs(UnmanagedType.U1)] bool bValue);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamMusicRemote_EnableLooped(
          IntPtr ISteamMusicRemote,
          [MarshalAs(UnmanagedType.U1)] bool bValue);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamMusicRemote_EnableQueue(
          IntPtr ISteamMusicRemote,
          [MarshalAs(UnmanagedType.U1)] bool bValue);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamMusicRemote_EnablePlaylists(
          IntPtr ISteamMusicRemote,
          [MarshalAs(UnmanagedType.U1)] bool bValue);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamMusicRemote_UpdatePlaybackStatus(
          IntPtr ISteamMusicRemote,
          AudioPlayback_Status nStatus);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamMusicRemote_UpdateShuffled(
          IntPtr ISteamMusicRemote,
          [MarshalAs(UnmanagedType.U1)] bool bValue);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamMusicRemote_UpdateLooped(
          IntPtr ISteamMusicRemote,
          [MarshalAs(UnmanagedType.U1)] bool bValue);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamMusicRemote_UpdateVolume(
          IntPtr ISteamMusicRemote,
          float flValue);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamMusicRemote_CurrentEntryWillChange(
          IntPtr ISteamMusicRemote);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamMusicRemote_CurrentEntryIsAvailable(
          IntPtr ISteamMusicRemote,
          [MarshalAs(UnmanagedType.U1)] bool bAvailable);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamMusicRemote_UpdateCurrentEntryText(
          IntPtr ISteamMusicRemote,
          string pchText);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamMusicRemote_UpdateCurrentEntryElapsedSeconds(
          IntPtr ISteamMusicRemote,
          int nValue);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamMusicRemote_UpdateCurrentEntryCoverArt(
          IntPtr ISteamMusicRemote,
          IntPtr pvBuffer,
          uint cbBufferLength);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamMusicRemote_CurrentEntryDidChange(
          IntPtr ISteamMusicRemote);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamMusicRemote_QueueWillChange(
          IntPtr ISteamMusicRemote);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamMusicRemote_ResetQueueEntries(
          IntPtr ISteamMusicRemote);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamMusicRemote_SetQueueEntry(
          IntPtr ISteamMusicRemote,
          int nID,
          int nPosition,
          string pchEntryText);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamMusicRemote_SetCurrentQueueEntry(
          IntPtr ISteamMusicRemote,
          int nID);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamMusicRemote_QueueDidChange(
          IntPtr ISteamMusicRemote);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamMusicRemote_PlaylistWillChange(
          IntPtr ISteamMusicRemote);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamMusicRemote_ResetPlaylistEntries(
          IntPtr ISteamMusicRemote);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamMusicRemote_SetPlaylistEntry(
          IntPtr ISteamMusicRemote,
          int nID,
          int nPosition,
          string pchEntryText);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamMusicRemote_SetCurrentPlaylistEntry(
          IntPtr ISteamMusicRemote,
          int nID);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamMusicRemote_PlaylistDidChange(
          IntPtr ISteamMusicRemote);

        [DllImport("libsteam_api64.so")]
        internal static extern HTTPRequestHandle SteamAPI_ISteamHTTP_CreateHTTPRequest(
          IntPtr ISteamHTTP,
          HTTPMethod eHTTPRequestMethod,
          string pchAbsoluteURL);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamHTTP_SetHTTPRequestContextValue(
          IntPtr ISteamHTTP,
          uint hRequest,
          ulong ulContextValue);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamHTTP_SetHTTPRequestNetworkActivityTimeout(
          IntPtr ISteamHTTP,
          uint hRequest,
          uint unTimeoutSeconds);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamHTTP_SetHTTPRequestHeaderValue(
          IntPtr ISteamHTTP,
          uint hRequest,
          string pchHeaderName,
          string pchHeaderValue);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamHTTP_SetHTTPRequestGetOrPostParameter(
          IntPtr ISteamHTTP,
          uint hRequest,
          string pchParamName,
          string pchParamValue);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamHTTP_SendHTTPRequest(
          IntPtr ISteamHTTP,
          uint hRequest,
          ref ulong pCallHandle);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamHTTP_SendHTTPRequestAndStreamResponse(
          IntPtr ISteamHTTP,
          uint hRequest,
          ref ulong pCallHandle);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamHTTP_DeferHTTPRequest(
          IntPtr ISteamHTTP,
          uint hRequest);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamHTTP_PrioritizeHTTPRequest(
          IntPtr ISteamHTTP,
          uint hRequest);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamHTTP_GetHTTPResponseHeaderSize(
          IntPtr ISteamHTTP,
          uint hRequest,
          string pchHeaderName,
          out uint unResponseHeaderSize);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamHTTP_GetHTTPResponseHeaderValue(
          IntPtr ISteamHTTP,
          uint hRequest,
          string pchHeaderName,
          out byte pHeaderValueBuffer,
          uint unBufferSize);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamHTTP_GetHTTPResponseBodySize(
          IntPtr ISteamHTTP,
          uint hRequest,
          out uint unBodySize);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamHTTP_GetHTTPResponseBodyData(
          IntPtr ISteamHTTP,
          uint hRequest,
          out byte pBodyDataBuffer,
          uint unBufferSize);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamHTTP_GetHTTPStreamingResponseBodyData(
          IntPtr ISteamHTTP,
          uint hRequest,
          uint cOffset,
          out byte pBodyDataBuffer,
          uint unBufferSize);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamHTTP_ReleaseHTTPRequest(
          IntPtr ISteamHTTP,
          uint hRequest);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamHTTP_GetHTTPDownloadProgressPct(
          IntPtr ISteamHTTP,
          uint hRequest,
          out float pflPercentOut);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamHTTP_SetHTTPRequestRawPostBody(
          IntPtr ISteamHTTP,
          uint hRequest,
          string pchContentType,
          out byte pubBody,
          uint unBodyLen);

        [DllImport("libsteam_api64.so")]
        internal static extern HTTPCookieContainerHandle SteamAPI_ISteamHTTP_CreateCookieContainer(
          IntPtr ISteamHTTP,
          [MarshalAs(UnmanagedType.U1)] bool bAllowResponsesToModify);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamHTTP_ReleaseCookieContainer(
          IntPtr ISteamHTTP,
          uint hCookieContainer);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamHTTP_SetCookie(
          IntPtr ISteamHTTP,
          uint hCookieContainer,
          string pchHost,
          string pchUrl,
          string pchCookie);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamHTTP_SetHTTPRequestCookieContainer(
          IntPtr ISteamHTTP,
          uint hRequest,
          uint hCookieContainer);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamHTTP_SetHTTPRequestUserAgentInfo(
          IntPtr ISteamHTTP,
          uint hRequest,
          string pchUserAgentInfo);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamHTTP_SetHTTPRequestRequiresVerifiedCertificate(
          IntPtr ISteamHTTP,
          uint hRequest,
          [MarshalAs(UnmanagedType.U1)] bool bRequireVerifiedCertificate);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamHTTP_SetHTTPRequestAbsoluteTimeoutMS(
          IntPtr ISteamHTTP,
          uint hRequest,
          uint unMilliseconds);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamHTTP_GetHTTPRequestWasTimedOut(
          IntPtr ISteamHTTP,
          uint hRequest,
          [MarshalAs(UnmanagedType.U1)] ref bool pbWasTimedOut);

        [DllImport("libsteam_api64.so")]
        internal static extern ClientUnifiedMessageHandle SteamAPI_ISteamUnifiedMessages_SendMethod(
          IntPtr ISteamUnifiedMessages,
          string pchServiceMethod,
          IntPtr pRequestBuffer,
          uint unRequestBufferSize,
          ulong unContext);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamUnifiedMessages_GetMethodResponseInfo(
          IntPtr ISteamUnifiedMessages,
          ulong hHandle,
          out uint punResponseSize,
          out Result peResult);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamUnifiedMessages_GetMethodResponseData(
          IntPtr ISteamUnifiedMessages,
          ulong hHandle,
          IntPtr pResponseBuffer,
          uint unResponseBufferSize,
          [MarshalAs(UnmanagedType.U1)] bool bAutoRelease);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamUnifiedMessages_ReleaseMethod(
          IntPtr ISteamUnifiedMessages,
          ulong hHandle);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamUnifiedMessages_SendNotification(
          IntPtr ISteamUnifiedMessages,
          string pchServiceNotification,
          IntPtr pNotificationBuffer,
          uint unNotificationBufferSize);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamController_Init(IntPtr ISteamController);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamController_Shutdown(IntPtr ISteamController);

        [DllImport("libsteam_api64.so")]
        internal static extern void SteamAPI_ISteamController_RunFrame(IntPtr ISteamController);

        [DllImport("libsteam_api64.so")]
        internal static extern int SteamAPI_ISteamController_GetConnectedControllers(
          IntPtr ISteamController,
          IntPtr handlesOut);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamController_ShowBindingPanel(
          IntPtr ISteamController,
          ulong controllerHandle);

        [DllImport("libsteam_api64.so")]
        internal static extern ControllerActionSetHandle_t SteamAPI_ISteamController_GetActionSetHandle(
          IntPtr ISteamController,
          string pszActionSetName);

        [DllImport("libsteam_api64.so")]
        internal static extern void SteamAPI_ISteamController_ActivateActionSet(
          IntPtr ISteamController,
          ulong controllerHandle,
          ulong actionSetHandle);

        [DllImport("libsteam_api64.so")]
        internal static extern ControllerActionSetHandle_t SteamAPI_ISteamController_GetCurrentActionSet(
          IntPtr ISteamController,
          ulong controllerHandle);

        [DllImport("libsteam_api64.so")]
        internal static extern ControllerDigitalActionHandle_t SteamAPI_ISteamController_GetDigitalActionHandle(
          IntPtr ISteamController,
          string pszActionName);

        [DllImport("libsteam_api64.so")]
        internal static extern ControllerDigitalActionData_t SteamAPI_ISteamController_GetDigitalActionData(
          IntPtr ISteamController,
          ulong controllerHandle,
          ulong digitalActionHandle);

        [DllImport("libsteam_api64.so")]
        internal static extern int SteamAPI_ISteamController_GetDigitalActionOrigins(
          IntPtr ISteamController,
          ulong controllerHandle,
          ulong actionSetHandle,
          ulong digitalActionHandle,
          out ControllerActionOrigin originsOut);

        [DllImport("libsteam_api64.so")]
        internal static extern ControllerAnalogActionHandle_t SteamAPI_ISteamController_GetAnalogActionHandle(
          IntPtr ISteamController,
          string pszActionName);

        [DllImport("libsteam_api64.so")]
        internal static extern ControllerAnalogActionData_t SteamAPI_ISteamController_GetAnalogActionData(
          IntPtr ISteamController,
          ulong controllerHandle,
          ulong analogActionHandle);

        [DllImport("libsteam_api64.so")]
        internal static extern int SteamAPI_ISteamController_GetAnalogActionOrigins(
          IntPtr ISteamController,
          ulong controllerHandle,
          ulong actionSetHandle,
          ulong analogActionHandle,
          out ControllerActionOrigin originsOut);

        [DllImport("libsteam_api64.so")]
        internal static extern void SteamAPI_ISteamController_StopAnalogActionMomentum(
          IntPtr ISteamController,
          ulong controllerHandle,
          ulong eAction);

        [DllImport("libsteam_api64.so")]
        internal static extern void SteamAPI_ISteamController_TriggerHapticPulse(
          IntPtr ISteamController,
          ulong controllerHandle,
          SteamControllerPad eTargetPad,
          ushort usDurationMicroSec);

        [DllImport("libsteam_api64.so")]
        internal static extern void SteamAPI_ISteamController_TriggerRepeatedHapticPulse(
          IntPtr ISteamController,
          ulong controllerHandle,
          SteamControllerPad eTargetPad,
          ushort usDurationMicroSec,
          ushort usOffMicroSec,
          ushort unRepeat,
          uint nFlags);

        [DllImport("libsteam_api64.so")]
        internal static extern void SteamAPI_ISteamController_TriggerVibration(
          IntPtr ISteamController,
          ulong controllerHandle,
          ushort usLeftSpeed,
          ushort usRightSpeed);

        [DllImport("libsteam_api64.so")]
        internal static extern void SteamAPI_ISteamController_SetLEDColor(
          IntPtr ISteamController,
          ulong controllerHandle,
          byte nColorR,
          byte nColorG,
          byte nColorB,
          uint nFlags);

        [DllImport("libsteam_api64.so")]
        internal static extern int SteamAPI_ISteamController_GetGamepadIndexForController(
          IntPtr ISteamController,
          ulong ulControllerHandle);

        [DllImport("libsteam_api64.so")]
        internal static extern ControllerHandle_t SteamAPI_ISteamController_GetControllerForGamepadIndex(
          IntPtr ISteamController,
          int nIndex);

        [DllImport("libsteam_api64.so")]
        internal static extern ControllerMotionData_t SteamAPI_ISteamController_GetMotionData(
          IntPtr ISteamController,
          ulong controllerHandle);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamController_ShowDigitalActionOrigins(
          IntPtr ISteamController,
          ulong controllerHandle,
          ulong digitalActionHandle,
          float flScale,
          float flXPosition,
          float flYPosition);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamController_ShowAnalogActionOrigins(
          IntPtr ISteamController,
          ulong controllerHandle,
          ulong analogActionHandle,
          float flScale,
          float flXPosition,
          float flYPosition);

        [DllImport("libsteam_api64.so")]
        internal static extern IntPtr SteamAPI_ISteamController_GetStringForActionOrigin(
          IntPtr ISteamController,
          ControllerActionOrigin eOrigin);

        [DllImport("libsteam_api64.so")]
        internal static extern IntPtr SteamAPI_ISteamController_GetGlyphForActionOrigin(
          IntPtr ISteamController,
          ControllerActionOrigin eOrigin);

        [DllImport("libsteam_api64.so")]
        internal static extern UGCQueryHandle_t SteamAPI_ISteamUGC_CreateQueryUserUGCRequest(
          IntPtr ISteamUGC,
          uint unAccountID,
          UserUGCList eListType,
          UGCMatchingUGCType eMatchingUGCType,
          UserUGCListSortOrder eSortOrder,
          uint nCreatorAppID,
          uint nConsumerAppID,
          uint unPage);

        [DllImport("libsteam_api64.so")]
        internal static extern UGCQueryHandle_t SteamAPI_ISteamUGC_CreateQueryAllUGCRequest(
          IntPtr ISteamUGC,
          UGCQuery eQueryType,
          UGCMatchingUGCType eMatchingeMatchingUGCTypeFileType,
          uint nCreatorAppID,
          uint nConsumerAppID,
          uint unPage);

        [DllImport("libsteam_api64.so")]
        internal static extern UGCQueryHandle_t SteamAPI_ISteamUGC_CreateQueryUGCDetailsRequest(
          IntPtr ISteamUGC,
          IntPtr pvecPublishedFileID,
          uint unNumPublishedFileIDs);

        [DllImport("libsteam_api64.so")]
        internal static extern SteamAPICall_t SteamAPI_ISteamUGC_SendQueryUGCRequest(
          IntPtr ISteamUGC,
          ulong handle);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamUGC_GetQueryUGCResult(
          IntPtr ISteamUGC,
          ulong handle,
          uint index,
          ref SteamUGCDetails_t.PackSmall pDetails);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamUGC_GetQueryUGCPreviewURL(
          IntPtr ISteamUGC,
          ulong handle,
          uint index,
          StringBuilder pchURL,
          uint cchURLSize);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamUGC_GetQueryUGCMetadata(
          IntPtr ISteamUGC,
          ulong handle,
          uint index,
          StringBuilder pchMetadata,
          uint cchMetadatasize);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamUGC_GetQueryUGCChildren(
          IntPtr ISteamUGC,
          ulong handle,
          uint index,
          IntPtr pvecPublishedFileID,
          uint cMaxEntries);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamUGC_GetQueryUGCStatistic(
          IntPtr ISteamUGC,
          ulong handle,
          uint index,
          ItemStatistic eStatType,
          out ulong pStatValue);

        [DllImport("libsteam_api64.so")]
        internal static extern uint SteamAPI_ISteamUGC_GetQueryUGCNumAdditionalPreviews(
          IntPtr ISteamUGC,
          ulong handle,
          uint index);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamUGC_GetQueryUGCAdditionalPreview(
          IntPtr ISteamUGC,
          ulong handle,
          uint index,
          uint previewIndex,
          StringBuilder pchURLOrVideoID,
          uint cchURLSize,
          StringBuilder pchOriginalFileName,
          uint cchOriginalFileNameSize,
          out ItemPreviewType pPreviewType);

        [DllImport("libsteam_api64.so")]
        internal static extern uint SteamAPI_ISteamUGC_GetQueryUGCNumKeyValueTags(
          IntPtr ISteamUGC,
          ulong handle,
          uint index);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamUGC_GetQueryUGCKeyValueTag(
          IntPtr ISteamUGC,
          ulong handle,
          uint index,
          uint keyValueTagIndex,
          StringBuilder pchKey,
          uint cchKeySize,
          StringBuilder pchValue,
          uint cchValueSize);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamUGC_ReleaseQueryUGCRequest(
          IntPtr ISteamUGC,
          ulong handle);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamUGC_AddRequiredTag(
          IntPtr ISteamUGC,
          ulong handle,
          string pTagName);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamUGC_AddExcludedTag(
          IntPtr ISteamUGC,
          ulong handle,
          string pTagName);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamUGC_SetReturnOnlyIDs(
          IntPtr ISteamUGC,
          ulong handle,
          [MarshalAs(UnmanagedType.U1)] bool bReturnOnlyIDs);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamUGC_SetReturnKeyValueTags(
          IntPtr ISteamUGC,
          ulong handle,
          [MarshalAs(UnmanagedType.U1)] bool bReturnKeyValueTags);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamUGC_SetReturnLongDescription(
          IntPtr ISteamUGC,
          ulong handle,
          [MarshalAs(UnmanagedType.U1)] bool bReturnLongDescription);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamUGC_SetReturnMetadata(
          IntPtr ISteamUGC,
          ulong handle,
          [MarshalAs(UnmanagedType.U1)] bool bReturnMetadata);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamUGC_SetReturnChildren(
          IntPtr ISteamUGC,
          ulong handle,
          [MarshalAs(UnmanagedType.U1)] bool bReturnChildren);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamUGC_SetReturnAdditionalPreviews(
          IntPtr ISteamUGC,
          ulong handle,
          [MarshalAs(UnmanagedType.U1)] bool bReturnAdditionalPreviews);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamUGC_SetReturnTotalOnly(
          IntPtr ISteamUGC,
          ulong handle,
          [MarshalAs(UnmanagedType.U1)] bool bReturnTotalOnly);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamUGC_SetReturnPlaytimeStats(
          IntPtr ISteamUGC,
          ulong handle,
          uint unDays);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamUGC_SetLanguage(
          IntPtr ISteamUGC,
          ulong handle,
          string pchLanguage);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamUGC_SetAllowCachedResponse(
          IntPtr ISteamUGC,
          ulong handle,
          uint unMaxAgeSeconds);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamUGC_SetCloudFileNameFilter(
          IntPtr ISteamUGC,
          ulong handle,
          string pMatchCloudFileName);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamUGC_SetMatchAnyTag(
          IntPtr ISteamUGC,
          ulong handle,
          [MarshalAs(UnmanagedType.U1)] bool bMatchAnyTag);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamUGC_SetSearchText(
          IntPtr ISteamUGC,
          ulong handle,
          string pSearchText);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamUGC_SetRankedByTrendDays(
          IntPtr ISteamUGC,
          ulong handle,
          uint unDays);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamUGC_AddRequiredKeyValueTag(
          IntPtr ISteamUGC,
          ulong handle,
          string pKey,
          string pValue);

        [DllImport("libsteam_api64.so")]
        internal static extern SteamAPICall_t SteamAPI_ISteamUGC_RequestUGCDetails(
          IntPtr ISteamUGC,
          ulong nPublishedFileID,
          uint unMaxAgeSeconds);

        [DllImport("libsteam_api64.so")]
        internal static extern SteamAPICall_t SteamAPI_ISteamUGC_CreateItem(
          IntPtr ISteamUGC,
          uint nConsumerAppId,
          WorkshopFileType eFileType);

        [DllImport("libsteam_api64.so")]
        internal static extern UGCUpdateHandle_t SteamAPI_ISteamUGC_StartItemUpdate(
          IntPtr ISteamUGC,
          uint nConsumerAppId,
          ulong nPublishedFileID);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamUGC_SetItemTitle(
          IntPtr ISteamUGC,
          ulong handle,
          string pchTitle);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamUGC_SetItemDescription(
          IntPtr ISteamUGC,
          ulong handle,
          string pchDescription);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamUGC_SetItemUpdateLanguage(
          IntPtr ISteamUGC,
          ulong handle,
          string pchLanguage);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamUGC_SetItemMetadata(
          IntPtr ISteamUGC,
          ulong handle,
          string pchMetaData);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamUGC_SetItemVisibility(
          IntPtr ISteamUGC,
          ulong handle,
          RemoteStoragePublishedFileVisibility eVisibility);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamUGC_SetItemTags(
          IntPtr ISteamUGC,
          ulong updateHandle,
          ref SteamParamStringArray_t.PackSmall pTags);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamUGC_SetItemContent(
          IntPtr ISteamUGC,
          ulong handle,
          string pszContentFolder);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamUGC_SetItemPreview(
          IntPtr ISteamUGC,
          ulong handle,
          string pszPreviewFile);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamUGC_RemoveItemKeyValueTags(
          IntPtr ISteamUGC,
          ulong handle,
          string pchKey);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamUGC_AddItemKeyValueTag(
          IntPtr ISteamUGC,
          ulong handle,
          string pchKey,
          string pchValue);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamUGC_AddItemPreviewFile(
          IntPtr ISteamUGC,
          ulong handle,
          string pszPreviewFile,
          ItemPreviewType type);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamUGC_AddItemPreviewVideo(
          IntPtr ISteamUGC,
          ulong handle,
          string pszVideoID);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamUGC_UpdateItemPreviewFile(
          IntPtr ISteamUGC,
          ulong handle,
          uint index,
          string pszPreviewFile);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamUGC_UpdateItemPreviewVideo(
          IntPtr ISteamUGC,
          ulong handle,
          uint index,
          string pszVideoID);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamUGC_RemoveItemPreview(
          IntPtr ISteamUGC,
          ulong handle,
          uint index);

        [DllImport("libsteam_api64.so")]
        internal static extern SteamAPICall_t SteamAPI_ISteamUGC_SubmitItemUpdate(
          IntPtr ISteamUGC,
          ulong handle,
          string pchChangeNote);

        [DllImport("libsteam_api64.so")]
        internal static extern ItemUpdateStatus SteamAPI_ISteamUGC_GetItemUpdateProgress(
          IntPtr ISteamUGC,
          ulong handle,
          out ulong punBytesProcessed,
          out ulong punBytesTotal);

        [DllImport("libsteam_api64.so")]
        internal static extern SteamAPICall_t SteamAPI_ISteamUGC_SetUserItemVote(
          IntPtr ISteamUGC,
          ulong nPublishedFileID,
          [MarshalAs(UnmanagedType.U1)] bool bVoteUp);

        [DllImport("libsteam_api64.so")]
        internal static extern SteamAPICall_t SteamAPI_ISteamUGC_GetUserItemVote(
          IntPtr ISteamUGC,
          ulong nPublishedFileID);

        [DllImport("libsteam_api64.so")]
        internal static extern SteamAPICall_t SteamAPI_ISteamUGC_AddItemToFavorites(
          IntPtr ISteamUGC,
          uint nAppId,
          ulong nPublishedFileID);

        [DllImport("libsteam_api64.so")]
        internal static extern SteamAPICall_t SteamAPI_ISteamUGC_RemoveItemFromFavorites(
          IntPtr ISteamUGC,
          uint nAppId,
          ulong nPublishedFileID);

        [DllImport("libsteam_api64.so")]
        internal static extern SteamAPICall_t SteamAPI_ISteamUGC_SubscribeItem(
          IntPtr ISteamUGC,
          ulong nPublishedFileID);

        [DllImport("libsteam_api64.so")]
        internal static extern SteamAPICall_t SteamAPI_ISteamUGC_UnsubscribeItem(
          IntPtr ISteamUGC,
          ulong nPublishedFileID);

        [DllImport("libsteam_api64.so")]
        internal static extern uint SteamAPI_ISteamUGC_GetNumSubscribedItems(IntPtr ISteamUGC);

        [DllImport("libsteam_api64.so")]
        internal static extern uint SteamAPI_ISteamUGC_GetSubscribedItems(
          IntPtr ISteamUGC,
          IntPtr pvecPublishedFileID,
          uint cMaxEntries);

        [DllImport("libsteam_api64.so")]
        internal static extern uint SteamAPI_ISteamUGC_GetItemState(
          IntPtr ISteamUGC,
          ulong nPublishedFileID);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamUGC_GetItemInstallInfo(
          IntPtr ISteamUGC,
          ulong nPublishedFileID,
          out ulong punSizeOnDisk,
          StringBuilder pchFolder,
          uint cchFolderSize,
          out uint punTimeStamp);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamUGC_GetItemDownloadInfo(
          IntPtr ISteamUGC,
          ulong nPublishedFileID,
          out ulong punBytesDownloaded,
          out ulong punBytesTotal);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamUGC_DownloadItem(
          IntPtr ISteamUGC,
          ulong nPublishedFileID,
          [MarshalAs(UnmanagedType.U1)] bool bHighPriority);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamUGC_BInitWorkshopForGameServer(
          IntPtr ISteamUGC,
          uint unWorkshopDepotID,
          string pszFolder);

        [DllImport("libsteam_api64.so")]
        internal static extern void SteamAPI_ISteamUGC_SuspendDownloads(
          IntPtr ISteamUGC,
          [MarshalAs(UnmanagedType.U1)] bool bSuspend);

        [DllImport("libsteam_api64.so")]
        internal static extern SteamAPICall_t SteamAPI_ISteamUGC_StartPlaytimeTracking(
          IntPtr ISteamUGC,
          IntPtr pvecPublishedFileID,
          uint unNumPublishedFileIDs);

        [DllImport("libsteam_api64.so")]
        internal static extern SteamAPICall_t SteamAPI_ISteamUGC_StopPlaytimeTracking(
          IntPtr ISteamUGC,
          IntPtr pvecPublishedFileID,
          uint unNumPublishedFileIDs);

        [DllImport("libsteam_api64.so")]
        internal static extern SteamAPICall_t SteamAPI_ISteamUGC_StopPlaytimeTrackingForAllItems(
          IntPtr ISteamUGC);

        [DllImport("libsteam_api64.so")]
        internal static extern SteamAPICall_t SteamAPI_ISteamUGC_AddDependency(
          IntPtr ISteamUGC,
          ulong nParentPublishedFileID,
          ulong nChildPublishedFileID);

        [DllImport("libsteam_api64.so")]
        internal static extern SteamAPICall_t SteamAPI_ISteamUGC_RemoveDependency(
          IntPtr ISteamUGC,
          ulong nParentPublishedFileID,
          ulong nChildPublishedFileID);

        [DllImport("libsteam_api64.so")]
        internal static extern uint SteamAPI_ISteamAppList_GetNumInstalledApps(IntPtr ISteamAppList);

        [DllImport("libsteam_api64.so")]
        internal static extern uint SteamAPI_ISteamAppList_GetInstalledApps(
          IntPtr ISteamAppList,
          IntPtr pvecAppID,
          uint unMaxAppIDs);

        [DllImport("libsteam_api64.so")]
        internal static extern int SteamAPI_ISteamAppList_GetAppName(
          IntPtr ISteamAppList,
          uint nAppID,
          StringBuilder pchName,
          int cchNameMax);

        [DllImport("libsteam_api64.so")]
        internal static extern int SteamAPI_ISteamAppList_GetAppInstallDir(
          IntPtr ISteamAppList,
          uint nAppID,
          StringBuilder pchDirectory,
          int cchNameMax);

        [DllImport("libsteam_api64.so")]
        internal static extern int SteamAPI_ISteamAppList_GetAppBuildId(
          IntPtr ISteamAppList,
          uint nAppID);

        [DllImport("libsteam_api64.so")]
        internal static extern void SteamAPI_ISteamHTMLSurface_DestructISteamHTMLSurface(
          IntPtr ISteamHTMLSurface);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamHTMLSurface_Init(IntPtr ISteamHTMLSurface);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamHTMLSurface_Shutdown(IntPtr ISteamHTMLSurface);

        [DllImport("libsteam_api64.so")]
        internal static extern SteamAPICall_t SteamAPI_ISteamHTMLSurface_CreateBrowser(
          IntPtr ISteamHTMLSurface,
          string pchUserAgent,
          string pchUserCSS);

        [DllImport("libsteam_api64.so")]
        internal static extern void SteamAPI_ISteamHTMLSurface_RemoveBrowser(
          IntPtr ISteamHTMLSurface,
          uint unBrowserHandle);

        [DllImport("libsteam_api64.so")]
        internal static extern void SteamAPI_ISteamHTMLSurface_LoadURL(
          IntPtr ISteamHTMLSurface,
          uint unBrowserHandle,
          string pchURL,
          string pchPostData);

        [DllImport("libsteam_api64.so")]
        internal static extern void SteamAPI_ISteamHTMLSurface_SetSize(
          IntPtr ISteamHTMLSurface,
          uint unBrowserHandle,
          uint unWidth,
          uint unHeight);

        [DllImport("libsteam_api64.so")]
        internal static extern void SteamAPI_ISteamHTMLSurface_StopLoad(
          IntPtr ISteamHTMLSurface,
          uint unBrowserHandle);

        [DllImport("libsteam_api64.so")]
        internal static extern void SteamAPI_ISteamHTMLSurface_Reload(
          IntPtr ISteamHTMLSurface,
          uint unBrowserHandle);

        [DllImport("libsteam_api64.so")]
        internal static extern void SteamAPI_ISteamHTMLSurface_GoBack(
          IntPtr ISteamHTMLSurface,
          uint unBrowserHandle);

        [DllImport("libsteam_api64.so")]
        internal static extern void SteamAPI_ISteamHTMLSurface_GoForward(
          IntPtr ISteamHTMLSurface,
          uint unBrowserHandle);

        [DllImport("libsteam_api64.so")]
        internal static extern void SteamAPI_ISteamHTMLSurface_AddHeader(
          IntPtr ISteamHTMLSurface,
          uint unBrowserHandle,
          string pchKey,
          string pchValue);

        [DllImport("libsteam_api64.so")]
        internal static extern void SteamAPI_ISteamHTMLSurface_ExecuteJavascript(
          IntPtr ISteamHTMLSurface,
          uint unBrowserHandle,
          string pchScript);

        [DllImport("libsteam_api64.so")]
        internal static extern void SteamAPI_ISteamHTMLSurface_MouseUp(
          IntPtr ISteamHTMLSurface,
          uint unBrowserHandle,
          HTMLMouseButton eMouseButton);

        [DllImport("libsteam_api64.so")]
        internal static extern void SteamAPI_ISteamHTMLSurface_MouseDown(
          IntPtr ISteamHTMLSurface,
          uint unBrowserHandle,
          HTMLMouseButton eMouseButton);

        [DllImport("libsteam_api64.so")]
        internal static extern void SteamAPI_ISteamHTMLSurface_MouseDoubleClick(
          IntPtr ISteamHTMLSurface,
          uint unBrowserHandle,
          HTMLMouseButton eMouseButton);

        [DllImport("libsteam_api64.so")]
        internal static extern void SteamAPI_ISteamHTMLSurface_MouseMove(
          IntPtr ISteamHTMLSurface,
          uint unBrowserHandle,
          int x,
          int y);

        [DllImport("libsteam_api64.so")]
        internal static extern void SteamAPI_ISteamHTMLSurface_MouseWheel(
          IntPtr ISteamHTMLSurface,
          uint unBrowserHandle,
          int nDelta);

        [DllImport("libsteam_api64.so")]
        internal static extern void SteamAPI_ISteamHTMLSurface_KeyDown(
          IntPtr ISteamHTMLSurface,
          uint unBrowserHandle,
          uint nNativeKeyCode,
          HTMLKeyModifiers eHTMLKeyModifiers);

        [DllImport("libsteam_api64.so")]
        internal static extern void SteamAPI_ISteamHTMLSurface_KeyUp(
          IntPtr ISteamHTMLSurface,
          uint unBrowserHandle,
          uint nNativeKeyCode,
          HTMLKeyModifiers eHTMLKeyModifiers);

        [DllImport("libsteam_api64.so")]
        internal static extern void SteamAPI_ISteamHTMLSurface_KeyChar(
          IntPtr ISteamHTMLSurface,
          uint unBrowserHandle,
          uint cUnicodeChar,
          HTMLKeyModifiers eHTMLKeyModifiers);

        [DllImport("libsteam_api64.so")]
        internal static extern void SteamAPI_ISteamHTMLSurface_SetHorizontalScroll(
          IntPtr ISteamHTMLSurface,
          uint unBrowserHandle,
          uint nAbsolutePixelScroll);

        [DllImport("libsteam_api64.so")]
        internal static extern void SteamAPI_ISteamHTMLSurface_SetVerticalScroll(
          IntPtr ISteamHTMLSurface,
          uint unBrowserHandle,
          uint nAbsolutePixelScroll);

        [DllImport("libsteam_api64.so")]
        internal static extern void SteamAPI_ISteamHTMLSurface_SetKeyFocus(
          IntPtr ISteamHTMLSurface,
          uint unBrowserHandle,
          [MarshalAs(UnmanagedType.U1)] bool bHasKeyFocus);

        [DllImport("libsteam_api64.so")]
        internal static extern void SteamAPI_ISteamHTMLSurface_ViewSource(
          IntPtr ISteamHTMLSurface,
          uint unBrowserHandle);

        [DllImport("libsteam_api64.so")]
        internal static extern void SteamAPI_ISteamHTMLSurface_CopyToClipboard(
          IntPtr ISteamHTMLSurface,
          uint unBrowserHandle);

        [DllImport("libsteam_api64.so")]
        internal static extern void SteamAPI_ISteamHTMLSurface_PasteFromClipboard(
          IntPtr ISteamHTMLSurface,
          uint unBrowserHandle);

        [DllImport("libsteam_api64.so")]
        internal static extern void SteamAPI_ISteamHTMLSurface_Find(
          IntPtr ISteamHTMLSurface,
          uint unBrowserHandle,
          string pchSearchStr,
          [MarshalAs(UnmanagedType.U1)] bool bCurrentlyInFind,
          [MarshalAs(UnmanagedType.U1)] bool bReverse);

        [DllImport("libsteam_api64.so")]
        internal static extern void SteamAPI_ISteamHTMLSurface_StopFind(
          IntPtr ISteamHTMLSurface,
          uint unBrowserHandle);

        [DllImport("libsteam_api64.so")]
        internal static extern void SteamAPI_ISteamHTMLSurface_GetLinkAtPosition(
          IntPtr ISteamHTMLSurface,
          uint unBrowserHandle,
          int x,
          int y);

        [DllImport("libsteam_api64.so")]
        internal static extern void SteamAPI_ISteamHTMLSurface_SetCookie(
          IntPtr ISteamHTMLSurface,
          string pchHostname,
          string pchKey,
          string pchValue,
          string pchPath,
          uint nExpires,
          [MarshalAs(UnmanagedType.U1)] bool bSecure,
          [MarshalAs(UnmanagedType.U1)] bool bHTTPOnly);

        [DllImport("libsteam_api64.so")]
        internal static extern void SteamAPI_ISteamHTMLSurface_SetPageScaleFactor(
          IntPtr ISteamHTMLSurface,
          uint unBrowserHandle,
          float flZoom,
          int nPointX,
          int nPointY);

        [DllImport("libsteam_api64.so")]
        internal static extern void SteamAPI_ISteamHTMLSurface_SetBackgroundMode(
          IntPtr ISteamHTMLSurface,
          uint unBrowserHandle,
          [MarshalAs(UnmanagedType.U1)] bool bBackgroundMode);

        [DllImport("libsteam_api64.so")]
        internal static extern void SteamAPI_ISteamHTMLSurface_AllowStartRequest(
          IntPtr ISteamHTMLSurface,
          uint unBrowserHandle,
          [MarshalAs(UnmanagedType.U1)] bool bAllowed);

        [DllImport("libsteam_api64.so")]
        internal static extern void SteamAPI_ISteamHTMLSurface_JSDialogResponse(
          IntPtr ISteamHTMLSurface,
          uint unBrowserHandle,
          [MarshalAs(UnmanagedType.U1)] bool bResult);

        [DllImport("libsteam_api64.so")]
        internal static extern Result SteamAPI_ISteamInventory_GetResultStatus(
          IntPtr ISteamInventory,
          int resultHandle);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamInventory_GetResultItems(
          IntPtr ISteamInventory,
          int resultHandle,
          IntPtr pOutItemsArray,
          out uint punOutItemsArraySize);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamInventory_GetResultItemProperty(
          IntPtr ISteamInventory,
          int resultHandle,
          uint unItemIndex,
          string pchPropertyName,
          StringBuilder pchValueBuffer,
          out uint punValueBufferSizeOut);

        [DllImport("libsteam_api64.so")]
        internal static extern uint SteamAPI_ISteamInventory_GetResultTimestamp(
          IntPtr ISteamInventory,
          int resultHandle);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamInventory_CheckResultSteamID(
          IntPtr ISteamInventory,
          int resultHandle,
          ulong steamIDExpected);

        [DllImport("libsteam_api64.so")]
        internal static extern void SteamAPI_ISteamInventory_DestroyResult(
          IntPtr ISteamInventory,
          int resultHandle);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamInventory_GetAllItems(
          IntPtr ISteamInventory,
          ref int pResultHandle);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamInventory_GetItemsByID(
          IntPtr ISteamInventory,
          ref int pResultHandle,
          ulong[] pInstanceIDs,
          uint unCountInstanceIDs);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamInventory_SerializeResult(
          IntPtr ISteamInventory,
          int resultHandle,
          IntPtr pOutBuffer,
          out uint punOutBufferSize);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamInventory_DeserializeResult(
          IntPtr ISteamInventory,
          ref int pOutResultHandle,
          IntPtr pBuffer,
          uint unBufferSize,
          [MarshalAs(UnmanagedType.U1)] bool bRESERVED_MUST_BE_FALSE);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamInventory_GenerateItems(
          IntPtr ISteamInventory,
          ref int pResultHandle,
          int[] pArrayItemDefs,
          uint[] punArrayQuantity,
          uint unArrayLength);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamInventory_GrantPromoItems(
          IntPtr ISteamInventory,
          ref int pResultHandle);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamInventory_AddPromoItem(
          IntPtr ISteamInventory,
          ref int pResultHandle,
          int itemDef);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamInventory_AddPromoItems(
          IntPtr ISteamInventory,
          ref int pResultHandle,
          int[] pArrayItemDefs,
          uint unArrayLength);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamInventory_ConsumeItem(
          IntPtr ISteamInventory,
          ref int pResultHandle,
          ulong itemConsume,
          uint unQuantity);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamInventory_ExchangeItems(
          IntPtr ISteamInventory,
          ref int pResultHandle,
          int[] pArrayGenerate,
          uint[] punArrayGenerateQuantity,
          uint unArrayGenerateLength,
          ulong[] pArrayDestroy,
          uint[] punArrayDestroyQuantity,
          uint unArrayDestroyLength);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamInventory_TransferItemQuantity(
          IntPtr ISteamInventory,
          ref int pResultHandle,
          ulong itemIdSource,
          uint unQuantity,
          ulong itemIdDest);

        [DllImport("libsteam_api64.so")]
        internal static extern void SteamAPI_ISteamInventory_SendItemDropHeartbeat(
          IntPtr ISteamInventory);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamInventory_TriggerItemDrop(
          IntPtr ISteamInventory,
          ref int pResultHandle,
          int dropListDefinition);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamInventory_TradeItems(
          IntPtr ISteamInventory,
          ref int pResultHandle,
          ulong steamIDTradePartner,
          ulong[] pArrayGive,
          uint[] pArrayGiveQuantity,
          uint nArrayGiveLength,
          ulong[] pArrayGet,
          uint[] pArrayGetQuantity,
          uint nArrayGetLength);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamInventory_LoadItemDefinitions(
          IntPtr ISteamInventory);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamInventory_GetItemDefinitionIDs(
          IntPtr ISteamInventory,
          IntPtr pItemDefIDs,
          out uint punItemDefIDsArraySize);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamInventory_GetItemDefinitionProperty(
          IntPtr ISteamInventory,
          int iDefinition,
          string pchPropertyName,
          StringBuilder pchValueBuffer,
          out uint punValueBufferSizeOut);

        [DllImport("libsteam_api64.so")]
        internal static extern SteamAPICall_t SteamAPI_ISteamInventory_RequestEligiblePromoItemDefinitionsIDs(
          IntPtr ISteamInventory,
          ulong steamID);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamInventory_GetEligiblePromoItemDefinitionIDs(
          IntPtr ISteamInventory,
          ulong steamID,
          IntPtr pItemDefIDs,
          out uint punItemDefIDsArraySize);

        [DllImport("libsteam_api64.so")]
        internal static extern void SteamAPI_ISteamVideo_GetVideoURL(
          IntPtr ISteamVideo,
          uint unVideoAppID);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamVideo_IsBroadcasting(
          IntPtr ISteamVideo,
          IntPtr pnNumViewers);

        [DllImport("libsteam_api64.so")]
        internal static extern void SteamAPI_ISteamVideo_GetOPFSettings(
          IntPtr ISteamVideo,
          uint unVideoAppID);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamVideo_GetOPFStringForApp(
          IntPtr ISteamVideo,
          uint unVideoAppID,
          StringBuilder pchBuffer,
          out int pnBufferSize);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamGameServer_InitGameServer(
          IntPtr ISteamGameServer,
          uint unIP,
          ushort usGamePort,
          ushort usQueryPort,
          uint unFlags,
          uint nGameAppId,
          string pchVersionString);

        [DllImport("libsteam_api64.so")]
        internal static extern void SteamAPI_ISteamGameServer_SetProduct(
          IntPtr ISteamGameServer,
          string pszProduct);

        [DllImport("libsteam_api64.so")]
        internal static extern void SteamAPI_ISteamGameServer_SetGameDescription(
          IntPtr ISteamGameServer,
          string pszGameDescription);

        [DllImport("libsteam_api64.so")]
        internal static extern void SteamAPI_ISteamGameServer_SetModDir(
          IntPtr ISteamGameServer,
          string pszModDir);

        [DllImport("libsteam_api64.so")]
        internal static extern void SteamAPI_ISteamGameServer_SetDedicatedServer(
          IntPtr ISteamGameServer,
          [MarshalAs(UnmanagedType.U1)] bool bDedicated);

        [DllImport("libsteam_api64.so")]
        internal static extern void SteamAPI_ISteamGameServer_LogOn(
          IntPtr ISteamGameServer,
          string pszToken);

        [DllImport("libsteam_api64.so")]
        internal static extern void SteamAPI_ISteamGameServer_LogOnAnonymous(IntPtr ISteamGameServer);

        [DllImport("libsteam_api64.so")]
        internal static extern void SteamAPI_ISteamGameServer_LogOff(IntPtr ISteamGameServer);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamGameServer_BLoggedOn(IntPtr ISteamGameServer);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamGameServer_BSecure(IntPtr ISteamGameServer);

        [DllImport("libsteam_api64.so")]
        internal static extern CSteamID SteamAPI_ISteamGameServer_GetSteamID(IntPtr ISteamGameServer);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamGameServer_WasRestartRequested(
          IntPtr ISteamGameServer);

        [DllImport("libsteam_api64.so")]
        internal static extern void SteamAPI_ISteamGameServer_SetMaxPlayerCount(
          IntPtr ISteamGameServer,
          int cPlayersMax);

        [DllImport("libsteam_api64.so")]
        internal static extern void SteamAPI_ISteamGameServer_SetBotPlayerCount(
          IntPtr ISteamGameServer,
          int cBotplayers);

        [DllImport("libsteam_api64.so")]
        internal static extern void SteamAPI_ISteamGameServer_SetServerName(
          IntPtr ISteamGameServer,
          string pszServerName);

        [DllImport("libsteam_api64.so")]
        internal static extern void SteamAPI_ISteamGameServer_SetMapName(
          IntPtr ISteamGameServer,
          string pszMapName);

        [DllImport("libsteam_api64.so")]
        internal static extern void SteamAPI_ISteamGameServer_SetPasswordProtected(
          IntPtr ISteamGameServer,
          [MarshalAs(UnmanagedType.U1)] bool bPasswordProtected);

        [DllImport("libsteam_api64.so")]
        internal static extern void SteamAPI_ISteamGameServer_SetSpectatorPort(
          IntPtr ISteamGameServer,
          ushort unSpectatorPort);

        [DllImport("libsteam_api64.so")]
        internal static extern void SteamAPI_ISteamGameServer_SetSpectatorServerName(
          IntPtr ISteamGameServer,
          string pszSpectatorServerName);

        [DllImport("libsteam_api64.so")]
        internal static extern void SteamAPI_ISteamGameServer_ClearAllKeyValues(
          IntPtr ISteamGameServer);

        [DllImport("libsteam_api64.so")]
        internal static extern void SteamAPI_ISteamGameServer_SetKeyValue(
          IntPtr ISteamGameServer,
          string pKey,
          string pValue);

        [DllImport("libsteam_api64.so")]
        internal static extern void SteamAPI_ISteamGameServer_SetGameTags(
          IntPtr ISteamGameServer,
          string pchGameTags);

        [DllImport("libsteam_api64.so")]
        internal static extern void SteamAPI_ISteamGameServer_SetGameData(
          IntPtr ISteamGameServer,
          string pchGameData);

        [DllImport("libsteam_api64.so")]
        internal static extern void SteamAPI_ISteamGameServer_SetRegion(
          IntPtr ISteamGameServer,
          string pszRegion);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamGameServer_SendUserConnectAndAuthenticate(
          IntPtr ISteamGameServer,
          uint unIPClient,
          IntPtr pvAuthBlob,
          uint cubAuthBlobSize,
          out ulong pSteamIDUser);

        [DllImport("libsteam_api64.so")]
        internal static extern CSteamID SteamAPI_ISteamGameServer_CreateUnauthenticatedUserConnection(
          IntPtr ISteamGameServer);

        [DllImport("libsteam_api64.so")]
        internal static extern void SteamAPI_ISteamGameServer_SendUserDisconnect(
          IntPtr ISteamGameServer,
          ulong steamIDUser);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamGameServer_BUpdateUserData(
          IntPtr ISteamGameServer,
          ulong steamIDUser,
          string pchPlayerName,
          uint uScore);

        [DllImport("libsteam_api64.so")]
        internal static extern HAuthTicket SteamAPI_ISteamGameServer_GetAuthSessionTicket(
          IntPtr ISteamGameServer,
          IntPtr pTicket,
          int cbMaxTicket,
          out uint pcbTicket);

        [DllImport("libsteam_api64.so")]
        internal static extern BeginAuthSessionResult SteamAPI_ISteamGameServer_BeginAuthSession(
          IntPtr ISteamGameServer,
          IntPtr pAuthTicket,
          int cbAuthTicket,
          ulong steamID);

        [DllImport("libsteam_api64.so")]
        internal static extern void SteamAPI_ISteamGameServer_EndAuthSession(
          IntPtr ISteamGameServer,
          ulong steamID);

        [DllImport("libsteam_api64.so")]
        internal static extern void SteamAPI_ISteamGameServer_CancelAuthTicket(
          IntPtr ISteamGameServer,
          uint hAuthTicket);

        [DllImport("libsteam_api64.so")]
        internal static extern UserHasLicenseForAppResult SteamAPI_ISteamGameServer_UserHasLicenseForApp(
          IntPtr ISteamGameServer,
          ulong steamID,
          uint appID);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamGameServer_RequestUserGroupStatus(
          IntPtr ISteamGameServer,
          ulong steamIDUser,
          ulong steamIDGroup);

        [DllImport("libsteam_api64.so")]
        internal static extern void SteamAPI_ISteamGameServer_GetGameplayStats(
          IntPtr ISteamGameServer);

        [DllImport("libsteam_api64.so")]
        internal static extern SteamAPICall_t SteamAPI_ISteamGameServer_GetServerReputation(
          IntPtr ISteamGameServer);

        [DllImport("libsteam_api64.so")]
        internal static extern uint SteamAPI_ISteamGameServer_GetPublicIP(IntPtr ISteamGameServer);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamGameServer_HandleIncomingPacket(
          IntPtr ISteamGameServer,
          IntPtr pData,
          int cbData,
          uint srcIP,
          ushort srcPort);

        [DllImport("libsteam_api64.so")]
        internal static extern int SteamAPI_ISteamGameServer_GetNextOutgoingPacket(
          IntPtr ISteamGameServer,
          IntPtr pOut,
          int cbMaxOut,
          out uint pNetAdr,
          out ushort pPort);

        [DllImport("libsteam_api64.so")]
        internal static extern void SteamAPI_ISteamGameServer_EnableHeartbeats(
          IntPtr ISteamGameServer,
          [MarshalAs(UnmanagedType.U1)] bool bActive);

        [DllImport("libsteam_api64.so")]
        internal static extern void SteamAPI_ISteamGameServer_SetHeartbeatInterval(
          IntPtr ISteamGameServer,
          int iHeartbeatInterval);

        [DllImport("libsteam_api64.so")]
        internal static extern void SteamAPI_ISteamGameServer_ForceHeartbeat(IntPtr ISteamGameServer);

        [DllImport("libsteam_api64.so")]
        internal static extern SteamAPICall_t SteamAPI_ISteamGameServer_AssociateWithClan(
          IntPtr ISteamGameServer,
          ulong steamIDClan);

        [DllImport("libsteam_api64.so")]
        internal static extern SteamAPICall_t SteamAPI_ISteamGameServer_ComputeNewPlayerCompatibility(
          IntPtr ISteamGameServer,
          ulong steamIDNewPlayer);

        [DllImport("libsteam_api64.so")]
        internal static extern SteamAPICall_t SteamAPI_ISteamGameServerStats_RequestUserStats(
          IntPtr ISteamGameServerStats,
          ulong steamIDUser);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamGameServerStats_GetUserStat(
          IntPtr ISteamGameServerStats,
          ulong steamIDUser,
          string pchName,
          out int pData);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamGameServerStats_GetUserStat0(
          IntPtr ISteamGameServerStats,
          ulong steamIDUser,
          string pchName,
          out float pData);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamGameServerStats_GetUserAchievement(
          IntPtr ISteamGameServerStats,
          ulong steamIDUser,
          string pchName,
          [MarshalAs(UnmanagedType.U1)] ref bool pbAchieved);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamGameServerStats_SetUserStat(
          IntPtr ISteamGameServerStats,
          ulong steamIDUser,
          string pchName,
          int nData);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamGameServerStats_SetUserStat0(
          IntPtr ISteamGameServerStats,
          ulong steamIDUser,
          string pchName,
          float fData);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamGameServerStats_UpdateUserAvgRateStat(
          IntPtr ISteamGameServerStats,
          ulong steamIDUser,
          string pchName,
          float flCountThisSession,
          double dSessionLength);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamGameServerStats_SetUserAchievement(
          IntPtr ISteamGameServerStats,
          ulong steamIDUser,
          string pchName);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_ISteamGameServerStats_ClearUserAchievement(
          IntPtr ISteamGameServerStats,
          ulong steamIDUser,
          string pchName);

        [DllImport("libsteam_api64.so")]
        internal static extern SteamAPICall_t SteamAPI_ISteamGameServerStats_StoreUserStats(
          IntPtr ISteamGameServerStats,
          ulong steamIDUser);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_Init();

        [DllImport("libsteam_api64.so")]
        internal static extern void SteamAPI_RunCallbacks();

        [DllImport("libsteam_api64.so")]
        internal static extern void SteamGameServer_RunCallbacks();

        [DllImport("libsteam_api64.so")]
        internal static extern void SteamAPI_RegisterCallback(IntPtr pCallback, int callback);

        [DllImport("libsteam_api64.so")]
        internal static extern void SteamAPI_UnregisterCallback(IntPtr pCallback);

        [DllImport("libsteam_api64.so")]
        internal static extern void SteamAPI_RegisterCallResult(IntPtr pCallback, ulong callback);

        [DllImport("libsteam_api64.so")]
        internal static extern void SteamAPI_UnregisterCallResult(IntPtr pCallback, ulong callback);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamInternal_GameServer_Init(
          uint unIP,
          ushort usPort,
          ushort usGamePort,
          ushort usQueryPort,
          int eServerMode,
          string pchVersionString);

        [DllImport("libsteam_api64.so")]
        internal static extern void SteamAPI_Shutdown();

        [DllImport("libsteam_api64.so")]
        internal static extern void SteamGameServer_Shutdown();

        [DllImport("libsteam_api64.so")]
        internal static extern HSteamUser SteamAPI_GetHSteamUser();

        [DllImport("libsteam_api64.so")]
        internal static extern HSteamPipe SteamAPI_GetHSteamPipe();

        [DllImport("libsteam_api64.so")]
        internal static extern HSteamUser SteamGameServer_GetHSteamUser();

        [DllImport("libsteam_api64.so")]
        internal static extern HSteamPipe SteamGameServer_GetHSteamPipe();

        [DllImport("libsteam_api64.so")]
        internal static extern IntPtr SteamInternal_CreateInterface(string version);

        [DllImport("libsteam_api64.so")]
        internal static extern bool SteamAPI_RestartAppIfNecessary(uint unOwnAppID);
      }
    }

    internal class Mac : Platform.Interface, IDisposable
    {
      internal IntPtr _ptr;

      public bool IsValid => this._ptr != IntPtr.Zero;

      internal Mac(IntPtr pointer) => this._ptr = pointer;

      public virtual void Dispose() => this._ptr = IntPtr.Zero;

      public virtual HSteamPipe ISteamClient_CreateSteamPipe()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamClient_CreateSteamPipe(this._ptr) : throw new Exception("ISteamClient _ptr is null!");
      }

      public virtual bool ISteamClient_BReleaseSteamPipe(int hSteamPipe)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamClient_BReleaseSteamPipe(this._ptr, hSteamPipe) : throw new Exception("ISteamClient _ptr is null!");
      }

      public virtual HSteamUser ISteamClient_ConnectToGlobalUser(int hSteamPipe)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamClient_ConnectToGlobalUser(this._ptr, hSteamPipe) : throw new Exception("ISteamClient _ptr is null!");
      }

      public virtual HSteamUser ISteamClient_CreateLocalUser(
        out int phSteamPipe,
        AccountType eAccountType)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamClient_CreateLocalUser(this._ptr, out phSteamPipe, eAccountType) : throw new Exception("ISteamClient _ptr is null!");
      }

      public virtual void ISteamClient_ReleaseUser(int hSteamPipe, int hUser)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamClient _ptr is null!");
        Platform.Mac.Native.SteamAPI_ISteamClient_ReleaseUser(this._ptr, hSteamPipe, hUser);
      }

      public virtual IntPtr ISteamClient_GetISteamUser(
        int hSteamUser,
        int hSteamPipe,
        string pchVersion)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamClient _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamClient_GetISteamUser(this._ptr, hSteamUser, hSteamPipe, pchVersion);
      }

      public virtual IntPtr ISteamClient_GetISteamGameServer(
        int hSteamUser,
        int hSteamPipe,
        string pchVersion)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamClient _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamClient_GetISteamGameServer(this._ptr, hSteamUser, hSteamPipe, pchVersion);
      }

      public virtual void ISteamClient_SetLocalIPBinding(uint unIP, ushort usPort)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamClient _ptr is null!");
        Platform.Mac.Native.SteamAPI_ISteamClient_SetLocalIPBinding(this._ptr, unIP, usPort);
      }

      public virtual IntPtr ISteamClient_GetISteamFriends(
        int hSteamUser,
        int hSteamPipe,
        string pchVersion)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamClient _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamClient_GetISteamFriends(this._ptr, hSteamUser, hSteamPipe, pchVersion);
      }

      public virtual IntPtr ISteamClient_GetISteamUtils(int hSteamPipe, string pchVersion)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamClient _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamClient_GetISteamUtils(this._ptr, hSteamPipe, pchVersion);
      }

      public virtual IntPtr ISteamClient_GetISteamMatchmaking(
        int hSteamUser,
        int hSteamPipe,
        string pchVersion)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamClient _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamClient_GetISteamMatchmaking(this._ptr, hSteamUser, hSteamPipe, pchVersion);
      }

      public virtual IntPtr ISteamClient_GetISteamMatchmakingServers(
        int hSteamUser,
        int hSteamPipe,
        string pchVersion)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamClient _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamClient_GetISteamMatchmakingServers(this._ptr, hSteamUser, hSteamPipe, pchVersion);
      }

      public virtual IntPtr ISteamClient_GetISteamGenericInterface(
        int hSteamUser,
        int hSteamPipe,
        string pchVersion)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamClient _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamClient_GetISteamGenericInterface(this._ptr, hSteamUser, hSteamPipe, pchVersion);
      }

      public virtual IntPtr ISteamClient_GetISteamUserStats(
        int hSteamUser,
        int hSteamPipe,
        string pchVersion)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamClient _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamClient_GetISteamUserStats(this._ptr, hSteamUser, hSteamPipe, pchVersion);
      }

      public virtual IntPtr ISteamClient_GetISteamGameServerStats(
        int hSteamuser,
        int hSteamPipe,
        string pchVersion)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamClient _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamClient_GetISteamGameServerStats(this._ptr, hSteamuser, hSteamPipe, pchVersion);
      }

      public virtual IntPtr ISteamClient_GetISteamApps(
        int hSteamUser,
        int hSteamPipe,
        string pchVersion)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamClient _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamClient_GetISteamApps(this._ptr, hSteamUser, hSteamPipe, pchVersion);
      }

      public virtual IntPtr ISteamClient_GetISteamNetworking(
        int hSteamUser,
        int hSteamPipe,
        string pchVersion)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamClient _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamClient_GetISteamNetworking(this._ptr, hSteamUser, hSteamPipe, pchVersion);
      }

      public virtual IntPtr ISteamClient_GetISteamRemoteStorage(
        int hSteamuser,
        int hSteamPipe,
        string pchVersion)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamClient _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamClient_GetISteamRemoteStorage(this._ptr, hSteamuser, hSteamPipe, pchVersion);
      }

      public virtual IntPtr ISteamClient_GetISteamScreenshots(
        int hSteamuser,
        int hSteamPipe,
        string pchVersion)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamClient _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamClient_GetISteamScreenshots(this._ptr, hSteamuser, hSteamPipe, pchVersion);
      }

      public virtual uint ISteamClient_GetIPCCallCount()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamClient_GetIPCCallCount(this._ptr) : throw new Exception("ISteamClient _ptr is null!");
      }

      public virtual void ISteamClient_SetWarningMessageHook(IntPtr pFunction)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamClient _ptr is null!");
        Platform.Mac.Native.SteamAPI_ISteamClient_SetWarningMessageHook(this._ptr, pFunction);
      }

      public virtual bool ISteamClient_BShutdownIfAllPipesClosed()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamClient_BShutdownIfAllPipesClosed(this._ptr) : throw new Exception("ISteamClient _ptr is null!");
      }

      public virtual IntPtr ISteamClient_GetISteamHTTP(
        int hSteamuser,
        int hSteamPipe,
        string pchVersion)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamClient _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamClient_GetISteamHTTP(this._ptr, hSteamuser, hSteamPipe, pchVersion);
      }

      public virtual IntPtr ISteamClient_GetISteamUnifiedMessages(
        int hSteamuser,
        int hSteamPipe,
        string pchVersion)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamClient _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamClient_GetISteamUnifiedMessages(this._ptr, hSteamuser, hSteamPipe, pchVersion);
      }

      public virtual IntPtr ISteamClient_GetISteamController(
        int hSteamUser,
        int hSteamPipe,
        string pchVersion)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamClient _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamClient_GetISteamController(this._ptr, hSteamUser, hSteamPipe, pchVersion);
      }

      public virtual IntPtr ISteamClient_GetISteamUGC(
        int hSteamUser,
        int hSteamPipe,
        string pchVersion)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamClient _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamClient_GetISteamUGC(this._ptr, hSteamUser, hSteamPipe, pchVersion);
      }

      public virtual IntPtr ISteamClient_GetISteamAppList(
        int hSteamUser,
        int hSteamPipe,
        string pchVersion)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamClient _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamClient_GetISteamAppList(this._ptr, hSteamUser, hSteamPipe, pchVersion);
      }

      public virtual IntPtr ISteamClient_GetISteamMusic(
        int hSteamuser,
        int hSteamPipe,
        string pchVersion)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamClient _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamClient_GetISteamMusic(this._ptr, hSteamuser, hSteamPipe, pchVersion);
      }

      public virtual IntPtr ISteamClient_GetISteamMusicRemote(
        int hSteamuser,
        int hSteamPipe,
        string pchVersion)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamClient _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamClient_GetISteamMusicRemote(this._ptr, hSteamuser, hSteamPipe, pchVersion);
      }

      public virtual IntPtr ISteamClient_GetISteamHTMLSurface(
        int hSteamuser,
        int hSteamPipe,
        string pchVersion)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamClient _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamClient_GetISteamHTMLSurface(this._ptr, hSteamuser, hSteamPipe, pchVersion);
      }

      public virtual IntPtr ISteamClient_GetISteamInventory(
        int hSteamuser,
        int hSteamPipe,
        string pchVersion)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamClient _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamClient_GetISteamInventory(this._ptr, hSteamuser, hSteamPipe, pchVersion);
      }

      public virtual IntPtr ISteamClient_GetISteamVideo(
        int hSteamuser,
        int hSteamPipe,
        string pchVersion)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamClient _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamClient_GetISteamVideo(this._ptr, hSteamuser, hSteamPipe, pchVersion);
      }

      public virtual HSteamUser ISteamUser_GetHSteamUser()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamUser_GetHSteamUser(this._ptr) : throw new Exception("ISteamUser _ptr is null!");
      }

      public virtual bool ISteamUser_BLoggedOn()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamUser_BLoggedOn(this._ptr) : throw new Exception("ISteamUser _ptr is null!");
      }

      public virtual CSteamID ISteamUser_GetSteamID()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamUser_GetSteamID(this._ptr) : throw new Exception("ISteamUser _ptr is null!");
      }

      public virtual int ISteamUser_InitiateGameConnection(
        IntPtr pAuthBlob,
        int cbMaxAuthBlob,
        ulong steamIDGameServer,
        uint unIPServer,
        ushort usPortServer,
        [MarshalAs(UnmanagedType.U1)] bool bSecure)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUser _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamUser_InitiateGameConnection(this._ptr, pAuthBlob, cbMaxAuthBlob, steamIDGameServer, unIPServer, usPortServer, bSecure);
      }

      public virtual void ISteamUser_TerminateGameConnection(uint unIPServer, ushort usPortServer)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUser _ptr is null!");
        Platform.Mac.Native.SteamAPI_ISteamUser_TerminateGameConnection(this._ptr, unIPServer, usPortServer);
      }

      public virtual void ISteamUser_TrackAppUsageEvent(
        ulong gameID,
        int eAppUsageEvent,
        string pchExtraInfo)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUser _ptr is null!");
        Platform.Mac.Native.SteamAPI_ISteamUser_TrackAppUsageEvent(this._ptr, gameID, eAppUsageEvent, pchExtraInfo);
      }

      public virtual bool ISteamUser_GetUserDataFolder(StringBuilder pchBuffer, int cubBuffer)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUser _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamUser_GetUserDataFolder(this._ptr, pchBuffer, cubBuffer);
      }

      public virtual void ISteamUser_StartVoiceRecording()
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUser _ptr is null!");
        Platform.Mac.Native.SteamAPI_ISteamUser_StartVoiceRecording(this._ptr);
      }

      public virtual void ISteamUser_StopVoiceRecording()
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUser _ptr is null!");
        Platform.Mac.Native.SteamAPI_ISteamUser_StopVoiceRecording(this._ptr);
      }

      public virtual VoiceResult ISteamUser_GetAvailableVoice(
        out uint pcbCompressed,
        out uint pcbUncompressed_Deprecated,
        uint nUncompressedVoiceDesiredSampleRate_Deprecated)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamUser_GetAvailableVoice(this._ptr, out pcbCompressed, out pcbUncompressed_Deprecated, nUncompressedVoiceDesiredSampleRate_Deprecated) : throw new Exception("ISteamUser _ptr is null!");
      }

      public virtual VoiceResult ISteamUser_GetVoice(
        [MarshalAs(UnmanagedType.U1)] bool bWantCompressed,
        IntPtr pDestBuffer,
        uint cbDestBufferSize,
        out uint nBytesWritten,
        [MarshalAs(UnmanagedType.U1)] bool bWantUncompressed_Deprecated,
        IntPtr pUncompressedDestBuffer_Deprecated,
        uint cbUncompressedDestBufferSize_Deprecated,
        out uint nUncompressBytesWritten_Deprecated,
        uint nUncompressedVoiceDesiredSampleRate_Deprecated)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUser _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamUser_GetVoice(this._ptr, bWantCompressed, pDestBuffer, cbDestBufferSize, out nBytesWritten, bWantUncompressed_Deprecated, pUncompressedDestBuffer_Deprecated, cbUncompressedDestBufferSize_Deprecated, out nUncompressBytesWritten_Deprecated, nUncompressedVoiceDesiredSampleRate_Deprecated);
      }

      public virtual VoiceResult ISteamUser_DecompressVoice(
        IntPtr pCompressed,
        uint cbCompressed,
        IntPtr pDestBuffer,
        uint cbDestBufferSize,
        out uint nBytesWritten,
        uint nDesiredSampleRate)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUser _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamUser_DecompressVoice(this._ptr, pCompressed, cbCompressed, pDestBuffer, cbDestBufferSize, out nBytesWritten, nDesiredSampleRate);
      }

      public virtual uint ISteamUser_GetVoiceOptimalSampleRate()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamUser_GetVoiceOptimalSampleRate(this._ptr) : throw new Exception("ISteamUser _ptr is null!");
      }

      public virtual HAuthTicket ISteamUser_GetAuthSessionTicket(
        IntPtr pTicket,
        int cbMaxTicket,
        out uint pcbTicket)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUser _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamUser_GetAuthSessionTicket(this._ptr, pTicket, cbMaxTicket, out pcbTicket);
      }

      public virtual BeginAuthSessionResult ISteamUser_BeginAuthSession(
        IntPtr pAuthTicket,
        int cbAuthTicket,
        ulong steamID)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUser _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamUser_BeginAuthSession(this._ptr, pAuthTicket, cbAuthTicket, steamID);
      }

      public virtual void ISteamUser_EndAuthSession(ulong steamID)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUser _ptr is null!");
        Platform.Mac.Native.SteamAPI_ISteamUser_EndAuthSession(this._ptr, steamID);
      }

      public virtual void ISteamUser_CancelAuthTicket(uint hAuthTicket)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUser _ptr is null!");
        Platform.Mac.Native.SteamAPI_ISteamUser_CancelAuthTicket(this._ptr, hAuthTicket);
      }

      public virtual UserHasLicenseForAppResult ISteamUser_UserHasLicenseForApp(
        ulong steamID,
        uint appID)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUser _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamUser_UserHasLicenseForApp(this._ptr, steamID, appID);
      }

      public virtual bool ISteamUser_BIsBehindNAT()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamUser_BIsBehindNAT(this._ptr) : throw new Exception("ISteamUser _ptr is null!");
      }

      public virtual void ISteamUser_AdvertiseGame(
        ulong steamIDGameServer,
        uint unIPServer,
        ushort usPortServer)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUser _ptr is null!");
        Platform.Mac.Native.SteamAPI_ISteamUser_AdvertiseGame(this._ptr, steamIDGameServer, unIPServer, usPortServer);
      }

      public virtual SteamAPICall_t ISteamUser_RequestEncryptedAppTicket(
        IntPtr pDataToInclude,
        int cbDataToInclude)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUser _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamUser_RequestEncryptedAppTicket(this._ptr, pDataToInclude, cbDataToInclude);
      }

      public virtual bool ISteamUser_GetEncryptedAppTicket(
        IntPtr pTicket,
        int cbMaxTicket,
        out uint pcbTicket)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUser _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamUser_GetEncryptedAppTicket(this._ptr, pTicket, cbMaxTicket, out pcbTicket);
      }

      public virtual int ISteamUser_GetGameBadgeLevel(int nSeries, [MarshalAs(UnmanagedType.U1)] bool bFoil)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUser _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamUser_GetGameBadgeLevel(this._ptr, nSeries, bFoil);
      }

      public virtual int ISteamUser_GetPlayerSteamLevel()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamUser_GetPlayerSteamLevel(this._ptr) : throw new Exception("ISteamUser _ptr is null!");
      }

      public virtual SteamAPICall_t ISteamUser_RequestStoreAuthURL(string pchRedirectURL)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamUser_RequestStoreAuthURL(this._ptr, pchRedirectURL) : throw new Exception("ISteamUser _ptr is null!");
      }

      public virtual bool ISteamUser_BIsPhoneVerified()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamUser_BIsPhoneVerified(this._ptr) : throw new Exception("ISteamUser _ptr is null!");
      }

      public virtual bool ISteamUser_BIsTwoFactorEnabled()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamUser_BIsTwoFactorEnabled(this._ptr) : throw new Exception("ISteamUser _ptr is null!");
      }

      public virtual bool ISteamUser_BIsPhoneIdentifying()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamUser_BIsPhoneIdentifying(this._ptr) : throw new Exception("ISteamUser _ptr is null!");
      }

      public virtual bool ISteamUser_BIsPhoneRequiringVerification()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamUser_BIsPhoneRequiringVerification(this._ptr) : throw new Exception("ISteamUser _ptr is null!");
      }

      public virtual IntPtr ISteamFriends_GetPersonaName()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamFriends_GetPersonaName(this._ptr) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual SteamAPICall_t ISteamFriends_SetPersonaName(string pchPersonaName)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamFriends_SetPersonaName(this._ptr, pchPersonaName) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual PersonaState ISteamFriends_GetPersonaState()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamFriends_GetPersonaState(this._ptr) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual int ISteamFriends_GetFriendCount(int iFriendFlags)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamFriends_GetFriendCount(this._ptr, iFriendFlags) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual CSteamID ISteamFriends_GetFriendByIndex(int iFriend, int iFriendFlags)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamFriends _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamFriends_GetFriendByIndex(this._ptr, iFriend, iFriendFlags);
      }

      public virtual FriendRelationship ISteamFriends_GetFriendRelationship(ulong steamIDFriend)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamFriends_GetFriendRelationship(this._ptr, steamIDFriend) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual PersonaState ISteamFriends_GetFriendPersonaState(ulong steamIDFriend)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamFriends_GetFriendPersonaState(this._ptr, steamIDFriend) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual IntPtr ISteamFriends_GetFriendPersonaName(ulong steamIDFriend)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamFriends_GetFriendPersonaName(this._ptr, steamIDFriend) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual bool ISteamFriends_GetFriendGamePlayed(
        ulong steamIDFriend,
        ref FriendGameInfo_t pFriendGameInfo)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamFriends _ptr is null!");
        FriendGameInfo_t.PackSmall pFriendGameInfo1 = new FriendGameInfo_t.PackSmall();
        bool friendGamePlayed = Platform.Mac.Native.SteamAPI_ISteamFriends_GetFriendGamePlayed(this._ptr, steamIDFriend, ref pFriendGameInfo1);
        pFriendGameInfo = (FriendGameInfo_t) pFriendGameInfo1;
        return friendGamePlayed;
      }

      public virtual IntPtr ISteamFriends_GetFriendPersonaNameHistory(
        ulong steamIDFriend,
        int iPersonaName)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamFriends _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamFriends_GetFriendPersonaNameHistory(this._ptr, steamIDFriend, iPersonaName);
      }

      public virtual int ISteamFriends_GetFriendSteamLevel(ulong steamIDFriend)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamFriends_GetFriendSteamLevel(this._ptr, steamIDFriend) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual IntPtr ISteamFriends_GetPlayerNickname(ulong steamIDPlayer)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamFriends_GetPlayerNickname(this._ptr, steamIDPlayer) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual int ISteamFriends_GetFriendsGroupCount()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamFriends_GetFriendsGroupCount(this._ptr) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual FriendsGroupID_t ISteamFriends_GetFriendsGroupIDByIndex(int iFG)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamFriends_GetFriendsGroupIDByIndex(this._ptr, iFG) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual IntPtr ISteamFriends_GetFriendsGroupName(short friendsGroupID)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamFriends_GetFriendsGroupName(this._ptr, friendsGroupID) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual int ISteamFriends_GetFriendsGroupMembersCount(short friendsGroupID)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamFriends_GetFriendsGroupMembersCount(this._ptr, friendsGroupID) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual void ISteamFriends_GetFriendsGroupMembersList(
        short friendsGroupID,
        IntPtr pOutSteamIDMembers,
        int nMembersCount)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamFriends _ptr is null!");
        Platform.Mac.Native.SteamAPI_ISteamFriends_GetFriendsGroupMembersList(this._ptr, friendsGroupID, pOutSteamIDMembers, nMembersCount);
      }

      public virtual bool ISteamFriends_HasFriend(ulong steamIDFriend, int iFriendFlags)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamFriends _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamFriends_HasFriend(this._ptr, steamIDFriend, iFriendFlags);
      }

      public virtual int ISteamFriends_GetClanCount()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamFriends_GetClanCount(this._ptr) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual CSteamID ISteamFriends_GetClanByIndex(int iClan)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamFriends_GetClanByIndex(this._ptr, iClan) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual IntPtr ISteamFriends_GetClanName(ulong steamIDClan)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamFriends_GetClanName(this._ptr, steamIDClan) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual IntPtr ISteamFriends_GetClanTag(ulong steamIDClan)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamFriends_GetClanTag(this._ptr, steamIDClan) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual bool ISteamFriends_GetClanActivityCounts(
        ulong steamIDClan,
        out int pnOnline,
        out int pnInGame,
        out int pnChatting)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamFriends_GetClanActivityCounts(this._ptr, steamIDClan, out pnOnline, out pnInGame, out pnChatting) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual SteamAPICall_t ISteamFriends_DownloadClanActivityCounts(
        IntPtr psteamIDClans,
        int cClansToRequest)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamFriends _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamFriends_DownloadClanActivityCounts(this._ptr, psteamIDClans, cClansToRequest);
      }

      public virtual int ISteamFriends_GetFriendCountFromSource(ulong steamIDSource)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamFriends_GetFriendCountFromSource(this._ptr, steamIDSource) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual CSteamID ISteamFriends_GetFriendFromSourceByIndex(
        ulong steamIDSource,
        int iFriend)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamFriends _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamFriends_GetFriendFromSourceByIndex(this._ptr, steamIDSource, iFriend);
      }

      public virtual bool ISteamFriends_IsUserInSource(ulong steamIDUser, ulong steamIDSource)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamFriends _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamFriends_IsUserInSource(this._ptr, steamIDUser, steamIDSource);
      }

      public virtual void ISteamFriends_SetInGameVoiceSpeaking(ulong steamIDUser, [MarshalAs(UnmanagedType.U1)] bool bSpeaking)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamFriends _ptr is null!");
        Platform.Mac.Native.SteamAPI_ISteamFriends_SetInGameVoiceSpeaking(this._ptr, steamIDUser, bSpeaking);
      }

      public virtual void ISteamFriends_ActivateGameOverlay(string pchDialog)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamFriends _ptr is null!");
        Platform.Mac.Native.SteamAPI_ISteamFriends_ActivateGameOverlay(this._ptr, pchDialog);
      }

      public virtual void ISteamFriends_ActivateGameOverlayToUser(string pchDialog, ulong steamID)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamFriends _ptr is null!");
        Platform.Mac.Native.SteamAPI_ISteamFriends_ActivateGameOverlayToUser(this._ptr, pchDialog, steamID);
      }

      public virtual void ISteamFriends_ActivateGameOverlayToWebPage(string pchURL)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamFriends _ptr is null!");
        Platform.Mac.Native.SteamAPI_ISteamFriends_ActivateGameOverlayToWebPage(this._ptr, pchURL);
      }

      public virtual void ISteamFriends_ActivateGameOverlayToStore(
        uint nAppID,
        OverlayToStoreFlag eFlag)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamFriends _ptr is null!");
        Platform.Mac.Native.SteamAPI_ISteamFriends_ActivateGameOverlayToStore(this._ptr, nAppID, eFlag);
      }

      public virtual void ISteamFriends_SetPlayedWith(ulong steamIDUserPlayedWith)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamFriends _ptr is null!");
        Platform.Mac.Native.SteamAPI_ISteamFriends_SetPlayedWith(this._ptr, steamIDUserPlayedWith);
      }

      public virtual void ISteamFriends_ActivateGameOverlayInviteDialog(ulong steamIDLobby)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamFriends _ptr is null!");
        Platform.Mac.Native.SteamAPI_ISteamFriends_ActivateGameOverlayInviteDialog(this._ptr, steamIDLobby);
      }

      public virtual int ISteamFriends_GetSmallFriendAvatar(ulong steamIDFriend)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamFriends_GetSmallFriendAvatar(this._ptr, steamIDFriend) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual int ISteamFriends_GetMediumFriendAvatar(ulong steamIDFriend)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamFriends_GetMediumFriendAvatar(this._ptr, steamIDFriend) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual int ISteamFriends_GetLargeFriendAvatar(ulong steamIDFriend)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamFriends_GetLargeFriendAvatar(this._ptr, steamIDFriend) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual bool ISteamFriends_RequestUserInformation(
        ulong steamIDUser,
        [MarshalAs(UnmanagedType.U1)] bool bRequireNameOnly)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamFriends _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamFriends_RequestUserInformation(this._ptr, steamIDUser, bRequireNameOnly);
      }

      public virtual SteamAPICall_t ISteamFriends_RequestClanOfficerList(ulong steamIDClan)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamFriends_RequestClanOfficerList(this._ptr, steamIDClan) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual CSteamID ISteamFriends_GetClanOwner(ulong steamIDClan)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamFriends_GetClanOwner(this._ptr, steamIDClan) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual int ISteamFriends_GetClanOfficerCount(ulong steamIDClan)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamFriends_GetClanOfficerCount(this._ptr, steamIDClan) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual CSteamID ISteamFriends_GetClanOfficerByIndex(ulong steamIDClan, int iOfficer)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamFriends _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamFriends_GetClanOfficerByIndex(this._ptr, steamIDClan, iOfficer);
      }

      public virtual uint ISteamFriends_GetUserRestrictions()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamFriends_GetUserRestrictions(this._ptr) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual bool ISteamFriends_SetRichPresence(string pchKey, string pchValue)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamFriends _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamFriends_SetRichPresence(this._ptr, pchKey, pchValue);
      }

      public virtual void ISteamFriends_ClearRichPresence()
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamFriends _ptr is null!");
        Platform.Mac.Native.SteamAPI_ISteamFriends_ClearRichPresence(this._ptr);
      }

      public virtual IntPtr ISteamFriends_GetFriendRichPresence(ulong steamIDFriend, string pchKey)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamFriends _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamFriends_GetFriendRichPresence(this._ptr, steamIDFriend, pchKey);
      }

      public virtual int ISteamFriends_GetFriendRichPresenceKeyCount(ulong steamIDFriend)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamFriends_GetFriendRichPresenceKeyCount(this._ptr, steamIDFriend) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual IntPtr ISteamFriends_GetFriendRichPresenceKeyByIndex(
        ulong steamIDFriend,
        int iKey)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamFriends _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamFriends_GetFriendRichPresenceKeyByIndex(this._ptr, steamIDFriend, iKey);
      }

      public virtual void ISteamFriends_RequestFriendRichPresence(ulong steamIDFriend)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamFriends _ptr is null!");
        Platform.Mac.Native.SteamAPI_ISteamFriends_RequestFriendRichPresence(this._ptr, steamIDFriend);
      }

      public virtual bool ISteamFriends_InviteUserToGame(
        ulong steamIDFriend,
        string pchConnectString)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamFriends _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamFriends_InviteUserToGame(this._ptr, steamIDFriend, pchConnectString);
      }

      public virtual int ISteamFriends_GetCoplayFriendCount()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamFriends_GetCoplayFriendCount(this._ptr) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual CSteamID ISteamFriends_GetCoplayFriend(int iCoplayFriend)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamFriends_GetCoplayFriend(this._ptr, iCoplayFriend) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual int ISteamFriends_GetFriendCoplayTime(ulong steamIDFriend)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamFriends_GetFriendCoplayTime(this._ptr, steamIDFriend) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual AppId_t ISteamFriends_GetFriendCoplayGame(ulong steamIDFriend)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamFriends_GetFriendCoplayGame(this._ptr, steamIDFriend) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual SteamAPICall_t ISteamFriends_JoinClanChatRoom(ulong steamIDClan)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamFriends_JoinClanChatRoom(this._ptr, steamIDClan) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual bool ISteamFriends_LeaveClanChatRoom(ulong steamIDClan)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamFriends_LeaveClanChatRoom(this._ptr, steamIDClan) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual int ISteamFriends_GetClanChatMemberCount(ulong steamIDClan)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamFriends_GetClanChatMemberCount(this._ptr, steamIDClan) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual CSteamID ISteamFriends_GetChatMemberByIndex(ulong steamIDClan, int iUser)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamFriends _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamFriends_GetChatMemberByIndex(this._ptr, steamIDClan, iUser);
      }

      public virtual bool ISteamFriends_SendClanChatMessage(ulong steamIDClanChat, string pchText)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamFriends _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamFriends_SendClanChatMessage(this._ptr, steamIDClanChat, pchText);
      }

      public virtual int ISteamFriends_GetClanChatMessage(
        ulong steamIDClanChat,
        int iMessage,
        IntPtr prgchText,
        int cchTextMax,
        out ChatEntryType peChatEntryType,
        out ulong psteamidChatter)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamFriends _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamFriends_GetClanChatMessage(this._ptr, steamIDClanChat, iMessage, prgchText, cchTextMax, out peChatEntryType, out psteamidChatter);
      }

      public virtual bool ISteamFriends_IsClanChatAdmin(ulong steamIDClanChat, ulong steamIDUser)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamFriends _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamFriends_IsClanChatAdmin(this._ptr, steamIDClanChat, steamIDUser);
      }

      public virtual bool ISteamFriends_IsClanChatWindowOpenInSteam(ulong steamIDClanChat)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamFriends_IsClanChatWindowOpenInSteam(this._ptr, steamIDClanChat) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual bool ISteamFriends_OpenClanChatWindowInSteam(ulong steamIDClanChat)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamFriends_OpenClanChatWindowInSteam(this._ptr, steamIDClanChat) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual bool ISteamFriends_CloseClanChatWindowInSteam(ulong steamIDClanChat)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamFriends_CloseClanChatWindowInSteam(this._ptr, steamIDClanChat) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual bool ISteamFriends_SetListenForFriendsMessages([MarshalAs(UnmanagedType.U1)] bool bInterceptEnabled)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamFriends_SetListenForFriendsMessages(this._ptr, bInterceptEnabled) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual bool ISteamFriends_ReplyToFriendMessage(
        ulong steamIDFriend,
        string pchMsgToSend)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamFriends _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamFriends_ReplyToFriendMessage(this._ptr, steamIDFriend, pchMsgToSend);
      }

      public virtual int ISteamFriends_GetFriendMessage(
        ulong steamIDFriend,
        int iMessageID,
        IntPtr pvData,
        int cubData,
        out ChatEntryType peChatEntryType)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamFriends _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamFriends_GetFriendMessage(this._ptr, steamIDFriend, iMessageID, pvData, cubData, out peChatEntryType);
      }

      public virtual SteamAPICall_t ISteamFriends_GetFollowerCount(ulong steamID)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamFriends_GetFollowerCount(this._ptr, steamID) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual SteamAPICall_t ISteamFriends_IsFollowing(ulong steamID)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamFriends_IsFollowing(this._ptr, steamID) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual SteamAPICall_t ISteamFriends_EnumerateFollowingList(uint unStartIndex)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamFriends_EnumerateFollowingList(this._ptr, unStartIndex) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual uint ISteamUtils_GetSecondsSinceAppActive()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamUtils_GetSecondsSinceAppActive(this._ptr) : throw new Exception("ISteamUtils _ptr is null!");
      }

      public virtual uint ISteamUtils_GetSecondsSinceComputerActive()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamUtils_GetSecondsSinceComputerActive(this._ptr) : throw new Exception("ISteamUtils _ptr is null!");
      }

      public virtual Universe ISteamUtils_GetConnectedUniverse()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamUtils_GetConnectedUniverse(this._ptr) : throw new Exception("ISteamUtils _ptr is null!");
      }

      public virtual uint ISteamUtils_GetServerRealTime()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamUtils_GetServerRealTime(this._ptr) : throw new Exception("ISteamUtils _ptr is null!");
      }

      public virtual IntPtr ISteamUtils_GetIPCountry()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamUtils_GetIPCountry(this._ptr) : throw new Exception("ISteamUtils _ptr is null!");
      }

      public virtual bool ISteamUtils_GetImageSize(int iImage, out uint pnWidth, out uint pnHeight)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamUtils_GetImageSize(this._ptr, iImage, out pnWidth, out pnHeight) : throw new Exception("ISteamUtils _ptr is null!");
      }

      public virtual bool ISteamUtils_GetImageRGBA(int iImage, IntPtr pubDest, int nDestBufferSize)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUtils _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamUtils_GetImageRGBA(this._ptr, iImage, pubDest, nDestBufferSize);
      }

      public virtual bool ISteamUtils_GetCSERIPPort(out uint unIP, out ushort usPort)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamUtils_GetCSERIPPort(this._ptr, out unIP, out usPort) : throw new Exception("ISteamUtils _ptr is null!");
      }

      public virtual byte ISteamUtils_GetCurrentBatteryPower()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamUtils_GetCurrentBatteryPower(this._ptr) : throw new Exception("ISteamUtils _ptr is null!");
      }

      public virtual uint ISteamUtils_GetAppID()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamUtils_GetAppID(this._ptr) : throw new Exception("ISteamUtils _ptr is null!");
      }

      public virtual void ISteamUtils_SetOverlayNotificationPosition(
        NotificationPosition eNotificationPosition)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUtils _ptr is null!");
        Platform.Mac.Native.SteamAPI_ISteamUtils_SetOverlayNotificationPosition(this._ptr, eNotificationPosition);
      }

      public virtual bool ISteamUtils_IsAPICallCompleted(ulong hSteamAPICall, [MarshalAs(UnmanagedType.U1)] ref bool pbFailed)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUtils _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamUtils_IsAPICallCompleted(this._ptr, hSteamAPICall, ref pbFailed);
      }

      public virtual SteamAPICallFailure ISteamUtils_GetAPICallFailureReason(ulong hSteamAPICall)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamUtils_GetAPICallFailureReason(this._ptr, hSteamAPICall) : throw new Exception("ISteamUtils _ptr is null!");
      }

      public virtual bool ISteamUtils_GetAPICallResult(
        ulong hSteamAPICall,
        IntPtr pCallback,
        int cubCallback,
        int iCallbackExpected,
        [MarshalAs(UnmanagedType.U1)] ref bool pbFailed)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUtils _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamUtils_GetAPICallResult(this._ptr, hSteamAPICall, pCallback, cubCallback, iCallbackExpected, ref pbFailed);
      }

      public virtual uint ISteamUtils_GetIPCCallCount()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamUtils_GetIPCCallCount(this._ptr) : throw new Exception("ISteamUtils _ptr is null!");
      }

      public virtual void ISteamUtils_SetWarningMessageHook(IntPtr pFunction)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUtils _ptr is null!");
        Platform.Mac.Native.SteamAPI_ISteamUtils_SetWarningMessageHook(this._ptr, pFunction);
      }

      public virtual bool ISteamUtils_IsOverlayEnabled()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamUtils_IsOverlayEnabled(this._ptr) : throw new Exception("ISteamUtils _ptr is null!");
      }

      public virtual bool ISteamUtils_BOverlayNeedsPresent()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamUtils_BOverlayNeedsPresent(this._ptr) : throw new Exception("ISteamUtils _ptr is null!");
      }

      public virtual SteamAPICall_t ISteamUtils_CheckFileSignature(string szFileName)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamUtils_CheckFileSignature(this._ptr, szFileName) : throw new Exception("ISteamUtils _ptr is null!");
      }

      public virtual bool ISteamUtils_ShowGamepadTextInput(
        GamepadTextInputMode eInputMode,
        GamepadTextInputLineMode eLineInputMode,
        string pchDescription,
        uint unCharMax,
        string pchExistingText)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUtils _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamUtils_ShowGamepadTextInput(this._ptr, eInputMode, eLineInputMode, pchDescription, unCharMax, pchExistingText);
      }

      public virtual uint ISteamUtils_GetEnteredGamepadTextLength()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamUtils_GetEnteredGamepadTextLength(this._ptr) : throw new Exception("ISteamUtils _ptr is null!");
      }

      public virtual bool ISteamUtils_GetEnteredGamepadTextInput(
        StringBuilder pchText,
        uint cchText)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUtils _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamUtils_GetEnteredGamepadTextInput(this._ptr, pchText, cchText);
      }

      public virtual IntPtr ISteamUtils_GetSteamUILanguage()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamUtils_GetSteamUILanguage(this._ptr) : throw new Exception("ISteamUtils _ptr is null!");
      }

      public virtual bool ISteamUtils_IsSteamRunningInVR()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamUtils_IsSteamRunningInVR(this._ptr) : throw new Exception("ISteamUtils _ptr is null!");
      }

      public virtual void ISteamUtils_SetOverlayNotificationInset(
        int nHorizontalInset,
        int nVerticalInset)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUtils _ptr is null!");
        Platform.Mac.Native.SteamAPI_ISteamUtils_SetOverlayNotificationInset(this._ptr, nHorizontalInset, nVerticalInset);
      }

      public virtual bool ISteamUtils_IsSteamInBigPictureMode()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamUtils_IsSteamInBigPictureMode(this._ptr) : throw new Exception("ISteamUtils _ptr is null!");
      }

      public virtual void ISteamUtils_StartVRDashboard()
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUtils _ptr is null!");
        Platform.Mac.Native.SteamAPI_ISteamUtils_StartVRDashboard(this._ptr);
      }

      public virtual bool ISteamUtils_IsVRHeadsetStreamingEnabled()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamUtils_IsVRHeadsetStreamingEnabled(this._ptr) : throw new Exception("ISteamUtils _ptr is null!");
      }

      public virtual void ISteamUtils_SetVRHeadsetStreamingEnabled([MarshalAs(UnmanagedType.U1)] bool bEnabled)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUtils _ptr is null!");
        Platform.Mac.Native.SteamAPI_ISteamUtils_SetVRHeadsetStreamingEnabled(this._ptr, bEnabled);
      }

      public virtual int ISteamMatchmaking_GetFavoriteGameCount()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamMatchmaking_GetFavoriteGameCount(this._ptr) : throw new Exception("ISteamMatchmaking _ptr is null!");
      }

      public virtual bool ISteamMatchmaking_GetFavoriteGame(
        int iGame,
        ref uint pnAppID,
        out uint pnIP,
        out ushort pnConnPort,
        out ushort pnQueryPort,
        out uint punFlags,
        out uint pRTime32LastPlayedOnServer)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmaking _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamMatchmaking_GetFavoriteGame(this._ptr, iGame, ref pnAppID, out pnIP, out pnConnPort, out pnQueryPort, out punFlags, out pRTime32LastPlayedOnServer);
      }

      public virtual int ISteamMatchmaking_AddFavoriteGame(
        uint nAppID,
        uint nIP,
        ushort nConnPort,
        ushort nQueryPort,
        uint unFlags,
        uint rTime32LastPlayedOnServer)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmaking _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamMatchmaking_AddFavoriteGame(this._ptr, nAppID, nIP, nConnPort, nQueryPort, unFlags, rTime32LastPlayedOnServer);
      }

      public virtual bool ISteamMatchmaking_RemoveFavoriteGame(
        uint nAppID,
        uint nIP,
        ushort nConnPort,
        ushort nQueryPort,
        uint unFlags)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmaking _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamMatchmaking_RemoveFavoriteGame(this._ptr, nAppID, nIP, nConnPort, nQueryPort, unFlags);
      }

      public virtual SteamAPICall_t ISteamMatchmaking_RequestLobbyList()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamMatchmaking_RequestLobbyList(this._ptr) : throw new Exception("ISteamMatchmaking _ptr is null!");
      }

      public virtual void ISteamMatchmaking_AddRequestLobbyListStringFilter(
        string pchKeyToMatch,
        string pchValueToMatch,
        LobbyComparison eComparisonType)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmaking _ptr is null!");
        Platform.Mac.Native.SteamAPI_ISteamMatchmaking_AddRequestLobbyListStringFilter(this._ptr, pchKeyToMatch, pchValueToMatch, eComparisonType);
      }

      public virtual void ISteamMatchmaking_AddRequestLobbyListNumericalFilter(
        string pchKeyToMatch,
        int nValueToMatch,
        LobbyComparison eComparisonType)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmaking _ptr is null!");
        Platform.Mac.Native.SteamAPI_ISteamMatchmaking_AddRequestLobbyListNumericalFilter(this._ptr, pchKeyToMatch, nValueToMatch, eComparisonType);
      }

      public virtual void ISteamMatchmaking_AddRequestLobbyListNearValueFilter(
        string pchKeyToMatch,
        int nValueToBeCloseTo)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmaking _ptr is null!");
        Platform.Mac.Native.SteamAPI_ISteamMatchmaking_AddRequestLobbyListNearValueFilter(this._ptr, pchKeyToMatch, nValueToBeCloseTo);
      }

      public virtual void ISteamMatchmaking_AddRequestLobbyListFilterSlotsAvailable(
        int nSlotsAvailable)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmaking _ptr is null!");
        Platform.Mac.Native.SteamAPI_ISteamMatchmaking_AddRequestLobbyListFilterSlotsAvailable(this._ptr, nSlotsAvailable);
      }

      public virtual void ISteamMatchmaking_AddRequestLobbyListDistanceFilter(
        LobbyDistanceFilter eLobbyDistanceFilter)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmaking _ptr is null!");
        Platform.Mac.Native.SteamAPI_ISteamMatchmaking_AddRequestLobbyListDistanceFilter(this._ptr, eLobbyDistanceFilter);
      }

      public virtual void ISteamMatchmaking_AddRequestLobbyListResultCountFilter(int cMaxResults)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmaking _ptr is null!");
        Platform.Mac.Native.SteamAPI_ISteamMatchmaking_AddRequestLobbyListResultCountFilter(this._ptr, cMaxResults);
      }

      public virtual void ISteamMatchmaking_AddRequestLobbyListCompatibleMembersFilter(
        ulong steamIDLobby)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmaking _ptr is null!");
        Platform.Mac.Native.SteamAPI_ISteamMatchmaking_AddRequestLobbyListCompatibleMembersFilter(this._ptr, steamIDLobby);
      }

      public virtual CSteamID ISteamMatchmaking_GetLobbyByIndex(int iLobby)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamMatchmaking_GetLobbyByIndex(this._ptr, iLobby) : throw new Exception("ISteamMatchmaking _ptr is null!");
      }

      public virtual SteamAPICall_t ISteamMatchmaking_CreateLobby(
        LobbyType eLobbyType,
        int cMaxMembers)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmaking _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamMatchmaking_CreateLobby(this._ptr, eLobbyType, cMaxMembers);
      }

      public virtual SteamAPICall_t ISteamMatchmaking_JoinLobby(ulong steamIDLobby)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamMatchmaking_JoinLobby(this._ptr, steamIDLobby) : throw new Exception("ISteamMatchmaking _ptr is null!");
      }

      public virtual void ISteamMatchmaking_LeaveLobby(ulong steamIDLobby)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmaking _ptr is null!");
        Platform.Mac.Native.SteamAPI_ISteamMatchmaking_LeaveLobby(this._ptr, steamIDLobby);
      }

      public virtual bool ISteamMatchmaking_InviteUserToLobby(
        ulong steamIDLobby,
        ulong steamIDInvitee)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmaking _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamMatchmaking_InviteUserToLobby(this._ptr, steamIDLobby, steamIDInvitee);
      }

      public virtual int ISteamMatchmaking_GetNumLobbyMembers(ulong steamIDLobby)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamMatchmaking_GetNumLobbyMembers(this._ptr, steamIDLobby) : throw new Exception("ISteamMatchmaking _ptr is null!");
      }

      public virtual CSteamID ISteamMatchmaking_GetLobbyMemberByIndex(
        ulong steamIDLobby,
        int iMember)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmaking _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamMatchmaking_GetLobbyMemberByIndex(this._ptr, steamIDLobby, iMember);
      }

      public virtual IntPtr ISteamMatchmaking_GetLobbyData(ulong steamIDLobby, string pchKey)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmaking _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamMatchmaking_GetLobbyData(this._ptr, steamIDLobby, pchKey);
      }

      public virtual bool ISteamMatchmaking_SetLobbyData(
        ulong steamIDLobby,
        string pchKey,
        string pchValue)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmaking _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamMatchmaking_SetLobbyData(this._ptr, steamIDLobby, pchKey, pchValue);
      }

      public virtual int ISteamMatchmaking_GetLobbyDataCount(ulong steamIDLobby)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamMatchmaking_GetLobbyDataCount(this._ptr, steamIDLobby) : throw new Exception("ISteamMatchmaking _ptr is null!");
      }

      public virtual bool ISteamMatchmaking_GetLobbyDataByIndex(
        ulong steamIDLobby,
        int iLobbyData,
        StringBuilder pchKey,
        int cchKeyBufferSize,
        StringBuilder pchValue,
        int cchValueBufferSize)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmaking _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamMatchmaking_GetLobbyDataByIndex(this._ptr, steamIDLobby, iLobbyData, pchKey, cchKeyBufferSize, pchValue, cchValueBufferSize);
      }

      public virtual bool ISteamMatchmaking_DeleteLobbyData(ulong steamIDLobby, string pchKey)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmaking _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamMatchmaking_DeleteLobbyData(this._ptr, steamIDLobby, pchKey);
      }

      public virtual IntPtr ISteamMatchmaking_GetLobbyMemberData(
        ulong steamIDLobby,
        ulong steamIDUser,
        string pchKey)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmaking _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamMatchmaking_GetLobbyMemberData(this._ptr, steamIDLobby, steamIDUser, pchKey);
      }

      public virtual void ISteamMatchmaking_SetLobbyMemberData(
        ulong steamIDLobby,
        string pchKey,
        string pchValue)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmaking _ptr is null!");
        Platform.Mac.Native.SteamAPI_ISteamMatchmaking_SetLobbyMemberData(this._ptr, steamIDLobby, pchKey, pchValue);
      }

      public virtual bool ISteamMatchmaking_SendLobbyChatMsg(
        ulong steamIDLobby,
        IntPtr pvMsgBody,
        int cubMsgBody)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmaking _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamMatchmaking_SendLobbyChatMsg(this._ptr, steamIDLobby, pvMsgBody, cubMsgBody);
      }

      public virtual int ISteamMatchmaking_GetLobbyChatEntry(
        ulong steamIDLobby,
        int iChatID,
        out ulong pSteamIDUser,
        IntPtr pvData,
        int cubData,
        out ChatEntryType peChatEntryType)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmaking _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamMatchmaking_GetLobbyChatEntry(this._ptr, steamIDLobby, iChatID, out pSteamIDUser, pvData, cubData, out peChatEntryType);
      }

      public virtual bool ISteamMatchmaking_RequestLobbyData(ulong steamIDLobby)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamMatchmaking_RequestLobbyData(this._ptr, steamIDLobby) : throw new Exception("ISteamMatchmaking _ptr is null!");
      }

      public virtual void ISteamMatchmaking_SetLobbyGameServer(
        ulong steamIDLobby,
        uint unGameServerIP,
        ushort unGameServerPort,
        ulong steamIDGameServer)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmaking _ptr is null!");
        Platform.Mac.Native.SteamAPI_ISteamMatchmaking_SetLobbyGameServer(this._ptr, steamIDLobby, unGameServerIP, unGameServerPort, steamIDGameServer);
      }

      public virtual bool ISteamMatchmaking_GetLobbyGameServer(
        ulong steamIDLobby,
        out uint punGameServerIP,
        out ushort punGameServerPort,
        out ulong psteamIDGameServer)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamMatchmaking_GetLobbyGameServer(this._ptr, steamIDLobby, out punGameServerIP, out punGameServerPort, out psteamIDGameServer) : throw new Exception("ISteamMatchmaking _ptr is null!");
      }

      public virtual bool ISteamMatchmaking_SetLobbyMemberLimit(ulong steamIDLobby, int cMaxMembers)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmaking _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamMatchmaking_SetLobbyMemberLimit(this._ptr, steamIDLobby, cMaxMembers);
      }

      public virtual int ISteamMatchmaking_GetLobbyMemberLimit(ulong steamIDLobby)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamMatchmaking_GetLobbyMemberLimit(this._ptr, steamIDLobby) : throw new Exception("ISteamMatchmaking _ptr is null!");
      }

      public virtual bool ISteamMatchmaking_SetLobbyType(ulong steamIDLobby, LobbyType eLobbyType)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmaking _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamMatchmaking_SetLobbyType(this._ptr, steamIDLobby, eLobbyType);
      }

      public virtual bool ISteamMatchmaking_SetLobbyJoinable(
        ulong steamIDLobby,
        [MarshalAs(UnmanagedType.U1)] bool bLobbyJoinable)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmaking _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamMatchmaking_SetLobbyJoinable(this._ptr, steamIDLobby, bLobbyJoinable);
      }

      public virtual CSteamID ISteamMatchmaking_GetLobbyOwner(ulong steamIDLobby)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamMatchmaking_GetLobbyOwner(this._ptr, steamIDLobby) : throw new Exception("ISteamMatchmaking _ptr is null!");
      }

      public virtual bool ISteamMatchmaking_SetLobbyOwner(ulong steamIDLobby, ulong steamIDNewOwner)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmaking _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamMatchmaking_SetLobbyOwner(this._ptr, steamIDLobby, steamIDNewOwner);
      }

      public virtual bool ISteamMatchmaking_SetLinkedLobby(
        ulong steamIDLobby,
        ulong steamIDLobbyDependent)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmaking _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamMatchmaking_SetLinkedLobby(this._ptr, steamIDLobby, steamIDLobbyDependent);
      }

      public virtual HServerListRequest ISteamMatchmakingServers_RequestInternetServerList(
        uint iApp,
        IntPtr ppchFilters,
        uint nFilters,
        IntPtr pRequestServersResponse)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmakingServers _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamMatchmakingServers_RequestInternetServerList(this._ptr, iApp, ppchFilters, nFilters, pRequestServersResponse);
      }

      public virtual HServerListRequest ISteamMatchmakingServers_RequestLANServerList(
        uint iApp,
        IntPtr pRequestServersResponse)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmakingServers _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamMatchmakingServers_RequestLANServerList(this._ptr, iApp, pRequestServersResponse);
      }

      public virtual HServerListRequest ISteamMatchmakingServers_RequestFriendsServerList(
        uint iApp,
        IntPtr ppchFilters,
        uint nFilters,
        IntPtr pRequestServersResponse)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmakingServers _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamMatchmakingServers_RequestFriendsServerList(this._ptr, iApp, ppchFilters, nFilters, pRequestServersResponse);
      }

      public virtual HServerListRequest ISteamMatchmakingServers_RequestFavoritesServerList(
        uint iApp,
        IntPtr ppchFilters,
        uint nFilters,
        IntPtr pRequestServersResponse)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmakingServers _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamMatchmakingServers_RequestFavoritesServerList(this._ptr, iApp, ppchFilters, nFilters, pRequestServersResponse);
      }

      public virtual HServerListRequest ISteamMatchmakingServers_RequestHistoryServerList(
        uint iApp,
        IntPtr ppchFilters,
        uint nFilters,
        IntPtr pRequestServersResponse)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmakingServers _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamMatchmakingServers_RequestHistoryServerList(this._ptr, iApp, ppchFilters, nFilters, pRequestServersResponse);
      }

      public virtual HServerListRequest ISteamMatchmakingServers_RequestSpectatorServerList(
        uint iApp,
        IntPtr ppchFilters,
        uint nFilters,
        IntPtr pRequestServersResponse)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmakingServers _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamMatchmakingServers_RequestSpectatorServerList(this._ptr, iApp, ppchFilters, nFilters, pRequestServersResponse);
      }

      public virtual void ISteamMatchmakingServers_ReleaseRequest(IntPtr hServerListRequest)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmakingServers _ptr is null!");
        Platform.Mac.Native.SteamAPI_ISteamMatchmakingServers_ReleaseRequest(this._ptr, hServerListRequest);
      }

      public virtual IntPtr ISteamMatchmakingServers_GetServerDetails(IntPtr hRequest, int iServer)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmakingServers _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamMatchmakingServers_GetServerDetails(this._ptr, hRequest, iServer);
      }

      public virtual void ISteamMatchmakingServers_CancelQuery(IntPtr hRequest)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmakingServers _ptr is null!");
        Platform.Mac.Native.SteamAPI_ISteamMatchmakingServers_CancelQuery(this._ptr, hRequest);
      }

      public virtual void ISteamMatchmakingServers_RefreshQuery(IntPtr hRequest)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmakingServers _ptr is null!");
        Platform.Mac.Native.SteamAPI_ISteamMatchmakingServers_RefreshQuery(this._ptr, hRequest);
      }

      public virtual bool ISteamMatchmakingServers_IsRefreshing(IntPtr hRequest)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamMatchmakingServers_IsRefreshing(this._ptr, hRequest) : throw new Exception("ISteamMatchmakingServers _ptr is null!");
      }

      public virtual int ISteamMatchmakingServers_GetServerCount(IntPtr hRequest)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamMatchmakingServers_GetServerCount(this._ptr, hRequest) : throw new Exception("ISteamMatchmakingServers _ptr is null!");
      }

      public virtual void ISteamMatchmakingServers_RefreshServer(IntPtr hRequest, int iServer)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmakingServers _ptr is null!");
        Platform.Mac.Native.SteamAPI_ISteamMatchmakingServers_RefreshServer(this._ptr, hRequest, iServer);
      }

      public virtual HServerQuery ISteamMatchmakingServers_PingServer(
        uint unIP,
        ushort usPort,
        IntPtr pRequestServersResponse)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmakingServers _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamMatchmakingServers_PingServer(this._ptr, unIP, usPort, pRequestServersResponse);
      }

      public virtual HServerQuery ISteamMatchmakingServers_PlayerDetails(
        uint unIP,
        ushort usPort,
        IntPtr pRequestServersResponse)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmakingServers _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamMatchmakingServers_PlayerDetails(this._ptr, unIP, usPort, pRequestServersResponse);
      }

      public virtual HServerQuery ISteamMatchmakingServers_ServerRules(
        uint unIP,
        ushort usPort,
        IntPtr pRequestServersResponse)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmakingServers _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamMatchmakingServers_ServerRules(this._ptr, unIP, usPort, pRequestServersResponse);
      }

      public virtual void ISteamMatchmakingServers_CancelServerQuery(int hServerQuery)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmakingServers _ptr is null!");
        Platform.Mac.Native.SteamAPI_ISteamMatchmakingServers_CancelServerQuery(this._ptr, hServerQuery);
      }

      public virtual bool ISteamRemoteStorage_FileWrite(string pchFile, IntPtr pvData, int cubData)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamRemoteStorage _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamRemoteStorage_FileWrite(this._ptr, pchFile, pvData, cubData);
      }

      public virtual int ISteamRemoteStorage_FileRead(
        string pchFile,
        IntPtr pvData,
        int cubDataToRead)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamRemoteStorage _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamRemoteStorage_FileRead(this._ptr, pchFile, pvData, cubDataToRead);
      }

      public virtual SteamAPICall_t ISteamRemoteStorage_FileWriteAsync(
        string pchFile,
        IntPtr pvData,
        uint cubData)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamRemoteStorage _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamRemoteStorage_FileWriteAsync(this._ptr, pchFile, pvData, cubData);
      }

      public virtual SteamAPICall_t ISteamRemoteStorage_FileReadAsync(
        string pchFile,
        uint nOffset,
        uint cubToRead)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamRemoteStorage _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamRemoteStorage_FileReadAsync(this._ptr, pchFile, nOffset, cubToRead);
      }

      public virtual bool ISteamRemoteStorage_FileReadAsyncComplete(
        ulong hReadCall,
        IntPtr pvBuffer,
        uint cubToRead)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamRemoteStorage _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamRemoteStorage_FileReadAsyncComplete(this._ptr, hReadCall, pvBuffer, cubToRead);
      }

      public virtual bool ISteamRemoteStorage_FileForget(string pchFile)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamRemoteStorage_FileForget(this._ptr, pchFile) : throw new Exception("ISteamRemoteStorage _ptr is null!");
      }

      public virtual bool ISteamRemoteStorage_FileDelete(string pchFile)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamRemoteStorage_FileDelete(this._ptr, pchFile) : throw new Exception("ISteamRemoteStorage _ptr is null!");
      }

      public virtual SteamAPICall_t ISteamRemoteStorage_FileShare(string pchFile)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamRemoteStorage_FileShare(this._ptr, pchFile) : throw new Exception("ISteamRemoteStorage _ptr is null!");
      }

      public virtual bool ISteamRemoteStorage_SetSyncPlatforms(
        string pchFile,
        RemoteStoragePlatform eRemoteStoragePlatform)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamRemoteStorage _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamRemoteStorage_SetSyncPlatforms(this._ptr, pchFile, eRemoteStoragePlatform);
      }

      public virtual UGCFileWriteStreamHandle_t ISteamRemoteStorage_FileWriteStreamOpen(
        string pchFile)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamRemoteStorage_FileWriteStreamOpen(this._ptr, pchFile) : throw new Exception("ISteamRemoteStorage _ptr is null!");
      }

      public virtual bool ISteamRemoteStorage_FileWriteStreamWriteChunk(
        ulong writeHandle,
        IntPtr pvData,
        int cubData)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamRemoteStorage _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamRemoteStorage_FileWriteStreamWriteChunk(this._ptr, writeHandle, pvData, cubData);
      }

      public virtual bool ISteamRemoteStorage_FileWriteStreamClose(ulong writeHandle)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamRemoteStorage_FileWriteStreamClose(this._ptr, writeHandle) : throw new Exception("ISteamRemoteStorage _ptr is null!");
      }

      public virtual bool ISteamRemoteStorage_FileWriteStreamCancel(ulong writeHandle)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamRemoteStorage_FileWriteStreamCancel(this._ptr, writeHandle) : throw new Exception("ISteamRemoteStorage _ptr is null!");
      }

      public virtual bool ISteamRemoteStorage_FileExists(string pchFile)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamRemoteStorage_FileExists(this._ptr, pchFile) : throw new Exception("ISteamRemoteStorage _ptr is null!");
      }

      public virtual bool ISteamRemoteStorage_FilePersisted(string pchFile)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamRemoteStorage_FilePersisted(this._ptr, pchFile) : throw new Exception("ISteamRemoteStorage _ptr is null!");
      }

      public virtual int ISteamRemoteStorage_GetFileSize(string pchFile)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamRemoteStorage_GetFileSize(this._ptr, pchFile) : throw new Exception("ISteamRemoteStorage _ptr is null!");
      }

      public virtual long ISteamRemoteStorage_GetFileTimestamp(string pchFile)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamRemoteStorage_GetFileTimestamp(this._ptr, pchFile) : throw new Exception("ISteamRemoteStorage _ptr is null!");
      }

      public virtual RemoteStoragePlatform ISteamRemoteStorage_GetSyncPlatforms(string pchFile)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamRemoteStorage_GetSyncPlatforms(this._ptr, pchFile) : throw new Exception("ISteamRemoteStorage _ptr is null!");
      }

      public virtual int ISteamRemoteStorage_GetFileCount()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamRemoteStorage_GetFileCount(this._ptr) : throw new Exception("ISteamRemoteStorage _ptr is null!");
      }

      public virtual IntPtr ISteamRemoteStorage_GetFileNameAndSize(
        int iFile,
        out int pnFileSizeInBytes)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamRemoteStorage_GetFileNameAndSize(this._ptr, iFile, out pnFileSizeInBytes) : throw new Exception("ISteamRemoteStorage _ptr is null!");
      }

      public virtual bool ISteamRemoteStorage_GetQuota(
        out ulong pnTotalBytes,
        out ulong puAvailableBytes)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamRemoteStorage_GetQuota(this._ptr, out pnTotalBytes, out puAvailableBytes) : throw new Exception("ISteamRemoteStorage _ptr is null!");
      }

      public virtual bool ISteamRemoteStorage_IsCloudEnabledForAccount()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamRemoteStorage_IsCloudEnabledForAccount(this._ptr) : throw new Exception("ISteamRemoteStorage _ptr is null!");
      }

      public virtual bool ISteamRemoteStorage_IsCloudEnabledForApp()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamRemoteStorage_IsCloudEnabledForApp(this._ptr) : throw new Exception("ISteamRemoteStorage _ptr is null!");
      }

      public virtual void ISteamRemoteStorage_SetCloudEnabledForApp([MarshalAs(UnmanagedType.U1)] bool bEnabled)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamRemoteStorage _ptr is null!");
        Platform.Mac.Native.SteamAPI_ISteamRemoteStorage_SetCloudEnabledForApp(this._ptr, bEnabled);
      }

      public virtual SteamAPICall_t ISteamRemoteStorage_UGCDownload(ulong hContent, uint unPriority)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamRemoteStorage _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamRemoteStorage_UGCDownload(this._ptr, hContent, unPriority);
      }

      public virtual bool ISteamRemoteStorage_GetUGCDownloadProgress(
        ulong hContent,
        out int pnBytesDownloaded,
        out int pnBytesExpected)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamRemoteStorage_GetUGCDownloadProgress(this._ptr, hContent, out pnBytesDownloaded, out pnBytesExpected) : throw new Exception("ISteamRemoteStorage _ptr is null!");
      }

      public virtual bool ISteamRemoteStorage_GetUGCDetails(
        ulong hContent,
        ref uint pnAppID,
        StringBuilder ppchName,
        out int pnFileSizeInBytes,
        out ulong pSteamIDOwner)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamRemoteStorage _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamRemoteStorage_GetUGCDetails(this._ptr, hContent, ref pnAppID, ppchName, out pnFileSizeInBytes, out pSteamIDOwner);
      }

      public virtual int ISteamRemoteStorage_UGCRead(
        ulong hContent,
        IntPtr pvData,
        int cubDataToRead,
        uint cOffset,
        UGCReadAction eAction)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamRemoteStorage _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamRemoteStorage_UGCRead(this._ptr, hContent, pvData, cubDataToRead, cOffset, eAction);
      }

      public virtual int ISteamRemoteStorage_GetCachedUGCCount()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamRemoteStorage_GetCachedUGCCount(this._ptr) : throw new Exception("ISteamRemoteStorage _ptr is null!");
      }

      public virtual UGCHandle_t ISteamRemoteStorage_GetCachedUGCHandle(int iCachedContent)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamRemoteStorage_GetCachedUGCHandle(this._ptr, iCachedContent) : throw new Exception("ISteamRemoteStorage _ptr is null!");
      }

      public virtual SteamAPICall_t ISteamRemoteStorage_PublishWorkshopFile(
        string pchFile,
        string pchPreviewFile,
        uint nConsumerAppId,
        string pchTitle,
        string pchDescription,
        RemoteStoragePublishedFileVisibility eVisibility,
        ref SteamParamStringArray_t pTags,
        WorkshopFileType eWorkshopFileType)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamRemoteStorage _ptr is null!");
        SteamParamStringArray_t.PackSmall pTags1 = new SteamParamStringArray_t.PackSmall();
        SteamAPICall_t steamApiCallT = Platform.Mac.Native.SteamAPI_ISteamRemoteStorage_PublishWorkshopFile(this._ptr, pchFile, pchPreviewFile, nConsumerAppId, pchTitle, pchDescription, eVisibility, ref pTags1, eWorkshopFileType);
        pTags = (SteamParamStringArray_t) pTags1;
        return steamApiCallT;
      }

      public virtual PublishedFileUpdateHandle_t ISteamRemoteStorage_CreatePublishedFileUpdateRequest(
        ulong unPublishedFileId)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamRemoteStorage_CreatePublishedFileUpdateRequest(this._ptr, unPublishedFileId) : throw new Exception("ISteamRemoteStorage _ptr is null!");
      }

      public virtual bool ISteamRemoteStorage_UpdatePublishedFileFile(
        ulong updateHandle,
        string pchFile)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamRemoteStorage _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamRemoteStorage_UpdatePublishedFileFile(this._ptr, updateHandle, pchFile);
      }

      public virtual bool ISteamRemoteStorage_UpdatePublishedFilePreviewFile(
        ulong updateHandle,
        string pchPreviewFile)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamRemoteStorage _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamRemoteStorage_UpdatePublishedFilePreviewFile(this._ptr, updateHandle, pchPreviewFile);
      }

      public virtual bool ISteamRemoteStorage_UpdatePublishedFileTitle(
        ulong updateHandle,
        string pchTitle)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamRemoteStorage _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamRemoteStorage_UpdatePublishedFileTitle(this._ptr, updateHandle, pchTitle);
      }

      public virtual bool ISteamRemoteStorage_UpdatePublishedFileDescription(
        ulong updateHandle,
        string pchDescription)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamRemoteStorage _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamRemoteStorage_UpdatePublishedFileDescription(this._ptr, updateHandle, pchDescription);
      }

      public virtual bool ISteamRemoteStorage_UpdatePublishedFileVisibility(
        ulong updateHandle,
        RemoteStoragePublishedFileVisibility eVisibility)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamRemoteStorage _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamRemoteStorage_UpdatePublishedFileVisibility(this._ptr, updateHandle, eVisibility);
      }

      public virtual bool ISteamRemoteStorage_UpdatePublishedFileTags(
        ulong updateHandle,
        ref SteamParamStringArray_t pTags)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamRemoteStorage _ptr is null!");
        SteamParamStringArray_t.PackSmall pTags1 = new SteamParamStringArray_t.PackSmall();
        bool flag = Platform.Mac.Native.SteamAPI_ISteamRemoteStorage_UpdatePublishedFileTags(this._ptr, updateHandle, ref pTags1);
        pTags = (SteamParamStringArray_t) pTags1;
        return flag;
      }

      public virtual SteamAPICall_t ISteamRemoteStorage_CommitPublishedFileUpdate(ulong updateHandle)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamRemoteStorage_CommitPublishedFileUpdate(this._ptr, updateHandle) : throw new Exception("ISteamRemoteStorage _ptr is null!");
      }

      public virtual SteamAPICall_t ISteamRemoteStorage_GetPublishedFileDetails(
        ulong unPublishedFileId,
        uint unMaxSecondsOld)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamRemoteStorage _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamRemoteStorage_GetPublishedFileDetails(this._ptr, unPublishedFileId, unMaxSecondsOld);
      }

      public virtual SteamAPICall_t ISteamRemoteStorage_DeletePublishedFile(ulong unPublishedFileId)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamRemoteStorage_DeletePublishedFile(this._ptr, unPublishedFileId) : throw new Exception("ISteamRemoteStorage _ptr is null!");
      }

      public virtual SteamAPICall_t ISteamRemoteStorage_EnumerateUserPublishedFiles(
        uint unStartIndex)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamRemoteStorage_EnumerateUserPublishedFiles(this._ptr, unStartIndex) : throw new Exception("ISteamRemoteStorage _ptr is null!");
      }

      public virtual SteamAPICall_t ISteamRemoteStorage_SubscribePublishedFile(
        ulong unPublishedFileId)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamRemoteStorage_SubscribePublishedFile(this._ptr, unPublishedFileId) : throw new Exception("ISteamRemoteStorage _ptr is null!");
      }

      public virtual SteamAPICall_t ISteamRemoteStorage_EnumerateUserSubscribedFiles(
        uint unStartIndex)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamRemoteStorage_EnumerateUserSubscribedFiles(this._ptr, unStartIndex) : throw new Exception("ISteamRemoteStorage _ptr is null!");
      }

      public virtual SteamAPICall_t ISteamRemoteStorage_UnsubscribePublishedFile(
        ulong unPublishedFileId)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamRemoteStorage_UnsubscribePublishedFile(this._ptr, unPublishedFileId) : throw new Exception("ISteamRemoteStorage _ptr is null!");
      }

      public virtual bool ISteamRemoteStorage_UpdatePublishedFileSetChangeDescription(
        ulong updateHandle,
        string pchChangeDescription)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamRemoteStorage _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamRemoteStorage_UpdatePublishedFileSetChangeDescription(this._ptr, updateHandle, pchChangeDescription);
      }

      public virtual SteamAPICall_t ISteamRemoteStorage_GetPublishedItemVoteDetails(
        ulong unPublishedFileId)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamRemoteStorage_GetPublishedItemVoteDetails(this._ptr, unPublishedFileId) : throw new Exception("ISteamRemoteStorage _ptr is null!");
      }

      public virtual SteamAPICall_t ISteamRemoteStorage_UpdateUserPublishedItemVote(
        ulong unPublishedFileId,
        [MarshalAs(UnmanagedType.U1)] bool bVoteUp)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamRemoteStorage _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamRemoteStorage_UpdateUserPublishedItemVote(this._ptr, unPublishedFileId, bVoteUp);
      }

      public virtual SteamAPICall_t ISteamRemoteStorage_GetUserPublishedItemVoteDetails(
        ulong unPublishedFileId)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamRemoteStorage_GetUserPublishedItemVoteDetails(this._ptr, unPublishedFileId) : throw new Exception("ISteamRemoteStorage _ptr is null!");
      }

      public virtual SteamAPICall_t ISteamRemoteStorage_EnumerateUserSharedWorkshopFiles(
        ulong steamId,
        uint unStartIndex,
        ref SteamParamStringArray_t pRequiredTags,
        ref SteamParamStringArray_t pExcludedTags)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamRemoteStorage _ptr is null!");
        SteamParamStringArray_t.PackSmall pRequiredTags1 = new SteamParamStringArray_t.PackSmall();
        SteamParamStringArray_t.PackSmall pExcludedTags1 = new SteamParamStringArray_t.PackSmall();
        SteamAPICall_t steamApiCallT = Platform.Mac.Native.SteamAPI_ISteamRemoteStorage_EnumerateUserSharedWorkshopFiles(this._ptr, steamId, unStartIndex, ref pRequiredTags1, ref pExcludedTags1);
        pRequiredTags = (SteamParamStringArray_t) pRequiredTags1;
        pExcludedTags = (SteamParamStringArray_t) pExcludedTags1;
        return steamApiCallT;
      }

      public virtual SteamAPICall_t ISteamRemoteStorage_PublishVideo(
        WorkshopVideoProvider eVideoProvider,
        string pchVideoAccount,
        string pchVideoIdentifier,
        string pchPreviewFile,
        uint nConsumerAppId,
        string pchTitle,
        string pchDescription,
        RemoteStoragePublishedFileVisibility eVisibility,
        ref SteamParamStringArray_t pTags)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamRemoteStorage _ptr is null!");
        SteamParamStringArray_t.PackSmall pTags1 = new SteamParamStringArray_t.PackSmall();
        SteamAPICall_t steamApiCallT = Platform.Mac.Native.SteamAPI_ISteamRemoteStorage_PublishVideo(this._ptr, eVideoProvider, pchVideoAccount, pchVideoIdentifier, pchPreviewFile, nConsumerAppId, pchTitle, pchDescription, eVisibility, ref pTags1);
        pTags = (SteamParamStringArray_t) pTags1;
        return steamApiCallT;
      }

      public virtual SteamAPICall_t ISteamRemoteStorage_SetUserPublishedFileAction(
        ulong unPublishedFileId,
        WorkshopFileAction eAction)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamRemoteStorage _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamRemoteStorage_SetUserPublishedFileAction(this._ptr, unPublishedFileId, eAction);
      }

      public virtual SteamAPICall_t ISteamRemoteStorage_EnumeratePublishedFilesByUserAction(
        WorkshopFileAction eAction,
        uint unStartIndex)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamRemoteStorage _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamRemoteStorage_EnumeratePublishedFilesByUserAction(this._ptr, eAction, unStartIndex);
      }

      public virtual SteamAPICall_t ISteamRemoteStorage_EnumeratePublishedWorkshopFiles(
        WorkshopEnumerationType eEnumerationType,
        uint unStartIndex,
        uint unCount,
        uint unDays,
        ref SteamParamStringArray_t pTags,
        ref SteamParamStringArray_t pUserTags)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamRemoteStorage _ptr is null!");
        SteamParamStringArray_t.PackSmall pTags1 = new SteamParamStringArray_t.PackSmall();
        SteamParamStringArray_t.PackSmall pUserTags1 = new SteamParamStringArray_t.PackSmall();
        SteamAPICall_t steamApiCallT = Platform.Mac.Native.SteamAPI_ISteamRemoteStorage_EnumeratePublishedWorkshopFiles(this._ptr, eEnumerationType, unStartIndex, unCount, unDays, ref pTags1, ref pUserTags1);
        pTags = (SteamParamStringArray_t) pTags1;
        pUserTags = (SteamParamStringArray_t) pUserTags1;
        return steamApiCallT;
      }

      public virtual SteamAPICall_t ISteamRemoteStorage_UGCDownloadToLocation(
        ulong hContent,
        string pchLocation,
        uint unPriority)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamRemoteStorage _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamRemoteStorage_UGCDownloadToLocation(this._ptr, hContent, pchLocation, unPriority);
      }

      public virtual bool ISteamUserStats_RequestCurrentStats()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamUserStats_RequestCurrentStats(this._ptr) : throw new Exception("ISteamUserStats _ptr is null!");
      }

      public virtual bool ISteamUserStats_GetStat(string pchName, out int pData)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamUserStats_GetStat(this._ptr, pchName, out pData) : throw new Exception("ISteamUserStats _ptr is null!");
      }

      public virtual bool ISteamUserStats_GetStat0(string pchName, out float pData)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamUserStats_GetStat0(this._ptr, pchName, out pData) : throw new Exception("ISteamUserStats _ptr is null!");
      }

      public virtual bool ISteamUserStats_SetStat(string pchName, int nData)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUserStats _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamUserStats_SetStat(this._ptr, pchName, nData);
      }

      public virtual bool ISteamUserStats_SetStat0(string pchName, float fData)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUserStats _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamUserStats_SetStat0(this._ptr, pchName, fData);
      }

      public virtual bool ISteamUserStats_UpdateAvgRateStat(
        string pchName,
        float flCountThisSession,
        double dSessionLength)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUserStats _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamUserStats_UpdateAvgRateStat(this._ptr, pchName, flCountThisSession, dSessionLength);
      }

      public virtual bool ISteamUserStats_GetAchievement(string pchName, [MarshalAs(UnmanagedType.U1)] ref bool pbAchieved)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUserStats _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamUserStats_GetAchievement(this._ptr, pchName, ref pbAchieved);
      }

      public virtual bool ISteamUserStats_SetAchievement(string pchName)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamUserStats_SetAchievement(this._ptr, pchName) : throw new Exception("ISteamUserStats _ptr is null!");
      }

      public virtual bool ISteamUserStats_ClearAchievement(string pchName)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamUserStats_ClearAchievement(this._ptr, pchName) : throw new Exception("ISteamUserStats _ptr is null!");
      }

      public virtual bool ISteamUserStats_GetAchievementAndUnlockTime(
        string pchName,
        [MarshalAs(UnmanagedType.U1)] ref bool pbAchieved,
        out uint punUnlockTime)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUserStats _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamUserStats_GetAchievementAndUnlockTime(this._ptr, pchName, ref pbAchieved, out punUnlockTime);
      }

      public virtual bool ISteamUserStats_StoreStats()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamUserStats_StoreStats(this._ptr) : throw new Exception("ISteamUserStats _ptr is null!");
      }

      public virtual int ISteamUserStats_GetAchievementIcon(string pchName)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamUserStats_GetAchievementIcon(this._ptr, pchName) : throw new Exception("ISteamUserStats _ptr is null!");
      }

      public virtual IntPtr ISteamUserStats_GetAchievementDisplayAttribute(
        string pchName,
        string pchKey)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUserStats _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamUserStats_GetAchievementDisplayAttribute(this._ptr, pchName, pchKey);
      }

      public virtual bool ISteamUserStats_IndicateAchievementProgress(
        string pchName,
        uint nCurProgress,
        uint nMaxProgress)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUserStats _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamUserStats_IndicateAchievementProgress(this._ptr, pchName, nCurProgress, nMaxProgress);
      }

      public virtual uint ISteamUserStats_GetNumAchievements()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamUserStats_GetNumAchievements(this._ptr) : throw new Exception("ISteamUserStats _ptr is null!");
      }

      public virtual IntPtr ISteamUserStats_GetAchievementName(uint iAchievement)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamUserStats_GetAchievementName(this._ptr, iAchievement) : throw new Exception("ISteamUserStats _ptr is null!");
      }

      public virtual SteamAPICall_t ISteamUserStats_RequestUserStats(ulong steamIDUser)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamUserStats_RequestUserStats(this._ptr, steamIDUser) : throw new Exception("ISteamUserStats _ptr is null!");
      }

      public virtual bool ISteamUserStats_GetUserStat(
        ulong steamIDUser,
        string pchName,
        out int pData)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUserStats _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamUserStats_GetUserStat(this._ptr, steamIDUser, pchName, out pData);
      }

      public virtual bool ISteamUserStats_GetUserStat0(
        ulong steamIDUser,
        string pchName,
        out float pData)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUserStats _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamUserStats_GetUserStat0(this._ptr, steamIDUser, pchName, out pData);
      }

      public virtual bool ISteamUserStats_GetUserAchievement(
        ulong steamIDUser,
        string pchName,
        [MarshalAs(UnmanagedType.U1)] ref bool pbAchieved)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUserStats _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamUserStats_GetUserAchievement(this._ptr, steamIDUser, pchName, ref pbAchieved);
      }

      public virtual bool ISteamUserStats_GetUserAchievementAndUnlockTime(
        ulong steamIDUser,
        string pchName,
        [MarshalAs(UnmanagedType.U1)] ref bool pbAchieved,
        out uint punUnlockTime)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUserStats _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamUserStats_GetUserAchievementAndUnlockTime(this._ptr, steamIDUser, pchName, ref pbAchieved, out punUnlockTime);
      }

      public virtual bool ISteamUserStats_ResetAllStats([MarshalAs(UnmanagedType.U1)] bool bAchievementsToo)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamUserStats_ResetAllStats(this._ptr, bAchievementsToo) : throw new Exception("ISteamUserStats _ptr is null!");
      }

      public virtual SteamAPICall_t ISteamUserStats_FindOrCreateLeaderboard(
        string pchLeaderboardName,
        LeaderboardSortMethod eLeaderboardSortMethod,
        LeaderboardDisplayType eLeaderboardDisplayType)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUserStats _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamUserStats_FindOrCreateLeaderboard(this._ptr, pchLeaderboardName, eLeaderboardSortMethod, eLeaderboardDisplayType);
      }

      public virtual SteamAPICall_t ISteamUserStats_FindLeaderboard(string pchLeaderboardName)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamUserStats_FindLeaderboard(this._ptr, pchLeaderboardName) : throw new Exception("ISteamUserStats _ptr is null!");
      }

      public virtual IntPtr ISteamUserStats_GetLeaderboardName(ulong hSteamLeaderboard)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamUserStats_GetLeaderboardName(this._ptr, hSteamLeaderboard) : throw new Exception("ISteamUserStats _ptr is null!");
      }

      public virtual int ISteamUserStats_GetLeaderboardEntryCount(ulong hSteamLeaderboard)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamUserStats_GetLeaderboardEntryCount(this._ptr, hSteamLeaderboard) : throw new Exception("ISteamUserStats _ptr is null!");
      }

      public virtual LeaderboardSortMethod ISteamUserStats_GetLeaderboardSortMethod(
        ulong hSteamLeaderboard)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamUserStats_GetLeaderboardSortMethod(this._ptr, hSteamLeaderboard) : throw new Exception("ISteamUserStats _ptr is null!");
      }

      public virtual LeaderboardDisplayType ISteamUserStats_GetLeaderboardDisplayType(
        ulong hSteamLeaderboard)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamUserStats_GetLeaderboardDisplayType(this._ptr, hSteamLeaderboard) : throw new Exception("ISteamUserStats _ptr is null!");
      }

      public virtual SteamAPICall_t ISteamUserStats_DownloadLeaderboardEntries(
        ulong hSteamLeaderboard,
        LeaderboardDataRequest eLeaderboardDataRequest,
        int nRangeStart,
        int nRangeEnd)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUserStats _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamUserStats_DownloadLeaderboardEntries(this._ptr, hSteamLeaderboard, eLeaderboardDataRequest, nRangeStart, nRangeEnd);
      }

      public virtual SteamAPICall_t ISteamUserStats_DownloadLeaderboardEntriesForUsers(
        ulong hSteamLeaderboard,
        IntPtr prgUsers,
        int cUsers)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUserStats _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamUserStats_DownloadLeaderboardEntriesForUsers(this._ptr, hSteamLeaderboard, prgUsers, cUsers);
      }

      public virtual bool ISteamUserStats_GetDownloadedLeaderboardEntry(
        ulong hSteamLeaderboardEntries,
        int index,
        ref LeaderboardEntry_t pLeaderboardEntry,
        IntPtr pDetails,
        int cDetailsMax)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUserStats _ptr is null!");
        LeaderboardEntry_t.PackSmall pLeaderboardEntry1 = new LeaderboardEntry_t.PackSmall();
        bool leaderboardEntry = Platform.Mac.Native.SteamAPI_ISteamUserStats_GetDownloadedLeaderboardEntry(this._ptr, hSteamLeaderboardEntries, index, ref pLeaderboardEntry1, pDetails, cDetailsMax);
        pLeaderboardEntry = (LeaderboardEntry_t) pLeaderboardEntry1;
        return leaderboardEntry;
      }

      public virtual SteamAPICall_t ISteamUserStats_UploadLeaderboardScore(
        ulong hSteamLeaderboard,
        LeaderboardUploadScoreMethod eLeaderboardUploadScoreMethod,
        int nScore,
        int[] pScoreDetails,
        int cScoreDetailsCount)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUserStats _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamUserStats_UploadLeaderboardScore(this._ptr, hSteamLeaderboard, eLeaderboardUploadScoreMethod, nScore, pScoreDetails, cScoreDetailsCount);
      }

      public virtual SteamAPICall_t ISteamUserStats_AttachLeaderboardUGC(
        ulong hSteamLeaderboard,
        ulong hUGC)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUserStats _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamUserStats_AttachLeaderboardUGC(this._ptr, hSteamLeaderboard, hUGC);
      }

      public virtual SteamAPICall_t ISteamUserStats_GetNumberOfCurrentPlayers()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamUserStats_GetNumberOfCurrentPlayers(this._ptr) : throw new Exception("ISteamUserStats _ptr is null!");
      }

      public virtual SteamAPICall_t ISteamUserStats_RequestGlobalAchievementPercentages()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamUserStats_RequestGlobalAchievementPercentages(this._ptr) : throw new Exception("ISteamUserStats _ptr is null!");
      }

      public virtual int ISteamUserStats_GetMostAchievedAchievementInfo(
        StringBuilder pchName,
        uint unNameBufLen,
        out float pflPercent,
        [MarshalAs(UnmanagedType.U1)] ref bool pbAchieved)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUserStats _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamUserStats_GetMostAchievedAchievementInfo(this._ptr, pchName, unNameBufLen, out pflPercent, ref pbAchieved);
      }

      public virtual int ISteamUserStats_GetNextMostAchievedAchievementInfo(
        int iIteratorPrevious,
        StringBuilder pchName,
        uint unNameBufLen,
        out float pflPercent,
        [MarshalAs(UnmanagedType.U1)] ref bool pbAchieved)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUserStats _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamUserStats_GetNextMostAchievedAchievementInfo(this._ptr, iIteratorPrevious, pchName, unNameBufLen, out pflPercent, ref pbAchieved);
      }

      public virtual bool ISteamUserStats_GetAchievementAchievedPercent(
        string pchName,
        out float pflPercent)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamUserStats_GetAchievementAchievedPercent(this._ptr, pchName, out pflPercent) : throw new Exception("ISteamUserStats _ptr is null!");
      }

      public virtual SteamAPICall_t ISteamUserStats_RequestGlobalStats(int nHistoryDays)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamUserStats_RequestGlobalStats(this._ptr, nHistoryDays) : throw new Exception("ISteamUserStats _ptr is null!");
      }

      public virtual bool ISteamUserStats_GetGlobalStat(string pchStatName, out long pData)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamUserStats_GetGlobalStat(this._ptr, pchStatName, out pData) : throw new Exception("ISteamUserStats _ptr is null!");
      }

      public virtual bool ISteamUserStats_GetGlobalStat0(string pchStatName, out double pData)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamUserStats_GetGlobalStat0(this._ptr, pchStatName, out pData) : throw new Exception("ISteamUserStats _ptr is null!");
      }

      public virtual int ISteamUserStats_GetGlobalStatHistory(
        string pchStatName,
        out long pData,
        uint cubData)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUserStats _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamUserStats_GetGlobalStatHistory(this._ptr, pchStatName, out pData, cubData);
      }

      public virtual int ISteamUserStats_GetGlobalStatHistory0(
        string pchStatName,
        out double pData,
        uint cubData)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUserStats _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamUserStats_GetGlobalStatHistory0(this._ptr, pchStatName, out pData, cubData);
      }

      public virtual bool ISteamApps_BIsSubscribed()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamApps_BIsSubscribed(this._ptr) : throw new Exception("ISteamApps _ptr is null!");
      }

      public virtual bool ISteamApps_BIsLowViolence()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamApps_BIsLowViolence(this._ptr) : throw new Exception("ISteamApps _ptr is null!");
      }

      public virtual bool ISteamApps_BIsCybercafe()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamApps_BIsCybercafe(this._ptr) : throw new Exception("ISteamApps _ptr is null!");
      }

      public virtual bool ISteamApps_BIsVACBanned()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamApps_BIsVACBanned(this._ptr) : throw new Exception("ISteamApps _ptr is null!");
      }

      public virtual IntPtr ISteamApps_GetCurrentGameLanguage()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamApps_GetCurrentGameLanguage(this._ptr) : throw new Exception("ISteamApps _ptr is null!");
      }

      public virtual IntPtr ISteamApps_GetAvailableGameLanguages()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamApps_GetAvailableGameLanguages(this._ptr) : throw new Exception("ISteamApps _ptr is null!");
      }

      public virtual bool ISteamApps_BIsSubscribedApp(uint appID)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamApps_BIsSubscribedApp(this._ptr, appID) : throw new Exception("ISteamApps _ptr is null!");
      }

      public virtual bool ISteamApps_BIsDlcInstalled(uint appID)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamApps_BIsDlcInstalled(this._ptr, appID) : throw new Exception("ISteamApps _ptr is null!");
      }

      public virtual uint ISteamApps_GetEarliestPurchaseUnixTime(uint nAppID)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamApps_GetEarliestPurchaseUnixTime(this._ptr, nAppID) : throw new Exception("ISteamApps _ptr is null!");
      }

      public virtual bool ISteamApps_BIsSubscribedFromFreeWeekend()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamApps_BIsSubscribedFromFreeWeekend(this._ptr) : throw new Exception("ISteamApps _ptr is null!");
      }

      public virtual int ISteamApps_GetDLCCount()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamApps_GetDLCCount(this._ptr) : throw new Exception("ISteamApps _ptr is null!");
      }

      public virtual bool ISteamApps_BGetDLCDataByIndex(
        int iDLC,
        ref uint pAppID,
        [MarshalAs(UnmanagedType.U1)] ref bool pbAvailable,
        StringBuilder pchName,
        int cchNameBufferSize)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamApps _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamApps_BGetDLCDataByIndex(this._ptr, iDLC, ref pAppID, ref pbAvailable, pchName, cchNameBufferSize);
      }

      public virtual void ISteamApps_InstallDLC(uint nAppID)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamApps _ptr is null!");
        Platform.Mac.Native.SteamAPI_ISteamApps_InstallDLC(this._ptr, nAppID);
      }

      public virtual void ISteamApps_UninstallDLC(uint nAppID)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamApps _ptr is null!");
        Platform.Mac.Native.SteamAPI_ISteamApps_UninstallDLC(this._ptr, nAppID);
      }

      public virtual void ISteamApps_RequestAppProofOfPurchaseKey(uint nAppID)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamApps _ptr is null!");
        Platform.Mac.Native.SteamAPI_ISteamApps_RequestAppProofOfPurchaseKey(this._ptr, nAppID);
      }

      public virtual bool ISteamApps_GetCurrentBetaName(
        StringBuilder pchName,
        int cchNameBufferSize)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamApps _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamApps_GetCurrentBetaName(this._ptr, pchName, cchNameBufferSize);
      }

      public virtual bool ISteamApps_MarkContentCorrupt([MarshalAs(UnmanagedType.U1)] bool bMissingFilesOnly)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamApps_MarkContentCorrupt(this._ptr, bMissingFilesOnly) : throw new Exception("ISteamApps _ptr is null!");
      }

      public virtual uint ISteamApps_GetInstalledDepots(
        uint appID,
        IntPtr pvecDepots,
        uint cMaxDepots)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamApps _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamApps_GetInstalledDepots(this._ptr, appID, pvecDepots, cMaxDepots);
      }

      public virtual uint ISteamApps_GetAppInstallDir(
        uint appID,
        StringBuilder pchFolder,
        uint cchFolderBufferSize)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamApps _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamApps_GetAppInstallDir(this._ptr, appID, pchFolder, cchFolderBufferSize);
      }

      public virtual bool ISteamApps_BIsAppInstalled(uint appID)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamApps_BIsAppInstalled(this._ptr, appID) : throw new Exception("ISteamApps _ptr is null!");
      }

      public virtual CSteamID ISteamApps_GetAppOwner()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamApps_GetAppOwner(this._ptr) : throw new Exception("ISteamApps _ptr is null!");
      }

      public virtual IntPtr ISteamApps_GetLaunchQueryParam(string pchKey)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamApps_GetLaunchQueryParam(this._ptr, pchKey) : throw new Exception("ISteamApps _ptr is null!");
      }

      public virtual bool ISteamApps_GetDlcDownloadProgress(
        uint nAppID,
        out ulong punBytesDownloaded,
        out ulong punBytesTotal)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamApps_GetDlcDownloadProgress(this._ptr, nAppID, out punBytesDownloaded, out punBytesTotal) : throw new Exception("ISteamApps _ptr is null!");
      }

      public virtual int ISteamApps_GetAppBuildId()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamApps_GetAppBuildId(this._ptr) : throw new Exception("ISteamApps _ptr is null!");
      }

      public virtual void ISteamApps_RequestAllProofOfPurchaseKeys()
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamApps _ptr is null!");
        Platform.Mac.Native.SteamAPI_ISteamApps_RequestAllProofOfPurchaseKeys(this._ptr);
      }

      public virtual SteamAPICall_t ISteamApps_GetFileDetails(string pszFileName)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamApps_GetFileDetails(this._ptr, pszFileName) : throw new Exception("ISteamApps _ptr is null!");
      }

      public virtual bool ISteamNetworking_SendP2PPacket(
        ulong steamIDRemote,
        IntPtr pubData,
        uint cubData,
        P2PSend eP2PSendType,
        int nChannel)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamNetworking _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamNetworking_SendP2PPacket(this._ptr, steamIDRemote, pubData, cubData, eP2PSendType, nChannel);
      }

      public virtual bool ISteamNetworking_IsP2PPacketAvailable(out uint pcubMsgSize, int nChannel)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamNetworking_IsP2PPacketAvailable(this._ptr, out pcubMsgSize, nChannel) : throw new Exception("ISteamNetworking _ptr is null!");
      }

      public virtual bool ISteamNetworking_ReadP2PPacket(
        IntPtr pubDest,
        uint cubDest,
        out uint pcubMsgSize,
        out ulong psteamIDRemote,
        int nChannel)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamNetworking _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamNetworking_ReadP2PPacket(this._ptr, pubDest, cubDest, out pcubMsgSize, out psteamIDRemote, nChannel);
      }

      public virtual bool ISteamNetworking_AcceptP2PSessionWithUser(ulong steamIDRemote)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamNetworking_AcceptP2PSessionWithUser(this._ptr, steamIDRemote) : throw new Exception("ISteamNetworking _ptr is null!");
      }

      public virtual bool ISteamNetworking_CloseP2PSessionWithUser(ulong steamIDRemote)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamNetworking_CloseP2PSessionWithUser(this._ptr, steamIDRemote) : throw new Exception("ISteamNetworking _ptr is null!");
      }

      public virtual bool ISteamNetworking_CloseP2PChannelWithUser(
        ulong steamIDRemote,
        int nChannel)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamNetworking _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamNetworking_CloseP2PChannelWithUser(this._ptr, steamIDRemote, nChannel);
      }

      public virtual bool ISteamNetworking_GetP2PSessionState(
        ulong steamIDRemote,
        ref P2PSessionState_t pConnectionState)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamNetworking _ptr is null!");
        P2PSessionState_t.PackSmall pConnectionState1 = new P2PSessionState_t.PackSmall();
        bool p2PsessionState = Platform.Mac.Native.SteamAPI_ISteamNetworking_GetP2PSessionState(this._ptr, steamIDRemote, ref pConnectionState1);
        pConnectionState = (P2PSessionState_t) pConnectionState1;
        return p2PsessionState;
      }

      public virtual bool ISteamNetworking_AllowP2PPacketRelay([MarshalAs(UnmanagedType.U1)] bool bAllow)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamNetworking_AllowP2PPacketRelay(this._ptr, bAllow) : throw new Exception("ISteamNetworking _ptr is null!");
      }

      public virtual SNetListenSocket_t ISteamNetworking_CreateListenSocket(
        int nVirtualP2PPort,
        uint nIP,
        ushort nPort,
        [MarshalAs(UnmanagedType.U1)] bool bAllowUseOfPacketRelay)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamNetworking _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamNetworking_CreateListenSocket(this._ptr, nVirtualP2PPort, nIP, nPort, bAllowUseOfPacketRelay);
      }

      public virtual SNetSocket_t ISteamNetworking_CreateP2PConnectionSocket(
        ulong steamIDTarget,
        int nVirtualPort,
        int nTimeoutSec,
        [MarshalAs(UnmanagedType.U1)] bool bAllowUseOfPacketRelay)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamNetworking _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamNetworking_CreateP2PConnectionSocket(this._ptr, steamIDTarget, nVirtualPort, nTimeoutSec, bAllowUseOfPacketRelay);
      }

      public virtual SNetSocket_t ISteamNetworking_CreateConnectionSocket(
        uint nIP,
        ushort nPort,
        int nTimeoutSec)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamNetworking _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamNetworking_CreateConnectionSocket(this._ptr, nIP, nPort, nTimeoutSec);
      }

      public virtual bool ISteamNetworking_DestroySocket(uint hSocket, [MarshalAs(UnmanagedType.U1)] bool bNotifyRemoteEnd)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamNetworking _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamNetworking_DestroySocket(this._ptr, hSocket, bNotifyRemoteEnd);
      }

      public virtual bool ISteamNetworking_DestroyListenSocket(uint hSocket, [MarshalAs(UnmanagedType.U1)] bool bNotifyRemoteEnd)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamNetworking _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamNetworking_DestroyListenSocket(this._ptr, hSocket, bNotifyRemoteEnd);
      }

      public virtual bool ISteamNetworking_SendDataOnSocket(
        uint hSocket,
        IntPtr pubData,
        uint cubData,
        [MarshalAs(UnmanagedType.U1)] bool bReliable)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamNetworking _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamNetworking_SendDataOnSocket(this._ptr, hSocket, pubData, cubData, bReliable);
      }

      public virtual bool ISteamNetworking_IsDataAvailableOnSocket(
        uint hSocket,
        out uint pcubMsgSize)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamNetworking_IsDataAvailableOnSocket(this._ptr, hSocket, out pcubMsgSize) : throw new Exception("ISteamNetworking _ptr is null!");
      }

      public virtual bool ISteamNetworking_RetrieveDataFromSocket(
        uint hSocket,
        IntPtr pubDest,
        uint cubDest,
        out uint pcubMsgSize)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamNetworking _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamNetworking_RetrieveDataFromSocket(this._ptr, hSocket, pubDest, cubDest, out pcubMsgSize);
      }

      public virtual bool ISteamNetworking_IsDataAvailable(
        uint hListenSocket,
        out uint pcubMsgSize,
        ref uint phSocket)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamNetworking _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamNetworking_IsDataAvailable(this._ptr, hListenSocket, out pcubMsgSize, ref phSocket);
      }

      public virtual bool ISteamNetworking_RetrieveData(
        uint hListenSocket,
        IntPtr pubDest,
        uint cubDest,
        out uint pcubMsgSize,
        ref uint phSocket)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamNetworking _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamNetworking_RetrieveData(this._ptr, hListenSocket, pubDest, cubDest, out pcubMsgSize, ref phSocket);
      }

      public virtual bool ISteamNetworking_GetSocketInfo(
        uint hSocket,
        out ulong pSteamIDRemote,
        IntPtr peSocketStatus,
        out uint punIPRemote,
        out ushort punPortRemote)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamNetworking _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamNetworking_GetSocketInfo(this._ptr, hSocket, out pSteamIDRemote, peSocketStatus, out punIPRemote, out punPortRemote);
      }

      public virtual bool ISteamNetworking_GetListenSocketInfo(
        uint hListenSocket,
        out uint pnIP,
        out ushort pnPort)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamNetworking_GetListenSocketInfo(this._ptr, hListenSocket, out pnIP, out pnPort) : throw new Exception("ISteamNetworking _ptr is null!");
      }

      public virtual SNetSocketConnectionType ISteamNetworking_GetSocketConnectionType(uint hSocket)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamNetworking_GetSocketConnectionType(this._ptr, hSocket) : throw new Exception("ISteamNetworking _ptr is null!");
      }

      public virtual int ISteamNetworking_GetMaxPacketSize(uint hSocket)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamNetworking_GetMaxPacketSize(this._ptr, hSocket) : throw new Exception("ISteamNetworking _ptr is null!");
      }

      public virtual ScreenshotHandle ISteamScreenshots_WriteScreenshot(
        IntPtr pubRGB,
        uint cubRGB,
        int nWidth,
        int nHeight)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamScreenshots _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamScreenshots_WriteScreenshot(this._ptr, pubRGB, cubRGB, nWidth, nHeight);
      }

      public virtual ScreenshotHandle ISteamScreenshots_AddScreenshotToLibrary(
        string pchFilename,
        string pchThumbnailFilename,
        int nWidth,
        int nHeight)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamScreenshots _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamScreenshots_AddScreenshotToLibrary(this._ptr, pchFilename, pchThumbnailFilename, nWidth, nHeight);
      }

      public virtual void ISteamScreenshots_TriggerScreenshot()
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamScreenshots _ptr is null!");
        Platform.Mac.Native.SteamAPI_ISteamScreenshots_TriggerScreenshot(this._ptr);
      }

      public virtual void ISteamScreenshots_HookScreenshots([MarshalAs(UnmanagedType.U1)] bool bHook)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamScreenshots _ptr is null!");
        Platform.Mac.Native.SteamAPI_ISteamScreenshots_HookScreenshots(this._ptr, bHook);
      }

      public virtual bool ISteamScreenshots_SetLocation(uint hScreenshot, string pchLocation)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamScreenshots _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamScreenshots_SetLocation(this._ptr, hScreenshot, pchLocation);
      }

      public virtual bool ISteamScreenshots_TagUser(uint hScreenshot, ulong steamID)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamScreenshots _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamScreenshots_TagUser(this._ptr, hScreenshot, steamID);
      }

      public virtual bool ISteamScreenshots_TagPublishedFile(
        uint hScreenshot,
        ulong unPublishedFileID)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamScreenshots _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamScreenshots_TagPublishedFile(this._ptr, hScreenshot, unPublishedFileID);
      }

      public virtual bool ISteamScreenshots_IsScreenshotsHooked()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamScreenshots_IsScreenshotsHooked(this._ptr) : throw new Exception("ISteamScreenshots _ptr is null!");
      }

      public virtual ScreenshotHandle ISteamScreenshots_AddVRScreenshotToLibrary(
        VRScreenshotType eType,
        string pchFilename,
        string pchVRFilename)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamScreenshots _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamScreenshots_AddVRScreenshotToLibrary(this._ptr, eType, pchFilename, pchVRFilename);
      }

      public virtual bool ISteamMusic_BIsEnabled()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamMusic_BIsEnabled(this._ptr) : throw new Exception("ISteamMusic _ptr is null!");
      }

      public virtual bool ISteamMusic_BIsPlaying()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamMusic_BIsPlaying(this._ptr) : throw new Exception("ISteamMusic _ptr is null!");
      }

      public virtual AudioPlayback_Status ISteamMusic_GetPlaybackStatus()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamMusic_GetPlaybackStatus(this._ptr) : throw new Exception("ISteamMusic _ptr is null!");
      }

      public virtual void ISteamMusic_Play()
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMusic _ptr is null!");
        Platform.Mac.Native.SteamAPI_ISteamMusic_Play(this._ptr);
      }

      public virtual void ISteamMusic_Pause()
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMusic _ptr is null!");
        Platform.Mac.Native.SteamAPI_ISteamMusic_Pause(this._ptr);
      }

      public virtual void ISteamMusic_PlayPrevious()
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMusic _ptr is null!");
        Platform.Mac.Native.SteamAPI_ISteamMusic_PlayPrevious(this._ptr);
      }

      public virtual void ISteamMusic_PlayNext()
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMusic _ptr is null!");
        Platform.Mac.Native.SteamAPI_ISteamMusic_PlayNext(this._ptr);
      }

      public virtual void ISteamMusic_SetVolume(float flVolume)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMusic _ptr is null!");
        Platform.Mac.Native.SteamAPI_ISteamMusic_SetVolume(this._ptr, flVolume);
      }

      public virtual float ISteamMusic_GetVolume()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamMusic_GetVolume(this._ptr) : throw new Exception("ISteamMusic _ptr is null!");
      }

      public virtual bool ISteamMusicRemote_RegisterSteamMusicRemote(string pchName)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamMusicRemote_RegisterSteamMusicRemote(this._ptr, pchName) : throw new Exception("ISteamMusicRemote _ptr is null!");
      }

      public virtual bool ISteamMusicRemote_DeregisterSteamMusicRemote()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamMusicRemote_DeregisterSteamMusicRemote(this._ptr) : throw new Exception("ISteamMusicRemote _ptr is null!");
      }

      public virtual bool ISteamMusicRemote_BIsCurrentMusicRemote()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamMusicRemote_BIsCurrentMusicRemote(this._ptr) : throw new Exception("ISteamMusicRemote _ptr is null!");
      }

      public virtual bool ISteamMusicRemote_BActivationSuccess([MarshalAs(UnmanagedType.U1)] bool bValue)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamMusicRemote_BActivationSuccess(this._ptr, bValue) : throw new Exception("ISteamMusicRemote _ptr is null!");
      }

      public virtual bool ISteamMusicRemote_SetDisplayName(string pchDisplayName)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamMusicRemote_SetDisplayName(this._ptr, pchDisplayName) : throw new Exception("ISteamMusicRemote _ptr is null!");
      }

      public virtual bool ISteamMusicRemote_SetPNGIcon_64x64(IntPtr pvBuffer, uint cbBufferLength)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMusicRemote _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamMusicRemote_SetPNGIcon_64x64(this._ptr, pvBuffer, cbBufferLength);
      }

      public virtual bool ISteamMusicRemote_EnablePlayPrevious([MarshalAs(UnmanagedType.U1)] bool bValue)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamMusicRemote_EnablePlayPrevious(this._ptr, bValue) : throw new Exception("ISteamMusicRemote _ptr is null!");
      }

      public virtual bool ISteamMusicRemote_EnablePlayNext([MarshalAs(UnmanagedType.U1)] bool bValue)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamMusicRemote_EnablePlayNext(this._ptr, bValue) : throw new Exception("ISteamMusicRemote _ptr is null!");
      }

      public virtual bool ISteamMusicRemote_EnableShuffled([MarshalAs(UnmanagedType.U1)] bool bValue)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamMusicRemote_EnableShuffled(this._ptr, bValue) : throw new Exception("ISteamMusicRemote _ptr is null!");
      }

      public virtual bool ISteamMusicRemote_EnableLooped([MarshalAs(UnmanagedType.U1)] bool bValue)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamMusicRemote_EnableLooped(this._ptr, bValue) : throw new Exception("ISteamMusicRemote _ptr is null!");
      }

      public virtual bool ISteamMusicRemote_EnableQueue([MarshalAs(UnmanagedType.U1)] bool bValue)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamMusicRemote_EnableQueue(this._ptr, bValue) : throw new Exception("ISteamMusicRemote _ptr is null!");
      }

      public virtual bool ISteamMusicRemote_EnablePlaylists([MarshalAs(UnmanagedType.U1)] bool bValue)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamMusicRemote_EnablePlaylists(this._ptr, bValue) : throw new Exception("ISteamMusicRemote _ptr is null!");
      }

      public virtual bool ISteamMusicRemote_UpdatePlaybackStatus(AudioPlayback_Status nStatus)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamMusicRemote_UpdatePlaybackStatus(this._ptr, nStatus) : throw new Exception("ISteamMusicRemote _ptr is null!");
      }

      public virtual bool ISteamMusicRemote_UpdateShuffled([MarshalAs(UnmanagedType.U1)] bool bValue)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamMusicRemote_UpdateShuffled(this._ptr, bValue) : throw new Exception("ISteamMusicRemote _ptr is null!");
      }

      public virtual bool ISteamMusicRemote_UpdateLooped([MarshalAs(UnmanagedType.U1)] bool bValue)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamMusicRemote_UpdateLooped(this._ptr, bValue) : throw new Exception("ISteamMusicRemote _ptr is null!");
      }

      public virtual bool ISteamMusicRemote_UpdateVolume(float flValue)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamMusicRemote_UpdateVolume(this._ptr, flValue) : throw new Exception("ISteamMusicRemote _ptr is null!");
      }

      public virtual bool ISteamMusicRemote_CurrentEntryWillChange()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamMusicRemote_CurrentEntryWillChange(this._ptr) : throw new Exception("ISteamMusicRemote _ptr is null!");
      }

      public virtual bool ISteamMusicRemote_CurrentEntryIsAvailable([MarshalAs(UnmanagedType.U1)] bool bAvailable)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamMusicRemote_CurrentEntryIsAvailable(this._ptr, bAvailable) : throw new Exception("ISteamMusicRemote _ptr is null!");
      }

      public virtual bool ISteamMusicRemote_UpdateCurrentEntryText(string pchText)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamMusicRemote_UpdateCurrentEntryText(this._ptr, pchText) : throw new Exception("ISteamMusicRemote _ptr is null!");
      }

      public virtual bool ISteamMusicRemote_UpdateCurrentEntryElapsedSeconds(int nValue)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamMusicRemote_UpdateCurrentEntryElapsedSeconds(this._ptr, nValue) : throw new Exception("ISteamMusicRemote _ptr is null!");
      }

      public virtual bool ISteamMusicRemote_UpdateCurrentEntryCoverArt(
        IntPtr pvBuffer,
        uint cbBufferLength)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMusicRemote _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamMusicRemote_UpdateCurrentEntryCoverArt(this._ptr, pvBuffer, cbBufferLength);
      }

      public virtual bool ISteamMusicRemote_CurrentEntryDidChange()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamMusicRemote_CurrentEntryDidChange(this._ptr) : throw new Exception("ISteamMusicRemote _ptr is null!");
      }

      public virtual bool ISteamMusicRemote_QueueWillChange()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamMusicRemote_QueueWillChange(this._ptr) : throw new Exception("ISteamMusicRemote _ptr is null!");
      }

      public virtual bool ISteamMusicRemote_ResetQueueEntries()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamMusicRemote_ResetQueueEntries(this._ptr) : throw new Exception("ISteamMusicRemote _ptr is null!");
      }

      public virtual bool ISteamMusicRemote_SetQueueEntry(
        int nID,
        int nPosition,
        string pchEntryText)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMusicRemote _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamMusicRemote_SetQueueEntry(this._ptr, nID, nPosition, pchEntryText);
      }

      public virtual bool ISteamMusicRemote_SetCurrentQueueEntry(int nID)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamMusicRemote_SetCurrentQueueEntry(this._ptr, nID) : throw new Exception("ISteamMusicRemote _ptr is null!");
      }

      public virtual bool ISteamMusicRemote_QueueDidChange()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamMusicRemote_QueueDidChange(this._ptr) : throw new Exception("ISteamMusicRemote _ptr is null!");
      }

      public virtual bool ISteamMusicRemote_PlaylistWillChange()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamMusicRemote_PlaylistWillChange(this._ptr) : throw new Exception("ISteamMusicRemote _ptr is null!");
      }

      public virtual bool ISteamMusicRemote_ResetPlaylistEntries()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamMusicRemote_ResetPlaylistEntries(this._ptr) : throw new Exception("ISteamMusicRemote _ptr is null!");
      }

      public virtual bool ISteamMusicRemote_SetPlaylistEntry(
        int nID,
        int nPosition,
        string pchEntryText)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMusicRemote _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamMusicRemote_SetPlaylistEntry(this._ptr, nID, nPosition, pchEntryText);
      }

      public virtual bool ISteamMusicRemote_SetCurrentPlaylistEntry(int nID)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamMusicRemote_SetCurrentPlaylistEntry(this._ptr, nID) : throw new Exception("ISteamMusicRemote _ptr is null!");
      }

      public virtual bool ISteamMusicRemote_PlaylistDidChange()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamMusicRemote_PlaylistDidChange(this._ptr) : throw new Exception("ISteamMusicRemote _ptr is null!");
      }

      public virtual HTTPRequestHandle ISteamHTTP_CreateHTTPRequest(
        HTTPMethod eHTTPRequestMethod,
        string pchAbsoluteURL)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTTP _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamHTTP_CreateHTTPRequest(this._ptr, eHTTPRequestMethod, pchAbsoluteURL);
      }

      public virtual bool ISteamHTTP_SetHTTPRequestContextValue(uint hRequest, ulong ulContextValue)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTTP _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamHTTP_SetHTTPRequestContextValue(this._ptr, hRequest, ulContextValue);
      }

      public virtual bool ISteamHTTP_SetHTTPRequestNetworkActivityTimeout(
        uint hRequest,
        uint unTimeoutSeconds)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTTP _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamHTTP_SetHTTPRequestNetworkActivityTimeout(this._ptr, hRequest, unTimeoutSeconds);
      }

      public virtual bool ISteamHTTP_SetHTTPRequestHeaderValue(
        uint hRequest,
        string pchHeaderName,
        string pchHeaderValue)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTTP _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamHTTP_SetHTTPRequestHeaderValue(this._ptr, hRequest, pchHeaderName, pchHeaderValue);
      }

      public virtual bool ISteamHTTP_SetHTTPRequestGetOrPostParameter(
        uint hRequest,
        string pchParamName,
        string pchParamValue)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTTP _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamHTTP_SetHTTPRequestGetOrPostParameter(this._ptr, hRequest, pchParamName, pchParamValue);
      }

      public virtual bool ISteamHTTP_SendHTTPRequest(uint hRequest, ref ulong pCallHandle)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTTP _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamHTTP_SendHTTPRequest(this._ptr, hRequest, ref pCallHandle);
      }

      public virtual bool ISteamHTTP_SendHTTPRequestAndStreamResponse(
        uint hRequest,
        ref ulong pCallHandle)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTTP _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamHTTP_SendHTTPRequestAndStreamResponse(this._ptr, hRequest, ref pCallHandle);
      }

      public virtual bool ISteamHTTP_DeferHTTPRequest(uint hRequest)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamHTTP_DeferHTTPRequest(this._ptr, hRequest) : throw new Exception("ISteamHTTP _ptr is null!");
      }

      public virtual bool ISteamHTTP_PrioritizeHTTPRequest(uint hRequest)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamHTTP_PrioritizeHTTPRequest(this._ptr, hRequest) : throw new Exception("ISteamHTTP _ptr is null!");
      }

      public virtual bool ISteamHTTP_GetHTTPResponseHeaderSize(
        uint hRequest,
        string pchHeaderName,
        out uint unResponseHeaderSize)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTTP _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamHTTP_GetHTTPResponseHeaderSize(this._ptr, hRequest, pchHeaderName, out unResponseHeaderSize);
      }

      public virtual bool ISteamHTTP_GetHTTPResponseHeaderValue(
        uint hRequest,
        string pchHeaderName,
        out byte pHeaderValueBuffer,
        uint unBufferSize)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTTP _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamHTTP_GetHTTPResponseHeaderValue(this._ptr, hRequest, pchHeaderName, out pHeaderValueBuffer, unBufferSize);
      }

      public virtual bool ISteamHTTP_GetHTTPResponseBodySize(uint hRequest, out uint unBodySize)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamHTTP_GetHTTPResponseBodySize(this._ptr, hRequest, out unBodySize) : throw new Exception("ISteamHTTP _ptr is null!");
      }

      public virtual bool ISteamHTTP_GetHTTPResponseBodyData(
        uint hRequest,
        out byte pBodyDataBuffer,
        uint unBufferSize)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTTP _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamHTTP_GetHTTPResponseBodyData(this._ptr, hRequest, out pBodyDataBuffer, unBufferSize);
      }

      public virtual bool ISteamHTTP_GetHTTPStreamingResponseBodyData(
        uint hRequest,
        uint cOffset,
        out byte pBodyDataBuffer,
        uint unBufferSize)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTTP _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamHTTP_GetHTTPStreamingResponseBodyData(this._ptr, hRequest, cOffset, out pBodyDataBuffer, unBufferSize);
      }

      public virtual bool ISteamHTTP_ReleaseHTTPRequest(uint hRequest)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamHTTP_ReleaseHTTPRequest(this._ptr, hRequest) : throw new Exception("ISteamHTTP _ptr is null!");
      }

      public virtual bool ISteamHTTP_GetHTTPDownloadProgressPct(
        uint hRequest,
        out float pflPercentOut)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamHTTP_GetHTTPDownloadProgressPct(this._ptr, hRequest, out pflPercentOut) : throw new Exception("ISteamHTTP _ptr is null!");
      }

      public virtual bool ISteamHTTP_SetHTTPRequestRawPostBody(
        uint hRequest,
        string pchContentType,
        out byte pubBody,
        uint unBodyLen)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTTP _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamHTTP_SetHTTPRequestRawPostBody(this._ptr, hRequest, pchContentType, out pubBody, unBodyLen);
      }

      public virtual HTTPCookieContainerHandle ISteamHTTP_CreateCookieContainer(
        [MarshalAs(UnmanagedType.U1)] bool bAllowResponsesToModify)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamHTTP_CreateCookieContainer(this._ptr, bAllowResponsesToModify) : throw new Exception("ISteamHTTP _ptr is null!");
      }

      public virtual bool ISteamHTTP_ReleaseCookieContainer(uint hCookieContainer)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamHTTP_ReleaseCookieContainer(this._ptr, hCookieContainer) : throw new Exception("ISteamHTTP _ptr is null!");
      }

      public virtual bool ISteamHTTP_SetCookie(
        uint hCookieContainer,
        string pchHost,
        string pchUrl,
        string pchCookie)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTTP _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamHTTP_SetCookie(this._ptr, hCookieContainer, pchHost, pchUrl, pchCookie);
      }

      public virtual bool ISteamHTTP_SetHTTPRequestCookieContainer(
        uint hRequest,
        uint hCookieContainer)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTTP _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamHTTP_SetHTTPRequestCookieContainer(this._ptr, hRequest, hCookieContainer);
      }

      public virtual bool ISteamHTTP_SetHTTPRequestUserAgentInfo(
        uint hRequest,
        string pchUserAgentInfo)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTTP _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamHTTP_SetHTTPRequestUserAgentInfo(this._ptr, hRequest, pchUserAgentInfo);
      }

      public virtual bool ISteamHTTP_SetHTTPRequestRequiresVerifiedCertificate(
        uint hRequest,
        [MarshalAs(UnmanagedType.U1)] bool bRequireVerifiedCertificate)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTTP _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamHTTP_SetHTTPRequestRequiresVerifiedCertificate(this._ptr, hRequest, bRequireVerifiedCertificate);
      }

      public virtual bool ISteamHTTP_SetHTTPRequestAbsoluteTimeoutMS(
        uint hRequest,
        uint unMilliseconds)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTTP _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamHTTP_SetHTTPRequestAbsoluteTimeoutMS(this._ptr, hRequest, unMilliseconds);
      }

      public virtual bool ISteamHTTP_GetHTTPRequestWasTimedOut(
        uint hRequest,
        [MarshalAs(UnmanagedType.U1)] ref bool pbWasTimedOut)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTTP _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamHTTP_GetHTTPRequestWasTimedOut(this._ptr, hRequest, ref pbWasTimedOut);
      }

      public virtual ClientUnifiedMessageHandle ISteamUnifiedMessages_SendMethod(
        string pchServiceMethod,
        IntPtr pRequestBuffer,
        uint unRequestBufferSize,
        ulong unContext)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUnifiedMessages _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamUnifiedMessages_SendMethod(this._ptr, pchServiceMethod, pRequestBuffer, unRequestBufferSize, unContext);
      }

      public virtual bool ISteamUnifiedMessages_GetMethodResponseInfo(
        ulong hHandle,
        out uint punResponseSize,
        out Result peResult)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamUnifiedMessages_GetMethodResponseInfo(this._ptr, hHandle, out punResponseSize, out peResult) : throw new Exception("ISteamUnifiedMessages _ptr is null!");
      }

      public virtual bool ISteamUnifiedMessages_GetMethodResponseData(
        ulong hHandle,
        IntPtr pResponseBuffer,
        uint unResponseBufferSize,
        [MarshalAs(UnmanagedType.U1)] bool bAutoRelease)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUnifiedMessages _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamUnifiedMessages_GetMethodResponseData(this._ptr, hHandle, pResponseBuffer, unResponseBufferSize, bAutoRelease);
      }

      public virtual bool ISteamUnifiedMessages_ReleaseMethod(ulong hHandle)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamUnifiedMessages_ReleaseMethod(this._ptr, hHandle) : throw new Exception("ISteamUnifiedMessages _ptr is null!");
      }

      public virtual bool ISteamUnifiedMessages_SendNotification(
        string pchServiceNotification,
        IntPtr pNotificationBuffer,
        uint unNotificationBufferSize)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUnifiedMessages _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamUnifiedMessages_SendNotification(this._ptr, pchServiceNotification, pNotificationBuffer, unNotificationBufferSize);
      }

      public virtual bool ISteamController_Init()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamController_Init(this._ptr) : throw new Exception("ISteamController _ptr is null!");
      }

      public virtual bool ISteamController_Shutdown()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamController_Shutdown(this._ptr) : throw new Exception("ISteamController _ptr is null!");
      }

      public virtual void ISteamController_RunFrame()
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamController _ptr is null!");
        Platform.Mac.Native.SteamAPI_ISteamController_RunFrame(this._ptr);
      }

      public virtual int ISteamController_GetConnectedControllers(IntPtr handlesOut)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamController_GetConnectedControllers(this._ptr, handlesOut) : throw new Exception("ISteamController _ptr is null!");
      }

      public virtual bool ISteamController_ShowBindingPanel(ulong controllerHandle)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamController_ShowBindingPanel(this._ptr, controllerHandle) : throw new Exception("ISteamController _ptr is null!");
      }

      public virtual ControllerActionSetHandle_t ISteamController_GetActionSetHandle(
        string pszActionSetName)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamController_GetActionSetHandle(this._ptr, pszActionSetName) : throw new Exception("ISteamController _ptr is null!");
      }

      public virtual void ISteamController_ActivateActionSet(
        ulong controllerHandle,
        ulong actionSetHandle)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamController _ptr is null!");
        Platform.Mac.Native.SteamAPI_ISteamController_ActivateActionSet(this._ptr, controllerHandle, actionSetHandle);
      }

      public virtual ControllerActionSetHandle_t ISteamController_GetCurrentActionSet(
        ulong controllerHandle)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamController_GetCurrentActionSet(this._ptr, controllerHandle) : throw new Exception("ISteamController _ptr is null!");
      }

      public virtual ControllerDigitalActionHandle_t ISteamController_GetDigitalActionHandle(
        string pszActionName)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamController_GetDigitalActionHandle(this._ptr, pszActionName) : throw new Exception("ISteamController _ptr is null!");
      }

      public virtual ControllerDigitalActionData_t ISteamController_GetDigitalActionData(
        ulong controllerHandle,
        ulong digitalActionHandle)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamController _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamController_GetDigitalActionData(this._ptr, controllerHandle, digitalActionHandle);
      }

      public virtual int ISteamController_GetDigitalActionOrigins(
        ulong controllerHandle,
        ulong actionSetHandle,
        ulong digitalActionHandle,
        out ControllerActionOrigin originsOut)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamController _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamController_GetDigitalActionOrigins(this._ptr, controllerHandle, actionSetHandle, digitalActionHandle, out originsOut);
      }

      public virtual ControllerAnalogActionHandle_t ISteamController_GetAnalogActionHandle(
        string pszActionName)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamController_GetAnalogActionHandle(this._ptr, pszActionName) : throw new Exception("ISteamController _ptr is null!");
      }

      public virtual ControllerAnalogActionData_t ISteamController_GetAnalogActionData(
        ulong controllerHandle,
        ulong analogActionHandle)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamController _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamController_GetAnalogActionData(this._ptr, controllerHandle, analogActionHandle);
      }

      public virtual int ISteamController_GetAnalogActionOrigins(
        ulong controllerHandle,
        ulong actionSetHandle,
        ulong analogActionHandle,
        out ControllerActionOrigin originsOut)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamController _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamController_GetAnalogActionOrigins(this._ptr, controllerHandle, actionSetHandle, analogActionHandle, out originsOut);
      }

      public virtual void ISteamController_StopAnalogActionMomentum(
        ulong controllerHandle,
        ulong eAction)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamController _ptr is null!");
        Platform.Mac.Native.SteamAPI_ISteamController_StopAnalogActionMomentum(this._ptr, controllerHandle, eAction);
      }

      public virtual void ISteamController_TriggerHapticPulse(
        ulong controllerHandle,
        SteamControllerPad eTargetPad,
        ushort usDurationMicroSec)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamController _ptr is null!");
        Platform.Mac.Native.SteamAPI_ISteamController_TriggerHapticPulse(this._ptr, controllerHandle, eTargetPad, usDurationMicroSec);
      }

      public virtual void ISteamController_TriggerRepeatedHapticPulse(
        ulong controllerHandle,
        SteamControllerPad eTargetPad,
        ushort usDurationMicroSec,
        ushort usOffMicroSec,
        ushort unRepeat,
        uint nFlags)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamController _ptr is null!");
        Platform.Mac.Native.SteamAPI_ISteamController_TriggerRepeatedHapticPulse(this._ptr, controllerHandle, eTargetPad, usDurationMicroSec, usOffMicroSec, unRepeat, nFlags);
      }

      public virtual void ISteamController_TriggerVibration(
        ulong controllerHandle,
        ushort usLeftSpeed,
        ushort usRightSpeed)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamController _ptr is null!");
        Platform.Mac.Native.SteamAPI_ISteamController_TriggerVibration(this._ptr, controllerHandle, usLeftSpeed, usRightSpeed);
      }

      public virtual void ISteamController_SetLEDColor(
        ulong controllerHandle,
        byte nColorR,
        byte nColorG,
        byte nColorB,
        uint nFlags)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamController _ptr is null!");
        Platform.Mac.Native.SteamAPI_ISteamController_SetLEDColor(this._ptr, controllerHandle, nColorR, nColorG, nColorB, nFlags);
      }

      public virtual int ISteamController_GetGamepadIndexForController(ulong ulControllerHandle)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamController_GetGamepadIndexForController(this._ptr, ulControllerHandle) : throw new Exception("ISteamController _ptr is null!");
      }

      public virtual ControllerHandle_t ISteamController_GetControllerForGamepadIndex(int nIndex)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamController_GetControllerForGamepadIndex(this._ptr, nIndex) : throw new Exception("ISteamController _ptr is null!");
      }

      public virtual ControllerMotionData_t ISteamController_GetMotionData(ulong controllerHandle)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamController_GetMotionData(this._ptr, controllerHandle) : throw new Exception("ISteamController _ptr is null!");
      }

      public virtual bool ISteamController_ShowDigitalActionOrigins(
        ulong controllerHandle,
        ulong digitalActionHandle,
        float flScale,
        float flXPosition,
        float flYPosition)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamController _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamController_ShowDigitalActionOrigins(this._ptr, controllerHandle, digitalActionHandle, flScale, flXPosition, flYPosition);
      }

      public virtual bool ISteamController_ShowAnalogActionOrigins(
        ulong controllerHandle,
        ulong analogActionHandle,
        float flScale,
        float flXPosition,
        float flYPosition)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamController _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamController_ShowAnalogActionOrigins(this._ptr, controllerHandle, analogActionHandle, flScale, flXPosition, flYPosition);
      }

      public virtual IntPtr ISteamController_GetStringForActionOrigin(ControllerActionOrigin eOrigin)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamController_GetStringForActionOrigin(this._ptr, eOrigin) : throw new Exception("ISteamController _ptr is null!");
      }

      public virtual IntPtr ISteamController_GetGlyphForActionOrigin(ControllerActionOrigin eOrigin)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamController_GetGlyphForActionOrigin(this._ptr, eOrigin) : throw new Exception("ISteamController _ptr is null!");
      }

      public virtual UGCQueryHandle_t ISteamUGC_CreateQueryUserUGCRequest(
        uint unAccountID,
        UserUGCList eListType,
        UGCMatchingUGCType eMatchingUGCType,
        UserUGCListSortOrder eSortOrder,
        uint nCreatorAppID,
        uint nConsumerAppID,
        uint unPage)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamUGC_CreateQueryUserUGCRequest(this._ptr, unAccountID, eListType, eMatchingUGCType, eSortOrder, nCreatorAppID, nConsumerAppID, unPage);
      }

      public virtual UGCQueryHandle_t ISteamUGC_CreateQueryAllUGCRequest(
        UGCQuery eQueryType,
        UGCMatchingUGCType eMatchingeMatchingUGCTypeFileType,
        uint nCreatorAppID,
        uint nConsumerAppID,
        uint unPage)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamUGC_CreateQueryAllUGCRequest(this._ptr, eQueryType, eMatchingeMatchingUGCTypeFileType, nCreatorAppID, nConsumerAppID, unPage);
      }

      public virtual UGCQueryHandle_t ISteamUGC_CreateQueryUGCDetailsRequest(
        IntPtr pvecPublishedFileID,
        uint unNumPublishedFileIDs)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamUGC_CreateQueryUGCDetailsRequest(this._ptr, pvecPublishedFileID, unNumPublishedFileIDs);
      }

      public virtual SteamAPICall_t ISteamUGC_SendQueryUGCRequest(ulong handle)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamUGC_SendQueryUGCRequest(this._ptr, handle) : throw new Exception("ISteamUGC _ptr is null!");
      }

      public virtual bool ISteamUGC_GetQueryUGCResult(
        ulong handle,
        uint index,
        ref SteamUGCDetails_t pDetails)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        SteamUGCDetails_t.PackSmall pDetails1 = new SteamUGCDetails_t.PackSmall();
        bool queryUgcResult = Platform.Mac.Native.SteamAPI_ISteamUGC_GetQueryUGCResult(this._ptr, handle, index, ref pDetails1);
        pDetails = (SteamUGCDetails_t) pDetails1;
        return queryUgcResult;
      }

      public virtual bool ISteamUGC_GetQueryUGCPreviewURL(
        ulong handle,
        uint index,
        StringBuilder pchURL,
        uint cchURLSize)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamUGC_GetQueryUGCPreviewURL(this._ptr, handle, index, pchURL, cchURLSize);
      }

      public virtual bool ISteamUGC_GetQueryUGCMetadata(
        ulong handle,
        uint index,
        StringBuilder pchMetadata,
        uint cchMetadatasize)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamUGC_GetQueryUGCMetadata(this._ptr, handle, index, pchMetadata, cchMetadatasize);
      }

      public virtual bool ISteamUGC_GetQueryUGCChildren(
        ulong handle,
        uint index,
        IntPtr pvecPublishedFileID,
        uint cMaxEntries)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamUGC_GetQueryUGCChildren(this._ptr, handle, index, pvecPublishedFileID, cMaxEntries);
      }

      public virtual bool ISteamUGC_GetQueryUGCStatistic(
        ulong handle,
        uint index,
        ItemStatistic eStatType,
        out ulong pStatValue)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamUGC_GetQueryUGCStatistic(this._ptr, handle, index, eStatType, out pStatValue);
      }

      public virtual uint ISteamUGC_GetQueryUGCNumAdditionalPreviews(ulong handle, uint index)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamUGC_GetQueryUGCNumAdditionalPreviews(this._ptr, handle, index);
      }

      public virtual bool ISteamUGC_GetQueryUGCAdditionalPreview(
        ulong handle,
        uint index,
        uint previewIndex,
        StringBuilder pchURLOrVideoID,
        uint cchURLSize,
        StringBuilder pchOriginalFileName,
        uint cchOriginalFileNameSize,
        out ItemPreviewType pPreviewType)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamUGC_GetQueryUGCAdditionalPreview(this._ptr, handle, index, previewIndex, pchURLOrVideoID, cchURLSize, pchOriginalFileName, cchOriginalFileNameSize, out pPreviewType);
      }

      public virtual uint ISteamUGC_GetQueryUGCNumKeyValueTags(ulong handle, uint index)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamUGC_GetQueryUGCNumKeyValueTags(this._ptr, handle, index);
      }

      public virtual bool ISteamUGC_GetQueryUGCKeyValueTag(
        ulong handle,
        uint index,
        uint keyValueTagIndex,
        StringBuilder pchKey,
        uint cchKeySize,
        StringBuilder pchValue,
        uint cchValueSize)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamUGC_GetQueryUGCKeyValueTag(this._ptr, handle, index, keyValueTagIndex, pchKey, cchKeySize, pchValue, cchValueSize);
      }

      public virtual bool ISteamUGC_ReleaseQueryUGCRequest(ulong handle)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamUGC_ReleaseQueryUGCRequest(this._ptr, handle) : throw new Exception("ISteamUGC _ptr is null!");
      }

      public virtual bool ISteamUGC_AddRequiredTag(ulong handle, string pTagName)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamUGC_AddRequiredTag(this._ptr, handle, pTagName);
      }

      public virtual bool ISteamUGC_AddExcludedTag(ulong handle, string pTagName)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamUGC_AddExcludedTag(this._ptr, handle, pTagName);
      }

      public virtual bool ISteamUGC_SetReturnOnlyIDs(ulong handle, [MarshalAs(UnmanagedType.U1)] bool bReturnOnlyIDs)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamUGC_SetReturnOnlyIDs(this._ptr, handle, bReturnOnlyIDs);
      }

      public virtual bool ISteamUGC_SetReturnKeyValueTags(ulong handle, [MarshalAs(UnmanagedType.U1)] bool bReturnKeyValueTags)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamUGC_SetReturnKeyValueTags(this._ptr, handle, bReturnKeyValueTags);
      }

      public virtual bool ISteamUGC_SetReturnLongDescription(
        ulong handle,
        [MarshalAs(UnmanagedType.U1)] bool bReturnLongDescription)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamUGC_SetReturnLongDescription(this._ptr, handle, bReturnLongDescription);
      }

      public virtual bool ISteamUGC_SetReturnMetadata(ulong handle, [MarshalAs(UnmanagedType.U1)] bool bReturnMetadata)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamUGC_SetReturnMetadata(this._ptr, handle, bReturnMetadata);
      }

      public virtual bool ISteamUGC_SetReturnChildren(ulong handle, [MarshalAs(UnmanagedType.U1)] bool bReturnChildren)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamUGC_SetReturnChildren(this._ptr, handle, bReturnChildren);
      }

      public virtual bool ISteamUGC_SetReturnAdditionalPreviews(
        ulong handle,
        [MarshalAs(UnmanagedType.U1)] bool bReturnAdditionalPreviews)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamUGC_SetReturnAdditionalPreviews(this._ptr, handle, bReturnAdditionalPreviews);
      }

      public virtual bool ISteamUGC_SetReturnTotalOnly(ulong handle, [MarshalAs(UnmanagedType.U1)] bool bReturnTotalOnly)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamUGC_SetReturnTotalOnly(this._ptr, handle, bReturnTotalOnly);
      }

      public virtual bool ISteamUGC_SetReturnPlaytimeStats(ulong handle, uint unDays)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamUGC_SetReturnPlaytimeStats(this._ptr, handle, unDays);
      }

      public virtual bool ISteamUGC_SetLanguage(ulong handle, string pchLanguage)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamUGC_SetLanguage(this._ptr, handle, pchLanguage);
      }

      public virtual bool ISteamUGC_SetAllowCachedResponse(ulong handle, uint unMaxAgeSeconds)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamUGC_SetAllowCachedResponse(this._ptr, handle, unMaxAgeSeconds);
      }

      public virtual bool ISteamUGC_SetCloudFileNameFilter(ulong handle, string pMatchCloudFileName)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamUGC_SetCloudFileNameFilter(this._ptr, handle, pMatchCloudFileName);
      }

      public virtual bool ISteamUGC_SetMatchAnyTag(ulong handle, [MarshalAs(UnmanagedType.U1)] bool bMatchAnyTag)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamUGC_SetMatchAnyTag(this._ptr, handle, bMatchAnyTag);
      }

      public virtual bool ISteamUGC_SetSearchText(ulong handle, string pSearchText)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamUGC_SetSearchText(this._ptr, handle, pSearchText);
      }

      public virtual bool ISteamUGC_SetRankedByTrendDays(ulong handle, uint unDays)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamUGC_SetRankedByTrendDays(this._ptr, handle, unDays);
      }

      public virtual bool ISteamUGC_AddRequiredKeyValueTag(
        ulong handle,
        string pKey,
        string pValue)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamUGC_AddRequiredKeyValueTag(this._ptr, handle, pKey, pValue);
      }

      public virtual SteamAPICall_t ISteamUGC_RequestUGCDetails(
        ulong nPublishedFileID,
        uint unMaxAgeSeconds)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamUGC_RequestUGCDetails(this._ptr, nPublishedFileID, unMaxAgeSeconds);
      }

      public virtual SteamAPICall_t ISteamUGC_CreateItem(
        uint nConsumerAppId,
        WorkshopFileType eFileType)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamUGC_CreateItem(this._ptr, nConsumerAppId, eFileType);
      }

      public virtual UGCUpdateHandle_t ISteamUGC_StartItemUpdate(
        uint nConsumerAppId,
        ulong nPublishedFileID)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamUGC_StartItemUpdate(this._ptr, nConsumerAppId, nPublishedFileID);
      }

      public virtual bool ISteamUGC_SetItemTitle(ulong handle, string pchTitle)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamUGC_SetItemTitle(this._ptr, handle, pchTitle);
      }

      public virtual bool ISteamUGC_SetItemDescription(ulong handle, string pchDescription)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamUGC_SetItemDescription(this._ptr, handle, pchDescription);
      }

      public virtual bool ISteamUGC_SetItemUpdateLanguage(ulong handle, string pchLanguage)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamUGC_SetItemUpdateLanguage(this._ptr, handle, pchLanguage);
      }

      public virtual bool ISteamUGC_SetItemMetadata(ulong handle, string pchMetaData)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamUGC_SetItemMetadata(this._ptr, handle, pchMetaData);
      }

      public virtual bool ISteamUGC_SetItemVisibility(
        ulong handle,
        RemoteStoragePublishedFileVisibility eVisibility)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamUGC_SetItemVisibility(this._ptr, handle, eVisibility);
      }

      public virtual bool ISteamUGC_SetItemTags(
        ulong updateHandle,
        ref SteamParamStringArray_t pTags)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        SteamParamStringArray_t.PackSmall pTags1 = new SteamParamStringArray_t.PackSmall();
        bool flag = Platform.Mac.Native.SteamAPI_ISteamUGC_SetItemTags(this._ptr, updateHandle, ref pTags1);
        pTags = (SteamParamStringArray_t) pTags1;
        return flag;
      }

      public virtual bool ISteamUGC_SetItemContent(ulong handle, string pszContentFolder)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamUGC_SetItemContent(this._ptr, handle, pszContentFolder);
      }

      public virtual bool ISteamUGC_SetItemPreview(ulong handle, string pszPreviewFile)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamUGC_SetItemPreview(this._ptr, handle, pszPreviewFile);
      }

      public virtual bool ISteamUGC_RemoveItemKeyValueTags(ulong handle, string pchKey)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamUGC_RemoveItemKeyValueTags(this._ptr, handle, pchKey);
      }

      public virtual bool ISteamUGC_AddItemKeyValueTag(
        ulong handle,
        string pchKey,
        string pchValue)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamUGC_AddItemKeyValueTag(this._ptr, handle, pchKey, pchValue);
      }

      public virtual bool ISteamUGC_AddItemPreviewFile(
        ulong handle,
        string pszPreviewFile,
        ItemPreviewType type)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamUGC_AddItemPreviewFile(this._ptr, handle, pszPreviewFile, type);
      }

      public virtual bool ISteamUGC_AddItemPreviewVideo(ulong handle, string pszVideoID)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamUGC_AddItemPreviewVideo(this._ptr, handle, pszVideoID);
      }

      public virtual bool ISteamUGC_UpdateItemPreviewFile(
        ulong handle,
        uint index,
        string pszPreviewFile)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamUGC_UpdateItemPreviewFile(this._ptr, handle, index, pszPreviewFile);
      }

      public virtual bool ISteamUGC_UpdateItemPreviewVideo(
        ulong handle,
        uint index,
        string pszVideoID)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamUGC_UpdateItemPreviewVideo(this._ptr, handle, index, pszVideoID);
      }

      public virtual bool ISteamUGC_RemoveItemPreview(ulong handle, uint index)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamUGC_RemoveItemPreview(this._ptr, handle, index);
      }

      public virtual SteamAPICall_t ISteamUGC_SubmitItemUpdate(ulong handle, string pchChangeNote)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamUGC_SubmitItemUpdate(this._ptr, handle, pchChangeNote);
      }

      public virtual ItemUpdateStatus ISteamUGC_GetItemUpdateProgress(
        ulong handle,
        out ulong punBytesProcessed,
        out ulong punBytesTotal)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamUGC_GetItemUpdateProgress(this._ptr, handle, out punBytesProcessed, out punBytesTotal) : throw new Exception("ISteamUGC _ptr is null!");
      }

      public virtual SteamAPICall_t ISteamUGC_SetUserItemVote(ulong nPublishedFileID, [MarshalAs(UnmanagedType.U1)] bool bVoteUp)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamUGC_SetUserItemVote(this._ptr, nPublishedFileID, bVoteUp);
      }

      public virtual SteamAPICall_t ISteamUGC_GetUserItemVote(ulong nPublishedFileID)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamUGC_GetUserItemVote(this._ptr, nPublishedFileID) : throw new Exception("ISteamUGC _ptr is null!");
      }

      public virtual SteamAPICall_t ISteamUGC_AddItemToFavorites(
        uint nAppId,
        ulong nPublishedFileID)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamUGC_AddItemToFavorites(this._ptr, nAppId, nPublishedFileID);
      }

      public virtual SteamAPICall_t ISteamUGC_RemoveItemFromFavorites(
        uint nAppId,
        ulong nPublishedFileID)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamUGC_RemoveItemFromFavorites(this._ptr, nAppId, nPublishedFileID);
      }

      public virtual SteamAPICall_t ISteamUGC_SubscribeItem(ulong nPublishedFileID)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamUGC_SubscribeItem(this._ptr, nPublishedFileID) : throw new Exception("ISteamUGC _ptr is null!");
      }

      public virtual SteamAPICall_t ISteamUGC_UnsubscribeItem(ulong nPublishedFileID)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamUGC_UnsubscribeItem(this._ptr, nPublishedFileID) : throw new Exception("ISteamUGC _ptr is null!");
      }

      public virtual uint ISteamUGC_GetNumSubscribedItems()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamUGC_GetNumSubscribedItems(this._ptr) : throw new Exception("ISteamUGC _ptr is null!");
      }

      public virtual uint ISteamUGC_GetSubscribedItems(IntPtr pvecPublishedFileID, uint cMaxEntries)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamUGC_GetSubscribedItems(this._ptr, pvecPublishedFileID, cMaxEntries);
      }

      public virtual uint ISteamUGC_GetItemState(ulong nPublishedFileID)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamUGC_GetItemState(this._ptr, nPublishedFileID) : throw new Exception("ISteamUGC _ptr is null!");
      }

      public virtual bool ISteamUGC_GetItemInstallInfo(
        ulong nPublishedFileID,
        out ulong punSizeOnDisk,
        StringBuilder pchFolder,
        uint cchFolderSize,
        out uint punTimeStamp)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamUGC_GetItemInstallInfo(this._ptr, nPublishedFileID, out punSizeOnDisk, pchFolder, cchFolderSize, out punTimeStamp);
      }

      public virtual bool ISteamUGC_GetItemDownloadInfo(
        ulong nPublishedFileID,
        out ulong punBytesDownloaded,
        out ulong punBytesTotal)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamUGC_GetItemDownloadInfo(this._ptr, nPublishedFileID, out punBytesDownloaded, out punBytesTotal) : throw new Exception("ISteamUGC _ptr is null!");
      }

      public virtual bool ISteamUGC_DownloadItem(ulong nPublishedFileID, [MarshalAs(UnmanagedType.U1)] bool bHighPriority)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamUGC_DownloadItem(this._ptr, nPublishedFileID, bHighPriority);
      }

      public virtual bool ISteamUGC_BInitWorkshopForGameServer(
        uint unWorkshopDepotID,
        string pszFolder)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamUGC_BInitWorkshopForGameServer(this._ptr, unWorkshopDepotID, pszFolder);
      }

      public virtual void ISteamUGC_SuspendDownloads([MarshalAs(UnmanagedType.U1)] bool bSuspend)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        Platform.Mac.Native.SteamAPI_ISteamUGC_SuspendDownloads(this._ptr, bSuspend);
      }

      public virtual SteamAPICall_t ISteamUGC_StartPlaytimeTracking(
        IntPtr pvecPublishedFileID,
        uint unNumPublishedFileIDs)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamUGC_StartPlaytimeTracking(this._ptr, pvecPublishedFileID, unNumPublishedFileIDs);
      }

      public virtual SteamAPICall_t ISteamUGC_StopPlaytimeTracking(
        IntPtr pvecPublishedFileID,
        uint unNumPublishedFileIDs)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamUGC_StopPlaytimeTracking(this._ptr, pvecPublishedFileID, unNumPublishedFileIDs);
      }

      public virtual SteamAPICall_t ISteamUGC_StopPlaytimeTrackingForAllItems()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamUGC_StopPlaytimeTrackingForAllItems(this._ptr) : throw new Exception("ISteamUGC _ptr is null!");
      }

      public virtual SteamAPICall_t ISteamUGC_AddDependency(
        ulong nParentPublishedFileID,
        ulong nChildPublishedFileID)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamUGC_AddDependency(this._ptr, nParentPublishedFileID, nChildPublishedFileID);
      }

      public virtual SteamAPICall_t ISteamUGC_RemoveDependency(
        ulong nParentPublishedFileID,
        ulong nChildPublishedFileID)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamUGC_RemoveDependency(this._ptr, nParentPublishedFileID, nChildPublishedFileID);
      }

      public virtual uint ISteamAppList_GetNumInstalledApps()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamAppList_GetNumInstalledApps(this._ptr) : throw new Exception("ISteamAppList _ptr is null!");
      }

      public virtual uint ISteamAppList_GetInstalledApps(IntPtr pvecAppID, uint unMaxAppIDs)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamAppList _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamAppList_GetInstalledApps(this._ptr, pvecAppID, unMaxAppIDs);
      }

      public virtual int ISteamAppList_GetAppName(
        uint nAppID,
        StringBuilder pchName,
        int cchNameMax)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamAppList _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamAppList_GetAppName(this._ptr, nAppID, pchName, cchNameMax);
      }

      public virtual int ISteamAppList_GetAppInstallDir(
        uint nAppID,
        StringBuilder pchDirectory,
        int cchNameMax)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamAppList _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamAppList_GetAppInstallDir(this._ptr, nAppID, pchDirectory, cchNameMax);
      }

      public virtual int ISteamAppList_GetAppBuildId(uint nAppID)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamAppList_GetAppBuildId(this._ptr, nAppID) : throw new Exception("ISteamAppList _ptr is null!");
      }

      public virtual void ISteamHTMLSurface_DestructISteamHTMLSurface()
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTMLSurface _ptr is null!");
        Platform.Mac.Native.SteamAPI_ISteamHTMLSurface_DestructISteamHTMLSurface(this._ptr);
      }

      public virtual bool ISteamHTMLSurface_Init()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamHTMLSurface_Init(this._ptr) : throw new Exception("ISteamHTMLSurface _ptr is null!");
      }

      public virtual bool ISteamHTMLSurface_Shutdown()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamHTMLSurface_Shutdown(this._ptr) : throw new Exception("ISteamHTMLSurface _ptr is null!");
      }

      public virtual SteamAPICall_t ISteamHTMLSurface_CreateBrowser(
        string pchUserAgent,
        string pchUserCSS)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTMLSurface _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamHTMLSurface_CreateBrowser(this._ptr, pchUserAgent, pchUserCSS);
      }

      public virtual void ISteamHTMLSurface_RemoveBrowser(uint unBrowserHandle)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTMLSurface _ptr is null!");
        Platform.Mac.Native.SteamAPI_ISteamHTMLSurface_RemoveBrowser(this._ptr, unBrowserHandle);
      }

      public virtual void ISteamHTMLSurface_LoadURL(
        uint unBrowserHandle,
        string pchURL,
        string pchPostData)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTMLSurface _ptr is null!");
        Platform.Mac.Native.SteamAPI_ISteamHTMLSurface_LoadURL(this._ptr, unBrowserHandle, pchURL, pchPostData);
      }

      public virtual void ISteamHTMLSurface_SetSize(
        uint unBrowserHandle,
        uint unWidth,
        uint unHeight)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTMLSurface _ptr is null!");
        Platform.Mac.Native.SteamAPI_ISteamHTMLSurface_SetSize(this._ptr, unBrowserHandle, unWidth, unHeight);
      }

      public virtual void ISteamHTMLSurface_StopLoad(uint unBrowserHandle)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTMLSurface _ptr is null!");
        Platform.Mac.Native.SteamAPI_ISteamHTMLSurface_StopLoad(this._ptr, unBrowserHandle);
      }

      public virtual void ISteamHTMLSurface_Reload(uint unBrowserHandle)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTMLSurface _ptr is null!");
        Platform.Mac.Native.SteamAPI_ISteamHTMLSurface_Reload(this._ptr, unBrowserHandle);
      }

      public virtual void ISteamHTMLSurface_GoBack(uint unBrowserHandle)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTMLSurface _ptr is null!");
        Platform.Mac.Native.SteamAPI_ISteamHTMLSurface_GoBack(this._ptr, unBrowserHandle);
      }

      public virtual void ISteamHTMLSurface_GoForward(uint unBrowserHandle)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTMLSurface _ptr is null!");
        Platform.Mac.Native.SteamAPI_ISteamHTMLSurface_GoForward(this._ptr, unBrowserHandle);
      }

      public virtual void ISteamHTMLSurface_AddHeader(
        uint unBrowserHandle,
        string pchKey,
        string pchValue)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTMLSurface _ptr is null!");
        Platform.Mac.Native.SteamAPI_ISteamHTMLSurface_AddHeader(this._ptr, unBrowserHandle, pchKey, pchValue);
      }

      public virtual void ISteamHTMLSurface_ExecuteJavascript(
        uint unBrowserHandle,
        string pchScript)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTMLSurface _ptr is null!");
        Platform.Mac.Native.SteamAPI_ISteamHTMLSurface_ExecuteJavascript(this._ptr, unBrowserHandle, pchScript);
      }

      public virtual void ISteamHTMLSurface_MouseUp(
        uint unBrowserHandle,
        HTMLMouseButton eMouseButton)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTMLSurface _ptr is null!");
        Platform.Mac.Native.SteamAPI_ISteamHTMLSurface_MouseUp(this._ptr, unBrowserHandle, eMouseButton);
      }

      public virtual void ISteamHTMLSurface_MouseDown(
        uint unBrowserHandle,
        HTMLMouseButton eMouseButton)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTMLSurface _ptr is null!");
        Platform.Mac.Native.SteamAPI_ISteamHTMLSurface_MouseDown(this._ptr, unBrowserHandle, eMouseButton);
      }

      public virtual void ISteamHTMLSurface_MouseDoubleClick(
        uint unBrowserHandle,
        HTMLMouseButton eMouseButton)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTMLSurface _ptr is null!");
        Platform.Mac.Native.SteamAPI_ISteamHTMLSurface_MouseDoubleClick(this._ptr, unBrowserHandle, eMouseButton);
      }

      public virtual void ISteamHTMLSurface_MouseMove(uint unBrowserHandle, int x, int y)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTMLSurface _ptr is null!");
        Platform.Mac.Native.SteamAPI_ISteamHTMLSurface_MouseMove(this._ptr, unBrowserHandle, x, y);
      }

      public virtual void ISteamHTMLSurface_MouseWheel(uint unBrowserHandle, int nDelta)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTMLSurface _ptr is null!");
        Platform.Mac.Native.SteamAPI_ISteamHTMLSurface_MouseWheel(this._ptr, unBrowserHandle, nDelta);
      }

      public virtual void ISteamHTMLSurface_KeyDown(
        uint unBrowserHandle,
        uint nNativeKeyCode,
        HTMLKeyModifiers eHTMLKeyModifiers)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTMLSurface _ptr is null!");
        Platform.Mac.Native.SteamAPI_ISteamHTMLSurface_KeyDown(this._ptr, unBrowserHandle, nNativeKeyCode, eHTMLKeyModifiers);
      }

      public virtual void ISteamHTMLSurface_KeyUp(
        uint unBrowserHandle,
        uint nNativeKeyCode,
        HTMLKeyModifiers eHTMLKeyModifiers)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTMLSurface _ptr is null!");
        Platform.Mac.Native.SteamAPI_ISteamHTMLSurface_KeyUp(this._ptr, unBrowserHandle, nNativeKeyCode, eHTMLKeyModifiers);
      }

      public virtual void ISteamHTMLSurface_KeyChar(
        uint unBrowserHandle,
        uint cUnicodeChar,
        HTMLKeyModifiers eHTMLKeyModifiers)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTMLSurface _ptr is null!");
        Platform.Mac.Native.SteamAPI_ISteamHTMLSurface_KeyChar(this._ptr, unBrowserHandle, cUnicodeChar, eHTMLKeyModifiers);
      }

      public virtual void ISteamHTMLSurface_SetHorizontalScroll(
        uint unBrowserHandle,
        uint nAbsolutePixelScroll)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTMLSurface _ptr is null!");
        Platform.Mac.Native.SteamAPI_ISteamHTMLSurface_SetHorizontalScroll(this._ptr, unBrowserHandle, nAbsolutePixelScroll);
      }

      public virtual void ISteamHTMLSurface_SetVerticalScroll(
        uint unBrowserHandle,
        uint nAbsolutePixelScroll)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTMLSurface _ptr is null!");
        Platform.Mac.Native.SteamAPI_ISteamHTMLSurface_SetVerticalScroll(this._ptr, unBrowserHandle, nAbsolutePixelScroll);
      }

      public virtual void ISteamHTMLSurface_SetKeyFocus(uint unBrowserHandle, [MarshalAs(UnmanagedType.U1)] bool bHasKeyFocus)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTMLSurface _ptr is null!");
        Platform.Mac.Native.SteamAPI_ISteamHTMLSurface_SetKeyFocus(this._ptr, unBrowserHandle, bHasKeyFocus);
      }

      public virtual void ISteamHTMLSurface_ViewSource(uint unBrowserHandle)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTMLSurface _ptr is null!");
        Platform.Mac.Native.SteamAPI_ISteamHTMLSurface_ViewSource(this._ptr, unBrowserHandle);
      }

      public virtual void ISteamHTMLSurface_CopyToClipboard(uint unBrowserHandle)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTMLSurface _ptr is null!");
        Platform.Mac.Native.SteamAPI_ISteamHTMLSurface_CopyToClipboard(this._ptr, unBrowserHandle);
      }

      public virtual void ISteamHTMLSurface_PasteFromClipboard(uint unBrowserHandle)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTMLSurface _ptr is null!");
        Platform.Mac.Native.SteamAPI_ISteamHTMLSurface_PasteFromClipboard(this._ptr, unBrowserHandle);
      }

      public virtual void ISteamHTMLSurface_Find(
        uint unBrowserHandle,
        string pchSearchStr,
        [MarshalAs(UnmanagedType.U1)] bool bCurrentlyInFind,
        [MarshalAs(UnmanagedType.U1)] bool bReverse)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTMLSurface _ptr is null!");
        Platform.Mac.Native.SteamAPI_ISteamHTMLSurface_Find(this._ptr, unBrowserHandle, pchSearchStr, bCurrentlyInFind, bReverse);
      }

      public virtual void ISteamHTMLSurface_StopFind(uint unBrowserHandle)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTMLSurface _ptr is null!");
        Platform.Mac.Native.SteamAPI_ISteamHTMLSurface_StopFind(this._ptr, unBrowserHandle);
      }

      public virtual void ISteamHTMLSurface_GetLinkAtPosition(uint unBrowserHandle, int x, int y)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTMLSurface _ptr is null!");
        Platform.Mac.Native.SteamAPI_ISteamHTMLSurface_GetLinkAtPosition(this._ptr, unBrowserHandle, x, y);
      }

      public virtual void ISteamHTMLSurface_SetCookie(
        string pchHostname,
        string pchKey,
        string pchValue,
        string pchPath,
        uint nExpires,
        [MarshalAs(UnmanagedType.U1)] bool bSecure,
        [MarshalAs(UnmanagedType.U1)] bool bHTTPOnly)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTMLSurface _ptr is null!");
        Platform.Mac.Native.SteamAPI_ISteamHTMLSurface_SetCookie(this._ptr, pchHostname, pchKey, pchValue, pchPath, nExpires, bSecure, bHTTPOnly);
      }

      public virtual void ISteamHTMLSurface_SetPageScaleFactor(
        uint unBrowserHandle,
        float flZoom,
        int nPointX,
        int nPointY)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTMLSurface _ptr is null!");
        Platform.Mac.Native.SteamAPI_ISteamHTMLSurface_SetPageScaleFactor(this._ptr, unBrowserHandle, flZoom, nPointX, nPointY);
      }

      public virtual void ISteamHTMLSurface_SetBackgroundMode(
        uint unBrowserHandle,
        [MarshalAs(UnmanagedType.U1)] bool bBackgroundMode)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTMLSurface _ptr is null!");
        Platform.Mac.Native.SteamAPI_ISteamHTMLSurface_SetBackgroundMode(this._ptr, unBrowserHandle, bBackgroundMode);
      }

      public virtual void ISteamHTMLSurface_AllowStartRequest(uint unBrowserHandle, [MarshalAs(UnmanagedType.U1)] bool bAllowed)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTMLSurface _ptr is null!");
        Platform.Mac.Native.SteamAPI_ISteamHTMLSurface_AllowStartRequest(this._ptr, unBrowserHandle, bAllowed);
      }

      public virtual void ISteamHTMLSurface_JSDialogResponse(uint unBrowserHandle, [MarshalAs(UnmanagedType.U1)] bool bResult)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTMLSurface _ptr is null!");
        Platform.Mac.Native.SteamAPI_ISteamHTMLSurface_JSDialogResponse(this._ptr, unBrowserHandle, bResult);
      }

      public virtual Result ISteamInventory_GetResultStatus(int resultHandle)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamInventory_GetResultStatus(this._ptr, resultHandle) : throw new Exception("ISteamInventory _ptr is null!");
      }

      public virtual bool ISteamInventory_GetResultItems(
        int resultHandle,
        IntPtr pOutItemsArray,
        out uint punOutItemsArraySize)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamInventory _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamInventory_GetResultItems(this._ptr, resultHandle, pOutItemsArray, out punOutItemsArraySize);
      }

      public virtual bool ISteamInventory_GetResultItemProperty(
        int resultHandle,
        uint unItemIndex,
        string pchPropertyName,
        StringBuilder pchValueBuffer,
        out uint punValueBufferSizeOut)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamInventory _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamInventory_GetResultItemProperty(this._ptr, resultHandle, unItemIndex, pchPropertyName, pchValueBuffer, out punValueBufferSizeOut);
      }

      public virtual uint ISteamInventory_GetResultTimestamp(int resultHandle)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamInventory_GetResultTimestamp(this._ptr, resultHandle) : throw new Exception("ISteamInventory _ptr is null!");
      }

      public virtual bool ISteamInventory_CheckResultSteamID(
        int resultHandle,
        ulong steamIDExpected)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamInventory _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamInventory_CheckResultSteamID(this._ptr, resultHandle, steamIDExpected);
      }

      public virtual void ISteamInventory_DestroyResult(int resultHandle)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamInventory _ptr is null!");
        Platform.Mac.Native.SteamAPI_ISteamInventory_DestroyResult(this._ptr, resultHandle);
      }

      public virtual bool ISteamInventory_GetAllItems(ref int pResultHandle)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamInventory_GetAllItems(this._ptr, ref pResultHandle) : throw new Exception("ISteamInventory _ptr is null!");
      }

      public virtual bool ISteamInventory_GetItemsByID(
        ref int pResultHandle,
        ulong[] pInstanceIDs,
        uint unCountInstanceIDs)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamInventory _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamInventory_GetItemsByID(this._ptr, ref pResultHandle, pInstanceIDs, unCountInstanceIDs);
      }

      public virtual bool ISteamInventory_SerializeResult(
        int resultHandle,
        IntPtr pOutBuffer,
        out uint punOutBufferSize)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamInventory _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamInventory_SerializeResult(this._ptr, resultHandle, pOutBuffer, out punOutBufferSize);
      }

      public virtual bool ISteamInventory_DeserializeResult(
        ref int pOutResultHandle,
        IntPtr pBuffer,
        uint unBufferSize,
        [MarshalAs(UnmanagedType.U1)] bool bRESERVED_MUST_BE_FALSE)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamInventory _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamInventory_DeserializeResult(this._ptr, ref pOutResultHandle, pBuffer, unBufferSize, bRESERVED_MUST_BE_FALSE);
      }

      public virtual bool ISteamInventory_GenerateItems(
        ref int pResultHandle,
        int[] pArrayItemDefs,
        uint[] punArrayQuantity,
        uint unArrayLength)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamInventory _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamInventory_GenerateItems(this._ptr, ref pResultHandle, pArrayItemDefs, punArrayQuantity, unArrayLength);
      }

      public virtual bool ISteamInventory_GrantPromoItems(ref int pResultHandle)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamInventory_GrantPromoItems(this._ptr, ref pResultHandle) : throw new Exception("ISteamInventory _ptr is null!");
      }

      public virtual bool ISteamInventory_AddPromoItem(ref int pResultHandle, int itemDef)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamInventory _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamInventory_AddPromoItem(this._ptr, ref pResultHandle, itemDef);
      }

      public virtual bool ISteamInventory_AddPromoItems(
        ref int pResultHandle,
        int[] pArrayItemDefs,
        uint unArrayLength)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamInventory _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamInventory_AddPromoItems(this._ptr, ref pResultHandle, pArrayItemDefs, unArrayLength);
      }

      public virtual bool ISteamInventory_ConsumeItem(
        ref int pResultHandle,
        ulong itemConsume,
        uint unQuantity)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamInventory _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamInventory_ConsumeItem(this._ptr, ref pResultHandle, itemConsume, unQuantity);
      }

      public virtual bool ISteamInventory_ExchangeItems(
        ref int pResultHandle,
        int[] pArrayGenerate,
        uint[] punArrayGenerateQuantity,
        uint unArrayGenerateLength,
        ulong[] pArrayDestroy,
        uint[] punArrayDestroyQuantity,
        uint unArrayDestroyLength)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamInventory _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamInventory_ExchangeItems(this._ptr, ref pResultHandle, pArrayGenerate, punArrayGenerateQuantity, unArrayGenerateLength, pArrayDestroy, punArrayDestroyQuantity, unArrayDestroyLength);
      }

      public virtual bool ISteamInventory_TransferItemQuantity(
        ref int pResultHandle,
        ulong itemIdSource,
        uint unQuantity,
        ulong itemIdDest)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamInventory _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamInventory_TransferItemQuantity(this._ptr, ref pResultHandle, itemIdSource, unQuantity, itemIdDest);
      }

      public virtual void ISteamInventory_SendItemDropHeartbeat()
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamInventory _ptr is null!");
        Platform.Mac.Native.SteamAPI_ISteamInventory_SendItemDropHeartbeat(this._ptr);
      }

      public virtual bool ISteamInventory_TriggerItemDrop(
        ref int pResultHandle,
        int dropListDefinition)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamInventory _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamInventory_TriggerItemDrop(this._ptr, ref pResultHandle, dropListDefinition);
      }

      public virtual bool ISteamInventory_TradeItems(
        ref int pResultHandle,
        ulong steamIDTradePartner,
        ulong[] pArrayGive,
        uint[] pArrayGiveQuantity,
        uint nArrayGiveLength,
        ulong[] pArrayGet,
        uint[] pArrayGetQuantity,
        uint nArrayGetLength)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamInventory _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamInventory_TradeItems(this._ptr, ref pResultHandle, steamIDTradePartner, pArrayGive, pArrayGiveQuantity, nArrayGiveLength, pArrayGet, pArrayGetQuantity, nArrayGetLength);
      }

      public virtual bool ISteamInventory_LoadItemDefinitions()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamInventory_LoadItemDefinitions(this._ptr) : throw new Exception("ISteamInventory _ptr is null!");
      }

      public virtual bool ISteamInventory_GetItemDefinitionIDs(
        IntPtr pItemDefIDs,
        out uint punItemDefIDsArraySize)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamInventory_GetItemDefinitionIDs(this._ptr, pItemDefIDs, out punItemDefIDsArraySize) : throw new Exception("ISteamInventory _ptr is null!");
      }

      public virtual bool ISteamInventory_GetItemDefinitionProperty(
        int iDefinition,
        string pchPropertyName,
        StringBuilder pchValueBuffer,
        out uint punValueBufferSizeOut)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamInventory _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamInventory_GetItemDefinitionProperty(this._ptr, iDefinition, pchPropertyName, pchValueBuffer, out punValueBufferSizeOut);
      }

      public virtual SteamAPICall_t ISteamInventory_RequestEligiblePromoItemDefinitionsIDs(
        ulong steamID)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamInventory_RequestEligiblePromoItemDefinitionsIDs(this._ptr, steamID) : throw new Exception("ISteamInventory _ptr is null!");
      }

      public virtual bool ISteamInventory_GetEligiblePromoItemDefinitionIDs(
        ulong steamID,
        IntPtr pItemDefIDs,
        out uint punItemDefIDsArraySize)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamInventory _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamInventory_GetEligiblePromoItemDefinitionIDs(this._ptr, steamID, pItemDefIDs, out punItemDefIDsArraySize);
      }

      public virtual void ISteamVideo_GetVideoURL(uint unVideoAppID)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamVideo _ptr is null!");
        Platform.Mac.Native.SteamAPI_ISteamVideo_GetVideoURL(this._ptr, unVideoAppID);
      }

      public virtual bool ISteamVideo_IsBroadcasting(IntPtr pnNumViewers)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamVideo_IsBroadcasting(this._ptr, pnNumViewers) : throw new Exception("ISteamVideo _ptr is null!");
      }

      public virtual void ISteamVideo_GetOPFSettings(uint unVideoAppID)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamVideo _ptr is null!");
        Platform.Mac.Native.SteamAPI_ISteamVideo_GetOPFSettings(this._ptr, unVideoAppID);
      }

      public virtual bool ISteamVideo_GetOPFStringForApp(
        uint unVideoAppID,
        StringBuilder pchBuffer,
        out int pnBufferSize)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamVideo _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamVideo_GetOPFStringForApp(this._ptr, unVideoAppID, pchBuffer, out pnBufferSize);
      }

      public virtual bool ISteamGameServer_InitGameServer(
        uint unIP,
        ushort usGamePort,
        ushort usQueryPort,
        uint unFlags,
        uint nGameAppId,
        string pchVersionString)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServer _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamGameServer_InitGameServer(this._ptr, unIP, usGamePort, usQueryPort, unFlags, nGameAppId, pchVersionString);
      }

      public virtual void ISteamGameServer_SetProduct(string pszProduct)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServer _ptr is null!");
        Platform.Mac.Native.SteamAPI_ISteamGameServer_SetProduct(this._ptr, pszProduct);
      }

      public virtual void ISteamGameServer_SetGameDescription(string pszGameDescription)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServer _ptr is null!");
        Platform.Mac.Native.SteamAPI_ISteamGameServer_SetGameDescription(this._ptr, pszGameDescription);
      }

      public virtual void ISteamGameServer_SetModDir(string pszModDir)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServer _ptr is null!");
        Platform.Mac.Native.SteamAPI_ISteamGameServer_SetModDir(this._ptr, pszModDir);
      }

      public virtual void ISteamGameServer_SetDedicatedServer([MarshalAs(UnmanagedType.U1)] bool bDedicated)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServer _ptr is null!");
        Platform.Mac.Native.SteamAPI_ISteamGameServer_SetDedicatedServer(this._ptr, bDedicated);
      }

      public virtual void ISteamGameServer_LogOn(string pszToken)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServer _ptr is null!");
        Platform.Mac.Native.SteamAPI_ISteamGameServer_LogOn(this._ptr, pszToken);
      }

      public virtual void ISteamGameServer_LogOnAnonymous()
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServer _ptr is null!");
        Platform.Mac.Native.SteamAPI_ISteamGameServer_LogOnAnonymous(this._ptr);
      }

      public virtual void ISteamGameServer_LogOff()
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServer _ptr is null!");
        Platform.Mac.Native.SteamAPI_ISteamGameServer_LogOff(this._ptr);
      }

      public virtual bool ISteamGameServer_BLoggedOn()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamGameServer_BLoggedOn(this._ptr) : throw new Exception("ISteamGameServer _ptr is null!");
      }

      public virtual bool ISteamGameServer_BSecure()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamGameServer_BSecure(this._ptr) : throw new Exception("ISteamGameServer _ptr is null!");
      }

      public virtual CSteamID ISteamGameServer_GetSteamID()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamGameServer_GetSteamID(this._ptr) : throw new Exception("ISteamGameServer _ptr is null!");
      }

      public virtual bool ISteamGameServer_WasRestartRequested()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamGameServer_WasRestartRequested(this._ptr) : throw new Exception("ISteamGameServer _ptr is null!");
      }

      public virtual void ISteamGameServer_SetMaxPlayerCount(int cPlayersMax)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServer _ptr is null!");
        Platform.Mac.Native.SteamAPI_ISteamGameServer_SetMaxPlayerCount(this._ptr, cPlayersMax);
      }

      public virtual void ISteamGameServer_SetBotPlayerCount(int cBotplayers)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServer _ptr is null!");
        Platform.Mac.Native.SteamAPI_ISteamGameServer_SetBotPlayerCount(this._ptr, cBotplayers);
      }

      public virtual void ISteamGameServer_SetServerName(string pszServerName)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServer _ptr is null!");
        Platform.Mac.Native.SteamAPI_ISteamGameServer_SetServerName(this._ptr, pszServerName);
      }

      public virtual void ISteamGameServer_SetMapName(string pszMapName)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServer _ptr is null!");
        Platform.Mac.Native.SteamAPI_ISteamGameServer_SetMapName(this._ptr, pszMapName);
      }

      public virtual void ISteamGameServer_SetPasswordProtected([MarshalAs(UnmanagedType.U1)] bool bPasswordProtected)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServer _ptr is null!");
        Platform.Mac.Native.SteamAPI_ISteamGameServer_SetPasswordProtected(this._ptr, bPasswordProtected);
      }

      public virtual void ISteamGameServer_SetSpectatorPort(ushort unSpectatorPort)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServer _ptr is null!");
        Platform.Mac.Native.SteamAPI_ISteamGameServer_SetSpectatorPort(this._ptr, unSpectatorPort);
      }

      public virtual void ISteamGameServer_SetSpectatorServerName(string pszSpectatorServerName)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServer _ptr is null!");
        Platform.Mac.Native.SteamAPI_ISteamGameServer_SetSpectatorServerName(this._ptr, pszSpectatorServerName);
      }

      public virtual void ISteamGameServer_ClearAllKeyValues()
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServer _ptr is null!");
        Platform.Mac.Native.SteamAPI_ISteamGameServer_ClearAllKeyValues(this._ptr);
      }

      public virtual void ISteamGameServer_SetKeyValue(string pKey, string pValue)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServer _ptr is null!");
        Platform.Mac.Native.SteamAPI_ISteamGameServer_SetKeyValue(this._ptr, pKey, pValue);
      }

      public virtual void ISteamGameServer_SetGameTags(string pchGameTags)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServer _ptr is null!");
        Platform.Mac.Native.SteamAPI_ISteamGameServer_SetGameTags(this._ptr, pchGameTags);
      }

      public virtual void ISteamGameServer_SetGameData(string pchGameData)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServer _ptr is null!");
        Platform.Mac.Native.SteamAPI_ISteamGameServer_SetGameData(this._ptr, pchGameData);
      }

      public virtual void ISteamGameServer_SetRegion(string pszRegion)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServer _ptr is null!");
        Platform.Mac.Native.SteamAPI_ISteamGameServer_SetRegion(this._ptr, pszRegion);
      }

      public virtual bool ISteamGameServer_SendUserConnectAndAuthenticate(
        uint unIPClient,
        IntPtr pvAuthBlob,
        uint cubAuthBlobSize,
        out ulong pSteamIDUser)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServer _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamGameServer_SendUserConnectAndAuthenticate(this._ptr, unIPClient, pvAuthBlob, cubAuthBlobSize, out pSteamIDUser);
      }

      public virtual CSteamID ISteamGameServer_CreateUnauthenticatedUserConnection()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamGameServer_CreateUnauthenticatedUserConnection(this._ptr) : throw new Exception("ISteamGameServer _ptr is null!");
      }

      public virtual void ISteamGameServer_SendUserDisconnect(ulong steamIDUser)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServer _ptr is null!");
        Platform.Mac.Native.SteamAPI_ISteamGameServer_SendUserDisconnect(this._ptr, steamIDUser);
      }

      public virtual bool ISteamGameServer_BUpdateUserData(
        ulong steamIDUser,
        string pchPlayerName,
        uint uScore)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServer _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamGameServer_BUpdateUserData(this._ptr, steamIDUser, pchPlayerName, uScore);
      }

      public virtual HAuthTicket ISteamGameServer_GetAuthSessionTicket(
        IntPtr pTicket,
        int cbMaxTicket,
        out uint pcbTicket)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServer _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamGameServer_GetAuthSessionTicket(this._ptr, pTicket, cbMaxTicket, out pcbTicket);
      }

      public virtual BeginAuthSessionResult ISteamGameServer_BeginAuthSession(
        IntPtr pAuthTicket,
        int cbAuthTicket,
        ulong steamID)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServer _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamGameServer_BeginAuthSession(this._ptr, pAuthTicket, cbAuthTicket, steamID);
      }

      public virtual void ISteamGameServer_EndAuthSession(ulong steamID)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServer _ptr is null!");
        Platform.Mac.Native.SteamAPI_ISteamGameServer_EndAuthSession(this._ptr, steamID);
      }

      public virtual void ISteamGameServer_CancelAuthTicket(uint hAuthTicket)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServer _ptr is null!");
        Platform.Mac.Native.SteamAPI_ISteamGameServer_CancelAuthTicket(this._ptr, hAuthTicket);
      }

      public virtual UserHasLicenseForAppResult ISteamGameServer_UserHasLicenseForApp(
        ulong steamID,
        uint appID)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServer _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamGameServer_UserHasLicenseForApp(this._ptr, steamID, appID);
      }

      public virtual bool ISteamGameServer_RequestUserGroupStatus(
        ulong steamIDUser,
        ulong steamIDGroup)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServer _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamGameServer_RequestUserGroupStatus(this._ptr, steamIDUser, steamIDGroup);
      }

      public virtual void ISteamGameServer_GetGameplayStats()
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServer _ptr is null!");
        Platform.Mac.Native.SteamAPI_ISteamGameServer_GetGameplayStats(this._ptr);
      }

      public virtual SteamAPICall_t ISteamGameServer_GetServerReputation()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamGameServer_GetServerReputation(this._ptr) : throw new Exception("ISteamGameServer _ptr is null!");
      }

      public virtual uint ISteamGameServer_GetPublicIP()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamGameServer_GetPublicIP(this._ptr) : throw new Exception("ISteamGameServer _ptr is null!");
      }

      public virtual bool ISteamGameServer_HandleIncomingPacket(
        IntPtr pData,
        int cbData,
        uint srcIP,
        ushort srcPort)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServer _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamGameServer_HandleIncomingPacket(this._ptr, pData, cbData, srcIP, srcPort);
      }

      public virtual int ISteamGameServer_GetNextOutgoingPacket(
        IntPtr pOut,
        int cbMaxOut,
        out uint pNetAdr,
        out ushort pPort)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServer _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamGameServer_GetNextOutgoingPacket(this._ptr, pOut, cbMaxOut, out pNetAdr, out pPort);
      }

      public virtual void ISteamGameServer_EnableHeartbeats([MarshalAs(UnmanagedType.U1)] bool bActive)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServer _ptr is null!");
        Platform.Mac.Native.SteamAPI_ISteamGameServer_EnableHeartbeats(this._ptr, bActive);
      }

      public virtual void ISteamGameServer_SetHeartbeatInterval(int iHeartbeatInterval)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServer _ptr is null!");
        Platform.Mac.Native.SteamAPI_ISteamGameServer_SetHeartbeatInterval(this._ptr, iHeartbeatInterval);
      }

      public virtual void ISteamGameServer_ForceHeartbeat()
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServer _ptr is null!");
        Platform.Mac.Native.SteamAPI_ISteamGameServer_ForceHeartbeat(this._ptr);
      }

      public virtual SteamAPICall_t ISteamGameServer_AssociateWithClan(ulong steamIDClan)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamGameServer_AssociateWithClan(this._ptr, steamIDClan) : throw new Exception("ISteamGameServer _ptr is null!");
      }

      public virtual SteamAPICall_t ISteamGameServer_ComputeNewPlayerCompatibility(
        ulong steamIDNewPlayer)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamGameServer_ComputeNewPlayerCompatibility(this._ptr, steamIDNewPlayer) : throw new Exception("ISteamGameServer _ptr is null!");
      }

      public virtual SteamAPICall_t ISteamGameServerStats_RequestUserStats(ulong steamIDUser)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamGameServerStats_RequestUserStats(this._ptr, steamIDUser) : throw new Exception("ISteamGameServerStats _ptr is null!");
      }

      public virtual bool ISteamGameServerStats_GetUserStat(
        ulong steamIDUser,
        string pchName,
        out int pData)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServerStats _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamGameServerStats_GetUserStat(this._ptr, steamIDUser, pchName, out pData);
      }

      public virtual bool ISteamGameServerStats_GetUserStat0(
        ulong steamIDUser,
        string pchName,
        out float pData)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServerStats _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamGameServerStats_GetUserStat0(this._ptr, steamIDUser, pchName, out pData);
      }

      public virtual bool ISteamGameServerStats_GetUserAchievement(
        ulong steamIDUser,
        string pchName,
        [MarshalAs(UnmanagedType.U1)] ref bool pbAchieved)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServerStats _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamGameServerStats_GetUserAchievement(this._ptr, steamIDUser, pchName, ref pbAchieved);
      }

      public virtual bool ISteamGameServerStats_SetUserStat(
        ulong steamIDUser,
        string pchName,
        int nData)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServerStats _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamGameServerStats_SetUserStat(this._ptr, steamIDUser, pchName, nData);
      }

      public virtual bool ISteamGameServerStats_SetUserStat0(
        ulong steamIDUser,
        string pchName,
        float fData)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServerStats _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamGameServerStats_SetUserStat0(this._ptr, steamIDUser, pchName, fData);
      }

      public virtual bool ISteamGameServerStats_UpdateUserAvgRateStat(
        ulong steamIDUser,
        string pchName,
        float flCountThisSession,
        double dSessionLength)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServerStats _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamGameServerStats_UpdateUserAvgRateStat(this._ptr, steamIDUser, pchName, flCountThisSession, dSessionLength);
      }

      public virtual bool ISteamGameServerStats_SetUserAchievement(
        ulong steamIDUser,
        string pchName)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServerStats _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamGameServerStats_SetUserAchievement(this._ptr, steamIDUser, pchName);
      }

      public virtual bool ISteamGameServerStats_ClearUserAchievement(
        ulong steamIDUser,
        string pchName)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServerStats _ptr is null!");
        return Platform.Mac.Native.SteamAPI_ISteamGameServerStats_ClearUserAchievement(this._ptr, steamIDUser, pchName);
      }

      public virtual SteamAPICall_t ISteamGameServerStats_StoreUserStats(ulong steamIDUser)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Mac.Native.SteamAPI_ISteamGameServerStats_StoreUserStats(this._ptr, steamIDUser) : throw new Exception("ISteamGameServerStats _ptr is null!");
      }

      public virtual bool SteamApi_SteamAPI_Init() => Platform.Mac.Native.SteamAPI_Init();

      public virtual void SteamApi_SteamAPI_RunCallbacks()
      {
        Platform.Mac.Native.SteamAPI_RunCallbacks();
      }

      public virtual void SteamApi_SteamGameServer_RunCallbacks()
      {
        Platform.Mac.Native.SteamGameServer_RunCallbacks();
      }

      public virtual void SteamApi_SteamAPI_RegisterCallback(IntPtr pCallback, int callback)
      {
        Platform.Mac.Native.SteamAPI_RegisterCallback(pCallback, callback);
      }

      public virtual void SteamApi_SteamAPI_UnregisterCallback(IntPtr pCallback)
      {
        Platform.Mac.Native.SteamAPI_UnregisterCallback(pCallback);
      }

      public virtual void SteamApi_SteamAPI_RegisterCallResult(IntPtr pCallback, ulong callback)
      {
        Platform.Mac.Native.SteamAPI_RegisterCallResult(pCallback, callback);
      }

      public virtual void SteamApi_SteamAPI_UnregisterCallResult(IntPtr pCallback, ulong callback)
      {
        Platform.Mac.Native.SteamAPI_UnregisterCallResult(pCallback, callback);
      }

      public virtual bool SteamApi_SteamInternal_GameServer_Init(
        uint unIP,
        ushort usPort,
        ushort usGamePort,
        ushort usQueryPort,
        int eServerMode,
        string pchVersionString)
      {
        return Platform.Mac.Native.SteamInternal_GameServer_Init(unIP, usPort, usGamePort, usQueryPort, eServerMode, pchVersionString);
      }

      public virtual void SteamApi_SteamAPI_Shutdown() => Platform.Mac.Native.SteamAPI_Shutdown();

      public virtual void SteamApi_SteamGameServer_Shutdown()
      {
        Platform.Mac.Native.SteamGameServer_Shutdown();
      }

      public virtual HSteamUser SteamApi_SteamAPI_GetHSteamUser()
      {
        return Platform.Mac.Native.SteamAPI_GetHSteamUser();
      }

      public virtual HSteamPipe SteamApi_SteamAPI_GetHSteamPipe()
      {
        return Platform.Mac.Native.SteamAPI_GetHSteamPipe();
      }

      public virtual HSteamUser SteamApi_SteamGameServer_GetHSteamUser()
      {
        return Platform.Mac.Native.SteamGameServer_GetHSteamUser();
      }

      public virtual HSteamPipe SteamApi_SteamGameServer_GetHSteamPipe()
      {
        return Platform.Mac.Native.SteamGameServer_GetHSteamPipe();
      }

      public virtual IntPtr SteamApi_SteamInternal_CreateInterface(string version)
      {
        return Platform.Mac.Native.SteamInternal_CreateInterface(version);
      }

      public virtual bool SteamApi_SteamAPI_RestartAppIfNecessary(uint unOwnAppID)
      {
        return Platform.Mac.Native.SteamAPI_RestartAppIfNecessary(unOwnAppID);
      }

      internal static class Native
      {
        [DllImport("libsteam_api.dylib")]
        internal static extern HSteamPipe SteamAPI_ISteamClient_CreateSteamPipe(IntPtr ISteamClient);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamClient_BReleaseSteamPipe(
          IntPtr ISteamClient,
          int hSteamPipe);

        [DllImport("libsteam_api.dylib")]
        internal static extern HSteamUser SteamAPI_ISteamClient_ConnectToGlobalUser(
          IntPtr ISteamClient,
          int hSteamPipe);

        [DllImport("libsteam_api.dylib")]
        internal static extern HSteamUser SteamAPI_ISteamClient_CreateLocalUser(
          IntPtr ISteamClient,
          out int phSteamPipe,
          AccountType eAccountType);

        [DllImport("libsteam_api.dylib")]
        internal static extern void SteamAPI_ISteamClient_ReleaseUser(
          IntPtr ISteamClient,
          int hSteamPipe,
          int hUser);

        [DllImport("libsteam_api.dylib")]
        internal static extern IntPtr SteamAPI_ISteamClient_GetISteamUser(
          IntPtr ISteamClient,
          int hSteamUser,
          int hSteamPipe,
          string pchVersion);

        [DllImport("libsteam_api.dylib")]
        internal static extern IntPtr SteamAPI_ISteamClient_GetISteamGameServer(
          IntPtr ISteamClient,
          int hSteamUser,
          int hSteamPipe,
          string pchVersion);

        [DllImport("libsteam_api.dylib")]
        internal static extern void SteamAPI_ISteamClient_SetLocalIPBinding(
          IntPtr ISteamClient,
          uint unIP,
          ushort usPort);

        [DllImport("libsteam_api.dylib")]
        internal static extern IntPtr SteamAPI_ISteamClient_GetISteamFriends(
          IntPtr ISteamClient,
          int hSteamUser,
          int hSteamPipe,
          string pchVersion);

        [DllImport("libsteam_api.dylib")]
        internal static extern IntPtr SteamAPI_ISteamClient_GetISteamUtils(
          IntPtr ISteamClient,
          int hSteamPipe,
          string pchVersion);

        [DllImport("libsteam_api.dylib")]
        internal static extern IntPtr SteamAPI_ISteamClient_GetISteamMatchmaking(
          IntPtr ISteamClient,
          int hSteamUser,
          int hSteamPipe,
          string pchVersion);

        [DllImport("libsteam_api.dylib")]
        internal static extern IntPtr SteamAPI_ISteamClient_GetISteamMatchmakingServers(
          IntPtr ISteamClient,
          int hSteamUser,
          int hSteamPipe,
          string pchVersion);

        [DllImport("libsteam_api.dylib")]
        internal static extern IntPtr SteamAPI_ISteamClient_GetISteamGenericInterface(
          IntPtr ISteamClient,
          int hSteamUser,
          int hSteamPipe,
          string pchVersion);

        [DllImport("libsteam_api.dylib")]
        internal static extern IntPtr SteamAPI_ISteamClient_GetISteamUserStats(
          IntPtr ISteamClient,
          int hSteamUser,
          int hSteamPipe,
          string pchVersion);

        [DllImport("libsteam_api.dylib")]
        internal static extern IntPtr SteamAPI_ISteamClient_GetISteamGameServerStats(
          IntPtr ISteamClient,
          int hSteamuser,
          int hSteamPipe,
          string pchVersion);

        [DllImport("libsteam_api.dylib")]
        internal static extern IntPtr SteamAPI_ISteamClient_GetISteamApps(
          IntPtr ISteamClient,
          int hSteamUser,
          int hSteamPipe,
          string pchVersion);

        [DllImport("libsteam_api.dylib")]
        internal static extern IntPtr SteamAPI_ISteamClient_GetISteamNetworking(
          IntPtr ISteamClient,
          int hSteamUser,
          int hSteamPipe,
          string pchVersion);

        [DllImport("libsteam_api.dylib")]
        internal static extern IntPtr SteamAPI_ISteamClient_GetISteamRemoteStorage(
          IntPtr ISteamClient,
          int hSteamuser,
          int hSteamPipe,
          string pchVersion);

        [DllImport("libsteam_api.dylib")]
        internal static extern IntPtr SteamAPI_ISteamClient_GetISteamScreenshots(
          IntPtr ISteamClient,
          int hSteamuser,
          int hSteamPipe,
          string pchVersion);

        [DllImport("libsteam_api.dylib")]
        internal static extern uint SteamAPI_ISteamClient_GetIPCCallCount(IntPtr ISteamClient);

        [DllImport("libsteam_api.dylib")]
        internal static extern void SteamAPI_ISteamClient_SetWarningMessageHook(
          IntPtr ISteamClient,
          IntPtr pFunction);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamClient_BShutdownIfAllPipesClosed(
          IntPtr ISteamClient);

        [DllImport("libsteam_api.dylib")]
        internal static extern IntPtr SteamAPI_ISteamClient_GetISteamHTTP(
          IntPtr ISteamClient,
          int hSteamuser,
          int hSteamPipe,
          string pchVersion);

        [DllImport("libsteam_api.dylib")]
        internal static extern IntPtr SteamAPI_ISteamClient_GetISteamUnifiedMessages(
          IntPtr ISteamClient,
          int hSteamuser,
          int hSteamPipe,
          string pchVersion);

        [DllImport("libsteam_api.dylib")]
        internal static extern IntPtr SteamAPI_ISteamClient_GetISteamController(
          IntPtr ISteamClient,
          int hSteamUser,
          int hSteamPipe,
          string pchVersion);

        [DllImport("libsteam_api.dylib")]
        internal static extern IntPtr SteamAPI_ISteamClient_GetISteamUGC(
          IntPtr ISteamClient,
          int hSteamUser,
          int hSteamPipe,
          string pchVersion);

        [DllImport("libsteam_api.dylib")]
        internal static extern IntPtr SteamAPI_ISteamClient_GetISteamAppList(
          IntPtr ISteamClient,
          int hSteamUser,
          int hSteamPipe,
          string pchVersion);

        [DllImport("libsteam_api.dylib")]
        internal static extern IntPtr SteamAPI_ISteamClient_GetISteamMusic(
          IntPtr ISteamClient,
          int hSteamuser,
          int hSteamPipe,
          string pchVersion);

        [DllImport("libsteam_api.dylib")]
        internal static extern IntPtr SteamAPI_ISteamClient_GetISteamMusicRemote(
          IntPtr ISteamClient,
          int hSteamuser,
          int hSteamPipe,
          string pchVersion);

        [DllImport("libsteam_api.dylib")]
        internal static extern IntPtr SteamAPI_ISteamClient_GetISteamHTMLSurface(
          IntPtr ISteamClient,
          int hSteamuser,
          int hSteamPipe,
          string pchVersion);

        [DllImport("libsteam_api.dylib")]
        internal static extern IntPtr SteamAPI_ISteamClient_GetISteamInventory(
          IntPtr ISteamClient,
          int hSteamuser,
          int hSteamPipe,
          string pchVersion);

        [DllImport("libsteam_api.dylib")]
        internal static extern IntPtr SteamAPI_ISteamClient_GetISteamVideo(
          IntPtr ISteamClient,
          int hSteamuser,
          int hSteamPipe,
          string pchVersion);

        [DllImport("libsteam_api.dylib")]
        internal static extern HSteamUser SteamAPI_ISteamUser_GetHSteamUser(IntPtr ISteamUser);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamUser_BLoggedOn(IntPtr ISteamUser);

        [DllImport("libsteam_api.dylib")]
        internal static extern CSteamID SteamAPI_ISteamUser_GetSteamID(IntPtr ISteamUser);

        [DllImport("libsteam_api.dylib")]
        internal static extern int SteamAPI_ISteamUser_InitiateGameConnection(
          IntPtr ISteamUser,
          IntPtr pAuthBlob,
          int cbMaxAuthBlob,
          ulong steamIDGameServer,
          uint unIPServer,
          ushort usPortServer,
          [MarshalAs(UnmanagedType.U1)] bool bSecure);

        [DllImport("libsteam_api.dylib")]
        internal static extern void SteamAPI_ISteamUser_TerminateGameConnection(
          IntPtr ISteamUser,
          uint unIPServer,
          ushort usPortServer);

        [DllImport("libsteam_api.dylib")]
        internal static extern void SteamAPI_ISteamUser_TrackAppUsageEvent(
          IntPtr ISteamUser,
          ulong gameID,
          int eAppUsageEvent,
          string pchExtraInfo);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamUser_GetUserDataFolder(
          IntPtr ISteamUser,
          StringBuilder pchBuffer,
          int cubBuffer);

        [DllImport("libsteam_api.dylib")]
        internal static extern void SteamAPI_ISteamUser_StartVoiceRecording(IntPtr ISteamUser);

        [DllImport("libsteam_api.dylib")]
        internal static extern void SteamAPI_ISteamUser_StopVoiceRecording(IntPtr ISteamUser);

        [DllImport("libsteam_api.dylib")]
        internal static extern VoiceResult SteamAPI_ISteamUser_GetAvailableVoice(
          IntPtr ISteamUser,
          out uint pcbCompressed,
          out uint pcbUncompressed_Deprecated,
          uint nUncompressedVoiceDesiredSampleRate_Deprecated);

        [DllImport("libsteam_api.dylib")]
        internal static extern VoiceResult SteamAPI_ISteamUser_GetVoice(
          IntPtr ISteamUser,
          [MarshalAs(UnmanagedType.U1)] bool bWantCompressed,
          IntPtr pDestBuffer,
          uint cbDestBufferSize,
          out uint nBytesWritten,
          [MarshalAs(UnmanagedType.U1)] bool bWantUncompressed_Deprecated,
          IntPtr pUncompressedDestBuffer_Deprecated,
          uint cbUncompressedDestBufferSize_Deprecated,
          out uint nUncompressBytesWritten_Deprecated,
          uint nUncompressedVoiceDesiredSampleRate_Deprecated);

        [DllImport("libsteam_api.dylib")]
        internal static extern VoiceResult SteamAPI_ISteamUser_DecompressVoice(
          IntPtr ISteamUser,
          IntPtr pCompressed,
          uint cbCompressed,
          IntPtr pDestBuffer,
          uint cbDestBufferSize,
          out uint nBytesWritten,
          uint nDesiredSampleRate);

        [DllImport("libsteam_api.dylib")]
        internal static extern uint SteamAPI_ISteamUser_GetVoiceOptimalSampleRate(IntPtr ISteamUser);

        [DllImport("libsteam_api.dylib")]
        internal static extern HAuthTicket SteamAPI_ISteamUser_GetAuthSessionTicket(
          IntPtr ISteamUser,
          IntPtr pTicket,
          int cbMaxTicket,
          out uint pcbTicket);

        [DllImport("libsteam_api.dylib")]
        internal static extern BeginAuthSessionResult SteamAPI_ISteamUser_BeginAuthSession(
          IntPtr ISteamUser,
          IntPtr pAuthTicket,
          int cbAuthTicket,
          ulong steamID);

        [DllImport("libsteam_api.dylib")]
        internal static extern void SteamAPI_ISteamUser_EndAuthSession(
          IntPtr ISteamUser,
          ulong steamID);

        [DllImport("libsteam_api.dylib")]
        internal static extern void SteamAPI_ISteamUser_CancelAuthTicket(
          IntPtr ISteamUser,
          uint hAuthTicket);

        [DllImport("libsteam_api.dylib")]
        internal static extern UserHasLicenseForAppResult SteamAPI_ISteamUser_UserHasLicenseForApp(
          IntPtr ISteamUser,
          ulong steamID,
          uint appID);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamUser_BIsBehindNAT(IntPtr ISteamUser);

        [DllImport("libsteam_api.dylib")]
        internal static extern void SteamAPI_ISteamUser_AdvertiseGame(
          IntPtr ISteamUser,
          ulong steamIDGameServer,
          uint unIPServer,
          ushort usPortServer);

        [DllImport("libsteam_api.dylib")]
        internal static extern SteamAPICall_t SteamAPI_ISteamUser_RequestEncryptedAppTicket(
          IntPtr ISteamUser,
          IntPtr pDataToInclude,
          int cbDataToInclude);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamUser_GetEncryptedAppTicket(
          IntPtr ISteamUser,
          IntPtr pTicket,
          int cbMaxTicket,
          out uint pcbTicket);

        [DllImport("libsteam_api.dylib")]
        internal static extern int SteamAPI_ISteamUser_GetGameBadgeLevel(
          IntPtr ISteamUser,
          int nSeries,
          [MarshalAs(UnmanagedType.U1)] bool bFoil);

        [DllImport("libsteam_api.dylib")]
        internal static extern int SteamAPI_ISteamUser_GetPlayerSteamLevel(IntPtr ISteamUser);

        [DllImport("libsteam_api.dylib")]
        internal static extern SteamAPICall_t SteamAPI_ISteamUser_RequestStoreAuthURL(
          IntPtr ISteamUser,
          string pchRedirectURL);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamUser_BIsPhoneVerified(IntPtr ISteamUser);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamUser_BIsTwoFactorEnabled(IntPtr ISteamUser);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamUser_BIsPhoneIdentifying(IntPtr ISteamUser);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamUser_BIsPhoneRequiringVerification(
          IntPtr ISteamUser);

        [DllImport("libsteam_api.dylib")]
        internal static extern IntPtr SteamAPI_ISteamFriends_GetPersonaName(IntPtr ISteamFriends);

        [DllImport("libsteam_api.dylib")]
        internal static extern SteamAPICall_t SteamAPI_ISteamFriends_SetPersonaName(
          IntPtr ISteamFriends,
          string pchPersonaName);

        [DllImport("libsteam_api.dylib")]
        internal static extern PersonaState SteamAPI_ISteamFriends_GetPersonaState(
          IntPtr ISteamFriends);

        [DllImport("libsteam_api.dylib")]
        internal static extern int SteamAPI_ISteamFriends_GetFriendCount(
          IntPtr ISteamFriends,
          int iFriendFlags);

        [DllImport("libsteam_api.dylib")]
        internal static extern CSteamID SteamAPI_ISteamFriends_GetFriendByIndex(
          IntPtr ISteamFriends,
          int iFriend,
          int iFriendFlags);

        [DllImport("libsteam_api.dylib")]
        internal static extern FriendRelationship SteamAPI_ISteamFriends_GetFriendRelationship(
          IntPtr ISteamFriends,
          ulong steamIDFriend);

        [DllImport("libsteam_api.dylib")]
        internal static extern PersonaState SteamAPI_ISteamFriends_GetFriendPersonaState(
          IntPtr ISteamFriends,
          ulong steamIDFriend);

        [DllImport("libsteam_api.dylib")]
        internal static extern IntPtr SteamAPI_ISteamFriends_GetFriendPersonaName(
          IntPtr ISteamFriends,
          ulong steamIDFriend);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamFriends_GetFriendGamePlayed(
          IntPtr ISteamFriends,
          ulong steamIDFriend,
          ref FriendGameInfo_t.PackSmall pFriendGameInfo);

        [DllImport("libsteam_api.dylib")]
        internal static extern IntPtr SteamAPI_ISteamFriends_GetFriendPersonaNameHistory(
          IntPtr ISteamFriends,
          ulong steamIDFriend,
          int iPersonaName);

        [DllImport("libsteam_api.dylib")]
        internal static extern int SteamAPI_ISteamFriends_GetFriendSteamLevel(
          IntPtr ISteamFriends,
          ulong steamIDFriend);

        [DllImport("libsteam_api.dylib")]
        internal static extern IntPtr SteamAPI_ISteamFriends_GetPlayerNickname(
          IntPtr ISteamFriends,
          ulong steamIDPlayer);

        [DllImport("libsteam_api.dylib")]
        internal static extern int SteamAPI_ISteamFriends_GetFriendsGroupCount(IntPtr ISteamFriends);

        [DllImport("libsteam_api.dylib")]
        internal static extern FriendsGroupID_t SteamAPI_ISteamFriends_GetFriendsGroupIDByIndex(
          IntPtr ISteamFriends,
          int iFG);

        [DllImport("libsteam_api.dylib")]
        internal static extern IntPtr SteamAPI_ISteamFriends_GetFriendsGroupName(
          IntPtr ISteamFriends,
          short friendsGroupID);

        [DllImport("libsteam_api.dylib")]
        internal static extern int SteamAPI_ISteamFriends_GetFriendsGroupMembersCount(
          IntPtr ISteamFriends,
          short friendsGroupID);

        [DllImport("libsteam_api.dylib")]
        internal static extern void SteamAPI_ISteamFriends_GetFriendsGroupMembersList(
          IntPtr ISteamFriends,
          short friendsGroupID,
          IntPtr pOutSteamIDMembers,
          int nMembersCount);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamFriends_HasFriend(
          IntPtr ISteamFriends,
          ulong steamIDFriend,
          int iFriendFlags);

        [DllImport("libsteam_api.dylib")]
        internal static extern int SteamAPI_ISteamFriends_GetClanCount(IntPtr ISteamFriends);

        [DllImport("libsteam_api.dylib")]
        internal static extern CSteamID SteamAPI_ISteamFriends_GetClanByIndex(
          IntPtr ISteamFriends,
          int iClan);

        [DllImport("libsteam_api.dylib")]
        internal static extern IntPtr SteamAPI_ISteamFriends_GetClanName(
          IntPtr ISteamFriends,
          ulong steamIDClan);

        [DllImport("libsteam_api.dylib")]
        internal static extern IntPtr SteamAPI_ISteamFriends_GetClanTag(
          IntPtr ISteamFriends,
          ulong steamIDClan);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamFriends_GetClanActivityCounts(
          IntPtr ISteamFriends,
          ulong steamIDClan,
          out int pnOnline,
          out int pnInGame,
          out int pnChatting);

        [DllImport("libsteam_api.dylib")]
        internal static extern SteamAPICall_t SteamAPI_ISteamFriends_DownloadClanActivityCounts(
          IntPtr ISteamFriends,
          IntPtr psteamIDClans,
          int cClansToRequest);

        [DllImport("libsteam_api.dylib")]
        internal static extern int SteamAPI_ISteamFriends_GetFriendCountFromSource(
          IntPtr ISteamFriends,
          ulong steamIDSource);

        [DllImport("libsteam_api.dylib")]
        internal static extern CSteamID SteamAPI_ISteamFriends_GetFriendFromSourceByIndex(
          IntPtr ISteamFriends,
          ulong steamIDSource,
          int iFriend);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamFriends_IsUserInSource(
          IntPtr ISteamFriends,
          ulong steamIDUser,
          ulong steamIDSource);

        [DllImport("libsteam_api.dylib")]
        internal static extern void SteamAPI_ISteamFriends_SetInGameVoiceSpeaking(
          IntPtr ISteamFriends,
          ulong steamIDUser,
          [MarshalAs(UnmanagedType.U1)] bool bSpeaking);

        [DllImport("libsteam_api.dylib")]
        internal static extern void SteamAPI_ISteamFriends_ActivateGameOverlay(
          IntPtr ISteamFriends,
          string pchDialog);

        [DllImport("libsteam_api.dylib")]
        internal static extern void SteamAPI_ISteamFriends_ActivateGameOverlayToUser(
          IntPtr ISteamFriends,
          string pchDialog,
          ulong steamID);

        [DllImport("libsteam_api.dylib")]
        internal static extern void SteamAPI_ISteamFriends_ActivateGameOverlayToWebPage(
          IntPtr ISteamFriends,
          string pchURL);

        [DllImport("libsteam_api.dylib")]
        internal static extern void SteamAPI_ISteamFriends_ActivateGameOverlayToStore(
          IntPtr ISteamFriends,
          uint nAppID,
          OverlayToStoreFlag eFlag);

        [DllImport("libsteam_api.dylib")]
        internal static extern void SteamAPI_ISteamFriends_SetPlayedWith(
          IntPtr ISteamFriends,
          ulong steamIDUserPlayedWith);

        [DllImport("libsteam_api.dylib")]
        internal static extern void SteamAPI_ISteamFriends_ActivateGameOverlayInviteDialog(
          IntPtr ISteamFriends,
          ulong steamIDLobby);

        [DllImport("libsteam_api.dylib")]
        internal static extern int SteamAPI_ISteamFriends_GetSmallFriendAvatar(
          IntPtr ISteamFriends,
          ulong steamIDFriend);

        [DllImport("libsteam_api.dylib")]
        internal static extern int SteamAPI_ISteamFriends_GetMediumFriendAvatar(
          IntPtr ISteamFriends,
          ulong steamIDFriend);

        [DllImport("libsteam_api.dylib")]
        internal static extern int SteamAPI_ISteamFriends_GetLargeFriendAvatar(
          IntPtr ISteamFriends,
          ulong steamIDFriend);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamFriends_RequestUserInformation(
          IntPtr ISteamFriends,
          ulong steamIDUser,
          [MarshalAs(UnmanagedType.U1)] bool bRequireNameOnly);

        [DllImport("libsteam_api.dylib")]
        internal static extern SteamAPICall_t SteamAPI_ISteamFriends_RequestClanOfficerList(
          IntPtr ISteamFriends,
          ulong steamIDClan);

        [DllImport("libsteam_api.dylib")]
        internal static extern CSteamID SteamAPI_ISteamFriends_GetClanOwner(
          IntPtr ISteamFriends,
          ulong steamIDClan);

        [DllImport("libsteam_api.dylib")]
        internal static extern int SteamAPI_ISteamFriends_GetClanOfficerCount(
          IntPtr ISteamFriends,
          ulong steamIDClan);

        [DllImport("libsteam_api.dylib")]
        internal static extern CSteamID SteamAPI_ISteamFriends_GetClanOfficerByIndex(
          IntPtr ISteamFriends,
          ulong steamIDClan,
          int iOfficer);

        [DllImport("libsteam_api.dylib")]
        internal static extern uint SteamAPI_ISteamFriends_GetUserRestrictions(IntPtr ISteamFriends);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamFriends_SetRichPresence(
          IntPtr ISteamFriends,
          string pchKey,
          string pchValue);

        [DllImport("libsteam_api.dylib")]
        internal static extern void SteamAPI_ISteamFriends_ClearRichPresence(IntPtr ISteamFriends);

        [DllImport("libsteam_api.dylib")]
        internal static extern IntPtr SteamAPI_ISteamFriends_GetFriendRichPresence(
          IntPtr ISteamFriends,
          ulong steamIDFriend,
          string pchKey);

        [DllImport("libsteam_api.dylib")]
        internal static extern int SteamAPI_ISteamFriends_GetFriendRichPresenceKeyCount(
          IntPtr ISteamFriends,
          ulong steamIDFriend);

        [DllImport("libsteam_api.dylib")]
        internal static extern IntPtr SteamAPI_ISteamFriends_GetFriendRichPresenceKeyByIndex(
          IntPtr ISteamFriends,
          ulong steamIDFriend,
          int iKey);

        [DllImport("libsteam_api.dylib")]
        internal static extern void SteamAPI_ISteamFriends_RequestFriendRichPresence(
          IntPtr ISteamFriends,
          ulong steamIDFriend);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamFriends_InviteUserToGame(
          IntPtr ISteamFriends,
          ulong steamIDFriend,
          string pchConnectString);

        [DllImport("libsteam_api.dylib")]
        internal static extern int SteamAPI_ISteamFriends_GetCoplayFriendCount(IntPtr ISteamFriends);

        [DllImport("libsteam_api.dylib")]
        internal static extern CSteamID SteamAPI_ISteamFriends_GetCoplayFriend(
          IntPtr ISteamFriends,
          int iCoplayFriend);

        [DllImport("libsteam_api.dylib")]
        internal static extern int SteamAPI_ISteamFriends_GetFriendCoplayTime(
          IntPtr ISteamFriends,
          ulong steamIDFriend);

        [DllImport("libsteam_api.dylib")]
        internal static extern AppId_t SteamAPI_ISteamFriends_GetFriendCoplayGame(
          IntPtr ISteamFriends,
          ulong steamIDFriend);

        [DllImport("libsteam_api.dylib")]
        internal static extern SteamAPICall_t SteamAPI_ISteamFriends_JoinClanChatRoom(
          IntPtr ISteamFriends,
          ulong steamIDClan);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamFriends_LeaveClanChatRoom(
          IntPtr ISteamFriends,
          ulong steamIDClan);

        [DllImport("libsteam_api.dylib")]
        internal static extern int SteamAPI_ISteamFriends_GetClanChatMemberCount(
          IntPtr ISteamFriends,
          ulong steamIDClan);

        [DllImport("libsteam_api.dylib")]
        internal static extern CSteamID SteamAPI_ISteamFriends_GetChatMemberByIndex(
          IntPtr ISteamFriends,
          ulong steamIDClan,
          int iUser);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamFriends_SendClanChatMessage(
          IntPtr ISteamFriends,
          ulong steamIDClanChat,
          string pchText);

        [DllImport("libsteam_api.dylib")]
        internal static extern int SteamAPI_ISteamFriends_GetClanChatMessage(
          IntPtr ISteamFriends,
          ulong steamIDClanChat,
          int iMessage,
          IntPtr prgchText,
          int cchTextMax,
          out ChatEntryType peChatEntryType,
          out ulong psteamidChatter);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamFriends_IsClanChatAdmin(
          IntPtr ISteamFriends,
          ulong steamIDClanChat,
          ulong steamIDUser);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamFriends_IsClanChatWindowOpenInSteam(
          IntPtr ISteamFriends,
          ulong steamIDClanChat);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamFriends_OpenClanChatWindowInSteam(
          IntPtr ISteamFriends,
          ulong steamIDClanChat);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamFriends_CloseClanChatWindowInSteam(
          IntPtr ISteamFriends,
          ulong steamIDClanChat);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamFriends_SetListenForFriendsMessages(
          IntPtr ISteamFriends,
          [MarshalAs(UnmanagedType.U1)] bool bInterceptEnabled);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamFriends_ReplyToFriendMessage(
          IntPtr ISteamFriends,
          ulong steamIDFriend,
          string pchMsgToSend);

        [DllImport("libsteam_api.dylib")]
        internal static extern int SteamAPI_ISteamFriends_GetFriendMessage(
          IntPtr ISteamFriends,
          ulong steamIDFriend,
          int iMessageID,
          IntPtr pvData,
          int cubData,
          out ChatEntryType peChatEntryType);

        [DllImport("libsteam_api.dylib")]
        internal static extern SteamAPICall_t SteamAPI_ISteamFriends_GetFollowerCount(
          IntPtr ISteamFriends,
          ulong steamID);

        [DllImport("libsteam_api.dylib")]
        internal static extern SteamAPICall_t SteamAPI_ISteamFriends_IsFollowing(
          IntPtr ISteamFriends,
          ulong steamID);

        [DllImport("libsteam_api.dylib")]
        internal static extern SteamAPICall_t SteamAPI_ISteamFriends_EnumerateFollowingList(
          IntPtr ISteamFriends,
          uint unStartIndex);

        [DllImport("libsteam_api.dylib")]
        internal static extern uint SteamAPI_ISteamUtils_GetSecondsSinceAppActive(IntPtr ISteamUtils);

        [DllImport("libsteam_api.dylib")]
        internal static extern uint SteamAPI_ISteamUtils_GetSecondsSinceComputerActive(
          IntPtr ISteamUtils);

        [DllImport("libsteam_api.dylib")]
        internal static extern Universe SteamAPI_ISteamUtils_GetConnectedUniverse(IntPtr ISteamUtils);

        [DllImport("libsteam_api.dylib")]
        internal static extern uint SteamAPI_ISteamUtils_GetServerRealTime(IntPtr ISteamUtils);

        [DllImport("libsteam_api.dylib")]
        internal static extern IntPtr SteamAPI_ISteamUtils_GetIPCountry(IntPtr ISteamUtils);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamUtils_GetImageSize(
          IntPtr ISteamUtils,
          int iImage,
          out uint pnWidth,
          out uint pnHeight);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamUtils_GetImageRGBA(
          IntPtr ISteamUtils,
          int iImage,
          IntPtr pubDest,
          int nDestBufferSize);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamUtils_GetCSERIPPort(
          IntPtr ISteamUtils,
          out uint unIP,
          out ushort usPort);

        [DllImport("libsteam_api.dylib")]
        internal static extern byte SteamAPI_ISteamUtils_GetCurrentBatteryPower(IntPtr ISteamUtils);

        [DllImport("libsteam_api.dylib")]
        internal static extern uint SteamAPI_ISteamUtils_GetAppID(IntPtr ISteamUtils);

        [DllImport("libsteam_api.dylib")]
        internal static extern void SteamAPI_ISteamUtils_SetOverlayNotificationPosition(
          IntPtr ISteamUtils,
          NotificationPosition eNotificationPosition);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamUtils_IsAPICallCompleted(
          IntPtr ISteamUtils,
          ulong hSteamAPICall,
          [MarshalAs(UnmanagedType.U1)] ref bool pbFailed);

        [DllImport("libsteam_api.dylib")]
        internal static extern SteamAPICallFailure SteamAPI_ISteamUtils_GetAPICallFailureReason(
          IntPtr ISteamUtils,
          ulong hSteamAPICall);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamUtils_GetAPICallResult(
          IntPtr ISteamUtils,
          ulong hSteamAPICall,
          IntPtr pCallback,
          int cubCallback,
          int iCallbackExpected,
          [MarshalAs(UnmanagedType.U1)] ref bool pbFailed);

        [DllImport("libsteam_api.dylib")]
        internal static extern uint SteamAPI_ISteamUtils_GetIPCCallCount(IntPtr ISteamUtils);

        [DllImport("libsteam_api.dylib")]
        internal static extern void SteamAPI_ISteamUtils_SetWarningMessageHook(
          IntPtr ISteamUtils,
          IntPtr pFunction);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamUtils_IsOverlayEnabled(IntPtr ISteamUtils);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamUtils_BOverlayNeedsPresent(IntPtr ISteamUtils);

        [DllImport("libsteam_api.dylib")]
        internal static extern SteamAPICall_t SteamAPI_ISteamUtils_CheckFileSignature(
          IntPtr ISteamUtils,
          string szFileName);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamUtils_ShowGamepadTextInput(
          IntPtr ISteamUtils,
          GamepadTextInputMode eInputMode,
          GamepadTextInputLineMode eLineInputMode,
          string pchDescription,
          uint unCharMax,
          string pchExistingText);

        [DllImport("libsteam_api.dylib")]
        internal static extern uint SteamAPI_ISteamUtils_GetEnteredGamepadTextLength(
          IntPtr ISteamUtils);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamUtils_GetEnteredGamepadTextInput(
          IntPtr ISteamUtils,
          StringBuilder pchText,
          uint cchText);

        [DllImport("libsteam_api.dylib")]
        internal static extern IntPtr SteamAPI_ISteamUtils_GetSteamUILanguage(IntPtr ISteamUtils);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamUtils_IsSteamRunningInVR(IntPtr ISteamUtils);

        [DllImport("libsteam_api.dylib")]
        internal static extern void SteamAPI_ISteamUtils_SetOverlayNotificationInset(
          IntPtr ISteamUtils,
          int nHorizontalInset,
          int nVerticalInset);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamUtils_IsSteamInBigPictureMode(IntPtr ISteamUtils);

        [DllImport("libsteam_api.dylib")]
        internal static extern void SteamAPI_ISteamUtils_StartVRDashboard(IntPtr ISteamUtils);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamUtils_IsVRHeadsetStreamingEnabled(
          IntPtr ISteamUtils);

        [DllImport("libsteam_api.dylib")]
        internal static extern void SteamAPI_ISteamUtils_SetVRHeadsetStreamingEnabled(
          IntPtr ISteamUtils,
          [MarshalAs(UnmanagedType.U1)] bool bEnabled);

        [DllImport("libsteam_api.dylib")]
        internal static extern int SteamAPI_ISteamMatchmaking_GetFavoriteGameCount(
          IntPtr ISteamMatchmaking);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamMatchmaking_GetFavoriteGame(
          IntPtr ISteamMatchmaking,
          int iGame,
          ref uint pnAppID,
          out uint pnIP,
          out ushort pnConnPort,
          out ushort pnQueryPort,
          out uint punFlags,
          out uint pRTime32LastPlayedOnServer);

        [DllImport("libsteam_api.dylib")]
        internal static extern int SteamAPI_ISteamMatchmaking_AddFavoriteGame(
          IntPtr ISteamMatchmaking,
          uint nAppID,
          uint nIP,
          ushort nConnPort,
          ushort nQueryPort,
          uint unFlags,
          uint rTime32LastPlayedOnServer);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamMatchmaking_RemoveFavoriteGame(
          IntPtr ISteamMatchmaking,
          uint nAppID,
          uint nIP,
          ushort nConnPort,
          ushort nQueryPort,
          uint unFlags);

        [DllImport("libsteam_api.dylib")]
        internal static extern SteamAPICall_t SteamAPI_ISteamMatchmaking_RequestLobbyList(
          IntPtr ISteamMatchmaking);

        [DllImport("libsteam_api.dylib")]
        internal static extern void SteamAPI_ISteamMatchmaking_AddRequestLobbyListStringFilter(
          IntPtr ISteamMatchmaking,
          string pchKeyToMatch,
          string pchValueToMatch,
          LobbyComparison eComparisonType);

        [DllImport("libsteam_api.dylib")]
        internal static extern void SteamAPI_ISteamMatchmaking_AddRequestLobbyListNumericalFilter(
          IntPtr ISteamMatchmaking,
          string pchKeyToMatch,
          int nValueToMatch,
          LobbyComparison eComparisonType);

        [DllImport("libsteam_api.dylib")]
        internal static extern void SteamAPI_ISteamMatchmaking_AddRequestLobbyListNearValueFilter(
          IntPtr ISteamMatchmaking,
          string pchKeyToMatch,
          int nValueToBeCloseTo);

        [DllImport("libsteam_api.dylib")]
        internal static extern void SteamAPI_ISteamMatchmaking_AddRequestLobbyListFilterSlotsAvailable(
          IntPtr ISteamMatchmaking,
          int nSlotsAvailable);

        [DllImport("libsteam_api.dylib")]
        internal static extern void SteamAPI_ISteamMatchmaking_AddRequestLobbyListDistanceFilter(
          IntPtr ISteamMatchmaking,
          LobbyDistanceFilter eLobbyDistanceFilter);

        [DllImport("libsteam_api.dylib")]
        internal static extern void SteamAPI_ISteamMatchmaking_AddRequestLobbyListResultCountFilter(
          IntPtr ISteamMatchmaking,
          int cMaxResults);

        [DllImport("libsteam_api.dylib")]
        internal static extern void SteamAPI_ISteamMatchmaking_AddRequestLobbyListCompatibleMembersFilter(
          IntPtr ISteamMatchmaking,
          ulong steamIDLobby);

        [DllImport("libsteam_api.dylib")]
        internal static extern CSteamID SteamAPI_ISteamMatchmaking_GetLobbyByIndex(
          IntPtr ISteamMatchmaking,
          int iLobby);

        [DllImport("libsteam_api.dylib")]
        internal static extern SteamAPICall_t SteamAPI_ISteamMatchmaking_CreateLobby(
          IntPtr ISteamMatchmaking,
          LobbyType eLobbyType,
          int cMaxMembers);

        [DllImport("libsteam_api.dylib")]
        internal static extern SteamAPICall_t SteamAPI_ISteamMatchmaking_JoinLobby(
          IntPtr ISteamMatchmaking,
          ulong steamIDLobby);

        [DllImport("libsteam_api.dylib")]
        internal static extern void SteamAPI_ISteamMatchmaking_LeaveLobby(
          IntPtr ISteamMatchmaking,
          ulong steamIDLobby);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamMatchmaking_InviteUserToLobby(
          IntPtr ISteamMatchmaking,
          ulong steamIDLobby,
          ulong steamIDInvitee);

        [DllImport("libsteam_api.dylib")]
        internal static extern int SteamAPI_ISteamMatchmaking_GetNumLobbyMembers(
          IntPtr ISteamMatchmaking,
          ulong steamIDLobby);

        [DllImport("libsteam_api.dylib")]
        internal static extern CSteamID SteamAPI_ISteamMatchmaking_GetLobbyMemberByIndex(
          IntPtr ISteamMatchmaking,
          ulong steamIDLobby,
          int iMember);

        [DllImport("libsteam_api.dylib")]
        internal static extern IntPtr SteamAPI_ISteamMatchmaking_GetLobbyData(
          IntPtr ISteamMatchmaking,
          ulong steamIDLobby,
          string pchKey);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamMatchmaking_SetLobbyData(
          IntPtr ISteamMatchmaking,
          ulong steamIDLobby,
          string pchKey,
          string pchValue);

        [DllImport("libsteam_api.dylib")]
        internal static extern int SteamAPI_ISteamMatchmaking_GetLobbyDataCount(
          IntPtr ISteamMatchmaking,
          ulong steamIDLobby);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamMatchmaking_GetLobbyDataByIndex(
          IntPtr ISteamMatchmaking,
          ulong steamIDLobby,
          int iLobbyData,
          StringBuilder pchKey,
          int cchKeyBufferSize,
          StringBuilder pchValue,
          int cchValueBufferSize);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamMatchmaking_DeleteLobbyData(
          IntPtr ISteamMatchmaking,
          ulong steamIDLobby,
          string pchKey);

        [DllImport("libsteam_api.dylib")]
        internal static extern IntPtr SteamAPI_ISteamMatchmaking_GetLobbyMemberData(
          IntPtr ISteamMatchmaking,
          ulong steamIDLobby,
          ulong steamIDUser,
          string pchKey);

        [DllImport("libsteam_api.dylib")]
        internal static extern void SteamAPI_ISteamMatchmaking_SetLobbyMemberData(
          IntPtr ISteamMatchmaking,
          ulong steamIDLobby,
          string pchKey,
          string pchValue);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamMatchmaking_SendLobbyChatMsg(
          IntPtr ISteamMatchmaking,
          ulong steamIDLobby,
          IntPtr pvMsgBody,
          int cubMsgBody);

        [DllImport("libsteam_api.dylib")]
        internal static extern int SteamAPI_ISteamMatchmaking_GetLobbyChatEntry(
          IntPtr ISteamMatchmaking,
          ulong steamIDLobby,
          int iChatID,
          out ulong pSteamIDUser,
          IntPtr pvData,
          int cubData,
          out ChatEntryType peChatEntryType);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamMatchmaking_RequestLobbyData(
          IntPtr ISteamMatchmaking,
          ulong steamIDLobby);

        [DllImport("libsteam_api.dylib")]
        internal static extern void SteamAPI_ISteamMatchmaking_SetLobbyGameServer(
          IntPtr ISteamMatchmaking,
          ulong steamIDLobby,
          uint unGameServerIP,
          ushort unGameServerPort,
          ulong steamIDGameServer);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamMatchmaking_GetLobbyGameServer(
          IntPtr ISteamMatchmaking,
          ulong steamIDLobby,
          out uint punGameServerIP,
          out ushort punGameServerPort,
          out ulong psteamIDGameServer);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamMatchmaking_SetLobbyMemberLimit(
          IntPtr ISteamMatchmaking,
          ulong steamIDLobby,
          int cMaxMembers);

        [DllImport("libsteam_api.dylib")]
        internal static extern int SteamAPI_ISteamMatchmaking_GetLobbyMemberLimit(
          IntPtr ISteamMatchmaking,
          ulong steamIDLobby);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamMatchmaking_SetLobbyType(
          IntPtr ISteamMatchmaking,
          ulong steamIDLobby,
          LobbyType eLobbyType);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamMatchmaking_SetLobbyJoinable(
          IntPtr ISteamMatchmaking,
          ulong steamIDLobby,
          [MarshalAs(UnmanagedType.U1)] bool bLobbyJoinable);

        [DllImport("libsteam_api.dylib")]
        internal static extern CSteamID SteamAPI_ISteamMatchmaking_GetLobbyOwner(
          IntPtr ISteamMatchmaking,
          ulong steamIDLobby);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamMatchmaking_SetLobbyOwner(
          IntPtr ISteamMatchmaking,
          ulong steamIDLobby,
          ulong steamIDNewOwner);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamMatchmaking_SetLinkedLobby(
          IntPtr ISteamMatchmaking,
          ulong steamIDLobby,
          ulong steamIDLobbyDependent);

        [DllImport("libsteam_api.dylib")]
        internal static extern HServerListRequest SteamAPI_ISteamMatchmakingServers_RequestInternetServerList(
          IntPtr ISteamMatchmakingServers,
          uint iApp,
          IntPtr ppchFilters,
          uint nFilters,
          IntPtr pRequestServersResponse);

        [DllImport("libsteam_api.dylib")]
        internal static extern HServerListRequest SteamAPI_ISteamMatchmakingServers_RequestLANServerList(
          IntPtr ISteamMatchmakingServers,
          uint iApp,
          IntPtr pRequestServersResponse);

        [DllImport("libsteam_api.dylib")]
        internal static extern HServerListRequest SteamAPI_ISteamMatchmakingServers_RequestFriendsServerList(
          IntPtr ISteamMatchmakingServers,
          uint iApp,
          IntPtr ppchFilters,
          uint nFilters,
          IntPtr pRequestServersResponse);

        [DllImport("libsteam_api.dylib")]
        internal static extern HServerListRequest SteamAPI_ISteamMatchmakingServers_RequestFavoritesServerList(
          IntPtr ISteamMatchmakingServers,
          uint iApp,
          IntPtr ppchFilters,
          uint nFilters,
          IntPtr pRequestServersResponse);

        [DllImport("libsteam_api.dylib")]
        internal static extern HServerListRequest SteamAPI_ISteamMatchmakingServers_RequestHistoryServerList(
          IntPtr ISteamMatchmakingServers,
          uint iApp,
          IntPtr ppchFilters,
          uint nFilters,
          IntPtr pRequestServersResponse);

        [DllImport("libsteam_api.dylib")]
        internal static extern HServerListRequest SteamAPI_ISteamMatchmakingServers_RequestSpectatorServerList(
          IntPtr ISteamMatchmakingServers,
          uint iApp,
          IntPtr ppchFilters,
          uint nFilters,
          IntPtr pRequestServersResponse);

        [DllImport("libsteam_api.dylib")]
        internal static extern void SteamAPI_ISteamMatchmakingServers_ReleaseRequest(
          IntPtr ISteamMatchmakingServers,
          IntPtr hServerListRequest);

        [DllImport("libsteam_api.dylib")]
        internal static extern IntPtr SteamAPI_ISteamMatchmakingServers_GetServerDetails(
          IntPtr ISteamMatchmakingServers,
          IntPtr hRequest,
          int iServer);

        [DllImport("libsteam_api.dylib")]
        internal static extern void SteamAPI_ISteamMatchmakingServers_CancelQuery(
          IntPtr ISteamMatchmakingServers,
          IntPtr hRequest);

        [DllImport("libsteam_api.dylib")]
        internal static extern void SteamAPI_ISteamMatchmakingServers_RefreshQuery(
          IntPtr ISteamMatchmakingServers,
          IntPtr hRequest);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamMatchmakingServers_IsRefreshing(
          IntPtr ISteamMatchmakingServers,
          IntPtr hRequest);

        [DllImport("libsteam_api.dylib")]
        internal static extern int SteamAPI_ISteamMatchmakingServers_GetServerCount(
          IntPtr ISteamMatchmakingServers,
          IntPtr hRequest);

        [DllImport("libsteam_api.dylib")]
        internal static extern void SteamAPI_ISteamMatchmakingServers_RefreshServer(
          IntPtr ISteamMatchmakingServers,
          IntPtr hRequest,
          int iServer);

        [DllImport("libsteam_api.dylib")]
        internal static extern HServerQuery SteamAPI_ISteamMatchmakingServers_PingServer(
          IntPtr ISteamMatchmakingServers,
          uint unIP,
          ushort usPort,
          IntPtr pRequestServersResponse);

        [DllImport("libsteam_api.dylib")]
        internal static extern HServerQuery SteamAPI_ISteamMatchmakingServers_PlayerDetails(
          IntPtr ISteamMatchmakingServers,
          uint unIP,
          ushort usPort,
          IntPtr pRequestServersResponse);

        [DllImport("libsteam_api.dylib")]
        internal static extern HServerQuery SteamAPI_ISteamMatchmakingServers_ServerRules(
          IntPtr ISteamMatchmakingServers,
          uint unIP,
          ushort usPort,
          IntPtr pRequestServersResponse);

        [DllImport("libsteam_api.dylib")]
        internal static extern void SteamAPI_ISteamMatchmakingServers_CancelServerQuery(
          IntPtr ISteamMatchmakingServers,
          int hServerQuery);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamRemoteStorage_FileWrite(
          IntPtr ISteamRemoteStorage,
          string pchFile,
          IntPtr pvData,
          int cubData);

        [DllImport("libsteam_api.dylib")]
        internal static extern int SteamAPI_ISteamRemoteStorage_FileRead(
          IntPtr ISteamRemoteStorage,
          string pchFile,
          IntPtr pvData,
          int cubDataToRead);

        [DllImport("libsteam_api.dylib")]
        internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_FileWriteAsync(
          IntPtr ISteamRemoteStorage,
          string pchFile,
          IntPtr pvData,
          uint cubData);

        [DllImport("libsteam_api.dylib")]
        internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_FileReadAsync(
          IntPtr ISteamRemoteStorage,
          string pchFile,
          uint nOffset,
          uint cubToRead);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamRemoteStorage_FileReadAsyncComplete(
          IntPtr ISteamRemoteStorage,
          ulong hReadCall,
          IntPtr pvBuffer,
          uint cubToRead);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamRemoteStorage_FileForget(
          IntPtr ISteamRemoteStorage,
          string pchFile);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamRemoteStorage_FileDelete(
          IntPtr ISteamRemoteStorage,
          string pchFile);

        [DllImport("libsteam_api.dylib")]
        internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_FileShare(
          IntPtr ISteamRemoteStorage,
          string pchFile);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamRemoteStorage_SetSyncPlatforms(
          IntPtr ISteamRemoteStorage,
          string pchFile,
          RemoteStoragePlatform eRemoteStoragePlatform);

        [DllImport("libsteam_api.dylib")]
        internal static extern UGCFileWriteStreamHandle_t SteamAPI_ISteamRemoteStorage_FileWriteStreamOpen(
          IntPtr ISteamRemoteStorage,
          string pchFile);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamRemoteStorage_FileWriteStreamWriteChunk(
          IntPtr ISteamRemoteStorage,
          ulong writeHandle,
          IntPtr pvData,
          int cubData);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamRemoteStorage_FileWriteStreamClose(
          IntPtr ISteamRemoteStorage,
          ulong writeHandle);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamRemoteStorage_FileWriteStreamCancel(
          IntPtr ISteamRemoteStorage,
          ulong writeHandle);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamRemoteStorage_FileExists(
          IntPtr ISteamRemoteStorage,
          string pchFile);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamRemoteStorage_FilePersisted(
          IntPtr ISteamRemoteStorage,
          string pchFile);

        [DllImport("libsteam_api.dylib")]
        internal static extern int SteamAPI_ISteamRemoteStorage_GetFileSize(
          IntPtr ISteamRemoteStorage,
          string pchFile);

        [DllImport("libsteam_api.dylib")]
        internal static extern long SteamAPI_ISteamRemoteStorage_GetFileTimestamp(
          IntPtr ISteamRemoteStorage,
          string pchFile);

        [DllImport("libsteam_api.dylib")]
        internal static extern RemoteStoragePlatform SteamAPI_ISteamRemoteStorage_GetSyncPlatforms(
          IntPtr ISteamRemoteStorage,
          string pchFile);

        [DllImport("libsteam_api.dylib")]
        internal static extern int SteamAPI_ISteamRemoteStorage_GetFileCount(
          IntPtr ISteamRemoteStorage);

        [DllImport("libsteam_api.dylib")]
        internal static extern IntPtr SteamAPI_ISteamRemoteStorage_GetFileNameAndSize(
          IntPtr ISteamRemoteStorage,
          int iFile,
          out int pnFileSizeInBytes);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamRemoteStorage_GetQuota(
          IntPtr ISteamRemoteStorage,
          out ulong pnTotalBytes,
          out ulong puAvailableBytes);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamRemoteStorage_IsCloudEnabledForAccount(
          IntPtr ISteamRemoteStorage);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamRemoteStorage_IsCloudEnabledForApp(
          IntPtr ISteamRemoteStorage);

        [DllImport("libsteam_api.dylib")]
        internal static extern void SteamAPI_ISteamRemoteStorage_SetCloudEnabledForApp(
          IntPtr ISteamRemoteStorage,
          [MarshalAs(UnmanagedType.U1)] bool bEnabled);

        [DllImport("libsteam_api.dylib")]
        internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_UGCDownload(
          IntPtr ISteamRemoteStorage,
          ulong hContent,
          uint unPriority);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamRemoteStorage_GetUGCDownloadProgress(
          IntPtr ISteamRemoteStorage,
          ulong hContent,
          out int pnBytesDownloaded,
          out int pnBytesExpected);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamRemoteStorage_GetUGCDetails(
          IntPtr ISteamRemoteStorage,
          ulong hContent,
          ref uint pnAppID,
          StringBuilder ppchName,
          out int pnFileSizeInBytes,
          out ulong pSteamIDOwner);

        [DllImport("libsteam_api.dylib")]
        internal static extern int SteamAPI_ISteamRemoteStorage_UGCRead(
          IntPtr ISteamRemoteStorage,
          ulong hContent,
          IntPtr pvData,
          int cubDataToRead,
          uint cOffset,
          UGCReadAction eAction);

        [DllImport("libsteam_api.dylib")]
        internal static extern int SteamAPI_ISteamRemoteStorage_GetCachedUGCCount(
          IntPtr ISteamRemoteStorage);

        [DllImport("libsteam_api.dylib")]
        internal static extern UGCHandle_t SteamAPI_ISteamRemoteStorage_GetCachedUGCHandle(
          IntPtr ISteamRemoteStorage,
          int iCachedContent);

        [DllImport("libsteam_api.dylib")]
        internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_PublishWorkshopFile(
          IntPtr ISteamRemoteStorage,
          string pchFile,
          string pchPreviewFile,
          uint nConsumerAppId,
          string pchTitle,
          string pchDescription,
          RemoteStoragePublishedFileVisibility eVisibility,
          ref SteamParamStringArray_t.PackSmall pTags,
          WorkshopFileType eWorkshopFileType);

        [DllImport("libsteam_api.dylib")]
        internal static extern PublishedFileUpdateHandle_t SteamAPI_ISteamRemoteStorage_CreatePublishedFileUpdateRequest(
          IntPtr ISteamRemoteStorage,
          ulong unPublishedFileId);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamRemoteStorage_UpdatePublishedFileFile(
          IntPtr ISteamRemoteStorage,
          ulong updateHandle,
          string pchFile);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamRemoteStorage_UpdatePublishedFilePreviewFile(
          IntPtr ISteamRemoteStorage,
          ulong updateHandle,
          string pchPreviewFile);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamRemoteStorage_UpdatePublishedFileTitle(
          IntPtr ISteamRemoteStorage,
          ulong updateHandle,
          string pchTitle);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamRemoteStorage_UpdatePublishedFileDescription(
          IntPtr ISteamRemoteStorage,
          ulong updateHandle,
          string pchDescription);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamRemoteStorage_UpdatePublishedFileVisibility(
          IntPtr ISteamRemoteStorage,
          ulong updateHandle,
          RemoteStoragePublishedFileVisibility eVisibility);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamRemoteStorage_UpdatePublishedFileTags(
          IntPtr ISteamRemoteStorage,
          ulong updateHandle,
          ref SteamParamStringArray_t.PackSmall pTags);

        [DllImport("libsteam_api.dylib")]
        internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_CommitPublishedFileUpdate(
          IntPtr ISteamRemoteStorage,
          ulong updateHandle);

        [DllImport("libsteam_api.dylib")]
        internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_GetPublishedFileDetails(
          IntPtr ISteamRemoteStorage,
          ulong unPublishedFileId,
          uint unMaxSecondsOld);

        [DllImport("libsteam_api.dylib")]
        internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_DeletePublishedFile(
          IntPtr ISteamRemoteStorage,
          ulong unPublishedFileId);

        [DllImport("libsteam_api.dylib")]
        internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_EnumerateUserPublishedFiles(
          IntPtr ISteamRemoteStorage,
          uint unStartIndex);

        [DllImport("libsteam_api.dylib")]
        internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_SubscribePublishedFile(
          IntPtr ISteamRemoteStorage,
          ulong unPublishedFileId);

        [DllImport("libsteam_api.dylib")]
        internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_EnumerateUserSubscribedFiles(
          IntPtr ISteamRemoteStorage,
          uint unStartIndex);

        [DllImport("libsteam_api.dylib")]
        internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_UnsubscribePublishedFile(
          IntPtr ISteamRemoteStorage,
          ulong unPublishedFileId);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamRemoteStorage_UpdatePublishedFileSetChangeDescription(
          IntPtr ISteamRemoteStorage,
          ulong updateHandle,
          string pchChangeDescription);

        [DllImport("libsteam_api.dylib")]
        internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_GetPublishedItemVoteDetails(
          IntPtr ISteamRemoteStorage,
          ulong unPublishedFileId);

        [DllImport("libsteam_api.dylib")]
        internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_UpdateUserPublishedItemVote(
          IntPtr ISteamRemoteStorage,
          ulong unPublishedFileId,
          [MarshalAs(UnmanagedType.U1)] bool bVoteUp);

        [DllImport("libsteam_api.dylib")]
        internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_GetUserPublishedItemVoteDetails(
          IntPtr ISteamRemoteStorage,
          ulong unPublishedFileId);

        [DllImport("libsteam_api.dylib")]
        internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_EnumerateUserSharedWorkshopFiles(
          IntPtr ISteamRemoteStorage,
          ulong steamId,
          uint unStartIndex,
          ref SteamParamStringArray_t.PackSmall pRequiredTags,
          ref SteamParamStringArray_t.PackSmall pExcludedTags);

        [DllImport("libsteam_api.dylib")]
        internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_PublishVideo(
          IntPtr ISteamRemoteStorage,
          WorkshopVideoProvider eVideoProvider,
          string pchVideoAccount,
          string pchVideoIdentifier,
          string pchPreviewFile,
          uint nConsumerAppId,
          string pchTitle,
          string pchDescription,
          RemoteStoragePublishedFileVisibility eVisibility,
          ref SteamParamStringArray_t.PackSmall pTags);

        [DllImport("libsteam_api.dylib")]
        internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_SetUserPublishedFileAction(
          IntPtr ISteamRemoteStorage,
          ulong unPublishedFileId,
          WorkshopFileAction eAction);

        [DllImport("libsteam_api.dylib")]
        internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_EnumeratePublishedFilesByUserAction(
          IntPtr ISteamRemoteStorage,
          WorkshopFileAction eAction,
          uint unStartIndex);

        [DllImport("libsteam_api.dylib")]
        internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_EnumeratePublishedWorkshopFiles(
          IntPtr ISteamRemoteStorage,
          WorkshopEnumerationType eEnumerationType,
          uint unStartIndex,
          uint unCount,
          uint unDays,
          ref SteamParamStringArray_t.PackSmall pTags,
          ref SteamParamStringArray_t.PackSmall pUserTags);

        [DllImport("libsteam_api.dylib")]
        internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_UGCDownloadToLocation(
          IntPtr ISteamRemoteStorage,
          ulong hContent,
          string pchLocation,
          uint unPriority);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamUserStats_RequestCurrentStats(
          IntPtr ISteamUserStats);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamUserStats_GetStat(
          IntPtr ISteamUserStats,
          string pchName,
          out int pData);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamUserStats_GetStat0(
          IntPtr ISteamUserStats,
          string pchName,
          out float pData);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamUserStats_SetStat(
          IntPtr ISteamUserStats,
          string pchName,
          int nData);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamUserStats_SetStat0(
          IntPtr ISteamUserStats,
          string pchName,
          float fData);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamUserStats_UpdateAvgRateStat(
          IntPtr ISteamUserStats,
          string pchName,
          float flCountThisSession,
          double dSessionLength);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamUserStats_GetAchievement(
          IntPtr ISteamUserStats,
          string pchName,
          [MarshalAs(UnmanagedType.U1)] ref bool pbAchieved);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamUserStats_SetAchievement(
          IntPtr ISteamUserStats,
          string pchName);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamUserStats_ClearAchievement(
          IntPtr ISteamUserStats,
          string pchName);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamUserStats_GetAchievementAndUnlockTime(
          IntPtr ISteamUserStats,
          string pchName,
          [MarshalAs(UnmanagedType.U1)] ref bool pbAchieved,
          out uint punUnlockTime);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamUserStats_StoreStats(IntPtr ISteamUserStats);

        [DllImport("libsteam_api.dylib")]
        internal static extern int SteamAPI_ISteamUserStats_GetAchievementIcon(
          IntPtr ISteamUserStats,
          string pchName);

        [DllImport("libsteam_api.dylib")]
        internal static extern IntPtr SteamAPI_ISteamUserStats_GetAchievementDisplayAttribute(
          IntPtr ISteamUserStats,
          string pchName,
          string pchKey);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamUserStats_IndicateAchievementProgress(
          IntPtr ISteamUserStats,
          string pchName,
          uint nCurProgress,
          uint nMaxProgress);

        [DllImport("libsteam_api.dylib")]
        internal static extern uint SteamAPI_ISteamUserStats_GetNumAchievements(
          IntPtr ISteamUserStats);

        [DllImport("libsteam_api.dylib")]
        internal static extern IntPtr SteamAPI_ISteamUserStats_GetAchievementName(
          IntPtr ISteamUserStats,
          uint iAchievement);

        [DllImport("libsteam_api.dylib")]
        internal static extern SteamAPICall_t SteamAPI_ISteamUserStats_RequestUserStats(
          IntPtr ISteamUserStats,
          ulong steamIDUser);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamUserStats_GetUserStat(
          IntPtr ISteamUserStats,
          ulong steamIDUser,
          string pchName,
          out int pData);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamUserStats_GetUserStat0(
          IntPtr ISteamUserStats,
          ulong steamIDUser,
          string pchName,
          out float pData);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamUserStats_GetUserAchievement(
          IntPtr ISteamUserStats,
          ulong steamIDUser,
          string pchName,
          [MarshalAs(UnmanagedType.U1)] ref bool pbAchieved);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamUserStats_GetUserAchievementAndUnlockTime(
          IntPtr ISteamUserStats,
          ulong steamIDUser,
          string pchName,
          [MarshalAs(UnmanagedType.U1)] ref bool pbAchieved,
          out uint punUnlockTime);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamUserStats_ResetAllStats(
          IntPtr ISteamUserStats,
          [MarshalAs(UnmanagedType.U1)] bool bAchievementsToo);

        [DllImport("libsteam_api.dylib")]
        internal static extern SteamAPICall_t SteamAPI_ISteamUserStats_FindOrCreateLeaderboard(
          IntPtr ISteamUserStats,
          string pchLeaderboardName,
          LeaderboardSortMethod eLeaderboardSortMethod,
          LeaderboardDisplayType eLeaderboardDisplayType);

        [DllImport("libsteam_api.dylib")]
        internal static extern SteamAPICall_t SteamAPI_ISteamUserStats_FindLeaderboard(
          IntPtr ISteamUserStats,
          string pchLeaderboardName);

        [DllImport("libsteam_api.dylib")]
        internal static extern IntPtr SteamAPI_ISteamUserStats_GetLeaderboardName(
          IntPtr ISteamUserStats,
          ulong hSteamLeaderboard);

        [DllImport("libsteam_api.dylib")]
        internal static extern int SteamAPI_ISteamUserStats_GetLeaderboardEntryCount(
          IntPtr ISteamUserStats,
          ulong hSteamLeaderboard);

        [DllImport("libsteam_api.dylib")]
        internal static extern LeaderboardSortMethod SteamAPI_ISteamUserStats_GetLeaderboardSortMethod(
          IntPtr ISteamUserStats,
          ulong hSteamLeaderboard);

        [DllImport("libsteam_api.dylib")]
        internal static extern LeaderboardDisplayType SteamAPI_ISteamUserStats_GetLeaderboardDisplayType(
          IntPtr ISteamUserStats,
          ulong hSteamLeaderboard);

        [DllImport("libsteam_api.dylib")]
        internal static extern SteamAPICall_t SteamAPI_ISteamUserStats_DownloadLeaderboardEntries(
          IntPtr ISteamUserStats,
          ulong hSteamLeaderboard,
          LeaderboardDataRequest eLeaderboardDataRequest,
          int nRangeStart,
          int nRangeEnd);

        [DllImport("libsteam_api.dylib")]
        internal static extern SteamAPICall_t SteamAPI_ISteamUserStats_DownloadLeaderboardEntriesForUsers(
          IntPtr ISteamUserStats,
          ulong hSteamLeaderboard,
          IntPtr prgUsers,
          int cUsers);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamUserStats_GetDownloadedLeaderboardEntry(
          IntPtr ISteamUserStats,
          ulong hSteamLeaderboardEntries,
          int index,
          ref LeaderboardEntry_t.PackSmall pLeaderboardEntry,
          IntPtr pDetails,
          int cDetailsMax);

        [DllImport("libsteam_api.dylib")]
        internal static extern SteamAPICall_t SteamAPI_ISteamUserStats_UploadLeaderboardScore(
          IntPtr ISteamUserStats,
          ulong hSteamLeaderboard,
          LeaderboardUploadScoreMethod eLeaderboardUploadScoreMethod,
          int nScore,
          int[] pScoreDetails,
          int cScoreDetailsCount);

        [DllImport("libsteam_api.dylib")]
        internal static extern SteamAPICall_t SteamAPI_ISteamUserStats_AttachLeaderboardUGC(
          IntPtr ISteamUserStats,
          ulong hSteamLeaderboard,
          ulong hUGC);

        [DllImport("libsteam_api.dylib")]
        internal static extern SteamAPICall_t SteamAPI_ISteamUserStats_GetNumberOfCurrentPlayers(
          IntPtr ISteamUserStats);

        [DllImport("libsteam_api.dylib")]
        internal static extern SteamAPICall_t SteamAPI_ISteamUserStats_RequestGlobalAchievementPercentages(
          IntPtr ISteamUserStats);

        [DllImport("libsteam_api.dylib")]
        internal static extern int SteamAPI_ISteamUserStats_GetMostAchievedAchievementInfo(
          IntPtr ISteamUserStats,
          StringBuilder pchName,
          uint unNameBufLen,
          out float pflPercent,
          [MarshalAs(UnmanagedType.U1)] ref bool pbAchieved);

        [DllImport("libsteam_api.dylib")]
        internal static extern int SteamAPI_ISteamUserStats_GetNextMostAchievedAchievementInfo(
          IntPtr ISteamUserStats,
          int iIteratorPrevious,
          StringBuilder pchName,
          uint unNameBufLen,
          out float pflPercent,
          [MarshalAs(UnmanagedType.U1)] ref bool pbAchieved);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamUserStats_GetAchievementAchievedPercent(
          IntPtr ISteamUserStats,
          string pchName,
          out float pflPercent);

        [DllImport("libsteam_api.dylib")]
        internal static extern SteamAPICall_t SteamAPI_ISteamUserStats_RequestGlobalStats(
          IntPtr ISteamUserStats,
          int nHistoryDays);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamUserStats_GetGlobalStat(
          IntPtr ISteamUserStats,
          string pchStatName,
          out long pData);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamUserStats_GetGlobalStat0(
          IntPtr ISteamUserStats,
          string pchStatName,
          out double pData);

        [DllImport("libsteam_api.dylib")]
        internal static extern int SteamAPI_ISteamUserStats_GetGlobalStatHistory(
          IntPtr ISteamUserStats,
          string pchStatName,
          out long pData,
          uint cubData);

        [DllImport("libsteam_api.dylib")]
        internal static extern int SteamAPI_ISteamUserStats_GetGlobalStatHistory0(
          IntPtr ISteamUserStats,
          string pchStatName,
          out double pData,
          uint cubData);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamApps_BIsSubscribed(IntPtr ISteamApps);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamApps_BIsLowViolence(IntPtr ISteamApps);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamApps_BIsCybercafe(IntPtr ISteamApps);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamApps_BIsVACBanned(IntPtr ISteamApps);

        [DllImport("libsteam_api.dylib")]
        internal static extern IntPtr SteamAPI_ISteamApps_GetCurrentGameLanguage(IntPtr ISteamApps);

        [DllImport("libsteam_api.dylib")]
        internal static extern IntPtr SteamAPI_ISteamApps_GetAvailableGameLanguages(
          IntPtr ISteamApps);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamApps_BIsSubscribedApp(
          IntPtr ISteamApps,
          uint appID);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamApps_BIsDlcInstalled(
          IntPtr ISteamApps,
          uint appID);

        [DllImport("libsteam_api.dylib")]
        internal static extern uint SteamAPI_ISteamApps_GetEarliestPurchaseUnixTime(
          IntPtr ISteamApps,
          uint nAppID);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamApps_BIsSubscribedFromFreeWeekend(
          IntPtr ISteamApps);

        [DllImport("libsteam_api.dylib")]
        internal static extern int SteamAPI_ISteamApps_GetDLCCount(IntPtr ISteamApps);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamApps_BGetDLCDataByIndex(
          IntPtr ISteamApps,
          int iDLC,
          ref uint pAppID,
          [MarshalAs(UnmanagedType.U1)] ref bool pbAvailable,
          StringBuilder pchName,
          int cchNameBufferSize);

        [DllImport("libsteam_api.dylib")]
        internal static extern void SteamAPI_ISteamApps_InstallDLC(IntPtr ISteamApps, uint nAppID);

        [DllImport("libsteam_api.dylib")]
        internal static extern void SteamAPI_ISteamApps_UninstallDLC(IntPtr ISteamApps, uint nAppID);

        [DllImport("libsteam_api.dylib")]
        internal static extern void SteamAPI_ISteamApps_RequestAppProofOfPurchaseKey(
          IntPtr ISteamApps,
          uint nAppID);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamApps_GetCurrentBetaName(
          IntPtr ISteamApps,
          StringBuilder pchName,
          int cchNameBufferSize);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamApps_MarkContentCorrupt(
          IntPtr ISteamApps,
          [MarshalAs(UnmanagedType.U1)] bool bMissingFilesOnly);

        [DllImport("libsteam_api.dylib")]
        internal static extern uint SteamAPI_ISteamApps_GetInstalledDepots(
          IntPtr ISteamApps,
          uint appID,
          IntPtr pvecDepots,
          uint cMaxDepots);

        [DllImport("libsteam_api.dylib")]
        internal static extern uint SteamAPI_ISteamApps_GetAppInstallDir(
          IntPtr ISteamApps,
          uint appID,
          StringBuilder pchFolder,
          uint cchFolderBufferSize);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamApps_BIsAppInstalled(
          IntPtr ISteamApps,
          uint appID);

        [DllImport("libsteam_api.dylib")]
        internal static extern CSteamID SteamAPI_ISteamApps_GetAppOwner(IntPtr ISteamApps);

        [DllImport("libsteam_api.dylib")]
        internal static extern IntPtr SteamAPI_ISteamApps_GetLaunchQueryParam(
          IntPtr ISteamApps,
          string pchKey);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamApps_GetDlcDownloadProgress(
          IntPtr ISteamApps,
          uint nAppID,
          out ulong punBytesDownloaded,
          out ulong punBytesTotal);

        [DllImport("libsteam_api.dylib")]
        internal static extern int SteamAPI_ISteamApps_GetAppBuildId(IntPtr ISteamApps);

        [DllImport("libsteam_api.dylib")]
        internal static extern void SteamAPI_ISteamApps_RequestAllProofOfPurchaseKeys(
          IntPtr ISteamApps);

        [DllImport("libsteam_api.dylib")]
        internal static extern SteamAPICall_t SteamAPI_ISteamApps_GetFileDetails(
          IntPtr ISteamApps,
          string pszFileName);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamNetworking_SendP2PPacket(
          IntPtr ISteamNetworking,
          ulong steamIDRemote,
          IntPtr pubData,
          uint cubData,
          P2PSend eP2PSendType,
          int nChannel);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamNetworking_IsP2PPacketAvailable(
          IntPtr ISteamNetworking,
          out uint pcubMsgSize,
          int nChannel);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamNetworking_ReadP2PPacket(
          IntPtr ISteamNetworking,
          IntPtr pubDest,
          uint cubDest,
          out uint pcubMsgSize,
          out ulong psteamIDRemote,
          int nChannel);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamNetworking_AcceptP2PSessionWithUser(
          IntPtr ISteamNetworking,
          ulong steamIDRemote);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamNetworking_CloseP2PSessionWithUser(
          IntPtr ISteamNetworking,
          ulong steamIDRemote);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamNetworking_CloseP2PChannelWithUser(
          IntPtr ISteamNetworking,
          ulong steamIDRemote,
          int nChannel);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamNetworking_GetP2PSessionState(
          IntPtr ISteamNetworking,
          ulong steamIDRemote,
          ref P2PSessionState_t.PackSmall pConnectionState);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamNetworking_AllowP2PPacketRelay(
          IntPtr ISteamNetworking,
          [MarshalAs(UnmanagedType.U1)] bool bAllow);

        [DllImport("libsteam_api.dylib")]
        internal static extern SNetListenSocket_t SteamAPI_ISteamNetworking_CreateListenSocket(
          IntPtr ISteamNetworking,
          int nVirtualP2PPort,
          uint nIP,
          ushort nPort,
          [MarshalAs(UnmanagedType.U1)] bool bAllowUseOfPacketRelay);

        [DllImport("libsteam_api.dylib")]
        internal static extern SNetSocket_t SteamAPI_ISteamNetworking_CreateP2PConnectionSocket(
          IntPtr ISteamNetworking,
          ulong steamIDTarget,
          int nVirtualPort,
          int nTimeoutSec,
          [MarshalAs(UnmanagedType.U1)] bool bAllowUseOfPacketRelay);

        [DllImport("libsteam_api.dylib")]
        internal static extern SNetSocket_t SteamAPI_ISteamNetworking_CreateConnectionSocket(
          IntPtr ISteamNetworking,
          uint nIP,
          ushort nPort,
          int nTimeoutSec);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamNetworking_DestroySocket(
          IntPtr ISteamNetworking,
          uint hSocket,
          [MarshalAs(UnmanagedType.U1)] bool bNotifyRemoteEnd);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamNetworking_DestroyListenSocket(
          IntPtr ISteamNetworking,
          uint hSocket,
          [MarshalAs(UnmanagedType.U1)] bool bNotifyRemoteEnd);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamNetworking_SendDataOnSocket(
          IntPtr ISteamNetworking,
          uint hSocket,
          IntPtr pubData,
          uint cubData,
          [MarshalAs(UnmanagedType.U1)] bool bReliable);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamNetworking_IsDataAvailableOnSocket(
          IntPtr ISteamNetworking,
          uint hSocket,
          out uint pcubMsgSize);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamNetworking_RetrieveDataFromSocket(
          IntPtr ISteamNetworking,
          uint hSocket,
          IntPtr pubDest,
          uint cubDest,
          out uint pcubMsgSize);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamNetworking_IsDataAvailable(
          IntPtr ISteamNetworking,
          uint hListenSocket,
          out uint pcubMsgSize,
          ref uint phSocket);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamNetworking_RetrieveData(
          IntPtr ISteamNetworking,
          uint hListenSocket,
          IntPtr pubDest,
          uint cubDest,
          out uint pcubMsgSize,
          ref uint phSocket);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamNetworking_GetSocketInfo(
          IntPtr ISteamNetworking,
          uint hSocket,
          out ulong pSteamIDRemote,
          IntPtr peSocketStatus,
          out uint punIPRemote,
          out ushort punPortRemote);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamNetworking_GetListenSocketInfo(
          IntPtr ISteamNetworking,
          uint hListenSocket,
          out uint pnIP,
          out ushort pnPort);

        [DllImport("libsteam_api.dylib")]
        internal static extern SNetSocketConnectionType SteamAPI_ISteamNetworking_GetSocketConnectionType(
          IntPtr ISteamNetworking,
          uint hSocket);

        [DllImport("libsteam_api.dylib")]
        internal static extern int SteamAPI_ISteamNetworking_GetMaxPacketSize(
          IntPtr ISteamNetworking,
          uint hSocket);

        [DllImport("libsteam_api.dylib")]
        internal static extern ScreenshotHandle SteamAPI_ISteamScreenshots_WriteScreenshot(
          IntPtr ISteamScreenshots,
          IntPtr pubRGB,
          uint cubRGB,
          int nWidth,
          int nHeight);

        [DllImport("libsteam_api.dylib")]
        internal static extern ScreenshotHandle SteamAPI_ISteamScreenshots_AddScreenshotToLibrary(
          IntPtr ISteamScreenshots,
          string pchFilename,
          string pchThumbnailFilename,
          int nWidth,
          int nHeight);

        [DllImport("libsteam_api.dylib")]
        internal static extern void SteamAPI_ISteamScreenshots_TriggerScreenshot(
          IntPtr ISteamScreenshots);

        [DllImport("libsteam_api.dylib")]
        internal static extern void SteamAPI_ISteamScreenshots_HookScreenshots(
          IntPtr ISteamScreenshots,
          [MarshalAs(UnmanagedType.U1)] bool bHook);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamScreenshots_SetLocation(
          IntPtr ISteamScreenshots,
          uint hScreenshot,
          string pchLocation);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamScreenshots_TagUser(
          IntPtr ISteamScreenshots,
          uint hScreenshot,
          ulong steamID);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamScreenshots_TagPublishedFile(
          IntPtr ISteamScreenshots,
          uint hScreenshot,
          ulong unPublishedFileID);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamScreenshots_IsScreenshotsHooked(
          IntPtr ISteamScreenshots);

        [DllImport("libsteam_api.dylib")]
        internal static extern ScreenshotHandle SteamAPI_ISteamScreenshots_AddVRScreenshotToLibrary(
          IntPtr ISteamScreenshots,
          VRScreenshotType eType,
          string pchFilename,
          string pchVRFilename);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamMusic_BIsEnabled(IntPtr ISteamMusic);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamMusic_BIsPlaying(IntPtr ISteamMusic);

        [DllImport("libsteam_api.dylib")]
        internal static extern AudioPlayback_Status SteamAPI_ISteamMusic_GetPlaybackStatus(
          IntPtr ISteamMusic);

        [DllImport("libsteam_api.dylib")]
        internal static extern void SteamAPI_ISteamMusic_Play(IntPtr ISteamMusic);

        [DllImport("libsteam_api.dylib")]
        internal static extern void SteamAPI_ISteamMusic_Pause(IntPtr ISteamMusic);

        [DllImport("libsteam_api.dylib")]
        internal static extern void SteamAPI_ISteamMusic_PlayPrevious(IntPtr ISteamMusic);

        [DllImport("libsteam_api.dylib")]
        internal static extern void SteamAPI_ISteamMusic_PlayNext(IntPtr ISteamMusic);

        [DllImport("libsteam_api.dylib")]
        internal static extern void SteamAPI_ISteamMusic_SetVolume(
          IntPtr ISteamMusic,
          float flVolume);

        [DllImport("libsteam_api.dylib")]
        internal static extern float SteamAPI_ISteamMusic_GetVolume(IntPtr ISteamMusic);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamMusicRemote_RegisterSteamMusicRemote(
          IntPtr ISteamMusicRemote,
          string pchName);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamMusicRemote_DeregisterSteamMusicRemote(
          IntPtr ISteamMusicRemote);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamMusicRemote_BIsCurrentMusicRemote(
          IntPtr ISteamMusicRemote);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamMusicRemote_BActivationSuccess(
          IntPtr ISteamMusicRemote,
          [MarshalAs(UnmanagedType.U1)] bool bValue);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamMusicRemote_SetDisplayName(
          IntPtr ISteamMusicRemote,
          string pchDisplayName);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamMusicRemote_SetPNGIcon_64x64(
          IntPtr ISteamMusicRemote,
          IntPtr pvBuffer,
          uint cbBufferLength);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamMusicRemote_EnablePlayPrevious(
          IntPtr ISteamMusicRemote,
          [MarshalAs(UnmanagedType.U1)] bool bValue);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamMusicRemote_EnablePlayNext(
          IntPtr ISteamMusicRemote,
          [MarshalAs(UnmanagedType.U1)] bool bValue);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamMusicRemote_EnableShuffled(
          IntPtr ISteamMusicRemote,
          [MarshalAs(UnmanagedType.U1)] bool bValue);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamMusicRemote_EnableLooped(
          IntPtr ISteamMusicRemote,
          [MarshalAs(UnmanagedType.U1)] bool bValue);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamMusicRemote_EnableQueue(
          IntPtr ISteamMusicRemote,
          [MarshalAs(UnmanagedType.U1)] bool bValue);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamMusicRemote_EnablePlaylists(
          IntPtr ISteamMusicRemote,
          [MarshalAs(UnmanagedType.U1)] bool bValue);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamMusicRemote_UpdatePlaybackStatus(
          IntPtr ISteamMusicRemote,
          AudioPlayback_Status nStatus);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamMusicRemote_UpdateShuffled(
          IntPtr ISteamMusicRemote,
          [MarshalAs(UnmanagedType.U1)] bool bValue);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamMusicRemote_UpdateLooped(
          IntPtr ISteamMusicRemote,
          [MarshalAs(UnmanagedType.U1)] bool bValue);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamMusicRemote_UpdateVolume(
          IntPtr ISteamMusicRemote,
          float flValue);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamMusicRemote_CurrentEntryWillChange(
          IntPtr ISteamMusicRemote);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamMusicRemote_CurrentEntryIsAvailable(
          IntPtr ISteamMusicRemote,
          [MarshalAs(UnmanagedType.U1)] bool bAvailable);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamMusicRemote_UpdateCurrentEntryText(
          IntPtr ISteamMusicRemote,
          string pchText);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamMusicRemote_UpdateCurrentEntryElapsedSeconds(
          IntPtr ISteamMusicRemote,
          int nValue);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamMusicRemote_UpdateCurrentEntryCoverArt(
          IntPtr ISteamMusicRemote,
          IntPtr pvBuffer,
          uint cbBufferLength);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamMusicRemote_CurrentEntryDidChange(
          IntPtr ISteamMusicRemote);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamMusicRemote_QueueWillChange(
          IntPtr ISteamMusicRemote);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamMusicRemote_ResetQueueEntries(
          IntPtr ISteamMusicRemote);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamMusicRemote_SetQueueEntry(
          IntPtr ISteamMusicRemote,
          int nID,
          int nPosition,
          string pchEntryText);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamMusicRemote_SetCurrentQueueEntry(
          IntPtr ISteamMusicRemote,
          int nID);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamMusicRemote_QueueDidChange(
          IntPtr ISteamMusicRemote);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamMusicRemote_PlaylistWillChange(
          IntPtr ISteamMusicRemote);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamMusicRemote_ResetPlaylistEntries(
          IntPtr ISteamMusicRemote);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamMusicRemote_SetPlaylistEntry(
          IntPtr ISteamMusicRemote,
          int nID,
          int nPosition,
          string pchEntryText);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamMusicRemote_SetCurrentPlaylistEntry(
          IntPtr ISteamMusicRemote,
          int nID);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamMusicRemote_PlaylistDidChange(
          IntPtr ISteamMusicRemote);

        [DllImport("libsteam_api.dylib")]
        internal static extern HTTPRequestHandle SteamAPI_ISteamHTTP_CreateHTTPRequest(
          IntPtr ISteamHTTP,
          HTTPMethod eHTTPRequestMethod,
          string pchAbsoluteURL);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamHTTP_SetHTTPRequestContextValue(
          IntPtr ISteamHTTP,
          uint hRequest,
          ulong ulContextValue);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamHTTP_SetHTTPRequestNetworkActivityTimeout(
          IntPtr ISteamHTTP,
          uint hRequest,
          uint unTimeoutSeconds);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamHTTP_SetHTTPRequestHeaderValue(
          IntPtr ISteamHTTP,
          uint hRequest,
          string pchHeaderName,
          string pchHeaderValue);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamHTTP_SetHTTPRequestGetOrPostParameter(
          IntPtr ISteamHTTP,
          uint hRequest,
          string pchParamName,
          string pchParamValue);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamHTTP_SendHTTPRequest(
          IntPtr ISteamHTTP,
          uint hRequest,
          ref ulong pCallHandle);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamHTTP_SendHTTPRequestAndStreamResponse(
          IntPtr ISteamHTTP,
          uint hRequest,
          ref ulong pCallHandle);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamHTTP_DeferHTTPRequest(
          IntPtr ISteamHTTP,
          uint hRequest);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamHTTP_PrioritizeHTTPRequest(
          IntPtr ISteamHTTP,
          uint hRequest);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamHTTP_GetHTTPResponseHeaderSize(
          IntPtr ISteamHTTP,
          uint hRequest,
          string pchHeaderName,
          out uint unResponseHeaderSize);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamHTTP_GetHTTPResponseHeaderValue(
          IntPtr ISteamHTTP,
          uint hRequest,
          string pchHeaderName,
          out byte pHeaderValueBuffer,
          uint unBufferSize);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamHTTP_GetHTTPResponseBodySize(
          IntPtr ISteamHTTP,
          uint hRequest,
          out uint unBodySize);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamHTTP_GetHTTPResponseBodyData(
          IntPtr ISteamHTTP,
          uint hRequest,
          out byte pBodyDataBuffer,
          uint unBufferSize);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamHTTP_GetHTTPStreamingResponseBodyData(
          IntPtr ISteamHTTP,
          uint hRequest,
          uint cOffset,
          out byte pBodyDataBuffer,
          uint unBufferSize);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamHTTP_ReleaseHTTPRequest(
          IntPtr ISteamHTTP,
          uint hRequest);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamHTTP_GetHTTPDownloadProgressPct(
          IntPtr ISteamHTTP,
          uint hRequest,
          out float pflPercentOut);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamHTTP_SetHTTPRequestRawPostBody(
          IntPtr ISteamHTTP,
          uint hRequest,
          string pchContentType,
          out byte pubBody,
          uint unBodyLen);

        [DllImport("libsteam_api.dylib")]
        internal static extern HTTPCookieContainerHandle SteamAPI_ISteamHTTP_CreateCookieContainer(
          IntPtr ISteamHTTP,
          [MarshalAs(UnmanagedType.U1)] bool bAllowResponsesToModify);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamHTTP_ReleaseCookieContainer(
          IntPtr ISteamHTTP,
          uint hCookieContainer);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamHTTP_SetCookie(
          IntPtr ISteamHTTP,
          uint hCookieContainer,
          string pchHost,
          string pchUrl,
          string pchCookie);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamHTTP_SetHTTPRequestCookieContainer(
          IntPtr ISteamHTTP,
          uint hRequest,
          uint hCookieContainer);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamHTTP_SetHTTPRequestUserAgentInfo(
          IntPtr ISteamHTTP,
          uint hRequest,
          string pchUserAgentInfo);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamHTTP_SetHTTPRequestRequiresVerifiedCertificate(
          IntPtr ISteamHTTP,
          uint hRequest,
          [MarshalAs(UnmanagedType.U1)] bool bRequireVerifiedCertificate);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamHTTP_SetHTTPRequestAbsoluteTimeoutMS(
          IntPtr ISteamHTTP,
          uint hRequest,
          uint unMilliseconds);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamHTTP_GetHTTPRequestWasTimedOut(
          IntPtr ISteamHTTP,
          uint hRequest,
          [MarshalAs(UnmanagedType.U1)] ref bool pbWasTimedOut);

        [DllImport("libsteam_api.dylib")]
        internal static extern ClientUnifiedMessageHandle SteamAPI_ISteamUnifiedMessages_SendMethod(
          IntPtr ISteamUnifiedMessages,
          string pchServiceMethod,
          IntPtr pRequestBuffer,
          uint unRequestBufferSize,
          ulong unContext);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamUnifiedMessages_GetMethodResponseInfo(
          IntPtr ISteamUnifiedMessages,
          ulong hHandle,
          out uint punResponseSize,
          out Result peResult);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamUnifiedMessages_GetMethodResponseData(
          IntPtr ISteamUnifiedMessages,
          ulong hHandle,
          IntPtr pResponseBuffer,
          uint unResponseBufferSize,
          [MarshalAs(UnmanagedType.U1)] bool bAutoRelease);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamUnifiedMessages_ReleaseMethod(
          IntPtr ISteamUnifiedMessages,
          ulong hHandle);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamUnifiedMessages_SendNotification(
          IntPtr ISteamUnifiedMessages,
          string pchServiceNotification,
          IntPtr pNotificationBuffer,
          uint unNotificationBufferSize);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamController_Init(IntPtr ISteamController);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamController_Shutdown(IntPtr ISteamController);

        [DllImport("libsteam_api.dylib")]
        internal static extern void SteamAPI_ISteamController_RunFrame(IntPtr ISteamController);

        [DllImport("libsteam_api.dylib")]
        internal static extern int SteamAPI_ISteamController_GetConnectedControllers(
          IntPtr ISteamController,
          IntPtr handlesOut);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamController_ShowBindingPanel(
          IntPtr ISteamController,
          ulong controllerHandle);

        [DllImport("libsteam_api.dylib")]
        internal static extern ControllerActionSetHandle_t SteamAPI_ISteamController_GetActionSetHandle(
          IntPtr ISteamController,
          string pszActionSetName);

        [DllImport("libsteam_api.dylib")]
        internal static extern void SteamAPI_ISteamController_ActivateActionSet(
          IntPtr ISteamController,
          ulong controllerHandle,
          ulong actionSetHandle);

        [DllImport("libsteam_api.dylib")]
        internal static extern ControllerActionSetHandle_t SteamAPI_ISteamController_GetCurrentActionSet(
          IntPtr ISteamController,
          ulong controllerHandle);

        [DllImport("libsteam_api.dylib")]
        internal static extern ControllerDigitalActionHandle_t SteamAPI_ISteamController_GetDigitalActionHandle(
          IntPtr ISteamController,
          string pszActionName);

        [DllImport("libsteam_api.dylib")]
        internal static extern ControllerDigitalActionData_t SteamAPI_ISteamController_GetDigitalActionData(
          IntPtr ISteamController,
          ulong controllerHandle,
          ulong digitalActionHandle);

        [DllImport("libsteam_api.dylib")]
        internal static extern int SteamAPI_ISteamController_GetDigitalActionOrigins(
          IntPtr ISteamController,
          ulong controllerHandle,
          ulong actionSetHandle,
          ulong digitalActionHandle,
          out ControllerActionOrigin originsOut);

        [DllImport("libsteam_api.dylib")]
        internal static extern ControllerAnalogActionHandle_t SteamAPI_ISteamController_GetAnalogActionHandle(
          IntPtr ISteamController,
          string pszActionName);

        [DllImport("libsteam_api.dylib")]
        internal static extern ControllerAnalogActionData_t SteamAPI_ISteamController_GetAnalogActionData(
          IntPtr ISteamController,
          ulong controllerHandle,
          ulong analogActionHandle);

        [DllImport("libsteam_api.dylib")]
        internal static extern int SteamAPI_ISteamController_GetAnalogActionOrigins(
          IntPtr ISteamController,
          ulong controllerHandle,
          ulong actionSetHandle,
          ulong analogActionHandle,
          out ControllerActionOrigin originsOut);

        [DllImport("libsteam_api.dylib")]
        internal static extern void SteamAPI_ISteamController_StopAnalogActionMomentum(
          IntPtr ISteamController,
          ulong controllerHandle,
          ulong eAction);

        [DllImport("libsteam_api.dylib")]
        internal static extern void SteamAPI_ISteamController_TriggerHapticPulse(
          IntPtr ISteamController,
          ulong controllerHandle,
          SteamControllerPad eTargetPad,
          ushort usDurationMicroSec);

        [DllImport("libsteam_api.dylib")]
        internal static extern void SteamAPI_ISteamController_TriggerRepeatedHapticPulse(
          IntPtr ISteamController,
          ulong controllerHandle,
          SteamControllerPad eTargetPad,
          ushort usDurationMicroSec,
          ushort usOffMicroSec,
          ushort unRepeat,
          uint nFlags);

        [DllImport("libsteam_api.dylib")]
        internal static extern void SteamAPI_ISteamController_TriggerVibration(
          IntPtr ISteamController,
          ulong controllerHandle,
          ushort usLeftSpeed,
          ushort usRightSpeed);

        [DllImport("libsteam_api.dylib")]
        internal static extern void SteamAPI_ISteamController_SetLEDColor(
          IntPtr ISteamController,
          ulong controllerHandle,
          byte nColorR,
          byte nColorG,
          byte nColorB,
          uint nFlags);

        [DllImport("libsteam_api.dylib")]
        internal static extern int SteamAPI_ISteamController_GetGamepadIndexForController(
          IntPtr ISteamController,
          ulong ulControllerHandle);

        [DllImport("libsteam_api.dylib")]
        internal static extern ControllerHandle_t SteamAPI_ISteamController_GetControllerForGamepadIndex(
          IntPtr ISteamController,
          int nIndex);

        [DllImport("libsteam_api.dylib")]
        internal static extern ControllerMotionData_t SteamAPI_ISteamController_GetMotionData(
          IntPtr ISteamController,
          ulong controllerHandle);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamController_ShowDigitalActionOrigins(
          IntPtr ISteamController,
          ulong controllerHandle,
          ulong digitalActionHandle,
          float flScale,
          float flXPosition,
          float flYPosition);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamController_ShowAnalogActionOrigins(
          IntPtr ISteamController,
          ulong controllerHandle,
          ulong analogActionHandle,
          float flScale,
          float flXPosition,
          float flYPosition);

        [DllImport("libsteam_api.dylib")]
        internal static extern IntPtr SteamAPI_ISteamController_GetStringForActionOrigin(
          IntPtr ISteamController,
          ControllerActionOrigin eOrigin);

        [DllImport("libsteam_api.dylib")]
        internal static extern IntPtr SteamAPI_ISteamController_GetGlyphForActionOrigin(
          IntPtr ISteamController,
          ControllerActionOrigin eOrigin);

        [DllImport("libsteam_api.dylib")]
        internal static extern UGCQueryHandle_t SteamAPI_ISteamUGC_CreateQueryUserUGCRequest(
          IntPtr ISteamUGC,
          uint unAccountID,
          UserUGCList eListType,
          UGCMatchingUGCType eMatchingUGCType,
          UserUGCListSortOrder eSortOrder,
          uint nCreatorAppID,
          uint nConsumerAppID,
          uint unPage);

        [DllImport("libsteam_api.dylib")]
        internal static extern UGCQueryHandle_t SteamAPI_ISteamUGC_CreateQueryAllUGCRequest(
          IntPtr ISteamUGC,
          UGCQuery eQueryType,
          UGCMatchingUGCType eMatchingeMatchingUGCTypeFileType,
          uint nCreatorAppID,
          uint nConsumerAppID,
          uint unPage);

        [DllImport("libsteam_api.dylib")]
        internal static extern UGCQueryHandle_t SteamAPI_ISteamUGC_CreateQueryUGCDetailsRequest(
          IntPtr ISteamUGC,
          IntPtr pvecPublishedFileID,
          uint unNumPublishedFileIDs);

        [DllImport("libsteam_api.dylib")]
        internal static extern SteamAPICall_t SteamAPI_ISteamUGC_SendQueryUGCRequest(
          IntPtr ISteamUGC,
          ulong handle);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamUGC_GetQueryUGCResult(
          IntPtr ISteamUGC,
          ulong handle,
          uint index,
          ref SteamUGCDetails_t.PackSmall pDetails);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamUGC_GetQueryUGCPreviewURL(
          IntPtr ISteamUGC,
          ulong handle,
          uint index,
          StringBuilder pchURL,
          uint cchURLSize);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamUGC_GetQueryUGCMetadata(
          IntPtr ISteamUGC,
          ulong handle,
          uint index,
          StringBuilder pchMetadata,
          uint cchMetadatasize);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamUGC_GetQueryUGCChildren(
          IntPtr ISteamUGC,
          ulong handle,
          uint index,
          IntPtr pvecPublishedFileID,
          uint cMaxEntries);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamUGC_GetQueryUGCStatistic(
          IntPtr ISteamUGC,
          ulong handle,
          uint index,
          ItemStatistic eStatType,
          out ulong pStatValue);

        [DllImport("libsteam_api.dylib")]
        internal static extern uint SteamAPI_ISteamUGC_GetQueryUGCNumAdditionalPreviews(
          IntPtr ISteamUGC,
          ulong handle,
          uint index);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamUGC_GetQueryUGCAdditionalPreview(
          IntPtr ISteamUGC,
          ulong handle,
          uint index,
          uint previewIndex,
          StringBuilder pchURLOrVideoID,
          uint cchURLSize,
          StringBuilder pchOriginalFileName,
          uint cchOriginalFileNameSize,
          out ItemPreviewType pPreviewType);

        [DllImport("libsteam_api.dylib")]
        internal static extern uint SteamAPI_ISteamUGC_GetQueryUGCNumKeyValueTags(
          IntPtr ISteamUGC,
          ulong handle,
          uint index);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamUGC_GetQueryUGCKeyValueTag(
          IntPtr ISteamUGC,
          ulong handle,
          uint index,
          uint keyValueTagIndex,
          StringBuilder pchKey,
          uint cchKeySize,
          StringBuilder pchValue,
          uint cchValueSize);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamUGC_ReleaseQueryUGCRequest(
          IntPtr ISteamUGC,
          ulong handle);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamUGC_AddRequiredTag(
          IntPtr ISteamUGC,
          ulong handle,
          string pTagName);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamUGC_AddExcludedTag(
          IntPtr ISteamUGC,
          ulong handle,
          string pTagName);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamUGC_SetReturnOnlyIDs(
          IntPtr ISteamUGC,
          ulong handle,
          [MarshalAs(UnmanagedType.U1)] bool bReturnOnlyIDs);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamUGC_SetReturnKeyValueTags(
          IntPtr ISteamUGC,
          ulong handle,
          [MarshalAs(UnmanagedType.U1)] bool bReturnKeyValueTags);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamUGC_SetReturnLongDescription(
          IntPtr ISteamUGC,
          ulong handle,
          [MarshalAs(UnmanagedType.U1)] bool bReturnLongDescription);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamUGC_SetReturnMetadata(
          IntPtr ISteamUGC,
          ulong handle,
          [MarshalAs(UnmanagedType.U1)] bool bReturnMetadata);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamUGC_SetReturnChildren(
          IntPtr ISteamUGC,
          ulong handle,
          [MarshalAs(UnmanagedType.U1)] bool bReturnChildren);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamUGC_SetReturnAdditionalPreviews(
          IntPtr ISteamUGC,
          ulong handle,
          [MarshalAs(UnmanagedType.U1)] bool bReturnAdditionalPreviews);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamUGC_SetReturnTotalOnly(
          IntPtr ISteamUGC,
          ulong handle,
          [MarshalAs(UnmanagedType.U1)] bool bReturnTotalOnly);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamUGC_SetReturnPlaytimeStats(
          IntPtr ISteamUGC,
          ulong handle,
          uint unDays);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamUGC_SetLanguage(
          IntPtr ISteamUGC,
          ulong handle,
          string pchLanguage);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamUGC_SetAllowCachedResponse(
          IntPtr ISteamUGC,
          ulong handle,
          uint unMaxAgeSeconds);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamUGC_SetCloudFileNameFilter(
          IntPtr ISteamUGC,
          ulong handle,
          string pMatchCloudFileName);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamUGC_SetMatchAnyTag(
          IntPtr ISteamUGC,
          ulong handle,
          [MarshalAs(UnmanagedType.U1)] bool bMatchAnyTag);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamUGC_SetSearchText(
          IntPtr ISteamUGC,
          ulong handle,
          string pSearchText);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamUGC_SetRankedByTrendDays(
          IntPtr ISteamUGC,
          ulong handle,
          uint unDays);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamUGC_AddRequiredKeyValueTag(
          IntPtr ISteamUGC,
          ulong handle,
          string pKey,
          string pValue);

        [DllImport("libsteam_api.dylib")]
        internal static extern SteamAPICall_t SteamAPI_ISteamUGC_RequestUGCDetails(
          IntPtr ISteamUGC,
          ulong nPublishedFileID,
          uint unMaxAgeSeconds);

        [DllImport("libsteam_api.dylib")]
        internal static extern SteamAPICall_t SteamAPI_ISteamUGC_CreateItem(
          IntPtr ISteamUGC,
          uint nConsumerAppId,
          WorkshopFileType eFileType);

        [DllImport("libsteam_api.dylib")]
        internal static extern UGCUpdateHandle_t SteamAPI_ISteamUGC_StartItemUpdate(
          IntPtr ISteamUGC,
          uint nConsumerAppId,
          ulong nPublishedFileID);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamUGC_SetItemTitle(
          IntPtr ISteamUGC,
          ulong handle,
          string pchTitle);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamUGC_SetItemDescription(
          IntPtr ISteamUGC,
          ulong handle,
          string pchDescription);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamUGC_SetItemUpdateLanguage(
          IntPtr ISteamUGC,
          ulong handle,
          string pchLanguage);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamUGC_SetItemMetadata(
          IntPtr ISteamUGC,
          ulong handle,
          string pchMetaData);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamUGC_SetItemVisibility(
          IntPtr ISteamUGC,
          ulong handle,
          RemoteStoragePublishedFileVisibility eVisibility);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamUGC_SetItemTags(
          IntPtr ISteamUGC,
          ulong updateHandle,
          ref SteamParamStringArray_t.PackSmall pTags);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamUGC_SetItemContent(
          IntPtr ISteamUGC,
          ulong handle,
          string pszContentFolder);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamUGC_SetItemPreview(
          IntPtr ISteamUGC,
          ulong handle,
          string pszPreviewFile);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamUGC_RemoveItemKeyValueTags(
          IntPtr ISteamUGC,
          ulong handle,
          string pchKey);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamUGC_AddItemKeyValueTag(
          IntPtr ISteamUGC,
          ulong handle,
          string pchKey,
          string pchValue);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamUGC_AddItemPreviewFile(
          IntPtr ISteamUGC,
          ulong handle,
          string pszPreviewFile,
          ItemPreviewType type);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamUGC_AddItemPreviewVideo(
          IntPtr ISteamUGC,
          ulong handle,
          string pszVideoID);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamUGC_UpdateItemPreviewFile(
          IntPtr ISteamUGC,
          ulong handle,
          uint index,
          string pszPreviewFile);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamUGC_UpdateItemPreviewVideo(
          IntPtr ISteamUGC,
          ulong handle,
          uint index,
          string pszVideoID);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamUGC_RemoveItemPreview(
          IntPtr ISteamUGC,
          ulong handle,
          uint index);

        [DllImport("libsteam_api.dylib")]
        internal static extern SteamAPICall_t SteamAPI_ISteamUGC_SubmitItemUpdate(
          IntPtr ISteamUGC,
          ulong handle,
          string pchChangeNote);

        [DllImport("libsteam_api.dylib")]
        internal static extern ItemUpdateStatus SteamAPI_ISteamUGC_GetItemUpdateProgress(
          IntPtr ISteamUGC,
          ulong handle,
          out ulong punBytesProcessed,
          out ulong punBytesTotal);

        [DllImport("libsteam_api.dylib")]
        internal static extern SteamAPICall_t SteamAPI_ISteamUGC_SetUserItemVote(
          IntPtr ISteamUGC,
          ulong nPublishedFileID,
          [MarshalAs(UnmanagedType.U1)] bool bVoteUp);

        [DllImport("libsteam_api.dylib")]
        internal static extern SteamAPICall_t SteamAPI_ISteamUGC_GetUserItemVote(
          IntPtr ISteamUGC,
          ulong nPublishedFileID);

        [DllImport("libsteam_api.dylib")]
        internal static extern SteamAPICall_t SteamAPI_ISteamUGC_AddItemToFavorites(
          IntPtr ISteamUGC,
          uint nAppId,
          ulong nPublishedFileID);

        [DllImport("libsteam_api.dylib")]
        internal static extern SteamAPICall_t SteamAPI_ISteamUGC_RemoveItemFromFavorites(
          IntPtr ISteamUGC,
          uint nAppId,
          ulong nPublishedFileID);

        [DllImport("libsteam_api.dylib")]
        internal static extern SteamAPICall_t SteamAPI_ISteamUGC_SubscribeItem(
          IntPtr ISteamUGC,
          ulong nPublishedFileID);

        [DllImport("libsteam_api.dylib")]
        internal static extern SteamAPICall_t SteamAPI_ISteamUGC_UnsubscribeItem(
          IntPtr ISteamUGC,
          ulong nPublishedFileID);

        [DllImport("libsteam_api.dylib")]
        internal static extern uint SteamAPI_ISteamUGC_GetNumSubscribedItems(IntPtr ISteamUGC);

        [DllImport("libsteam_api.dylib")]
        internal static extern uint SteamAPI_ISteamUGC_GetSubscribedItems(
          IntPtr ISteamUGC,
          IntPtr pvecPublishedFileID,
          uint cMaxEntries);

        [DllImport("libsteam_api.dylib")]
        internal static extern uint SteamAPI_ISteamUGC_GetItemState(
          IntPtr ISteamUGC,
          ulong nPublishedFileID);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamUGC_GetItemInstallInfo(
          IntPtr ISteamUGC,
          ulong nPublishedFileID,
          out ulong punSizeOnDisk,
          StringBuilder pchFolder,
          uint cchFolderSize,
          out uint punTimeStamp);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamUGC_GetItemDownloadInfo(
          IntPtr ISteamUGC,
          ulong nPublishedFileID,
          out ulong punBytesDownloaded,
          out ulong punBytesTotal);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamUGC_DownloadItem(
          IntPtr ISteamUGC,
          ulong nPublishedFileID,
          [MarshalAs(UnmanagedType.U1)] bool bHighPriority);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamUGC_BInitWorkshopForGameServer(
          IntPtr ISteamUGC,
          uint unWorkshopDepotID,
          string pszFolder);

        [DllImport("libsteam_api.dylib")]
        internal static extern void SteamAPI_ISteamUGC_SuspendDownloads(
          IntPtr ISteamUGC,
          [MarshalAs(UnmanagedType.U1)] bool bSuspend);

        [DllImport("libsteam_api.dylib")]
        internal static extern SteamAPICall_t SteamAPI_ISteamUGC_StartPlaytimeTracking(
          IntPtr ISteamUGC,
          IntPtr pvecPublishedFileID,
          uint unNumPublishedFileIDs);

        [DllImport("libsteam_api.dylib")]
        internal static extern SteamAPICall_t SteamAPI_ISteamUGC_StopPlaytimeTracking(
          IntPtr ISteamUGC,
          IntPtr pvecPublishedFileID,
          uint unNumPublishedFileIDs);

        [DllImport("libsteam_api.dylib")]
        internal static extern SteamAPICall_t SteamAPI_ISteamUGC_StopPlaytimeTrackingForAllItems(
          IntPtr ISteamUGC);

        [DllImport("libsteam_api.dylib")]
        internal static extern SteamAPICall_t SteamAPI_ISteamUGC_AddDependency(
          IntPtr ISteamUGC,
          ulong nParentPublishedFileID,
          ulong nChildPublishedFileID);

        [DllImport("libsteam_api.dylib")]
        internal static extern SteamAPICall_t SteamAPI_ISteamUGC_RemoveDependency(
          IntPtr ISteamUGC,
          ulong nParentPublishedFileID,
          ulong nChildPublishedFileID);

        [DllImport("libsteam_api.dylib")]
        internal static extern uint SteamAPI_ISteamAppList_GetNumInstalledApps(IntPtr ISteamAppList);

        [DllImport("libsteam_api.dylib")]
        internal static extern uint SteamAPI_ISteamAppList_GetInstalledApps(
          IntPtr ISteamAppList,
          IntPtr pvecAppID,
          uint unMaxAppIDs);

        [DllImport("libsteam_api.dylib")]
        internal static extern int SteamAPI_ISteamAppList_GetAppName(
          IntPtr ISteamAppList,
          uint nAppID,
          StringBuilder pchName,
          int cchNameMax);

        [DllImport("libsteam_api.dylib")]
        internal static extern int SteamAPI_ISteamAppList_GetAppInstallDir(
          IntPtr ISteamAppList,
          uint nAppID,
          StringBuilder pchDirectory,
          int cchNameMax);

        [DllImport("libsteam_api.dylib")]
        internal static extern int SteamAPI_ISteamAppList_GetAppBuildId(
          IntPtr ISteamAppList,
          uint nAppID);

        [DllImport("libsteam_api.dylib")]
        internal static extern void SteamAPI_ISteamHTMLSurface_DestructISteamHTMLSurface(
          IntPtr ISteamHTMLSurface);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamHTMLSurface_Init(IntPtr ISteamHTMLSurface);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamHTMLSurface_Shutdown(IntPtr ISteamHTMLSurface);

        [DllImport("libsteam_api.dylib")]
        internal static extern SteamAPICall_t SteamAPI_ISteamHTMLSurface_CreateBrowser(
          IntPtr ISteamHTMLSurface,
          string pchUserAgent,
          string pchUserCSS);

        [DllImport("libsteam_api.dylib")]
        internal static extern void SteamAPI_ISteamHTMLSurface_RemoveBrowser(
          IntPtr ISteamHTMLSurface,
          uint unBrowserHandle);

        [DllImport("libsteam_api.dylib")]
        internal static extern void SteamAPI_ISteamHTMLSurface_LoadURL(
          IntPtr ISteamHTMLSurface,
          uint unBrowserHandle,
          string pchURL,
          string pchPostData);

        [DllImport("libsteam_api.dylib")]
        internal static extern void SteamAPI_ISteamHTMLSurface_SetSize(
          IntPtr ISteamHTMLSurface,
          uint unBrowserHandle,
          uint unWidth,
          uint unHeight);

        [DllImport("libsteam_api.dylib")]
        internal static extern void SteamAPI_ISteamHTMLSurface_StopLoad(
          IntPtr ISteamHTMLSurface,
          uint unBrowserHandle);

        [DllImport("libsteam_api.dylib")]
        internal static extern void SteamAPI_ISteamHTMLSurface_Reload(
          IntPtr ISteamHTMLSurface,
          uint unBrowserHandle);

        [DllImport("libsteam_api.dylib")]
        internal static extern void SteamAPI_ISteamHTMLSurface_GoBack(
          IntPtr ISteamHTMLSurface,
          uint unBrowserHandle);

        [DllImport("libsteam_api.dylib")]
        internal static extern void SteamAPI_ISteamHTMLSurface_GoForward(
          IntPtr ISteamHTMLSurface,
          uint unBrowserHandle);

        [DllImport("libsteam_api.dylib")]
        internal static extern void SteamAPI_ISteamHTMLSurface_AddHeader(
          IntPtr ISteamHTMLSurface,
          uint unBrowserHandle,
          string pchKey,
          string pchValue);

        [DllImport("libsteam_api.dylib")]
        internal static extern void SteamAPI_ISteamHTMLSurface_ExecuteJavascript(
          IntPtr ISteamHTMLSurface,
          uint unBrowserHandle,
          string pchScript);

        [DllImport("libsteam_api.dylib")]
        internal static extern void SteamAPI_ISteamHTMLSurface_MouseUp(
          IntPtr ISteamHTMLSurface,
          uint unBrowserHandle,
          HTMLMouseButton eMouseButton);

        [DllImport("libsteam_api.dylib")]
        internal static extern void SteamAPI_ISteamHTMLSurface_MouseDown(
          IntPtr ISteamHTMLSurface,
          uint unBrowserHandle,
          HTMLMouseButton eMouseButton);

        [DllImport("libsteam_api.dylib")]
        internal static extern void SteamAPI_ISteamHTMLSurface_MouseDoubleClick(
          IntPtr ISteamHTMLSurface,
          uint unBrowserHandle,
          HTMLMouseButton eMouseButton);

        [DllImport("libsteam_api.dylib")]
        internal static extern void SteamAPI_ISteamHTMLSurface_MouseMove(
          IntPtr ISteamHTMLSurface,
          uint unBrowserHandle,
          int x,
          int y);

        [DllImport("libsteam_api.dylib")]
        internal static extern void SteamAPI_ISteamHTMLSurface_MouseWheel(
          IntPtr ISteamHTMLSurface,
          uint unBrowserHandle,
          int nDelta);

        [DllImport("libsteam_api.dylib")]
        internal static extern void SteamAPI_ISteamHTMLSurface_KeyDown(
          IntPtr ISteamHTMLSurface,
          uint unBrowserHandle,
          uint nNativeKeyCode,
          HTMLKeyModifiers eHTMLKeyModifiers);

        [DllImport("libsteam_api.dylib")]
        internal static extern void SteamAPI_ISteamHTMLSurface_KeyUp(
          IntPtr ISteamHTMLSurface,
          uint unBrowserHandle,
          uint nNativeKeyCode,
          HTMLKeyModifiers eHTMLKeyModifiers);

        [DllImport("libsteam_api.dylib")]
        internal static extern void SteamAPI_ISteamHTMLSurface_KeyChar(
          IntPtr ISteamHTMLSurface,
          uint unBrowserHandle,
          uint cUnicodeChar,
          HTMLKeyModifiers eHTMLKeyModifiers);

        [DllImport("libsteam_api.dylib")]
        internal static extern void SteamAPI_ISteamHTMLSurface_SetHorizontalScroll(
          IntPtr ISteamHTMLSurface,
          uint unBrowserHandle,
          uint nAbsolutePixelScroll);

        [DllImport("libsteam_api.dylib")]
        internal static extern void SteamAPI_ISteamHTMLSurface_SetVerticalScroll(
          IntPtr ISteamHTMLSurface,
          uint unBrowserHandle,
          uint nAbsolutePixelScroll);

        [DllImport("libsteam_api.dylib")]
        internal static extern void SteamAPI_ISteamHTMLSurface_SetKeyFocus(
          IntPtr ISteamHTMLSurface,
          uint unBrowserHandle,
          [MarshalAs(UnmanagedType.U1)] bool bHasKeyFocus);

        [DllImport("libsteam_api.dylib")]
        internal static extern void SteamAPI_ISteamHTMLSurface_ViewSource(
          IntPtr ISteamHTMLSurface,
          uint unBrowserHandle);

        [DllImport("libsteam_api.dylib")]
        internal static extern void SteamAPI_ISteamHTMLSurface_CopyToClipboard(
          IntPtr ISteamHTMLSurface,
          uint unBrowserHandle);

        [DllImport("libsteam_api.dylib")]
        internal static extern void SteamAPI_ISteamHTMLSurface_PasteFromClipboard(
          IntPtr ISteamHTMLSurface,
          uint unBrowserHandle);

        [DllImport("libsteam_api.dylib")]
        internal static extern void SteamAPI_ISteamHTMLSurface_Find(
          IntPtr ISteamHTMLSurface,
          uint unBrowserHandle,
          string pchSearchStr,
          [MarshalAs(UnmanagedType.U1)] bool bCurrentlyInFind,
          [MarshalAs(UnmanagedType.U1)] bool bReverse);

        [DllImport("libsteam_api.dylib")]
        internal static extern void SteamAPI_ISteamHTMLSurface_StopFind(
          IntPtr ISteamHTMLSurface,
          uint unBrowserHandle);

        [DllImport("libsteam_api.dylib")]
        internal static extern void SteamAPI_ISteamHTMLSurface_GetLinkAtPosition(
          IntPtr ISteamHTMLSurface,
          uint unBrowserHandle,
          int x,
          int y);

        [DllImport("libsteam_api.dylib")]
        internal static extern void SteamAPI_ISteamHTMLSurface_SetCookie(
          IntPtr ISteamHTMLSurface,
          string pchHostname,
          string pchKey,
          string pchValue,
          string pchPath,
          uint nExpires,
          [MarshalAs(UnmanagedType.U1)] bool bSecure,
          [MarshalAs(UnmanagedType.U1)] bool bHTTPOnly);

        [DllImport("libsteam_api.dylib")]
        internal static extern void SteamAPI_ISteamHTMLSurface_SetPageScaleFactor(
          IntPtr ISteamHTMLSurface,
          uint unBrowserHandle,
          float flZoom,
          int nPointX,
          int nPointY);

        [DllImport("libsteam_api.dylib")]
        internal static extern void SteamAPI_ISteamHTMLSurface_SetBackgroundMode(
          IntPtr ISteamHTMLSurface,
          uint unBrowserHandle,
          [MarshalAs(UnmanagedType.U1)] bool bBackgroundMode);

        [DllImport("libsteam_api.dylib")]
        internal static extern void SteamAPI_ISteamHTMLSurface_AllowStartRequest(
          IntPtr ISteamHTMLSurface,
          uint unBrowserHandle,
          [MarshalAs(UnmanagedType.U1)] bool bAllowed);

        [DllImport("libsteam_api.dylib")]
        internal static extern void SteamAPI_ISteamHTMLSurface_JSDialogResponse(
          IntPtr ISteamHTMLSurface,
          uint unBrowserHandle,
          [MarshalAs(UnmanagedType.U1)] bool bResult);

        [DllImport("libsteam_api.dylib")]
        internal static extern Result SteamAPI_ISteamInventory_GetResultStatus(
          IntPtr ISteamInventory,
          int resultHandle);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamInventory_GetResultItems(
          IntPtr ISteamInventory,
          int resultHandle,
          IntPtr pOutItemsArray,
          out uint punOutItemsArraySize);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamInventory_GetResultItemProperty(
          IntPtr ISteamInventory,
          int resultHandle,
          uint unItemIndex,
          string pchPropertyName,
          StringBuilder pchValueBuffer,
          out uint punValueBufferSizeOut);

        [DllImport("libsteam_api.dylib")]
        internal static extern uint SteamAPI_ISteamInventory_GetResultTimestamp(
          IntPtr ISteamInventory,
          int resultHandle);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamInventory_CheckResultSteamID(
          IntPtr ISteamInventory,
          int resultHandle,
          ulong steamIDExpected);

        [DllImport("libsteam_api.dylib")]
        internal static extern void SteamAPI_ISteamInventory_DestroyResult(
          IntPtr ISteamInventory,
          int resultHandle);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamInventory_GetAllItems(
          IntPtr ISteamInventory,
          ref int pResultHandle);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamInventory_GetItemsByID(
          IntPtr ISteamInventory,
          ref int pResultHandle,
          ulong[] pInstanceIDs,
          uint unCountInstanceIDs);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamInventory_SerializeResult(
          IntPtr ISteamInventory,
          int resultHandle,
          IntPtr pOutBuffer,
          out uint punOutBufferSize);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamInventory_DeserializeResult(
          IntPtr ISteamInventory,
          ref int pOutResultHandle,
          IntPtr pBuffer,
          uint unBufferSize,
          [MarshalAs(UnmanagedType.U1)] bool bRESERVED_MUST_BE_FALSE);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamInventory_GenerateItems(
          IntPtr ISteamInventory,
          ref int pResultHandle,
          int[] pArrayItemDefs,
          uint[] punArrayQuantity,
          uint unArrayLength);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamInventory_GrantPromoItems(
          IntPtr ISteamInventory,
          ref int pResultHandle);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamInventory_AddPromoItem(
          IntPtr ISteamInventory,
          ref int pResultHandle,
          int itemDef);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamInventory_AddPromoItems(
          IntPtr ISteamInventory,
          ref int pResultHandle,
          int[] pArrayItemDefs,
          uint unArrayLength);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamInventory_ConsumeItem(
          IntPtr ISteamInventory,
          ref int pResultHandle,
          ulong itemConsume,
          uint unQuantity);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamInventory_ExchangeItems(
          IntPtr ISteamInventory,
          ref int pResultHandle,
          int[] pArrayGenerate,
          uint[] punArrayGenerateQuantity,
          uint unArrayGenerateLength,
          ulong[] pArrayDestroy,
          uint[] punArrayDestroyQuantity,
          uint unArrayDestroyLength);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamInventory_TransferItemQuantity(
          IntPtr ISteamInventory,
          ref int pResultHandle,
          ulong itemIdSource,
          uint unQuantity,
          ulong itemIdDest);

        [DllImport("libsteam_api.dylib")]
        internal static extern void SteamAPI_ISteamInventory_SendItemDropHeartbeat(
          IntPtr ISteamInventory);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamInventory_TriggerItemDrop(
          IntPtr ISteamInventory,
          ref int pResultHandle,
          int dropListDefinition);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamInventory_TradeItems(
          IntPtr ISteamInventory,
          ref int pResultHandle,
          ulong steamIDTradePartner,
          ulong[] pArrayGive,
          uint[] pArrayGiveQuantity,
          uint nArrayGiveLength,
          ulong[] pArrayGet,
          uint[] pArrayGetQuantity,
          uint nArrayGetLength);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamInventory_LoadItemDefinitions(
          IntPtr ISteamInventory);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamInventory_GetItemDefinitionIDs(
          IntPtr ISteamInventory,
          IntPtr pItemDefIDs,
          out uint punItemDefIDsArraySize);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamInventory_GetItemDefinitionProperty(
          IntPtr ISteamInventory,
          int iDefinition,
          string pchPropertyName,
          StringBuilder pchValueBuffer,
          out uint punValueBufferSizeOut);

        [DllImport("libsteam_api.dylib")]
        internal static extern SteamAPICall_t SteamAPI_ISteamInventory_RequestEligiblePromoItemDefinitionsIDs(
          IntPtr ISteamInventory,
          ulong steamID);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamInventory_GetEligiblePromoItemDefinitionIDs(
          IntPtr ISteamInventory,
          ulong steamID,
          IntPtr pItemDefIDs,
          out uint punItemDefIDsArraySize);

        [DllImport("libsteam_api.dylib")]
        internal static extern void SteamAPI_ISteamVideo_GetVideoURL(
          IntPtr ISteamVideo,
          uint unVideoAppID);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamVideo_IsBroadcasting(
          IntPtr ISteamVideo,
          IntPtr pnNumViewers);

        [DllImport("libsteam_api.dylib")]
        internal static extern void SteamAPI_ISteamVideo_GetOPFSettings(
          IntPtr ISteamVideo,
          uint unVideoAppID);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamVideo_GetOPFStringForApp(
          IntPtr ISteamVideo,
          uint unVideoAppID,
          StringBuilder pchBuffer,
          out int pnBufferSize);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamGameServer_InitGameServer(
          IntPtr ISteamGameServer,
          uint unIP,
          ushort usGamePort,
          ushort usQueryPort,
          uint unFlags,
          uint nGameAppId,
          string pchVersionString);

        [DllImport("libsteam_api.dylib")]
        internal static extern void SteamAPI_ISteamGameServer_SetProduct(
          IntPtr ISteamGameServer,
          string pszProduct);

        [DllImport("libsteam_api.dylib")]
        internal static extern void SteamAPI_ISteamGameServer_SetGameDescription(
          IntPtr ISteamGameServer,
          string pszGameDescription);

        [DllImport("libsteam_api.dylib")]
        internal static extern void SteamAPI_ISteamGameServer_SetModDir(
          IntPtr ISteamGameServer,
          string pszModDir);

        [DllImport("libsteam_api.dylib")]
        internal static extern void SteamAPI_ISteamGameServer_SetDedicatedServer(
          IntPtr ISteamGameServer,
          [MarshalAs(UnmanagedType.U1)] bool bDedicated);

        [DllImport("libsteam_api.dylib")]
        internal static extern void SteamAPI_ISteamGameServer_LogOn(
          IntPtr ISteamGameServer,
          string pszToken);

        [DllImport("libsteam_api.dylib")]
        internal static extern void SteamAPI_ISteamGameServer_LogOnAnonymous(IntPtr ISteamGameServer);

        [DllImport("libsteam_api.dylib")]
        internal static extern void SteamAPI_ISteamGameServer_LogOff(IntPtr ISteamGameServer);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamGameServer_BLoggedOn(IntPtr ISteamGameServer);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamGameServer_BSecure(IntPtr ISteamGameServer);

        [DllImport("libsteam_api.dylib")]
        internal static extern CSteamID SteamAPI_ISteamGameServer_GetSteamID(IntPtr ISteamGameServer);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamGameServer_WasRestartRequested(
          IntPtr ISteamGameServer);

        [DllImport("libsteam_api.dylib")]
        internal static extern void SteamAPI_ISteamGameServer_SetMaxPlayerCount(
          IntPtr ISteamGameServer,
          int cPlayersMax);

        [DllImport("libsteam_api.dylib")]
        internal static extern void SteamAPI_ISteamGameServer_SetBotPlayerCount(
          IntPtr ISteamGameServer,
          int cBotplayers);

        [DllImport("libsteam_api.dylib")]
        internal static extern void SteamAPI_ISteamGameServer_SetServerName(
          IntPtr ISteamGameServer,
          string pszServerName);

        [DllImport("libsteam_api.dylib")]
        internal static extern void SteamAPI_ISteamGameServer_SetMapName(
          IntPtr ISteamGameServer,
          string pszMapName);

        [DllImport("libsteam_api.dylib")]
        internal static extern void SteamAPI_ISteamGameServer_SetPasswordProtected(
          IntPtr ISteamGameServer,
          [MarshalAs(UnmanagedType.U1)] bool bPasswordProtected);

        [DllImport("libsteam_api.dylib")]
        internal static extern void SteamAPI_ISteamGameServer_SetSpectatorPort(
          IntPtr ISteamGameServer,
          ushort unSpectatorPort);

        [DllImport("libsteam_api.dylib")]
        internal static extern void SteamAPI_ISteamGameServer_SetSpectatorServerName(
          IntPtr ISteamGameServer,
          string pszSpectatorServerName);

        [DllImport("libsteam_api.dylib")]
        internal static extern void SteamAPI_ISteamGameServer_ClearAllKeyValues(
          IntPtr ISteamGameServer);

        [DllImport("libsteam_api.dylib")]
        internal static extern void SteamAPI_ISteamGameServer_SetKeyValue(
          IntPtr ISteamGameServer,
          string pKey,
          string pValue);

        [DllImport("libsteam_api.dylib")]
        internal static extern void SteamAPI_ISteamGameServer_SetGameTags(
          IntPtr ISteamGameServer,
          string pchGameTags);

        [DllImport("libsteam_api.dylib")]
        internal static extern void SteamAPI_ISteamGameServer_SetGameData(
          IntPtr ISteamGameServer,
          string pchGameData);

        [DllImport("libsteam_api.dylib")]
        internal static extern void SteamAPI_ISteamGameServer_SetRegion(
          IntPtr ISteamGameServer,
          string pszRegion);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamGameServer_SendUserConnectAndAuthenticate(
          IntPtr ISteamGameServer,
          uint unIPClient,
          IntPtr pvAuthBlob,
          uint cubAuthBlobSize,
          out ulong pSteamIDUser);

        [DllImport("libsteam_api.dylib")]
        internal static extern CSteamID SteamAPI_ISteamGameServer_CreateUnauthenticatedUserConnection(
          IntPtr ISteamGameServer);

        [DllImport("libsteam_api.dylib")]
        internal static extern void SteamAPI_ISteamGameServer_SendUserDisconnect(
          IntPtr ISteamGameServer,
          ulong steamIDUser);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamGameServer_BUpdateUserData(
          IntPtr ISteamGameServer,
          ulong steamIDUser,
          string pchPlayerName,
          uint uScore);

        [DllImport("libsteam_api.dylib")]
        internal static extern HAuthTicket SteamAPI_ISteamGameServer_GetAuthSessionTicket(
          IntPtr ISteamGameServer,
          IntPtr pTicket,
          int cbMaxTicket,
          out uint pcbTicket);

        [DllImport("libsteam_api.dylib")]
        internal static extern BeginAuthSessionResult SteamAPI_ISteamGameServer_BeginAuthSession(
          IntPtr ISteamGameServer,
          IntPtr pAuthTicket,
          int cbAuthTicket,
          ulong steamID);

        [DllImport("libsteam_api.dylib")]
        internal static extern void SteamAPI_ISteamGameServer_EndAuthSession(
          IntPtr ISteamGameServer,
          ulong steamID);

        [DllImport("libsteam_api.dylib")]
        internal static extern void SteamAPI_ISteamGameServer_CancelAuthTicket(
          IntPtr ISteamGameServer,
          uint hAuthTicket);

        [DllImport("libsteam_api.dylib")]
        internal static extern UserHasLicenseForAppResult SteamAPI_ISteamGameServer_UserHasLicenseForApp(
          IntPtr ISteamGameServer,
          ulong steamID,
          uint appID);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamGameServer_RequestUserGroupStatus(
          IntPtr ISteamGameServer,
          ulong steamIDUser,
          ulong steamIDGroup);

        [DllImport("libsteam_api.dylib")]
        internal static extern void SteamAPI_ISteamGameServer_GetGameplayStats(
          IntPtr ISteamGameServer);

        [DllImport("libsteam_api.dylib")]
        internal static extern SteamAPICall_t SteamAPI_ISteamGameServer_GetServerReputation(
          IntPtr ISteamGameServer);

        [DllImport("libsteam_api.dylib")]
        internal static extern uint SteamAPI_ISteamGameServer_GetPublicIP(IntPtr ISteamGameServer);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamGameServer_HandleIncomingPacket(
          IntPtr ISteamGameServer,
          IntPtr pData,
          int cbData,
          uint srcIP,
          ushort srcPort);

        [DllImport("libsteam_api.dylib")]
        internal static extern int SteamAPI_ISteamGameServer_GetNextOutgoingPacket(
          IntPtr ISteamGameServer,
          IntPtr pOut,
          int cbMaxOut,
          out uint pNetAdr,
          out ushort pPort);

        [DllImport("libsteam_api.dylib")]
        internal static extern void SteamAPI_ISteamGameServer_EnableHeartbeats(
          IntPtr ISteamGameServer,
          [MarshalAs(UnmanagedType.U1)] bool bActive);

        [DllImport("libsteam_api.dylib")]
        internal static extern void SteamAPI_ISteamGameServer_SetHeartbeatInterval(
          IntPtr ISteamGameServer,
          int iHeartbeatInterval);

        [DllImport("libsteam_api.dylib")]
        internal static extern void SteamAPI_ISteamGameServer_ForceHeartbeat(IntPtr ISteamGameServer);

        [DllImport("libsteam_api.dylib")]
        internal static extern SteamAPICall_t SteamAPI_ISteamGameServer_AssociateWithClan(
          IntPtr ISteamGameServer,
          ulong steamIDClan);

        [DllImport("libsteam_api.dylib")]
        internal static extern SteamAPICall_t SteamAPI_ISteamGameServer_ComputeNewPlayerCompatibility(
          IntPtr ISteamGameServer,
          ulong steamIDNewPlayer);

        [DllImport("libsteam_api.dylib")]
        internal static extern SteamAPICall_t SteamAPI_ISteamGameServerStats_RequestUserStats(
          IntPtr ISteamGameServerStats,
          ulong steamIDUser);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamGameServerStats_GetUserStat(
          IntPtr ISteamGameServerStats,
          ulong steamIDUser,
          string pchName,
          out int pData);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamGameServerStats_GetUserStat0(
          IntPtr ISteamGameServerStats,
          ulong steamIDUser,
          string pchName,
          out float pData);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamGameServerStats_GetUserAchievement(
          IntPtr ISteamGameServerStats,
          ulong steamIDUser,
          string pchName,
          [MarshalAs(UnmanagedType.U1)] ref bool pbAchieved);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamGameServerStats_SetUserStat(
          IntPtr ISteamGameServerStats,
          ulong steamIDUser,
          string pchName,
          int nData);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamGameServerStats_SetUserStat0(
          IntPtr ISteamGameServerStats,
          ulong steamIDUser,
          string pchName,
          float fData);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamGameServerStats_UpdateUserAvgRateStat(
          IntPtr ISteamGameServerStats,
          ulong steamIDUser,
          string pchName,
          float flCountThisSession,
          double dSessionLength);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamGameServerStats_SetUserAchievement(
          IntPtr ISteamGameServerStats,
          ulong steamIDUser,
          string pchName);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_ISteamGameServerStats_ClearUserAchievement(
          IntPtr ISteamGameServerStats,
          ulong steamIDUser,
          string pchName);

        [DllImport("libsteam_api.dylib")]
        internal static extern SteamAPICall_t SteamAPI_ISteamGameServerStats_StoreUserStats(
          IntPtr ISteamGameServerStats,
          ulong steamIDUser);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_Init();

        [DllImport("libsteam_api.dylib")]
        internal static extern void SteamAPI_RunCallbacks();

        [DllImport("libsteam_api.dylib")]
        internal static extern void SteamGameServer_RunCallbacks();

        [DllImport("libsteam_api.dylib")]
        internal static extern void SteamAPI_RegisterCallback(IntPtr pCallback, int callback);

        [DllImport("libsteam_api.dylib")]
        internal static extern void SteamAPI_UnregisterCallback(IntPtr pCallback);

        [DllImport("libsteam_api.dylib")]
        internal static extern void SteamAPI_RegisterCallResult(IntPtr pCallback, ulong callback);

        [DllImport("libsteam_api.dylib")]
        internal static extern void SteamAPI_UnregisterCallResult(IntPtr pCallback, ulong callback);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamInternal_GameServer_Init(
          uint unIP,
          ushort usPort,
          ushort usGamePort,
          ushort usQueryPort,
          int eServerMode,
          string pchVersionString);

        [DllImport("libsteam_api.dylib")]
        internal static extern void SteamAPI_Shutdown();

        [DllImport("libsteam_api.dylib")]
        internal static extern void SteamGameServer_Shutdown();

        [DllImport("libsteam_api.dylib")]
        internal static extern HSteamUser SteamAPI_GetHSteamUser();

        [DllImport("libsteam_api.dylib")]
        internal static extern HSteamPipe SteamAPI_GetHSteamPipe();

        [DllImport("libsteam_api.dylib")]
        internal static extern HSteamUser SteamGameServer_GetHSteamUser();

        [DllImport("libsteam_api.dylib")]
        internal static extern HSteamPipe SteamGameServer_GetHSteamPipe();

        [DllImport("libsteam_api.dylib")]
        internal static extern IntPtr SteamInternal_CreateInterface(string version);

        [DllImport("libsteam_api.dylib")]
        internal static extern bool SteamAPI_RestartAppIfNecessary(uint unOwnAppID);
      }
    }

    internal class Win32 : Platform.Interface, IDisposable
    {
      internal IntPtr _ptr;

      public bool IsValid => this._ptr != IntPtr.Zero;

      internal Win32(IntPtr pointer) => this._ptr = pointer;

      public virtual void Dispose() => this._ptr = IntPtr.Zero;

      public virtual HSteamPipe ISteamClient_CreateSteamPipe()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamClient_CreateSteamPipe(this._ptr) : throw new Exception("ISteamClient _ptr is null!");
      }

      public virtual bool ISteamClient_BReleaseSteamPipe(int hSteamPipe)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamClient_BReleaseSteamPipe(this._ptr, hSteamPipe) : throw new Exception("ISteamClient _ptr is null!");
      }

      public virtual HSteamUser ISteamClient_ConnectToGlobalUser(int hSteamPipe)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamClient_ConnectToGlobalUser(this._ptr, hSteamPipe) : throw new Exception("ISteamClient _ptr is null!");
      }

      public virtual HSteamUser ISteamClient_CreateLocalUser(
        out int phSteamPipe,
        AccountType eAccountType)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamClient_CreateLocalUser(this._ptr, out phSteamPipe, eAccountType) : throw new Exception("ISteamClient _ptr is null!");
      }

      public virtual void ISteamClient_ReleaseUser(int hSteamPipe, int hUser)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamClient _ptr is null!");
        Platform.Win32.Native.SteamAPI_ISteamClient_ReleaseUser(this._ptr, hSteamPipe, hUser);
      }

      public virtual IntPtr ISteamClient_GetISteamUser(
        int hSteamUser,
        int hSteamPipe,
        string pchVersion)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamClient _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamClient_GetISteamUser(this._ptr, hSteamUser, hSteamPipe, pchVersion);
      }

      public virtual IntPtr ISteamClient_GetISteamGameServer(
        int hSteamUser,
        int hSteamPipe,
        string pchVersion)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamClient _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamClient_GetISteamGameServer(this._ptr, hSteamUser, hSteamPipe, pchVersion);
      }

      public virtual void ISteamClient_SetLocalIPBinding(uint unIP, ushort usPort)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamClient _ptr is null!");
        Platform.Win32.Native.SteamAPI_ISteamClient_SetLocalIPBinding(this._ptr, unIP, usPort);
      }

      public virtual IntPtr ISteamClient_GetISteamFriends(
        int hSteamUser,
        int hSteamPipe,
        string pchVersion)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamClient _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamClient_GetISteamFriends(this._ptr, hSteamUser, hSteamPipe, pchVersion);
      }

      public virtual IntPtr ISteamClient_GetISteamUtils(int hSteamPipe, string pchVersion)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamClient _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamClient_GetISteamUtils(this._ptr, hSteamPipe, pchVersion);
      }

      public virtual IntPtr ISteamClient_GetISteamMatchmaking(
        int hSteamUser,
        int hSteamPipe,
        string pchVersion)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamClient _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamClient_GetISteamMatchmaking(this._ptr, hSteamUser, hSteamPipe, pchVersion);
      }

      public virtual IntPtr ISteamClient_GetISteamMatchmakingServers(
        int hSteamUser,
        int hSteamPipe,
        string pchVersion)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamClient _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamClient_GetISteamMatchmakingServers(this._ptr, hSteamUser, hSteamPipe, pchVersion);
      }

      public virtual IntPtr ISteamClient_GetISteamGenericInterface(
        int hSteamUser,
        int hSteamPipe,
        string pchVersion)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamClient _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamClient_GetISteamGenericInterface(this._ptr, hSteamUser, hSteamPipe, pchVersion);
      }

      public virtual IntPtr ISteamClient_GetISteamUserStats(
        int hSteamUser,
        int hSteamPipe,
        string pchVersion)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamClient _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamClient_GetISteamUserStats(this._ptr, hSteamUser, hSteamPipe, pchVersion);
      }

      public virtual IntPtr ISteamClient_GetISteamGameServerStats(
        int hSteamuser,
        int hSteamPipe,
        string pchVersion)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamClient _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamClient_GetISteamGameServerStats(this._ptr, hSteamuser, hSteamPipe, pchVersion);
      }

      public virtual IntPtr ISteamClient_GetISteamApps(
        int hSteamUser,
        int hSteamPipe,
        string pchVersion)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamClient _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamClient_GetISteamApps(this._ptr, hSteamUser, hSteamPipe, pchVersion);
      }

      public virtual IntPtr ISteamClient_GetISteamNetworking(
        int hSteamUser,
        int hSteamPipe,
        string pchVersion)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamClient _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamClient_GetISteamNetworking(this._ptr, hSteamUser, hSteamPipe, pchVersion);
      }

      public virtual IntPtr ISteamClient_GetISteamRemoteStorage(
        int hSteamuser,
        int hSteamPipe,
        string pchVersion)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamClient _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamClient_GetISteamRemoteStorage(this._ptr, hSteamuser, hSteamPipe, pchVersion);
      }

      public virtual IntPtr ISteamClient_GetISteamScreenshots(
        int hSteamuser,
        int hSteamPipe,
        string pchVersion)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamClient _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamClient_GetISteamScreenshots(this._ptr, hSteamuser, hSteamPipe, pchVersion);
      }

      public virtual uint ISteamClient_GetIPCCallCount()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamClient_GetIPCCallCount(this._ptr) : throw new Exception("ISteamClient _ptr is null!");
      }

      public virtual void ISteamClient_SetWarningMessageHook(IntPtr pFunction)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamClient _ptr is null!");
        Platform.Win32.Native.SteamAPI_ISteamClient_SetWarningMessageHook(this._ptr, pFunction);
      }

      public virtual bool ISteamClient_BShutdownIfAllPipesClosed()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamClient_BShutdownIfAllPipesClosed(this._ptr) : throw new Exception("ISteamClient _ptr is null!");
      }

      public virtual IntPtr ISteamClient_GetISteamHTTP(
        int hSteamuser,
        int hSteamPipe,
        string pchVersion)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamClient _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamClient_GetISteamHTTP(this._ptr, hSteamuser, hSteamPipe, pchVersion);
      }

      public virtual IntPtr ISteamClient_GetISteamUnifiedMessages(
        int hSteamuser,
        int hSteamPipe,
        string pchVersion)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamClient _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamClient_GetISteamUnifiedMessages(this._ptr, hSteamuser, hSteamPipe, pchVersion);
      }

      public virtual IntPtr ISteamClient_GetISteamController(
        int hSteamUser,
        int hSteamPipe,
        string pchVersion)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamClient _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamClient_GetISteamController(this._ptr, hSteamUser, hSteamPipe, pchVersion);
      }

      public virtual IntPtr ISteamClient_GetISteamUGC(
        int hSteamUser,
        int hSteamPipe,
        string pchVersion)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamClient _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamClient_GetISteamUGC(this._ptr, hSteamUser, hSteamPipe, pchVersion);
      }

      public virtual IntPtr ISteamClient_GetISteamAppList(
        int hSteamUser,
        int hSteamPipe,
        string pchVersion)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamClient _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamClient_GetISteamAppList(this._ptr, hSteamUser, hSteamPipe, pchVersion);
      }

      public virtual IntPtr ISteamClient_GetISteamMusic(
        int hSteamuser,
        int hSteamPipe,
        string pchVersion)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamClient _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamClient_GetISteamMusic(this._ptr, hSteamuser, hSteamPipe, pchVersion);
      }

      public virtual IntPtr ISteamClient_GetISteamMusicRemote(
        int hSteamuser,
        int hSteamPipe,
        string pchVersion)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamClient _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamClient_GetISteamMusicRemote(this._ptr, hSteamuser, hSteamPipe, pchVersion);
      }

      public virtual IntPtr ISteamClient_GetISteamHTMLSurface(
        int hSteamuser,
        int hSteamPipe,
        string pchVersion)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamClient _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamClient_GetISteamHTMLSurface(this._ptr, hSteamuser, hSteamPipe, pchVersion);
      }

      public virtual IntPtr ISteamClient_GetISteamInventory(
        int hSteamuser,
        int hSteamPipe,
        string pchVersion)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamClient _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamClient_GetISteamInventory(this._ptr, hSteamuser, hSteamPipe, pchVersion);
      }

      public virtual IntPtr ISteamClient_GetISteamVideo(
        int hSteamuser,
        int hSteamPipe,
        string pchVersion)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamClient _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamClient_GetISteamVideo(this._ptr, hSteamuser, hSteamPipe, pchVersion);
      }

      public virtual HSteamUser ISteamUser_GetHSteamUser()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamUser_GetHSteamUser(this._ptr) : throw new Exception("ISteamUser _ptr is null!");
      }

      public virtual bool ISteamUser_BLoggedOn()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamUser_BLoggedOn(this._ptr) : throw new Exception("ISteamUser _ptr is null!");
      }

      public virtual CSteamID ISteamUser_GetSteamID()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamUser_GetSteamID(this._ptr) : throw new Exception("ISteamUser _ptr is null!");
      }

      public virtual int ISteamUser_InitiateGameConnection(
        IntPtr pAuthBlob,
        int cbMaxAuthBlob,
        ulong steamIDGameServer,
        uint unIPServer,
        ushort usPortServer,
        [MarshalAs(UnmanagedType.U1)] bool bSecure)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUser _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamUser_InitiateGameConnection(this._ptr, pAuthBlob, cbMaxAuthBlob, steamIDGameServer, unIPServer, usPortServer, bSecure);
      }

      public virtual void ISteamUser_TerminateGameConnection(uint unIPServer, ushort usPortServer)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUser _ptr is null!");
        Platform.Win32.Native.SteamAPI_ISteamUser_TerminateGameConnection(this._ptr, unIPServer, usPortServer);
      }

      public virtual void ISteamUser_TrackAppUsageEvent(
        ulong gameID,
        int eAppUsageEvent,
        string pchExtraInfo)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUser _ptr is null!");
        Platform.Win32.Native.SteamAPI_ISteamUser_TrackAppUsageEvent(this._ptr, gameID, eAppUsageEvent, pchExtraInfo);
      }

      public virtual bool ISteamUser_GetUserDataFolder(StringBuilder pchBuffer, int cubBuffer)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUser _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamUser_GetUserDataFolder(this._ptr, pchBuffer, cubBuffer);
      }

      public virtual void ISteamUser_StartVoiceRecording()
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUser _ptr is null!");
        Platform.Win32.Native.SteamAPI_ISteamUser_StartVoiceRecording(this._ptr);
      }

      public virtual void ISteamUser_StopVoiceRecording()
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUser _ptr is null!");
        Platform.Win32.Native.SteamAPI_ISteamUser_StopVoiceRecording(this._ptr);
      }

      public virtual VoiceResult ISteamUser_GetAvailableVoice(
        out uint pcbCompressed,
        out uint pcbUncompressed_Deprecated,
        uint nUncompressedVoiceDesiredSampleRate_Deprecated)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamUser_GetAvailableVoice(this._ptr, out pcbCompressed, out pcbUncompressed_Deprecated, nUncompressedVoiceDesiredSampleRate_Deprecated) : throw new Exception("ISteamUser _ptr is null!");
      }

      public virtual VoiceResult ISteamUser_GetVoice(
        [MarshalAs(UnmanagedType.U1)] bool bWantCompressed,
        IntPtr pDestBuffer,
        uint cbDestBufferSize,
        out uint nBytesWritten,
        [MarshalAs(UnmanagedType.U1)] bool bWantUncompressed_Deprecated,
        IntPtr pUncompressedDestBuffer_Deprecated,
        uint cbUncompressedDestBufferSize_Deprecated,
        out uint nUncompressBytesWritten_Deprecated,
        uint nUncompressedVoiceDesiredSampleRate_Deprecated)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUser _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamUser_GetVoice(this._ptr, bWantCompressed, pDestBuffer, cbDestBufferSize, out nBytesWritten, bWantUncompressed_Deprecated, pUncompressedDestBuffer_Deprecated, cbUncompressedDestBufferSize_Deprecated, out nUncompressBytesWritten_Deprecated, nUncompressedVoiceDesiredSampleRate_Deprecated);
      }

      public virtual VoiceResult ISteamUser_DecompressVoice(
        IntPtr pCompressed,
        uint cbCompressed,
        IntPtr pDestBuffer,
        uint cbDestBufferSize,
        out uint nBytesWritten,
        uint nDesiredSampleRate)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUser _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamUser_DecompressVoice(this._ptr, pCompressed, cbCompressed, pDestBuffer, cbDestBufferSize, out nBytesWritten, nDesiredSampleRate);
      }

      public virtual uint ISteamUser_GetVoiceOptimalSampleRate()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamUser_GetVoiceOptimalSampleRate(this._ptr) : throw new Exception("ISteamUser _ptr is null!");
      }

      public virtual HAuthTicket ISteamUser_GetAuthSessionTicket(
        IntPtr pTicket,
        int cbMaxTicket,
        out uint pcbTicket)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUser _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamUser_GetAuthSessionTicket(this._ptr, pTicket, cbMaxTicket, out pcbTicket);
      }

      public virtual BeginAuthSessionResult ISteamUser_BeginAuthSession(
        IntPtr pAuthTicket,
        int cbAuthTicket,
        ulong steamID)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUser _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamUser_BeginAuthSession(this._ptr, pAuthTicket, cbAuthTicket, steamID);
      }

      public virtual void ISteamUser_EndAuthSession(ulong steamID)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUser _ptr is null!");
        Platform.Win32.Native.SteamAPI_ISteamUser_EndAuthSession(this._ptr, steamID);
      }

      public virtual void ISteamUser_CancelAuthTicket(uint hAuthTicket)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUser _ptr is null!");
        Platform.Win32.Native.SteamAPI_ISteamUser_CancelAuthTicket(this._ptr, hAuthTicket);
      }

      public virtual UserHasLicenseForAppResult ISteamUser_UserHasLicenseForApp(
        ulong steamID,
        uint appID)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUser _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamUser_UserHasLicenseForApp(this._ptr, steamID, appID);
      }

      public virtual bool ISteamUser_BIsBehindNAT()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamUser_BIsBehindNAT(this._ptr) : throw new Exception("ISteamUser _ptr is null!");
      }

      public virtual void ISteamUser_AdvertiseGame(
        ulong steamIDGameServer,
        uint unIPServer,
        ushort usPortServer)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUser _ptr is null!");
        Platform.Win32.Native.SteamAPI_ISteamUser_AdvertiseGame(this._ptr, steamIDGameServer, unIPServer, usPortServer);
      }

      public virtual SteamAPICall_t ISteamUser_RequestEncryptedAppTicket(
        IntPtr pDataToInclude,
        int cbDataToInclude)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUser _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamUser_RequestEncryptedAppTicket(this._ptr, pDataToInclude, cbDataToInclude);
      }

      public virtual bool ISteamUser_GetEncryptedAppTicket(
        IntPtr pTicket,
        int cbMaxTicket,
        out uint pcbTicket)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUser _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamUser_GetEncryptedAppTicket(this._ptr, pTicket, cbMaxTicket, out pcbTicket);
      }

      public virtual int ISteamUser_GetGameBadgeLevel(int nSeries, [MarshalAs(UnmanagedType.U1)] bool bFoil)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUser _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamUser_GetGameBadgeLevel(this._ptr, nSeries, bFoil);
      }

      public virtual int ISteamUser_GetPlayerSteamLevel()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamUser_GetPlayerSteamLevel(this._ptr) : throw new Exception("ISteamUser _ptr is null!");
      }

      public virtual SteamAPICall_t ISteamUser_RequestStoreAuthURL(string pchRedirectURL)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamUser_RequestStoreAuthURL(this._ptr, pchRedirectURL) : throw new Exception("ISteamUser _ptr is null!");
      }

      public virtual bool ISteamUser_BIsPhoneVerified()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamUser_BIsPhoneVerified(this._ptr) : throw new Exception("ISteamUser _ptr is null!");
      }

      public virtual bool ISteamUser_BIsTwoFactorEnabled()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamUser_BIsTwoFactorEnabled(this._ptr) : throw new Exception("ISteamUser _ptr is null!");
      }

      public virtual bool ISteamUser_BIsPhoneIdentifying()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamUser_BIsPhoneIdentifying(this._ptr) : throw new Exception("ISteamUser _ptr is null!");
      }

      public virtual bool ISteamUser_BIsPhoneRequiringVerification()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamUser_BIsPhoneRequiringVerification(this._ptr) : throw new Exception("ISteamUser _ptr is null!");
      }

      public virtual IntPtr ISteamFriends_GetPersonaName()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamFriends_GetPersonaName(this._ptr) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual SteamAPICall_t ISteamFriends_SetPersonaName(string pchPersonaName)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamFriends_SetPersonaName(this._ptr, pchPersonaName) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual PersonaState ISteamFriends_GetPersonaState()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamFriends_GetPersonaState(this._ptr) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual int ISteamFriends_GetFriendCount(int iFriendFlags)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamFriends_GetFriendCount(this._ptr, iFriendFlags) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual CSteamID ISteamFriends_GetFriendByIndex(int iFriend, int iFriendFlags)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamFriends _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamFriends_GetFriendByIndex(this._ptr, iFriend, iFriendFlags);
      }

      public virtual FriendRelationship ISteamFriends_GetFriendRelationship(ulong steamIDFriend)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamFriends_GetFriendRelationship(this._ptr, steamIDFriend) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual PersonaState ISteamFriends_GetFriendPersonaState(ulong steamIDFriend)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamFriends_GetFriendPersonaState(this._ptr, steamIDFriend) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual IntPtr ISteamFriends_GetFriendPersonaName(ulong steamIDFriend)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamFriends_GetFriendPersonaName(this._ptr, steamIDFriend) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual bool ISteamFriends_GetFriendGamePlayed(
        ulong steamIDFriend,
        ref FriendGameInfo_t pFriendGameInfo)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamFriends _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamFriends_GetFriendGamePlayed(this._ptr, steamIDFriend, ref pFriendGameInfo);
      }

      public virtual IntPtr ISteamFriends_GetFriendPersonaNameHistory(
        ulong steamIDFriend,
        int iPersonaName)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamFriends _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamFriends_GetFriendPersonaNameHistory(this._ptr, steamIDFriend, iPersonaName);
      }

      public virtual int ISteamFriends_GetFriendSteamLevel(ulong steamIDFriend)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamFriends_GetFriendSteamLevel(this._ptr, steamIDFriend) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual IntPtr ISteamFriends_GetPlayerNickname(ulong steamIDPlayer)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamFriends_GetPlayerNickname(this._ptr, steamIDPlayer) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual int ISteamFriends_GetFriendsGroupCount()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamFriends_GetFriendsGroupCount(this._ptr) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual FriendsGroupID_t ISteamFriends_GetFriendsGroupIDByIndex(int iFG)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamFriends_GetFriendsGroupIDByIndex(this._ptr, iFG) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual IntPtr ISteamFriends_GetFriendsGroupName(short friendsGroupID)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamFriends_GetFriendsGroupName(this._ptr, friendsGroupID) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual int ISteamFriends_GetFriendsGroupMembersCount(short friendsGroupID)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamFriends_GetFriendsGroupMembersCount(this._ptr, friendsGroupID) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual void ISteamFriends_GetFriendsGroupMembersList(
        short friendsGroupID,
        IntPtr pOutSteamIDMembers,
        int nMembersCount)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamFriends _ptr is null!");
        Platform.Win32.Native.SteamAPI_ISteamFriends_GetFriendsGroupMembersList(this._ptr, friendsGroupID, pOutSteamIDMembers, nMembersCount);
      }

      public virtual bool ISteamFriends_HasFriend(ulong steamIDFriend, int iFriendFlags)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamFriends _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamFriends_HasFriend(this._ptr, steamIDFriend, iFriendFlags);
      }

      public virtual int ISteamFriends_GetClanCount()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamFriends_GetClanCount(this._ptr) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual CSteamID ISteamFriends_GetClanByIndex(int iClan)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamFriends_GetClanByIndex(this._ptr, iClan) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual IntPtr ISteamFriends_GetClanName(ulong steamIDClan)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamFriends_GetClanName(this._ptr, steamIDClan) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual IntPtr ISteamFriends_GetClanTag(ulong steamIDClan)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamFriends_GetClanTag(this._ptr, steamIDClan) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual bool ISteamFriends_GetClanActivityCounts(
        ulong steamIDClan,
        out int pnOnline,
        out int pnInGame,
        out int pnChatting)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamFriends_GetClanActivityCounts(this._ptr, steamIDClan, out pnOnline, out pnInGame, out pnChatting) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual SteamAPICall_t ISteamFriends_DownloadClanActivityCounts(
        IntPtr psteamIDClans,
        int cClansToRequest)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamFriends _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamFriends_DownloadClanActivityCounts(this._ptr, psteamIDClans, cClansToRequest);
      }

      public virtual int ISteamFriends_GetFriendCountFromSource(ulong steamIDSource)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamFriends_GetFriendCountFromSource(this._ptr, steamIDSource) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual CSteamID ISteamFriends_GetFriendFromSourceByIndex(
        ulong steamIDSource,
        int iFriend)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamFriends _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamFriends_GetFriendFromSourceByIndex(this._ptr, steamIDSource, iFriend);
      }

      public virtual bool ISteamFriends_IsUserInSource(ulong steamIDUser, ulong steamIDSource)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamFriends _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamFriends_IsUserInSource(this._ptr, steamIDUser, steamIDSource);
      }

      public virtual void ISteamFriends_SetInGameVoiceSpeaking(ulong steamIDUser, [MarshalAs(UnmanagedType.U1)] bool bSpeaking)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamFriends _ptr is null!");
        Platform.Win32.Native.SteamAPI_ISteamFriends_SetInGameVoiceSpeaking(this._ptr, steamIDUser, bSpeaking);
      }

      public virtual void ISteamFriends_ActivateGameOverlay(string pchDialog)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamFriends _ptr is null!");
        Platform.Win32.Native.SteamAPI_ISteamFriends_ActivateGameOverlay(this._ptr, pchDialog);
      }

      public virtual void ISteamFriends_ActivateGameOverlayToUser(string pchDialog, ulong steamID)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamFriends _ptr is null!");
        Platform.Win32.Native.SteamAPI_ISteamFriends_ActivateGameOverlayToUser(this._ptr, pchDialog, steamID);
      }

      public virtual void ISteamFriends_ActivateGameOverlayToWebPage(string pchURL)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamFriends _ptr is null!");
        Platform.Win32.Native.SteamAPI_ISteamFriends_ActivateGameOverlayToWebPage(this._ptr, pchURL);
      }

      public virtual void ISteamFriends_ActivateGameOverlayToStore(
        uint nAppID,
        OverlayToStoreFlag eFlag)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamFriends _ptr is null!");
        Platform.Win32.Native.SteamAPI_ISteamFriends_ActivateGameOverlayToStore(this._ptr, nAppID, eFlag);
      }

      public virtual void ISteamFriends_SetPlayedWith(ulong steamIDUserPlayedWith)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamFriends _ptr is null!");
        Platform.Win32.Native.SteamAPI_ISteamFriends_SetPlayedWith(this._ptr, steamIDUserPlayedWith);
      }

      public virtual void ISteamFriends_ActivateGameOverlayInviteDialog(ulong steamIDLobby)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamFriends _ptr is null!");
        Platform.Win32.Native.SteamAPI_ISteamFriends_ActivateGameOverlayInviteDialog(this._ptr, steamIDLobby);
      }

      public virtual int ISteamFriends_GetSmallFriendAvatar(ulong steamIDFriend)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamFriends_GetSmallFriendAvatar(this._ptr, steamIDFriend) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual int ISteamFriends_GetMediumFriendAvatar(ulong steamIDFriend)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamFriends_GetMediumFriendAvatar(this._ptr, steamIDFriend) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual int ISteamFriends_GetLargeFriendAvatar(ulong steamIDFriend)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamFriends_GetLargeFriendAvatar(this._ptr, steamIDFriend) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual bool ISteamFriends_RequestUserInformation(
        ulong steamIDUser,
        [MarshalAs(UnmanagedType.U1)] bool bRequireNameOnly)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamFriends _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamFriends_RequestUserInformation(this._ptr, steamIDUser, bRequireNameOnly);
      }

      public virtual SteamAPICall_t ISteamFriends_RequestClanOfficerList(ulong steamIDClan)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamFriends_RequestClanOfficerList(this._ptr, steamIDClan) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual CSteamID ISteamFriends_GetClanOwner(ulong steamIDClan)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamFriends_GetClanOwner(this._ptr, steamIDClan) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual int ISteamFriends_GetClanOfficerCount(ulong steamIDClan)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamFriends_GetClanOfficerCount(this._ptr, steamIDClan) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual CSteamID ISteamFriends_GetClanOfficerByIndex(ulong steamIDClan, int iOfficer)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamFriends _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamFriends_GetClanOfficerByIndex(this._ptr, steamIDClan, iOfficer);
      }

      public virtual uint ISteamFriends_GetUserRestrictions()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamFriends_GetUserRestrictions(this._ptr) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual bool ISteamFriends_SetRichPresence(string pchKey, string pchValue)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamFriends _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamFriends_SetRichPresence(this._ptr, pchKey, pchValue);
      }

      public virtual void ISteamFriends_ClearRichPresence()
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamFriends _ptr is null!");
        Platform.Win32.Native.SteamAPI_ISteamFriends_ClearRichPresence(this._ptr);
      }

      public virtual IntPtr ISteamFriends_GetFriendRichPresence(ulong steamIDFriend, string pchKey)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamFriends _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamFriends_GetFriendRichPresence(this._ptr, steamIDFriend, pchKey);
      }

      public virtual int ISteamFriends_GetFriendRichPresenceKeyCount(ulong steamIDFriend)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamFriends_GetFriendRichPresenceKeyCount(this._ptr, steamIDFriend) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual IntPtr ISteamFriends_GetFriendRichPresenceKeyByIndex(
        ulong steamIDFriend,
        int iKey)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamFriends _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamFriends_GetFriendRichPresenceKeyByIndex(this._ptr, steamIDFriend, iKey);
      }

      public virtual void ISteamFriends_RequestFriendRichPresence(ulong steamIDFriend)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamFriends _ptr is null!");
        Platform.Win32.Native.SteamAPI_ISteamFriends_RequestFriendRichPresence(this._ptr, steamIDFriend);
      }

      public virtual bool ISteamFriends_InviteUserToGame(
        ulong steamIDFriend,
        string pchConnectString)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamFriends _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamFriends_InviteUserToGame(this._ptr, steamIDFriend, pchConnectString);
      }

      public virtual int ISteamFriends_GetCoplayFriendCount()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamFriends_GetCoplayFriendCount(this._ptr) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual CSteamID ISteamFriends_GetCoplayFriend(int iCoplayFriend)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamFriends_GetCoplayFriend(this._ptr, iCoplayFriend) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual int ISteamFriends_GetFriendCoplayTime(ulong steamIDFriend)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamFriends_GetFriendCoplayTime(this._ptr, steamIDFriend) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual AppId_t ISteamFriends_GetFriendCoplayGame(ulong steamIDFriend)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamFriends_GetFriendCoplayGame(this._ptr, steamIDFriend) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual SteamAPICall_t ISteamFriends_JoinClanChatRoom(ulong steamIDClan)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamFriends_JoinClanChatRoom(this._ptr, steamIDClan) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual bool ISteamFriends_LeaveClanChatRoom(ulong steamIDClan)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamFriends_LeaveClanChatRoom(this._ptr, steamIDClan) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual int ISteamFriends_GetClanChatMemberCount(ulong steamIDClan)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamFriends_GetClanChatMemberCount(this._ptr, steamIDClan) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual CSteamID ISteamFriends_GetChatMemberByIndex(ulong steamIDClan, int iUser)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamFriends _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamFriends_GetChatMemberByIndex(this._ptr, steamIDClan, iUser);
      }

      public virtual bool ISteamFriends_SendClanChatMessage(ulong steamIDClanChat, string pchText)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamFriends _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamFriends_SendClanChatMessage(this._ptr, steamIDClanChat, pchText);
      }

      public virtual int ISteamFriends_GetClanChatMessage(
        ulong steamIDClanChat,
        int iMessage,
        IntPtr prgchText,
        int cchTextMax,
        out ChatEntryType peChatEntryType,
        out ulong psteamidChatter)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamFriends _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamFriends_GetClanChatMessage(this._ptr, steamIDClanChat, iMessage, prgchText, cchTextMax, out peChatEntryType, out psteamidChatter);
      }

      public virtual bool ISteamFriends_IsClanChatAdmin(ulong steamIDClanChat, ulong steamIDUser)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamFriends _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamFriends_IsClanChatAdmin(this._ptr, steamIDClanChat, steamIDUser);
      }

      public virtual bool ISteamFriends_IsClanChatWindowOpenInSteam(ulong steamIDClanChat)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamFriends_IsClanChatWindowOpenInSteam(this._ptr, steamIDClanChat) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual bool ISteamFriends_OpenClanChatWindowInSteam(ulong steamIDClanChat)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamFriends_OpenClanChatWindowInSteam(this._ptr, steamIDClanChat) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual bool ISteamFriends_CloseClanChatWindowInSteam(ulong steamIDClanChat)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamFriends_CloseClanChatWindowInSteam(this._ptr, steamIDClanChat) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual bool ISteamFriends_SetListenForFriendsMessages([MarshalAs(UnmanagedType.U1)] bool bInterceptEnabled)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamFriends_SetListenForFriendsMessages(this._ptr, bInterceptEnabled) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual bool ISteamFriends_ReplyToFriendMessage(
        ulong steamIDFriend,
        string pchMsgToSend)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamFriends _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamFriends_ReplyToFriendMessage(this._ptr, steamIDFriend, pchMsgToSend);
      }

      public virtual int ISteamFriends_GetFriendMessage(
        ulong steamIDFriend,
        int iMessageID,
        IntPtr pvData,
        int cubData,
        out ChatEntryType peChatEntryType)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamFriends _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamFriends_GetFriendMessage(this._ptr, steamIDFriend, iMessageID, pvData, cubData, out peChatEntryType);
      }

      public virtual SteamAPICall_t ISteamFriends_GetFollowerCount(ulong steamID)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamFriends_GetFollowerCount(this._ptr, steamID) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual SteamAPICall_t ISteamFriends_IsFollowing(ulong steamID)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamFriends_IsFollowing(this._ptr, steamID) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual SteamAPICall_t ISteamFriends_EnumerateFollowingList(uint unStartIndex)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamFriends_EnumerateFollowingList(this._ptr, unStartIndex) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual uint ISteamUtils_GetSecondsSinceAppActive()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamUtils_GetSecondsSinceAppActive(this._ptr) : throw new Exception("ISteamUtils _ptr is null!");
      }

      public virtual uint ISteamUtils_GetSecondsSinceComputerActive()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamUtils_GetSecondsSinceComputerActive(this._ptr) : throw new Exception("ISteamUtils _ptr is null!");
      }

      public virtual Universe ISteamUtils_GetConnectedUniverse()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamUtils_GetConnectedUniverse(this._ptr) : throw new Exception("ISteamUtils _ptr is null!");
      }

      public virtual uint ISteamUtils_GetServerRealTime()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamUtils_GetServerRealTime(this._ptr) : throw new Exception("ISteamUtils _ptr is null!");
      }

      public virtual IntPtr ISteamUtils_GetIPCountry()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamUtils_GetIPCountry(this._ptr) : throw new Exception("ISteamUtils _ptr is null!");
      }

      public virtual bool ISteamUtils_GetImageSize(int iImage, out uint pnWidth, out uint pnHeight)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamUtils_GetImageSize(this._ptr, iImage, out pnWidth, out pnHeight) : throw new Exception("ISteamUtils _ptr is null!");
      }

      public virtual bool ISteamUtils_GetImageRGBA(int iImage, IntPtr pubDest, int nDestBufferSize)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUtils _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamUtils_GetImageRGBA(this._ptr, iImage, pubDest, nDestBufferSize);
      }

      public virtual bool ISteamUtils_GetCSERIPPort(out uint unIP, out ushort usPort)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamUtils_GetCSERIPPort(this._ptr, out unIP, out usPort) : throw new Exception("ISteamUtils _ptr is null!");
      }

      public virtual byte ISteamUtils_GetCurrentBatteryPower()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamUtils_GetCurrentBatteryPower(this._ptr) : throw new Exception("ISteamUtils _ptr is null!");
      }

      public virtual uint ISteamUtils_GetAppID()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamUtils_GetAppID(this._ptr) : throw new Exception("ISteamUtils _ptr is null!");
      }

      public virtual void ISteamUtils_SetOverlayNotificationPosition(
        NotificationPosition eNotificationPosition)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUtils _ptr is null!");
        Platform.Win32.Native.SteamAPI_ISteamUtils_SetOverlayNotificationPosition(this._ptr, eNotificationPosition);
      }

      public virtual bool ISteamUtils_IsAPICallCompleted(ulong hSteamAPICall, [MarshalAs(UnmanagedType.U1)] ref bool pbFailed)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUtils _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamUtils_IsAPICallCompleted(this._ptr, hSteamAPICall, ref pbFailed);
      }

      public virtual SteamAPICallFailure ISteamUtils_GetAPICallFailureReason(ulong hSteamAPICall)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamUtils_GetAPICallFailureReason(this._ptr, hSteamAPICall) : throw new Exception("ISteamUtils _ptr is null!");
      }

      public virtual bool ISteamUtils_GetAPICallResult(
        ulong hSteamAPICall,
        IntPtr pCallback,
        int cubCallback,
        int iCallbackExpected,
        [MarshalAs(UnmanagedType.U1)] ref bool pbFailed)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUtils _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamUtils_GetAPICallResult(this._ptr, hSteamAPICall, pCallback, cubCallback, iCallbackExpected, ref pbFailed);
      }

      public virtual uint ISteamUtils_GetIPCCallCount()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamUtils_GetIPCCallCount(this._ptr) : throw new Exception("ISteamUtils _ptr is null!");
      }

      public virtual void ISteamUtils_SetWarningMessageHook(IntPtr pFunction)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUtils _ptr is null!");
        Platform.Win32.Native.SteamAPI_ISteamUtils_SetWarningMessageHook(this._ptr, pFunction);
      }

      public virtual bool ISteamUtils_IsOverlayEnabled()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamUtils_IsOverlayEnabled(this._ptr) : throw new Exception("ISteamUtils _ptr is null!");
      }

      public virtual bool ISteamUtils_BOverlayNeedsPresent()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamUtils_BOverlayNeedsPresent(this._ptr) : throw new Exception("ISteamUtils _ptr is null!");
      }

      public virtual SteamAPICall_t ISteamUtils_CheckFileSignature(string szFileName)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamUtils_CheckFileSignature(this._ptr, szFileName) : throw new Exception("ISteamUtils _ptr is null!");
      }

      public virtual bool ISteamUtils_ShowGamepadTextInput(
        GamepadTextInputMode eInputMode,
        GamepadTextInputLineMode eLineInputMode,
        string pchDescription,
        uint unCharMax,
        string pchExistingText)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUtils _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamUtils_ShowGamepadTextInput(this._ptr, eInputMode, eLineInputMode, pchDescription, unCharMax, pchExistingText);
      }

      public virtual uint ISteamUtils_GetEnteredGamepadTextLength()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamUtils_GetEnteredGamepadTextLength(this._ptr) : throw new Exception("ISteamUtils _ptr is null!");
      }

      public virtual bool ISteamUtils_GetEnteredGamepadTextInput(
        StringBuilder pchText,
        uint cchText)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUtils _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamUtils_GetEnteredGamepadTextInput(this._ptr, pchText, cchText);
      }

      public virtual IntPtr ISteamUtils_GetSteamUILanguage()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamUtils_GetSteamUILanguage(this._ptr) : throw new Exception("ISteamUtils _ptr is null!");
      }

      public virtual bool ISteamUtils_IsSteamRunningInVR()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamUtils_IsSteamRunningInVR(this._ptr) : throw new Exception("ISteamUtils _ptr is null!");
      }

      public virtual void ISteamUtils_SetOverlayNotificationInset(
        int nHorizontalInset,
        int nVerticalInset)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUtils _ptr is null!");
        Platform.Win32.Native.SteamAPI_ISteamUtils_SetOverlayNotificationInset(this._ptr, nHorizontalInset, nVerticalInset);
      }

      public virtual bool ISteamUtils_IsSteamInBigPictureMode()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamUtils_IsSteamInBigPictureMode(this._ptr) : throw new Exception("ISteamUtils _ptr is null!");
      }

      public virtual void ISteamUtils_StartVRDashboard()
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUtils _ptr is null!");
        Platform.Win32.Native.SteamAPI_ISteamUtils_StartVRDashboard(this._ptr);
      }

      public virtual bool ISteamUtils_IsVRHeadsetStreamingEnabled()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamUtils_IsVRHeadsetStreamingEnabled(this._ptr) : throw new Exception("ISteamUtils _ptr is null!");
      }

      public virtual void ISteamUtils_SetVRHeadsetStreamingEnabled([MarshalAs(UnmanagedType.U1)] bool bEnabled)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUtils _ptr is null!");
        Platform.Win32.Native.SteamAPI_ISteamUtils_SetVRHeadsetStreamingEnabled(this._ptr, bEnabled);
      }

      public virtual int ISteamMatchmaking_GetFavoriteGameCount()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamMatchmaking_GetFavoriteGameCount(this._ptr) : throw new Exception("ISteamMatchmaking _ptr is null!");
      }

      public virtual bool ISteamMatchmaking_GetFavoriteGame(
        int iGame,
        ref uint pnAppID,
        out uint pnIP,
        out ushort pnConnPort,
        out ushort pnQueryPort,
        out uint punFlags,
        out uint pRTime32LastPlayedOnServer)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmaking _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamMatchmaking_GetFavoriteGame(this._ptr, iGame, ref pnAppID, out pnIP, out pnConnPort, out pnQueryPort, out punFlags, out pRTime32LastPlayedOnServer);
      }

      public virtual int ISteamMatchmaking_AddFavoriteGame(
        uint nAppID,
        uint nIP,
        ushort nConnPort,
        ushort nQueryPort,
        uint unFlags,
        uint rTime32LastPlayedOnServer)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmaking _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamMatchmaking_AddFavoriteGame(this._ptr, nAppID, nIP, nConnPort, nQueryPort, unFlags, rTime32LastPlayedOnServer);
      }

      public virtual bool ISteamMatchmaking_RemoveFavoriteGame(
        uint nAppID,
        uint nIP,
        ushort nConnPort,
        ushort nQueryPort,
        uint unFlags)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmaking _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamMatchmaking_RemoveFavoriteGame(this._ptr, nAppID, nIP, nConnPort, nQueryPort, unFlags);
      }

      public virtual SteamAPICall_t ISteamMatchmaking_RequestLobbyList()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamMatchmaking_RequestLobbyList(this._ptr) : throw new Exception("ISteamMatchmaking _ptr is null!");
      }

      public virtual void ISteamMatchmaking_AddRequestLobbyListStringFilter(
        string pchKeyToMatch,
        string pchValueToMatch,
        LobbyComparison eComparisonType)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmaking _ptr is null!");
        Platform.Win32.Native.SteamAPI_ISteamMatchmaking_AddRequestLobbyListStringFilter(this._ptr, pchKeyToMatch, pchValueToMatch, eComparisonType);
      }

      public virtual void ISteamMatchmaking_AddRequestLobbyListNumericalFilter(
        string pchKeyToMatch,
        int nValueToMatch,
        LobbyComparison eComparisonType)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmaking _ptr is null!");
        Platform.Win32.Native.SteamAPI_ISteamMatchmaking_AddRequestLobbyListNumericalFilter(this._ptr, pchKeyToMatch, nValueToMatch, eComparisonType);
      }

      public virtual void ISteamMatchmaking_AddRequestLobbyListNearValueFilter(
        string pchKeyToMatch,
        int nValueToBeCloseTo)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmaking _ptr is null!");
        Platform.Win32.Native.SteamAPI_ISteamMatchmaking_AddRequestLobbyListNearValueFilter(this._ptr, pchKeyToMatch, nValueToBeCloseTo);
      }

      public virtual void ISteamMatchmaking_AddRequestLobbyListFilterSlotsAvailable(
        int nSlotsAvailable)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmaking _ptr is null!");
        Platform.Win32.Native.SteamAPI_ISteamMatchmaking_AddRequestLobbyListFilterSlotsAvailable(this._ptr, nSlotsAvailable);
      }

      public virtual void ISteamMatchmaking_AddRequestLobbyListDistanceFilter(
        LobbyDistanceFilter eLobbyDistanceFilter)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmaking _ptr is null!");
        Platform.Win32.Native.SteamAPI_ISteamMatchmaking_AddRequestLobbyListDistanceFilter(this._ptr, eLobbyDistanceFilter);
      }

      public virtual void ISteamMatchmaking_AddRequestLobbyListResultCountFilter(int cMaxResults)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmaking _ptr is null!");
        Platform.Win32.Native.SteamAPI_ISteamMatchmaking_AddRequestLobbyListResultCountFilter(this._ptr, cMaxResults);
      }

      public virtual void ISteamMatchmaking_AddRequestLobbyListCompatibleMembersFilter(
        ulong steamIDLobby)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmaking _ptr is null!");
        Platform.Win32.Native.SteamAPI_ISteamMatchmaking_AddRequestLobbyListCompatibleMembersFilter(this._ptr, steamIDLobby);
      }

      public virtual CSteamID ISteamMatchmaking_GetLobbyByIndex(int iLobby)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamMatchmaking_GetLobbyByIndex(this._ptr, iLobby) : throw new Exception("ISteamMatchmaking _ptr is null!");
      }

      public virtual SteamAPICall_t ISteamMatchmaking_CreateLobby(
        LobbyType eLobbyType,
        int cMaxMembers)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmaking _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamMatchmaking_CreateLobby(this._ptr, eLobbyType, cMaxMembers);
      }

      public virtual SteamAPICall_t ISteamMatchmaking_JoinLobby(ulong steamIDLobby)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamMatchmaking_JoinLobby(this._ptr, steamIDLobby) : throw new Exception("ISteamMatchmaking _ptr is null!");
      }

      public virtual void ISteamMatchmaking_LeaveLobby(ulong steamIDLobby)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmaking _ptr is null!");
        Platform.Win32.Native.SteamAPI_ISteamMatchmaking_LeaveLobby(this._ptr, steamIDLobby);
      }

      public virtual bool ISteamMatchmaking_InviteUserToLobby(
        ulong steamIDLobby,
        ulong steamIDInvitee)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmaking _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamMatchmaking_InviteUserToLobby(this._ptr, steamIDLobby, steamIDInvitee);
      }

      public virtual int ISteamMatchmaking_GetNumLobbyMembers(ulong steamIDLobby)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamMatchmaking_GetNumLobbyMembers(this._ptr, steamIDLobby) : throw new Exception("ISteamMatchmaking _ptr is null!");
      }

      public virtual CSteamID ISteamMatchmaking_GetLobbyMemberByIndex(
        ulong steamIDLobby,
        int iMember)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmaking _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamMatchmaking_GetLobbyMemberByIndex(this._ptr, steamIDLobby, iMember);
      }

      public virtual IntPtr ISteamMatchmaking_GetLobbyData(ulong steamIDLobby, string pchKey)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmaking _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamMatchmaking_GetLobbyData(this._ptr, steamIDLobby, pchKey);
      }

      public virtual bool ISteamMatchmaking_SetLobbyData(
        ulong steamIDLobby,
        string pchKey,
        string pchValue)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmaking _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamMatchmaking_SetLobbyData(this._ptr, steamIDLobby, pchKey, pchValue);
      }

      public virtual int ISteamMatchmaking_GetLobbyDataCount(ulong steamIDLobby)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamMatchmaking_GetLobbyDataCount(this._ptr, steamIDLobby) : throw new Exception("ISteamMatchmaking _ptr is null!");
      }

      public virtual bool ISteamMatchmaking_GetLobbyDataByIndex(
        ulong steamIDLobby,
        int iLobbyData,
        StringBuilder pchKey,
        int cchKeyBufferSize,
        StringBuilder pchValue,
        int cchValueBufferSize)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmaking _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamMatchmaking_GetLobbyDataByIndex(this._ptr, steamIDLobby, iLobbyData, pchKey, cchKeyBufferSize, pchValue, cchValueBufferSize);
      }

      public virtual bool ISteamMatchmaking_DeleteLobbyData(ulong steamIDLobby, string pchKey)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmaking _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamMatchmaking_DeleteLobbyData(this._ptr, steamIDLobby, pchKey);
      }

      public virtual IntPtr ISteamMatchmaking_GetLobbyMemberData(
        ulong steamIDLobby,
        ulong steamIDUser,
        string pchKey)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmaking _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamMatchmaking_GetLobbyMemberData(this._ptr, steamIDLobby, steamIDUser, pchKey);
      }

      public virtual void ISteamMatchmaking_SetLobbyMemberData(
        ulong steamIDLobby,
        string pchKey,
        string pchValue)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmaking _ptr is null!");
        Platform.Win32.Native.SteamAPI_ISteamMatchmaking_SetLobbyMemberData(this._ptr, steamIDLobby, pchKey, pchValue);
      }

      public virtual bool ISteamMatchmaking_SendLobbyChatMsg(
        ulong steamIDLobby,
        IntPtr pvMsgBody,
        int cubMsgBody)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmaking _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamMatchmaking_SendLobbyChatMsg(this._ptr, steamIDLobby, pvMsgBody, cubMsgBody);
      }

      public virtual int ISteamMatchmaking_GetLobbyChatEntry(
        ulong steamIDLobby,
        int iChatID,
        out ulong pSteamIDUser,
        IntPtr pvData,
        int cubData,
        out ChatEntryType peChatEntryType)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmaking _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamMatchmaking_GetLobbyChatEntry(this._ptr, steamIDLobby, iChatID, out pSteamIDUser, pvData, cubData, out peChatEntryType);
      }

      public virtual bool ISteamMatchmaking_RequestLobbyData(ulong steamIDLobby)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamMatchmaking_RequestLobbyData(this._ptr, steamIDLobby) : throw new Exception("ISteamMatchmaking _ptr is null!");
      }

      public virtual void ISteamMatchmaking_SetLobbyGameServer(
        ulong steamIDLobby,
        uint unGameServerIP,
        ushort unGameServerPort,
        ulong steamIDGameServer)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmaking _ptr is null!");
        Platform.Win32.Native.SteamAPI_ISteamMatchmaking_SetLobbyGameServer(this._ptr, steamIDLobby, unGameServerIP, unGameServerPort, steamIDGameServer);
      }

      public virtual bool ISteamMatchmaking_GetLobbyGameServer(
        ulong steamIDLobby,
        out uint punGameServerIP,
        out ushort punGameServerPort,
        out ulong psteamIDGameServer)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamMatchmaking_GetLobbyGameServer(this._ptr, steamIDLobby, out punGameServerIP, out punGameServerPort, out psteamIDGameServer) : throw new Exception("ISteamMatchmaking _ptr is null!");
      }

      public virtual bool ISteamMatchmaking_SetLobbyMemberLimit(ulong steamIDLobby, int cMaxMembers)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmaking _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamMatchmaking_SetLobbyMemberLimit(this._ptr, steamIDLobby, cMaxMembers);
      }

      public virtual int ISteamMatchmaking_GetLobbyMemberLimit(ulong steamIDLobby)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamMatchmaking_GetLobbyMemberLimit(this._ptr, steamIDLobby) : throw new Exception("ISteamMatchmaking _ptr is null!");
      }

      public virtual bool ISteamMatchmaking_SetLobbyType(ulong steamIDLobby, LobbyType eLobbyType)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmaking _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamMatchmaking_SetLobbyType(this._ptr, steamIDLobby, eLobbyType);
      }

      public virtual bool ISteamMatchmaking_SetLobbyJoinable(
        ulong steamIDLobby,
        [MarshalAs(UnmanagedType.U1)] bool bLobbyJoinable)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmaking _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamMatchmaking_SetLobbyJoinable(this._ptr, steamIDLobby, bLobbyJoinable);
      }

      public virtual CSteamID ISteamMatchmaking_GetLobbyOwner(ulong steamIDLobby)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamMatchmaking_GetLobbyOwner(this._ptr, steamIDLobby) : throw new Exception("ISteamMatchmaking _ptr is null!");
      }

      public virtual bool ISteamMatchmaking_SetLobbyOwner(ulong steamIDLobby, ulong steamIDNewOwner)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmaking _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamMatchmaking_SetLobbyOwner(this._ptr, steamIDLobby, steamIDNewOwner);
      }

      public virtual bool ISteamMatchmaking_SetLinkedLobby(
        ulong steamIDLobby,
        ulong steamIDLobbyDependent)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmaking _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamMatchmaking_SetLinkedLobby(this._ptr, steamIDLobby, steamIDLobbyDependent);
      }

      public virtual HServerListRequest ISteamMatchmakingServers_RequestInternetServerList(
        uint iApp,
        IntPtr ppchFilters,
        uint nFilters,
        IntPtr pRequestServersResponse)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmakingServers _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamMatchmakingServers_RequestInternetServerList(this._ptr, iApp, ppchFilters, nFilters, pRequestServersResponse);
      }

      public virtual HServerListRequest ISteamMatchmakingServers_RequestLANServerList(
        uint iApp,
        IntPtr pRequestServersResponse)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmakingServers _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamMatchmakingServers_RequestLANServerList(this._ptr, iApp, pRequestServersResponse);
      }

      public virtual HServerListRequest ISteamMatchmakingServers_RequestFriendsServerList(
        uint iApp,
        IntPtr ppchFilters,
        uint nFilters,
        IntPtr pRequestServersResponse)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmakingServers _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamMatchmakingServers_RequestFriendsServerList(this._ptr, iApp, ppchFilters, nFilters, pRequestServersResponse);
      }

      public virtual HServerListRequest ISteamMatchmakingServers_RequestFavoritesServerList(
        uint iApp,
        IntPtr ppchFilters,
        uint nFilters,
        IntPtr pRequestServersResponse)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmakingServers _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamMatchmakingServers_RequestFavoritesServerList(this._ptr, iApp, ppchFilters, nFilters, pRequestServersResponse);
      }

      public virtual HServerListRequest ISteamMatchmakingServers_RequestHistoryServerList(
        uint iApp,
        IntPtr ppchFilters,
        uint nFilters,
        IntPtr pRequestServersResponse)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmakingServers _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamMatchmakingServers_RequestHistoryServerList(this._ptr, iApp, ppchFilters, nFilters, pRequestServersResponse);
      }

      public virtual HServerListRequest ISteamMatchmakingServers_RequestSpectatorServerList(
        uint iApp,
        IntPtr ppchFilters,
        uint nFilters,
        IntPtr pRequestServersResponse)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmakingServers _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamMatchmakingServers_RequestSpectatorServerList(this._ptr, iApp, ppchFilters, nFilters, pRequestServersResponse);
      }

      public virtual void ISteamMatchmakingServers_ReleaseRequest(IntPtr hServerListRequest)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmakingServers _ptr is null!");
        Platform.Win32.Native.SteamAPI_ISteamMatchmakingServers_ReleaseRequest(this._ptr, hServerListRequest);
      }

      public virtual IntPtr ISteamMatchmakingServers_GetServerDetails(IntPtr hRequest, int iServer)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmakingServers _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamMatchmakingServers_GetServerDetails(this._ptr, hRequest, iServer);
      }

      public virtual void ISteamMatchmakingServers_CancelQuery(IntPtr hRequest)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmakingServers _ptr is null!");
        Platform.Win32.Native.SteamAPI_ISteamMatchmakingServers_CancelQuery(this._ptr, hRequest);
      }

      public virtual void ISteamMatchmakingServers_RefreshQuery(IntPtr hRequest)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmakingServers _ptr is null!");
        Platform.Win32.Native.SteamAPI_ISteamMatchmakingServers_RefreshQuery(this._ptr, hRequest);
      }

      public virtual bool ISteamMatchmakingServers_IsRefreshing(IntPtr hRequest)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamMatchmakingServers_IsRefreshing(this._ptr, hRequest) : throw new Exception("ISteamMatchmakingServers _ptr is null!");
      }

      public virtual int ISteamMatchmakingServers_GetServerCount(IntPtr hRequest)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamMatchmakingServers_GetServerCount(this._ptr, hRequest) : throw new Exception("ISteamMatchmakingServers _ptr is null!");
      }

      public virtual void ISteamMatchmakingServers_RefreshServer(IntPtr hRequest, int iServer)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmakingServers _ptr is null!");
        Platform.Win32.Native.SteamAPI_ISteamMatchmakingServers_RefreshServer(this._ptr, hRequest, iServer);
      }

      public virtual HServerQuery ISteamMatchmakingServers_PingServer(
        uint unIP,
        ushort usPort,
        IntPtr pRequestServersResponse)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmakingServers _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamMatchmakingServers_PingServer(this._ptr, unIP, usPort, pRequestServersResponse);
      }

      public virtual HServerQuery ISteamMatchmakingServers_PlayerDetails(
        uint unIP,
        ushort usPort,
        IntPtr pRequestServersResponse)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmakingServers _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamMatchmakingServers_PlayerDetails(this._ptr, unIP, usPort, pRequestServersResponse);
      }

      public virtual HServerQuery ISteamMatchmakingServers_ServerRules(
        uint unIP,
        ushort usPort,
        IntPtr pRequestServersResponse)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmakingServers _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamMatchmakingServers_ServerRules(this._ptr, unIP, usPort, pRequestServersResponse);
      }

      public virtual void ISteamMatchmakingServers_CancelServerQuery(int hServerQuery)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmakingServers _ptr is null!");
        Platform.Win32.Native.SteamAPI_ISteamMatchmakingServers_CancelServerQuery(this._ptr, hServerQuery);
      }

      public virtual bool ISteamRemoteStorage_FileWrite(string pchFile, IntPtr pvData, int cubData)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamRemoteStorage _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamRemoteStorage_FileWrite(this._ptr, pchFile, pvData, cubData);
      }

      public virtual int ISteamRemoteStorage_FileRead(
        string pchFile,
        IntPtr pvData,
        int cubDataToRead)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamRemoteStorage _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamRemoteStorage_FileRead(this._ptr, pchFile, pvData, cubDataToRead);
      }

      public virtual SteamAPICall_t ISteamRemoteStorage_FileWriteAsync(
        string pchFile,
        IntPtr pvData,
        uint cubData)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamRemoteStorage _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamRemoteStorage_FileWriteAsync(this._ptr, pchFile, pvData, cubData);
      }

      public virtual SteamAPICall_t ISteamRemoteStorage_FileReadAsync(
        string pchFile,
        uint nOffset,
        uint cubToRead)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamRemoteStorage _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamRemoteStorage_FileReadAsync(this._ptr, pchFile, nOffset, cubToRead);
      }

      public virtual bool ISteamRemoteStorage_FileReadAsyncComplete(
        ulong hReadCall,
        IntPtr pvBuffer,
        uint cubToRead)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamRemoteStorage _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamRemoteStorage_FileReadAsyncComplete(this._ptr, hReadCall, pvBuffer, cubToRead);
      }

      public virtual bool ISteamRemoteStorage_FileForget(string pchFile)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamRemoteStorage_FileForget(this._ptr, pchFile) : throw new Exception("ISteamRemoteStorage _ptr is null!");
      }

      public virtual bool ISteamRemoteStorage_FileDelete(string pchFile)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamRemoteStorage_FileDelete(this._ptr, pchFile) : throw new Exception("ISteamRemoteStorage _ptr is null!");
      }

      public virtual SteamAPICall_t ISteamRemoteStorage_FileShare(string pchFile)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamRemoteStorage_FileShare(this._ptr, pchFile) : throw new Exception("ISteamRemoteStorage _ptr is null!");
      }

      public virtual bool ISteamRemoteStorage_SetSyncPlatforms(
        string pchFile,
        RemoteStoragePlatform eRemoteStoragePlatform)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamRemoteStorage _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamRemoteStorage_SetSyncPlatforms(this._ptr, pchFile, eRemoteStoragePlatform);
      }

      public virtual UGCFileWriteStreamHandle_t ISteamRemoteStorage_FileWriteStreamOpen(
        string pchFile)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamRemoteStorage_FileWriteStreamOpen(this._ptr, pchFile) : throw new Exception("ISteamRemoteStorage _ptr is null!");
      }

      public virtual bool ISteamRemoteStorage_FileWriteStreamWriteChunk(
        ulong writeHandle,
        IntPtr pvData,
        int cubData)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamRemoteStorage _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamRemoteStorage_FileWriteStreamWriteChunk(this._ptr, writeHandle, pvData, cubData);
      }

      public virtual bool ISteamRemoteStorage_FileWriteStreamClose(ulong writeHandle)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamRemoteStorage_FileWriteStreamClose(this._ptr, writeHandle) : throw new Exception("ISteamRemoteStorage _ptr is null!");
      }

      public virtual bool ISteamRemoteStorage_FileWriteStreamCancel(ulong writeHandle)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamRemoteStorage_FileWriteStreamCancel(this._ptr, writeHandle) : throw new Exception("ISteamRemoteStorage _ptr is null!");
      }

      public virtual bool ISteamRemoteStorage_FileExists(string pchFile)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamRemoteStorage_FileExists(this._ptr, pchFile) : throw new Exception("ISteamRemoteStorage _ptr is null!");
      }

      public virtual bool ISteamRemoteStorage_FilePersisted(string pchFile)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamRemoteStorage_FilePersisted(this._ptr, pchFile) : throw new Exception("ISteamRemoteStorage _ptr is null!");
      }

      public virtual int ISteamRemoteStorage_GetFileSize(string pchFile)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamRemoteStorage_GetFileSize(this._ptr, pchFile) : throw new Exception("ISteamRemoteStorage _ptr is null!");
      }

      public virtual long ISteamRemoteStorage_GetFileTimestamp(string pchFile)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamRemoteStorage_GetFileTimestamp(this._ptr, pchFile) : throw new Exception("ISteamRemoteStorage _ptr is null!");
      }

      public virtual RemoteStoragePlatform ISteamRemoteStorage_GetSyncPlatforms(string pchFile)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamRemoteStorage_GetSyncPlatforms(this._ptr, pchFile) : throw new Exception("ISteamRemoteStorage _ptr is null!");
      }

      public virtual int ISteamRemoteStorage_GetFileCount()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamRemoteStorage_GetFileCount(this._ptr) : throw new Exception("ISteamRemoteStorage _ptr is null!");
      }

      public virtual IntPtr ISteamRemoteStorage_GetFileNameAndSize(
        int iFile,
        out int pnFileSizeInBytes)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamRemoteStorage_GetFileNameAndSize(this._ptr, iFile, out pnFileSizeInBytes) : throw new Exception("ISteamRemoteStorage _ptr is null!");
      }

      public virtual bool ISteamRemoteStorage_GetQuota(
        out ulong pnTotalBytes,
        out ulong puAvailableBytes)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamRemoteStorage_GetQuota(this._ptr, out pnTotalBytes, out puAvailableBytes) : throw new Exception("ISteamRemoteStorage _ptr is null!");
      }

      public virtual bool ISteamRemoteStorage_IsCloudEnabledForAccount()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamRemoteStorage_IsCloudEnabledForAccount(this._ptr) : throw new Exception("ISteamRemoteStorage _ptr is null!");
      }

      public virtual bool ISteamRemoteStorage_IsCloudEnabledForApp()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamRemoteStorage_IsCloudEnabledForApp(this._ptr) : throw new Exception("ISteamRemoteStorage _ptr is null!");
      }

      public virtual void ISteamRemoteStorage_SetCloudEnabledForApp([MarshalAs(UnmanagedType.U1)] bool bEnabled)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamRemoteStorage _ptr is null!");
        Platform.Win32.Native.SteamAPI_ISteamRemoteStorage_SetCloudEnabledForApp(this._ptr, bEnabled);
      }

      public virtual SteamAPICall_t ISteamRemoteStorage_UGCDownload(ulong hContent, uint unPriority)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamRemoteStorage _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamRemoteStorage_UGCDownload(this._ptr, hContent, unPriority);
      }

      public virtual bool ISteamRemoteStorage_GetUGCDownloadProgress(
        ulong hContent,
        out int pnBytesDownloaded,
        out int pnBytesExpected)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamRemoteStorage_GetUGCDownloadProgress(this._ptr, hContent, out pnBytesDownloaded, out pnBytesExpected) : throw new Exception("ISteamRemoteStorage _ptr is null!");
      }

      public virtual bool ISteamRemoteStorage_GetUGCDetails(
        ulong hContent,
        ref uint pnAppID,
        StringBuilder ppchName,
        out int pnFileSizeInBytes,
        out ulong pSteamIDOwner)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamRemoteStorage _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamRemoteStorage_GetUGCDetails(this._ptr, hContent, ref pnAppID, ppchName, out pnFileSizeInBytes, out pSteamIDOwner);
      }

      public virtual int ISteamRemoteStorage_UGCRead(
        ulong hContent,
        IntPtr pvData,
        int cubDataToRead,
        uint cOffset,
        UGCReadAction eAction)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamRemoteStorage _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamRemoteStorage_UGCRead(this._ptr, hContent, pvData, cubDataToRead, cOffset, eAction);
      }

      public virtual int ISteamRemoteStorage_GetCachedUGCCount()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamRemoteStorage_GetCachedUGCCount(this._ptr) : throw new Exception("ISteamRemoteStorage _ptr is null!");
      }

      public virtual UGCHandle_t ISteamRemoteStorage_GetCachedUGCHandle(int iCachedContent)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamRemoteStorage_GetCachedUGCHandle(this._ptr, iCachedContent) : throw new Exception("ISteamRemoteStorage _ptr is null!");
      }

      public virtual SteamAPICall_t ISteamRemoteStorage_PublishWorkshopFile(
        string pchFile,
        string pchPreviewFile,
        uint nConsumerAppId,
        string pchTitle,
        string pchDescription,
        RemoteStoragePublishedFileVisibility eVisibility,
        ref SteamParamStringArray_t pTags,
        WorkshopFileType eWorkshopFileType)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamRemoteStorage _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamRemoteStorage_PublishWorkshopFile(this._ptr, pchFile, pchPreviewFile, nConsumerAppId, pchTitle, pchDescription, eVisibility, ref pTags, eWorkshopFileType);
      }

      public virtual PublishedFileUpdateHandle_t ISteamRemoteStorage_CreatePublishedFileUpdateRequest(
        ulong unPublishedFileId)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamRemoteStorage_CreatePublishedFileUpdateRequest(this._ptr, unPublishedFileId) : throw new Exception("ISteamRemoteStorage _ptr is null!");
      }

      public virtual bool ISteamRemoteStorage_UpdatePublishedFileFile(
        ulong updateHandle,
        string pchFile)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamRemoteStorage _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamRemoteStorage_UpdatePublishedFileFile(this._ptr, updateHandle, pchFile);
      }

      public virtual bool ISteamRemoteStorage_UpdatePublishedFilePreviewFile(
        ulong updateHandle,
        string pchPreviewFile)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamRemoteStorage _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamRemoteStorage_UpdatePublishedFilePreviewFile(this._ptr, updateHandle, pchPreviewFile);
      }

      public virtual bool ISteamRemoteStorage_UpdatePublishedFileTitle(
        ulong updateHandle,
        string pchTitle)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamRemoteStorage _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamRemoteStorage_UpdatePublishedFileTitle(this._ptr, updateHandle, pchTitle);
      }

      public virtual bool ISteamRemoteStorage_UpdatePublishedFileDescription(
        ulong updateHandle,
        string pchDescription)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamRemoteStorage _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamRemoteStorage_UpdatePublishedFileDescription(this._ptr, updateHandle, pchDescription);
      }

      public virtual bool ISteamRemoteStorage_UpdatePublishedFileVisibility(
        ulong updateHandle,
        RemoteStoragePublishedFileVisibility eVisibility)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamRemoteStorage _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamRemoteStorage_UpdatePublishedFileVisibility(this._ptr, updateHandle, eVisibility);
      }

      public virtual bool ISteamRemoteStorage_UpdatePublishedFileTags(
        ulong updateHandle,
        ref SteamParamStringArray_t pTags)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamRemoteStorage _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamRemoteStorage_UpdatePublishedFileTags(this._ptr, updateHandle, ref pTags);
      }

      public virtual SteamAPICall_t ISteamRemoteStorage_CommitPublishedFileUpdate(ulong updateHandle)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamRemoteStorage_CommitPublishedFileUpdate(this._ptr, updateHandle) : throw new Exception("ISteamRemoteStorage _ptr is null!");
      }

      public virtual SteamAPICall_t ISteamRemoteStorage_GetPublishedFileDetails(
        ulong unPublishedFileId,
        uint unMaxSecondsOld)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamRemoteStorage _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamRemoteStorage_GetPublishedFileDetails(this._ptr, unPublishedFileId, unMaxSecondsOld);
      }

      public virtual SteamAPICall_t ISteamRemoteStorage_DeletePublishedFile(ulong unPublishedFileId)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamRemoteStorage_DeletePublishedFile(this._ptr, unPublishedFileId) : throw new Exception("ISteamRemoteStorage _ptr is null!");
      }

      public virtual SteamAPICall_t ISteamRemoteStorage_EnumerateUserPublishedFiles(
        uint unStartIndex)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamRemoteStorage_EnumerateUserPublishedFiles(this._ptr, unStartIndex) : throw new Exception("ISteamRemoteStorage _ptr is null!");
      }

      public virtual SteamAPICall_t ISteamRemoteStorage_SubscribePublishedFile(
        ulong unPublishedFileId)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamRemoteStorage_SubscribePublishedFile(this._ptr, unPublishedFileId) : throw new Exception("ISteamRemoteStorage _ptr is null!");
      }

      public virtual SteamAPICall_t ISteamRemoteStorage_EnumerateUserSubscribedFiles(
        uint unStartIndex)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamRemoteStorage_EnumerateUserSubscribedFiles(this._ptr, unStartIndex) : throw new Exception("ISteamRemoteStorage _ptr is null!");
      }

      public virtual SteamAPICall_t ISteamRemoteStorage_UnsubscribePublishedFile(
        ulong unPublishedFileId)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamRemoteStorage_UnsubscribePublishedFile(this._ptr, unPublishedFileId) : throw new Exception("ISteamRemoteStorage _ptr is null!");
      }

      public virtual bool ISteamRemoteStorage_UpdatePublishedFileSetChangeDescription(
        ulong updateHandle,
        string pchChangeDescription)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamRemoteStorage _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamRemoteStorage_UpdatePublishedFileSetChangeDescription(this._ptr, updateHandle, pchChangeDescription);
      }

      public virtual SteamAPICall_t ISteamRemoteStorage_GetPublishedItemVoteDetails(
        ulong unPublishedFileId)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamRemoteStorage_GetPublishedItemVoteDetails(this._ptr, unPublishedFileId) : throw new Exception("ISteamRemoteStorage _ptr is null!");
      }

      public virtual SteamAPICall_t ISteamRemoteStorage_UpdateUserPublishedItemVote(
        ulong unPublishedFileId,
        [MarshalAs(UnmanagedType.U1)] bool bVoteUp)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamRemoteStorage _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamRemoteStorage_UpdateUserPublishedItemVote(this._ptr, unPublishedFileId, bVoteUp);
      }

      public virtual SteamAPICall_t ISteamRemoteStorage_GetUserPublishedItemVoteDetails(
        ulong unPublishedFileId)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamRemoteStorage_GetUserPublishedItemVoteDetails(this._ptr, unPublishedFileId) : throw new Exception("ISteamRemoteStorage _ptr is null!");
      }

      public virtual SteamAPICall_t ISteamRemoteStorage_EnumerateUserSharedWorkshopFiles(
        ulong steamId,
        uint unStartIndex,
        ref SteamParamStringArray_t pRequiredTags,
        ref SteamParamStringArray_t pExcludedTags)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamRemoteStorage _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamRemoteStorage_EnumerateUserSharedWorkshopFiles(this._ptr, steamId, unStartIndex, ref pRequiredTags, ref pExcludedTags);
      }

      public virtual SteamAPICall_t ISteamRemoteStorage_PublishVideo(
        WorkshopVideoProvider eVideoProvider,
        string pchVideoAccount,
        string pchVideoIdentifier,
        string pchPreviewFile,
        uint nConsumerAppId,
        string pchTitle,
        string pchDescription,
        RemoteStoragePublishedFileVisibility eVisibility,
        ref SteamParamStringArray_t pTags)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamRemoteStorage _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamRemoteStorage_PublishVideo(this._ptr, eVideoProvider, pchVideoAccount, pchVideoIdentifier, pchPreviewFile, nConsumerAppId, pchTitle, pchDescription, eVisibility, ref pTags);
      }

      public virtual SteamAPICall_t ISteamRemoteStorage_SetUserPublishedFileAction(
        ulong unPublishedFileId,
        WorkshopFileAction eAction)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamRemoteStorage _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamRemoteStorage_SetUserPublishedFileAction(this._ptr, unPublishedFileId, eAction);
      }

      public virtual SteamAPICall_t ISteamRemoteStorage_EnumeratePublishedFilesByUserAction(
        WorkshopFileAction eAction,
        uint unStartIndex)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamRemoteStorage _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamRemoteStorage_EnumeratePublishedFilesByUserAction(this._ptr, eAction, unStartIndex);
      }

      public virtual SteamAPICall_t ISteamRemoteStorage_EnumeratePublishedWorkshopFiles(
        WorkshopEnumerationType eEnumerationType,
        uint unStartIndex,
        uint unCount,
        uint unDays,
        ref SteamParamStringArray_t pTags,
        ref SteamParamStringArray_t pUserTags)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamRemoteStorage _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamRemoteStorage_EnumeratePublishedWorkshopFiles(this._ptr, eEnumerationType, unStartIndex, unCount, unDays, ref pTags, ref pUserTags);
      }

      public virtual SteamAPICall_t ISteamRemoteStorage_UGCDownloadToLocation(
        ulong hContent,
        string pchLocation,
        uint unPriority)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamRemoteStorage _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamRemoteStorage_UGCDownloadToLocation(this._ptr, hContent, pchLocation, unPriority);
      }

      public virtual bool ISteamUserStats_RequestCurrentStats()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamUserStats_RequestCurrentStats(this._ptr) : throw new Exception("ISteamUserStats _ptr is null!");
      }

      public virtual bool ISteamUserStats_GetStat(string pchName, out int pData)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamUserStats_GetStat(this._ptr, pchName, out pData) : throw new Exception("ISteamUserStats _ptr is null!");
      }

      public virtual bool ISteamUserStats_GetStat0(string pchName, out float pData)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamUserStats_GetStat0(this._ptr, pchName, out pData) : throw new Exception("ISteamUserStats _ptr is null!");
      }

      public virtual bool ISteamUserStats_SetStat(string pchName, int nData)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUserStats _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamUserStats_SetStat(this._ptr, pchName, nData);
      }

      public virtual bool ISteamUserStats_SetStat0(string pchName, float fData)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUserStats _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamUserStats_SetStat0(this._ptr, pchName, fData);
      }

      public virtual bool ISteamUserStats_UpdateAvgRateStat(
        string pchName,
        float flCountThisSession,
        double dSessionLength)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUserStats _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamUserStats_UpdateAvgRateStat(this._ptr, pchName, flCountThisSession, dSessionLength);
      }

      public virtual bool ISteamUserStats_GetAchievement(string pchName, [MarshalAs(UnmanagedType.U1)] ref bool pbAchieved)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUserStats _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamUserStats_GetAchievement(this._ptr, pchName, ref pbAchieved);
      }

      public virtual bool ISteamUserStats_SetAchievement(string pchName)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamUserStats_SetAchievement(this._ptr, pchName) : throw new Exception("ISteamUserStats _ptr is null!");
      }

      public virtual bool ISteamUserStats_ClearAchievement(string pchName)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamUserStats_ClearAchievement(this._ptr, pchName) : throw new Exception("ISteamUserStats _ptr is null!");
      }

      public virtual bool ISteamUserStats_GetAchievementAndUnlockTime(
        string pchName,
        [MarshalAs(UnmanagedType.U1)] ref bool pbAchieved,
        out uint punUnlockTime)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUserStats _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamUserStats_GetAchievementAndUnlockTime(this._ptr, pchName, ref pbAchieved, out punUnlockTime);
      }

      public virtual bool ISteamUserStats_StoreStats()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamUserStats_StoreStats(this._ptr) : throw new Exception("ISteamUserStats _ptr is null!");
      }

      public virtual int ISteamUserStats_GetAchievementIcon(string pchName)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamUserStats_GetAchievementIcon(this._ptr, pchName) : throw new Exception("ISteamUserStats _ptr is null!");
      }

      public virtual IntPtr ISteamUserStats_GetAchievementDisplayAttribute(
        string pchName,
        string pchKey)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUserStats _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamUserStats_GetAchievementDisplayAttribute(this._ptr, pchName, pchKey);
      }

      public virtual bool ISteamUserStats_IndicateAchievementProgress(
        string pchName,
        uint nCurProgress,
        uint nMaxProgress)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUserStats _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamUserStats_IndicateAchievementProgress(this._ptr, pchName, nCurProgress, nMaxProgress);
      }

      public virtual uint ISteamUserStats_GetNumAchievements()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamUserStats_GetNumAchievements(this._ptr) : throw new Exception("ISteamUserStats _ptr is null!");
      }

      public virtual IntPtr ISteamUserStats_GetAchievementName(uint iAchievement)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamUserStats_GetAchievementName(this._ptr, iAchievement) : throw new Exception("ISteamUserStats _ptr is null!");
      }

      public virtual SteamAPICall_t ISteamUserStats_RequestUserStats(ulong steamIDUser)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamUserStats_RequestUserStats(this._ptr, steamIDUser) : throw new Exception("ISteamUserStats _ptr is null!");
      }

      public virtual bool ISteamUserStats_GetUserStat(
        ulong steamIDUser,
        string pchName,
        out int pData)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUserStats _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamUserStats_GetUserStat(this._ptr, steamIDUser, pchName, out pData);
      }

      public virtual bool ISteamUserStats_GetUserStat0(
        ulong steamIDUser,
        string pchName,
        out float pData)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUserStats _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamUserStats_GetUserStat0(this._ptr, steamIDUser, pchName, out pData);
      }

      public virtual bool ISteamUserStats_GetUserAchievement(
        ulong steamIDUser,
        string pchName,
        [MarshalAs(UnmanagedType.U1)] ref bool pbAchieved)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUserStats _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamUserStats_GetUserAchievement(this._ptr, steamIDUser, pchName, ref pbAchieved);
      }

      public virtual bool ISteamUserStats_GetUserAchievementAndUnlockTime(
        ulong steamIDUser,
        string pchName,
        [MarshalAs(UnmanagedType.U1)] ref bool pbAchieved,
        out uint punUnlockTime)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUserStats _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamUserStats_GetUserAchievementAndUnlockTime(this._ptr, steamIDUser, pchName, ref pbAchieved, out punUnlockTime);
      }

      public virtual bool ISteamUserStats_ResetAllStats([MarshalAs(UnmanagedType.U1)] bool bAchievementsToo)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamUserStats_ResetAllStats(this._ptr, bAchievementsToo) : throw new Exception("ISteamUserStats _ptr is null!");
      }

      public virtual SteamAPICall_t ISteamUserStats_FindOrCreateLeaderboard(
        string pchLeaderboardName,
        LeaderboardSortMethod eLeaderboardSortMethod,
        LeaderboardDisplayType eLeaderboardDisplayType)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUserStats _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamUserStats_FindOrCreateLeaderboard(this._ptr, pchLeaderboardName, eLeaderboardSortMethod, eLeaderboardDisplayType);
      }

      public virtual SteamAPICall_t ISteamUserStats_FindLeaderboard(string pchLeaderboardName)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamUserStats_FindLeaderboard(this._ptr, pchLeaderboardName) : throw new Exception("ISteamUserStats _ptr is null!");
      }

      public virtual IntPtr ISteamUserStats_GetLeaderboardName(ulong hSteamLeaderboard)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamUserStats_GetLeaderboardName(this._ptr, hSteamLeaderboard) : throw new Exception("ISteamUserStats _ptr is null!");
      }

      public virtual int ISteamUserStats_GetLeaderboardEntryCount(ulong hSteamLeaderboard)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamUserStats_GetLeaderboardEntryCount(this._ptr, hSteamLeaderboard) : throw new Exception("ISteamUserStats _ptr is null!");
      }

      public virtual LeaderboardSortMethod ISteamUserStats_GetLeaderboardSortMethod(
        ulong hSteamLeaderboard)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamUserStats_GetLeaderboardSortMethod(this._ptr, hSteamLeaderboard) : throw new Exception("ISteamUserStats _ptr is null!");
      }

      public virtual LeaderboardDisplayType ISteamUserStats_GetLeaderboardDisplayType(
        ulong hSteamLeaderboard)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamUserStats_GetLeaderboardDisplayType(this._ptr, hSteamLeaderboard) : throw new Exception("ISteamUserStats _ptr is null!");
      }

      public virtual SteamAPICall_t ISteamUserStats_DownloadLeaderboardEntries(
        ulong hSteamLeaderboard,
        LeaderboardDataRequest eLeaderboardDataRequest,
        int nRangeStart,
        int nRangeEnd)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUserStats _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamUserStats_DownloadLeaderboardEntries(this._ptr, hSteamLeaderboard, eLeaderboardDataRequest, nRangeStart, nRangeEnd);
      }

      public virtual SteamAPICall_t ISteamUserStats_DownloadLeaderboardEntriesForUsers(
        ulong hSteamLeaderboard,
        IntPtr prgUsers,
        int cUsers)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUserStats _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamUserStats_DownloadLeaderboardEntriesForUsers(this._ptr, hSteamLeaderboard, prgUsers, cUsers);
      }

      public virtual bool ISteamUserStats_GetDownloadedLeaderboardEntry(
        ulong hSteamLeaderboardEntries,
        int index,
        ref LeaderboardEntry_t pLeaderboardEntry,
        IntPtr pDetails,
        int cDetailsMax)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUserStats _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamUserStats_GetDownloadedLeaderboardEntry(this._ptr, hSteamLeaderboardEntries, index, ref pLeaderboardEntry, pDetails, cDetailsMax);
      }

      public virtual SteamAPICall_t ISteamUserStats_UploadLeaderboardScore(
        ulong hSteamLeaderboard,
        LeaderboardUploadScoreMethod eLeaderboardUploadScoreMethod,
        int nScore,
        int[] pScoreDetails,
        int cScoreDetailsCount)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUserStats _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamUserStats_UploadLeaderboardScore(this._ptr, hSteamLeaderboard, eLeaderboardUploadScoreMethod, nScore, pScoreDetails, cScoreDetailsCount);
      }

      public virtual SteamAPICall_t ISteamUserStats_AttachLeaderboardUGC(
        ulong hSteamLeaderboard,
        ulong hUGC)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUserStats _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamUserStats_AttachLeaderboardUGC(this._ptr, hSteamLeaderboard, hUGC);
      }

      public virtual SteamAPICall_t ISteamUserStats_GetNumberOfCurrentPlayers()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamUserStats_GetNumberOfCurrentPlayers(this._ptr) : throw new Exception("ISteamUserStats _ptr is null!");
      }

      public virtual SteamAPICall_t ISteamUserStats_RequestGlobalAchievementPercentages()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamUserStats_RequestGlobalAchievementPercentages(this._ptr) : throw new Exception("ISteamUserStats _ptr is null!");
      }

      public virtual int ISteamUserStats_GetMostAchievedAchievementInfo(
        StringBuilder pchName,
        uint unNameBufLen,
        out float pflPercent,
        [MarshalAs(UnmanagedType.U1)] ref bool pbAchieved)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUserStats _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamUserStats_GetMostAchievedAchievementInfo(this._ptr, pchName, unNameBufLen, out pflPercent, ref pbAchieved);
      }

      public virtual int ISteamUserStats_GetNextMostAchievedAchievementInfo(
        int iIteratorPrevious,
        StringBuilder pchName,
        uint unNameBufLen,
        out float pflPercent,
        [MarshalAs(UnmanagedType.U1)] ref bool pbAchieved)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUserStats _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamUserStats_GetNextMostAchievedAchievementInfo(this._ptr, iIteratorPrevious, pchName, unNameBufLen, out pflPercent, ref pbAchieved);
      }

      public virtual bool ISteamUserStats_GetAchievementAchievedPercent(
        string pchName,
        out float pflPercent)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamUserStats_GetAchievementAchievedPercent(this._ptr, pchName, out pflPercent) : throw new Exception("ISteamUserStats _ptr is null!");
      }

      public virtual SteamAPICall_t ISteamUserStats_RequestGlobalStats(int nHistoryDays)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamUserStats_RequestGlobalStats(this._ptr, nHistoryDays) : throw new Exception("ISteamUserStats _ptr is null!");
      }

      public virtual bool ISteamUserStats_GetGlobalStat(string pchStatName, out long pData)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamUserStats_GetGlobalStat(this._ptr, pchStatName, out pData) : throw new Exception("ISteamUserStats _ptr is null!");
      }

      public virtual bool ISteamUserStats_GetGlobalStat0(string pchStatName, out double pData)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamUserStats_GetGlobalStat0(this._ptr, pchStatName, out pData) : throw new Exception("ISteamUserStats _ptr is null!");
      }

      public virtual int ISteamUserStats_GetGlobalStatHistory(
        string pchStatName,
        out long pData,
        uint cubData)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUserStats _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamUserStats_GetGlobalStatHistory(this._ptr, pchStatName, out pData, cubData);
      }

      public virtual int ISteamUserStats_GetGlobalStatHistory0(
        string pchStatName,
        out double pData,
        uint cubData)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUserStats _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamUserStats_GetGlobalStatHistory0(this._ptr, pchStatName, out pData, cubData);
      }

      public virtual bool ISteamApps_BIsSubscribed()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamApps_BIsSubscribed(this._ptr) : throw new Exception("ISteamApps _ptr is null!");
      }

      public virtual bool ISteamApps_BIsLowViolence()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamApps_BIsLowViolence(this._ptr) : throw new Exception("ISteamApps _ptr is null!");
      }

      public virtual bool ISteamApps_BIsCybercafe()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamApps_BIsCybercafe(this._ptr) : throw new Exception("ISteamApps _ptr is null!");
      }

      public virtual bool ISteamApps_BIsVACBanned()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamApps_BIsVACBanned(this._ptr) : throw new Exception("ISteamApps _ptr is null!");
      }

      public virtual IntPtr ISteamApps_GetCurrentGameLanguage()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamApps_GetCurrentGameLanguage(this._ptr) : throw new Exception("ISteamApps _ptr is null!");
      }

      public virtual IntPtr ISteamApps_GetAvailableGameLanguages()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamApps_GetAvailableGameLanguages(this._ptr) : throw new Exception("ISteamApps _ptr is null!");
      }

      public virtual bool ISteamApps_BIsSubscribedApp(uint appID)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamApps_BIsSubscribedApp(this._ptr, appID) : throw new Exception("ISteamApps _ptr is null!");
      }

      public virtual bool ISteamApps_BIsDlcInstalled(uint appID)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamApps_BIsDlcInstalled(this._ptr, appID) : throw new Exception("ISteamApps _ptr is null!");
      }

      public virtual uint ISteamApps_GetEarliestPurchaseUnixTime(uint nAppID)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamApps_GetEarliestPurchaseUnixTime(this._ptr, nAppID) : throw new Exception("ISteamApps _ptr is null!");
      }

      public virtual bool ISteamApps_BIsSubscribedFromFreeWeekend()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamApps_BIsSubscribedFromFreeWeekend(this._ptr) : throw new Exception("ISteamApps _ptr is null!");
      }

      public virtual int ISteamApps_GetDLCCount()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamApps_GetDLCCount(this._ptr) : throw new Exception("ISteamApps _ptr is null!");
      }

      public virtual bool ISteamApps_BGetDLCDataByIndex(
        int iDLC,
        ref uint pAppID,
        [MarshalAs(UnmanagedType.U1)] ref bool pbAvailable,
        StringBuilder pchName,
        int cchNameBufferSize)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamApps _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamApps_BGetDLCDataByIndex(this._ptr, iDLC, ref pAppID, ref pbAvailable, pchName, cchNameBufferSize);
      }

      public virtual void ISteamApps_InstallDLC(uint nAppID)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamApps _ptr is null!");
        Platform.Win32.Native.SteamAPI_ISteamApps_InstallDLC(this._ptr, nAppID);
      }

      public virtual void ISteamApps_UninstallDLC(uint nAppID)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamApps _ptr is null!");
        Platform.Win32.Native.SteamAPI_ISteamApps_UninstallDLC(this._ptr, nAppID);
      }

      public virtual void ISteamApps_RequestAppProofOfPurchaseKey(uint nAppID)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamApps _ptr is null!");
        Platform.Win32.Native.SteamAPI_ISteamApps_RequestAppProofOfPurchaseKey(this._ptr, nAppID);
      }

      public virtual bool ISteamApps_GetCurrentBetaName(
        StringBuilder pchName,
        int cchNameBufferSize)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamApps _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamApps_GetCurrentBetaName(this._ptr, pchName, cchNameBufferSize);
      }

      public virtual bool ISteamApps_MarkContentCorrupt([MarshalAs(UnmanagedType.U1)] bool bMissingFilesOnly)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamApps_MarkContentCorrupt(this._ptr, bMissingFilesOnly) : throw new Exception("ISteamApps _ptr is null!");
      }

      public virtual uint ISteamApps_GetInstalledDepots(
        uint appID,
        IntPtr pvecDepots,
        uint cMaxDepots)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamApps _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamApps_GetInstalledDepots(this._ptr, appID, pvecDepots, cMaxDepots);
      }

      public virtual uint ISteamApps_GetAppInstallDir(
        uint appID,
        StringBuilder pchFolder,
        uint cchFolderBufferSize)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamApps _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamApps_GetAppInstallDir(this._ptr, appID, pchFolder, cchFolderBufferSize);
      }

      public virtual bool ISteamApps_BIsAppInstalled(uint appID)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamApps_BIsAppInstalled(this._ptr, appID) : throw new Exception("ISteamApps _ptr is null!");
      }

      public virtual CSteamID ISteamApps_GetAppOwner()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamApps_GetAppOwner(this._ptr) : throw new Exception("ISteamApps _ptr is null!");
      }

      public virtual IntPtr ISteamApps_GetLaunchQueryParam(string pchKey)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamApps_GetLaunchQueryParam(this._ptr, pchKey) : throw new Exception("ISteamApps _ptr is null!");
      }

      public virtual bool ISteamApps_GetDlcDownloadProgress(
        uint nAppID,
        out ulong punBytesDownloaded,
        out ulong punBytesTotal)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamApps_GetDlcDownloadProgress(this._ptr, nAppID, out punBytesDownloaded, out punBytesTotal) : throw new Exception("ISteamApps _ptr is null!");
      }

      public virtual int ISteamApps_GetAppBuildId()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamApps_GetAppBuildId(this._ptr) : throw new Exception("ISteamApps _ptr is null!");
      }

      public virtual void ISteamApps_RequestAllProofOfPurchaseKeys()
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamApps _ptr is null!");
        Platform.Win32.Native.SteamAPI_ISteamApps_RequestAllProofOfPurchaseKeys(this._ptr);
      }

      public virtual SteamAPICall_t ISteamApps_GetFileDetails(string pszFileName)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamApps_GetFileDetails(this._ptr, pszFileName) : throw new Exception("ISteamApps _ptr is null!");
      }

      public virtual bool ISteamNetworking_SendP2PPacket(
        ulong steamIDRemote,
        IntPtr pubData,
        uint cubData,
        P2PSend eP2PSendType,
        int nChannel)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamNetworking _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamNetworking_SendP2PPacket(this._ptr, steamIDRemote, pubData, cubData, eP2PSendType, nChannel);
      }

      public virtual bool ISteamNetworking_IsP2PPacketAvailable(out uint pcubMsgSize, int nChannel)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamNetworking_IsP2PPacketAvailable(this._ptr, out pcubMsgSize, nChannel) : throw new Exception("ISteamNetworking _ptr is null!");
      }

      public virtual bool ISteamNetworking_ReadP2PPacket(
        IntPtr pubDest,
        uint cubDest,
        out uint pcubMsgSize,
        out ulong psteamIDRemote,
        int nChannel)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamNetworking _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamNetworking_ReadP2PPacket(this._ptr, pubDest, cubDest, out pcubMsgSize, out psteamIDRemote, nChannel);
      }

      public virtual bool ISteamNetworking_AcceptP2PSessionWithUser(ulong steamIDRemote)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamNetworking_AcceptP2PSessionWithUser(this._ptr, steamIDRemote) : throw new Exception("ISteamNetworking _ptr is null!");
      }

      public virtual bool ISteamNetworking_CloseP2PSessionWithUser(ulong steamIDRemote)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamNetworking_CloseP2PSessionWithUser(this._ptr, steamIDRemote) : throw new Exception("ISteamNetworking _ptr is null!");
      }

      public virtual bool ISteamNetworking_CloseP2PChannelWithUser(
        ulong steamIDRemote,
        int nChannel)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamNetworking _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamNetworking_CloseP2PChannelWithUser(this._ptr, steamIDRemote, nChannel);
      }

      public virtual bool ISteamNetworking_GetP2PSessionState(
        ulong steamIDRemote,
        ref P2PSessionState_t pConnectionState)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamNetworking _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamNetworking_GetP2PSessionState(this._ptr, steamIDRemote, ref pConnectionState);
      }

      public virtual bool ISteamNetworking_AllowP2PPacketRelay([MarshalAs(UnmanagedType.U1)] bool bAllow)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamNetworking_AllowP2PPacketRelay(this._ptr, bAllow) : throw new Exception("ISteamNetworking _ptr is null!");
      }

      public virtual SNetListenSocket_t ISteamNetworking_CreateListenSocket(
        int nVirtualP2PPort,
        uint nIP,
        ushort nPort,
        [MarshalAs(UnmanagedType.U1)] bool bAllowUseOfPacketRelay)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamNetworking _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamNetworking_CreateListenSocket(this._ptr, nVirtualP2PPort, nIP, nPort, bAllowUseOfPacketRelay);
      }

      public virtual SNetSocket_t ISteamNetworking_CreateP2PConnectionSocket(
        ulong steamIDTarget,
        int nVirtualPort,
        int nTimeoutSec,
        [MarshalAs(UnmanagedType.U1)] bool bAllowUseOfPacketRelay)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamNetworking _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamNetworking_CreateP2PConnectionSocket(this._ptr, steamIDTarget, nVirtualPort, nTimeoutSec, bAllowUseOfPacketRelay);
      }

      public virtual SNetSocket_t ISteamNetworking_CreateConnectionSocket(
        uint nIP,
        ushort nPort,
        int nTimeoutSec)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamNetworking _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamNetworking_CreateConnectionSocket(this._ptr, nIP, nPort, nTimeoutSec);
      }

      public virtual bool ISteamNetworking_DestroySocket(uint hSocket, [MarshalAs(UnmanagedType.U1)] bool bNotifyRemoteEnd)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamNetworking _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamNetworking_DestroySocket(this._ptr, hSocket, bNotifyRemoteEnd);
      }

      public virtual bool ISteamNetworking_DestroyListenSocket(uint hSocket, [MarshalAs(UnmanagedType.U1)] bool bNotifyRemoteEnd)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamNetworking _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamNetworking_DestroyListenSocket(this._ptr, hSocket, bNotifyRemoteEnd);
      }

      public virtual bool ISteamNetworking_SendDataOnSocket(
        uint hSocket,
        IntPtr pubData,
        uint cubData,
        [MarshalAs(UnmanagedType.U1)] bool bReliable)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamNetworking _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamNetworking_SendDataOnSocket(this._ptr, hSocket, pubData, cubData, bReliable);
      }

      public virtual bool ISteamNetworking_IsDataAvailableOnSocket(
        uint hSocket,
        out uint pcubMsgSize)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamNetworking_IsDataAvailableOnSocket(this._ptr, hSocket, out pcubMsgSize) : throw new Exception("ISteamNetworking _ptr is null!");
      }

      public virtual bool ISteamNetworking_RetrieveDataFromSocket(
        uint hSocket,
        IntPtr pubDest,
        uint cubDest,
        out uint pcubMsgSize)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamNetworking _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamNetworking_RetrieveDataFromSocket(this._ptr, hSocket, pubDest, cubDest, out pcubMsgSize);
      }

      public virtual bool ISteamNetworking_IsDataAvailable(
        uint hListenSocket,
        out uint pcubMsgSize,
        ref uint phSocket)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamNetworking _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamNetworking_IsDataAvailable(this._ptr, hListenSocket, out pcubMsgSize, ref phSocket);
      }

      public virtual bool ISteamNetworking_RetrieveData(
        uint hListenSocket,
        IntPtr pubDest,
        uint cubDest,
        out uint pcubMsgSize,
        ref uint phSocket)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamNetworking _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamNetworking_RetrieveData(this._ptr, hListenSocket, pubDest, cubDest, out pcubMsgSize, ref phSocket);
      }

      public virtual bool ISteamNetworking_GetSocketInfo(
        uint hSocket,
        out ulong pSteamIDRemote,
        IntPtr peSocketStatus,
        out uint punIPRemote,
        out ushort punPortRemote)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamNetworking _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamNetworking_GetSocketInfo(this._ptr, hSocket, out pSteamIDRemote, peSocketStatus, out punIPRemote, out punPortRemote);
      }

      public virtual bool ISteamNetworking_GetListenSocketInfo(
        uint hListenSocket,
        out uint pnIP,
        out ushort pnPort)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamNetworking_GetListenSocketInfo(this._ptr, hListenSocket, out pnIP, out pnPort) : throw new Exception("ISteamNetworking _ptr is null!");
      }

      public virtual SNetSocketConnectionType ISteamNetworking_GetSocketConnectionType(uint hSocket)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamNetworking_GetSocketConnectionType(this._ptr, hSocket) : throw new Exception("ISteamNetworking _ptr is null!");
      }

      public virtual int ISteamNetworking_GetMaxPacketSize(uint hSocket)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamNetworking_GetMaxPacketSize(this._ptr, hSocket) : throw new Exception("ISteamNetworking _ptr is null!");
      }

      public virtual ScreenshotHandle ISteamScreenshots_WriteScreenshot(
        IntPtr pubRGB,
        uint cubRGB,
        int nWidth,
        int nHeight)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamScreenshots _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamScreenshots_WriteScreenshot(this._ptr, pubRGB, cubRGB, nWidth, nHeight);
      }

      public virtual ScreenshotHandle ISteamScreenshots_AddScreenshotToLibrary(
        string pchFilename,
        string pchThumbnailFilename,
        int nWidth,
        int nHeight)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamScreenshots _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamScreenshots_AddScreenshotToLibrary(this._ptr, pchFilename, pchThumbnailFilename, nWidth, nHeight);
      }

      public virtual void ISteamScreenshots_TriggerScreenshot()
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamScreenshots _ptr is null!");
        Platform.Win32.Native.SteamAPI_ISteamScreenshots_TriggerScreenshot(this._ptr);
      }

      public virtual void ISteamScreenshots_HookScreenshots([MarshalAs(UnmanagedType.U1)] bool bHook)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamScreenshots _ptr is null!");
        Platform.Win32.Native.SteamAPI_ISteamScreenshots_HookScreenshots(this._ptr, bHook);
      }

      public virtual bool ISteamScreenshots_SetLocation(uint hScreenshot, string pchLocation)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamScreenshots _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamScreenshots_SetLocation(this._ptr, hScreenshot, pchLocation);
      }

      public virtual bool ISteamScreenshots_TagUser(uint hScreenshot, ulong steamID)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamScreenshots _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamScreenshots_TagUser(this._ptr, hScreenshot, steamID);
      }

      public virtual bool ISteamScreenshots_TagPublishedFile(
        uint hScreenshot,
        ulong unPublishedFileID)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamScreenshots _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamScreenshots_TagPublishedFile(this._ptr, hScreenshot, unPublishedFileID);
      }

      public virtual bool ISteamScreenshots_IsScreenshotsHooked()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamScreenshots_IsScreenshotsHooked(this._ptr) : throw new Exception("ISteamScreenshots _ptr is null!");
      }

      public virtual ScreenshotHandle ISteamScreenshots_AddVRScreenshotToLibrary(
        VRScreenshotType eType,
        string pchFilename,
        string pchVRFilename)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamScreenshots _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamScreenshots_AddVRScreenshotToLibrary(this._ptr, eType, pchFilename, pchVRFilename);
      }

      public virtual bool ISteamMusic_BIsEnabled()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamMusic_BIsEnabled(this._ptr) : throw new Exception("ISteamMusic _ptr is null!");
      }

      public virtual bool ISteamMusic_BIsPlaying()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamMusic_BIsPlaying(this._ptr) : throw new Exception("ISteamMusic _ptr is null!");
      }

      public virtual AudioPlayback_Status ISteamMusic_GetPlaybackStatus()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamMusic_GetPlaybackStatus(this._ptr) : throw new Exception("ISteamMusic _ptr is null!");
      }

      public virtual void ISteamMusic_Play()
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMusic _ptr is null!");
        Platform.Win32.Native.SteamAPI_ISteamMusic_Play(this._ptr);
      }

      public virtual void ISteamMusic_Pause()
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMusic _ptr is null!");
        Platform.Win32.Native.SteamAPI_ISteamMusic_Pause(this._ptr);
      }

      public virtual void ISteamMusic_PlayPrevious()
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMusic _ptr is null!");
        Platform.Win32.Native.SteamAPI_ISteamMusic_PlayPrevious(this._ptr);
      }

      public virtual void ISteamMusic_PlayNext()
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMusic _ptr is null!");
        Platform.Win32.Native.SteamAPI_ISteamMusic_PlayNext(this._ptr);
      }

      public virtual void ISteamMusic_SetVolume(float flVolume)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMusic _ptr is null!");
        Platform.Win32.Native.SteamAPI_ISteamMusic_SetVolume(this._ptr, flVolume);
      }

      public virtual float ISteamMusic_GetVolume()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamMusic_GetVolume(this._ptr) : throw new Exception("ISteamMusic _ptr is null!");
      }

      public virtual bool ISteamMusicRemote_RegisterSteamMusicRemote(string pchName)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamMusicRemote_RegisterSteamMusicRemote(this._ptr, pchName) : throw new Exception("ISteamMusicRemote _ptr is null!");
      }

      public virtual bool ISteamMusicRemote_DeregisterSteamMusicRemote()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamMusicRemote_DeregisterSteamMusicRemote(this._ptr) : throw new Exception("ISteamMusicRemote _ptr is null!");
      }

      public virtual bool ISteamMusicRemote_BIsCurrentMusicRemote()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamMusicRemote_BIsCurrentMusicRemote(this._ptr) : throw new Exception("ISteamMusicRemote _ptr is null!");
      }

      public virtual bool ISteamMusicRemote_BActivationSuccess([MarshalAs(UnmanagedType.U1)] bool bValue)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamMusicRemote_BActivationSuccess(this._ptr, bValue) : throw new Exception("ISteamMusicRemote _ptr is null!");
      }

      public virtual bool ISteamMusicRemote_SetDisplayName(string pchDisplayName)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamMusicRemote_SetDisplayName(this._ptr, pchDisplayName) : throw new Exception("ISteamMusicRemote _ptr is null!");
      }

      public virtual bool ISteamMusicRemote_SetPNGIcon_64x64(IntPtr pvBuffer, uint cbBufferLength)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMusicRemote _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamMusicRemote_SetPNGIcon_64x64(this._ptr, pvBuffer, cbBufferLength);
      }

      public virtual bool ISteamMusicRemote_EnablePlayPrevious([MarshalAs(UnmanagedType.U1)] bool bValue)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamMusicRemote_EnablePlayPrevious(this._ptr, bValue) : throw new Exception("ISteamMusicRemote _ptr is null!");
      }

      public virtual bool ISteamMusicRemote_EnablePlayNext([MarshalAs(UnmanagedType.U1)] bool bValue)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamMusicRemote_EnablePlayNext(this._ptr, bValue) : throw new Exception("ISteamMusicRemote _ptr is null!");
      }

      public virtual bool ISteamMusicRemote_EnableShuffled([MarshalAs(UnmanagedType.U1)] bool bValue)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamMusicRemote_EnableShuffled(this._ptr, bValue) : throw new Exception("ISteamMusicRemote _ptr is null!");
      }

      public virtual bool ISteamMusicRemote_EnableLooped([MarshalAs(UnmanagedType.U1)] bool bValue)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamMusicRemote_EnableLooped(this._ptr, bValue) : throw new Exception("ISteamMusicRemote _ptr is null!");
      }

      public virtual bool ISteamMusicRemote_EnableQueue([MarshalAs(UnmanagedType.U1)] bool bValue)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamMusicRemote_EnableQueue(this._ptr, bValue) : throw new Exception("ISteamMusicRemote _ptr is null!");
      }

      public virtual bool ISteamMusicRemote_EnablePlaylists([MarshalAs(UnmanagedType.U1)] bool bValue)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamMusicRemote_EnablePlaylists(this._ptr, bValue) : throw new Exception("ISteamMusicRemote _ptr is null!");
      }

      public virtual bool ISteamMusicRemote_UpdatePlaybackStatus(AudioPlayback_Status nStatus)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamMusicRemote_UpdatePlaybackStatus(this._ptr, nStatus) : throw new Exception("ISteamMusicRemote _ptr is null!");
      }

      public virtual bool ISteamMusicRemote_UpdateShuffled([MarshalAs(UnmanagedType.U1)] bool bValue)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamMusicRemote_UpdateShuffled(this._ptr, bValue) : throw new Exception("ISteamMusicRemote _ptr is null!");
      }

      public virtual bool ISteamMusicRemote_UpdateLooped([MarshalAs(UnmanagedType.U1)] bool bValue)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamMusicRemote_UpdateLooped(this._ptr, bValue) : throw new Exception("ISteamMusicRemote _ptr is null!");
      }

      public virtual bool ISteamMusicRemote_UpdateVolume(float flValue)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamMusicRemote_UpdateVolume(this._ptr, flValue) : throw new Exception("ISteamMusicRemote _ptr is null!");
      }

      public virtual bool ISteamMusicRemote_CurrentEntryWillChange()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamMusicRemote_CurrentEntryWillChange(this._ptr) : throw new Exception("ISteamMusicRemote _ptr is null!");
      }

      public virtual bool ISteamMusicRemote_CurrentEntryIsAvailable([MarshalAs(UnmanagedType.U1)] bool bAvailable)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamMusicRemote_CurrentEntryIsAvailable(this._ptr, bAvailable) : throw new Exception("ISteamMusicRemote _ptr is null!");
      }

      public virtual bool ISteamMusicRemote_UpdateCurrentEntryText(string pchText)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamMusicRemote_UpdateCurrentEntryText(this._ptr, pchText) : throw new Exception("ISteamMusicRemote _ptr is null!");
      }

      public virtual bool ISteamMusicRemote_UpdateCurrentEntryElapsedSeconds(int nValue)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamMusicRemote_UpdateCurrentEntryElapsedSeconds(this._ptr, nValue) : throw new Exception("ISteamMusicRemote _ptr is null!");
      }

      public virtual bool ISteamMusicRemote_UpdateCurrentEntryCoverArt(
        IntPtr pvBuffer,
        uint cbBufferLength)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMusicRemote _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamMusicRemote_UpdateCurrentEntryCoverArt(this._ptr, pvBuffer, cbBufferLength);
      }

      public virtual bool ISteamMusicRemote_CurrentEntryDidChange()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamMusicRemote_CurrentEntryDidChange(this._ptr) : throw new Exception("ISteamMusicRemote _ptr is null!");
      }

      public virtual bool ISteamMusicRemote_QueueWillChange()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamMusicRemote_QueueWillChange(this._ptr) : throw new Exception("ISteamMusicRemote _ptr is null!");
      }

      public virtual bool ISteamMusicRemote_ResetQueueEntries()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamMusicRemote_ResetQueueEntries(this._ptr) : throw new Exception("ISteamMusicRemote _ptr is null!");
      }

      public virtual bool ISteamMusicRemote_SetQueueEntry(
        int nID,
        int nPosition,
        string pchEntryText)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMusicRemote _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamMusicRemote_SetQueueEntry(this._ptr, nID, nPosition, pchEntryText);
      }

      public virtual bool ISteamMusicRemote_SetCurrentQueueEntry(int nID)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamMusicRemote_SetCurrentQueueEntry(this._ptr, nID) : throw new Exception("ISteamMusicRemote _ptr is null!");
      }

      public virtual bool ISteamMusicRemote_QueueDidChange()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamMusicRemote_QueueDidChange(this._ptr) : throw new Exception("ISteamMusicRemote _ptr is null!");
      }

      public virtual bool ISteamMusicRemote_PlaylistWillChange()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamMusicRemote_PlaylistWillChange(this._ptr) : throw new Exception("ISteamMusicRemote _ptr is null!");
      }

      public virtual bool ISteamMusicRemote_ResetPlaylistEntries()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamMusicRemote_ResetPlaylistEntries(this._ptr) : throw new Exception("ISteamMusicRemote _ptr is null!");
      }

      public virtual bool ISteamMusicRemote_SetPlaylistEntry(
        int nID,
        int nPosition,
        string pchEntryText)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMusicRemote _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamMusicRemote_SetPlaylistEntry(this._ptr, nID, nPosition, pchEntryText);
      }

      public virtual bool ISteamMusicRemote_SetCurrentPlaylistEntry(int nID)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamMusicRemote_SetCurrentPlaylistEntry(this._ptr, nID) : throw new Exception("ISteamMusicRemote _ptr is null!");
      }

      public virtual bool ISteamMusicRemote_PlaylistDidChange()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamMusicRemote_PlaylistDidChange(this._ptr) : throw new Exception("ISteamMusicRemote _ptr is null!");
      }

      public virtual HTTPRequestHandle ISteamHTTP_CreateHTTPRequest(
        HTTPMethod eHTTPRequestMethod,
        string pchAbsoluteURL)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTTP _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamHTTP_CreateHTTPRequest(this._ptr, eHTTPRequestMethod, pchAbsoluteURL);
      }

      public virtual bool ISteamHTTP_SetHTTPRequestContextValue(uint hRequest, ulong ulContextValue)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTTP _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamHTTP_SetHTTPRequestContextValue(this._ptr, hRequest, ulContextValue);
      }

      public virtual bool ISteamHTTP_SetHTTPRequestNetworkActivityTimeout(
        uint hRequest,
        uint unTimeoutSeconds)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTTP _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamHTTP_SetHTTPRequestNetworkActivityTimeout(this._ptr, hRequest, unTimeoutSeconds);
      }

      public virtual bool ISteamHTTP_SetHTTPRequestHeaderValue(
        uint hRequest,
        string pchHeaderName,
        string pchHeaderValue)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTTP _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamHTTP_SetHTTPRequestHeaderValue(this._ptr, hRequest, pchHeaderName, pchHeaderValue);
      }

      public virtual bool ISteamHTTP_SetHTTPRequestGetOrPostParameter(
        uint hRequest,
        string pchParamName,
        string pchParamValue)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTTP _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamHTTP_SetHTTPRequestGetOrPostParameter(this._ptr, hRequest, pchParamName, pchParamValue);
      }

      public virtual bool ISteamHTTP_SendHTTPRequest(uint hRequest, ref ulong pCallHandle)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTTP _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamHTTP_SendHTTPRequest(this._ptr, hRequest, ref pCallHandle);
      }

      public virtual bool ISteamHTTP_SendHTTPRequestAndStreamResponse(
        uint hRequest,
        ref ulong pCallHandle)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTTP _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamHTTP_SendHTTPRequestAndStreamResponse(this._ptr, hRequest, ref pCallHandle);
      }

      public virtual bool ISteamHTTP_DeferHTTPRequest(uint hRequest)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamHTTP_DeferHTTPRequest(this._ptr, hRequest) : throw new Exception("ISteamHTTP _ptr is null!");
      }

      public virtual bool ISteamHTTP_PrioritizeHTTPRequest(uint hRequest)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamHTTP_PrioritizeHTTPRequest(this._ptr, hRequest) : throw new Exception("ISteamHTTP _ptr is null!");
      }

      public virtual bool ISteamHTTP_GetHTTPResponseHeaderSize(
        uint hRequest,
        string pchHeaderName,
        out uint unResponseHeaderSize)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTTP _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamHTTP_GetHTTPResponseHeaderSize(this._ptr, hRequest, pchHeaderName, out unResponseHeaderSize);
      }

      public virtual bool ISteamHTTP_GetHTTPResponseHeaderValue(
        uint hRequest,
        string pchHeaderName,
        out byte pHeaderValueBuffer,
        uint unBufferSize)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTTP _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamHTTP_GetHTTPResponseHeaderValue(this._ptr, hRequest, pchHeaderName, out pHeaderValueBuffer, unBufferSize);
      }

      public virtual bool ISteamHTTP_GetHTTPResponseBodySize(uint hRequest, out uint unBodySize)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamHTTP_GetHTTPResponseBodySize(this._ptr, hRequest, out unBodySize) : throw new Exception("ISteamHTTP _ptr is null!");
      }

      public virtual bool ISteamHTTP_GetHTTPResponseBodyData(
        uint hRequest,
        out byte pBodyDataBuffer,
        uint unBufferSize)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTTP _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamHTTP_GetHTTPResponseBodyData(this._ptr, hRequest, out pBodyDataBuffer, unBufferSize);
      }

      public virtual bool ISteamHTTP_GetHTTPStreamingResponseBodyData(
        uint hRequest,
        uint cOffset,
        out byte pBodyDataBuffer,
        uint unBufferSize)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTTP _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamHTTP_GetHTTPStreamingResponseBodyData(this._ptr, hRequest, cOffset, out pBodyDataBuffer, unBufferSize);
      }

      public virtual bool ISteamHTTP_ReleaseHTTPRequest(uint hRequest)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamHTTP_ReleaseHTTPRequest(this._ptr, hRequest) : throw new Exception("ISteamHTTP _ptr is null!");
      }

      public virtual bool ISteamHTTP_GetHTTPDownloadProgressPct(
        uint hRequest,
        out float pflPercentOut)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamHTTP_GetHTTPDownloadProgressPct(this._ptr, hRequest, out pflPercentOut) : throw new Exception("ISteamHTTP _ptr is null!");
      }

      public virtual bool ISteamHTTP_SetHTTPRequestRawPostBody(
        uint hRequest,
        string pchContentType,
        out byte pubBody,
        uint unBodyLen)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTTP _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamHTTP_SetHTTPRequestRawPostBody(this._ptr, hRequest, pchContentType, out pubBody, unBodyLen);
      }

      public virtual HTTPCookieContainerHandle ISteamHTTP_CreateCookieContainer(
        [MarshalAs(UnmanagedType.U1)] bool bAllowResponsesToModify)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamHTTP_CreateCookieContainer(this._ptr, bAllowResponsesToModify) : throw new Exception("ISteamHTTP _ptr is null!");
      }

      public virtual bool ISteamHTTP_ReleaseCookieContainer(uint hCookieContainer)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamHTTP_ReleaseCookieContainer(this._ptr, hCookieContainer) : throw new Exception("ISteamHTTP _ptr is null!");
      }

      public virtual bool ISteamHTTP_SetCookie(
        uint hCookieContainer,
        string pchHost,
        string pchUrl,
        string pchCookie)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTTP _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamHTTP_SetCookie(this._ptr, hCookieContainer, pchHost, pchUrl, pchCookie);
      }

      public virtual bool ISteamHTTP_SetHTTPRequestCookieContainer(
        uint hRequest,
        uint hCookieContainer)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTTP _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamHTTP_SetHTTPRequestCookieContainer(this._ptr, hRequest, hCookieContainer);
      }

      public virtual bool ISteamHTTP_SetHTTPRequestUserAgentInfo(
        uint hRequest,
        string pchUserAgentInfo)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTTP _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamHTTP_SetHTTPRequestUserAgentInfo(this._ptr, hRequest, pchUserAgentInfo);
      }

      public virtual bool ISteamHTTP_SetHTTPRequestRequiresVerifiedCertificate(
        uint hRequest,
        [MarshalAs(UnmanagedType.U1)] bool bRequireVerifiedCertificate)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTTP _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamHTTP_SetHTTPRequestRequiresVerifiedCertificate(this._ptr, hRequest, bRequireVerifiedCertificate);
      }

      public virtual bool ISteamHTTP_SetHTTPRequestAbsoluteTimeoutMS(
        uint hRequest,
        uint unMilliseconds)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTTP _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamHTTP_SetHTTPRequestAbsoluteTimeoutMS(this._ptr, hRequest, unMilliseconds);
      }

      public virtual bool ISteamHTTP_GetHTTPRequestWasTimedOut(
        uint hRequest,
        [MarshalAs(UnmanagedType.U1)] ref bool pbWasTimedOut)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTTP _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamHTTP_GetHTTPRequestWasTimedOut(this._ptr, hRequest, ref pbWasTimedOut);
      }

      public virtual ClientUnifiedMessageHandle ISteamUnifiedMessages_SendMethod(
        string pchServiceMethod,
        IntPtr pRequestBuffer,
        uint unRequestBufferSize,
        ulong unContext)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUnifiedMessages _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamUnifiedMessages_SendMethod(this._ptr, pchServiceMethod, pRequestBuffer, unRequestBufferSize, unContext);
      }

      public virtual bool ISteamUnifiedMessages_GetMethodResponseInfo(
        ulong hHandle,
        out uint punResponseSize,
        out Result peResult)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamUnifiedMessages_GetMethodResponseInfo(this._ptr, hHandle, out punResponseSize, out peResult) : throw new Exception("ISteamUnifiedMessages _ptr is null!");
      }

      public virtual bool ISteamUnifiedMessages_GetMethodResponseData(
        ulong hHandle,
        IntPtr pResponseBuffer,
        uint unResponseBufferSize,
        [MarshalAs(UnmanagedType.U1)] bool bAutoRelease)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUnifiedMessages _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamUnifiedMessages_GetMethodResponseData(this._ptr, hHandle, pResponseBuffer, unResponseBufferSize, bAutoRelease);
      }

      public virtual bool ISteamUnifiedMessages_ReleaseMethod(ulong hHandle)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamUnifiedMessages_ReleaseMethod(this._ptr, hHandle) : throw new Exception("ISteamUnifiedMessages _ptr is null!");
      }

      public virtual bool ISteamUnifiedMessages_SendNotification(
        string pchServiceNotification,
        IntPtr pNotificationBuffer,
        uint unNotificationBufferSize)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUnifiedMessages _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamUnifiedMessages_SendNotification(this._ptr, pchServiceNotification, pNotificationBuffer, unNotificationBufferSize);
      }

      public virtual bool ISteamController_Init()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamController_Init(this._ptr) : throw new Exception("ISteamController _ptr is null!");
      }

      public virtual bool ISteamController_Shutdown()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamController_Shutdown(this._ptr) : throw new Exception("ISteamController _ptr is null!");
      }

      public virtual void ISteamController_RunFrame()
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamController _ptr is null!");
        Platform.Win32.Native.SteamAPI_ISteamController_RunFrame(this._ptr);
      }

      public virtual int ISteamController_GetConnectedControllers(IntPtr handlesOut)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamController_GetConnectedControllers(this._ptr, handlesOut) : throw new Exception("ISteamController _ptr is null!");
      }

      public virtual bool ISteamController_ShowBindingPanel(ulong controllerHandle)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamController_ShowBindingPanel(this._ptr, controllerHandle) : throw new Exception("ISteamController _ptr is null!");
      }

      public virtual ControllerActionSetHandle_t ISteamController_GetActionSetHandle(
        string pszActionSetName)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamController_GetActionSetHandle(this._ptr, pszActionSetName) : throw new Exception("ISteamController _ptr is null!");
      }

      public virtual void ISteamController_ActivateActionSet(
        ulong controllerHandle,
        ulong actionSetHandle)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamController _ptr is null!");
        Platform.Win32.Native.SteamAPI_ISteamController_ActivateActionSet(this._ptr, controllerHandle, actionSetHandle);
      }

      public virtual ControllerActionSetHandle_t ISteamController_GetCurrentActionSet(
        ulong controllerHandle)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamController_GetCurrentActionSet(this._ptr, controllerHandle) : throw new Exception("ISteamController _ptr is null!");
      }

      public virtual ControllerDigitalActionHandle_t ISteamController_GetDigitalActionHandle(
        string pszActionName)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamController_GetDigitalActionHandle(this._ptr, pszActionName) : throw new Exception("ISteamController _ptr is null!");
      }

      public virtual ControllerDigitalActionData_t ISteamController_GetDigitalActionData(
        ulong controllerHandle,
        ulong digitalActionHandle)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamController _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamController_GetDigitalActionData(this._ptr, controllerHandle, digitalActionHandle);
      }

      public virtual int ISteamController_GetDigitalActionOrigins(
        ulong controllerHandle,
        ulong actionSetHandle,
        ulong digitalActionHandle,
        out ControllerActionOrigin originsOut)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamController _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamController_GetDigitalActionOrigins(this._ptr, controllerHandle, actionSetHandle, digitalActionHandle, out originsOut);
      }

      public virtual ControllerAnalogActionHandle_t ISteamController_GetAnalogActionHandle(
        string pszActionName)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamController_GetAnalogActionHandle(this._ptr, pszActionName) : throw new Exception("ISteamController _ptr is null!");
      }

      public virtual ControllerAnalogActionData_t ISteamController_GetAnalogActionData(
        ulong controllerHandle,
        ulong analogActionHandle)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamController _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamController_GetAnalogActionData(this._ptr, controllerHandle, analogActionHandle);
      }

      public virtual int ISteamController_GetAnalogActionOrigins(
        ulong controllerHandle,
        ulong actionSetHandle,
        ulong analogActionHandle,
        out ControllerActionOrigin originsOut)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamController _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamController_GetAnalogActionOrigins(this._ptr, controllerHandle, actionSetHandle, analogActionHandle, out originsOut);
      }

      public virtual void ISteamController_StopAnalogActionMomentum(
        ulong controllerHandle,
        ulong eAction)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamController _ptr is null!");
        Platform.Win32.Native.SteamAPI_ISteamController_StopAnalogActionMomentum(this._ptr, controllerHandle, eAction);
      }

      public virtual void ISteamController_TriggerHapticPulse(
        ulong controllerHandle,
        SteamControllerPad eTargetPad,
        ushort usDurationMicroSec)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamController _ptr is null!");
        Platform.Win32.Native.SteamAPI_ISteamController_TriggerHapticPulse(this._ptr, controllerHandle, eTargetPad, usDurationMicroSec);
      }

      public virtual void ISteamController_TriggerRepeatedHapticPulse(
        ulong controllerHandle,
        SteamControllerPad eTargetPad,
        ushort usDurationMicroSec,
        ushort usOffMicroSec,
        ushort unRepeat,
        uint nFlags)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamController _ptr is null!");
        Platform.Win32.Native.SteamAPI_ISteamController_TriggerRepeatedHapticPulse(this._ptr, controllerHandle, eTargetPad, usDurationMicroSec, usOffMicroSec, unRepeat, nFlags);
      }

      public virtual void ISteamController_TriggerVibration(
        ulong controllerHandle,
        ushort usLeftSpeed,
        ushort usRightSpeed)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamController _ptr is null!");
        Platform.Win32.Native.SteamAPI_ISteamController_TriggerVibration(this._ptr, controllerHandle, usLeftSpeed, usRightSpeed);
      }

      public virtual void ISteamController_SetLEDColor(
        ulong controllerHandle,
        byte nColorR,
        byte nColorG,
        byte nColorB,
        uint nFlags)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamController _ptr is null!");
        Platform.Win32.Native.SteamAPI_ISteamController_SetLEDColor(this._ptr, controllerHandle, nColorR, nColorG, nColorB, nFlags);
      }

      public virtual int ISteamController_GetGamepadIndexForController(ulong ulControllerHandle)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamController_GetGamepadIndexForController(this._ptr, ulControllerHandle) : throw new Exception("ISteamController _ptr is null!");
      }

      public virtual ControllerHandle_t ISteamController_GetControllerForGamepadIndex(int nIndex)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamController_GetControllerForGamepadIndex(this._ptr, nIndex) : throw new Exception("ISteamController _ptr is null!");
      }

      public virtual ControllerMotionData_t ISteamController_GetMotionData(ulong controllerHandle)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamController_GetMotionData(this._ptr, controllerHandle) : throw new Exception("ISteamController _ptr is null!");
      }

      public virtual bool ISteamController_ShowDigitalActionOrigins(
        ulong controllerHandle,
        ulong digitalActionHandle,
        float flScale,
        float flXPosition,
        float flYPosition)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamController _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamController_ShowDigitalActionOrigins(this._ptr, controllerHandle, digitalActionHandle, flScale, flXPosition, flYPosition);
      }

      public virtual bool ISteamController_ShowAnalogActionOrigins(
        ulong controllerHandle,
        ulong analogActionHandle,
        float flScale,
        float flXPosition,
        float flYPosition)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamController _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamController_ShowAnalogActionOrigins(this._ptr, controllerHandle, analogActionHandle, flScale, flXPosition, flYPosition);
      }

      public virtual IntPtr ISteamController_GetStringForActionOrigin(ControllerActionOrigin eOrigin)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamController_GetStringForActionOrigin(this._ptr, eOrigin) : throw new Exception("ISteamController _ptr is null!");
      }

      public virtual IntPtr ISteamController_GetGlyphForActionOrigin(ControllerActionOrigin eOrigin)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamController_GetGlyphForActionOrigin(this._ptr, eOrigin) : throw new Exception("ISteamController _ptr is null!");
      }

      public virtual UGCQueryHandle_t ISteamUGC_CreateQueryUserUGCRequest(
        uint unAccountID,
        UserUGCList eListType,
        UGCMatchingUGCType eMatchingUGCType,
        UserUGCListSortOrder eSortOrder,
        uint nCreatorAppID,
        uint nConsumerAppID,
        uint unPage)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamUGC_CreateQueryUserUGCRequest(this._ptr, unAccountID, eListType, eMatchingUGCType, eSortOrder, nCreatorAppID, nConsumerAppID, unPage);
      }

      public virtual UGCQueryHandle_t ISteamUGC_CreateQueryAllUGCRequest(
        UGCQuery eQueryType,
        UGCMatchingUGCType eMatchingeMatchingUGCTypeFileType,
        uint nCreatorAppID,
        uint nConsumerAppID,
        uint unPage)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamUGC_CreateQueryAllUGCRequest(this._ptr, eQueryType, eMatchingeMatchingUGCTypeFileType, nCreatorAppID, nConsumerAppID, unPage);
      }

      public virtual UGCQueryHandle_t ISteamUGC_CreateQueryUGCDetailsRequest(
        IntPtr pvecPublishedFileID,
        uint unNumPublishedFileIDs)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamUGC_CreateQueryUGCDetailsRequest(this._ptr, pvecPublishedFileID, unNumPublishedFileIDs);
      }

      public virtual SteamAPICall_t ISteamUGC_SendQueryUGCRequest(ulong handle)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamUGC_SendQueryUGCRequest(this._ptr, handle) : throw new Exception("ISteamUGC _ptr is null!");
      }

      public virtual bool ISteamUGC_GetQueryUGCResult(
        ulong handle,
        uint index,
        ref SteamUGCDetails_t pDetails)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamUGC_GetQueryUGCResult(this._ptr, handle, index, ref pDetails);
      }

      public virtual bool ISteamUGC_GetQueryUGCPreviewURL(
        ulong handle,
        uint index,
        StringBuilder pchURL,
        uint cchURLSize)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamUGC_GetQueryUGCPreviewURL(this._ptr, handle, index, pchURL, cchURLSize);
      }

      public virtual bool ISteamUGC_GetQueryUGCMetadata(
        ulong handle,
        uint index,
        StringBuilder pchMetadata,
        uint cchMetadatasize)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamUGC_GetQueryUGCMetadata(this._ptr, handle, index, pchMetadata, cchMetadatasize);
      }

      public virtual bool ISteamUGC_GetQueryUGCChildren(
        ulong handle,
        uint index,
        IntPtr pvecPublishedFileID,
        uint cMaxEntries)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamUGC_GetQueryUGCChildren(this._ptr, handle, index, pvecPublishedFileID, cMaxEntries);
      }

      public virtual bool ISteamUGC_GetQueryUGCStatistic(
        ulong handle,
        uint index,
        ItemStatistic eStatType,
        out ulong pStatValue)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamUGC_GetQueryUGCStatistic(this._ptr, handle, index, eStatType, out pStatValue);
      }

      public virtual uint ISteamUGC_GetQueryUGCNumAdditionalPreviews(ulong handle, uint index)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamUGC_GetQueryUGCNumAdditionalPreviews(this._ptr, handle, index);
      }

      public virtual bool ISteamUGC_GetQueryUGCAdditionalPreview(
        ulong handle,
        uint index,
        uint previewIndex,
        StringBuilder pchURLOrVideoID,
        uint cchURLSize,
        StringBuilder pchOriginalFileName,
        uint cchOriginalFileNameSize,
        out ItemPreviewType pPreviewType)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamUGC_GetQueryUGCAdditionalPreview(this._ptr, handle, index, previewIndex, pchURLOrVideoID, cchURLSize, pchOriginalFileName, cchOriginalFileNameSize, out pPreviewType);
      }

      public virtual uint ISteamUGC_GetQueryUGCNumKeyValueTags(ulong handle, uint index)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamUGC_GetQueryUGCNumKeyValueTags(this._ptr, handle, index);
      }

      public virtual bool ISteamUGC_GetQueryUGCKeyValueTag(
        ulong handle,
        uint index,
        uint keyValueTagIndex,
        StringBuilder pchKey,
        uint cchKeySize,
        StringBuilder pchValue,
        uint cchValueSize)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamUGC_GetQueryUGCKeyValueTag(this._ptr, handle, index, keyValueTagIndex, pchKey, cchKeySize, pchValue, cchValueSize);
      }

      public virtual bool ISteamUGC_ReleaseQueryUGCRequest(ulong handle)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamUGC_ReleaseQueryUGCRequest(this._ptr, handle) : throw new Exception("ISteamUGC _ptr is null!");
      }

      public virtual bool ISteamUGC_AddRequiredTag(ulong handle, string pTagName)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamUGC_AddRequiredTag(this._ptr, handle, pTagName);
      }

      public virtual bool ISteamUGC_AddExcludedTag(ulong handle, string pTagName)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamUGC_AddExcludedTag(this._ptr, handle, pTagName);
      }

      public virtual bool ISteamUGC_SetReturnOnlyIDs(ulong handle, [MarshalAs(UnmanagedType.U1)] bool bReturnOnlyIDs)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamUGC_SetReturnOnlyIDs(this._ptr, handle, bReturnOnlyIDs);
      }

      public virtual bool ISteamUGC_SetReturnKeyValueTags(ulong handle, [MarshalAs(UnmanagedType.U1)] bool bReturnKeyValueTags)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamUGC_SetReturnKeyValueTags(this._ptr, handle, bReturnKeyValueTags);
      }

      public virtual bool ISteamUGC_SetReturnLongDescription(
        ulong handle,
        [MarshalAs(UnmanagedType.U1)] bool bReturnLongDescription)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamUGC_SetReturnLongDescription(this._ptr, handle, bReturnLongDescription);
      }

      public virtual bool ISteamUGC_SetReturnMetadata(ulong handle, [MarshalAs(UnmanagedType.U1)] bool bReturnMetadata)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamUGC_SetReturnMetadata(this._ptr, handle, bReturnMetadata);
      }

      public virtual bool ISteamUGC_SetReturnChildren(ulong handle, [MarshalAs(UnmanagedType.U1)] bool bReturnChildren)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamUGC_SetReturnChildren(this._ptr, handle, bReturnChildren);
      }

      public virtual bool ISteamUGC_SetReturnAdditionalPreviews(
        ulong handle,
        [MarshalAs(UnmanagedType.U1)] bool bReturnAdditionalPreviews)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamUGC_SetReturnAdditionalPreviews(this._ptr, handle, bReturnAdditionalPreviews);
      }

      public virtual bool ISteamUGC_SetReturnTotalOnly(ulong handle, [MarshalAs(UnmanagedType.U1)] bool bReturnTotalOnly)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamUGC_SetReturnTotalOnly(this._ptr, handle, bReturnTotalOnly);
      }

      public virtual bool ISteamUGC_SetReturnPlaytimeStats(ulong handle, uint unDays)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamUGC_SetReturnPlaytimeStats(this._ptr, handle, unDays);
      }

      public virtual bool ISteamUGC_SetLanguage(ulong handle, string pchLanguage)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamUGC_SetLanguage(this._ptr, handle, pchLanguage);
      }

      public virtual bool ISteamUGC_SetAllowCachedResponse(ulong handle, uint unMaxAgeSeconds)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamUGC_SetAllowCachedResponse(this._ptr, handle, unMaxAgeSeconds);
      }

      public virtual bool ISteamUGC_SetCloudFileNameFilter(ulong handle, string pMatchCloudFileName)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamUGC_SetCloudFileNameFilter(this._ptr, handle, pMatchCloudFileName);
      }

      public virtual bool ISteamUGC_SetMatchAnyTag(ulong handle, [MarshalAs(UnmanagedType.U1)] bool bMatchAnyTag)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamUGC_SetMatchAnyTag(this._ptr, handle, bMatchAnyTag);
      }

      public virtual bool ISteamUGC_SetSearchText(ulong handle, string pSearchText)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamUGC_SetSearchText(this._ptr, handle, pSearchText);
      }

      public virtual bool ISteamUGC_SetRankedByTrendDays(ulong handle, uint unDays)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamUGC_SetRankedByTrendDays(this._ptr, handle, unDays);
      }

      public virtual bool ISteamUGC_AddRequiredKeyValueTag(
        ulong handle,
        string pKey,
        string pValue)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamUGC_AddRequiredKeyValueTag(this._ptr, handle, pKey, pValue);
      }

      public virtual SteamAPICall_t ISteamUGC_RequestUGCDetails(
        ulong nPublishedFileID,
        uint unMaxAgeSeconds)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamUGC_RequestUGCDetails(this._ptr, nPublishedFileID, unMaxAgeSeconds);
      }

      public virtual SteamAPICall_t ISteamUGC_CreateItem(
        uint nConsumerAppId,
        WorkshopFileType eFileType)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamUGC_CreateItem(this._ptr, nConsumerAppId, eFileType);
      }

      public virtual UGCUpdateHandle_t ISteamUGC_StartItemUpdate(
        uint nConsumerAppId,
        ulong nPublishedFileID)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamUGC_StartItemUpdate(this._ptr, nConsumerAppId, nPublishedFileID);
      }

      public virtual bool ISteamUGC_SetItemTitle(ulong handle, string pchTitle)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamUGC_SetItemTitle(this._ptr, handle, pchTitle);
      }

      public virtual bool ISteamUGC_SetItemDescription(ulong handle, string pchDescription)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamUGC_SetItemDescription(this._ptr, handle, pchDescription);
      }

      public virtual bool ISteamUGC_SetItemUpdateLanguage(ulong handle, string pchLanguage)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamUGC_SetItemUpdateLanguage(this._ptr, handle, pchLanguage);
      }

      public virtual bool ISteamUGC_SetItemMetadata(ulong handle, string pchMetaData)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamUGC_SetItemMetadata(this._ptr, handle, pchMetaData);
      }

      public virtual bool ISteamUGC_SetItemVisibility(
        ulong handle,
        RemoteStoragePublishedFileVisibility eVisibility)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamUGC_SetItemVisibility(this._ptr, handle, eVisibility);
      }

      public virtual bool ISteamUGC_SetItemTags(
        ulong updateHandle,
        ref SteamParamStringArray_t pTags)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamUGC_SetItemTags(this._ptr, updateHandle, ref pTags);
      }

      public virtual bool ISteamUGC_SetItemContent(ulong handle, string pszContentFolder)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamUGC_SetItemContent(this._ptr, handle, pszContentFolder);
      }

      public virtual bool ISteamUGC_SetItemPreview(ulong handle, string pszPreviewFile)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamUGC_SetItemPreview(this._ptr, handle, pszPreviewFile);
      }

      public virtual bool ISteamUGC_RemoveItemKeyValueTags(ulong handle, string pchKey)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamUGC_RemoveItemKeyValueTags(this._ptr, handle, pchKey);
      }

      public virtual bool ISteamUGC_AddItemKeyValueTag(
        ulong handle,
        string pchKey,
        string pchValue)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamUGC_AddItemKeyValueTag(this._ptr, handle, pchKey, pchValue);
      }

      public virtual bool ISteamUGC_AddItemPreviewFile(
        ulong handle,
        string pszPreviewFile,
        ItemPreviewType type)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamUGC_AddItemPreviewFile(this._ptr, handle, pszPreviewFile, type);
      }

      public virtual bool ISteamUGC_AddItemPreviewVideo(ulong handle, string pszVideoID)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamUGC_AddItemPreviewVideo(this._ptr, handle, pszVideoID);
      }

      public virtual bool ISteamUGC_UpdateItemPreviewFile(
        ulong handle,
        uint index,
        string pszPreviewFile)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamUGC_UpdateItemPreviewFile(this._ptr, handle, index, pszPreviewFile);
      }

      public virtual bool ISteamUGC_UpdateItemPreviewVideo(
        ulong handle,
        uint index,
        string pszVideoID)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamUGC_UpdateItemPreviewVideo(this._ptr, handle, index, pszVideoID);
      }

      public virtual bool ISteamUGC_RemoveItemPreview(ulong handle, uint index)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamUGC_RemoveItemPreview(this._ptr, handle, index);
      }

      public virtual SteamAPICall_t ISteamUGC_SubmitItemUpdate(ulong handle, string pchChangeNote)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamUGC_SubmitItemUpdate(this._ptr, handle, pchChangeNote);
      }

      public virtual ItemUpdateStatus ISteamUGC_GetItemUpdateProgress(
        ulong handle,
        out ulong punBytesProcessed,
        out ulong punBytesTotal)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamUGC_GetItemUpdateProgress(this._ptr, handle, out punBytesProcessed, out punBytesTotal) : throw new Exception("ISteamUGC _ptr is null!");
      }

      public virtual SteamAPICall_t ISteamUGC_SetUserItemVote(ulong nPublishedFileID, [MarshalAs(UnmanagedType.U1)] bool bVoteUp)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamUGC_SetUserItemVote(this._ptr, nPublishedFileID, bVoteUp);
      }

      public virtual SteamAPICall_t ISteamUGC_GetUserItemVote(ulong nPublishedFileID)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamUGC_GetUserItemVote(this._ptr, nPublishedFileID) : throw new Exception("ISteamUGC _ptr is null!");
      }

      public virtual SteamAPICall_t ISteamUGC_AddItemToFavorites(
        uint nAppId,
        ulong nPublishedFileID)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamUGC_AddItemToFavorites(this._ptr, nAppId, nPublishedFileID);
      }

      public virtual SteamAPICall_t ISteamUGC_RemoveItemFromFavorites(
        uint nAppId,
        ulong nPublishedFileID)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamUGC_RemoveItemFromFavorites(this._ptr, nAppId, nPublishedFileID);
      }

      public virtual SteamAPICall_t ISteamUGC_SubscribeItem(ulong nPublishedFileID)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamUGC_SubscribeItem(this._ptr, nPublishedFileID) : throw new Exception("ISteamUGC _ptr is null!");
      }

      public virtual SteamAPICall_t ISteamUGC_UnsubscribeItem(ulong nPublishedFileID)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamUGC_UnsubscribeItem(this._ptr, nPublishedFileID) : throw new Exception("ISteamUGC _ptr is null!");
      }

      public virtual uint ISteamUGC_GetNumSubscribedItems()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamUGC_GetNumSubscribedItems(this._ptr) : throw new Exception("ISteamUGC _ptr is null!");
      }

      public virtual uint ISteamUGC_GetSubscribedItems(IntPtr pvecPublishedFileID, uint cMaxEntries)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamUGC_GetSubscribedItems(this._ptr, pvecPublishedFileID, cMaxEntries);
      }

      public virtual uint ISteamUGC_GetItemState(ulong nPublishedFileID)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamUGC_GetItemState(this._ptr, nPublishedFileID) : throw new Exception("ISteamUGC _ptr is null!");
      }

      public virtual bool ISteamUGC_GetItemInstallInfo(
        ulong nPublishedFileID,
        out ulong punSizeOnDisk,
        StringBuilder pchFolder,
        uint cchFolderSize,
        out uint punTimeStamp)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamUGC_GetItemInstallInfo(this._ptr, nPublishedFileID, out punSizeOnDisk, pchFolder, cchFolderSize, out punTimeStamp);
      }

      public virtual bool ISteamUGC_GetItemDownloadInfo(
        ulong nPublishedFileID,
        out ulong punBytesDownloaded,
        out ulong punBytesTotal)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamUGC_GetItemDownloadInfo(this._ptr, nPublishedFileID, out punBytesDownloaded, out punBytesTotal) : throw new Exception("ISteamUGC _ptr is null!");
      }

      public virtual bool ISteamUGC_DownloadItem(ulong nPublishedFileID, [MarshalAs(UnmanagedType.U1)] bool bHighPriority)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamUGC_DownloadItem(this._ptr, nPublishedFileID, bHighPriority);
      }

      public virtual bool ISteamUGC_BInitWorkshopForGameServer(
        uint unWorkshopDepotID,
        string pszFolder)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamUGC_BInitWorkshopForGameServer(this._ptr, unWorkshopDepotID, pszFolder);
      }

      public virtual void ISteamUGC_SuspendDownloads([MarshalAs(UnmanagedType.U1)] bool bSuspend)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        Platform.Win32.Native.SteamAPI_ISteamUGC_SuspendDownloads(this._ptr, bSuspend);
      }

      public virtual SteamAPICall_t ISteamUGC_StartPlaytimeTracking(
        IntPtr pvecPublishedFileID,
        uint unNumPublishedFileIDs)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamUGC_StartPlaytimeTracking(this._ptr, pvecPublishedFileID, unNumPublishedFileIDs);
      }

      public virtual SteamAPICall_t ISteamUGC_StopPlaytimeTracking(
        IntPtr pvecPublishedFileID,
        uint unNumPublishedFileIDs)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamUGC_StopPlaytimeTracking(this._ptr, pvecPublishedFileID, unNumPublishedFileIDs);
      }

      public virtual SteamAPICall_t ISteamUGC_StopPlaytimeTrackingForAllItems()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamUGC_StopPlaytimeTrackingForAllItems(this._ptr) : throw new Exception("ISteamUGC _ptr is null!");
      }

      public virtual SteamAPICall_t ISteamUGC_AddDependency(
        ulong nParentPublishedFileID,
        ulong nChildPublishedFileID)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamUGC_AddDependency(this._ptr, nParentPublishedFileID, nChildPublishedFileID);
      }

      public virtual SteamAPICall_t ISteamUGC_RemoveDependency(
        ulong nParentPublishedFileID,
        ulong nChildPublishedFileID)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamUGC_RemoveDependency(this._ptr, nParentPublishedFileID, nChildPublishedFileID);
      }

      public virtual uint ISteamAppList_GetNumInstalledApps()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamAppList_GetNumInstalledApps(this._ptr) : throw new Exception("ISteamAppList _ptr is null!");
      }

      public virtual uint ISteamAppList_GetInstalledApps(IntPtr pvecAppID, uint unMaxAppIDs)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamAppList _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamAppList_GetInstalledApps(this._ptr, pvecAppID, unMaxAppIDs);
      }

      public virtual int ISteamAppList_GetAppName(
        uint nAppID,
        StringBuilder pchName,
        int cchNameMax)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamAppList _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamAppList_GetAppName(this._ptr, nAppID, pchName, cchNameMax);
      }

      public virtual int ISteamAppList_GetAppInstallDir(
        uint nAppID,
        StringBuilder pchDirectory,
        int cchNameMax)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamAppList _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamAppList_GetAppInstallDir(this._ptr, nAppID, pchDirectory, cchNameMax);
      }

      public virtual int ISteamAppList_GetAppBuildId(uint nAppID)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamAppList_GetAppBuildId(this._ptr, nAppID) : throw new Exception("ISteamAppList _ptr is null!");
      }

      public virtual void ISteamHTMLSurface_DestructISteamHTMLSurface()
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTMLSurface _ptr is null!");
        Platform.Win32.Native.SteamAPI_ISteamHTMLSurface_DestructISteamHTMLSurface(this._ptr);
      }

      public virtual bool ISteamHTMLSurface_Init()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamHTMLSurface_Init(this._ptr) : throw new Exception("ISteamHTMLSurface _ptr is null!");
      }

      public virtual bool ISteamHTMLSurface_Shutdown()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamHTMLSurface_Shutdown(this._ptr) : throw new Exception("ISteamHTMLSurface _ptr is null!");
      }

      public virtual SteamAPICall_t ISteamHTMLSurface_CreateBrowser(
        string pchUserAgent,
        string pchUserCSS)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTMLSurface _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamHTMLSurface_CreateBrowser(this._ptr, pchUserAgent, pchUserCSS);
      }

      public virtual void ISteamHTMLSurface_RemoveBrowser(uint unBrowserHandle)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTMLSurface _ptr is null!");
        Platform.Win32.Native.SteamAPI_ISteamHTMLSurface_RemoveBrowser(this._ptr, unBrowserHandle);
      }

      public virtual void ISteamHTMLSurface_LoadURL(
        uint unBrowserHandle,
        string pchURL,
        string pchPostData)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTMLSurface _ptr is null!");
        Platform.Win32.Native.SteamAPI_ISteamHTMLSurface_LoadURL(this._ptr, unBrowserHandle, pchURL, pchPostData);
      }

      public virtual void ISteamHTMLSurface_SetSize(
        uint unBrowserHandle,
        uint unWidth,
        uint unHeight)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTMLSurface _ptr is null!");
        Platform.Win32.Native.SteamAPI_ISteamHTMLSurface_SetSize(this._ptr, unBrowserHandle, unWidth, unHeight);
      }

      public virtual void ISteamHTMLSurface_StopLoad(uint unBrowserHandle)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTMLSurface _ptr is null!");
        Platform.Win32.Native.SteamAPI_ISteamHTMLSurface_StopLoad(this._ptr, unBrowserHandle);
      }

      public virtual void ISteamHTMLSurface_Reload(uint unBrowserHandle)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTMLSurface _ptr is null!");
        Platform.Win32.Native.SteamAPI_ISteamHTMLSurface_Reload(this._ptr, unBrowserHandle);
      }

      public virtual void ISteamHTMLSurface_GoBack(uint unBrowserHandle)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTMLSurface _ptr is null!");
        Platform.Win32.Native.SteamAPI_ISteamHTMLSurface_GoBack(this._ptr, unBrowserHandle);
      }

      public virtual void ISteamHTMLSurface_GoForward(uint unBrowserHandle)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTMLSurface _ptr is null!");
        Platform.Win32.Native.SteamAPI_ISteamHTMLSurface_GoForward(this._ptr, unBrowserHandle);
      }

      public virtual void ISteamHTMLSurface_AddHeader(
        uint unBrowserHandle,
        string pchKey,
        string pchValue)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTMLSurface _ptr is null!");
        Platform.Win32.Native.SteamAPI_ISteamHTMLSurface_AddHeader(this._ptr, unBrowserHandle, pchKey, pchValue);
      }

      public virtual void ISteamHTMLSurface_ExecuteJavascript(
        uint unBrowserHandle,
        string pchScript)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTMLSurface _ptr is null!");
        Platform.Win32.Native.SteamAPI_ISteamHTMLSurface_ExecuteJavascript(this._ptr, unBrowserHandle, pchScript);
      }

      public virtual void ISteamHTMLSurface_MouseUp(
        uint unBrowserHandle,
        HTMLMouseButton eMouseButton)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTMLSurface _ptr is null!");
        Platform.Win32.Native.SteamAPI_ISteamHTMLSurface_MouseUp(this._ptr, unBrowserHandle, eMouseButton);
      }

      public virtual void ISteamHTMLSurface_MouseDown(
        uint unBrowserHandle,
        HTMLMouseButton eMouseButton)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTMLSurface _ptr is null!");
        Platform.Win32.Native.SteamAPI_ISteamHTMLSurface_MouseDown(this._ptr, unBrowserHandle, eMouseButton);
      }

      public virtual void ISteamHTMLSurface_MouseDoubleClick(
        uint unBrowserHandle,
        HTMLMouseButton eMouseButton)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTMLSurface _ptr is null!");
        Platform.Win32.Native.SteamAPI_ISteamHTMLSurface_MouseDoubleClick(this._ptr, unBrowserHandle, eMouseButton);
      }

      public virtual void ISteamHTMLSurface_MouseMove(uint unBrowserHandle, int x, int y)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTMLSurface _ptr is null!");
        Platform.Win32.Native.SteamAPI_ISteamHTMLSurface_MouseMove(this._ptr, unBrowserHandle, x, y);
      }

      public virtual void ISteamHTMLSurface_MouseWheel(uint unBrowserHandle, int nDelta)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTMLSurface _ptr is null!");
        Platform.Win32.Native.SteamAPI_ISteamHTMLSurface_MouseWheel(this._ptr, unBrowserHandle, nDelta);
      }

      public virtual void ISteamHTMLSurface_KeyDown(
        uint unBrowserHandle,
        uint nNativeKeyCode,
        HTMLKeyModifiers eHTMLKeyModifiers)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTMLSurface _ptr is null!");
        Platform.Win32.Native.SteamAPI_ISteamHTMLSurface_KeyDown(this._ptr, unBrowserHandle, nNativeKeyCode, eHTMLKeyModifiers);
      }

      public virtual void ISteamHTMLSurface_KeyUp(
        uint unBrowserHandle,
        uint nNativeKeyCode,
        HTMLKeyModifiers eHTMLKeyModifiers)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTMLSurface _ptr is null!");
        Platform.Win32.Native.SteamAPI_ISteamHTMLSurface_KeyUp(this._ptr, unBrowserHandle, nNativeKeyCode, eHTMLKeyModifiers);
      }

      public virtual void ISteamHTMLSurface_KeyChar(
        uint unBrowserHandle,
        uint cUnicodeChar,
        HTMLKeyModifiers eHTMLKeyModifiers)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTMLSurface _ptr is null!");
        Platform.Win32.Native.SteamAPI_ISteamHTMLSurface_KeyChar(this._ptr, unBrowserHandle, cUnicodeChar, eHTMLKeyModifiers);
      }

      public virtual void ISteamHTMLSurface_SetHorizontalScroll(
        uint unBrowserHandle,
        uint nAbsolutePixelScroll)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTMLSurface _ptr is null!");
        Platform.Win32.Native.SteamAPI_ISteamHTMLSurface_SetHorizontalScroll(this._ptr, unBrowserHandle, nAbsolutePixelScroll);
      }

      public virtual void ISteamHTMLSurface_SetVerticalScroll(
        uint unBrowserHandle,
        uint nAbsolutePixelScroll)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTMLSurface _ptr is null!");
        Platform.Win32.Native.SteamAPI_ISteamHTMLSurface_SetVerticalScroll(this._ptr, unBrowserHandle, nAbsolutePixelScroll);
      }

      public virtual void ISteamHTMLSurface_SetKeyFocus(uint unBrowserHandle, [MarshalAs(UnmanagedType.U1)] bool bHasKeyFocus)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTMLSurface _ptr is null!");
        Platform.Win32.Native.SteamAPI_ISteamHTMLSurface_SetKeyFocus(this._ptr, unBrowserHandle, bHasKeyFocus);
      }

      public virtual void ISteamHTMLSurface_ViewSource(uint unBrowserHandle)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTMLSurface _ptr is null!");
        Platform.Win32.Native.SteamAPI_ISteamHTMLSurface_ViewSource(this._ptr, unBrowserHandle);
      }

      public virtual void ISteamHTMLSurface_CopyToClipboard(uint unBrowserHandle)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTMLSurface _ptr is null!");
        Platform.Win32.Native.SteamAPI_ISteamHTMLSurface_CopyToClipboard(this._ptr, unBrowserHandle);
      }

      public virtual void ISteamHTMLSurface_PasteFromClipboard(uint unBrowserHandle)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTMLSurface _ptr is null!");
        Platform.Win32.Native.SteamAPI_ISteamHTMLSurface_PasteFromClipboard(this._ptr, unBrowserHandle);
      }

      public virtual void ISteamHTMLSurface_Find(
        uint unBrowserHandle,
        string pchSearchStr,
        [MarshalAs(UnmanagedType.U1)] bool bCurrentlyInFind,
        [MarshalAs(UnmanagedType.U1)] bool bReverse)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTMLSurface _ptr is null!");
        Platform.Win32.Native.SteamAPI_ISteamHTMLSurface_Find(this._ptr, unBrowserHandle, pchSearchStr, bCurrentlyInFind, bReverse);
      }

      public virtual void ISteamHTMLSurface_StopFind(uint unBrowserHandle)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTMLSurface _ptr is null!");
        Platform.Win32.Native.SteamAPI_ISteamHTMLSurface_StopFind(this._ptr, unBrowserHandle);
      }

      public virtual void ISteamHTMLSurface_GetLinkAtPosition(uint unBrowserHandle, int x, int y)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTMLSurface _ptr is null!");
        Platform.Win32.Native.SteamAPI_ISteamHTMLSurface_GetLinkAtPosition(this._ptr, unBrowserHandle, x, y);
      }

      public virtual void ISteamHTMLSurface_SetCookie(
        string pchHostname,
        string pchKey,
        string pchValue,
        string pchPath,
        uint nExpires,
        [MarshalAs(UnmanagedType.U1)] bool bSecure,
        [MarshalAs(UnmanagedType.U1)] bool bHTTPOnly)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTMLSurface _ptr is null!");
        Platform.Win32.Native.SteamAPI_ISteamHTMLSurface_SetCookie(this._ptr, pchHostname, pchKey, pchValue, pchPath, nExpires, bSecure, bHTTPOnly);
      }

      public virtual void ISteamHTMLSurface_SetPageScaleFactor(
        uint unBrowserHandle,
        float flZoom,
        int nPointX,
        int nPointY)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTMLSurface _ptr is null!");
        Platform.Win32.Native.SteamAPI_ISteamHTMLSurface_SetPageScaleFactor(this._ptr, unBrowserHandle, flZoom, nPointX, nPointY);
      }

      public virtual void ISteamHTMLSurface_SetBackgroundMode(
        uint unBrowserHandle,
        [MarshalAs(UnmanagedType.U1)] bool bBackgroundMode)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTMLSurface _ptr is null!");
        Platform.Win32.Native.SteamAPI_ISteamHTMLSurface_SetBackgroundMode(this._ptr, unBrowserHandle, bBackgroundMode);
      }

      public virtual void ISteamHTMLSurface_AllowStartRequest(uint unBrowserHandle, [MarshalAs(UnmanagedType.U1)] bool bAllowed)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTMLSurface _ptr is null!");
        Platform.Win32.Native.SteamAPI_ISteamHTMLSurface_AllowStartRequest(this._ptr, unBrowserHandle, bAllowed);
      }

      public virtual void ISteamHTMLSurface_JSDialogResponse(uint unBrowserHandle, [MarshalAs(UnmanagedType.U1)] bool bResult)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTMLSurface _ptr is null!");
        Platform.Win32.Native.SteamAPI_ISteamHTMLSurface_JSDialogResponse(this._ptr, unBrowserHandle, bResult);
      }

      public virtual Result ISteamInventory_GetResultStatus(int resultHandle)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamInventory_GetResultStatus(this._ptr, resultHandle) : throw new Exception("ISteamInventory _ptr is null!");
      }

      public virtual bool ISteamInventory_GetResultItems(
        int resultHandle,
        IntPtr pOutItemsArray,
        out uint punOutItemsArraySize)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamInventory _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamInventory_GetResultItems(this._ptr, resultHandle, pOutItemsArray, out punOutItemsArraySize);
      }

      public virtual bool ISteamInventory_GetResultItemProperty(
        int resultHandle,
        uint unItemIndex,
        string pchPropertyName,
        StringBuilder pchValueBuffer,
        out uint punValueBufferSizeOut)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamInventory _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamInventory_GetResultItemProperty(this._ptr, resultHandle, unItemIndex, pchPropertyName, pchValueBuffer, out punValueBufferSizeOut);
      }

      public virtual uint ISteamInventory_GetResultTimestamp(int resultHandle)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamInventory_GetResultTimestamp(this._ptr, resultHandle) : throw new Exception("ISteamInventory _ptr is null!");
      }

      public virtual bool ISteamInventory_CheckResultSteamID(
        int resultHandle,
        ulong steamIDExpected)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamInventory _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamInventory_CheckResultSteamID(this._ptr, resultHandle, steamIDExpected);
      }

      public virtual void ISteamInventory_DestroyResult(int resultHandle)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamInventory _ptr is null!");
        Platform.Win32.Native.SteamAPI_ISteamInventory_DestroyResult(this._ptr, resultHandle);
      }

      public virtual bool ISteamInventory_GetAllItems(ref int pResultHandle)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamInventory_GetAllItems(this._ptr, ref pResultHandle) : throw new Exception("ISteamInventory _ptr is null!");
      }

      public virtual bool ISteamInventory_GetItemsByID(
        ref int pResultHandle,
        ulong[] pInstanceIDs,
        uint unCountInstanceIDs)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamInventory _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamInventory_GetItemsByID(this._ptr, ref pResultHandle, pInstanceIDs, unCountInstanceIDs);
      }

      public virtual bool ISteamInventory_SerializeResult(
        int resultHandle,
        IntPtr pOutBuffer,
        out uint punOutBufferSize)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamInventory _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamInventory_SerializeResult(this._ptr, resultHandle, pOutBuffer, out punOutBufferSize);
      }

      public virtual bool ISteamInventory_DeserializeResult(
        ref int pOutResultHandle,
        IntPtr pBuffer,
        uint unBufferSize,
        [MarshalAs(UnmanagedType.U1)] bool bRESERVED_MUST_BE_FALSE)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamInventory _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamInventory_DeserializeResult(this._ptr, ref pOutResultHandle, pBuffer, unBufferSize, bRESERVED_MUST_BE_FALSE);
      }

      public virtual bool ISteamInventory_GenerateItems(
        ref int pResultHandle,
        int[] pArrayItemDefs,
        uint[] punArrayQuantity,
        uint unArrayLength)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamInventory _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamInventory_GenerateItems(this._ptr, ref pResultHandle, pArrayItemDefs, punArrayQuantity, unArrayLength);
      }

      public virtual bool ISteamInventory_GrantPromoItems(ref int pResultHandle)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamInventory_GrantPromoItems(this._ptr, ref pResultHandle) : throw new Exception("ISteamInventory _ptr is null!");
      }

      public virtual bool ISteamInventory_AddPromoItem(ref int pResultHandle, int itemDef)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamInventory _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamInventory_AddPromoItem(this._ptr, ref pResultHandle, itemDef);
      }

      public virtual bool ISteamInventory_AddPromoItems(
        ref int pResultHandle,
        int[] pArrayItemDefs,
        uint unArrayLength)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamInventory _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamInventory_AddPromoItems(this._ptr, ref pResultHandle, pArrayItemDefs, unArrayLength);
      }

      public virtual bool ISteamInventory_ConsumeItem(
        ref int pResultHandle,
        ulong itemConsume,
        uint unQuantity)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamInventory _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamInventory_ConsumeItem(this._ptr, ref pResultHandle, itemConsume, unQuantity);
      }

      public virtual bool ISteamInventory_ExchangeItems(
        ref int pResultHandle,
        int[] pArrayGenerate,
        uint[] punArrayGenerateQuantity,
        uint unArrayGenerateLength,
        ulong[] pArrayDestroy,
        uint[] punArrayDestroyQuantity,
        uint unArrayDestroyLength)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamInventory _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamInventory_ExchangeItems(this._ptr, ref pResultHandle, pArrayGenerate, punArrayGenerateQuantity, unArrayGenerateLength, pArrayDestroy, punArrayDestroyQuantity, unArrayDestroyLength);
      }

      public virtual bool ISteamInventory_TransferItemQuantity(
        ref int pResultHandle,
        ulong itemIdSource,
        uint unQuantity,
        ulong itemIdDest)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamInventory _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamInventory_TransferItemQuantity(this._ptr, ref pResultHandle, itemIdSource, unQuantity, itemIdDest);
      }

      public virtual void ISteamInventory_SendItemDropHeartbeat()
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamInventory _ptr is null!");
        Platform.Win32.Native.SteamAPI_ISteamInventory_SendItemDropHeartbeat(this._ptr);
      }

      public virtual bool ISteamInventory_TriggerItemDrop(
        ref int pResultHandle,
        int dropListDefinition)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamInventory _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamInventory_TriggerItemDrop(this._ptr, ref pResultHandle, dropListDefinition);
      }

      public virtual bool ISteamInventory_TradeItems(
        ref int pResultHandle,
        ulong steamIDTradePartner,
        ulong[] pArrayGive,
        uint[] pArrayGiveQuantity,
        uint nArrayGiveLength,
        ulong[] pArrayGet,
        uint[] pArrayGetQuantity,
        uint nArrayGetLength)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamInventory _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamInventory_TradeItems(this._ptr, ref pResultHandle, steamIDTradePartner, pArrayGive, pArrayGiveQuantity, nArrayGiveLength, pArrayGet, pArrayGetQuantity, nArrayGetLength);
      }

      public virtual bool ISteamInventory_LoadItemDefinitions()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamInventory_LoadItemDefinitions(this._ptr) : throw new Exception("ISteamInventory _ptr is null!");
      }

      public virtual bool ISteamInventory_GetItemDefinitionIDs(
        IntPtr pItemDefIDs,
        out uint punItemDefIDsArraySize)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamInventory_GetItemDefinitionIDs(this._ptr, pItemDefIDs, out punItemDefIDsArraySize) : throw new Exception("ISteamInventory _ptr is null!");
      }

      public virtual bool ISteamInventory_GetItemDefinitionProperty(
        int iDefinition,
        string pchPropertyName,
        StringBuilder pchValueBuffer,
        out uint punValueBufferSizeOut)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamInventory _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamInventory_GetItemDefinitionProperty(this._ptr, iDefinition, pchPropertyName, pchValueBuffer, out punValueBufferSizeOut);
      }

      public virtual SteamAPICall_t ISteamInventory_RequestEligiblePromoItemDefinitionsIDs(
        ulong steamID)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamInventory_RequestEligiblePromoItemDefinitionsIDs(this._ptr, steamID) : throw new Exception("ISteamInventory _ptr is null!");
      }

      public virtual bool ISteamInventory_GetEligiblePromoItemDefinitionIDs(
        ulong steamID,
        IntPtr pItemDefIDs,
        out uint punItemDefIDsArraySize)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamInventory _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamInventory_GetEligiblePromoItemDefinitionIDs(this._ptr, steamID, pItemDefIDs, out punItemDefIDsArraySize);
      }

      public virtual void ISteamVideo_GetVideoURL(uint unVideoAppID)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamVideo _ptr is null!");
        Platform.Win32.Native.SteamAPI_ISteamVideo_GetVideoURL(this._ptr, unVideoAppID);
      }

      public virtual bool ISteamVideo_IsBroadcasting(IntPtr pnNumViewers)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamVideo_IsBroadcasting(this._ptr, pnNumViewers) : throw new Exception("ISteamVideo _ptr is null!");
      }

      public virtual void ISteamVideo_GetOPFSettings(uint unVideoAppID)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamVideo _ptr is null!");
        Platform.Win32.Native.SteamAPI_ISteamVideo_GetOPFSettings(this._ptr, unVideoAppID);
      }

      public virtual bool ISteamVideo_GetOPFStringForApp(
        uint unVideoAppID,
        StringBuilder pchBuffer,
        out int pnBufferSize)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamVideo _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamVideo_GetOPFStringForApp(this._ptr, unVideoAppID, pchBuffer, out pnBufferSize);
      }

      public virtual bool ISteamGameServer_InitGameServer(
        uint unIP,
        ushort usGamePort,
        ushort usQueryPort,
        uint unFlags,
        uint nGameAppId,
        string pchVersionString)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServer _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamGameServer_InitGameServer(this._ptr, unIP, usGamePort, usQueryPort, unFlags, nGameAppId, pchVersionString);
      }

      public virtual void ISteamGameServer_SetProduct(string pszProduct)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServer _ptr is null!");
        Platform.Win32.Native.SteamAPI_ISteamGameServer_SetProduct(this._ptr, pszProduct);
      }

      public virtual void ISteamGameServer_SetGameDescription(string pszGameDescription)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServer _ptr is null!");
        Platform.Win32.Native.SteamAPI_ISteamGameServer_SetGameDescription(this._ptr, pszGameDescription);
      }

      public virtual void ISteamGameServer_SetModDir(string pszModDir)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServer _ptr is null!");
        Platform.Win32.Native.SteamAPI_ISteamGameServer_SetModDir(this._ptr, pszModDir);
      }

      public virtual void ISteamGameServer_SetDedicatedServer([MarshalAs(UnmanagedType.U1)] bool bDedicated)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServer _ptr is null!");
        Platform.Win32.Native.SteamAPI_ISteamGameServer_SetDedicatedServer(this._ptr, bDedicated);
      }

      public virtual void ISteamGameServer_LogOn(string pszToken)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServer _ptr is null!");
        Platform.Win32.Native.SteamAPI_ISteamGameServer_LogOn(this._ptr, pszToken);
      }

      public virtual void ISteamGameServer_LogOnAnonymous()
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServer _ptr is null!");
        Platform.Win32.Native.SteamAPI_ISteamGameServer_LogOnAnonymous(this._ptr);
      }

      public virtual void ISteamGameServer_LogOff()
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServer _ptr is null!");
        Platform.Win32.Native.SteamAPI_ISteamGameServer_LogOff(this._ptr);
      }

      public virtual bool ISteamGameServer_BLoggedOn()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamGameServer_BLoggedOn(this._ptr) : throw new Exception("ISteamGameServer _ptr is null!");
      }

      public virtual bool ISteamGameServer_BSecure()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamGameServer_BSecure(this._ptr) : throw new Exception("ISteamGameServer _ptr is null!");
      }

      public virtual CSteamID ISteamGameServer_GetSteamID()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamGameServer_GetSteamID(this._ptr) : throw new Exception("ISteamGameServer _ptr is null!");
      }

      public virtual bool ISteamGameServer_WasRestartRequested()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamGameServer_WasRestartRequested(this._ptr) : throw new Exception("ISteamGameServer _ptr is null!");
      }

      public virtual void ISteamGameServer_SetMaxPlayerCount(int cPlayersMax)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServer _ptr is null!");
        Platform.Win32.Native.SteamAPI_ISteamGameServer_SetMaxPlayerCount(this._ptr, cPlayersMax);
      }

      public virtual void ISteamGameServer_SetBotPlayerCount(int cBotplayers)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServer _ptr is null!");
        Platform.Win32.Native.SteamAPI_ISteamGameServer_SetBotPlayerCount(this._ptr, cBotplayers);
      }

      public virtual void ISteamGameServer_SetServerName(string pszServerName)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServer _ptr is null!");
        Platform.Win32.Native.SteamAPI_ISteamGameServer_SetServerName(this._ptr, pszServerName);
      }

      public virtual void ISteamGameServer_SetMapName(string pszMapName)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServer _ptr is null!");
        Platform.Win32.Native.SteamAPI_ISteamGameServer_SetMapName(this._ptr, pszMapName);
      }

      public virtual void ISteamGameServer_SetPasswordProtected([MarshalAs(UnmanagedType.U1)] bool bPasswordProtected)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServer _ptr is null!");
        Platform.Win32.Native.SteamAPI_ISteamGameServer_SetPasswordProtected(this._ptr, bPasswordProtected);
      }

      public virtual void ISteamGameServer_SetSpectatorPort(ushort unSpectatorPort)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServer _ptr is null!");
        Platform.Win32.Native.SteamAPI_ISteamGameServer_SetSpectatorPort(this._ptr, unSpectatorPort);
      }

      public virtual void ISteamGameServer_SetSpectatorServerName(string pszSpectatorServerName)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServer _ptr is null!");
        Platform.Win32.Native.SteamAPI_ISteamGameServer_SetSpectatorServerName(this._ptr, pszSpectatorServerName);
      }

      public virtual void ISteamGameServer_ClearAllKeyValues()
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServer _ptr is null!");
        Platform.Win32.Native.SteamAPI_ISteamGameServer_ClearAllKeyValues(this._ptr);
      }

      public virtual void ISteamGameServer_SetKeyValue(string pKey, string pValue)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServer _ptr is null!");
        Platform.Win32.Native.SteamAPI_ISteamGameServer_SetKeyValue(this._ptr, pKey, pValue);
      }

      public virtual void ISteamGameServer_SetGameTags(string pchGameTags)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServer _ptr is null!");
        Platform.Win32.Native.SteamAPI_ISteamGameServer_SetGameTags(this._ptr, pchGameTags);
      }

      public virtual void ISteamGameServer_SetGameData(string pchGameData)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServer _ptr is null!");
        Platform.Win32.Native.SteamAPI_ISteamGameServer_SetGameData(this._ptr, pchGameData);
      }

      public virtual void ISteamGameServer_SetRegion(string pszRegion)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServer _ptr is null!");
        Platform.Win32.Native.SteamAPI_ISteamGameServer_SetRegion(this._ptr, pszRegion);
      }

      public virtual bool ISteamGameServer_SendUserConnectAndAuthenticate(
        uint unIPClient,
        IntPtr pvAuthBlob,
        uint cubAuthBlobSize,
        out ulong pSteamIDUser)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServer _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamGameServer_SendUserConnectAndAuthenticate(this._ptr, unIPClient, pvAuthBlob, cubAuthBlobSize, out pSteamIDUser);
      }

      public virtual CSteamID ISteamGameServer_CreateUnauthenticatedUserConnection()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamGameServer_CreateUnauthenticatedUserConnection(this._ptr) : throw new Exception("ISteamGameServer _ptr is null!");
      }

      public virtual void ISteamGameServer_SendUserDisconnect(ulong steamIDUser)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServer _ptr is null!");
        Platform.Win32.Native.SteamAPI_ISteamGameServer_SendUserDisconnect(this._ptr, steamIDUser);
      }

      public virtual bool ISteamGameServer_BUpdateUserData(
        ulong steamIDUser,
        string pchPlayerName,
        uint uScore)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServer _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamGameServer_BUpdateUserData(this._ptr, steamIDUser, pchPlayerName, uScore);
      }

      public virtual HAuthTicket ISteamGameServer_GetAuthSessionTicket(
        IntPtr pTicket,
        int cbMaxTicket,
        out uint pcbTicket)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServer _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamGameServer_GetAuthSessionTicket(this._ptr, pTicket, cbMaxTicket, out pcbTicket);
      }

      public virtual BeginAuthSessionResult ISteamGameServer_BeginAuthSession(
        IntPtr pAuthTicket,
        int cbAuthTicket,
        ulong steamID)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServer _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamGameServer_BeginAuthSession(this._ptr, pAuthTicket, cbAuthTicket, steamID);
      }

      public virtual void ISteamGameServer_EndAuthSession(ulong steamID)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServer _ptr is null!");
        Platform.Win32.Native.SteamAPI_ISteamGameServer_EndAuthSession(this._ptr, steamID);
      }

      public virtual void ISteamGameServer_CancelAuthTicket(uint hAuthTicket)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServer _ptr is null!");
        Platform.Win32.Native.SteamAPI_ISteamGameServer_CancelAuthTicket(this._ptr, hAuthTicket);
      }

      public virtual UserHasLicenseForAppResult ISteamGameServer_UserHasLicenseForApp(
        ulong steamID,
        uint appID)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServer _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamGameServer_UserHasLicenseForApp(this._ptr, steamID, appID);
      }

      public virtual bool ISteamGameServer_RequestUserGroupStatus(
        ulong steamIDUser,
        ulong steamIDGroup)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServer _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamGameServer_RequestUserGroupStatus(this._ptr, steamIDUser, steamIDGroup);
      }

      public virtual void ISteamGameServer_GetGameplayStats()
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServer _ptr is null!");
        Platform.Win32.Native.SteamAPI_ISteamGameServer_GetGameplayStats(this._ptr);
      }

      public virtual SteamAPICall_t ISteamGameServer_GetServerReputation()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamGameServer_GetServerReputation(this._ptr) : throw new Exception("ISteamGameServer _ptr is null!");
      }

      public virtual uint ISteamGameServer_GetPublicIP()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamGameServer_GetPublicIP(this._ptr) : throw new Exception("ISteamGameServer _ptr is null!");
      }

      public virtual bool ISteamGameServer_HandleIncomingPacket(
        IntPtr pData,
        int cbData,
        uint srcIP,
        ushort srcPort)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServer _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamGameServer_HandleIncomingPacket(this._ptr, pData, cbData, srcIP, srcPort);
      }

      public virtual int ISteamGameServer_GetNextOutgoingPacket(
        IntPtr pOut,
        int cbMaxOut,
        out uint pNetAdr,
        out ushort pPort)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServer _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamGameServer_GetNextOutgoingPacket(this._ptr, pOut, cbMaxOut, out pNetAdr, out pPort);
      }

      public virtual void ISteamGameServer_EnableHeartbeats([MarshalAs(UnmanagedType.U1)] bool bActive)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServer _ptr is null!");
        Platform.Win32.Native.SteamAPI_ISteamGameServer_EnableHeartbeats(this._ptr, bActive);
      }

      public virtual void ISteamGameServer_SetHeartbeatInterval(int iHeartbeatInterval)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServer _ptr is null!");
        Platform.Win32.Native.SteamAPI_ISteamGameServer_SetHeartbeatInterval(this._ptr, iHeartbeatInterval);
      }

      public virtual void ISteamGameServer_ForceHeartbeat()
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServer _ptr is null!");
        Platform.Win32.Native.SteamAPI_ISteamGameServer_ForceHeartbeat(this._ptr);
      }

      public virtual SteamAPICall_t ISteamGameServer_AssociateWithClan(ulong steamIDClan)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamGameServer_AssociateWithClan(this._ptr, steamIDClan) : throw new Exception("ISteamGameServer _ptr is null!");
      }

      public virtual SteamAPICall_t ISteamGameServer_ComputeNewPlayerCompatibility(
        ulong steamIDNewPlayer)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamGameServer_ComputeNewPlayerCompatibility(this._ptr, steamIDNewPlayer) : throw new Exception("ISteamGameServer _ptr is null!");
      }

      public virtual SteamAPICall_t ISteamGameServerStats_RequestUserStats(ulong steamIDUser)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamGameServerStats_RequestUserStats(this._ptr, steamIDUser) : throw new Exception("ISteamGameServerStats _ptr is null!");
      }

      public virtual bool ISteamGameServerStats_GetUserStat(
        ulong steamIDUser,
        string pchName,
        out int pData)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServerStats _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamGameServerStats_GetUserStat(this._ptr, steamIDUser, pchName, out pData);
      }

      public virtual bool ISteamGameServerStats_GetUserStat0(
        ulong steamIDUser,
        string pchName,
        out float pData)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServerStats _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamGameServerStats_GetUserStat0(this._ptr, steamIDUser, pchName, out pData);
      }

      public virtual bool ISteamGameServerStats_GetUserAchievement(
        ulong steamIDUser,
        string pchName,
        [MarshalAs(UnmanagedType.U1)] ref bool pbAchieved)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServerStats _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamGameServerStats_GetUserAchievement(this._ptr, steamIDUser, pchName, ref pbAchieved);
      }

      public virtual bool ISteamGameServerStats_SetUserStat(
        ulong steamIDUser,
        string pchName,
        int nData)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServerStats _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamGameServerStats_SetUserStat(this._ptr, steamIDUser, pchName, nData);
      }

      public virtual bool ISteamGameServerStats_SetUserStat0(
        ulong steamIDUser,
        string pchName,
        float fData)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServerStats _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamGameServerStats_SetUserStat0(this._ptr, steamIDUser, pchName, fData);
      }

      public virtual bool ISteamGameServerStats_UpdateUserAvgRateStat(
        ulong steamIDUser,
        string pchName,
        float flCountThisSession,
        double dSessionLength)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServerStats _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamGameServerStats_UpdateUserAvgRateStat(this._ptr, steamIDUser, pchName, flCountThisSession, dSessionLength);
      }

      public virtual bool ISteamGameServerStats_SetUserAchievement(
        ulong steamIDUser,
        string pchName)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServerStats _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamGameServerStats_SetUserAchievement(this._ptr, steamIDUser, pchName);
      }

      public virtual bool ISteamGameServerStats_ClearUserAchievement(
        ulong steamIDUser,
        string pchName)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServerStats _ptr is null!");
        return Platform.Win32.Native.SteamAPI_ISteamGameServerStats_ClearUserAchievement(this._ptr, steamIDUser, pchName);
      }

      public virtual SteamAPICall_t ISteamGameServerStats_StoreUserStats(ulong steamIDUser)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win32.Native.SteamAPI_ISteamGameServerStats_StoreUserStats(this._ptr, steamIDUser) : throw new Exception("ISteamGameServerStats _ptr is null!");
      }

      public virtual bool SteamApi_SteamAPI_Init() => Platform.Win32.Native.SteamAPI_Init();

      public virtual void SteamApi_SteamAPI_RunCallbacks()
      {
        Platform.Win32.Native.SteamAPI_RunCallbacks();
      }

      public virtual void SteamApi_SteamGameServer_RunCallbacks()
      {
        Platform.Win32.Native.SteamGameServer_RunCallbacks();
      }

      public virtual void SteamApi_SteamAPI_RegisterCallback(IntPtr pCallback, int callback)
      {
        Platform.Win32.Native.SteamAPI_RegisterCallback(pCallback, callback);
      }

      public virtual void SteamApi_SteamAPI_UnregisterCallback(IntPtr pCallback)
      {
        Platform.Win32.Native.SteamAPI_UnregisterCallback(pCallback);
      }

      public virtual void SteamApi_SteamAPI_RegisterCallResult(IntPtr pCallback, ulong callback)
      {
        Platform.Win32.Native.SteamAPI_RegisterCallResult(pCallback, callback);
      }

      public virtual void SteamApi_SteamAPI_UnregisterCallResult(IntPtr pCallback, ulong callback)
      {
        Platform.Win32.Native.SteamAPI_UnregisterCallResult(pCallback, callback);
      }

      public virtual bool SteamApi_SteamInternal_GameServer_Init(
        uint unIP,
        ushort usPort,
        ushort usGamePort,
        ushort usQueryPort,
        int eServerMode,
        string pchVersionString)
      {
        return Platform.Win32.Native.SteamInternal_GameServer_Init(unIP, usPort, usGamePort, usQueryPort, eServerMode, pchVersionString);
      }

      public virtual void SteamApi_SteamAPI_Shutdown() => Platform.Win32.Native.SteamAPI_Shutdown();

      public virtual void SteamApi_SteamGameServer_Shutdown()
      {
        Platform.Win32.Native.SteamGameServer_Shutdown();
      }

      public virtual HSteamUser SteamApi_SteamAPI_GetHSteamUser()
      {
        return Platform.Win32.Native.SteamAPI_GetHSteamUser();
      }

      public virtual HSteamPipe SteamApi_SteamAPI_GetHSteamPipe()
      {
        return Platform.Win32.Native.SteamAPI_GetHSteamPipe();
      }

      public virtual HSteamUser SteamApi_SteamGameServer_GetHSteamUser()
      {
        return Platform.Win32.Native.SteamGameServer_GetHSteamUser();
      }

      public virtual HSteamPipe SteamApi_SteamGameServer_GetHSteamPipe()
      {
        return Platform.Win32.Native.SteamGameServer_GetHSteamPipe();
      }

      public virtual IntPtr SteamApi_SteamInternal_CreateInterface(string version)
      {
        return Platform.Win32.Native.SteamInternal_CreateInterface(version);
      }

      public virtual bool SteamApi_SteamAPI_RestartAppIfNecessary(uint unOwnAppID)
      {
        return Platform.Win32.Native.SteamAPI_RestartAppIfNecessary(unOwnAppID);
      }

      internal static class Native
      {
        [DllImport("steam_api.dll")]
        internal static extern HSteamPipe SteamAPI_ISteamClient_CreateSteamPipe(IntPtr ISteamClient);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamClient_BReleaseSteamPipe(
          IntPtr ISteamClient,
          int hSteamPipe);

        [DllImport("steam_api.dll")]
        internal static extern HSteamUser SteamAPI_ISteamClient_ConnectToGlobalUser(
          IntPtr ISteamClient,
          int hSteamPipe);

        [DllImport("steam_api.dll")]
        internal static extern HSteamUser SteamAPI_ISteamClient_CreateLocalUser(
          IntPtr ISteamClient,
          out int phSteamPipe,
          AccountType eAccountType);

        [DllImport("steam_api.dll")]
        internal static extern void SteamAPI_ISteamClient_ReleaseUser(
          IntPtr ISteamClient,
          int hSteamPipe,
          int hUser);

        [DllImport("steam_api.dll")]
        internal static extern IntPtr SteamAPI_ISteamClient_GetISteamUser(
          IntPtr ISteamClient,
          int hSteamUser,
          int hSteamPipe,
          string pchVersion);

        [DllImport("steam_api.dll")]
        internal static extern IntPtr SteamAPI_ISteamClient_GetISteamGameServer(
          IntPtr ISteamClient,
          int hSteamUser,
          int hSteamPipe,
          string pchVersion);

        [DllImport("steam_api.dll")]
        internal static extern void SteamAPI_ISteamClient_SetLocalIPBinding(
          IntPtr ISteamClient,
          uint unIP,
          ushort usPort);

        [DllImport("steam_api.dll")]
        internal static extern IntPtr SteamAPI_ISteamClient_GetISteamFriends(
          IntPtr ISteamClient,
          int hSteamUser,
          int hSteamPipe,
          string pchVersion);

        [DllImport("steam_api.dll")]
        internal static extern IntPtr SteamAPI_ISteamClient_GetISteamUtils(
          IntPtr ISteamClient,
          int hSteamPipe,
          string pchVersion);

        [DllImport("steam_api.dll")]
        internal static extern IntPtr SteamAPI_ISteamClient_GetISteamMatchmaking(
          IntPtr ISteamClient,
          int hSteamUser,
          int hSteamPipe,
          string pchVersion);

        [DllImport("steam_api.dll")]
        internal static extern IntPtr SteamAPI_ISteamClient_GetISteamMatchmakingServers(
          IntPtr ISteamClient,
          int hSteamUser,
          int hSteamPipe,
          string pchVersion);

        [DllImport("steam_api.dll")]
        internal static extern IntPtr SteamAPI_ISteamClient_GetISteamGenericInterface(
          IntPtr ISteamClient,
          int hSteamUser,
          int hSteamPipe,
          string pchVersion);

        [DllImport("steam_api.dll")]
        internal static extern IntPtr SteamAPI_ISteamClient_GetISteamUserStats(
          IntPtr ISteamClient,
          int hSteamUser,
          int hSteamPipe,
          string pchVersion);

        [DllImport("steam_api.dll")]
        internal static extern IntPtr SteamAPI_ISteamClient_GetISteamGameServerStats(
          IntPtr ISteamClient,
          int hSteamuser,
          int hSteamPipe,
          string pchVersion);

        [DllImport("steam_api.dll")]
        internal static extern IntPtr SteamAPI_ISteamClient_GetISteamApps(
          IntPtr ISteamClient,
          int hSteamUser,
          int hSteamPipe,
          string pchVersion);

        [DllImport("steam_api.dll")]
        internal static extern IntPtr SteamAPI_ISteamClient_GetISteamNetworking(
          IntPtr ISteamClient,
          int hSteamUser,
          int hSteamPipe,
          string pchVersion);

        [DllImport("steam_api.dll")]
        internal static extern IntPtr SteamAPI_ISteamClient_GetISteamRemoteStorage(
          IntPtr ISteamClient,
          int hSteamuser,
          int hSteamPipe,
          string pchVersion);

        [DllImport("steam_api.dll")]
        internal static extern IntPtr SteamAPI_ISteamClient_GetISteamScreenshots(
          IntPtr ISteamClient,
          int hSteamuser,
          int hSteamPipe,
          string pchVersion);

        [DllImport("steam_api.dll")]
        internal static extern uint SteamAPI_ISteamClient_GetIPCCallCount(IntPtr ISteamClient);

        [DllImport("steam_api.dll")]
        internal static extern void SteamAPI_ISteamClient_SetWarningMessageHook(
          IntPtr ISteamClient,
          IntPtr pFunction);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamClient_BShutdownIfAllPipesClosed(
          IntPtr ISteamClient);

        [DllImport("steam_api.dll")]
        internal static extern IntPtr SteamAPI_ISteamClient_GetISteamHTTP(
          IntPtr ISteamClient,
          int hSteamuser,
          int hSteamPipe,
          string pchVersion);

        [DllImport("steam_api.dll")]
        internal static extern IntPtr SteamAPI_ISteamClient_GetISteamUnifiedMessages(
          IntPtr ISteamClient,
          int hSteamuser,
          int hSteamPipe,
          string pchVersion);

        [DllImport("steam_api.dll")]
        internal static extern IntPtr SteamAPI_ISteamClient_GetISteamController(
          IntPtr ISteamClient,
          int hSteamUser,
          int hSteamPipe,
          string pchVersion);

        [DllImport("steam_api.dll")]
        internal static extern IntPtr SteamAPI_ISteamClient_GetISteamUGC(
          IntPtr ISteamClient,
          int hSteamUser,
          int hSteamPipe,
          string pchVersion);

        [DllImport("steam_api.dll")]
        internal static extern IntPtr SteamAPI_ISteamClient_GetISteamAppList(
          IntPtr ISteamClient,
          int hSteamUser,
          int hSteamPipe,
          string pchVersion);

        [DllImport("steam_api.dll")]
        internal static extern IntPtr SteamAPI_ISteamClient_GetISteamMusic(
          IntPtr ISteamClient,
          int hSteamuser,
          int hSteamPipe,
          string pchVersion);

        [DllImport("steam_api.dll")]
        internal static extern IntPtr SteamAPI_ISteamClient_GetISteamMusicRemote(
          IntPtr ISteamClient,
          int hSteamuser,
          int hSteamPipe,
          string pchVersion);

        [DllImport("steam_api.dll")]
        internal static extern IntPtr SteamAPI_ISteamClient_GetISteamHTMLSurface(
          IntPtr ISteamClient,
          int hSteamuser,
          int hSteamPipe,
          string pchVersion);

        [DllImport("steam_api.dll")]
        internal static extern IntPtr SteamAPI_ISteamClient_GetISteamInventory(
          IntPtr ISteamClient,
          int hSteamuser,
          int hSteamPipe,
          string pchVersion);

        [DllImport("steam_api.dll")]
        internal static extern IntPtr SteamAPI_ISteamClient_GetISteamVideo(
          IntPtr ISteamClient,
          int hSteamuser,
          int hSteamPipe,
          string pchVersion);

        [DllImport("steam_api.dll")]
        internal static extern HSteamUser SteamAPI_ISteamUser_GetHSteamUser(IntPtr ISteamUser);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamUser_BLoggedOn(IntPtr ISteamUser);

        [DllImport("steam_api.dll")]
        internal static extern CSteamID SteamAPI_ISteamUser_GetSteamID(IntPtr ISteamUser);

        [DllImport("steam_api.dll")]
        internal static extern int SteamAPI_ISteamUser_InitiateGameConnection(
          IntPtr ISteamUser,
          IntPtr pAuthBlob,
          int cbMaxAuthBlob,
          ulong steamIDGameServer,
          uint unIPServer,
          ushort usPortServer,
          [MarshalAs(UnmanagedType.U1)] bool bSecure);

        [DllImport("steam_api.dll")]
        internal static extern void SteamAPI_ISteamUser_TerminateGameConnection(
          IntPtr ISteamUser,
          uint unIPServer,
          ushort usPortServer);

        [DllImport("steam_api.dll")]
        internal static extern void SteamAPI_ISteamUser_TrackAppUsageEvent(
          IntPtr ISteamUser,
          ulong gameID,
          int eAppUsageEvent,
          string pchExtraInfo);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamUser_GetUserDataFolder(
          IntPtr ISteamUser,
          StringBuilder pchBuffer,
          int cubBuffer);

        [DllImport("steam_api.dll")]
        internal static extern void SteamAPI_ISteamUser_StartVoiceRecording(IntPtr ISteamUser);

        [DllImport("steam_api.dll")]
        internal static extern void SteamAPI_ISteamUser_StopVoiceRecording(IntPtr ISteamUser);

        [DllImport("steam_api.dll")]
        internal static extern VoiceResult SteamAPI_ISteamUser_GetAvailableVoice(
          IntPtr ISteamUser,
          out uint pcbCompressed,
          out uint pcbUncompressed_Deprecated,
          uint nUncompressedVoiceDesiredSampleRate_Deprecated);

        [DllImport("steam_api.dll")]
        internal static extern VoiceResult SteamAPI_ISteamUser_GetVoice(
          IntPtr ISteamUser,
          [MarshalAs(UnmanagedType.U1)] bool bWantCompressed,
          IntPtr pDestBuffer,
          uint cbDestBufferSize,
          out uint nBytesWritten,
          [MarshalAs(UnmanagedType.U1)] bool bWantUncompressed_Deprecated,
          IntPtr pUncompressedDestBuffer_Deprecated,
          uint cbUncompressedDestBufferSize_Deprecated,
          out uint nUncompressBytesWritten_Deprecated,
          uint nUncompressedVoiceDesiredSampleRate_Deprecated);

        [DllImport("steam_api.dll")]
        internal static extern VoiceResult SteamAPI_ISteamUser_DecompressVoice(
          IntPtr ISteamUser,
          IntPtr pCompressed,
          uint cbCompressed,
          IntPtr pDestBuffer,
          uint cbDestBufferSize,
          out uint nBytesWritten,
          uint nDesiredSampleRate);

        [DllImport("steam_api.dll")]
        internal static extern uint SteamAPI_ISteamUser_GetVoiceOptimalSampleRate(IntPtr ISteamUser);

        [DllImport("steam_api.dll")]
        internal static extern HAuthTicket SteamAPI_ISteamUser_GetAuthSessionTicket(
          IntPtr ISteamUser,
          IntPtr pTicket,
          int cbMaxTicket,
          out uint pcbTicket);

        [DllImport("steam_api.dll")]
        internal static extern BeginAuthSessionResult SteamAPI_ISteamUser_BeginAuthSession(
          IntPtr ISteamUser,
          IntPtr pAuthTicket,
          int cbAuthTicket,
          ulong steamID);

        [DllImport("steam_api.dll")]
        internal static extern void SteamAPI_ISteamUser_EndAuthSession(
          IntPtr ISteamUser,
          ulong steamID);

        [DllImport("steam_api.dll")]
        internal static extern void SteamAPI_ISteamUser_CancelAuthTicket(
          IntPtr ISteamUser,
          uint hAuthTicket);

        [DllImport("steam_api.dll")]
        internal static extern UserHasLicenseForAppResult SteamAPI_ISteamUser_UserHasLicenseForApp(
          IntPtr ISteamUser,
          ulong steamID,
          uint appID);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamUser_BIsBehindNAT(IntPtr ISteamUser);

        [DllImport("steam_api.dll")]
        internal static extern void SteamAPI_ISteamUser_AdvertiseGame(
          IntPtr ISteamUser,
          ulong steamIDGameServer,
          uint unIPServer,
          ushort usPortServer);

        [DllImport("steam_api.dll")]
        internal static extern SteamAPICall_t SteamAPI_ISteamUser_RequestEncryptedAppTicket(
          IntPtr ISteamUser,
          IntPtr pDataToInclude,
          int cbDataToInclude);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamUser_GetEncryptedAppTicket(
          IntPtr ISteamUser,
          IntPtr pTicket,
          int cbMaxTicket,
          out uint pcbTicket);

        [DllImport("steam_api.dll")]
        internal static extern int SteamAPI_ISteamUser_GetGameBadgeLevel(
          IntPtr ISteamUser,
          int nSeries,
          [MarshalAs(UnmanagedType.U1)] bool bFoil);

        [DllImport("steam_api.dll")]
        internal static extern int SteamAPI_ISteamUser_GetPlayerSteamLevel(IntPtr ISteamUser);

        [DllImport("steam_api.dll")]
        internal static extern SteamAPICall_t SteamAPI_ISteamUser_RequestStoreAuthURL(
          IntPtr ISteamUser,
          string pchRedirectURL);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamUser_BIsPhoneVerified(IntPtr ISteamUser);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamUser_BIsTwoFactorEnabled(IntPtr ISteamUser);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamUser_BIsPhoneIdentifying(IntPtr ISteamUser);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamUser_BIsPhoneRequiringVerification(
          IntPtr ISteamUser);

        [DllImport("steam_api.dll")]
        internal static extern IntPtr SteamAPI_ISteamFriends_GetPersonaName(IntPtr ISteamFriends);

        [DllImport("steam_api.dll")]
        internal static extern SteamAPICall_t SteamAPI_ISteamFriends_SetPersonaName(
          IntPtr ISteamFriends,
          string pchPersonaName);

        [DllImport("steam_api.dll")]
        internal static extern PersonaState SteamAPI_ISteamFriends_GetPersonaState(
          IntPtr ISteamFriends);

        [DllImport("steam_api.dll")]
        internal static extern int SteamAPI_ISteamFriends_GetFriendCount(
          IntPtr ISteamFriends,
          int iFriendFlags);

        [DllImport("steam_api.dll")]
        internal static extern CSteamID SteamAPI_ISteamFriends_GetFriendByIndex(
          IntPtr ISteamFriends,
          int iFriend,
          int iFriendFlags);

        [DllImport("steam_api.dll")]
        internal static extern FriendRelationship SteamAPI_ISteamFriends_GetFriendRelationship(
          IntPtr ISteamFriends,
          ulong steamIDFriend);

        [DllImport("steam_api.dll")]
        internal static extern PersonaState SteamAPI_ISteamFriends_GetFriendPersonaState(
          IntPtr ISteamFriends,
          ulong steamIDFriend);

        [DllImport("steam_api.dll")]
        internal static extern IntPtr SteamAPI_ISteamFriends_GetFriendPersonaName(
          IntPtr ISteamFriends,
          ulong steamIDFriend);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamFriends_GetFriendGamePlayed(
          IntPtr ISteamFriends,
          ulong steamIDFriend,
          ref FriendGameInfo_t pFriendGameInfo);

        [DllImport("steam_api.dll")]
        internal static extern IntPtr SteamAPI_ISteamFriends_GetFriendPersonaNameHistory(
          IntPtr ISteamFriends,
          ulong steamIDFriend,
          int iPersonaName);

        [DllImport("steam_api.dll")]
        internal static extern int SteamAPI_ISteamFriends_GetFriendSteamLevel(
          IntPtr ISteamFriends,
          ulong steamIDFriend);

        [DllImport("steam_api.dll")]
        internal static extern IntPtr SteamAPI_ISteamFriends_GetPlayerNickname(
          IntPtr ISteamFriends,
          ulong steamIDPlayer);

        [DllImport("steam_api.dll")]
        internal static extern int SteamAPI_ISteamFriends_GetFriendsGroupCount(IntPtr ISteamFriends);

        [DllImport("steam_api.dll")]
        internal static extern FriendsGroupID_t SteamAPI_ISteamFriends_GetFriendsGroupIDByIndex(
          IntPtr ISteamFriends,
          int iFG);

        [DllImport("steam_api.dll")]
        internal static extern IntPtr SteamAPI_ISteamFriends_GetFriendsGroupName(
          IntPtr ISteamFriends,
          short friendsGroupID);

        [DllImport("steam_api.dll")]
        internal static extern int SteamAPI_ISteamFriends_GetFriendsGroupMembersCount(
          IntPtr ISteamFriends,
          short friendsGroupID);

        [DllImport("steam_api.dll")]
        internal static extern void SteamAPI_ISteamFriends_GetFriendsGroupMembersList(
          IntPtr ISteamFriends,
          short friendsGroupID,
          IntPtr pOutSteamIDMembers,
          int nMembersCount);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamFriends_HasFriend(
          IntPtr ISteamFriends,
          ulong steamIDFriend,
          int iFriendFlags);

        [DllImport("steam_api.dll")]
        internal static extern int SteamAPI_ISteamFriends_GetClanCount(IntPtr ISteamFriends);

        [DllImport("steam_api.dll")]
        internal static extern CSteamID SteamAPI_ISteamFriends_GetClanByIndex(
          IntPtr ISteamFriends,
          int iClan);

        [DllImport("steam_api.dll")]
        internal static extern IntPtr SteamAPI_ISteamFriends_GetClanName(
          IntPtr ISteamFriends,
          ulong steamIDClan);

        [DllImport("steam_api.dll")]
        internal static extern IntPtr SteamAPI_ISteamFriends_GetClanTag(
          IntPtr ISteamFriends,
          ulong steamIDClan);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamFriends_GetClanActivityCounts(
          IntPtr ISteamFriends,
          ulong steamIDClan,
          out int pnOnline,
          out int pnInGame,
          out int pnChatting);

        [DllImport("steam_api.dll")]
        internal static extern SteamAPICall_t SteamAPI_ISteamFriends_DownloadClanActivityCounts(
          IntPtr ISteamFriends,
          IntPtr psteamIDClans,
          int cClansToRequest);

        [DllImport("steam_api.dll")]
        internal static extern int SteamAPI_ISteamFriends_GetFriendCountFromSource(
          IntPtr ISteamFriends,
          ulong steamIDSource);

        [DllImport("steam_api.dll")]
        internal static extern CSteamID SteamAPI_ISteamFriends_GetFriendFromSourceByIndex(
          IntPtr ISteamFriends,
          ulong steamIDSource,
          int iFriend);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamFriends_IsUserInSource(
          IntPtr ISteamFriends,
          ulong steamIDUser,
          ulong steamIDSource);

        [DllImport("steam_api.dll")]
        internal static extern void SteamAPI_ISteamFriends_SetInGameVoiceSpeaking(
          IntPtr ISteamFriends,
          ulong steamIDUser,
          [MarshalAs(UnmanagedType.U1)] bool bSpeaking);

        [DllImport("steam_api.dll")]
        internal static extern void SteamAPI_ISteamFriends_ActivateGameOverlay(
          IntPtr ISteamFriends,
          string pchDialog);

        [DllImport("steam_api.dll")]
        internal static extern void SteamAPI_ISteamFriends_ActivateGameOverlayToUser(
          IntPtr ISteamFriends,
          string pchDialog,
          ulong steamID);

        [DllImport("steam_api.dll")]
        internal static extern void SteamAPI_ISteamFriends_ActivateGameOverlayToWebPage(
          IntPtr ISteamFriends,
          string pchURL);

        [DllImport("steam_api.dll")]
        internal static extern void SteamAPI_ISteamFriends_ActivateGameOverlayToStore(
          IntPtr ISteamFriends,
          uint nAppID,
          OverlayToStoreFlag eFlag);

        [DllImport("steam_api.dll")]
        internal static extern void SteamAPI_ISteamFriends_SetPlayedWith(
          IntPtr ISteamFriends,
          ulong steamIDUserPlayedWith);

        [DllImport("steam_api.dll")]
        internal static extern void SteamAPI_ISteamFriends_ActivateGameOverlayInviteDialog(
          IntPtr ISteamFriends,
          ulong steamIDLobby);

        [DllImport("steam_api.dll")]
        internal static extern int SteamAPI_ISteamFriends_GetSmallFriendAvatar(
          IntPtr ISteamFriends,
          ulong steamIDFriend);

        [DllImport("steam_api.dll")]
        internal static extern int SteamAPI_ISteamFriends_GetMediumFriendAvatar(
          IntPtr ISteamFriends,
          ulong steamIDFriend);

        [DllImport("steam_api.dll")]
        internal static extern int SteamAPI_ISteamFriends_GetLargeFriendAvatar(
          IntPtr ISteamFriends,
          ulong steamIDFriend);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamFriends_RequestUserInformation(
          IntPtr ISteamFriends,
          ulong steamIDUser,
          [MarshalAs(UnmanagedType.U1)] bool bRequireNameOnly);

        [DllImport("steam_api.dll")]
        internal static extern SteamAPICall_t SteamAPI_ISteamFriends_RequestClanOfficerList(
          IntPtr ISteamFriends,
          ulong steamIDClan);

        [DllImport("steam_api.dll")]
        internal static extern CSteamID SteamAPI_ISteamFriends_GetClanOwner(
          IntPtr ISteamFriends,
          ulong steamIDClan);

        [DllImport("steam_api.dll")]
        internal static extern int SteamAPI_ISteamFriends_GetClanOfficerCount(
          IntPtr ISteamFriends,
          ulong steamIDClan);

        [DllImport("steam_api.dll")]
        internal static extern CSteamID SteamAPI_ISteamFriends_GetClanOfficerByIndex(
          IntPtr ISteamFriends,
          ulong steamIDClan,
          int iOfficer);

        [DllImport("steam_api.dll")]
        internal static extern uint SteamAPI_ISteamFriends_GetUserRestrictions(IntPtr ISteamFriends);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamFriends_SetRichPresence(
          IntPtr ISteamFriends,
          string pchKey,
          string pchValue);

        [DllImport("steam_api.dll")]
        internal static extern void SteamAPI_ISteamFriends_ClearRichPresence(IntPtr ISteamFriends);

        [DllImport("steam_api.dll")]
        internal static extern IntPtr SteamAPI_ISteamFriends_GetFriendRichPresence(
          IntPtr ISteamFriends,
          ulong steamIDFriend,
          string pchKey);

        [DllImport("steam_api.dll")]
        internal static extern int SteamAPI_ISteamFriends_GetFriendRichPresenceKeyCount(
          IntPtr ISteamFriends,
          ulong steamIDFriend);

        [DllImport("steam_api.dll")]
        internal static extern IntPtr SteamAPI_ISteamFriends_GetFriendRichPresenceKeyByIndex(
          IntPtr ISteamFriends,
          ulong steamIDFriend,
          int iKey);

        [DllImport("steam_api.dll")]
        internal static extern void SteamAPI_ISteamFriends_RequestFriendRichPresence(
          IntPtr ISteamFriends,
          ulong steamIDFriend);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamFriends_InviteUserToGame(
          IntPtr ISteamFriends,
          ulong steamIDFriend,
          string pchConnectString);

        [DllImport("steam_api.dll")]
        internal static extern int SteamAPI_ISteamFriends_GetCoplayFriendCount(IntPtr ISteamFriends);

        [DllImport("steam_api.dll")]
        internal static extern CSteamID SteamAPI_ISteamFriends_GetCoplayFriend(
          IntPtr ISteamFriends,
          int iCoplayFriend);

        [DllImport("steam_api.dll")]
        internal static extern int SteamAPI_ISteamFriends_GetFriendCoplayTime(
          IntPtr ISteamFriends,
          ulong steamIDFriend);

        [DllImport("steam_api.dll")]
        internal static extern AppId_t SteamAPI_ISteamFriends_GetFriendCoplayGame(
          IntPtr ISteamFriends,
          ulong steamIDFriend);

        [DllImport("steam_api.dll")]
        internal static extern SteamAPICall_t SteamAPI_ISteamFriends_JoinClanChatRoom(
          IntPtr ISteamFriends,
          ulong steamIDClan);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamFriends_LeaveClanChatRoom(
          IntPtr ISteamFriends,
          ulong steamIDClan);

        [DllImport("steam_api.dll")]
        internal static extern int SteamAPI_ISteamFriends_GetClanChatMemberCount(
          IntPtr ISteamFriends,
          ulong steamIDClan);

        [DllImport("steam_api.dll")]
        internal static extern CSteamID SteamAPI_ISteamFriends_GetChatMemberByIndex(
          IntPtr ISteamFriends,
          ulong steamIDClan,
          int iUser);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamFriends_SendClanChatMessage(
          IntPtr ISteamFriends,
          ulong steamIDClanChat,
          string pchText);

        [DllImport("steam_api.dll")]
        internal static extern int SteamAPI_ISteamFriends_GetClanChatMessage(
          IntPtr ISteamFriends,
          ulong steamIDClanChat,
          int iMessage,
          IntPtr prgchText,
          int cchTextMax,
          out ChatEntryType peChatEntryType,
          out ulong psteamidChatter);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamFriends_IsClanChatAdmin(
          IntPtr ISteamFriends,
          ulong steamIDClanChat,
          ulong steamIDUser);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamFriends_IsClanChatWindowOpenInSteam(
          IntPtr ISteamFriends,
          ulong steamIDClanChat);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamFriends_OpenClanChatWindowInSteam(
          IntPtr ISteamFriends,
          ulong steamIDClanChat);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamFriends_CloseClanChatWindowInSteam(
          IntPtr ISteamFriends,
          ulong steamIDClanChat);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamFriends_SetListenForFriendsMessages(
          IntPtr ISteamFriends,
          [MarshalAs(UnmanagedType.U1)] bool bInterceptEnabled);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamFriends_ReplyToFriendMessage(
          IntPtr ISteamFriends,
          ulong steamIDFriend,
          string pchMsgToSend);

        [DllImport("steam_api.dll")]
        internal static extern int SteamAPI_ISteamFriends_GetFriendMessage(
          IntPtr ISteamFriends,
          ulong steamIDFriend,
          int iMessageID,
          IntPtr pvData,
          int cubData,
          out ChatEntryType peChatEntryType);

        [DllImport("steam_api.dll")]
        internal static extern SteamAPICall_t SteamAPI_ISteamFriends_GetFollowerCount(
          IntPtr ISteamFriends,
          ulong steamID);

        [DllImport("steam_api.dll")]
        internal static extern SteamAPICall_t SteamAPI_ISteamFriends_IsFollowing(
          IntPtr ISteamFriends,
          ulong steamID);

        [DllImport("steam_api.dll")]
        internal static extern SteamAPICall_t SteamAPI_ISteamFriends_EnumerateFollowingList(
          IntPtr ISteamFriends,
          uint unStartIndex);

        [DllImport("steam_api.dll")]
        internal static extern uint SteamAPI_ISteamUtils_GetSecondsSinceAppActive(IntPtr ISteamUtils);

        [DllImport("steam_api.dll")]
        internal static extern uint SteamAPI_ISteamUtils_GetSecondsSinceComputerActive(
          IntPtr ISteamUtils);

        [DllImport("steam_api.dll")]
        internal static extern Universe SteamAPI_ISteamUtils_GetConnectedUniverse(IntPtr ISteamUtils);

        [DllImport("steam_api.dll")]
        internal static extern uint SteamAPI_ISteamUtils_GetServerRealTime(IntPtr ISteamUtils);

        [DllImport("steam_api.dll")]
        internal static extern IntPtr SteamAPI_ISteamUtils_GetIPCountry(IntPtr ISteamUtils);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamUtils_GetImageSize(
          IntPtr ISteamUtils,
          int iImage,
          out uint pnWidth,
          out uint pnHeight);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamUtils_GetImageRGBA(
          IntPtr ISteamUtils,
          int iImage,
          IntPtr pubDest,
          int nDestBufferSize);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamUtils_GetCSERIPPort(
          IntPtr ISteamUtils,
          out uint unIP,
          out ushort usPort);

        [DllImport("steam_api.dll")]
        internal static extern byte SteamAPI_ISteamUtils_GetCurrentBatteryPower(IntPtr ISteamUtils);

        [DllImport("steam_api.dll")]
        internal static extern uint SteamAPI_ISteamUtils_GetAppID(IntPtr ISteamUtils);

        [DllImport("steam_api.dll")]
        internal static extern void SteamAPI_ISteamUtils_SetOverlayNotificationPosition(
          IntPtr ISteamUtils,
          NotificationPosition eNotificationPosition);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamUtils_IsAPICallCompleted(
          IntPtr ISteamUtils,
          ulong hSteamAPICall,
          [MarshalAs(UnmanagedType.U1)] ref bool pbFailed);

        [DllImport("steam_api.dll")]
        internal static extern SteamAPICallFailure SteamAPI_ISteamUtils_GetAPICallFailureReason(
          IntPtr ISteamUtils,
          ulong hSteamAPICall);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamUtils_GetAPICallResult(
          IntPtr ISteamUtils,
          ulong hSteamAPICall,
          IntPtr pCallback,
          int cubCallback,
          int iCallbackExpected,
          [MarshalAs(UnmanagedType.U1)] ref bool pbFailed);

        [DllImport("steam_api.dll")]
        internal static extern uint SteamAPI_ISteamUtils_GetIPCCallCount(IntPtr ISteamUtils);

        [DllImport("steam_api.dll")]
        internal static extern void SteamAPI_ISteamUtils_SetWarningMessageHook(
          IntPtr ISteamUtils,
          IntPtr pFunction);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamUtils_IsOverlayEnabled(IntPtr ISteamUtils);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamUtils_BOverlayNeedsPresent(IntPtr ISteamUtils);

        [DllImport("steam_api.dll")]
        internal static extern SteamAPICall_t SteamAPI_ISteamUtils_CheckFileSignature(
          IntPtr ISteamUtils,
          string szFileName);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamUtils_ShowGamepadTextInput(
          IntPtr ISteamUtils,
          GamepadTextInputMode eInputMode,
          GamepadTextInputLineMode eLineInputMode,
          string pchDescription,
          uint unCharMax,
          string pchExistingText);

        [DllImport("steam_api.dll")]
        internal static extern uint SteamAPI_ISteamUtils_GetEnteredGamepadTextLength(
          IntPtr ISteamUtils);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamUtils_GetEnteredGamepadTextInput(
          IntPtr ISteamUtils,
          StringBuilder pchText,
          uint cchText);

        [DllImport("steam_api.dll")]
        internal static extern IntPtr SteamAPI_ISteamUtils_GetSteamUILanguage(IntPtr ISteamUtils);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamUtils_IsSteamRunningInVR(IntPtr ISteamUtils);

        [DllImport("steam_api.dll")]
        internal static extern void SteamAPI_ISteamUtils_SetOverlayNotificationInset(
          IntPtr ISteamUtils,
          int nHorizontalInset,
          int nVerticalInset);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamUtils_IsSteamInBigPictureMode(IntPtr ISteamUtils);

        [DllImport("steam_api.dll")]
        internal static extern void SteamAPI_ISteamUtils_StartVRDashboard(IntPtr ISteamUtils);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamUtils_IsVRHeadsetStreamingEnabled(
          IntPtr ISteamUtils);

        [DllImport("steam_api.dll")]
        internal static extern void SteamAPI_ISteamUtils_SetVRHeadsetStreamingEnabled(
          IntPtr ISteamUtils,
          [MarshalAs(UnmanagedType.U1)] bool bEnabled);

        [DllImport("steam_api.dll")]
        internal static extern int SteamAPI_ISteamMatchmaking_GetFavoriteGameCount(
          IntPtr ISteamMatchmaking);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamMatchmaking_GetFavoriteGame(
          IntPtr ISteamMatchmaking,
          int iGame,
          ref uint pnAppID,
          out uint pnIP,
          out ushort pnConnPort,
          out ushort pnQueryPort,
          out uint punFlags,
          out uint pRTime32LastPlayedOnServer);

        [DllImport("steam_api.dll")]
        internal static extern int SteamAPI_ISteamMatchmaking_AddFavoriteGame(
          IntPtr ISteamMatchmaking,
          uint nAppID,
          uint nIP,
          ushort nConnPort,
          ushort nQueryPort,
          uint unFlags,
          uint rTime32LastPlayedOnServer);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamMatchmaking_RemoveFavoriteGame(
          IntPtr ISteamMatchmaking,
          uint nAppID,
          uint nIP,
          ushort nConnPort,
          ushort nQueryPort,
          uint unFlags);

        [DllImport("steam_api.dll")]
        internal static extern SteamAPICall_t SteamAPI_ISteamMatchmaking_RequestLobbyList(
          IntPtr ISteamMatchmaking);

        [DllImport("steam_api.dll")]
        internal static extern void SteamAPI_ISteamMatchmaking_AddRequestLobbyListStringFilter(
          IntPtr ISteamMatchmaking,
          string pchKeyToMatch,
          string pchValueToMatch,
          LobbyComparison eComparisonType);

        [DllImport("steam_api.dll")]
        internal static extern void SteamAPI_ISteamMatchmaking_AddRequestLobbyListNumericalFilter(
          IntPtr ISteamMatchmaking,
          string pchKeyToMatch,
          int nValueToMatch,
          LobbyComparison eComparisonType);

        [DllImport("steam_api.dll")]
        internal static extern void SteamAPI_ISteamMatchmaking_AddRequestLobbyListNearValueFilter(
          IntPtr ISteamMatchmaking,
          string pchKeyToMatch,
          int nValueToBeCloseTo);

        [DllImport("steam_api.dll")]
        internal static extern void SteamAPI_ISteamMatchmaking_AddRequestLobbyListFilterSlotsAvailable(
          IntPtr ISteamMatchmaking,
          int nSlotsAvailable);

        [DllImport("steam_api.dll")]
        internal static extern void SteamAPI_ISteamMatchmaking_AddRequestLobbyListDistanceFilter(
          IntPtr ISteamMatchmaking,
          LobbyDistanceFilter eLobbyDistanceFilter);

        [DllImport("steam_api.dll")]
        internal static extern void SteamAPI_ISteamMatchmaking_AddRequestLobbyListResultCountFilter(
          IntPtr ISteamMatchmaking,
          int cMaxResults);

        [DllImport("steam_api.dll")]
        internal static extern void SteamAPI_ISteamMatchmaking_AddRequestLobbyListCompatibleMembersFilter(
          IntPtr ISteamMatchmaking,
          ulong steamIDLobby);

        [DllImport("steam_api.dll")]
        internal static extern CSteamID SteamAPI_ISteamMatchmaking_GetLobbyByIndex(
          IntPtr ISteamMatchmaking,
          int iLobby);

        [DllImport("steam_api.dll")]
        internal static extern SteamAPICall_t SteamAPI_ISteamMatchmaking_CreateLobby(
          IntPtr ISteamMatchmaking,
          LobbyType eLobbyType,
          int cMaxMembers);

        [DllImport("steam_api.dll")]
        internal static extern SteamAPICall_t SteamAPI_ISteamMatchmaking_JoinLobby(
          IntPtr ISteamMatchmaking,
          ulong steamIDLobby);

        [DllImport("steam_api.dll")]
        internal static extern void SteamAPI_ISteamMatchmaking_LeaveLobby(
          IntPtr ISteamMatchmaking,
          ulong steamIDLobby);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamMatchmaking_InviteUserToLobby(
          IntPtr ISteamMatchmaking,
          ulong steamIDLobby,
          ulong steamIDInvitee);

        [DllImport("steam_api.dll")]
        internal static extern int SteamAPI_ISteamMatchmaking_GetNumLobbyMembers(
          IntPtr ISteamMatchmaking,
          ulong steamIDLobby);

        [DllImport("steam_api.dll")]
        internal static extern CSteamID SteamAPI_ISteamMatchmaking_GetLobbyMemberByIndex(
          IntPtr ISteamMatchmaking,
          ulong steamIDLobby,
          int iMember);

        [DllImport("steam_api.dll")]
        internal static extern IntPtr SteamAPI_ISteamMatchmaking_GetLobbyData(
          IntPtr ISteamMatchmaking,
          ulong steamIDLobby,
          string pchKey);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamMatchmaking_SetLobbyData(
          IntPtr ISteamMatchmaking,
          ulong steamIDLobby,
          string pchKey,
          string pchValue);

        [DllImport("steam_api.dll")]
        internal static extern int SteamAPI_ISteamMatchmaking_GetLobbyDataCount(
          IntPtr ISteamMatchmaking,
          ulong steamIDLobby);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamMatchmaking_GetLobbyDataByIndex(
          IntPtr ISteamMatchmaking,
          ulong steamIDLobby,
          int iLobbyData,
          StringBuilder pchKey,
          int cchKeyBufferSize,
          StringBuilder pchValue,
          int cchValueBufferSize);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamMatchmaking_DeleteLobbyData(
          IntPtr ISteamMatchmaking,
          ulong steamIDLobby,
          string pchKey);

        [DllImport("steam_api.dll")]
        internal static extern IntPtr SteamAPI_ISteamMatchmaking_GetLobbyMemberData(
          IntPtr ISteamMatchmaking,
          ulong steamIDLobby,
          ulong steamIDUser,
          string pchKey);

        [DllImport("steam_api.dll")]
        internal static extern void SteamAPI_ISteamMatchmaking_SetLobbyMemberData(
          IntPtr ISteamMatchmaking,
          ulong steamIDLobby,
          string pchKey,
          string pchValue);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamMatchmaking_SendLobbyChatMsg(
          IntPtr ISteamMatchmaking,
          ulong steamIDLobby,
          IntPtr pvMsgBody,
          int cubMsgBody);

        [DllImport("steam_api.dll")]
        internal static extern int SteamAPI_ISteamMatchmaking_GetLobbyChatEntry(
          IntPtr ISteamMatchmaking,
          ulong steamIDLobby,
          int iChatID,
          out ulong pSteamIDUser,
          IntPtr pvData,
          int cubData,
          out ChatEntryType peChatEntryType);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamMatchmaking_RequestLobbyData(
          IntPtr ISteamMatchmaking,
          ulong steamIDLobby);

        [DllImport("steam_api.dll")]
        internal static extern void SteamAPI_ISteamMatchmaking_SetLobbyGameServer(
          IntPtr ISteamMatchmaking,
          ulong steamIDLobby,
          uint unGameServerIP,
          ushort unGameServerPort,
          ulong steamIDGameServer);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamMatchmaking_GetLobbyGameServer(
          IntPtr ISteamMatchmaking,
          ulong steamIDLobby,
          out uint punGameServerIP,
          out ushort punGameServerPort,
          out ulong psteamIDGameServer);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamMatchmaking_SetLobbyMemberLimit(
          IntPtr ISteamMatchmaking,
          ulong steamIDLobby,
          int cMaxMembers);

        [DllImport("steam_api.dll")]
        internal static extern int SteamAPI_ISteamMatchmaking_GetLobbyMemberLimit(
          IntPtr ISteamMatchmaking,
          ulong steamIDLobby);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamMatchmaking_SetLobbyType(
          IntPtr ISteamMatchmaking,
          ulong steamIDLobby,
          LobbyType eLobbyType);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamMatchmaking_SetLobbyJoinable(
          IntPtr ISteamMatchmaking,
          ulong steamIDLobby,
          [MarshalAs(UnmanagedType.U1)] bool bLobbyJoinable);

        [DllImport("steam_api.dll")]
        internal static extern CSteamID SteamAPI_ISteamMatchmaking_GetLobbyOwner(
          IntPtr ISteamMatchmaking,
          ulong steamIDLobby);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamMatchmaking_SetLobbyOwner(
          IntPtr ISteamMatchmaking,
          ulong steamIDLobby,
          ulong steamIDNewOwner);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamMatchmaking_SetLinkedLobby(
          IntPtr ISteamMatchmaking,
          ulong steamIDLobby,
          ulong steamIDLobbyDependent);

        [DllImport("steam_api.dll")]
        internal static extern HServerListRequest SteamAPI_ISteamMatchmakingServers_RequestInternetServerList(
          IntPtr ISteamMatchmakingServers,
          uint iApp,
          IntPtr ppchFilters,
          uint nFilters,
          IntPtr pRequestServersResponse);

        [DllImport("steam_api.dll")]
        internal static extern HServerListRequest SteamAPI_ISteamMatchmakingServers_RequestLANServerList(
          IntPtr ISteamMatchmakingServers,
          uint iApp,
          IntPtr pRequestServersResponse);

        [DllImport("steam_api.dll")]
        internal static extern HServerListRequest SteamAPI_ISteamMatchmakingServers_RequestFriendsServerList(
          IntPtr ISteamMatchmakingServers,
          uint iApp,
          IntPtr ppchFilters,
          uint nFilters,
          IntPtr pRequestServersResponse);

        [DllImport("steam_api.dll")]
        internal static extern HServerListRequest SteamAPI_ISteamMatchmakingServers_RequestFavoritesServerList(
          IntPtr ISteamMatchmakingServers,
          uint iApp,
          IntPtr ppchFilters,
          uint nFilters,
          IntPtr pRequestServersResponse);

        [DllImport("steam_api.dll")]
        internal static extern HServerListRequest SteamAPI_ISteamMatchmakingServers_RequestHistoryServerList(
          IntPtr ISteamMatchmakingServers,
          uint iApp,
          IntPtr ppchFilters,
          uint nFilters,
          IntPtr pRequestServersResponse);

        [DllImport("steam_api.dll")]
        internal static extern HServerListRequest SteamAPI_ISteamMatchmakingServers_RequestSpectatorServerList(
          IntPtr ISteamMatchmakingServers,
          uint iApp,
          IntPtr ppchFilters,
          uint nFilters,
          IntPtr pRequestServersResponse);

        [DllImport("steam_api.dll")]
        internal static extern void SteamAPI_ISteamMatchmakingServers_ReleaseRequest(
          IntPtr ISteamMatchmakingServers,
          IntPtr hServerListRequest);

        [DllImport("steam_api.dll")]
        internal static extern IntPtr SteamAPI_ISteamMatchmakingServers_GetServerDetails(
          IntPtr ISteamMatchmakingServers,
          IntPtr hRequest,
          int iServer);

        [DllImport("steam_api.dll")]
        internal static extern void SteamAPI_ISteamMatchmakingServers_CancelQuery(
          IntPtr ISteamMatchmakingServers,
          IntPtr hRequest);

        [DllImport("steam_api.dll")]
        internal static extern void SteamAPI_ISteamMatchmakingServers_RefreshQuery(
          IntPtr ISteamMatchmakingServers,
          IntPtr hRequest);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamMatchmakingServers_IsRefreshing(
          IntPtr ISteamMatchmakingServers,
          IntPtr hRequest);

        [DllImport("steam_api.dll")]
        internal static extern int SteamAPI_ISteamMatchmakingServers_GetServerCount(
          IntPtr ISteamMatchmakingServers,
          IntPtr hRequest);

        [DllImport("steam_api.dll")]
        internal static extern void SteamAPI_ISteamMatchmakingServers_RefreshServer(
          IntPtr ISteamMatchmakingServers,
          IntPtr hRequest,
          int iServer);

        [DllImport("steam_api.dll")]
        internal static extern HServerQuery SteamAPI_ISteamMatchmakingServers_PingServer(
          IntPtr ISteamMatchmakingServers,
          uint unIP,
          ushort usPort,
          IntPtr pRequestServersResponse);

        [DllImport("steam_api.dll")]
        internal static extern HServerQuery SteamAPI_ISteamMatchmakingServers_PlayerDetails(
          IntPtr ISteamMatchmakingServers,
          uint unIP,
          ushort usPort,
          IntPtr pRequestServersResponse);

        [DllImport("steam_api.dll")]
        internal static extern HServerQuery SteamAPI_ISteamMatchmakingServers_ServerRules(
          IntPtr ISteamMatchmakingServers,
          uint unIP,
          ushort usPort,
          IntPtr pRequestServersResponse);

        [DllImport("steam_api.dll")]
        internal static extern void SteamAPI_ISteamMatchmakingServers_CancelServerQuery(
          IntPtr ISteamMatchmakingServers,
          int hServerQuery);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamRemoteStorage_FileWrite(
          IntPtr ISteamRemoteStorage,
          string pchFile,
          IntPtr pvData,
          int cubData);

        [DllImport("steam_api.dll")]
        internal static extern int SteamAPI_ISteamRemoteStorage_FileRead(
          IntPtr ISteamRemoteStorage,
          string pchFile,
          IntPtr pvData,
          int cubDataToRead);

        [DllImport("steam_api.dll")]
        internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_FileWriteAsync(
          IntPtr ISteamRemoteStorage,
          string pchFile,
          IntPtr pvData,
          uint cubData);

        [DllImport("steam_api.dll")]
        internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_FileReadAsync(
          IntPtr ISteamRemoteStorage,
          string pchFile,
          uint nOffset,
          uint cubToRead);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamRemoteStorage_FileReadAsyncComplete(
          IntPtr ISteamRemoteStorage,
          ulong hReadCall,
          IntPtr pvBuffer,
          uint cubToRead);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamRemoteStorage_FileForget(
          IntPtr ISteamRemoteStorage,
          string pchFile);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamRemoteStorage_FileDelete(
          IntPtr ISteamRemoteStorage,
          string pchFile);

        [DllImport("steam_api.dll")]
        internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_FileShare(
          IntPtr ISteamRemoteStorage,
          string pchFile);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamRemoteStorage_SetSyncPlatforms(
          IntPtr ISteamRemoteStorage,
          string pchFile,
          RemoteStoragePlatform eRemoteStoragePlatform);

        [DllImport("steam_api.dll")]
        internal static extern UGCFileWriteStreamHandle_t SteamAPI_ISteamRemoteStorage_FileWriteStreamOpen(
          IntPtr ISteamRemoteStorage,
          string pchFile);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamRemoteStorage_FileWriteStreamWriteChunk(
          IntPtr ISteamRemoteStorage,
          ulong writeHandle,
          IntPtr pvData,
          int cubData);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamRemoteStorage_FileWriteStreamClose(
          IntPtr ISteamRemoteStorage,
          ulong writeHandle);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamRemoteStorage_FileWriteStreamCancel(
          IntPtr ISteamRemoteStorage,
          ulong writeHandle);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamRemoteStorage_FileExists(
          IntPtr ISteamRemoteStorage,
          string pchFile);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamRemoteStorage_FilePersisted(
          IntPtr ISteamRemoteStorage,
          string pchFile);

        [DllImport("steam_api.dll")]
        internal static extern int SteamAPI_ISteamRemoteStorage_GetFileSize(
          IntPtr ISteamRemoteStorage,
          string pchFile);

        [DllImport("steam_api.dll")]
        internal static extern long SteamAPI_ISteamRemoteStorage_GetFileTimestamp(
          IntPtr ISteamRemoteStorage,
          string pchFile);

        [DllImport("steam_api.dll")]
        internal static extern RemoteStoragePlatform SteamAPI_ISteamRemoteStorage_GetSyncPlatforms(
          IntPtr ISteamRemoteStorage,
          string pchFile);

        [DllImport("steam_api.dll")]
        internal static extern int SteamAPI_ISteamRemoteStorage_GetFileCount(
          IntPtr ISteamRemoteStorage);

        [DllImport("steam_api.dll")]
        internal static extern IntPtr SteamAPI_ISteamRemoteStorage_GetFileNameAndSize(
          IntPtr ISteamRemoteStorage,
          int iFile,
          out int pnFileSizeInBytes);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamRemoteStorage_GetQuota(
          IntPtr ISteamRemoteStorage,
          out ulong pnTotalBytes,
          out ulong puAvailableBytes);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamRemoteStorage_IsCloudEnabledForAccount(
          IntPtr ISteamRemoteStorage);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamRemoteStorage_IsCloudEnabledForApp(
          IntPtr ISteamRemoteStorage);

        [DllImport("steam_api.dll")]
        internal static extern void SteamAPI_ISteamRemoteStorage_SetCloudEnabledForApp(
          IntPtr ISteamRemoteStorage,
          [MarshalAs(UnmanagedType.U1)] bool bEnabled);

        [DllImport("steam_api.dll")]
        internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_UGCDownload(
          IntPtr ISteamRemoteStorage,
          ulong hContent,
          uint unPriority);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamRemoteStorage_GetUGCDownloadProgress(
          IntPtr ISteamRemoteStorage,
          ulong hContent,
          out int pnBytesDownloaded,
          out int pnBytesExpected);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamRemoteStorage_GetUGCDetails(
          IntPtr ISteamRemoteStorage,
          ulong hContent,
          ref uint pnAppID,
          StringBuilder ppchName,
          out int pnFileSizeInBytes,
          out ulong pSteamIDOwner);

        [DllImport("steam_api.dll")]
        internal static extern int SteamAPI_ISteamRemoteStorage_UGCRead(
          IntPtr ISteamRemoteStorage,
          ulong hContent,
          IntPtr pvData,
          int cubDataToRead,
          uint cOffset,
          UGCReadAction eAction);

        [DllImport("steam_api.dll")]
        internal static extern int SteamAPI_ISteamRemoteStorage_GetCachedUGCCount(
          IntPtr ISteamRemoteStorage);

        [DllImport("steam_api.dll")]
        internal static extern UGCHandle_t SteamAPI_ISteamRemoteStorage_GetCachedUGCHandle(
          IntPtr ISteamRemoteStorage,
          int iCachedContent);

        [DllImport("steam_api.dll")]
        internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_PublishWorkshopFile(
          IntPtr ISteamRemoteStorage,
          string pchFile,
          string pchPreviewFile,
          uint nConsumerAppId,
          string pchTitle,
          string pchDescription,
          RemoteStoragePublishedFileVisibility eVisibility,
          ref SteamParamStringArray_t pTags,
          WorkshopFileType eWorkshopFileType);

        [DllImport("steam_api.dll")]
        internal static extern PublishedFileUpdateHandle_t SteamAPI_ISteamRemoteStorage_CreatePublishedFileUpdateRequest(
          IntPtr ISteamRemoteStorage,
          ulong unPublishedFileId);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamRemoteStorage_UpdatePublishedFileFile(
          IntPtr ISteamRemoteStorage,
          ulong updateHandle,
          string pchFile);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamRemoteStorage_UpdatePublishedFilePreviewFile(
          IntPtr ISteamRemoteStorage,
          ulong updateHandle,
          string pchPreviewFile);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamRemoteStorage_UpdatePublishedFileTitle(
          IntPtr ISteamRemoteStorage,
          ulong updateHandle,
          string pchTitle);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamRemoteStorage_UpdatePublishedFileDescription(
          IntPtr ISteamRemoteStorage,
          ulong updateHandle,
          string pchDescription);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamRemoteStorage_UpdatePublishedFileVisibility(
          IntPtr ISteamRemoteStorage,
          ulong updateHandle,
          RemoteStoragePublishedFileVisibility eVisibility);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamRemoteStorage_UpdatePublishedFileTags(
          IntPtr ISteamRemoteStorage,
          ulong updateHandle,
          ref SteamParamStringArray_t pTags);

        [DllImport("steam_api.dll")]
        internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_CommitPublishedFileUpdate(
          IntPtr ISteamRemoteStorage,
          ulong updateHandle);

        [DllImport("steam_api.dll")]
        internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_GetPublishedFileDetails(
          IntPtr ISteamRemoteStorage,
          ulong unPublishedFileId,
          uint unMaxSecondsOld);

        [DllImport("steam_api.dll")]
        internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_DeletePublishedFile(
          IntPtr ISteamRemoteStorage,
          ulong unPublishedFileId);

        [DllImport("steam_api.dll")]
        internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_EnumerateUserPublishedFiles(
          IntPtr ISteamRemoteStorage,
          uint unStartIndex);

        [DllImport("steam_api.dll")]
        internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_SubscribePublishedFile(
          IntPtr ISteamRemoteStorage,
          ulong unPublishedFileId);

        [DllImport("steam_api.dll")]
        internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_EnumerateUserSubscribedFiles(
          IntPtr ISteamRemoteStorage,
          uint unStartIndex);

        [DllImport("steam_api.dll")]
        internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_UnsubscribePublishedFile(
          IntPtr ISteamRemoteStorage,
          ulong unPublishedFileId);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamRemoteStorage_UpdatePublishedFileSetChangeDescription(
          IntPtr ISteamRemoteStorage,
          ulong updateHandle,
          string pchChangeDescription);

        [DllImport("steam_api.dll")]
        internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_GetPublishedItemVoteDetails(
          IntPtr ISteamRemoteStorage,
          ulong unPublishedFileId);

        [DllImport("steam_api.dll")]
        internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_UpdateUserPublishedItemVote(
          IntPtr ISteamRemoteStorage,
          ulong unPublishedFileId,
          [MarshalAs(UnmanagedType.U1)] bool bVoteUp);

        [DllImport("steam_api.dll")]
        internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_GetUserPublishedItemVoteDetails(
          IntPtr ISteamRemoteStorage,
          ulong unPublishedFileId);

        [DllImport("steam_api.dll")]
        internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_EnumerateUserSharedWorkshopFiles(
          IntPtr ISteamRemoteStorage,
          ulong steamId,
          uint unStartIndex,
          ref SteamParamStringArray_t pRequiredTags,
          ref SteamParamStringArray_t pExcludedTags);

        [DllImport("steam_api.dll")]
        internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_PublishVideo(
          IntPtr ISteamRemoteStorage,
          WorkshopVideoProvider eVideoProvider,
          string pchVideoAccount,
          string pchVideoIdentifier,
          string pchPreviewFile,
          uint nConsumerAppId,
          string pchTitle,
          string pchDescription,
          RemoteStoragePublishedFileVisibility eVisibility,
          ref SteamParamStringArray_t pTags);

        [DllImport("steam_api.dll")]
        internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_SetUserPublishedFileAction(
          IntPtr ISteamRemoteStorage,
          ulong unPublishedFileId,
          WorkshopFileAction eAction);

        [DllImport("steam_api.dll")]
        internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_EnumeratePublishedFilesByUserAction(
          IntPtr ISteamRemoteStorage,
          WorkshopFileAction eAction,
          uint unStartIndex);

        [DllImport("steam_api.dll")]
        internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_EnumeratePublishedWorkshopFiles(
          IntPtr ISteamRemoteStorage,
          WorkshopEnumerationType eEnumerationType,
          uint unStartIndex,
          uint unCount,
          uint unDays,
          ref SteamParamStringArray_t pTags,
          ref SteamParamStringArray_t pUserTags);

        [DllImport("steam_api.dll")]
        internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_UGCDownloadToLocation(
          IntPtr ISteamRemoteStorage,
          ulong hContent,
          string pchLocation,
          uint unPriority);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamUserStats_RequestCurrentStats(
          IntPtr ISteamUserStats);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamUserStats_GetStat(
          IntPtr ISteamUserStats,
          string pchName,
          out int pData);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamUserStats_GetStat0(
          IntPtr ISteamUserStats,
          string pchName,
          out float pData);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamUserStats_SetStat(
          IntPtr ISteamUserStats,
          string pchName,
          int nData);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamUserStats_SetStat0(
          IntPtr ISteamUserStats,
          string pchName,
          float fData);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamUserStats_UpdateAvgRateStat(
          IntPtr ISteamUserStats,
          string pchName,
          float flCountThisSession,
          double dSessionLength);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamUserStats_GetAchievement(
          IntPtr ISteamUserStats,
          string pchName,
          [MarshalAs(UnmanagedType.U1)] ref bool pbAchieved);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamUserStats_SetAchievement(
          IntPtr ISteamUserStats,
          string pchName);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamUserStats_ClearAchievement(
          IntPtr ISteamUserStats,
          string pchName);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamUserStats_GetAchievementAndUnlockTime(
          IntPtr ISteamUserStats,
          string pchName,
          [MarshalAs(UnmanagedType.U1)] ref bool pbAchieved,
          out uint punUnlockTime);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamUserStats_StoreStats(IntPtr ISteamUserStats);

        [DllImport("steam_api.dll")]
        internal static extern int SteamAPI_ISteamUserStats_GetAchievementIcon(
          IntPtr ISteamUserStats,
          string pchName);

        [DllImport("steam_api.dll")]
        internal static extern IntPtr SteamAPI_ISteamUserStats_GetAchievementDisplayAttribute(
          IntPtr ISteamUserStats,
          string pchName,
          string pchKey);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamUserStats_IndicateAchievementProgress(
          IntPtr ISteamUserStats,
          string pchName,
          uint nCurProgress,
          uint nMaxProgress);

        [DllImport("steam_api.dll")]
        internal static extern uint SteamAPI_ISteamUserStats_GetNumAchievements(
          IntPtr ISteamUserStats);

        [DllImport("steam_api.dll")]
        internal static extern IntPtr SteamAPI_ISteamUserStats_GetAchievementName(
          IntPtr ISteamUserStats,
          uint iAchievement);

        [DllImport("steam_api.dll")]
        internal static extern SteamAPICall_t SteamAPI_ISteamUserStats_RequestUserStats(
          IntPtr ISteamUserStats,
          ulong steamIDUser);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamUserStats_GetUserStat(
          IntPtr ISteamUserStats,
          ulong steamIDUser,
          string pchName,
          out int pData);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamUserStats_GetUserStat0(
          IntPtr ISteamUserStats,
          ulong steamIDUser,
          string pchName,
          out float pData);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamUserStats_GetUserAchievement(
          IntPtr ISteamUserStats,
          ulong steamIDUser,
          string pchName,
          [MarshalAs(UnmanagedType.U1)] ref bool pbAchieved);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamUserStats_GetUserAchievementAndUnlockTime(
          IntPtr ISteamUserStats,
          ulong steamIDUser,
          string pchName,
          [MarshalAs(UnmanagedType.U1)] ref bool pbAchieved,
          out uint punUnlockTime);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamUserStats_ResetAllStats(
          IntPtr ISteamUserStats,
          [MarshalAs(UnmanagedType.U1)] bool bAchievementsToo);

        [DllImport("steam_api.dll")]
        internal static extern SteamAPICall_t SteamAPI_ISteamUserStats_FindOrCreateLeaderboard(
          IntPtr ISteamUserStats,
          string pchLeaderboardName,
          LeaderboardSortMethod eLeaderboardSortMethod,
          LeaderboardDisplayType eLeaderboardDisplayType);

        [DllImport("steam_api.dll")]
        internal static extern SteamAPICall_t SteamAPI_ISteamUserStats_FindLeaderboard(
          IntPtr ISteamUserStats,
          string pchLeaderboardName);

        [DllImport("steam_api.dll")]
        internal static extern IntPtr SteamAPI_ISteamUserStats_GetLeaderboardName(
          IntPtr ISteamUserStats,
          ulong hSteamLeaderboard);

        [DllImport("steam_api.dll")]
        internal static extern int SteamAPI_ISteamUserStats_GetLeaderboardEntryCount(
          IntPtr ISteamUserStats,
          ulong hSteamLeaderboard);

        [DllImport("steam_api.dll")]
        internal static extern LeaderboardSortMethod SteamAPI_ISteamUserStats_GetLeaderboardSortMethod(
          IntPtr ISteamUserStats,
          ulong hSteamLeaderboard);

        [DllImport("steam_api.dll")]
        internal static extern LeaderboardDisplayType SteamAPI_ISteamUserStats_GetLeaderboardDisplayType(
          IntPtr ISteamUserStats,
          ulong hSteamLeaderboard);

        [DllImport("steam_api.dll")]
        internal static extern SteamAPICall_t SteamAPI_ISteamUserStats_DownloadLeaderboardEntries(
          IntPtr ISteamUserStats,
          ulong hSteamLeaderboard,
          LeaderboardDataRequest eLeaderboardDataRequest,
          int nRangeStart,
          int nRangeEnd);

        [DllImport("steam_api.dll")]
        internal static extern SteamAPICall_t SteamAPI_ISteamUserStats_DownloadLeaderboardEntriesForUsers(
          IntPtr ISteamUserStats,
          ulong hSteamLeaderboard,
          IntPtr prgUsers,
          int cUsers);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamUserStats_GetDownloadedLeaderboardEntry(
          IntPtr ISteamUserStats,
          ulong hSteamLeaderboardEntries,
          int index,
          ref LeaderboardEntry_t pLeaderboardEntry,
          IntPtr pDetails,
          int cDetailsMax);

        [DllImport("steam_api.dll")]
        internal static extern SteamAPICall_t SteamAPI_ISteamUserStats_UploadLeaderboardScore(
          IntPtr ISteamUserStats,
          ulong hSteamLeaderboard,
          LeaderboardUploadScoreMethod eLeaderboardUploadScoreMethod,
          int nScore,
          int[] pScoreDetails,
          int cScoreDetailsCount);

        [DllImport("steam_api.dll")]
        internal static extern SteamAPICall_t SteamAPI_ISteamUserStats_AttachLeaderboardUGC(
          IntPtr ISteamUserStats,
          ulong hSteamLeaderboard,
          ulong hUGC);

        [DllImport("steam_api.dll")]
        internal static extern SteamAPICall_t SteamAPI_ISteamUserStats_GetNumberOfCurrentPlayers(
          IntPtr ISteamUserStats);

        [DllImport("steam_api.dll")]
        internal static extern SteamAPICall_t SteamAPI_ISteamUserStats_RequestGlobalAchievementPercentages(
          IntPtr ISteamUserStats);

        [DllImport("steam_api.dll")]
        internal static extern int SteamAPI_ISteamUserStats_GetMostAchievedAchievementInfo(
          IntPtr ISteamUserStats,
          StringBuilder pchName,
          uint unNameBufLen,
          out float pflPercent,
          [MarshalAs(UnmanagedType.U1)] ref bool pbAchieved);

        [DllImport("steam_api.dll")]
        internal static extern int SteamAPI_ISteamUserStats_GetNextMostAchievedAchievementInfo(
          IntPtr ISteamUserStats,
          int iIteratorPrevious,
          StringBuilder pchName,
          uint unNameBufLen,
          out float pflPercent,
          [MarshalAs(UnmanagedType.U1)] ref bool pbAchieved);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamUserStats_GetAchievementAchievedPercent(
          IntPtr ISteamUserStats,
          string pchName,
          out float pflPercent);

        [DllImport("steam_api.dll")]
        internal static extern SteamAPICall_t SteamAPI_ISteamUserStats_RequestGlobalStats(
          IntPtr ISteamUserStats,
          int nHistoryDays);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamUserStats_GetGlobalStat(
          IntPtr ISteamUserStats,
          string pchStatName,
          out long pData);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamUserStats_GetGlobalStat0(
          IntPtr ISteamUserStats,
          string pchStatName,
          out double pData);

        [DllImport("steam_api.dll")]
        internal static extern int SteamAPI_ISteamUserStats_GetGlobalStatHistory(
          IntPtr ISteamUserStats,
          string pchStatName,
          out long pData,
          uint cubData);

        [DllImport("steam_api.dll")]
        internal static extern int SteamAPI_ISteamUserStats_GetGlobalStatHistory0(
          IntPtr ISteamUserStats,
          string pchStatName,
          out double pData,
          uint cubData);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamApps_BIsSubscribed(IntPtr ISteamApps);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamApps_BIsLowViolence(IntPtr ISteamApps);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamApps_BIsCybercafe(IntPtr ISteamApps);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamApps_BIsVACBanned(IntPtr ISteamApps);

        [DllImport("steam_api.dll")]
        internal static extern IntPtr SteamAPI_ISteamApps_GetCurrentGameLanguage(IntPtr ISteamApps);

        [DllImport("steam_api.dll")]
        internal static extern IntPtr SteamAPI_ISteamApps_GetAvailableGameLanguages(
          IntPtr ISteamApps);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamApps_BIsSubscribedApp(
          IntPtr ISteamApps,
          uint appID);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamApps_BIsDlcInstalled(
          IntPtr ISteamApps,
          uint appID);

        [DllImport("steam_api.dll")]
        internal static extern uint SteamAPI_ISteamApps_GetEarliestPurchaseUnixTime(
          IntPtr ISteamApps,
          uint nAppID);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamApps_BIsSubscribedFromFreeWeekend(
          IntPtr ISteamApps);

        [DllImport("steam_api.dll")]
        internal static extern int SteamAPI_ISteamApps_GetDLCCount(IntPtr ISteamApps);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamApps_BGetDLCDataByIndex(
          IntPtr ISteamApps,
          int iDLC,
          ref uint pAppID,
          [MarshalAs(UnmanagedType.U1)] ref bool pbAvailable,
          StringBuilder pchName,
          int cchNameBufferSize);

        [DllImport("steam_api.dll")]
        internal static extern void SteamAPI_ISteamApps_InstallDLC(IntPtr ISteamApps, uint nAppID);

        [DllImport("steam_api.dll")]
        internal static extern void SteamAPI_ISteamApps_UninstallDLC(IntPtr ISteamApps, uint nAppID);

        [DllImport("steam_api.dll")]
        internal static extern void SteamAPI_ISteamApps_RequestAppProofOfPurchaseKey(
          IntPtr ISteamApps,
          uint nAppID);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamApps_GetCurrentBetaName(
          IntPtr ISteamApps,
          StringBuilder pchName,
          int cchNameBufferSize);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamApps_MarkContentCorrupt(
          IntPtr ISteamApps,
          [MarshalAs(UnmanagedType.U1)] bool bMissingFilesOnly);

        [DllImport("steam_api.dll")]
        internal static extern uint SteamAPI_ISteamApps_GetInstalledDepots(
          IntPtr ISteamApps,
          uint appID,
          IntPtr pvecDepots,
          uint cMaxDepots);

        [DllImport("steam_api.dll")]
        internal static extern uint SteamAPI_ISteamApps_GetAppInstallDir(
          IntPtr ISteamApps,
          uint appID,
          StringBuilder pchFolder,
          uint cchFolderBufferSize);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamApps_BIsAppInstalled(
          IntPtr ISteamApps,
          uint appID);

        [DllImport("steam_api.dll")]
        internal static extern CSteamID SteamAPI_ISteamApps_GetAppOwner(IntPtr ISteamApps);

        [DllImport("steam_api.dll")]
        internal static extern IntPtr SteamAPI_ISteamApps_GetLaunchQueryParam(
          IntPtr ISteamApps,
          string pchKey);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamApps_GetDlcDownloadProgress(
          IntPtr ISteamApps,
          uint nAppID,
          out ulong punBytesDownloaded,
          out ulong punBytesTotal);

        [DllImport("steam_api.dll")]
        internal static extern int SteamAPI_ISteamApps_GetAppBuildId(IntPtr ISteamApps);

        [DllImport("steam_api.dll")]
        internal static extern void SteamAPI_ISteamApps_RequestAllProofOfPurchaseKeys(
          IntPtr ISteamApps);

        [DllImport("steam_api.dll")]
        internal static extern SteamAPICall_t SteamAPI_ISteamApps_GetFileDetails(
          IntPtr ISteamApps,
          string pszFileName);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamNetworking_SendP2PPacket(
          IntPtr ISteamNetworking,
          ulong steamIDRemote,
          IntPtr pubData,
          uint cubData,
          P2PSend eP2PSendType,
          int nChannel);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamNetworking_IsP2PPacketAvailable(
          IntPtr ISteamNetworking,
          out uint pcubMsgSize,
          int nChannel);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamNetworking_ReadP2PPacket(
          IntPtr ISteamNetworking,
          IntPtr pubDest,
          uint cubDest,
          out uint pcubMsgSize,
          out ulong psteamIDRemote,
          int nChannel);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamNetworking_AcceptP2PSessionWithUser(
          IntPtr ISteamNetworking,
          ulong steamIDRemote);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamNetworking_CloseP2PSessionWithUser(
          IntPtr ISteamNetworking,
          ulong steamIDRemote);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamNetworking_CloseP2PChannelWithUser(
          IntPtr ISteamNetworking,
          ulong steamIDRemote,
          int nChannel);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamNetworking_GetP2PSessionState(
          IntPtr ISteamNetworking,
          ulong steamIDRemote,
          ref P2PSessionState_t pConnectionState);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamNetworking_AllowP2PPacketRelay(
          IntPtr ISteamNetworking,
          [MarshalAs(UnmanagedType.U1)] bool bAllow);

        [DllImport("steam_api.dll")]
        internal static extern SNetListenSocket_t SteamAPI_ISteamNetworking_CreateListenSocket(
          IntPtr ISteamNetworking,
          int nVirtualP2PPort,
          uint nIP,
          ushort nPort,
          [MarshalAs(UnmanagedType.U1)] bool bAllowUseOfPacketRelay);

        [DllImport("steam_api.dll")]
        internal static extern SNetSocket_t SteamAPI_ISteamNetworking_CreateP2PConnectionSocket(
          IntPtr ISteamNetworking,
          ulong steamIDTarget,
          int nVirtualPort,
          int nTimeoutSec,
          [MarshalAs(UnmanagedType.U1)] bool bAllowUseOfPacketRelay);

        [DllImport("steam_api.dll")]
        internal static extern SNetSocket_t SteamAPI_ISteamNetworking_CreateConnectionSocket(
          IntPtr ISteamNetworking,
          uint nIP,
          ushort nPort,
          int nTimeoutSec);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamNetworking_DestroySocket(
          IntPtr ISteamNetworking,
          uint hSocket,
          [MarshalAs(UnmanagedType.U1)] bool bNotifyRemoteEnd);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamNetworking_DestroyListenSocket(
          IntPtr ISteamNetworking,
          uint hSocket,
          [MarshalAs(UnmanagedType.U1)] bool bNotifyRemoteEnd);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamNetworking_SendDataOnSocket(
          IntPtr ISteamNetworking,
          uint hSocket,
          IntPtr pubData,
          uint cubData,
          [MarshalAs(UnmanagedType.U1)] bool bReliable);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamNetworking_IsDataAvailableOnSocket(
          IntPtr ISteamNetworking,
          uint hSocket,
          out uint pcubMsgSize);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamNetworking_RetrieveDataFromSocket(
          IntPtr ISteamNetworking,
          uint hSocket,
          IntPtr pubDest,
          uint cubDest,
          out uint pcubMsgSize);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamNetworking_IsDataAvailable(
          IntPtr ISteamNetworking,
          uint hListenSocket,
          out uint pcubMsgSize,
          ref uint phSocket);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamNetworking_RetrieveData(
          IntPtr ISteamNetworking,
          uint hListenSocket,
          IntPtr pubDest,
          uint cubDest,
          out uint pcubMsgSize,
          ref uint phSocket);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamNetworking_GetSocketInfo(
          IntPtr ISteamNetworking,
          uint hSocket,
          out ulong pSteamIDRemote,
          IntPtr peSocketStatus,
          out uint punIPRemote,
          out ushort punPortRemote);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamNetworking_GetListenSocketInfo(
          IntPtr ISteamNetworking,
          uint hListenSocket,
          out uint pnIP,
          out ushort pnPort);

        [DllImport("steam_api.dll")]
        internal static extern SNetSocketConnectionType SteamAPI_ISteamNetworking_GetSocketConnectionType(
          IntPtr ISteamNetworking,
          uint hSocket);

        [DllImport("steam_api.dll")]
        internal static extern int SteamAPI_ISteamNetworking_GetMaxPacketSize(
          IntPtr ISteamNetworking,
          uint hSocket);

        [DllImport("steam_api.dll")]
        internal static extern ScreenshotHandle SteamAPI_ISteamScreenshots_WriteScreenshot(
          IntPtr ISteamScreenshots,
          IntPtr pubRGB,
          uint cubRGB,
          int nWidth,
          int nHeight);

        [DllImport("steam_api.dll")]
        internal static extern ScreenshotHandle SteamAPI_ISteamScreenshots_AddScreenshotToLibrary(
          IntPtr ISteamScreenshots,
          string pchFilename,
          string pchThumbnailFilename,
          int nWidth,
          int nHeight);

        [DllImport("steam_api.dll")]
        internal static extern void SteamAPI_ISteamScreenshots_TriggerScreenshot(
          IntPtr ISteamScreenshots);

        [DllImport("steam_api.dll")]
        internal static extern void SteamAPI_ISteamScreenshots_HookScreenshots(
          IntPtr ISteamScreenshots,
          [MarshalAs(UnmanagedType.U1)] bool bHook);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamScreenshots_SetLocation(
          IntPtr ISteamScreenshots,
          uint hScreenshot,
          string pchLocation);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamScreenshots_TagUser(
          IntPtr ISteamScreenshots,
          uint hScreenshot,
          ulong steamID);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamScreenshots_TagPublishedFile(
          IntPtr ISteamScreenshots,
          uint hScreenshot,
          ulong unPublishedFileID);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamScreenshots_IsScreenshotsHooked(
          IntPtr ISteamScreenshots);

        [DllImport("steam_api.dll")]
        internal static extern ScreenshotHandle SteamAPI_ISteamScreenshots_AddVRScreenshotToLibrary(
          IntPtr ISteamScreenshots,
          VRScreenshotType eType,
          string pchFilename,
          string pchVRFilename);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamMusic_BIsEnabled(IntPtr ISteamMusic);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamMusic_BIsPlaying(IntPtr ISteamMusic);

        [DllImport("steam_api.dll")]
        internal static extern AudioPlayback_Status SteamAPI_ISteamMusic_GetPlaybackStatus(
          IntPtr ISteamMusic);

        [DllImport("steam_api.dll")]
        internal static extern void SteamAPI_ISteamMusic_Play(IntPtr ISteamMusic);

        [DllImport("steam_api.dll")]
        internal static extern void SteamAPI_ISteamMusic_Pause(IntPtr ISteamMusic);

        [DllImport("steam_api.dll")]
        internal static extern void SteamAPI_ISteamMusic_PlayPrevious(IntPtr ISteamMusic);

        [DllImport("steam_api.dll")]
        internal static extern void SteamAPI_ISteamMusic_PlayNext(IntPtr ISteamMusic);

        [DllImport("steam_api.dll")]
        internal static extern void SteamAPI_ISteamMusic_SetVolume(
          IntPtr ISteamMusic,
          float flVolume);

        [DllImport("steam_api.dll")]
        internal static extern float SteamAPI_ISteamMusic_GetVolume(IntPtr ISteamMusic);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamMusicRemote_RegisterSteamMusicRemote(
          IntPtr ISteamMusicRemote,
          string pchName);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamMusicRemote_DeregisterSteamMusicRemote(
          IntPtr ISteamMusicRemote);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamMusicRemote_BIsCurrentMusicRemote(
          IntPtr ISteamMusicRemote);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamMusicRemote_BActivationSuccess(
          IntPtr ISteamMusicRemote,
          [MarshalAs(UnmanagedType.U1)] bool bValue);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamMusicRemote_SetDisplayName(
          IntPtr ISteamMusicRemote,
          string pchDisplayName);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamMusicRemote_SetPNGIcon_64x64(
          IntPtr ISteamMusicRemote,
          IntPtr pvBuffer,
          uint cbBufferLength);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamMusicRemote_EnablePlayPrevious(
          IntPtr ISteamMusicRemote,
          [MarshalAs(UnmanagedType.U1)] bool bValue);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamMusicRemote_EnablePlayNext(
          IntPtr ISteamMusicRemote,
          [MarshalAs(UnmanagedType.U1)] bool bValue);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamMusicRemote_EnableShuffled(
          IntPtr ISteamMusicRemote,
          [MarshalAs(UnmanagedType.U1)] bool bValue);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamMusicRemote_EnableLooped(
          IntPtr ISteamMusicRemote,
          [MarshalAs(UnmanagedType.U1)] bool bValue);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamMusicRemote_EnableQueue(
          IntPtr ISteamMusicRemote,
          [MarshalAs(UnmanagedType.U1)] bool bValue);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamMusicRemote_EnablePlaylists(
          IntPtr ISteamMusicRemote,
          [MarshalAs(UnmanagedType.U1)] bool bValue);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamMusicRemote_UpdatePlaybackStatus(
          IntPtr ISteamMusicRemote,
          AudioPlayback_Status nStatus);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamMusicRemote_UpdateShuffled(
          IntPtr ISteamMusicRemote,
          [MarshalAs(UnmanagedType.U1)] bool bValue);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamMusicRemote_UpdateLooped(
          IntPtr ISteamMusicRemote,
          [MarshalAs(UnmanagedType.U1)] bool bValue);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamMusicRemote_UpdateVolume(
          IntPtr ISteamMusicRemote,
          float flValue);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamMusicRemote_CurrentEntryWillChange(
          IntPtr ISteamMusicRemote);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamMusicRemote_CurrentEntryIsAvailable(
          IntPtr ISteamMusicRemote,
          [MarshalAs(UnmanagedType.U1)] bool bAvailable);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamMusicRemote_UpdateCurrentEntryText(
          IntPtr ISteamMusicRemote,
          string pchText);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamMusicRemote_UpdateCurrentEntryElapsedSeconds(
          IntPtr ISteamMusicRemote,
          int nValue);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamMusicRemote_UpdateCurrentEntryCoverArt(
          IntPtr ISteamMusicRemote,
          IntPtr pvBuffer,
          uint cbBufferLength);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamMusicRemote_CurrentEntryDidChange(
          IntPtr ISteamMusicRemote);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamMusicRemote_QueueWillChange(
          IntPtr ISteamMusicRemote);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamMusicRemote_ResetQueueEntries(
          IntPtr ISteamMusicRemote);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamMusicRemote_SetQueueEntry(
          IntPtr ISteamMusicRemote,
          int nID,
          int nPosition,
          string pchEntryText);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamMusicRemote_SetCurrentQueueEntry(
          IntPtr ISteamMusicRemote,
          int nID);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamMusicRemote_QueueDidChange(
          IntPtr ISteamMusicRemote);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamMusicRemote_PlaylistWillChange(
          IntPtr ISteamMusicRemote);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamMusicRemote_ResetPlaylistEntries(
          IntPtr ISteamMusicRemote);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamMusicRemote_SetPlaylistEntry(
          IntPtr ISteamMusicRemote,
          int nID,
          int nPosition,
          string pchEntryText);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamMusicRemote_SetCurrentPlaylistEntry(
          IntPtr ISteamMusicRemote,
          int nID);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamMusicRemote_PlaylistDidChange(
          IntPtr ISteamMusicRemote);

        [DllImport("steam_api.dll")]
        internal static extern HTTPRequestHandle SteamAPI_ISteamHTTP_CreateHTTPRequest(
          IntPtr ISteamHTTP,
          HTTPMethod eHTTPRequestMethod,
          string pchAbsoluteURL);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamHTTP_SetHTTPRequestContextValue(
          IntPtr ISteamHTTP,
          uint hRequest,
          ulong ulContextValue);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamHTTP_SetHTTPRequestNetworkActivityTimeout(
          IntPtr ISteamHTTP,
          uint hRequest,
          uint unTimeoutSeconds);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamHTTP_SetHTTPRequestHeaderValue(
          IntPtr ISteamHTTP,
          uint hRequest,
          string pchHeaderName,
          string pchHeaderValue);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamHTTP_SetHTTPRequestGetOrPostParameter(
          IntPtr ISteamHTTP,
          uint hRequest,
          string pchParamName,
          string pchParamValue);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamHTTP_SendHTTPRequest(
          IntPtr ISteamHTTP,
          uint hRequest,
          ref ulong pCallHandle);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamHTTP_SendHTTPRequestAndStreamResponse(
          IntPtr ISteamHTTP,
          uint hRequest,
          ref ulong pCallHandle);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamHTTP_DeferHTTPRequest(
          IntPtr ISteamHTTP,
          uint hRequest);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamHTTP_PrioritizeHTTPRequest(
          IntPtr ISteamHTTP,
          uint hRequest);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamHTTP_GetHTTPResponseHeaderSize(
          IntPtr ISteamHTTP,
          uint hRequest,
          string pchHeaderName,
          out uint unResponseHeaderSize);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamHTTP_GetHTTPResponseHeaderValue(
          IntPtr ISteamHTTP,
          uint hRequest,
          string pchHeaderName,
          out byte pHeaderValueBuffer,
          uint unBufferSize);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamHTTP_GetHTTPResponseBodySize(
          IntPtr ISteamHTTP,
          uint hRequest,
          out uint unBodySize);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamHTTP_GetHTTPResponseBodyData(
          IntPtr ISteamHTTP,
          uint hRequest,
          out byte pBodyDataBuffer,
          uint unBufferSize);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamHTTP_GetHTTPStreamingResponseBodyData(
          IntPtr ISteamHTTP,
          uint hRequest,
          uint cOffset,
          out byte pBodyDataBuffer,
          uint unBufferSize);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamHTTP_ReleaseHTTPRequest(
          IntPtr ISteamHTTP,
          uint hRequest);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamHTTP_GetHTTPDownloadProgressPct(
          IntPtr ISteamHTTP,
          uint hRequest,
          out float pflPercentOut);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamHTTP_SetHTTPRequestRawPostBody(
          IntPtr ISteamHTTP,
          uint hRequest,
          string pchContentType,
          out byte pubBody,
          uint unBodyLen);

        [DllImport("steam_api.dll")]
        internal static extern HTTPCookieContainerHandle SteamAPI_ISteamHTTP_CreateCookieContainer(
          IntPtr ISteamHTTP,
          [MarshalAs(UnmanagedType.U1)] bool bAllowResponsesToModify);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamHTTP_ReleaseCookieContainer(
          IntPtr ISteamHTTP,
          uint hCookieContainer);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamHTTP_SetCookie(
          IntPtr ISteamHTTP,
          uint hCookieContainer,
          string pchHost,
          string pchUrl,
          string pchCookie);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamHTTP_SetHTTPRequestCookieContainer(
          IntPtr ISteamHTTP,
          uint hRequest,
          uint hCookieContainer);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamHTTP_SetHTTPRequestUserAgentInfo(
          IntPtr ISteamHTTP,
          uint hRequest,
          string pchUserAgentInfo);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamHTTP_SetHTTPRequestRequiresVerifiedCertificate(
          IntPtr ISteamHTTP,
          uint hRequest,
          [MarshalAs(UnmanagedType.U1)] bool bRequireVerifiedCertificate);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamHTTP_SetHTTPRequestAbsoluteTimeoutMS(
          IntPtr ISteamHTTP,
          uint hRequest,
          uint unMilliseconds);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamHTTP_GetHTTPRequestWasTimedOut(
          IntPtr ISteamHTTP,
          uint hRequest,
          [MarshalAs(UnmanagedType.U1)] ref bool pbWasTimedOut);

        [DllImport("steam_api.dll")]
        internal static extern ClientUnifiedMessageHandle SteamAPI_ISteamUnifiedMessages_SendMethod(
          IntPtr ISteamUnifiedMessages,
          string pchServiceMethod,
          IntPtr pRequestBuffer,
          uint unRequestBufferSize,
          ulong unContext);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamUnifiedMessages_GetMethodResponseInfo(
          IntPtr ISteamUnifiedMessages,
          ulong hHandle,
          out uint punResponseSize,
          out Result peResult);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamUnifiedMessages_GetMethodResponseData(
          IntPtr ISteamUnifiedMessages,
          ulong hHandle,
          IntPtr pResponseBuffer,
          uint unResponseBufferSize,
          [MarshalAs(UnmanagedType.U1)] bool bAutoRelease);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamUnifiedMessages_ReleaseMethod(
          IntPtr ISteamUnifiedMessages,
          ulong hHandle);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamUnifiedMessages_SendNotification(
          IntPtr ISteamUnifiedMessages,
          string pchServiceNotification,
          IntPtr pNotificationBuffer,
          uint unNotificationBufferSize);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamController_Init(IntPtr ISteamController);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamController_Shutdown(IntPtr ISteamController);

        [DllImport("steam_api.dll")]
        internal static extern void SteamAPI_ISteamController_RunFrame(IntPtr ISteamController);

        [DllImport("steam_api.dll")]
        internal static extern int SteamAPI_ISteamController_GetConnectedControllers(
          IntPtr ISteamController,
          IntPtr handlesOut);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamController_ShowBindingPanel(
          IntPtr ISteamController,
          ulong controllerHandle);

        [DllImport("steam_api.dll")]
        internal static extern ControllerActionSetHandle_t SteamAPI_ISteamController_GetActionSetHandle(
          IntPtr ISteamController,
          string pszActionSetName);

        [DllImport("steam_api.dll")]
        internal static extern void SteamAPI_ISteamController_ActivateActionSet(
          IntPtr ISteamController,
          ulong controllerHandle,
          ulong actionSetHandle);

        [DllImport("steam_api.dll")]
        internal static extern ControllerActionSetHandle_t SteamAPI_ISteamController_GetCurrentActionSet(
          IntPtr ISteamController,
          ulong controllerHandle);

        [DllImport("steam_api.dll")]
        internal static extern ControllerDigitalActionHandle_t SteamAPI_ISteamController_GetDigitalActionHandle(
          IntPtr ISteamController,
          string pszActionName);

        [DllImport("steam_api.dll")]
        internal static extern ControllerDigitalActionData_t SteamAPI_ISteamController_GetDigitalActionData(
          IntPtr ISteamController,
          ulong controllerHandle,
          ulong digitalActionHandle);

        [DllImport("steam_api.dll")]
        internal static extern int SteamAPI_ISteamController_GetDigitalActionOrigins(
          IntPtr ISteamController,
          ulong controllerHandle,
          ulong actionSetHandle,
          ulong digitalActionHandle,
          out ControllerActionOrigin originsOut);

        [DllImport("steam_api.dll")]
        internal static extern ControllerAnalogActionHandle_t SteamAPI_ISteamController_GetAnalogActionHandle(
          IntPtr ISteamController,
          string pszActionName);

        [DllImport("steam_api.dll")]
        internal static extern ControllerAnalogActionData_t SteamAPI_ISteamController_GetAnalogActionData(
          IntPtr ISteamController,
          ulong controllerHandle,
          ulong analogActionHandle);

        [DllImport("steam_api.dll")]
        internal static extern int SteamAPI_ISteamController_GetAnalogActionOrigins(
          IntPtr ISteamController,
          ulong controllerHandle,
          ulong actionSetHandle,
          ulong analogActionHandle,
          out ControllerActionOrigin originsOut);

        [DllImport("steam_api.dll")]
        internal static extern void SteamAPI_ISteamController_StopAnalogActionMomentum(
          IntPtr ISteamController,
          ulong controllerHandle,
          ulong eAction);

        [DllImport("steam_api.dll")]
        internal static extern void SteamAPI_ISteamController_TriggerHapticPulse(
          IntPtr ISteamController,
          ulong controllerHandle,
          SteamControllerPad eTargetPad,
          ushort usDurationMicroSec);

        [DllImport("steam_api.dll")]
        internal static extern void SteamAPI_ISteamController_TriggerRepeatedHapticPulse(
          IntPtr ISteamController,
          ulong controllerHandle,
          SteamControllerPad eTargetPad,
          ushort usDurationMicroSec,
          ushort usOffMicroSec,
          ushort unRepeat,
          uint nFlags);

        [DllImport("steam_api.dll")]
        internal static extern void SteamAPI_ISteamController_TriggerVibration(
          IntPtr ISteamController,
          ulong controllerHandle,
          ushort usLeftSpeed,
          ushort usRightSpeed);

        [DllImport("steam_api.dll")]
        internal static extern void SteamAPI_ISteamController_SetLEDColor(
          IntPtr ISteamController,
          ulong controllerHandle,
          byte nColorR,
          byte nColorG,
          byte nColorB,
          uint nFlags);

        [DllImport("steam_api.dll")]
        internal static extern int SteamAPI_ISteamController_GetGamepadIndexForController(
          IntPtr ISteamController,
          ulong ulControllerHandle);

        [DllImport("steam_api.dll")]
        internal static extern ControllerHandle_t SteamAPI_ISteamController_GetControllerForGamepadIndex(
          IntPtr ISteamController,
          int nIndex);

        [DllImport("steam_api.dll")]
        internal static extern ControllerMotionData_t SteamAPI_ISteamController_GetMotionData(
          IntPtr ISteamController,
          ulong controllerHandle);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamController_ShowDigitalActionOrigins(
          IntPtr ISteamController,
          ulong controllerHandle,
          ulong digitalActionHandle,
          float flScale,
          float flXPosition,
          float flYPosition);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamController_ShowAnalogActionOrigins(
          IntPtr ISteamController,
          ulong controllerHandle,
          ulong analogActionHandle,
          float flScale,
          float flXPosition,
          float flYPosition);

        [DllImport("steam_api.dll")]
        internal static extern IntPtr SteamAPI_ISteamController_GetStringForActionOrigin(
          IntPtr ISteamController,
          ControllerActionOrigin eOrigin);

        [DllImport("steam_api.dll")]
        internal static extern IntPtr SteamAPI_ISteamController_GetGlyphForActionOrigin(
          IntPtr ISteamController,
          ControllerActionOrigin eOrigin);

        [DllImport("steam_api.dll")]
        internal static extern UGCQueryHandle_t SteamAPI_ISteamUGC_CreateQueryUserUGCRequest(
          IntPtr ISteamUGC,
          uint unAccountID,
          UserUGCList eListType,
          UGCMatchingUGCType eMatchingUGCType,
          UserUGCListSortOrder eSortOrder,
          uint nCreatorAppID,
          uint nConsumerAppID,
          uint unPage);

        [DllImport("steam_api.dll")]
        internal static extern UGCQueryHandle_t SteamAPI_ISteamUGC_CreateQueryAllUGCRequest(
          IntPtr ISteamUGC,
          UGCQuery eQueryType,
          UGCMatchingUGCType eMatchingeMatchingUGCTypeFileType,
          uint nCreatorAppID,
          uint nConsumerAppID,
          uint unPage);

        [DllImport("steam_api.dll")]
        internal static extern UGCQueryHandle_t SteamAPI_ISteamUGC_CreateQueryUGCDetailsRequest(
          IntPtr ISteamUGC,
          IntPtr pvecPublishedFileID,
          uint unNumPublishedFileIDs);

        [DllImport("steam_api.dll")]
        internal static extern SteamAPICall_t SteamAPI_ISteamUGC_SendQueryUGCRequest(
          IntPtr ISteamUGC,
          ulong handle);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamUGC_GetQueryUGCResult(
          IntPtr ISteamUGC,
          ulong handle,
          uint index,
          ref SteamUGCDetails_t pDetails);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamUGC_GetQueryUGCPreviewURL(
          IntPtr ISteamUGC,
          ulong handle,
          uint index,
          StringBuilder pchURL,
          uint cchURLSize);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamUGC_GetQueryUGCMetadata(
          IntPtr ISteamUGC,
          ulong handle,
          uint index,
          StringBuilder pchMetadata,
          uint cchMetadatasize);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamUGC_GetQueryUGCChildren(
          IntPtr ISteamUGC,
          ulong handle,
          uint index,
          IntPtr pvecPublishedFileID,
          uint cMaxEntries);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamUGC_GetQueryUGCStatistic(
          IntPtr ISteamUGC,
          ulong handle,
          uint index,
          ItemStatistic eStatType,
          out ulong pStatValue);

        [DllImport("steam_api.dll")]
        internal static extern uint SteamAPI_ISteamUGC_GetQueryUGCNumAdditionalPreviews(
          IntPtr ISteamUGC,
          ulong handle,
          uint index);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamUGC_GetQueryUGCAdditionalPreview(
          IntPtr ISteamUGC,
          ulong handle,
          uint index,
          uint previewIndex,
          StringBuilder pchURLOrVideoID,
          uint cchURLSize,
          StringBuilder pchOriginalFileName,
          uint cchOriginalFileNameSize,
          out ItemPreviewType pPreviewType);

        [DllImport("steam_api.dll")]
        internal static extern uint SteamAPI_ISteamUGC_GetQueryUGCNumKeyValueTags(
          IntPtr ISteamUGC,
          ulong handle,
          uint index);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamUGC_GetQueryUGCKeyValueTag(
          IntPtr ISteamUGC,
          ulong handle,
          uint index,
          uint keyValueTagIndex,
          StringBuilder pchKey,
          uint cchKeySize,
          StringBuilder pchValue,
          uint cchValueSize);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamUGC_ReleaseQueryUGCRequest(
          IntPtr ISteamUGC,
          ulong handle);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamUGC_AddRequiredTag(
          IntPtr ISteamUGC,
          ulong handle,
          string pTagName);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamUGC_AddExcludedTag(
          IntPtr ISteamUGC,
          ulong handle,
          string pTagName);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamUGC_SetReturnOnlyIDs(
          IntPtr ISteamUGC,
          ulong handle,
          [MarshalAs(UnmanagedType.U1)] bool bReturnOnlyIDs);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamUGC_SetReturnKeyValueTags(
          IntPtr ISteamUGC,
          ulong handle,
          [MarshalAs(UnmanagedType.U1)] bool bReturnKeyValueTags);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamUGC_SetReturnLongDescription(
          IntPtr ISteamUGC,
          ulong handle,
          [MarshalAs(UnmanagedType.U1)] bool bReturnLongDescription);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamUGC_SetReturnMetadata(
          IntPtr ISteamUGC,
          ulong handle,
          [MarshalAs(UnmanagedType.U1)] bool bReturnMetadata);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamUGC_SetReturnChildren(
          IntPtr ISteamUGC,
          ulong handle,
          [MarshalAs(UnmanagedType.U1)] bool bReturnChildren);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamUGC_SetReturnAdditionalPreviews(
          IntPtr ISteamUGC,
          ulong handle,
          [MarshalAs(UnmanagedType.U1)] bool bReturnAdditionalPreviews);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamUGC_SetReturnTotalOnly(
          IntPtr ISteamUGC,
          ulong handle,
          [MarshalAs(UnmanagedType.U1)] bool bReturnTotalOnly);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamUGC_SetReturnPlaytimeStats(
          IntPtr ISteamUGC,
          ulong handle,
          uint unDays);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamUGC_SetLanguage(
          IntPtr ISteamUGC,
          ulong handle,
          string pchLanguage);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamUGC_SetAllowCachedResponse(
          IntPtr ISteamUGC,
          ulong handle,
          uint unMaxAgeSeconds);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamUGC_SetCloudFileNameFilter(
          IntPtr ISteamUGC,
          ulong handle,
          string pMatchCloudFileName);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamUGC_SetMatchAnyTag(
          IntPtr ISteamUGC,
          ulong handle,
          [MarshalAs(UnmanagedType.U1)] bool bMatchAnyTag);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamUGC_SetSearchText(
          IntPtr ISteamUGC,
          ulong handle,
          string pSearchText);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamUGC_SetRankedByTrendDays(
          IntPtr ISteamUGC,
          ulong handle,
          uint unDays);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamUGC_AddRequiredKeyValueTag(
          IntPtr ISteamUGC,
          ulong handle,
          string pKey,
          string pValue);

        [DllImport("steam_api.dll")]
        internal static extern SteamAPICall_t SteamAPI_ISteamUGC_RequestUGCDetails(
          IntPtr ISteamUGC,
          ulong nPublishedFileID,
          uint unMaxAgeSeconds);

        [DllImport("steam_api.dll")]
        internal static extern SteamAPICall_t SteamAPI_ISteamUGC_CreateItem(
          IntPtr ISteamUGC,
          uint nConsumerAppId,
          WorkshopFileType eFileType);

        [DllImport("steam_api.dll")]
        internal static extern UGCUpdateHandle_t SteamAPI_ISteamUGC_StartItemUpdate(
          IntPtr ISteamUGC,
          uint nConsumerAppId,
          ulong nPublishedFileID);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamUGC_SetItemTitle(
          IntPtr ISteamUGC,
          ulong handle,
          string pchTitle);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamUGC_SetItemDescription(
          IntPtr ISteamUGC,
          ulong handle,
          string pchDescription);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamUGC_SetItemUpdateLanguage(
          IntPtr ISteamUGC,
          ulong handle,
          string pchLanguage);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamUGC_SetItemMetadata(
          IntPtr ISteamUGC,
          ulong handle,
          string pchMetaData);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamUGC_SetItemVisibility(
          IntPtr ISteamUGC,
          ulong handle,
          RemoteStoragePublishedFileVisibility eVisibility);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamUGC_SetItemTags(
          IntPtr ISteamUGC,
          ulong updateHandle,
          ref SteamParamStringArray_t pTags);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamUGC_SetItemContent(
          IntPtr ISteamUGC,
          ulong handle,
          string pszContentFolder);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamUGC_SetItemPreview(
          IntPtr ISteamUGC,
          ulong handle,
          string pszPreviewFile);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamUGC_RemoveItemKeyValueTags(
          IntPtr ISteamUGC,
          ulong handle,
          string pchKey);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamUGC_AddItemKeyValueTag(
          IntPtr ISteamUGC,
          ulong handle,
          string pchKey,
          string pchValue);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamUGC_AddItemPreviewFile(
          IntPtr ISteamUGC,
          ulong handle,
          string pszPreviewFile,
          ItemPreviewType type);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamUGC_AddItemPreviewVideo(
          IntPtr ISteamUGC,
          ulong handle,
          string pszVideoID);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamUGC_UpdateItemPreviewFile(
          IntPtr ISteamUGC,
          ulong handle,
          uint index,
          string pszPreviewFile);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamUGC_UpdateItemPreviewVideo(
          IntPtr ISteamUGC,
          ulong handle,
          uint index,
          string pszVideoID);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamUGC_RemoveItemPreview(
          IntPtr ISteamUGC,
          ulong handle,
          uint index);

        [DllImport("steam_api.dll")]
        internal static extern SteamAPICall_t SteamAPI_ISteamUGC_SubmitItemUpdate(
          IntPtr ISteamUGC,
          ulong handle,
          string pchChangeNote);

        [DllImport("steam_api.dll")]
        internal static extern ItemUpdateStatus SteamAPI_ISteamUGC_GetItemUpdateProgress(
          IntPtr ISteamUGC,
          ulong handle,
          out ulong punBytesProcessed,
          out ulong punBytesTotal);

        [DllImport("steam_api.dll")]
        internal static extern SteamAPICall_t SteamAPI_ISteamUGC_SetUserItemVote(
          IntPtr ISteamUGC,
          ulong nPublishedFileID,
          [MarshalAs(UnmanagedType.U1)] bool bVoteUp);

        [DllImport("steam_api.dll")]
        internal static extern SteamAPICall_t SteamAPI_ISteamUGC_GetUserItemVote(
          IntPtr ISteamUGC,
          ulong nPublishedFileID);

        [DllImport("steam_api.dll")]
        internal static extern SteamAPICall_t SteamAPI_ISteamUGC_AddItemToFavorites(
          IntPtr ISteamUGC,
          uint nAppId,
          ulong nPublishedFileID);

        [DllImport("steam_api.dll")]
        internal static extern SteamAPICall_t SteamAPI_ISteamUGC_RemoveItemFromFavorites(
          IntPtr ISteamUGC,
          uint nAppId,
          ulong nPublishedFileID);

        [DllImport("steam_api.dll")]
        internal static extern SteamAPICall_t SteamAPI_ISteamUGC_SubscribeItem(
          IntPtr ISteamUGC,
          ulong nPublishedFileID);

        [DllImport("steam_api.dll")]
        internal static extern SteamAPICall_t SteamAPI_ISteamUGC_UnsubscribeItem(
          IntPtr ISteamUGC,
          ulong nPublishedFileID);

        [DllImport("steam_api.dll")]
        internal static extern uint SteamAPI_ISteamUGC_GetNumSubscribedItems(IntPtr ISteamUGC);

        [DllImport("steam_api.dll")]
        internal static extern uint SteamAPI_ISteamUGC_GetSubscribedItems(
          IntPtr ISteamUGC,
          IntPtr pvecPublishedFileID,
          uint cMaxEntries);

        [DllImport("steam_api.dll")]
        internal static extern uint SteamAPI_ISteamUGC_GetItemState(
          IntPtr ISteamUGC,
          ulong nPublishedFileID);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamUGC_GetItemInstallInfo(
          IntPtr ISteamUGC,
          ulong nPublishedFileID,
          out ulong punSizeOnDisk,
          StringBuilder pchFolder,
          uint cchFolderSize,
          out uint punTimeStamp);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamUGC_GetItemDownloadInfo(
          IntPtr ISteamUGC,
          ulong nPublishedFileID,
          out ulong punBytesDownloaded,
          out ulong punBytesTotal);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamUGC_DownloadItem(
          IntPtr ISteamUGC,
          ulong nPublishedFileID,
          [MarshalAs(UnmanagedType.U1)] bool bHighPriority);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamUGC_BInitWorkshopForGameServer(
          IntPtr ISteamUGC,
          uint unWorkshopDepotID,
          string pszFolder);

        [DllImport("steam_api.dll")]
        internal static extern void SteamAPI_ISteamUGC_SuspendDownloads(
          IntPtr ISteamUGC,
          [MarshalAs(UnmanagedType.U1)] bool bSuspend);

        [DllImport("steam_api.dll")]
        internal static extern SteamAPICall_t SteamAPI_ISteamUGC_StartPlaytimeTracking(
          IntPtr ISteamUGC,
          IntPtr pvecPublishedFileID,
          uint unNumPublishedFileIDs);

        [DllImport("steam_api.dll")]
        internal static extern SteamAPICall_t SteamAPI_ISteamUGC_StopPlaytimeTracking(
          IntPtr ISteamUGC,
          IntPtr pvecPublishedFileID,
          uint unNumPublishedFileIDs);

        [DllImport("steam_api.dll")]
        internal static extern SteamAPICall_t SteamAPI_ISteamUGC_StopPlaytimeTrackingForAllItems(
          IntPtr ISteamUGC);

        [DllImport("steam_api.dll")]
        internal static extern SteamAPICall_t SteamAPI_ISteamUGC_AddDependency(
          IntPtr ISteamUGC,
          ulong nParentPublishedFileID,
          ulong nChildPublishedFileID);

        [DllImport("steam_api.dll")]
        internal static extern SteamAPICall_t SteamAPI_ISteamUGC_RemoveDependency(
          IntPtr ISteamUGC,
          ulong nParentPublishedFileID,
          ulong nChildPublishedFileID);

        [DllImport("steam_api.dll")]
        internal static extern uint SteamAPI_ISteamAppList_GetNumInstalledApps(IntPtr ISteamAppList);

        [DllImport("steam_api.dll")]
        internal static extern uint SteamAPI_ISteamAppList_GetInstalledApps(
          IntPtr ISteamAppList,
          IntPtr pvecAppID,
          uint unMaxAppIDs);

        [DllImport("steam_api.dll")]
        internal static extern int SteamAPI_ISteamAppList_GetAppName(
          IntPtr ISteamAppList,
          uint nAppID,
          StringBuilder pchName,
          int cchNameMax);

        [DllImport("steam_api.dll")]
        internal static extern int SteamAPI_ISteamAppList_GetAppInstallDir(
          IntPtr ISteamAppList,
          uint nAppID,
          StringBuilder pchDirectory,
          int cchNameMax);

        [DllImport("steam_api.dll")]
        internal static extern int SteamAPI_ISteamAppList_GetAppBuildId(
          IntPtr ISteamAppList,
          uint nAppID);

        [DllImport("steam_api.dll")]
        internal static extern void SteamAPI_ISteamHTMLSurface_DestructISteamHTMLSurface(
          IntPtr ISteamHTMLSurface);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamHTMLSurface_Init(IntPtr ISteamHTMLSurface);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamHTMLSurface_Shutdown(IntPtr ISteamHTMLSurface);

        [DllImport("steam_api.dll")]
        internal static extern SteamAPICall_t SteamAPI_ISteamHTMLSurface_CreateBrowser(
          IntPtr ISteamHTMLSurface,
          string pchUserAgent,
          string pchUserCSS);

        [DllImport("steam_api.dll")]
        internal static extern void SteamAPI_ISteamHTMLSurface_RemoveBrowser(
          IntPtr ISteamHTMLSurface,
          uint unBrowserHandle);

        [DllImport("steam_api.dll")]
        internal static extern void SteamAPI_ISteamHTMLSurface_LoadURL(
          IntPtr ISteamHTMLSurface,
          uint unBrowserHandle,
          string pchURL,
          string pchPostData);

        [DllImport("steam_api.dll")]
        internal static extern void SteamAPI_ISteamHTMLSurface_SetSize(
          IntPtr ISteamHTMLSurface,
          uint unBrowserHandle,
          uint unWidth,
          uint unHeight);

        [DllImport("steam_api.dll")]
        internal static extern void SteamAPI_ISteamHTMLSurface_StopLoad(
          IntPtr ISteamHTMLSurface,
          uint unBrowserHandle);

        [DllImport("steam_api.dll")]
        internal static extern void SteamAPI_ISteamHTMLSurface_Reload(
          IntPtr ISteamHTMLSurface,
          uint unBrowserHandle);

        [DllImport("steam_api.dll")]
        internal static extern void SteamAPI_ISteamHTMLSurface_GoBack(
          IntPtr ISteamHTMLSurface,
          uint unBrowserHandle);

        [DllImport("steam_api.dll")]
        internal static extern void SteamAPI_ISteamHTMLSurface_GoForward(
          IntPtr ISteamHTMLSurface,
          uint unBrowserHandle);

        [DllImport("steam_api.dll")]
        internal static extern void SteamAPI_ISteamHTMLSurface_AddHeader(
          IntPtr ISteamHTMLSurface,
          uint unBrowserHandle,
          string pchKey,
          string pchValue);

        [DllImport("steam_api.dll")]
        internal static extern void SteamAPI_ISteamHTMLSurface_ExecuteJavascript(
          IntPtr ISteamHTMLSurface,
          uint unBrowserHandle,
          string pchScript);

        [DllImport("steam_api.dll")]
        internal static extern void SteamAPI_ISteamHTMLSurface_MouseUp(
          IntPtr ISteamHTMLSurface,
          uint unBrowserHandle,
          HTMLMouseButton eMouseButton);

        [DllImport("steam_api.dll")]
        internal static extern void SteamAPI_ISteamHTMLSurface_MouseDown(
          IntPtr ISteamHTMLSurface,
          uint unBrowserHandle,
          HTMLMouseButton eMouseButton);

        [DllImport("steam_api.dll")]
        internal static extern void SteamAPI_ISteamHTMLSurface_MouseDoubleClick(
          IntPtr ISteamHTMLSurface,
          uint unBrowserHandle,
          HTMLMouseButton eMouseButton);

        [DllImport("steam_api.dll")]
        internal static extern void SteamAPI_ISteamHTMLSurface_MouseMove(
          IntPtr ISteamHTMLSurface,
          uint unBrowserHandle,
          int x,
          int y);

        [DllImport("steam_api.dll")]
        internal static extern void SteamAPI_ISteamHTMLSurface_MouseWheel(
          IntPtr ISteamHTMLSurface,
          uint unBrowserHandle,
          int nDelta);

        [DllImport("steam_api.dll")]
        internal static extern void SteamAPI_ISteamHTMLSurface_KeyDown(
          IntPtr ISteamHTMLSurface,
          uint unBrowserHandle,
          uint nNativeKeyCode,
          HTMLKeyModifiers eHTMLKeyModifiers);

        [DllImport("steam_api.dll")]
        internal static extern void SteamAPI_ISteamHTMLSurface_KeyUp(
          IntPtr ISteamHTMLSurface,
          uint unBrowserHandle,
          uint nNativeKeyCode,
          HTMLKeyModifiers eHTMLKeyModifiers);

        [DllImport("steam_api.dll")]
        internal static extern void SteamAPI_ISteamHTMLSurface_KeyChar(
          IntPtr ISteamHTMLSurface,
          uint unBrowserHandle,
          uint cUnicodeChar,
          HTMLKeyModifiers eHTMLKeyModifiers);

        [DllImport("steam_api.dll")]
        internal static extern void SteamAPI_ISteamHTMLSurface_SetHorizontalScroll(
          IntPtr ISteamHTMLSurface,
          uint unBrowserHandle,
          uint nAbsolutePixelScroll);

        [DllImport("steam_api.dll")]
        internal static extern void SteamAPI_ISteamHTMLSurface_SetVerticalScroll(
          IntPtr ISteamHTMLSurface,
          uint unBrowserHandle,
          uint nAbsolutePixelScroll);

        [DllImport("steam_api.dll")]
        internal static extern void SteamAPI_ISteamHTMLSurface_SetKeyFocus(
          IntPtr ISteamHTMLSurface,
          uint unBrowserHandle,
          [MarshalAs(UnmanagedType.U1)] bool bHasKeyFocus);

        [DllImport("steam_api.dll")]
        internal static extern void SteamAPI_ISteamHTMLSurface_ViewSource(
          IntPtr ISteamHTMLSurface,
          uint unBrowserHandle);

        [DllImport("steam_api.dll")]
        internal static extern void SteamAPI_ISteamHTMLSurface_CopyToClipboard(
          IntPtr ISteamHTMLSurface,
          uint unBrowserHandle);

        [DllImport("steam_api.dll")]
        internal static extern void SteamAPI_ISteamHTMLSurface_PasteFromClipboard(
          IntPtr ISteamHTMLSurface,
          uint unBrowserHandle);

        [DllImport("steam_api.dll")]
        internal static extern void SteamAPI_ISteamHTMLSurface_Find(
          IntPtr ISteamHTMLSurface,
          uint unBrowserHandle,
          string pchSearchStr,
          [MarshalAs(UnmanagedType.U1)] bool bCurrentlyInFind,
          [MarshalAs(UnmanagedType.U1)] bool bReverse);

        [DllImport("steam_api.dll")]
        internal static extern void SteamAPI_ISteamHTMLSurface_StopFind(
          IntPtr ISteamHTMLSurface,
          uint unBrowserHandle);

        [DllImport("steam_api.dll")]
        internal static extern void SteamAPI_ISteamHTMLSurface_GetLinkAtPosition(
          IntPtr ISteamHTMLSurface,
          uint unBrowserHandle,
          int x,
          int y);

        [DllImport("steam_api.dll")]
        internal static extern void SteamAPI_ISteamHTMLSurface_SetCookie(
          IntPtr ISteamHTMLSurface,
          string pchHostname,
          string pchKey,
          string pchValue,
          string pchPath,
          uint nExpires,
          [MarshalAs(UnmanagedType.U1)] bool bSecure,
          [MarshalAs(UnmanagedType.U1)] bool bHTTPOnly);

        [DllImport("steam_api.dll")]
        internal static extern void SteamAPI_ISteamHTMLSurface_SetPageScaleFactor(
          IntPtr ISteamHTMLSurface,
          uint unBrowserHandle,
          float flZoom,
          int nPointX,
          int nPointY);

        [DllImport("steam_api.dll")]
        internal static extern void SteamAPI_ISteamHTMLSurface_SetBackgroundMode(
          IntPtr ISteamHTMLSurface,
          uint unBrowserHandle,
          [MarshalAs(UnmanagedType.U1)] bool bBackgroundMode);

        [DllImport("steam_api.dll")]
        internal static extern void SteamAPI_ISteamHTMLSurface_AllowStartRequest(
          IntPtr ISteamHTMLSurface,
          uint unBrowserHandle,
          [MarshalAs(UnmanagedType.U1)] bool bAllowed);

        [DllImport("steam_api.dll")]
        internal static extern void SteamAPI_ISteamHTMLSurface_JSDialogResponse(
          IntPtr ISteamHTMLSurface,
          uint unBrowserHandle,
          [MarshalAs(UnmanagedType.U1)] bool bResult);

        [DllImport("steam_api.dll")]
        internal static extern Result SteamAPI_ISteamInventory_GetResultStatus(
          IntPtr ISteamInventory,
          int resultHandle);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamInventory_GetResultItems(
          IntPtr ISteamInventory,
          int resultHandle,
          IntPtr pOutItemsArray,
          out uint punOutItemsArraySize);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamInventory_GetResultItemProperty(
          IntPtr ISteamInventory,
          int resultHandle,
          uint unItemIndex,
          string pchPropertyName,
          StringBuilder pchValueBuffer,
          out uint punValueBufferSizeOut);

        [DllImport("steam_api.dll")]
        internal static extern uint SteamAPI_ISteamInventory_GetResultTimestamp(
          IntPtr ISteamInventory,
          int resultHandle);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamInventory_CheckResultSteamID(
          IntPtr ISteamInventory,
          int resultHandle,
          ulong steamIDExpected);

        [DllImport("steam_api.dll")]
        internal static extern void SteamAPI_ISteamInventory_DestroyResult(
          IntPtr ISteamInventory,
          int resultHandle);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamInventory_GetAllItems(
          IntPtr ISteamInventory,
          ref int pResultHandle);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamInventory_GetItemsByID(
          IntPtr ISteamInventory,
          ref int pResultHandle,
          ulong[] pInstanceIDs,
          uint unCountInstanceIDs);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamInventory_SerializeResult(
          IntPtr ISteamInventory,
          int resultHandle,
          IntPtr pOutBuffer,
          out uint punOutBufferSize);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamInventory_DeserializeResult(
          IntPtr ISteamInventory,
          ref int pOutResultHandle,
          IntPtr pBuffer,
          uint unBufferSize,
          [MarshalAs(UnmanagedType.U1)] bool bRESERVED_MUST_BE_FALSE);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamInventory_GenerateItems(
          IntPtr ISteamInventory,
          ref int pResultHandle,
          int[] pArrayItemDefs,
          uint[] punArrayQuantity,
          uint unArrayLength);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamInventory_GrantPromoItems(
          IntPtr ISteamInventory,
          ref int pResultHandle);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamInventory_AddPromoItem(
          IntPtr ISteamInventory,
          ref int pResultHandle,
          int itemDef);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamInventory_AddPromoItems(
          IntPtr ISteamInventory,
          ref int pResultHandle,
          int[] pArrayItemDefs,
          uint unArrayLength);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamInventory_ConsumeItem(
          IntPtr ISteamInventory,
          ref int pResultHandle,
          ulong itemConsume,
          uint unQuantity);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamInventory_ExchangeItems(
          IntPtr ISteamInventory,
          ref int pResultHandle,
          int[] pArrayGenerate,
          uint[] punArrayGenerateQuantity,
          uint unArrayGenerateLength,
          ulong[] pArrayDestroy,
          uint[] punArrayDestroyQuantity,
          uint unArrayDestroyLength);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamInventory_TransferItemQuantity(
          IntPtr ISteamInventory,
          ref int pResultHandle,
          ulong itemIdSource,
          uint unQuantity,
          ulong itemIdDest);

        [DllImport("steam_api.dll")]
        internal static extern void SteamAPI_ISteamInventory_SendItemDropHeartbeat(
          IntPtr ISteamInventory);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamInventory_TriggerItemDrop(
          IntPtr ISteamInventory,
          ref int pResultHandle,
          int dropListDefinition);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamInventory_TradeItems(
          IntPtr ISteamInventory,
          ref int pResultHandle,
          ulong steamIDTradePartner,
          ulong[] pArrayGive,
          uint[] pArrayGiveQuantity,
          uint nArrayGiveLength,
          ulong[] pArrayGet,
          uint[] pArrayGetQuantity,
          uint nArrayGetLength);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamInventory_LoadItemDefinitions(
          IntPtr ISteamInventory);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamInventory_GetItemDefinitionIDs(
          IntPtr ISteamInventory,
          IntPtr pItemDefIDs,
          out uint punItemDefIDsArraySize);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamInventory_GetItemDefinitionProperty(
          IntPtr ISteamInventory,
          int iDefinition,
          string pchPropertyName,
          StringBuilder pchValueBuffer,
          out uint punValueBufferSizeOut);

        [DllImport("steam_api.dll")]
        internal static extern SteamAPICall_t SteamAPI_ISteamInventory_RequestEligiblePromoItemDefinitionsIDs(
          IntPtr ISteamInventory,
          ulong steamID);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamInventory_GetEligiblePromoItemDefinitionIDs(
          IntPtr ISteamInventory,
          ulong steamID,
          IntPtr pItemDefIDs,
          out uint punItemDefIDsArraySize);

        [DllImport("steam_api.dll")]
        internal static extern void SteamAPI_ISteamVideo_GetVideoURL(
          IntPtr ISteamVideo,
          uint unVideoAppID);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamVideo_IsBroadcasting(
          IntPtr ISteamVideo,
          IntPtr pnNumViewers);

        [DllImport("steam_api.dll")]
        internal static extern void SteamAPI_ISteamVideo_GetOPFSettings(
          IntPtr ISteamVideo,
          uint unVideoAppID);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamVideo_GetOPFStringForApp(
          IntPtr ISteamVideo,
          uint unVideoAppID,
          StringBuilder pchBuffer,
          out int pnBufferSize);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamGameServer_InitGameServer(
          IntPtr ISteamGameServer,
          uint unIP,
          ushort usGamePort,
          ushort usQueryPort,
          uint unFlags,
          uint nGameAppId,
          string pchVersionString);

        [DllImport("steam_api.dll")]
        internal static extern void SteamAPI_ISteamGameServer_SetProduct(
          IntPtr ISteamGameServer,
          string pszProduct);

        [DllImport("steam_api.dll")]
        internal static extern void SteamAPI_ISteamGameServer_SetGameDescription(
          IntPtr ISteamGameServer,
          string pszGameDescription);

        [DllImport("steam_api.dll")]
        internal static extern void SteamAPI_ISteamGameServer_SetModDir(
          IntPtr ISteamGameServer,
          string pszModDir);

        [DllImport("steam_api.dll")]
        internal static extern void SteamAPI_ISteamGameServer_SetDedicatedServer(
          IntPtr ISteamGameServer,
          [MarshalAs(UnmanagedType.U1)] bool bDedicated);

        [DllImport("steam_api.dll")]
        internal static extern void SteamAPI_ISteamGameServer_LogOn(
          IntPtr ISteamGameServer,
          string pszToken);

        [DllImport("steam_api.dll")]
        internal static extern void SteamAPI_ISteamGameServer_LogOnAnonymous(IntPtr ISteamGameServer);

        [DllImport("steam_api.dll")]
        internal static extern void SteamAPI_ISteamGameServer_LogOff(IntPtr ISteamGameServer);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamGameServer_BLoggedOn(IntPtr ISteamGameServer);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamGameServer_BSecure(IntPtr ISteamGameServer);

        [DllImport("steam_api.dll")]
        internal static extern CSteamID SteamAPI_ISteamGameServer_GetSteamID(IntPtr ISteamGameServer);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamGameServer_WasRestartRequested(
          IntPtr ISteamGameServer);

        [DllImport("steam_api.dll")]
        internal static extern void SteamAPI_ISteamGameServer_SetMaxPlayerCount(
          IntPtr ISteamGameServer,
          int cPlayersMax);

        [DllImport("steam_api.dll")]
        internal static extern void SteamAPI_ISteamGameServer_SetBotPlayerCount(
          IntPtr ISteamGameServer,
          int cBotplayers);

        [DllImport("steam_api.dll")]
        internal static extern void SteamAPI_ISteamGameServer_SetServerName(
          IntPtr ISteamGameServer,
          string pszServerName);

        [DllImport("steam_api.dll")]
        internal static extern void SteamAPI_ISteamGameServer_SetMapName(
          IntPtr ISteamGameServer,
          string pszMapName);

        [DllImport("steam_api.dll")]
        internal static extern void SteamAPI_ISteamGameServer_SetPasswordProtected(
          IntPtr ISteamGameServer,
          [MarshalAs(UnmanagedType.U1)] bool bPasswordProtected);

        [DllImport("steam_api.dll")]
        internal static extern void SteamAPI_ISteamGameServer_SetSpectatorPort(
          IntPtr ISteamGameServer,
          ushort unSpectatorPort);

        [DllImport("steam_api.dll")]
        internal static extern void SteamAPI_ISteamGameServer_SetSpectatorServerName(
          IntPtr ISteamGameServer,
          string pszSpectatorServerName);

        [DllImport("steam_api.dll")]
        internal static extern void SteamAPI_ISteamGameServer_ClearAllKeyValues(
          IntPtr ISteamGameServer);

        [DllImport("steam_api.dll")]
        internal static extern void SteamAPI_ISteamGameServer_SetKeyValue(
          IntPtr ISteamGameServer,
          string pKey,
          string pValue);

        [DllImport("steam_api.dll")]
        internal static extern void SteamAPI_ISteamGameServer_SetGameTags(
          IntPtr ISteamGameServer,
          string pchGameTags);

        [DllImport("steam_api.dll")]
        internal static extern void SteamAPI_ISteamGameServer_SetGameData(
          IntPtr ISteamGameServer,
          string pchGameData);

        [DllImport("steam_api.dll")]
        internal static extern void SteamAPI_ISteamGameServer_SetRegion(
          IntPtr ISteamGameServer,
          string pszRegion);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamGameServer_SendUserConnectAndAuthenticate(
          IntPtr ISteamGameServer,
          uint unIPClient,
          IntPtr pvAuthBlob,
          uint cubAuthBlobSize,
          out ulong pSteamIDUser);

        [DllImport("steam_api.dll")]
        internal static extern CSteamID SteamAPI_ISteamGameServer_CreateUnauthenticatedUserConnection(
          IntPtr ISteamGameServer);

        [DllImport("steam_api.dll")]
        internal static extern void SteamAPI_ISteamGameServer_SendUserDisconnect(
          IntPtr ISteamGameServer,
          ulong steamIDUser);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamGameServer_BUpdateUserData(
          IntPtr ISteamGameServer,
          ulong steamIDUser,
          string pchPlayerName,
          uint uScore);

        [DllImport("steam_api.dll")]
        internal static extern HAuthTicket SteamAPI_ISteamGameServer_GetAuthSessionTicket(
          IntPtr ISteamGameServer,
          IntPtr pTicket,
          int cbMaxTicket,
          out uint pcbTicket);

        [DllImport("steam_api.dll")]
        internal static extern BeginAuthSessionResult SteamAPI_ISteamGameServer_BeginAuthSession(
          IntPtr ISteamGameServer,
          IntPtr pAuthTicket,
          int cbAuthTicket,
          ulong steamID);

        [DllImport("steam_api.dll")]
        internal static extern void SteamAPI_ISteamGameServer_EndAuthSession(
          IntPtr ISteamGameServer,
          ulong steamID);

        [DllImport("steam_api.dll")]
        internal static extern void SteamAPI_ISteamGameServer_CancelAuthTicket(
          IntPtr ISteamGameServer,
          uint hAuthTicket);

        [DllImport("steam_api.dll")]
        internal static extern UserHasLicenseForAppResult SteamAPI_ISteamGameServer_UserHasLicenseForApp(
          IntPtr ISteamGameServer,
          ulong steamID,
          uint appID);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamGameServer_RequestUserGroupStatus(
          IntPtr ISteamGameServer,
          ulong steamIDUser,
          ulong steamIDGroup);

        [DllImport("steam_api.dll")]
        internal static extern void SteamAPI_ISteamGameServer_GetGameplayStats(
          IntPtr ISteamGameServer);

        [DllImport("steam_api.dll")]
        internal static extern SteamAPICall_t SteamAPI_ISteamGameServer_GetServerReputation(
          IntPtr ISteamGameServer);

        [DllImport("steam_api.dll")]
        internal static extern uint SteamAPI_ISteamGameServer_GetPublicIP(IntPtr ISteamGameServer);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamGameServer_HandleIncomingPacket(
          IntPtr ISteamGameServer,
          IntPtr pData,
          int cbData,
          uint srcIP,
          ushort srcPort);

        [DllImport("steam_api.dll")]
        internal static extern int SteamAPI_ISteamGameServer_GetNextOutgoingPacket(
          IntPtr ISteamGameServer,
          IntPtr pOut,
          int cbMaxOut,
          out uint pNetAdr,
          out ushort pPort);

        [DllImport("steam_api.dll")]
        internal static extern void SteamAPI_ISteamGameServer_EnableHeartbeats(
          IntPtr ISteamGameServer,
          [MarshalAs(UnmanagedType.U1)] bool bActive);

        [DllImport("steam_api.dll")]
        internal static extern void SteamAPI_ISteamGameServer_SetHeartbeatInterval(
          IntPtr ISteamGameServer,
          int iHeartbeatInterval);

        [DllImport("steam_api.dll")]
        internal static extern void SteamAPI_ISteamGameServer_ForceHeartbeat(IntPtr ISteamGameServer);

        [DllImport("steam_api.dll")]
        internal static extern SteamAPICall_t SteamAPI_ISteamGameServer_AssociateWithClan(
          IntPtr ISteamGameServer,
          ulong steamIDClan);

        [DllImport("steam_api.dll")]
        internal static extern SteamAPICall_t SteamAPI_ISteamGameServer_ComputeNewPlayerCompatibility(
          IntPtr ISteamGameServer,
          ulong steamIDNewPlayer);

        [DllImport("steam_api.dll")]
        internal static extern SteamAPICall_t SteamAPI_ISteamGameServerStats_RequestUserStats(
          IntPtr ISteamGameServerStats,
          ulong steamIDUser);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamGameServerStats_GetUserStat(
          IntPtr ISteamGameServerStats,
          ulong steamIDUser,
          string pchName,
          out int pData);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamGameServerStats_GetUserStat0(
          IntPtr ISteamGameServerStats,
          ulong steamIDUser,
          string pchName,
          out float pData);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamGameServerStats_GetUserAchievement(
          IntPtr ISteamGameServerStats,
          ulong steamIDUser,
          string pchName,
          [MarshalAs(UnmanagedType.U1)] ref bool pbAchieved);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamGameServerStats_SetUserStat(
          IntPtr ISteamGameServerStats,
          ulong steamIDUser,
          string pchName,
          int nData);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamGameServerStats_SetUserStat0(
          IntPtr ISteamGameServerStats,
          ulong steamIDUser,
          string pchName,
          float fData);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamGameServerStats_UpdateUserAvgRateStat(
          IntPtr ISteamGameServerStats,
          ulong steamIDUser,
          string pchName,
          float flCountThisSession,
          double dSessionLength);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamGameServerStats_SetUserAchievement(
          IntPtr ISteamGameServerStats,
          ulong steamIDUser,
          string pchName);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_ISteamGameServerStats_ClearUserAchievement(
          IntPtr ISteamGameServerStats,
          ulong steamIDUser,
          string pchName);

        [DllImport("steam_api.dll")]
        internal static extern SteamAPICall_t SteamAPI_ISteamGameServerStats_StoreUserStats(
          IntPtr ISteamGameServerStats,
          ulong steamIDUser);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_Init();

        [DllImport("steam_api.dll")]
        internal static extern void SteamAPI_RunCallbacks();

        [DllImport("steam_api.dll")]
        internal static extern void SteamGameServer_RunCallbacks();

        [DllImport("steam_api.dll")]
        internal static extern void SteamAPI_RegisterCallback(IntPtr pCallback, int callback);

        [DllImport("steam_api.dll")]
        internal static extern void SteamAPI_UnregisterCallback(IntPtr pCallback);

        [DllImport("steam_api.dll")]
        internal static extern void SteamAPI_RegisterCallResult(IntPtr pCallback, ulong callback);

        [DllImport("steam_api.dll")]
        internal static extern void SteamAPI_UnregisterCallResult(IntPtr pCallback, ulong callback);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamInternal_GameServer_Init(
          uint unIP,
          ushort usPort,
          ushort usGamePort,
          ushort usQueryPort,
          int eServerMode,
          string pchVersionString);

        [DllImport("steam_api.dll")]
        internal static extern void SteamAPI_Shutdown();

        [DllImport("steam_api.dll")]
        internal static extern void SteamGameServer_Shutdown();

        [DllImport("steam_api.dll")]
        internal static extern HSteamUser SteamAPI_GetHSteamUser();

        [DllImport("steam_api.dll")]
        internal static extern HSteamPipe SteamAPI_GetHSteamPipe();

        [DllImport("steam_api.dll")]
        internal static extern HSteamUser SteamGameServer_GetHSteamUser();

        [DllImport("steam_api.dll")]
        internal static extern HSteamPipe SteamGameServer_GetHSteamPipe();

        [DllImport("steam_api.dll")]
        internal static extern IntPtr SteamInternal_CreateInterface(string version);

        [DllImport("steam_api.dll")]
        internal static extern bool SteamAPI_RestartAppIfNecessary(uint unOwnAppID);
      }
    }

    internal class Win64 : Platform.Interface, IDisposable
    {
      internal IntPtr _ptr;

      public bool IsValid => this._ptr != IntPtr.Zero;

      internal Win64(IntPtr pointer) => this._ptr = pointer;

      public virtual void Dispose() => this._ptr = IntPtr.Zero;

      public virtual HSteamPipe ISteamClient_CreateSteamPipe()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamClient_CreateSteamPipe(this._ptr) : throw new Exception("ISteamClient _ptr is null!");
      }

      public virtual bool ISteamClient_BReleaseSteamPipe(int hSteamPipe)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamClient_BReleaseSteamPipe(this._ptr, hSteamPipe) : throw new Exception("ISteamClient _ptr is null!");
      }

      public virtual HSteamUser ISteamClient_ConnectToGlobalUser(int hSteamPipe)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamClient_ConnectToGlobalUser(this._ptr, hSteamPipe) : throw new Exception("ISteamClient _ptr is null!");
      }

      public virtual HSteamUser ISteamClient_CreateLocalUser(
        out int phSteamPipe,
        AccountType eAccountType)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamClient_CreateLocalUser(this._ptr, out phSteamPipe, eAccountType) : throw new Exception("ISteamClient _ptr is null!");
      }

      public virtual void ISteamClient_ReleaseUser(int hSteamPipe, int hUser)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamClient _ptr is null!");
        Platform.Win64.Native.SteamAPI_ISteamClient_ReleaseUser(this._ptr, hSteamPipe, hUser);
      }

      public virtual IntPtr ISteamClient_GetISteamUser(
        int hSteamUser,
        int hSteamPipe,
        string pchVersion)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamClient _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamClient_GetISteamUser(this._ptr, hSteamUser, hSteamPipe, pchVersion);
      }

      public virtual IntPtr ISteamClient_GetISteamGameServer(
        int hSteamUser,
        int hSteamPipe,
        string pchVersion)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamClient _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamClient_GetISteamGameServer(this._ptr, hSteamUser, hSteamPipe, pchVersion);
      }

      public virtual void ISteamClient_SetLocalIPBinding(uint unIP, ushort usPort)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamClient _ptr is null!");
        Platform.Win64.Native.SteamAPI_ISteamClient_SetLocalIPBinding(this._ptr, unIP, usPort);
      }

      public virtual IntPtr ISteamClient_GetISteamFriends(
        int hSteamUser,
        int hSteamPipe,
        string pchVersion)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamClient _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamClient_GetISteamFriends(this._ptr, hSteamUser, hSteamPipe, pchVersion);
      }

      public virtual IntPtr ISteamClient_GetISteamUtils(int hSteamPipe, string pchVersion)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamClient _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamClient_GetISteamUtils(this._ptr, hSteamPipe, pchVersion);
      }

      public virtual IntPtr ISteamClient_GetISteamMatchmaking(
        int hSteamUser,
        int hSteamPipe,
        string pchVersion)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamClient _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamClient_GetISteamMatchmaking(this._ptr, hSteamUser, hSteamPipe, pchVersion);
      }

      public virtual IntPtr ISteamClient_GetISteamMatchmakingServers(
        int hSteamUser,
        int hSteamPipe,
        string pchVersion)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamClient _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamClient_GetISteamMatchmakingServers(this._ptr, hSteamUser, hSteamPipe, pchVersion);
      }

      public virtual IntPtr ISteamClient_GetISteamGenericInterface(
        int hSteamUser,
        int hSteamPipe,
        string pchVersion)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamClient _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamClient_GetISteamGenericInterface(this._ptr, hSteamUser, hSteamPipe, pchVersion);
      }

      public virtual IntPtr ISteamClient_GetISteamUserStats(
        int hSteamUser,
        int hSteamPipe,
        string pchVersion)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamClient _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamClient_GetISteamUserStats(this._ptr, hSteamUser, hSteamPipe, pchVersion);
      }

      public virtual IntPtr ISteamClient_GetISteamGameServerStats(
        int hSteamuser,
        int hSteamPipe,
        string pchVersion)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamClient _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamClient_GetISteamGameServerStats(this._ptr, hSteamuser, hSteamPipe, pchVersion);
      }

      public virtual IntPtr ISteamClient_GetISteamApps(
        int hSteamUser,
        int hSteamPipe,
        string pchVersion)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamClient _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamClient_GetISteamApps(this._ptr, hSteamUser, hSteamPipe, pchVersion);
      }

      public virtual IntPtr ISteamClient_GetISteamNetworking(
        int hSteamUser,
        int hSteamPipe,
        string pchVersion)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamClient _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamClient_GetISteamNetworking(this._ptr, hSteamUser, hSteamPipe, pchVersion);
      }

      public virtual IntPtr ISteamClient_GetISteamRemoteStorage(
        int hSteamuser,
        int hSteamPipe,
        string pchVersion)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamClient _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamClient_GetISteamRemoteStorage(this._ptr, hSteamuser, hSteamPipe, pchVersion);
      }

      public virtual IntPtr ISteamClient_GetISteamScreenshots(
        int hSteamuser,
        int hSteamPipe,
        string pchVersion)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamClient _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamClient_GetISteamScreenshots(this._ptr, hSteamuser, hSteamPipe, pchVersion);
      }

      public virtual uint ISteamClient_GetIPCCallCount()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamClient_GetIPCCallCount(this._ptr) : throw new Exception("ISteamClient _ptr is null!");
      }

      public virtual void ISteamClient_SetWarningMessageHook(IntPtr pFunction)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamClient _ptr is null!");
        Platform.Win64.Native.SteamAPI_ISteamClient_SetWarningMessageHook(this._ptr, pFunction);
      }

      public virtual bool ISteamClient_BShutdownIfAllPipesClosed()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamClient_BShutdownIfAllPipesClosed(this._ptr) : throw new Exception("ISteamClient _ptr is null!");
      }

      public virtual IntPtr ISteamClient_GetISteamHTTP(
        int hSteamuser,
        int hSteamPipe,
        string pchVersion)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamClient _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamClient_GetISteamHTTP(this._ptr, hSteamuser, hSteamPipe, pchVersion);
      }

      public virtual IntPtr ISteamClient_GetISteamUnifiedMessages(
        int hSteamuser,
        int hSteamPipe,
        string pchVersion)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamClient _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamClient_GetISteamUnifiedMessages(this._ptr, hSteamuser, hSteamPipe, pchVersion);
      }

      public virtual IntPtr ISteamClient_GetISteamController(
        int hSteamUser,
        int hSteamPipe,
        string pchVersion)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamClient _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamClient_GetISteamController(this._ptr, hSteamUser, hSteamPipe, pchVersion);
      }

      public virtual IntPtr ISteamClient_GetISteamUGC(
        int hSteamUser,
        int hSteamPipe,
        string pchVersion)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamClient _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamClient_GetISteamUGC(this._ptr, hSteamUser, hSteamPipe, pchVersion);
      }

      public virtual IntPtr ISteamClient_GetISteamAppList(
        int hSteamUser,
        int hSteamPipe,
        string pchVersion)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamClient _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamClient_GetISteamAppList(this._ptr, hSteamUser, hSteamPipe, pchVersion);
      }

      public virtual IntPtr ISteamClient_GetISteamMusic(
        int hSteamuser,
        int hSteamPipe,
        string pchVersion)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamClient _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamClient_GetISteamMusic(this._ptr, hSteamuser, hSteamPipe, pchVersion);
      }

      public virtual IntPtr ISteamClient_GetISteamMusicRemote(
        int hSteamuser,
        int hSteamPipe,
        string pchVersion)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamClient _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamClient_GetISteamMusicRemote(this._ptr, hSteamuser, hSteamPipe, pchVersion);
      }

      public virtual IntPtr ISteamClient_GetISteamHTMLSurface(
        int hSteamuser,
        int hSteamPipe,
        string pchVersion)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamClient _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamClient_GetISteamHTMLSurface(this._ptr, hSteamuser, hSteamPipe, pchVersion);
      }

      public virtual IntPtr ISteamClient_GetISteamInventory(
        int hSteamuser,
        int hSteamPipe,
        string pchVersion)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamClient _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamClient_GetISteamInventory(this._ptr, hSteamuser, hSteamPipe, pchVersion);
      }

      public virtual IntPtr ISteamClient_GetISteamVideo(
        int hSteamuser,
        int hSteamPipe,
        string pchVersion)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamClient _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamClient_GetISteamVideo(this._ptr, hSteamuser, hSteamPipe, pchVersion);
      }

      public virtual HSteamUser ISteamUser_GetHSteamUser()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamUser_GetHSteamUser(this._ptr) : throw new Exception("ISteamUser _ptr is null!");
      }

      public virtual bool ISteamUser_BLoggedOn()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamUser_BLoggedOn(this._ptr) : throw new Exception("ISteamUser _ptr is null!");
      }

      public virtual CSteamID ISteamUser_GetSteamID()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamUser_GetSteamID(this._ptr) : throw new Exception("ISteamUser _ptr is null!");
      }

      public virtual int ISteamUser_InitiateGameConnection(
        IntPtr pAuthBlob,
        int cbMaxAuthBlob,
        ulong steamIDGameServer,
        uint unIPServer,
        ushort usPortServer,
        [MarshalAs(UnmanagedType.U1)] bool bSecure)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUser _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamUser_InitiateGameConnection(this._ptr, pAuthBlob, cbMaxAuthBlob, steamIDGameServer, unIPServer, usPortServer, bSecure);
      }

      public virtual void ISteamUser_TerminateGameConnection(uint unIPServer, ushort usPortServer)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUser _ptr is null!");
        Platform.Win64.Native.SteamAPI_ISteamUser_TerminateGameConnection(this._ptr, unIPServer, usPortServer);
      }

      public virtual void ISteamUser_TrackAppUsageEvent(
        ulong gameID,
        int eAppUsageEvent,
        string pchExtraInfo)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUser _ptr is null!");
        Platform.Win64.Native.SteamAPI_ISteamUser_TrackAppUsageEvent(this._ptr, gameID, eAppUsageEvent, pchExtraInfo);
      }

      public virtual bool ISteamUser_GetUserDataFolder(StringBuilder pchBuffer, int cubBuffer)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUser _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamUser_GetUserDataFolder(this._ptr, pchBuffer, cubBuffer);
      }

      public virtual void ISteamUser_StartVoiceRecording()
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUser _ptr is null!");
        Platform.Win64.Native.SteamAPI_ISteamUser_StartVoiceRecording(this._ptr);
      }

      public virtual void ISteamUser_StopVoiceRecording()
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUser _ptr is null!");
        Platform.Win64.Native.SteamAPI_ISteamUser_StopVoiceRecording(this._ptr);
      }

      public virtual VoiceResult ISteamUser_GetAvailableVoice(
        out uint pcbCompressed,
        out uint pcbUncompressed_Deprecated,
        uint nUncompressedVoiceDesiredSampleRate_Deprecated)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamUser_GetAvailableVoice(this._ptr, out pcbCompressed, out pcbUncompressed_Deprecated, nUncompressedVoiceDesiredSampleRate_Deprecated) : throw new Exception("ISteamUser _ptr is null!");
      }

      public virtual VoiceResult ISteamUser_GetVoice(
        [MarshalAs(UnmanagedType.U1)] bool bWantCompressed,
        IntPtr pDestBuffer,
        uint cbDestBufferSize,
        out uint nBytesWritten,
        [MarshalAs(UnmanagedType.U1)] bool bWantUncompressed_Deprecated,
        IntPtr pUncompressedDestBuffer_Deprecated,
        uint cbUncompressedDestBufferSize_Deprecated,
        out uint nUncompressBytesWritten_Deprecated,
        uint nUncompressedVoiceDesiredSampleRate_Deprecated)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUser _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamUser_GetVoice(this._ptr, bWantCompressed, pDestBuffer, cbDestBufferSize, out nBytesWritten, bWantUncompressed_Deprecated, pUncompressedDestBuffer_Deprecated, cbUncompressedDestBufferSize_Deprecated, out nUncompressBytesWritten_Deprecated, nUncompressedVoiceDesiredSampleRate_Deprecated);
      }

      public virtual VoiceResult ISteamUser_DecompressVoice(
        IntPtr pCompressed,
        uint cbCompressed,
        IntPtr pDestBuffer,
        uint cbDestBufferSize,
        out uint nBytesWritten,
        uint nDesiredSampleRate)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUser _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamUser_DecompressVoice(this._ptr, pCompressed, cbCompressed, pDestBuffer, cbDestBufferSize, out nBytesWritten, nDesiredSampleRate);
      }

      public virtual uint ISteamUser_GetVoiceOptimalSampleRate()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamUser_GetVoiceOptimalSampleRate(this._ptr) : throw new Exception("ISteamUser _ptr is null!");
      }

      public virtual HAuthTicket ISteamUser_GetAuthSessionTicket(
        IntPtr pTicket,
        int cbMaxTicket,
        out uint pcbTicket)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUser _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamUser_GetAuthSessionTicket(this._ptr, pTicket, cbMaxTicket, out pcbTicket);
      }

      public virtual BeginAuthSessionResult ISteamUser_BeginAuthSession(
        IntPtr pAuthTicket,
        int cbAuthTicket,
        ulong steamID)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUser _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamUser_BeginAuthSession(this._ptr, pAuthTicket, cbAuthTicket, steamID);
      }

      public virtual void ISteamUser_EndAuthSession(ulong steamID)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUser _ptr is null!");
        Platform.Win64.Native.SteamAPI_ISteamUser_EndAuthSession(this._ptr, steamID);
      }

      public virtual void ISteamUser_CancelAuthTicket(uint hAuthTicket)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUser _ptr is null!");
        Platform.Win64.Native.SteamAPI_ISteamUser_CancelAuthTicket(this._ptr, hAuthTicket);
      }

      public virtual UserHasLicenseForAppResult ISteamUser_UserHasLicenseForApp(
        ulong steamID,
        uint appID)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUser _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamUser_UserHasLicenseForApp(this._ptr, steamID, appID);
      }

      public virtual bool ISteamUser_BIsBehindNAT()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamUser_BIsBehindNAT(this._ptr) : throw new Exception("ISteamUser _ptr is null!");
      }

      public virtual void ISteamUser_AdvertiseGame(
        ulong steamIDGameServer,
        uint unIPServer,
        ushort usPortServer)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUser _ptr is null!");
        Platform.Win64.Native.SteamAPI_ISteamUser_AdvertiseGame(this._ptr, steamIDGameServer, unIPServer, usPortServer);
      }

      public virtual SteamAPICall_t ISteamUser_RequestEncryptedAppTicket(
        IntPtr pDataToInclude,
        int cbDataToInclude)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUser _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamUser_RequestEncryptedAppTicket(this._ptr, pDataToInclude, cbDataToInclude);
      }

      public virtual bool ISteamUser_GetEncryptedAppTicket(
        IntPtr pTicket,
        int cbMaxTicket,
        out uint pcbTicket)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUser _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamUser_GetEncryptedAppTicket(this._ptr, pTicket, cbMaxTicket, out pcbTicket);
      }

      public virtual int ISteamUser_GetGameBadgeLevel(int nSeries, [MarshalAs(UnmanagedType.U1)] bool bFoil)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUser _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamUser_GetGameBadgeLevel(this._ptr, nSeries, bFoil);
      }

      public virtual int ISteamUser_GetPlayerSteamLevel()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamUser_GetPlayerSteamLevel(this._ptr) : throw new Exception("ISteamUser _ptr is null!");
      }

      public virtual SteamAPICall_t ISteamUser_RequestStoreAuthURL(string pchRedirectURL)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamUser_RequestStoreAuthURL(this._ptr, pchRedirectURL) : throw new Exception("ISteamUser _ptr is null!");
      }

      public virtual bool ISteamUser_BIsPhoneVerified()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamUser_BIsPhoneVerified(this._ptr) : throw new Exception("ISteamUser _ptr is null!");
      }

      public virtual bool ISteamUser_BIsTwoFactorEnabled()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamUser_BIsTwoFactorEnabled(this._ptr) : throw new Exception("ISteamUser _ptr is null!");
      }

      public virtual bool ISteamUser_BIsPhoneIdentifying()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamUser_BIsPhoneIdentifying(this._ptr) : throw new Exception("ISteamUser _ptr is null!");
      }

      public virtual bool ISteamUser_BIsPhoneRequiringVerification()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamUser_BIsPhoneRequiringVerification(this._ptr) : throw new Exception("ISteamUser _ptr is null!");
      }

      public virtual IntPtr ISteamFriends_GetPersonaName()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamFriends_GetPersonaName(this._ptr) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual SteamAPICall_t ISteamFriends_SetPersonaName(string pchPersonaName)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamFriends_SetPersonaName(this._ptr, pchPersonaName) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual PersonaState ISteamFriends_GetPersonaState()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamFriends_GetPersonaState(this._ptr) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual int ISteamFriends_GetFriendCount(int iFriendFlags)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamFriends_GetFriendCount(this._ptr, iFriendFlags) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual CSteamID ISteamFriends_GetFriendByIndex(int iFriend, int iFriendFlags)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamFriends _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamFriends_GetFriendByIndex(this._ptr, iFriend, iFriendFlags);
      }

      public virtual FriendRelationship ISteamFriends_GetFriendRelationship(ulong steamIDFriend)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamFriends_GetFriendRelationship(this._ptr, steamIDFriend) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual PersonaState ISteamFriends_GetFriendPersonaState(ulong steamIDFriend)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamFriends_GetFriendPersonaState(this._ptr, steamIDFriend) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual IntPtr ISteamFriends_GetFriendPersonaName(ulong steamIDFriend)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamFriends_GetFriendPersonaName(this._ptr, steamIDFriend) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual bool ISteamFriends_GetFriendGamePlayed(
        ulong steamIDFriend,
        ref FriendGameInfo_t pFriendGameInfo)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamFriends _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamFriends_GetFriendGamePlayed(this._ptr, steamIDFriend, ref pFriendGameInfo);
      }

      public virtual IntPtr ISteamFriends_GetFriendPersonaNameHistory(
        ulong steamIDFriend,
        int iPersonaName)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamFriends _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamFriends_GetFriendPersonaNameHistory(this._ptr, steamIDFriend, iPersonaName);
      }

      public virtual int ISteamFriends_GetFriendSteamLevel(ulong steamIDFriend)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamFriends_GetFriendSteamLevel(this._ptr, steamIDFriend) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual IntPtr ISteamFriends_GetPlayerNickname(ulong steamIDPlayer)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamFriends_GetPlayerNickname(this._ptr, steamIDPlayer) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual int ISteamFriends_GetFriendsGroupCount()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamFriends_GetFriendsGroupCount(this._ptr) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual FriendsGroupID_t ISteamFriends_GetFriendsGroupIDByIndex(int iFG)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamFriends_GetFriendsGroupIDByIndex(this._ptr, iFG) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual IntPtr ISteamFriends_GetFriendsGroupName(short friendsGroupID)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamFriends_GetFriendsGroupName(this._ptr, friendsGroupID) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual int ISteamFriends_GetFriendsGroupMembersCount(short friendsGroupID)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamFriends_GetFriendsGroupMembersCount(this._ptr, friendsGroupID) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual void ISteamFriends_GetFriendsGroupMembersList(
        short friendsGroupID,
        IntPtr pOutSteamIDMembers,
        int nMembersCount)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamFriends _ptr is null!");
        Platform.Win64.Native.SteamAPI_ISteamFriends_GetFriendsGroupMembersList(this._ptr, friendsGroupID, pOutSteamIDMembers, nMembersCount);
      }

      public virtual bool ISteamFriends_HasFriend(ulong steamIDFriend, int iFriendFlags)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamFriends _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamFriends_HasFriend(this._ptr, steamIDFriend, iFriendFlags);
      }

      public virtual int ISteamFriends_GetClanCount()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamFriends_GetClanCount(this._ptr) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual CSteamID ISteamFriends_GetClanByIndex(int iClan)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamFriends_GetClanByIndex(this._ptr, iClan) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual IntPtr ISteamFriends_GetClanName(ulong steamIDClan)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamFriends_GetClanName(this._ptr, steamIDClan) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual IntPtr ISteamFriends_GetClanTag(ulong steamIDClan)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamFriends_GetClanTag(this._ptr, steamIDClan) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual bool ISteamFriends_GetClanActivityCounts(
        ulong steamIDClan,
        out int pnOnline,
        out int pnInGame,
        out int pnChatting)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamFriends_GetClanActivityCounts(this._ptr, steamIDClan, out pnOnline, out pnInGame, out pnChatting) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual SteamAPICall_t ISteamFriends_DownloadClanActivityCounts(
        IntPtr psteamIDClans,
        int cClansToRequest)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamFriends _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamFriends_DownloadClanActivityCounts(this._ptr, psteamIDClans, cClansToRequest);
      }

      public virtual int ISteamFriends_GetFriendCountFromSource(ulong steamIDSource)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamFriends_GetFriendCountFromSource(this._ptr, steamIDSource) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual CSteamID ISteamFriends_GetFriendFromSourceByIndex(
        ulong steamIDSource,
        int iFriend)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamFriends _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamFriends_GetFriendFromSourceByIndex(this._ptr, steamIDSource, iFriend);
      }

      public virtual bool ISteamFriends_IsUserInSource(ulong steamIDUser, ulong steamIDSource)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamFriends _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamFriends_IsUserInSource(this._ptr, steamIDUser, steamIDSource);
      }

      public virtual void ISteamFriends_SetInGameVoiceSpeaking(ulong steamIDUser, [MarshalAs(UnmanagedType.U1)] bool bSpeaking)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamFriends _ptr is null!");
        Platform.Win64.Native.SteamAPI_ISteamFriends_SetInGameVoiceSpeaking(this._ptr, steamIDUser, bSpeaking);
      }

      public virtual void ISteamFriends_ActivateGameOverlay(string pchDialog)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamFriends _ptr is null!");
        Platform.Win64.Native.SteamAPI_ISteamFriends_ActivateGameOverlay(this._ptr, pchDialog);
      }

      public virtual void ISteamFriends_ActivateGameOverlayToUser(string pchDialog, ulong steamID)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamFriends _ptr is null!");
        Platform.Win64.Native.SteamAPI_ISteamFriends_ActivateGameOverlayToUser(this._ptr, pchDialog, steamID);
      }

      public virtual void ISteamFriends_ActivateGameOverlayToWebPage(string pchURL)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamFriends _ptr is null!");
        Platform.Win64.Native.SteamAPI_ISteamFriends_ActivateGameOverlayToWebPage(this._ptr, pchURL);
      }

      public virtual void ISteamFriends_ActivateGameOverlayToStore(
        uint nAppID,
        OverlayToStoreFlag eFlag)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamFriends _ptr is null!");
        Platform.Win64.Native.SteamAPI_ISteamFriends_ActivateGameOverlayToStore(this._ptr, nAppID, eFlag);
      }

      public virtual void ISteamFriends_SetPlayedWith(ulong steamIDUserPlayedWith)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamFriends _ptr is null!");
        Platform.Win64.Native.SteamAPI_ISteamFriends_SetPlayedWith(this._ptr, steamIDUserPlayedWith);
      }

      public virtual void ISteamFriends_ActivateGameOverlayInviteDialog(ulong steamIDLobby)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamFriends _ptr is null!");
        Platform.Win64.Native.SteamAPI_ISteamFriends_ActivateGameOverlayInviteDialog(this._ptr, steamIDLobby);
      }

      public virtual int ISteamFriends_GetSmallFriendAvatar(ulong steamIDFriend)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamFriends_GetSmallFriendAvatar(this._ptr, steamIDFriend) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual int ISteamFriends_GetMediumFriendAvatar(ulong steamIDFriend)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamFriends_GetMediumFriendAvatar(this._ptr, steamIDFriend) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual int ISteamFriends_GetLargeFriendAvatar(ulong steamIDFriend)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamFriends_GetLargeFriendAvatar(this._ptr, steamIDFriend) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual bool ISteamFriends_RequestUserInformation(
        ulong steamIDUser,
        [MarshalAs(UnmanagedType.U1)] bool bRequireNameOnly)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamFriends _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamFriends_RequestUserInformation(this._ptr, steamIDUser, bRequireNameOnly);
      }

      public virtual SteamAPICall_t ISteamFriends_RequestClanOfficerList(ulong steamIDClan)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamFriends_RequestClanOfficerList(this._ptr, steamIDClan) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual CSteamID ISteamFriends_GetClanOwner(ulong steamIDClan)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamFriends_GetClanOwner(this._ptr, steamIDClan) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual int ISteamFriends_GetClanOfficerCount(ulong steamIDClan)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamFriends_GetClanOfficerCount(this._ptr, steamIDClan) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual CSteamID ISteamFriends_GetClanOfficerByIndex(ulong steamIDClan, int iOfficer)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamFriends _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamFriends_GetClanOfficerByIndex(this._ptr, steamIDClan, iOfficer);
      }

      public virtual uint ISteamFriends_GetUserRestrictions()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamFriends_GetUserRestrictions(this._ptr) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual bool ISteamFriends_SetRichPresence(string pchKey, string pchValue)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamFriends _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamFriends_SetRichPresence(this._ptr, pchKey, pchValue);
      }

      public virtual void ISteamFriends_ClearRichPresence()
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamFriends _ptr is null!");
        Platform.Win64.Native.SteamAPI_ISteamFriends_ClearRichPresence(this._ptr);
      }

      public virtual IntPtr ISteamFriends_GetFriendRichPresence(ulong steamIDFriend, string pchKey)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamFriends _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamFriends_GetFriendRichPresence(this._ptr, steamIDFriend, pchKey);
      }

      public virtual int ISteamFriends_GetFriendRichPresenceKeyCount(ulong steamIDFriend)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamFriends_GetFriendRichPresenceKeyCount(this._ptr, steamIDFriend) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual IntPtr ISteamFriends_GetFriendRichPresenceKeyByIndex(
        ulong steamIDFriend,
        int iKey)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamFriends _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamFriends_GetFriendRichPresenceKeyByIndex(this._ptr, steamIDFriend, iKey);
      }

      public virtual void ISteamFriends_RequestFriendRichPresence(ulong steamIDFriend)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamFriends _ptr is null!");
        Platform.Win64.Native.SteamAPI_ISteamFriends_RequestFriendRichPresence(this._ptr, steamIDFriend);
      }

      public virtual bool ISteamFriends_InviteUserToGame(
        ulong steamIDFriend,
        string pchConnectString)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamFriends _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamFriends_InviteUserToGame(this._ptr, steamIDFriend, pchConnectString);
      }

      public virtual int ISteamFriends_GetCoplayFriendCount()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamFriends_GetCoplayFriendCount(this._ptr) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual CSteamID ISteamFriends_GetCoplayFriend(int iCoplayFriend)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamFriends_GetCoplayFriend(this._ptr, iCoplayFriend) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual int ISteamFriends_GetFriendCoplayTime(ulong steamIDFriend)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamFriends_GetFriendCoplayTime(this._ptr, steamIDFriend) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual AppId_t ISteamFriends_GetFriendCoplayGame(ulong steamIDFriend)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamFriends_GetFriendCoplayGame(this._ptr, steamIDFriend) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual SteamAPICall_t ISteamFriends_JoinClanChatRoom(ulong steamIDClan)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamFriends_JoinClanChatRoom(this._ptr, steamIDClan) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual bool ISteamFriends_LeaveClanChatRoom(ulong steamIDClan)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamFriends_LeaveClanChatRoom(this._ptr, steamIDClan) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual int ISteamFriends_GetClanChatMemberCount(ulong steamIDClan)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamFriends_GetClanChatMemberCount(this._ptr, steamIDClan) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual CSteamID ISteamFriends_GetChatMemberByIndex(ulong steamIDClan, int iUser)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamFriends _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamFriends_GetChatMemberByIndex(this._ptr, steamIDClan, iUser);
      }

      public virtual bool ISteamFriends_SendClanChatMessage(ulong steamIDClanChat, string pchText)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamFriends _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamFriends_SendClanChatMessage(this._ptr, steamIDClanChat, pchText);
      }

      public virtual int ISteamFriends_GetClanChatMessage(
        ulong steamIDClanChat,
        int iMessage,
        IntPtr prgchText,
        int cchTextMax,
        out ChatEntryType peChatEntryType,
        out ulong psteamidChatter)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamFriends _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamFriends_GetClanChatMessage(this._ptr, steamIDClanChat, iMessage, prgchText, cchTextMax, out peChatEntryType, out psteamidChatter);
      }

      public virtual bool ISteamFriends_IsClanChatAdmin(ulong steamIDClanChat, ulong steamIDUser)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamFriends _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamFriends_IsClanChatAdmin(this._ptr, steamIDClanChat, steamIDUser);
      }

      public virtual bool ISteamFriends_IsClanChatWindowOpenInSteam(ulong steamIDClanChat)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamFriends_IsClanChatWindowOpenInSteam(this._ptr, steamIDClanChat) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual bool ISteamFriends_OpenClanChatWindowInSteam(ulong steamIDClanChat)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamFriends_OpenClanChatWindowInSteam(this._ptr, steamIDClanChat) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual bool ISteamFriends_CloseClanChatWindowInSteam(ulong steamIDClanChat)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamFriends_CloseClanChatWindowInSteam(this._ptr, steamIDClanChat) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual bool ISteamFriends_SetListenForFriendsMessages([MarshalAs(UnmanagedType.U1)] bool bInterceptEnabled)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamFriends_SetListenForFriendsMessages(this._ptr, bInterceptEnabled) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual bool ISteamFriends_ReplyToFriendMessage(
        ulong steamIDFriend,
        string pchMsgToSend)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamFriends _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamFriends_ReplyToFriendMessage(this._ptr, steamIDFriend, pchMsgToSend);
      }

      public virtual int ISteamFriends_GetFriendMessage(
        ulong steamIDFriend,
        int iMessageID,
        IntPtr pvData,
        int cubData,
        out ChatEntryType peChatEntryType)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamFriends _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamFriends_GetFriendMessage(this._ptr, steamIDFriend, iMessageID, pvData, cubData, out peChatEntryType);
      }

      public virtual SteamAPICall_t ISteamFriends_GetFollowerCount(ulong steamID)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamFriends_GetFollowerCount(this._ptr, steamID) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual SteamAPICall_t ISteamFriends_IsFollowing(ulong steamID)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamFriends_IsFollowing(this._ptr, steamID) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual SteamAPICall_t ISteamFriends_EnumerateFollowingList(uint unStartIndex)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamFriends_EnumerateFollowingList(this._ptr, unStartIndex) : throw new Exception("ISteamFriends _ptr is null!");
      }

      public virtual uint ISteamUtils_GetSecondsSinceAppActive()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamUtils_GetSecondsSinceAppActive(this._ptr) : throw new Exception("ISteamUtils _ptr is null!");
      }

      public virtual uint ISteamUtils_GetSecondsSinceComputerActive()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamUtils_GetSecondsSinceComputerActive(this._ptr) : throw new Exception("ISteamUtils _ptr is null!");
      }

      public virtual Universe ISteamUtils_GetConnectedUniverse()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamUtils_GetConnectedUniverse(this._ptr) : throw new Exception("ISteamUtils _ptr is null!");
      }

      public virtual uint ISteamUtils_GetServerRealTime()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamUtils_GetServerRealTime(this._ptr) : throw new Exception("ISteamUtils _ptr is null!");
      }

      public virtual IntPtr ISteamUtils_GetIPCountry()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamUtils_GetIPCountry(this._ptr) : throw new Exception("ISteamUtils _ptr is null!");
      }

      public virtual bool ISteamUtils_GetImageSize(int iImage, out uint pnWidth, out uint pnHeight)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamUtils_GetImageSize(this._ptr, iImage, out pnWidth, out pnHeight) : throw new Exception("ISteamUtils _ptr is null!");
      }

      public virtual bool ISteamUtils_GetImageRGBA(int iImage, IntPtr pubDest, int nDestBufferSize)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUtils _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamUtils_GetImageRGBA(this._ptr, iImage, pubDest, nDestBufferSize);
      }

      public virtual bool ISteamUtils_GetCSERIPPort(out uint unIP, out ushort usPort)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamUtils_GetCSERIPPort(this._ptr, out unIP, out usPort) : throw new Exception("ISteamUtils _ptr is null!");
      }

      public virtual byte ISteamUtils_GetCurrentBatteryPower()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamUtils_GetCurrentBatteryPower(this._ptr) : throw new Exception("ISteamUtils _ptr is null!");
      }

      public virtual uint ISteamUtils_GetAppID()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamUtils_GetAppID(this._ptr) : throw new Exception("ISteamUtils _ptr is null!");
      }

      public virtual void ISteamUtils_SetOverlayNotificationPosition(
        NotificationPosition eNotificationPosition)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUtils _ptr is null!");
        Platform.Win64.Native.SteamAPI_ISteamUtils_SetOverlayNotificationPosition(this._ptr, eNotificationPosition);
      }

      public virtual bool ISteamUtils_IsAPICallCompleted(ulong hSteamAPICall, [MarshalAs(UnmanagedType.U1)] ref bool pbFailed)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUtils _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamUtils_IsAPICallCompleted(this._ptr, hSteamAPICall, ref pbFailed);
      }

      public virtual SteamAPICallFailure ISteamUtils_GetAPICallFailureReason(ulong hSteamAPICall)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamUtils_GetAPICallFailureReason(this._ptr, hSteamAPICall) : throw new Exception("ISteamUtils _ptr is null!");
      }

      public virtual bool ISteamUtils_GetAPICallResult(
        ulong hSteamAPICall,
        IntPtr pCallback,
        int cubCallback,
        int iCallbackExpected,
        [MarshalAs(UnmanagedType.U1)] ref bool pbFailed)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUtils _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamUtils_GetAPICallResult(this._ptr, hSteamAPICall, pCallback, cubCallback, iCallbackExpected, ref pbFailed);
      }

      public virtual uint ISteamUtils_GetIPCCallCount()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamUtils_GetIPCCallCount(this._ptr) : throw new Exception("ISteamUtils _ptr is null!");
      }

      public virtual void ISteamUtils_SetWarningMessageHook(IntPtr pFunction)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUtils _ptr is null!");
        Platform.Win64.Native.SteamAPI_ISteamUtils_SetWarningMessageHook(this._ptr, pFunction);
      }

      public virtual bool ISteamUtils_IsOverlayEnabled()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamUtils_IsOverlayEnabled(this._ptr) : throw new Exception("ISteamUtils _ptr is null!");
      }

      public virtual bool ISteamUtils_BOverlayNeedsPresent()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamUtils_BOverlayNeedsPresent(this._ptr) : throw new Exception("ISteamUtils _ptr is null!");
      }

      public virtual SteamAPICall_t ISteamUtils_CheckFileSignature(string szFileName)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamUtils_CheckFileSignature(this._ptr, szFileName) : throw new Exception("ISteamUtils _ptr is null!");
      }

      public virtual bool ISteamUtils_ShowGamepadTextInput(
        GamepadTextInputMode eInputMode,
        GamepadTextInputLineMode eLineInputMode,
        string pchDescription,
        uint unCharMax,
        string pchExistingText)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUtils _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamUtils_ShowGamepadTextInput(this._ptr, eInputMode, eLineInputMode, pchDescription, unCharMax, pchExistingText);
      }

      public virtual uint ISteamUtils_GetEnteredGamepadTextLength()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamUtils_GetEnteredGamepadTextLength(this._ptr) : throw new Exception("ISteamUtils _ptr is null!");
      }

      public virtual bool ISteamUtils_GetEnteredGamepadTextInput(
        StringBuilder pchText,
        uint cchText)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUtils _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamUtils_GetEnteredGamepadTextInput(this._ptr, pchText, cchText);
      }

      public virtual IntPtr ISteamUtils_GetSteamUILanguage()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamUtils_GetSteamUILanguage(this._ptr) : throw new Exception("ISteamUtils _ptr is null!");
      }

      public virtual bool ISteamUtils_IsSteamRunningInVR()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamUtils_IsSteamRunningInVR(this._ptr) : throw new Exception("ISteamUtils _ptr is null!");
      }

      public virtual void ISteamUtils_SetOverlayNotificationInset(
        int nHorizontalInset,
        int nVerticalInset)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUtils _ptr is null!");
        Platform.Win64.Native.SteamAPI_ISteamUtils_SetOverlayNotificationInset(this._ptr, nHorizontalInset, nVerticalInset);
      }

      public virtual bool ISteamUtils_IsSteamInBigPictureMode()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamUtils_IsSteamInBigPictureMode(this._ptr) : throw new Exception("ISteamUtils _ptr is null!");
      }

      public virtual void ISteamUtils_StartVRDashboard()
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUtils _ptr is null!");
        Platform.Win64.Native.SteamAPI_ISteamUtils_StartVRDashboard(this._ptr);
      }

      public virtual bool ISteamUtils_IsVRHeadsetStreamingEnabled()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamUtils_IsVRHeadsetStreamingEnabled(this._ptr) : throw new Exception("ISteamUtils _ptr is null!");
      }

      public virtual void ISteamUtils_SetVRHeadsetStreamingEnabled([MarshalAs(UnmanagedType.U1)] bool bEnabled)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUtils _ptr is null!");
        Platform.Win64.Native.SteamAPI_ISteamUtils_SetVRHeadsetStreamingEnabled(this._ptr, bEnabled);
      }

      public virtual int ISteamMatchmaking_GetFavoriteGameCount()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamMatchmaking_GetFavoriteGameCount(this._ptr) : throw new Exception("ISteamMatchmaking _ptr is null!");
      }

      public virtual bool ISteamMatchmaking_GetFavoriteGame(
        int iGame,
        ref uint pnAppID,
        out uint pnIP,
        out ushort pnConnPort,
        out ushort pnQueryPort,
        out uint punFlags,
        out uint pRTime32LastPlayedOnServer)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmaking _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamMatchmaking_GetFavoriteGame(this._ptr, iGame, ref pnAppID, out pnIP, out pnConnPort, out pnQueryPort, out punFlags, out pRTime32LastPlayedOnServer);
      }

      public virtual int ISteamMatchmaking_AddFavoriteGame(
        uint nAppID,
        uint nIP,
        ushort nConnPort,
        ushort nQueryPort,
        uint unFlags,
        uint rTime32LastPlayedOnServer)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmaking _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamMatchmaking_AddFavoriteGame(this._ptr, nAppID, nIP, nConnPort, nQueryPort, unFlags, rTime32LastPlayedOnServer);
      }

      public virtual bool ISteamMatchmaking_RemoveFavoriteGame(
        uint nAppID,
        uint nIP,
        ushort nConnPort,
        ushort nQueryPort,
        uint unFlags)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmaking _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamMatchmaking_RemoveFavoriteGame(this._ptr, nAppID, nIP, nConnPort, nQueryPort, unFlags);
      }

      public virtual SteamAPICall_t ISteamMatchmaking_RequestLobbyList()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamMatchmaking_RequestLobbyList(this._ptr) : throw new Exception("ISteamMatchmaking _ptr is null!");
      }

      public virtual void ISteamMatchmaking_AddRequestLobbyListStringFilter(
        string pchKeyToMatch,
        string pchValueToMatch,
        LobbyComparison eComparisonType)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmaking _ptr is null!");
        Platform.Win64.Native.SteamAPI_ISteamMatchmaking_AddRequestLobbyListStringFilter(this._ptr, pchKeyToMatch, pchValueToMatch, eComparisonType);
      }

      public virtual void ISteamMatchmaking_AddRequestLobbyListNumericalFilter(
        string pchKeyToMatch,
        int nValueToMatch,
        LobbyComparison eComparisonType)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmaking _ptr is null!");
        Platform.Win64.Native.SteamAPI_ISteamMatchmaking_AddRequestLobbyListNumericalFilter(this._ptr, pchKeyToMatch, nValueToMatch, eComparisonType);
      }

      public virtual void ISteamMatchmaking_AddRequestLobbyListNearValueFilter(
        string pchKeyToMatch,
        int nValueToBeCloseTo)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmaking _ptr is null!");
        Platform.Win64.Native.SteamAPI_ISteamMatchmaking_AddRequestLobbyListNearValueFilter(this._ptr, pchKeyToMatch, nValueToBeCloseTo);
      }

      public virtual void ISteamMatchmaking_AddRequestLobbyListFilterSlotsAvailable(
        int nSlotsAvailable)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmaking _ptr is null!");
        Platform.Win64.Native.SteamAPI_ISteamMatchmaking_AddRequestLobbyListFilterSlotsAvailable(this._ptr, nSlotsAvailable);
      }

      public virtual void ISteamMatchmaking_AddRequestLobbyListDistanceFilter(
        LobbyDistanceFilter eLobbyDistanceFilter)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmaking _ptr is null!");
        Platform.Win64.Native.SteamAPI_ISteamMatchmaking_AddRequestLobbyListDistanceFilter(this._ptr, eLobbyDistanceFilter);
      }

      public virtual void ISteamMatchmaking_AddRequestLobbyListResultCountFilter(int cMaxResults)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmaking _ptr is null!");
        Platform.Win64.Native.SteamAPI_ISteamMatchmaking_AddRequestLobbyListResultCountFilter(this._ptr, cMaxResults);
      }

      public virtual void ISteamMatchmaking_AddRequestLobbyListCompatibleMembersFilter(
        ulong steamIDLobby)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmaking _ptr is null!");
        Platform.Win64.Native.SteamAPI_ISteamMatchmaking_AddRequestLobbyListCompatibleMembersFilter(this._ptr, steamIDLobby);
      }

      public virtual CSteamID ISteamMatchmaking_GetLobbyByIndex(int iLobby)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamMatchmaking_GetLobbyByIndex(this._ptr, iLobby) : throw new Exception("ISteamMatchmaking _ptr is null!");
      }

      public virtual SteamAPICall_t ISteamMatchmaking_CreateLobby(
        LobbyType eLobbyType,
        int cMaxMembers)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmaking _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamMatchmaking_CreateLobby(this._ptr, eLobbyType, cMaxMembers);
      }

      public virtual SteamAPICall_t ISteamMatchmaking_JoinLobby(ulong steamIDLobby)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamMatchmaking_JoinLobby(this._ptr, steamIDLobby) : throw new Exception("ISteamMatchmaking _ptr is null!");
      }

      public virtual void ISteamMatchmaking_LeaveLobby(ulong steamIDLobby)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmaking _ptr is null!");
        Platform.Win64.Native.SteamAPI_ISteamMatchmaking_LeaveLobby(this._ptr, steamIDLobby);
      }

      public virtual bool ISteamMatchmaking_InviteUserToLobby(
        ulong steamIDLobby,
        ulong steamIDInvitee)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmaking _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamMatchmaking_InviteUserToLobby(this._ptr, steamIDLobby, steamIDInvitee);
      }

      public virtual int ISteamMatchmaking_GetNumLobbyMembers(ulong steamIDLobby)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamMatchmaking_GetNumLobbyMembers(this._ptr, steamIDLobby) : throw new Exception("ISteamMatchmaking _ptr is null!");
      }

      public virtual CSteamID ISteamMatchmaking_GetLobbyMemberByIndex(
        ulong steamIDLobby,
        int iMember)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmaking _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamMatchmaking_GetLobbyMemberByIndex(this._ptr, steamIDLobby, iMember);
      }

      public virtual IntPtr ISteamMatchmaking_GetLobbyData(ulong steamIDLobby, string pchKey)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmaking _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamMatchmaking_GetLobbyData(this._ptr, steamIDLobby, pchKey);
      }

      public virtual bool ISteamMatchmaking_SetLobbyData(
        ulong steamIDLobby,
        string pchKey,
        string pchValue)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmaking _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamMatchmaking_SetLobbyData(this._ptr, steamIDLobby, pchKey, pchValue);
      }

      public virtual int ISteamMatchmaking_GetLobbyDataCount(ulong steamIDLobby)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamMatchmaking_GetLobbyDataCount(this._ptr, steamIDLobby) : throw new Exception("ISteamMatchmaking _ptr is null!");
      }

      public virtual bool ISteamMatchmaking_GetLobbyDataByIndex(
        ulong steamIDLobby,
        int iLobbyData,
        StringBuilder pchKey,
        int cchKeyBufferSize,
        StringBuilder pchValue,
        int cchValueBufferSize)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmaking _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamMatchmaking_GetLobbyDataByIndex(this._ptr, steamIDLobby, iLobbyData, pchKey, cchKeyBufferSize, pchValue, cchValueBufferSize);
      }

      public virtual bool ISteamMatchmaking_DeleteLobbyData(ulong steamIDLobby, string pchKey)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmaking _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamMatchmaking_DeleteLobbyData(this._ptr, steamIDLobby, pchKey);
      }

      public virtual IntPtr ISteamMatchmaking_GetLobbyMemberData(
        ulong steamIDLobby,
        ulong steamIDUser,
        string pchKey)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmaking _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamMatchmaking_GetLobbyMemberData(this._ptr, steamIDLobby, steamIDUser, pchKey);
      }

      public virtual void ISteamMatchmaking_SetLobbyMemberData(
        ulong steamIDLobby,
        string pchKey,
        string pchValue)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmaking _ptr is null!");
        Platform.Win64.Native.SteamAPI_ISteamMatchmaking_SetLobbyMemberData(this._ptr, steamIDLobby, pchKey, pchValue);
      }

      public virtual bool ISteamMatchmaking_SendLobbyChatMsg(
        ulong steamIDLobby,
        IntPtr pvMsgBody,
        int cubMsgBody)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmaking _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamMatchmaking_SendLobbyChatMsg(this._ptr, steamIDLobby, pvMsgBody, cubMsgBody);
      }

      public virtual int ISteamMatchmaking_GetLobbyChatEntry(
        ulong steamIDLobby,
        int iChatID,
        out ulong pSteamIDUser,
        IntPtr pvData,
        int cubData,
        out ChatEntryType peChatEntryType)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmaking _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamMatchmaking_GetLobbyChatEntry(this._ptr, steamIDLobby, iChatID, out pSteamIDUser, pvData, cubData, out peChatEntryType);
      }

      public virtual bool ISteamMatchmaking_RequestLobbyData(ulong steamIDLobby)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamMatchmaking_RequestLobbyData(this._ptr, steamIDLobby) : throw new Exception("ISteamMatchmaking _ptr is null!");
      }

      public virtual void ISteamMatchmaking_SetLobbyGameServer(
        ulong steamIDLobby,
        uint unGameServerIP,
        ushort unGameServerPort,
        ulong steamIDGameServer)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmaking _ptr is null!");
        Platform.Win64.Native.SteamAPI_ISteamMatchmaking_SetLobbyGameServer(this._ptr, steamIDLobby, unGameServerIP, unGameServerPort, steamIDGameServer);
      }

      public virtual bool ISteamMatchmaking_GetLobbyGameServer(
        ulong steamIDLobby,
        out uint punGameServerIP,
        out ushort punGameServerPort,
        out ulong psteamIDGameServer)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamMatchmaking_GetLobbyGameServer(this._ptr, steamIDLobby, out punGameServerIP, out punGameServerPort, out psteamIDGameServer) : throw new Exception("ISteamMatchmaking _ptr is null!");
      }

      public virtual bool ISteamMatchmaking_SetLobbyMemberLimit(ulong steamIDLobby, int cMaxMembers)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmaking _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamMatchmaking_SetLobbyMemberLimit(this._ptr, steamIDLobby, cMaxMembers);
      }

      public virtual int ISteamMatchmaking_GetLobbyMemberLimit(ulong steamIDLobby)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamMatchmaking_GetLobbyMemberLimit(this._ptr, steamIDLobby) : throw new Exception("ISteamMatchmaking _ptr is null!");
      }

      public virtual bool ISteamMatchmaking_SetLobbyType(ulong steamIDLobby, LobbyType eLobbyType)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmaking _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamMatchmaking_SetLobbyType(this._ptr, steamIDLobby, eLobbyType);
      }

      public virtual bool ISteamMatchmaking_SetLobbyJoinable(
        ulong steamIDLobby,
        [MarshalAs(UnmanagedType.U1)] bool bLobbyJoinable)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmaking _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamMatchmaking_SetLobbyJoinable(this._ptr, steamIDLobby, bLobbyJoinable);
      }

      public virtual CSteamID ISteamMatchmaking_GetLobbyOwner(ulong steamIDLobby)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamMatchmaking_GetLobbyOwner(this._ptr, steamIDLobby) : throw new Exception("ISteamMatchmaking _ptr is null!");
      }

      public virtual bool ISteamMatchmaking_SetLobbyOwner(ulong steamIDLobby, ulong steamIDNewOwner)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmaking _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamMatchmaking_SetLobbyOwner(this._ptr, steamIDLobby, steamIDNewOwner);
      }

      public virtual bool ISteamMatchmaking_SetLinkedLobby(
        ulong steamIDLobby,
        ulong steamIDLobbyDependent)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmaking _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamMatchmaking_SetLinkedLobby(this._ptr, steamIDLobby, steamIDLobbyDependent);
      }

      public virtual HServerListRequest ISteamMatchmakingServers_RequestInternetServerList(
        uint iApp,
        IntPtr ppchFilters,
        uint nFilters,
        IntPtr pRequestServersResponse)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmakingServers _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamMatchmakingServers_RequestInternetServerList(this._ptr, iApp, ppchFilters, nFilters, pRequestServersResponse);
      }

      public virtual HServerListRequest ISteamMatchmakingServers_RequestLANServerList(
        uint iApp,
        IntPtr pRequestServersResponse)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmakingServers _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamMatchmakingServers_RequestLANServerList(this._ptr, iApp, pRequestServersResponse);
      }

      public virtual HServerListRequest ISteamMatchmakingServers_RequestFriendsServerList(
        uint iApp,
        IntPtr ppchFilters,
        uint nFilters,
        IntPtr pRequestServersResponse)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmakingServers _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamMatchmakingServers_RequestFriendsServerList(this._ptr, iApp, ppchFilters, nFilters, pRequestServersResponse);
      }

      public virtual HServerListRequest ISteamMatchmakingServers_RequestFavoritesServerList(
        uint iApp,
        IntPtr ppchFilters,
        uint nFilters,
        IntPtr pRequestServersResponse)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmakingServers _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamMatchmakingServers_RequestFavoritesServerList(this._ptr, iApp, ppchFilters, nFilters, pRequestServersResponse);
      }

      public virtual HServerListRequest ISteamMatchmakingServers_RequestHistoryServerList(
        uint iApp,
        IntPtr ppchFilters,
        uint nFilters,
        IntPtr pRequestServersResponse)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmakingServers _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamMatchmakingServers_RequestHistoryServerList(this._ptr, iApp, ppchFilters, nFilters, pRequestServersResponse);
      }

      public virtual HServerListRequest ISteamMatchmakingServers_RequestSpectatorServerList(
        uint iApp,
        IntPtr ppchFilters,
        uint nFilters,
        IntPtr pRequestServersResponse)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmakingServers _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamMatchmakingServers_RequestSpectatorServerList(this._ptr, iApp, ppchFilters, nFilters, pRequestServersResponse);
      }

      public virtual void ISteamMatchmakingServers_ReleaseRequest(IntPtr hServerListRequest)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmakingServers _ptr is null!");
        Platform.Win64.Native.SteamAPI_ISteamMatchmakingServers_ReleaseRequest(this._ptr, hServerListRequest);
      }

      public virtual IntPtr ISteamMatchmakingServers_GetServerDetails(IntPtr hRequest, int iServer)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmakingServers _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamMatchmakingServers_GetServerDetails(this._ptr, hRequest, iServer);
      }

      public virtual void ISteamMatchmakingServers_CancelQuery(IntPtr hRequest)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmakingServers _ptr is null!");
        Platform.Win64.Native.SteamAPI_ISteamMatchmakingServers_CancelQuery(this._ptr, hRequest);
      }

      public virtual void ISteamMatchmakingServers_RefreshQuery(IntPtr hRequest)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmakingServers _ptr is null!");
        Platform.Win64.Native.SteamAPI_ISteamMatchmakingServers_RefreshQuery(this._ptr, hRequest);
      }

      public virtual bool ISteamMatchmakingServers_IsRefreshing(IntPtr hRequest)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamMatchmakingServers_IsRefreshing(this._ptr, hRequest) : throw new Exception("ISteamMatchmakingServers _ptr is null!");
      }

      public virtual int ISteamMatchmakingServers_GetServerCount(IntPtr hRequest)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamMatchmakingServers_GetServerCount(this._ptr, hRequest) : throw new Exception("ISteamMatchmakingServers _ptr is null!");
      }

      public virtual void ISteamMatchmakingServers_RefreshServer(IntPtr hRequest, int iServer)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmakingServers _ptr is null!");
        Platform.Win64.Native.SteamAPI_ISteamMatchmakingServers_RefreshServer(this._ptr, hRequest, iServer);
      }

      public virtual HServerQuery ISteamMatchmakingServers_PingServer(
        uint unIP,
        ushort usPort,
        IntPtr pRequestServersResponse)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmakingServers _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamMatchmakingServers_PingServer(this._ptr, unIP, usPort, pRequestServersResponse);
      }

      public virtual HServerQuery ISteamMatchmakingServers_PlayerDetails(
        uint unIP,
        ushort usPort,
        IntPtr pRequestServersResponse)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmakingServers _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamMatchmakingServers_PlayerDetails(this._ptr, unIP, usPort, pRequestServersResponse);
      }

      public virtual HServerQuery ISteamMatchmakingServers_ServerRules(
        uint unIP,
        ushort usPort,
        IntPtr pRequestServersResponse)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmakingServers _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamMatchmakingServers_ServerRules(this._ptr, unIP, usPort, pRequestServersResponse);
      }

      public virtual void ISteamMatchmakingServers_CancelServerQuery(int hServerQuery)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMatchmakingServers _ptr is null!");
        Platform.Win64.Native.SteamAPI_ISteamMatchmakingServers_CancelServerQuery(this._ptr, hServerQuery);
      }

      public virtual bool ISteamRemoteStorage_FileWrite(string pchFile, IntPtr pvData, int cubData)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamRemoteStorage _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamRemoteStorage_FileWrite(this._ptr, pchFile, pvData, cubData);
      }

      public virtual int ISteamRemoteStorage_FileRead(
        string pchFile,
        IntPtr pvData,
        int cubDataToRead)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamRemoteStorage _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamRemoteStorage_FileRead(this._ptr, pchFile, pvData, cubDataToRead);
      }

      public virtual SteamAPICall_t ISteamRemoteStorage_FileWriteAsync(
        string pchFile,
        IntPtr pvData,
        uint cubData)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamRemoteStorage _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamRemoteStorage_FileWriteAsync(this._ptr, pchFile, pvData, cubData);
      }

      public virtual SteamAPICall_t ISteamRemoteStorage_FileReadAsync(
        string pchFile,
        uint nOffset,
        uint cubToRead)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamRemoteStorage _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamRemoteStorage_FileReadAsync(this._ptr, pchFile, nOffset, cubToRead);
      }

      public virtual bool ISteamRemoteStorage_FileReadAsyncComplete(
        ulong hReadCall,
        IntPtr pvBuffer,
        uint cubToRead)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamRemoteStorage _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamRemoteStorage_FileReadAsyncComplete(this._ptr, hReadCall, pvBuffer, cubToRead);
      }

      public virtual bool ISteamRemoteStorage_FileForget(string pchFile)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamRemoteStorage_FileForget(this._ptr, pchFile) : throw new Exception("ISteamRemoteStorage _ptr is null!");
      }

      public virtual bool ISteamRemoteStorage_FileDelete(string pchFile)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamRemoteStorage_FileDelete(this._ptr, pchFile) : throw new Exception("ISteamRemoteStorage _ptr is null!");
      }

      public virtual SteamAPICall_t ISteamRemoteStorage_FileShare(string pchFile)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamRemoteStorage_FileShare(this._ptr, pchFile) : throw new Exception("ISteamRemoteStorage _ptr is null!");
      }

      public virtual bool ISteamRemoteStorage_SetSyncPlatforms(
        string pchFile,
        RemoteStoragePlatform eRemoteStoragePlatform)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamRemoteStorage _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamRemoteStorage_SetSyncPlatforms(this._ptr, pchFile, eRemoteStoragePlatform);
      }

      public virtual UGCFileWriteStreamHandle_t ISteamRemoteStorage_FileWriteStreamOpen(
        string pchFile)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamRemoteStorage_FileWriteStreamOpen(this._ptr, pchFile) : throw new Exception("ISteamRemoteStorage _ptr is null!");
      }

      public virtual bool ISteamRemoteStorage_FileWriteStreamWriteChunk(
        ulong writeHandle,
        IntPtr pvData,
        int cubData)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamRemoteStorage _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamRemoteStorage_FileWriteStreamWriteChunk(this._ptr, writeHandle, pvData, cubData);
      }

      public virtual bool ISteamRemoteStorage_FileWriteStreamClose(ulong writeHandle)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamRemoteStorage_FileWriteStreamClose(this._ptr, writeHandle) : throw new Exception("ISteamRemoteStorage _ptr is null!");
      }

      public virtual bool ISteamRemoteStorage_FileWriteStreamCancel(ulong writeHandle)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamRemoteStorage_FileWriteStreamCancel(this._ptr, writeHandle) : throw new Exception("ISteamRemoteStorage _ptr is null!");
      }

      public virtual bool ISteamRemoteStorage_FileExists(string pchFile)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamRemoteStorage_FileExists(this._ptr, pchFile) : throw new Exception("ISteamRemoteStorage _ptr is null!");
      }

      public virtual bool ISteamRemoteStorage_FilePersisted(string pchFile)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamRemoteStorage_FilePersisted(this._ptr, pchFile) : throw new Exception("ISteamRemoteStorage _ptr is null!");
      }

      public virtual int ISteamRemoteStorage_GetFileSize(string pchFile)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamRemoteStorage_GetFileSize(this._ptr, pchFile) : throw new Exception("ISteamRemoteStorage _ptr is null!");
      }

      public virtual long ISteamRemoteStorage_GetFileTimestamp(string pchFile)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamRemoteStorage_GetFileTimestamp(this._ptr, pchFile) : throw new Exception("ISteamRemoteStorage _ptr is null!");
      }

      public virtual RemoteStoragePlatform ISteamRemoteStorage_GetSyncPlatforms(string pchFile)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamRemoteStorage_GetSyncPlatforms(this._ptr, pchFile) : throw new Exception("ISteamRemoteStorage _ptr is null!");
      }

      public virtual int ISteamRemoteStorage_GetFileCount()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamRemoteStorage_GetFileCount(this._ptr) : throw new Exception("ISteamRemoteStorage _ptr is null!");
      }

      public virtual IntPtr ISteamRemoteStorage_GetFileNameAndSize(
        int iFile,
        out int pnFileSizeInBytes)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamRemoteStorage_GetFileNameAndSize(this._ptr, iFile, out pnFileSizeInBytes) : throw new Exception("ISteamRemoteStorage _ptr is null!");
      }

      public virtual bool ISteamRemoteStorage_GetQuota(
        out ulong pnTotalBytes,
        out ulong puAvailableBytes)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamRemoteStorage_GetQuota(this._ptr, out pnTotalBytes, out puAvailableBytes) : throw new Exception("ISteamRemoteStorage _ptr is null!");
      }

      public virtual bool ISteamRemoteStorage_IsCloudEnabledForAccount()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamRemoteStorage_IsCloudEnabledForAccount(this._ptr) : throw new Exception("ISteamRemoteStorage _ptr is null!");
      }

      public virtual bool ISteamRemoteStorage_IsCloudEnabledForApp()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamRemoteStorage_IsCloudEnabledForApp(this._ptr) : throw new Exception("ISteamRemoteStorage _ptr is null!");
      }

      public virtual void ISteamRemoteStorage_SetCloudEnabledForApp([MarshalAs(UnmanagedType.U1)] bool bEnabled)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamRemoteStorage _ptr is null!");
        Platform.Win64.Native.SteamAPI_ISteamRemoteStorage_SetCloudEnabledForApp(this._ptr, bEnabled);
      }

      public virtual SteamAPICall_t ISteamRemoteStorage_UGCDownload(ulong hContent, uint unPriority)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamRemoteStorage _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamRemoteStorage_UGCDownload(this._ptr, hContent, unPriority);
      }

      public virtual bool ISteamRemoteStorage_GetUGCDownloadProgress(
        ulong hContent,
        out int pnBytesDownloaded,
        out int pnBytesExpected)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamRemoteStorage_GetUGCDownloadProgress(this._ptr, hContent, out pnBytesDownloaded, out pnBytesExpected) : throw new Exception("ISteamRemoteStorage _ptr is null!");
      }

      public virtual bool ISteamRemoteStorage_GetUGCDetails(
        ulong hContent,
        ref uint pnAppID,
        StringBuilder ppchName,
        out int pnFileSizeInBytes,
        out ulong pSteamIDOwner)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamRemoteStorage _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamRemoteStorage_GetUGCDetails(this._ptr, hContent, ref pnAppID, ppchName, out pnFileSizeInBytes, out pSteamIDOwner);
      }

      public virtual int ISteamRemoteStorage_UGCRead(
        ulong hContent,
        IntPtr pvData,
        int cubDataToRead,
        uint cOffset,
        UGCReadAction eAction)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamRemoteStorage _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamRemoteStorage_UGCRead(this._ptr, hContent, pvData, cubDataToRead, cOffset, eAction);
      }

      public virtual int ISteamRemoteStorage_GetCachedUGCCount()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamRemoteStorage_GetCachedUGCCount(this._ptr) : throw new Exception("ISteamRemoteStorage _ptr is null!");
      }

      public virtual UGCHandle_t ISteamRemoteStorage_GetCachedUGCHandle(int iCachedContent)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamRemoteStorage_GetCachedUGCHandle(this._ptr, iCachedContent) : throw new Exception("ISteamRemoteStorage _ptr is null!");
      }

      public virtual SteamAPICall_t ISteamRemoteStorage_PublishWorkshopFile(
        string pchFile,
        string pchPreviewFile,
        uint nConsumerAppId,
        string pchTitle,
        string pchDescription,
        RemoteStoragePublishedFileVisibility eVisibility,
        ref SteamParamStringArray_t pTags,
        WorkshopFileType eWorkshopFileType)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamRemoteStorage _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamRemoteStorage_PublishWorkshopFile(this._ptr, pchFile, pchPreviewFile, nConsumerAppId, pchTitle, pchDescription, eVisibility, ref pTags, eWorkshopFileType);
      }

      public virtual PublishedFileUpdateHandle_t ISteamRemoteStorage_CreatePublishedFileUpdateRequest(
        ulong unPublishedFileId)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamRemoteStorage_CreatePublishedFileUpdateRequest(this._ptr, unPublishedFileId) : throw new Exception("ISteamRemoteStorage _ptr is null!");
      }

      public virtual bool ISteamRemoteStorage_UpdatePublishedFileFile(
        ulong updateHandle,
        string pchFile)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamRemoteStorage _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamRemoteStorage_UpdatePublishedFileFile(this._ptr, updateHandle, pchFile);
      }

      public virtual bool ISteamRemoteStorage_UpdatePublishedFilePreviewFile(
        ulong updateHandle,
        string pchPreviewFile)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamRemoteStorage _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamRemoteStorage_UpdatePublishedFilePreviewFile(this._ptr, updateHandle, pchPreviewFile);
      }

      public virtual bool ISteamRemoteStorage_UpdatePublishedFileTitle(
        ulong updateHandle,
        string pchTitle)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamRemoteStorage _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamRemoteStorage_UpdatePublishedFileTitle(this._ptr, updateHandle, pchTitle);
      }

      public virtual bool ISteamRemoteStorage_UpdatePublishedFileDescription(
        ulong updateHandle,
        string pchDescription)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamRemoteStorage _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamRemoteStorage_UpdatePublishedFileDescription(this._ptr, updateHandle, pchDescription);
      }

      public virtual bool ISteamRemoteStorage_UpdatePublishedFileVisibility(
        ulong updateHandle,
        RemoteStoragePublishedFileVisibility eVisibility)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamRemoteStorage _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamRemoteStorage_UpdatePublishedFileVisibility(this._ptr, updateHandle, eVisibility);
      }

      public virtual bool ISteamRemoteStorage_UpdatePublishedFileTags(
        ulong updateHandle,
        ref SteamParamStringArray_t pTags)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamRemoteStorage _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamRemoteStorage_UpdatePublishedFileTags(this._ptr, updateHandle, ref pTags);
      }

      public virtual SteamAPICall_t ISteamRemoteStorage_CommitPublishedFileUpdate(ulong updateHandle)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamRemoteStorage_CommitPublishedFileUpdate(this._ptr, updateHandle) : throw new Exception("ISteamRemoteStorage _ptr is null!");
      }

      public virtual SteamAPICall_t ISteamRemoteStorage_GetPublishedFileDetails(
        ulong unPublishedFileId,
        uint unMaxSecondsOld)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamRemoteStorage _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamRemoteStorage_GetPublishedFileDetails(this._ptr, unPublishedFileId, unMaxSecondsOld);
      }

      public virtual SteamAPICall_t ISteamRemoteStorage_DeletePublishedFile(ulong unPublishedFileId)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamRemoteStorage_DeletePublishedFile(this._ptr, unPublishedFileId) : throw new Exception("ISteamRemoteStorage _ptr is null!");
      }

      public virtual SteamAPICall_t ISteamRemoteStorage_EnumerateUserPublishedFiles(
        uint unStartIndex)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamRemoteStorage_EnumerateUserPublishedFiles(this._ptr, unStartIndex) : throw new Exception("ISteamRemoteStorage _ptr is null!");
      }

      public virtual SteamAPICall_t ISteamRemoteStorage_SubscribePublishedFile(
        ulong unPublishedFileId)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamRemoteStorage_SubscribePublishedFile(this._ptr, unPublishedFileId) : throw new Exception("ISteamRemoteStorage _ptr is null!");
      }

      public virtual SteamAPICall_t ISteamRemoteStorage_EnumerateUserSubscribedFiles(
        uint unStartIndex)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamRemoteStorage_EnumerateUserSubscribedFiles(this._ptr, unStartIndex) : throw new Exception("ISteamRemoteStorage _ptr is null!");
      }

      public virtual SteamAPICall_t ISteamRemoteStorage_UnsubscribePublishedFile(
        ulong unPublishedFileId)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamRemoteStorage_UnsubscribePublishedFile(this._ptr, unPublishedFileId) : throw new Exception("ISteamRemoteStorage _ptr is null!");
      }

      public virtual bool ISteamRemoteStorage_UpdatePublishedFileSetChangeDescription(
        ulong updateHandle,
        string pchChangeDescription)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamRemoteStorage _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamRemoteStorage_UpdatePublishedFileSetChangeDescription(this._ptr, updateHandle, pchChangeDescription);
      }

      public virtual SteamAPICall_t ISteamRemoteStorage_GetPublishedItemVoteDetails(
        ulong unPublishedFileId)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamRemoteStorage_GetPublishedItemVoteDetails(this._ptr, unPublishedFileId) : throw new Exception("ISteamRemoteStorage _ptr is null!");
      }

      public virtual SteamAPICall_t ISteamRemoteStorage_UpdateUserPublishedItemVote(
        ulong unPublishedFileId,
        [MarshalAs(UnmanagedType.U1)] bool bVoteUp)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamRemoteStorage _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamRemoteStorage_UpdateUserPublishedItemVote(this._ptr, unPublishedFileId, bVoteUp);
      }

      public virtual SteamAPICall_t ISteamRemoteStorage_GetUserPublishedItemVoteDetails(
        ulong unPublishedFileId)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamRemoteStorage_GetUserPublishedItemVoteDetails(this._ptr, unPublishedFileId) : throw new Exception("ISteamRemoteStorage _ptr is null!");
      }

      public virtual SteamAPICall_t ISteamRemoteStorage_EnumerateUserSharedWorkshopFiles(
        ulong steamId,
        uint unStartIndex,
        ref SteamParamStringArray_t pRequiredTags,
        ref SteamParamStringArray_t pExcludedTags)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamRemoteStorage _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamRemoteStorage_EnumerateUserSharedWorkshopFiles(this._ptr, steamId, unStartIndex, ref pRequiredTags, ref pExcludedTags);
      }

      public virtual SteamAPICall_t ISteamRemoteStorage_PublishVideo(
        WorkshopVideoProvider eVideoProvider,
        string pchVideoAccount,
        string pchVideoIdentifier,
        string pchPreviewFile,
        uint nConsumerAppId,
        string pchTitle,
        string pchDescription,
        RemoteStoragePublishedFileVisibility eVisibility,
        ref SteamParamStringArray_t pTags)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamRemoteStorage _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamRemoteStorage_PublishVideo(this._ptr, eVideoProvider, pchVideoAccount, pchVideoIdentifier, pchPreviewFile, nConsumerAppId, pchTitle, pchDescription, eVisibility, ref pTags);
      }

      public virtual SteamAPICall_t ISteamRemoteStorage_SetUserPublishedFileAction(
        ulong unPublishedFileId,
        WorkshopFileAction eAction)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamRemoteStorage _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamRemoteStorage_SetUserPublishedFileAction(this._ptr, unPublishedFileId, eAction);
      }

      public virtual SteamAPICall_t ISteamRemoteStorage_EnumeratePublishedFilesByUserAction(
        WorkshopFileAction eAction,
        uint unStartIndex)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamRemoteStorage _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamRemoteStorage_EnumeratePublishedFilesByUserAction(this._ptr, eAction, unStartIndex);
      }

      public virtual SteamAPICall_t ISteamRemoteStorage_EnumeratePublishedWorkshopFiles(
        WorkshopEnumerationType eEnumerationType,
        uint unStartIndex,
        uint unCount,
        uint unDays,
        ref SteamParamStringArray_t pTags,
        ref SteamParamStringArray_t pUserTags)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamRemoteStorage _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamRemoteStorage_EnumeratePublishedWorkshopFiles(this._ptr, eEnumerationType, unStartIndex, unCount, unDays, ref pTags, ref pUserTags);
      }

      public virtual SteamAPICall_t ISteamRemoteStorage_UGCDownloadToLocation(
        ulong hContent,
        string pchLocation,
        uint unPriority)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamRemoteStorage _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamRemoteStorage_UGCDownloadToLocation(this._ptr, hContent, pchLocation, unPriority);
      }

      public virtual bool ISteamUserStats_RequestCurrentStats()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamUserStats_RequestCurrentStats(this._ptr) : throw new Exception("ISteamUserStats _ptr is null!");
      }

      public virtual bool ISteamUserStats_GetStat(string pchName, out int pData)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamUserStats_GetStat(this._ptr, pchName, out pData) : throw new Exception("ISteamUserStats _ptr is null!");
      }

      public virtual bool ISteamUserStats_GetStat0(string pchName, out float pData)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamUserStats_GetStat0(this._ptr, pchName, out pData) : throw new Exception("ISteamUserStats _ptr is null!");
      }

      public virtual bool ISteamUserStats_SetStat(string pchName, int nData)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUserStats _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamUserStats_SetStat(this._ptr, pchName, nData);
      }

      public virtual bool ISteamUserStats_SetStat0(string pchName, float fData)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUserStats _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamUserStats_SetStat0(this._ptr, pchName, fData);
      }

      public virtual bool ISteamUserStats_UpdateAvgRateStat(
        string pchName,
        float flCountThisSession,
        double dSessionLength)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUserStats _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamUserStats_UpdateAvgRateStat(this._ptr, pchName, flCountThisSession, dSessionLength);
      }

      public virtual bool ISteamUserStats_GetAchievement(string pchName, [MarshalAs(UnmanagedType.U1)] ref bool pbAchieved)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUserStats _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamUserStats_GetAchievement(this._ptr, pchName, ref pbAchieved);
      }

      public virtual bool ISteamUserStats_SetAchievement(string pchName)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamUserStats_SetAchievement(this._ptr, pchName) : throw new Exception("ISteamUserStats _ptr is null!");
      }

      public virtual bool ISteamUserStats_ClearAchievement(string pchName)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamUserStats_ClearAchievement(this._ptr, pchName) : throw new Exception("ISteamUserStats _ptr is null!");
      }

      public virtual bool ISteamUserStats_GetAchievementAndUnlockTime(
        string pchName,
        [MarshalAs(UnmanagedType.U1)] ref bool pbAchieved,
        out uint punUnlockTime)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUserStats _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamUserStats_GetAchievementAndUnlockTime(this._ptr, pchName, ref pbAchieved, out punUnlockTime);
      }

      public virtual bool ISteamUserStats_StoreStats()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamUserStats_StoreStats(this._ptr) : throw new Exception("ISteamUserStats _ptr is null!");
      }

      public virtual int ISteamUserStats_GetAchievementIcon(string pchName)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamUserStats_GetAchievementIcon(this._ptr, pchName) : throw new Exception("ISteamUserStats _ptr is null!");
      }

      public virtual IntPtr ISteamUserStats_GetAchievementDisplayAttribute(
        string pchName,
        string pchKey)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUserStats _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamUserStats_GetAchievementDisplayAttribute(this._ptr, pchName, pchKey);
      }

      public virtual bool ISteamUserStats_IndicateAchievementProgress(
        string pchName,
        uint nCurProgress,
        uint nMaxProgress)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUserStats _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamUserStats_IndicateAchievementProgress(this._ptr, pchName, nCurProgress, nMaxProgress);
      }

      public virtual uint ISteamUserStats_GetNumAchievements()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamUserStats_GetNumAchievements(this._ptr) : throw new Exception("ISteamUserStats _ptr is null!");
      }

      public virtual IntPtr ISteamUserStats_GetAchievementName(uint iAchievement)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamUserStats_GetAchievementName(this._ptr, iAchievement) : throw new Exception("ISteamUserStats _ptr is null!");
      }

      public virtual SteamAPICall_t ISteamUserStats_RequestUserStats(ulong steamIDUser)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamUserStats_RequestUserStats(this._ptr, steamIDUser) : throw new Exception("ISteamUserStats _ptr is null!");
      }

      public virtual bool ISteamUserStats_GetUserStat(
        ulong steamIDUser,
        string pchName,
        out int pData)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUserStats _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamUserStats_GetUserStat(this._ptr, steamIDUser, pchName, out pData);
      }

      public virtual bool ISteamUserStats_GetUserStat0(
        ulong steamIDUser,
        string pchName,
        out float pData)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUserStats _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamUserStats_GetUserStat0(this._ptr, steamIDUser, pchName, out pData);
      }

      public virtual bool ISteamUserStats_GetUserAchievement(
        ulong steamIDUser,
        string pchName,
        [MarshalAs(UnmanagedType.U1)] ref bool pbAchieved)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUserStats _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamUserStats_GetUserAchievement(this._ptr, steamIDUser, pchName, ref pbAchieved);
      }

      public virtual bool ISteamUserStats_GetUserAchievementAndUnlockTime(
        ulong steamIDUser,
        string pchName,
        [MarshalAs(UnmanagedType.U1)] ref bool pbAchieved,
        out uint punUnlockTime)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUserStats _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamUserStats_GetUserAchievementAndUnlockTime(this._ptr, steamIDUser, pchName, ref pbAchieved, out punUnlockTime);
      }

      public virtual bool ISteamUserStats_ResetAllStats([MarshalAs(UnmanagedType.U1)] bool bAchievementsToo)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamUserStats_ResetAllStats(this._ptr, bAchievementsToo) : throw new Exception("ISteamUserStats _ptr is null!");
      }

      public virtual SteamAPICall_t ISteamUserStats_FindOrCreateLeaderboard(
        string pchLeaderboardName,
        LeaderboardSortMethod eLeaderboardSortMethod,
        LeaderboardDisplayType eLeaderboardDisplayType)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUserStats _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamUserStats_FindOrCreateLeaderboard(this._ptr, pchLeaderboardName, eLeaderboardSortMethod, eLeaderboardDisplayType);
      }

      public virtual SteamAPICall_t ISteamUserStats_FindLeaderboard(string pchLeaderboardName)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamUserStats_FindLeaderboard(this._ptr, pchLeaderboardName) : throw new Exception("ISteamUserStats _ptr is null!");
      }

      public virtual IntPtr ISteamUserStats_GetLeaderboardName(ulong hSteamLeaderboard)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamUserStats_GetLeaderboardName(this._ptr, hSteamLeaderboard) : throw new Exception("ISteamUserStats _ptr is null!");
      }

      public virtual int ISteamUserStats_GetLeaderboardEntryCount(ulong hSteamLeaderboard)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamUserStats_GetLeaderboardEntryCount(this._ptr, hSteamLeaderboard) : throw new Exception("ISteamUserStats _ptr is null!");
      }

      public virtual LeaderboardSortMethod ISteamUserStats_GetLeaderboardSortMethod(
        ulong hSteamLeaderboard)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamUserStats_GetLeaderboardSortMethod(this._ptr, hSteamLeaderboard) : throw new Exception("ISteamUserStats _ptr is null!");
      }

      public virtual LeaderboardDisplayType ISteamUserStats_GetLeaderboardDisplayType(
        ulong hSteamLeaderboard)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamUserStats_GetLeaderboardDisplayType(this._ptr, hSteamLeaderboard) : throw new Exception("ISteamUserStats _ptr is null!");
      }

      public virtual SteamAPICall_t ISteamUserStats_DownloadLeaderboardEntries(
        ulong hSteamLeaderboard,
        LeaderboardDataRequest eLeaderboardDataRequest,
        int nRangeStart,
        int nRangeEnd)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUserStats _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamUserStats_DownloadLeaderboardEntries(this._ptr, hSteamLeaderboard, eLeaderboardDataRequest, nRangeStart, nRangeEnd);
      }

      public virtual SteamAPICall_t ISteamUserStats_DownloadLeaderboardEntriesForUsers(
        ulong hSteamLeaderboard,
        IntPtr prgUsers,
        int cUsers)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUserStats _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamUserStats_DownloadLeaderboardEntriesForUsers(this._ptr, hSteamLeaderboard, prgUsers, cUsers);
      }

      public virtual bool ISteamUserStats_GetDownloadedLeaderboardEntry(
        ulong hSteamLeaderboardEntries,
        int index,
        ref LeaderboardEntry_t pLeaderboardEntry,
        IntPtr pDetails,
        int cDetailsMax)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUserStats _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamUserStats_GetDownloadedLeaderboardEntry(this._ptr, hSteamLeaderboardEntries, index, ref pLeaderboardEntry, pDetails, cDetailsMax);
      }

      public virtual SteamAPICall_t ISteamUserStats_UploadLeaderboardScore(
        ulong hSteamLeaderboard,
        LeaderboardUploadScoreMethod eLeaderboardUploadScoreMethod,
        int nScore,
        int[] pScoreDetails,
        int cScoreDetailsCount)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUserStats _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamUserStats_UploadLeaderboardScore(this._ptr, hSteamLeaderboard, eLeaderboardUploadScoreMethod, nScore, pScoreDetails, cScoreDetailsCount);
      }

      public virtual SteamAPICall_t ISteamUserStats_AttachLeaderboardUGC(
        ulong hSteamLeaderboard,
        ulong hUGC)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUserStats _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamUserStats_AttachLeaderboardUGC(this._ptr, hSteamLeaderboard, hUGC);
      }

      public virtual SteamAPICall_t ISteamUserStats_GetNumberOfCurrentPlayers()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamUserStats_GetNumberOfCurrentPlayers(this._ptr) : throw new Exception("ISteamUserStats _ptr is null!");
      }

      public virtual SteamAPICall_t ISteamUserStats_RequestGlobalAchievementPercentages()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamUserStats_RequestGlobalAchievementPercentages(this._ptr) : throw new Exception("ISteamUserStats _ptr is null!");
      }

      public virtual int ISteamUserStats_GetMostAchievedAchievementInfo(
        StringBuilder pchName,
        uint unNameBufLen,
        out float pflPercent,
        [MarshalAs(UnmanagedType.U1)] ref bool pbAchieved)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUserStats _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamUserStats_GetMostAchievedAchievementInfo(this._ptr, pchName, unNameBufLen, out pflPercent, ref pbAchieved);
      }

      public virtual int ISteamUserStats_GetNextMostAchievedAchievementInfo(
        int iIteratorPrevious,
        StringBuilder pchName,
        uint unNameBufLen,
        out float pflPercent,
        [MarshalAs(UnmanagedType.U1)] ref bool pbAchieved)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUserStats _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamUserStats_GetNextMostAchievedAchievementInfo(this._ptr, iIteratorPrevious, pchName, unNameBufLen, out pflPercent, ref pbAchieved);
      }

      public virtual bool ISteamUserStats_GetAchievementAchievedPercent(
        string pchName,
        out float pflPercent)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamUserStats_GetAchievementAchievedPercent(this._ptr, pchName, out pflPercent) : throw new Exception("ISteamUserStats _ptr is null!");
      }

      public virtual SteamAPICall_t ISteamUserStats_RequestGlobalStats(int nHistoryDays)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamUserStats_RequestGlobalStats(this._ptr, nHistoryDays) : throw new Exception("ISteamUserStats _ptr is null!");
      }

      public virtual bool ISteamUserStats_GetGlobalStat(string pchStatName, out long pData)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamUserStats_GetGlobalStat(this._ptr, pchStatName, out pData) : throw new Exception("ISteamUserStats _ptr is null!");
      }

      public virtual bool ISteamUserStats_GetGlobalStat0(string pchStatName, out double pData)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamUserStats_GetGlobalStat0(this._ptr, pchStatName, out pData) : throw new Exception("ISteamUserStats _ptr is null!");
      }

      public virtual int ISteamUserStats_GetGlobalStatHistory(
        string pchStatName,
        out long pData,
        uint cubData)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUserStats _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamUserStats_GetGlobalStatHistory(this._ptr, pchStatName, out pData, cubData);
      }

      public virtual int ISteamUserStats_GetGlobalStatHistory0(
        string pchStatName,
        out double pData,
        uint cubData)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUserStats _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamUserStats_GetGlobalStatHistory0(this._ptr, pchStatName, out pData, cubData);
      }

      public virtual bool ISteamApps_BIsSubscribed()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamApps_BIsSubscribed(this._ptr) : throw new Exception("ISteamApps _ptr is null!");
      }

      public virtual bool ISteamApps_BIsLowViolence()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamApps_BIsLowViolence(this._ptr) : throw new Exception("ISteamApps _ptr is null!");
      }

      public virtual bool ISteamApps_BIsCybercafe()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamApps_BIsCybercafe(this._ptr) : throw new Exception("ISteamApps _ptr is null!");
      }

      public virtual bool ISteamApps_BIsVACBanned()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamApps_BIsVACBanned(this._ptr) : throw new Exception("ISteamApps _ptr is null!");
      }

      public virtual IntPtr ISteamApps_GetCurrentGameLanguage()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamApps_GetCurrentGameLanguage(this._ptr) : throw new Exception("ISteamApps _ptr is null!");
      }

      public virtual IntPtr ISteamApps_GetAvailableGameLanguages()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamApps_GetAvailableGameLanguages(this._ptr) : throw new Exception("ISteamApps _ptr is null!");
      }

      public virtual bool ISteamApps_BIsSubscribedApp(uint appID)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamApps_BIsSubscribedApp(this._ptr, appID) : throw new Exception("ISteamApps _ptr is null!");
      }

      public virtual bool ISteamApps_BIsDlcInstalled(uint appID)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamApps_BIsDlcInstalled(this._ptr, appID) : throw new Exception("ISteamApps _ptr is null!");
      }

      public virtual uint ISteamApps_GetEarliestPurchaseUnixTime(uint nAppID)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamApps_GetEarliestPurchaseUnixTime(this._ptr, nAppID) : throw new Exception("ISteamApps _ptr is null!");
      }

      public virtual bool ISteamApps_BIsSubscribedFromFreeWeekend()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamApps_BIsSubscribedFromFreeWeekend(this._ptr) : throw new Exception("ISteamApps _ptr is null!");
      }

      public virtual int ISteamApps_GetDLCCount()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamApps_GetDLCCount(this._ptr) : throw new Exception("ISteamApps _ptr is null!");
      }

      public virtual bool ISteamApps_BGetDLCDataByIndex(
        int iDLC,
        ref uint pAppID,
        [MarshalAs(UnmanagedType.U1)] ref bool pbAvailable,
        StringBuilder pchName,
        int cchNameBufferSize)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamApps _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamApps_BGetDLCDataByIndex(this._ptr, iDLC, ref pAppID, ref pbAvailable, pchName, cchNameBufferSize);
      }

      public virtual void ISteamApps_InstallDLC(uint nAppID)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamApps _ptr is null!");
        Platform.Win64.Native.SteamAPI_ISteamApps_InstallDLC(this._ptr, nAppID);
      }

      public virtual void ISteamApps_UninstallDLC(uint nAppID)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamApps _ptr is null!");
        Platform.Win64.Native.SteamAPI_ISteamApps_UninstallDLC(this._ptr, nAppID);
      }

      public virtual void ISteamApps_RequestAppProofOfPurchaseKey(uint nAppID)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamApps _ptr is null!");
        Platform.Win64.Native.SteamAPI_ISteamApps_RequestAppProofOfPurchaseKey(this._ptr, nAppID);
      }

      public virtual bool ISteamApps_GetCurrentBetaName(
        StringBuilder pchName,
        int cchNameBufferSize)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamApps _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamApps_GetCurrentBetaName(this._ptr, pchName, cchNameBufferSize);
      }

      public virtual bool ISteamApps_MarkContentCorrupt([MarshalAs(UnmanagedType.U1)] bool bMissingFilesOnly)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamApps_MarkContentCorrupt(this._ptr, bMissingFilesOnly) : throw new Exception("ISteamApps _ptr is null!");
      }

      public virtual uint ISteamApps_GetInstalledDepots(
        uint appID,
        IntPtr pvecDepots,
        uint cMaxDepots)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamApps _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamApps_GetInstalledDepots(this._ptr, appID, pvecDepots, cMaxDepots);
      }

      public virtual uint ISteamApps_GetAppInstallDir(
        uint appID,
        StringBuilder pchFolder,
        uint cchFolderBufferSize)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamApps _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamApps_GetAppInstallDir(this._ptr, appID, pchFolder, cchFolderBufferSize);
      }

      public virtual bool ISteamApps_BIsAppInstalled(uint appID)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamApps_BIsAppInstalled(this._ptr, appID) : throw new Exception("ISteamApps _ptr is null!");
      }

      public virtual CSteamID ISteamApps_GetAppOwner()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamApps_GetAppOwner(this._ptr) : throw new Exception("ISteamApps _ptr is null!");
      }

      public virtual IntPtr ISteamApps_GetLaunchQueryParam(string pchKey)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamApps_GetLaunchQueryParam(this._ptr, pchKey) : throw new Exception("ISteamApps _ptr is null!");
      }

      public virtual bool ISteamApps_GetDlcDownloadProgress(
        uint nAppID,
        out ulong punBytesDownloaded,
        out ulong punBytesTotal)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamApps_GetDlcDownloadProgress(this._ptr, nAppID, out punBytesDownloaded, out punBytesTotal) : throw new Exception("ISteamApps _ptr is null!");
      }

      public virtual int ISteamApps_GetAppBuildId()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamApps_GetAppBuildId(this._ptr) : throw new Exception("ISteamApps _ptr is null!");
      }

      public virtual void ISteamApps_RequestAllProofOfPurchaseKeys()
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamApps _ptr is null!");
        Platform.Win64.Native.SteamAPI_ISteamApps_RequestAllProofOfPurchaseKeys(this._ptr);
      }

      public virtual SteamAPICall_t ISteamApps_GetFileDetails(string pszFileName)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamApps_GetFileDetails(this._ptr, pszFileName) : throw new Exception("ISteamApps _ptr is null!");
      }

      public virtual bool ISteamNetworking_SendP2PPacket(
        ulong steamIDRemote,
        IntPtr pubData,
        uint cubData,
        P2PSend eP2PSendType,
        int nChannel)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamNetworking _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamNetworking_SendP2PPacket(this._ptr, steamIDRemote, pubData, cubData, eP2PSendType, nChannel);
      }

      public virtual bool ISteamNetworking_IsP2PPacketAvailable(out uint pcubMsgSize, int nChannel)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamNetworking_IsP2PPacketAvailable(this._ptr, out pcubMsgSize, nChannel) : throw new Exception("ISteamNetworking _ptr is null!");
      }

      public virtual bool ISteamNetworking_ReadP2PPacket(
        IntPtr pubDest,
        uint cubDest,
        out uint pcubMsgSize,
        out ulong psteamIDRemote,
        int nChannel)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamNetworking _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamNetworking_ReadP2PPacket(this._ptr, pubDest, cubDest, out pcubMsgSize, out psteamIDRemote, nChannel);
      }

      public virtual bool ISteamNetworking_AcceptP2PSessionWithUser(ulong steamIDRemote)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamNetworking_AcceptP2PSessionWithUser(this._ptr, steamIDRemote) : throw new Exception("ISteamNetworking _ptr is null!");
      }

      public virtual bool ISteamNetworking_CloseP2PSessionWithUser(ulong steamIDRemote)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamNetworking_CloseP2PSessionWithUser(this._ptr, steamIDRemote) : throw new Exception("ISteamNetworking _ptr is null!");
      }

      public virtual bool ISteamNetworking_CloseP2PChannelWithUser(
        ulong steamIDRemote,
        int nChannel)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamNetworking _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamNetworking_CloseP2PChannelWithUser(this._ptr, steamIDRemote, nChannel);
      }

      public virtual bool ISteamNetworking_GetP2PSessionState(
        ulong steamIDRemote,
        ref P2PSessionState_t pConnectionState)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamNetworking _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamNetworking_GetP2PSessionState(this._ptr, steamIDRemote, ref pConnectionState);
      }

      public virtual bool ISteamNetworking_AllowP2PPacketRelay([MarshalAs(UnmanagedType.U1)] bool bAllow)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamNetworking_AllowP2PPacketRelay(this._ptr, bAllow) : throw new Exception("ISteamNetworking _ptr is null!");
      }

      public virtual SNetListenSocket_t ISteamNetworking_CreateListenSocket(
        int nVirtualP2PPort,
        uint nIP,
        ushort nPort,
        [MarshalAs(UnmanagedType.U1)] bool bAllowUseOfPacketRelay)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamNetworking _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamNetworking_CreateListenSocket(this._ptr, nVirtualP2PPort, nIP, nPort, bAllowUseOfPacketRelay);
      }

      public virtual SNetSocket_t ISteamNetworking_CreateP2PConnectionSocket(
        ulong steamIDTarget,
        int nVirtualPort,
        int nTimeoutSec,
        [MarshalAs(UnmanagedType.U1)] bool bAllowUseOfPacketRelay)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamNetworking _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamNetworking_CreateP2PConnectionSocket(this._ptr, steamIDTarget, nVirtualPort, nTimeoutSec, bAllowUseOfPacketRelay);
      }

      public virtual SNetSocket_t ISteamNetworking_CreateConnectionSocket(
        uint nIP,
        ushort nPort,
        int nTimeoutSec)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamNetworking _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamNetworking_CreateConnectionSocket(this._ptr, nIP, nPort, nTimeoutSec);
      }

      public virtual bool ISteamNetworking_DestroySocket(uint hSocket, [MarshalAs(UnmanagedType.U1)] bool bNotifyRemoteEnd)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamNetworking _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamNetworking_DestroySocket(this._ptr, hSocket, bNotifyRemoteEnd);
      }

      public virtual bool ISteamNetworking_DestroyListenSocket(uint hSocket, [MarshalAs(UnmanagedType.U1)] bool bNotifyRemoteEnd)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamNetworking _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamNetworking_DestroyListenSocket(this._ptr, hSocket, bNotifyRemoteEnd);
      }

      public virtual bool ISteamNetworking_SendDataOnSocket(
        uint hSocket,
        IntPtr pubData,
        uint cubData,
        [MarshalAs(UnmanagedType.U1)] bool bReliable)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamNetworking _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamNetworking_SendDataOnSocket(this._ptr, hSocket, pubData, cubData, bReliable);
      }

      public virtual bool ISteamNetworking_IsDataAvailableOnSocket(
        uint hSocket,
        out uint pcubMsgSize)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamNetworking_IsDataAvailableOnSocket(this._ptr, hSocket, out pcubMsgSize) : throw new Exception("ISteamNetworking _ptr is null!");
      }

      public virtual bool ISteamNetworking_RetrieveDataFromSocket(
        uint hSocket,
        IntPtr pubDest,
        uint cubDest,
        out uint pcubMsgSize)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamNetworking _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamNetworking_RetrieveDataFromSocket(this._ptr, hSocket, pubDest, cubDest, out pcubMsgSize);
      }

      public virtual bool ISteamNetworking_IsDataAvailable(
        uint hListenSocket,
        out uint pcubMsgSize,
        ref uint phSocket)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamNetworking _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamNetworking_IsDataAvailable(this._ptr, hListenSocket, out pcubMsgSize, ref phSocket);
      }

      public virtual bool ISteamNetworking_RetrieveData(
        uint hListenSocket,
        IntPtr pubDest,
        uint cubDest,
        out uint pcubMsgSize,
        ref uint phSocket)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamNetworking _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamNetworking_RetrieveData(this._ptr, hListenSocket, pubDest, cubDest, out pcubMsgSize, ref phSocket);
      }

      public virtual bool ISteamNetworking_GetSocketInfo(
        uint hSocket,
        out ulong pSteamIDRemote,
        IntPtr peSocketStatus,
        out uint punIPRemote,
        out ushort punPortRemote)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamNetworking _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamNetworking_GetSocketInfo(this._ptr, hSocket, out pSteamIDRemote, peSocketStatus, out punIPRemote, out punPortRemote);
      }

      public virtual bool ISteamNetworking_GetListenSocketInfo(
        uint hListenSocket,
        out uint pnIP,
        out ushort pnPort)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamNetworking_GetListenSocketInfo(this._ptr, hListenSocket, out pnIP, out pnPort) : throw new Exception("ISteamNetworking _ptr is null!");
      }

      public virtual SNetSocketConnectionType ISteamNetworking_GetSocketConnectionType(uint hSocket)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamNetworking_GetSocketConnectionType(this._ptr, hSocket) : throw new Exception("ISteamNetworking _ptr is null!");
      }

      public virtual int ISteamNetworking_GetMaxPacketSize(uint hSocket)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamNetworking_GetMaxPacketSize(this._ptr, hSocket) : throw new Exception("ISteamNetworking _ptr is null!");
      }

      public virtual ScreenshotHandle ISteamScreenshots_WriteScreenshot(
        IntPtr pubRGB,
        uint cubRGB,
        int nWidth,
        int nHeight)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamScreenshots _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamScreenshots_WriteScreenshot(this._ptr, pubRGB, cubRGB, nWidth, nHeight);
      }

      public virtual ScreenshotHandle ISteamScreenshots_AddScreenshotToLibrary(
        string pchFilename,
        string pchThumbnailFilename,
        int nWidth,
        int nHeight)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamScreenshots _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamScreenshots_AddScreenshotToLibrary(this._ptr, pchFilename, pchThumbnailFilename, nWidth, nHeight);
      }

      public virtual void ISteamScreenshots_TriggerScreenshot()
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamScreenshots _ptr is null!");
        Platform.Win64.Native.SteamAPI_ISteamScreenshots_TriggerScreenshot(this._ptr);
      }

      public virtual void ISteamScreenshots_HookScreenshots([MarshalAs(UnmanagedType.U1)] bool bHook)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamScreenshots _ptr is null!");
        Platform.Win64.Native.SteamAPI_ISteamScreenshots_HookScreenshots(this._ptr, bHook);
      }

      public virtual bool ISteamScreenshots_SetLocation(uint hScreenshot, string pchLocation)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamScreenshots _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamScreenshots_SetLocation(this._ptr, hScreenshot, pchLocation);
      }

      public virtual bool ISteamScreenshots_TagUser(uint hScreenshot, ulong steamID)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamScreenshots _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamScreenshots_TagUser(this._ptr, hScreenshot, steamID);
      }

      public virtual bool ISteamScreenshots_TagPublishedFile(
        uint hScreenshot,
        ulong unPublishedFileID)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamScreenshots _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamScreenshots_TagPublishedFile(this._ptr, hScreenshot, unPublishedFileID);
      }

      public virtual bool ISteamScreenshots_IsScreenshotsHooked()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamScreenshots_IsScreenshotsHooked(this._ptr) : throw new Exception("ISteamScreenshots _ptr is null!");
      }

      public virtual ScreenshotHandle ISteamScreenshots_AddVRScreenshotToLibrary(
        VRScreenshotType eType,
        string pchFilename,
        string pchVRFilename)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamScreenshots _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamScreenshots_AddVRScreenshotToLibrary(this._ptr, eType, pchFilename, pchVRFilename);
      }

      public virtual bool ISteamMusic_BIsEnabled()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamMusic_BIsEnabled(this._ptr) : throw new Exception("ISteamMusic _ptr is null!");
      }

      public virtual bool ISteamMusic_BIsPlaying()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamMusic_BIsPlaying(this._ptr) : throw new Exception("ISteamMusic _ptr is null!");
      }

      public virtual AudioPlayback_Status ISteamMusic_GetPlaybackStatus()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamMusic_GetPlaybackStatus(this._ptr) : throw new Exception("ISteamMusic _ptr is null!");
      }

      public virtual void ISteamMusic_Play()
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMusic _ptr is null!");
        Platform.Win64.Native.SteamAPI_ISteamMusic_Play(this._ptr);
      }

      public virtual void ISteamMusic_Pause()
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMusic _ptr is null!");
        Platform.Win64.Native.SteamAPI_ISteamMusic_Pause(this._ptr);
      }

      public virtual void ISteamMusic_PlayPrevious()
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMusic _ptr is null!");
        Platform.Win64.Native.SteamAPI_ISteamMusic_PlayPrevious(this._ptr);
      }

      public virtual void ISteamMusic_PlayNext()
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMusic _ptr is null!");
        Platform.Win64.Native.SteamAPI_ISteamMusic_PlayNext(this._ptr);
      }

      public virtual void ISteamMusic_SetVolume(float flVolume)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMusic _ptr is null!");
        Platform.Win64.Native.SteamAPI_ISteamMusic_SetVolume(this._ptr, flVolume);
      }

      public virtual float ISteamMusic_GetVolume()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamMusic_GetVolume(this._ptr) : throw new Exception("ISteamMusic _ptr is null!");
      }

      public virtual bool ISteamMusicRemote_RegisterSteamMusicRemote(string pchName)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamMusicRemote_RegisterSteamMusicRemote(this._ptr, pchName) : throw new Exception("ISteamMusicRemote _ptr is null!");
      }

      public virtual bool ISteamMusicRemote_DeregisterSteamMusicRemote()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamMusicRemote_DeregisterSteamMusicRemote(this._ptr) : throw new Exception("ISteamMusicRemote _ptr is null!");
      }

      public virtual bool ISteamMusicRemote_BIsCurrentMusicRemote()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamMusicRemote_BIsCurrentMusicRemote(this._ptr) : throw new Exception("ISteamMusicRemote _ptr is null!");
      }

      public virtual bool ISteamMusicRemote_BActivationSuccess([MarshalAs(UnmanagedType.U1)] bool bValue)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamMusicRemote_BActivationSuccess(this._ptr, bValue) : throw new Exception("ISteamMusicRemote _ptr is null!");
      }

      public virtual bool ISteamMusicRemote_SetDisplayName(string pchDisplayName)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamMusicRemote_SetDisplayName(this._ptr, pchDisplayName) : throw new Exception("ISteamMusicRemote _ptr is null!");
      }

      public virtual bool ISteamMusicRemote_SetPNGIcon_64x64(IntPtr pvBuffer, uint cbBufferLength)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMusicRemote _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamMusicRemote_SetPNGIcon_64x64(this._ptr, pvBuffer, cbBufferLength);
      }

      public virtual bool ISteamMusicRemote_EnablePlayPrevious([MarshalAs(UnmanagedType.U1)] bool bValue)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamMusicRemote_EnablePlayPrevious(this._ptr, bValue) : throw new Exception("ISteamMusicRemote _ptr is null!");
      }

      public virtual bool ISteamMusicRemote_EnablePlayNext([MarshalAs(UnmanagedType.U1)] bool bValue)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamMusicRemote_EnablePlayNext(this._ptr, bValue) : throw new Exception("ISteamMusicRemote _ptr is null!");
      }

      public virtual bool ISteamMusicRemote_EnableShuffled([MarshalAs(UnmanagedType.U1)] bool bValue)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamMusicRemote_EnableShuffled(this._ptr, bValue) : throw new Exception("ISteamMusicRemote _ptr is null!");
      }

      public virtual bool ISteamMusicRemote_EnableLooped([MarshalAs(UnmanagedType.U1)] bool bValue)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamMusicRemote_EnableLooped(this._ptr, bValue) : throw new Exception("ISteamMusicRemote _ptr is null!");
      }

      public virtual bool ISteamMusicRemote_EnableQueue([MarshalAs(UnmanagedType.U1)] bool bValue)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamMusicRemote_EnableQueue(this._ptr, bValue) : throw new Exception("ISteamMusicRemote _ptr is null!");
      }

      public virtual bool ISteamMusicRemote_EnablePlaylists([MarshalAs(UnmanagedType.U1)] bool bValue)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamMusicRemote_EnablePlaylists(this._ptr, bValue) : throw new Exception("ISteamMusicRemote _ptr is null!");
      }

      public virtual bool ISteamMusicRemote_UpdatePlaybackStatus(AudioPlayback_Status nStatus)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamMusicRemote_UpdatePlaybackStatus(this._ptr, nStatus) : throw new Exception("ISteamMusicRemote _ptr is null!");
      }

      public virtual bool ISteamMusicRemote_UpdateShuffled([MarshalAs(UnmanagedType.U1)] bool bValue)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamMusicRemote_UpdateShuffled(this._ptr, bValue) : throw new Exception("ISteamMusicRemote _ptr is null!");
      }

      public virtual bool ISteamMusicRemote_UpdateLooped([MarshalAs(UnmanagedType.U1)] bool bValue)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamMusicRemote_UpdateLooped(this._ptr, bValue) : throw new Exception("ISteamMusicRemote _ptr is null!");
      }

      public virtual bool ISteamMusicRemote_UpdateVolume(float flValue)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamMusicRemote_UpdateVolume(this._ptr, flValue) : throw new Exception("ISteamMusicRemote _ptr is null!");
      }

      public virtual bool ISteamMusicRemote_CurrentEntryWillChange()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamMusicRemote_CurrentEntryWillChange(this._ptr) : throw new Exception("ISteamMusicRemote _ptr is null!");
      }

      public virtual bool ISteamMusicRemote_CurrentEntryIsAvailable([MarshalAs(UnmanagedType.U1)] bool bAvailable)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamMusicRemote_CurrentEntryIsAvailable(this._ptr, bAvailable) : throw new Exception("ISteamMusicRemote _ptr is null!");
      }

      public virtual bool ISteamMusicRemote_UpdateCurrentEntryText(string pchText)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamMusicRemote_UpdateCurrentEntryText(this._ptr, pchText) : throw new Exception("ISteamMusicRemote _ptr is null!");
      }

      public virtual bool ISteamMusicRemote_UpdateCurrentEntryElapsedSeconds(int nValue)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamMusicRemote_UpdateCurrentEntryElapsedSeconds(this._ptr, nValue) : throw new Exception("ISteamMusicRemote _ptr is null!");
      }

      public virtual bool ISteamMusicRemote_UpdateCurrentEntryCoverArt(
        IntPtr pvBuffer,
        uint cbBufferLength)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMusicRemote _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamMusicRemote_UpdateCurrentEntryCoverArt(this._ptr, pvBuffer, cbBufferLength);
      }

      public virtual bool ISteamMusicRemote_CurrentEntryDidChange()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamMusicRemote_CurrentEntryDidChange(this._ptr) : throw new Exception("ISteamMusicRemote _ptr is null!");
      }

      public virtual bool ISteamMusicRemote_QueueWillChange()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamMusicRemote_QueueWillChange(this._ptr) : throw new Exception("ISteamMusicRemote _ptr is null!");
      }

      public virtual bool ISteamMusicRemote_ResetQueueEntries()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamMusicRemote_ResetQueueEntries(this._ptr) : throw new Exception("ISteamMusicRemote _ptr is null!");
      }

      public virtual bool ISteamMusicRemote_SetQueueEntry(
        int nID,
        int nPosition,
        string pchEntryText)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMusicRemote _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamMusicRemote_SetQueueEntry(this._ptr, nID, nPosition, pchEntryText);
      }

      public virtual bool ISteamMusicRemote_SetCurrentQueueEntry(int nID)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamMusicRemote_SetCurrentQueueEntry(this._ptr, nID) : throw new Exception("ISteamMusicRemote _ptr is null!");
      }

      public virtual bool ISteamMusicRemote_QueueDidChange()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamMusicRemote_QueueDidChange(this._ptr) : throw new Exception("ISteamMusicRemote _ptr is null!");
      }

      public virtual bool ISteamMusicRemote_PlaylistWillChange()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamMusicRemote_PlaylistWillChange(this._ptr) : throw new Exception("ISteamMusicRemote _ptr is null!");
      }

      public virtual bool ISteamMusicRemote_ResetPlaylistEntries()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamMusicRemote_ResetPlaylistEntries(this._ptr) : throw new Exception("ISteamMusicRemote _ptr is null!");
      }

      public virtual bool ISteamMusicRemote_SetPlaylistEntry(
        int nID,
        int nPosition,
        string pchEntryText)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamMusicRemote _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamMusicRemote_SetPlaylistEntry(this._ptr, nID, nPosition, pchEntryText);
      }

      public virtual bool ISteamMusicRemote_SetCurrentPlaylistEntry(int nID)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamMusicRemote_SetCurrentPlaylistEntry(this._ptr, nID) : throw new Exception("ISteamMusicRemote _ptr is null!");
      }

      public virtual bool ISteamMusicRemote_PlaylistDidChange()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamMusicRemote_PlaylistDidChange(this._ptr) : throw new Exception("ISteamMusicRemote _ptr is null!");
      }

      public virtual HTTPRequestHandle ISteamHTTP_CreateHTTPRequest(
        HTTPMethod eHTTPRequestMethod,
        string pchAbsoluteURL)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTTP _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamHTTP_CreateHTTPRequest(this._ptr, eHTTPRequestMethod, pchAbsoluteURL);
      }

      public virtual bool ISteamHTTP_SetHTTPRequestContextValue(uint hRequest, ulong ulContextValue)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTTP _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamHTTP_SetHTTPRequestContextValue(this._ptr, hRequest, ulContextValue);
      }

      public virtual bool ISteamHTTP_SetHTTPRequestNetworkActivityTimeout(
        uint hRequest,
        uint unTimeoutSeconds)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTTP _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamHTTP_SetHTTPRequestNetworkActivityTimeout(this._ptr, hRequest, unTimeoutSeconds);
      }

      public virtual bool ISteamHTTP_SetHTTPRequestHeaderValue(
        uint hRequest,
        string pchHeaderName,
        string pchHeaderValue)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTTP _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamHTTP_SetHTTPRequestHeaderValue(this._ptr, hRequest, pchHeaderName, pchHeaderValue);
      }

      public virtual bool ISteamHTTP_SetHTTPRequestGetOrPostParameter(
        uint hRequest,
        string pchParamName,
        string pchParamValue)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTTP _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamHTTP_SetHTTPRequestGetOrPostParameter(this._ptr, hRequest, pchParamName, pchParamValue);
      }

      public virtual bool ISteamHTTP_SendHTTPRequest(uint hRequest, ref ulong pCallHandle)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTTP _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamHTTP_SendHTTPRequest(this._ptr, hRequest, ref pCallHandle);
      }

      public virtual bool ISteamHTTP_SendHTTPRequestAndStreamResponse(
        uint hRequest,
        ref ulong pCallHandle)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTTP _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamHTTP_SendHTTPRequestAndStreamResponse(this._ptr, hRequest, ref pCallHandle);
      }

      public virtual bool ISteamHTTP_DeferHTTPRequest(uint hRequest)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamHTTP_DeferHTTPRequest(this._ptr, hRequest) : throw new Exception("ISteamHTTP _ptr is null!");
      }

      public virtual bool ISteamHTTP_PrioritizeHTTPRequest(uint hRequest)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamHTTP_PrioritizeHTTPRequest(this._ptr, hRequest) : throw new Exception("ISteamHTTP _ptr is null!");
      }

      public virtual bool ISteamHTTP_GetHTTPResponseHeaderSize(
        uint hRequest,
        string pchHeaderName,
        out uint unResponseHeaderSize)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTTP _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamHTTP_GetHTTPResponseHeaderSize(this._ptr, hRequest, pchHeaderName, out unResponseHeaderSize);
      }

      public virtual bool ISteamHTTP_GetHTTPResponseHeaderValue(
        uint hRequest,
        string pchHeaderName,
        out byte pHeaderValueBuffer,
        uint unBufferSize)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTTP _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamHTTP_GetHTTPResponseHeaderValue(this._ptr, hRequest, pchHeaderName, out pHeaderValueBuffer, unBufferSize);
      }

      public virtual bool ISteamHTTP_GetHTTPResponseBodySize(uint hRequest, out uint unBodySize)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamHTTP_GetHTTPResponseBodySize(this._ptr, hRequest, out unBodySize) : throw new Exception("ISteamHTTP _ptr is null!");
      }

      public virtual bool ISteamHTTP_GetHTTPResponseBodyData(
        uint hRequest,
        out byte pBodyDataBuffer,
        uint unBufferSize)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTTP _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamHTTP_GetHTTPResponseBodyData(this._ptr, hRequest, out pBodyDataBuffer, unBufferSize);
      }

      public virtual bool ISteamHTTP_GetHTTPStreamingResponseBodyData(
        uint hRequest,
        uint cOffset,
        out byte pBodyDataBuffer,
        uint unBufferSize)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTTP _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamHTTP_GetHTTPStreamingResponseBodyData(this._ptr, hRequest, cOffset, out pBodyDataBuffer, unBufferSize);
      }

      public virtual bool ISteamHTTP_ReleaseHTTPRequest(uint hRequest)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamHTTP_ReleaseHTTPRequest(this._ptr, hRequest) : throw new Exception("ISteamHTTP _ptr is null!");
      }

      public virtual bool ISteamHTTP_GetHTTPDownloadProgressPct(
        uint hRequest,
        out float pflPercentOut)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamHTTP_GetHTTPDownloadProgressPct(this._ptr, hRequest, out pflPercentOut) : throw new Exception("ISteamHTTP _ptr is null!");
      }

      public virtual bool ISteamHTTP_SetHTTPRequestRawPostBody(
        uint hRequest,
        string pchContentType,
        out byte pubBody,
        uint unBodyLen)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTTP _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamHTTP_SetHTTPRequestRawPostBody(this._ptr, hRequest, pchContentType, out pubBody, unBodyLen);
      }

      public virtual HTTPCookieContainerHandle ISteamHTTP_CreateCookieContainer(
        [MarshalAs(UnmanagedType.U1)] bool bAllowResponsesToModify)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamHTTP_CreateCookieContainer(this._ptr, bAllowResponsesToModify) : throw new Exception("ISteamHTTP _ptr is null!");
      }

      public virtual bool ISteamHTTP_ReleaseCookieContainer(uint hCookieContainer)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamHTTP_ReleaseCookieContainer(this._ptr, hCookieContainer) : throw new Exception("ISteamHTTP _ptr is null!");
      }

      public virtual bool ISteamHTTP_SetCookie(
        uint hCookieContainer,
        string pchHost,
        string pchUrl,
        string pchCookie)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTTP _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamHTTP_SetCookie(this._ptr, hCookieContainer, pchHost, pchUrl, pchCookie);
      }

      public virtual bool ISteamHTTP_SetHTTPRequestCookieContainer(
        uint hRequest,
        uint hCookieContainer)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTTP _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamHTTP_SetHTTPRequestCookieContainer(this._ptr, hRequest, hCookieContainer);
      }

      public virtual bool ISteamHTTP_SetHTTPRequestUserAgentInfo(
        uint hRequest,
        string pchUserAgentInfo)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTTP _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamHTTP_SetHTTPRequestUserAgentInfo(this._ptr, hRequest, pchUserAgentInfo);
      }

      public virtual bool ISteamHTTP_SetHTTPRequestRequiresVerifiedCertificate(
        uint hRequest,
        [MarshalAs(UnmanagedType.U1)] bool bRequireVerifiedCertificate)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTTP _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamHTTP_SetHTTPRequestRequiresVerifiedCertificate(this._ptr, hRequest, bRequireVerifiedCertificate);
      }

      public virtual bool ISteamHTTP_SetHTTPRequestAbsoluteTimeoutMS(
        uint hRequest,
        uint unMilliseconds)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTTP _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamHTTP_SetHTTPRequestAbsoluteTimeoutMS(this._ptr, hRequest, unMilliseconds);
      }

      public virtual bool ISteamHTTP_GetHTTPRequestWasTimedOut(
        uint hRequest,
        [MarshalAs(UnmanagedType.U1)] ref bool pbWasTimedOut)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTTP _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamHTTP_GetHTTPRequestWasTimedOut(this._ptr, hRequest, ref pbWasTimedOut);
      }

      public virtual ClientUnifiedMessageHandle ISteamUnifiedMessages_SendMethod(
        string pchServiceMethod,
        IntPtr pRequestBuffer,
        uint unRequestBufferSize,
        ulong unContext)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUnifiedMessages _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamUnifiedMessages_SendMethod(this._ptr, pchServiceMethod, pRequestBuffer, unRequestBufferSize, unContext);
      }

      public virtual bool ISteamUnifiedMessages_GetMethodResponseInfo(
        ulong hHandle,
        out uint punResponseSize,
        out Result peResult)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamUnifiedMessages_GetMethodResponseInfo(this._ptr, hHandle, out punResponseSize, out peResult) : throw new Exception("ISteamUnifiedMessages _ptr is null!");
      }

      public virtual bool ISteamUnifiedMessages_GetMethodResponseData(
        ulong hHandle,
        IntPtr pResponseBuffer,
        uint unResponseBufferSize,
        [MarshalAs(UnmanagedType.U1)] bool bAutoRelease)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUnifiedMessages _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamUnifiedMessages_GetMethodResponseData(this._ptr, hHandle, pResponseBuffer, unResponseBufferSize, bAutoRelease);
      }

      public virtual bool ISteamUnifiedMessages_ReleaseMethod(ulong hHandle)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamUnifiedMessages_ReleaseMethod(this._ptr, hHandle) : throw new Exception("ISteamUnifiedMessages _ptr is null!");
      }

      public virtual bool ISteamUnifiedMessages_SendNotification(
        string pchServiceNotification,
        IntPtr pNotificationBuffer,
        uint unNotificationBufferSize)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUnifiedMessages _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamUnifiedMessages_SendNotification(this._ptr, pchServiceNotification, pNotificationBuffer, unNotificationBufferSize);
      }

      public virtual bool ISteamController_Init()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamController_Init(this._ptr) : throw new Exception("ISteamController _ptr is null!");
      }

      public virtual bool ISteamController_Shutdown()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamController_Shutdown(this._ptr) : throw new Exception("ISteamController _ptr is null!");
      }

      public virtual void ISteamController_RunFrame()
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamController _ptr is null!");
        Platform.Win64.Native.SteamAPI_ISteamController_RunFrame(this._ptr);
      }

      public virtual int ISteamController_GetConnectedControllers(IntPtr handlesOut)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamController_GetConnectedControllers(this._ptr, handlesOut) : throw new Exception("ISteamController _ptr is null!");
      }

      public virtual bool ISteamController_ShowBindingPanel(ulong controllerHandle)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamController_ShowBindingPanel(this._ptr, controllerHandle) : throw new Exception("ISteamController _ptr is null!");
      }

      public virtual ControllerActionSetHandle_t ISteamController_GetActionSetHandle(
        string pszActionSetName)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamController_GetActionSetHandle(this._ptr, pszActionSetName) : throw new Exception("ISteamController _ptr is null!");
      }

      public virtual void ISteamController_ActivateActionSet(
        ulong controllerHandle,
        ulong actionSetHandle)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamController _ptr is null!");
        Platform.Win64.Native.SteamAPI_ISteamController_ActivateActionSet(this._ptr, controllerHandle, actionSetHandle);
      }

      public virtual ControllerActionSetHandle_t ISteamController_GetCurrentActionSet(
        ulong controllerHandle)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamController_GetCurrentActionSet(this._ptr, controllerHandle) : throw new Exception("ISteamController _ptr is null!");
      }

      public virtual ControllerDigitalActionHandle_t ISteamController_GetDigitalActionHandle(
        string pszActionName)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamController_GetDigitalActionHandle(this._ptr, pszActionName) : throw new Exception("ISteamController _ptr is null!");
      }

      public virtual ControllerDigitalActionData_t ISteamController_GetDigitalActionData(
        ulong controllerHandle,
        ulong digitalActionHandle)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamController _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamController_GetDigitalActionData(this._ptr, controllerHandle, digitalActionHandle);
      }

      public virtual int ISteamController_GetDigitalActionOrigins(
        ulong controllerHandle,
        ulong actionSetHandle,
        ulong digitalActionHandle,
        out ControllerActionOrigin originsOut)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamController _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamController_GetDigitalActionOrigins(this._ptr, controllerHandle, actionSetHandle, digitalActionHandle, out originsOut);
      }

      public virtual ControllerAnalogActionHandle_t ISteamController_GetAnalogActionHandle(
        string pszActionName)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamController_GetAnalogActionHandle(this._ptr, pszActionName) : throw new Exception("ISteamController _ptr is null!");
      }

      public virtual ControllerAnalogActionData_t ISteamController_GetAnalogActionData(
        ulong controllerHandle,
        ulong analogActionHandle)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamController _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamController_GetAnalogActionData(this._ptr, controllerHandle, analogActionHandle);
      }

      public virtual int ISteamController_GetAnalogActionOrigins(
        ulong controllerHandle,
        ulong actionSetHandle,
        ulong analogActionHandle,
        out ControllerActionOrigin originsOut)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamController _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamController_GetAnalogActionOrigins(this._ptr, controllerHandle, actionSetHandle, analogActionHandle, out originsOut);
      }

      public virtual void ISteamController_StopAnalogActionMomentum(
        ulong controllerHandle,
        ulong eAction)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamController _ptr is null!");
        Platform.Win64.Native.SteamAPI_ISteamController_StopAnalogActionMomentum(this._ptr, controllerHandle, eAction);
      }

      public virtual void ISteamController_TriggerHapticPulse(
        ulong controllerHandle,
        SteamControllerPad eTargetPad,
        ushort usDurationMicroSec)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamController _ptr is null!");
        Platform.Win64.Native.SteamAPI_ISteamController_TriggerHapticPulse(this._ptr, controllerHandle, eTargetPad, usDurationMicroSec);
      }

      public virtual void ISteamController_TriggerRepeatedHapticPulse(
        ulong controllerHandle,
        SteamControllerPad eTargetPad,
        ushort usDurationMicroSec,
        ushort usOffMicroSec,
        ushort unRepeat,
        uint nFlags)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamController _ptr is null!");
        Platform.Win64.Native.SteamAPI_ISteamController_TriggerRepeatedHapticPulse(this._ptr, controllerHandle, eTargetPad, usDurationMicroSec, usOffMicroSec, unRepeat, nFlags);
      }

      public virtual void ISteamController_TriggerVibration(
        ulong controllerHandle,
        ushort usLeftSpeed,
        ushort usRightSpeed)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamController _ptr is null!");
        Platform.Win64.Native.SteamAPI_ISteamController_TriggerVibration(this._ptr, controllerHandle, usLeftSpeed, usRightSpeed);
      }

      public virtual void ISteamController_SetLEDColor(
        ulong controllerHandle,
        byte nColorR,
        byte nColorG,
        byte nColorB,
        uint nFlags)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamController _ptr is null!");
        Platform.Win64.Native.SteamAPI_ISteamController_SetLEDColor(this._ptr, controllerHandle, nColorR, nColorG, nColorB, nFlags);
      }

      public virtual int ISteamController_GetGamepadIndexForController(ulong ulControllerHandle)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamController_GetGamepadIndexForController(this._ptr, ulControllerHandle) : throw new Exception("ISteamController _ptr is null!");
      }

      public virtual ControllerHandle_t ISteamController_GetControllerForGamepadIndex(int nIndex)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamController_GetControllerForGamepadIndex(this._ptr, nIndex) : throw new Exception("ISteamController _ptr is null!");
      }

      public virtual ControllerMotionData_t ISteamController_GetMotionData(ulong controllerHandle)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamController_GetMotionData(this._ptr, controllerHandle) : throw new Exception("ISteamController _ptr is null!");
      }

      public virtual bool ISteamController_ShowDigitalActionOrigins(
        ulong controllerHandle,
        ulong digitalActionHandle,
        float flScale,
        float flXPosition,
        float flYPosition)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamController _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamController_ShowDigitalActionOrigins(this._ptr, controllerHandle, digitalActionHandle, flScale, flXPosition, flYPosition);
      }

      public virtual bool ISteamController_ShowAnalogActionOrigins(
        ulong controllerHandle,
        ulong analogActionHandle,
        float flScale,
        float flXPosition,
        float flYPosition)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamController _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamController_ShowAnalogActionOrigins(this._ptr, controllerHandle, analogActionHandle, flScale, flXPosition, flYPosition);
      }

      public virtual IntPtr ISteamController_GetStringForActionOrigin(ControllerActionOrigin eOrigin)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamController_GetStringForActionOrigin(this._ptr, eOrigin) : throw new Exception("ISteamController _ptr is null!");
      }

      public virtual IntPtr ISteamController_GetGlyphForActionOrigin(ControllerActionOrigin eOrigin)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamController_GetGlyphForActionOrigin(this._ptr, eOrigin) : throw new Exception("ISteamController _ptr is null!");
      }

      public virtual UGCQueryHandle_t ISteamUGC_CreateQueryUserUGCRequest(
        uint unAccountID,
        UserUGCList eListType,
        UGCMatchingUGCType eMatchingUGCType,
        UserUGCListSortOrder eSortOrder,
        uint nCreatorAppID,
        uint nConsumerAppID,
        uint unPage)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamUGC_CreateQueryUserUGCRequest(this._ptr, unAccountID, eListType, eMatchingUGCType, eSortOrder, nCreatorAppID, nConsumerAppID, unPage);
      }

      public virtual UGCQueryHandle_t ISteamUGC_CreateQueryAllUGCRequest(
        UGCQuery eQueryType,
        UGCMatchingUGCType eMatchingeMatchingUGCTypeFileType,
        uint nCreatorAppID,
        uint nConsumerAppID,
        uint unPage)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamUGC_CreateQueryAllUGCRequest(this._ptr, eQueryType, eMatchingeMatchingUGCTypeFileType, nCreatorAppID, nConsumerAppID, unPage);
      }

      public virtual UGCQueryHandle_t ISteamUGC_CreateQueryUGCDetailsRequest(
        IntPtr pvecPublishedFileID,
        uint unNumPublishedFileIDs)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamUGC_CreateQueryUGCDetailsRequest(this._ptr, pvecPublishedFileID, unNumPublishedFileIDs);
      }

      public virtual SteamAPICall_t ISteamUGC_SendQueryUGCRequest(ulong handle)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamUGC_SendQueryUGCRequest(this._ptr, handle) : throw new Exception("ISteamUGC _ptr is null!");
      }

      public virtual bool ISteamUGC_GetQueryUGCResult(
        ulong handle,
        uint index,
        ref SteamUGCDetails_t pDetails)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamUGC_GetQueryUGCResult(this._ptr, handle, index, ref pDetails);
      }

      public virtual bool ISteamUGC_GetQueryUGCPreviewURL(
        ulong handle,
        uint index,
        StringBuilder pchURL,
        uint cchURLSize)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamUGC_GetQueryUGCPreviewURL(this._ptr, handle, index, pchURL, cchURLSize);
      }

      public virtual bool ISteamUGC_GetQueryUGCMetadata(
        ulong handle,
        uint index,
        StringBuilder pchMetadata,
        uint cchMetadatasize)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamUGC_GetQueryUGCMetadata(this._ptr, handle, index, pchMetadata, cchMetadatasize);
      }

      public virtual bool ISteamUGC_GetQueryUGCChildren(
        ulong handle,
        uint index,
        IntPtr pvecPublishedFileID,
        uint cMaxEntries)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamUGC_GetQueryUGCChildren(this._ptr, handle, index, pvecPublishedFileID, cMaxEntries);
      }

      public virtual bool ISteamUGC_GetQueryUGCStatistic(
        ulong handle,
        uint index,
        ItemStatistic eStatType,
        out ulong pStatValue)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamUGC_GetQueryUGCStatistic(this._ptr, handle, index, eStatType, out pStatValue);
      }

      public virtual uint ISteamUGC_GetQueryUGCNumAdditionalPreviews(ulong handle, uint index)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamUGC_GetQueryUGCNumAdditionalPreviews(this._ptr, handle, index);
      }

      public virtual bool ISteamUGC_GetQueryUGCAdditionalPreview(
        ulong handle,
        uint index,
        uint previewIndex,
        StringBuilder pchURLOrVideoID,
        uint cchURLSize,
        StringBuilder pchOriginalFileName,
        uint cchOriginalFileNameSize,
        out ItemPreviewType pPreviewType)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamUGC_GetQueryUGCAdditionalPreview(this._ptr, handle, index, previewIndex, pchURLOrVideoID, cchURLSize, pchOriginalFileName, cchOriginalFileNameSize, out pPreviewType);
      }

      public virtual uint ISteamUGC_GetQueryUGCNumKeyValueTags(ulong handle, uint index)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamUGC_GetQueryUGCNumKeyValueTags(this._ptr, handle, index);
      }

      public virtual bool ISteamUGC_GetQueryUGCKeyValueTag(
        ulong handle,
        uint index,
        uint keyValueTagIndex,
        StringBuilder pchKey,
        uint cchKeySize,
        StringBuilder pchValue,
        uint cchValueSize)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamUGC_GetQueryUGCKeyValueTag(this._ptr, handle, index, keyValueTagIndex, pchKey, cchKeySize, pchValue, cchValueSize);
      }

      public virtual bool ISteamUGC_ReleaseQueryUGCRequest(ulong handle)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamUGC_ReleaseQueryUGCRequest(this._ptr, handle) : throw new Exception("ISteamUGC _ptr is null!");
      }

      public virtual bool ISteamUGC_AddRequiredTag(ulong handle, string pTagName)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamUGC_AddRequiredTag(this._ptr, handle, pTagName);
      }

      public virtual bool ISteamUGC_AddExcludedTag(ulong handle, string pTagName)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamUGC_AddExcludedTag(this._ptr, handle, pTagName);
      }

      public virtual bool ISteamUGC_SetReturnOnlyIDs(ulong handle, [MarshalAs(UnmanagedType.U1)] bool bReturnOnlyIDs)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamUGC_SetReturnOnlyIDs(this._ptr, handle, bReturnOnlyIDs);
      }

      public virtual bool ISteamUGC_SetReturnKeyValueTags(ulong handle, [MarshalAs(UnmanagedType.U1)] bool bReturnKeyValueTags)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamUGC_SetReturnKeyValueTags(this._ptr, handle, bReturnKeyValueTags);
      }

      public virtual bool ISteamUGC_SetReturnLongDescription(
        ulong handle,
        [MarshalAs(UnmanagedType.U1)] bool bReturnLongDescription)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamUGC_SetReturnLongDescription(this._ptr, handle, bReturnLongDescription);
      }

      public virtual bool ISteamUGC_SetReturnMetadata(ulong handle, [MarshalAs(UnmanagedType.U1)] bool bReturnMetadata)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamUGC_SetReturnMetadata(this._ptr, handle, bReturnMetadata);
      }

      public virtual bool ISteamUGC_SetReturnChildren(ulong handle, [MarshalAs(UnmanagedType.U1)] bool bReturnChildren)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamUGC_SetReturnChildren(this._ptr, handle, bReturnChildren);
      }

      public virtual bool ISteamUGC_SetReturnAdditionalPreviews(
        ulong handle,
        [MarshalAs(UnmanagedType.U1)] bool bReturnAdditionalPreviews)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamUGC_SetReturnAdditionalPreviews(this._ptr, handle, bReturnAdditionalPreviews);
      }

      public virtual bool ISteamUGC_SetReturnTotalOnly(ulong handle, [MarshalAs(UnmanagedType.U1)] bool bReturnTotalOnly)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamUGC_SetReturnTotalOnly(this._ptr, handle, bReturnTotalOnly);
      }

      public virtual bool ISteamUGC_SetReturnPlaytimeStats(ulong handle, uint unDays)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamUGC_SetReturnPlaytimeStats(this._ptr, handle, unDays);
      }

      public virtual bool ISteamUGC_SetLanguage(ulong handle, string pchLanguage)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamUGC_SetLanguage(this._ptr, handle, pchLanguage);
      }

      public virtual bool ISteamUGC_SetAllowCachedResponse(ulong handle, uint unMaxAgeSeconds)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamUGC_SetAllowCachedResponse(this._ptr, handle, unMaxAgeSeconds);
      }

      public virtual bool ISteamUGC_SetCloudFileNameFilter(ulong handle, string pMatchCloudFileName)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamUGC_SetCloudFileNameFilter(this._ptr, handle, pMatchCloudFileName);
      }

      public virtual bool ISteamUGC_SetMatchAnyTag(ulong handle, [MarshalAs(UnmanagedType.U1)] bool bMatchAnyTag)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamUGC_SetMatchAnyTag(this._ptr, handle, bMatchAnyTag);
      }

      public virtual bool ISteamUGC_SetSearchText(ulong handle, string pSearchText)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamUGC_SetSearchText(this._ptr, handle, pSearchText);
      }

      public virtual bool ISteamUGC_SetRankedByTrendDays(ulong handle, uint unDays)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamUGC_SetRankedByTrendDays(this._ptr, handle, unDays);
      }

      public virtual bool ISteamUGC_AddRequiredKeyValueTag(
        ulong handle,
        string pKey,
        string pValue)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamUGC_AddRequiredKeyValueTag(this._ptr, handle, pKey, pValue);
      }

      public virtual SteamAPICall_t ISteamUGC_RequestUGCDetails(
        ulong nPublishedFileID,
        uint unMaxAgeSeconds)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamUGC_RequestUGCDetails(this._ptr, nPublishedFileID, unMaxAgeSeconds);
      }

      public virtual SteamAPICall_t ISteamUGC_CreateItem(
        uint nConsumerAppId,
        WorkshopFileType eFileType)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamUGC_CreateItem(this._ptr, nConsumerAppId, eFileType);
      }

      public virtual UGCUpdateHandle_t ISteamUGC_StartItemUpdate(
        uint nConsumerAppId,
        ulong nPublishedFileID)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamUGC_StartItemUpdate(this._ptr, nConsumerAppId, nPublishedFileID);
      }

      public virtual bool ISteamUGC_SetItemTitle(ulong handle, string pchTitle)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamUGC_SetItemTitle(this._ptr, handle, pchTitle);
      }

      public virtual bool ISteamUGC_SetItemDescription(ulong handle, string pchDescription)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamUGC_SetItemDescription(this._ptr, handle, pchDescription);
      }

      public virtual bool ISteamUGC_SetItemUpdateLanguage(ulong handle, string pchLanguage)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamUGC_SetItemUpdateLanguage(this._ptr, handle, pchLanguage);
      }

      public virtual bool ISteamUGC_SetItemMetadata(ulong handle, string pchMetaData)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamUGC_SetItemMetadata(this._ptr, handle, pchMetaData);
      }

      public virtual bool ISteamUGC_SetItemVisibility(
        ulong handle,
        RemoteStoragePublishedFileVisibility eVisibility)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamUGC_SetItemVisibility(this._ptr, handle, eVisibility);
      }

      public virtual bool ISteamUGC_SetItemTags(
        ulong updateHandle,
        ref SteamParamStringArray_t pTags)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamUGC_SetItemTags(this._ptr, updateHandle, ref pTags);
      }

      public virtual bool ISteamUGC_SetItemContent(ulong handle, string pszContentFolder)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamUGC_SetItemContent(this._ptr, handle, pszContentFolder);
      }

      public virtual bool ISteamUGC_SetItemPreview(ulong handle, string pszPreviewFile)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamUGC_SetItemPreview(this._ptr, handle, pszPreviewFile);
      }

      public virtual bool ISteamUGC_RemoveItemKeyValueTags(ulong handle, string pchKey)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamUGC_RemoveItemKeyValueTags(this._ptr, handle, pchKey);
      }

      public virtual bool ISteamUGC_AddItemKeyValueTag(
        ulong handle,
        string pchKey,
        string pchValue)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamUGC_AddItemKeyValueTag(this._ptr, handle, pchKey, pchValue);
      }

      public virtual bool ISteamUGC_AddItemPreviewFile(
        ulong handle,
        string pszPreviewFile,
        ItemPreviewType type)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamUGC_AddItemPreviewFile(this._ptr, handle, pszPreviewFile, type);
      }

      public virtual bool ISteamUGC_AddItemPreviewVideo(ulong handle, string pszVideoID)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamUGC_AddItemPreviewVideo(this._ptr, handle, pszVideoID);
      }

      public virtual bool ISteamUGC_UpdateItemPreviewFile(
        ulong handle,
        uint index,
        string pszPreviewFile)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamUGC_UpdateItemPreviewFile(this._ptr, handle, index, pszPreviewFile);
      }

      public virtual bool ISteamUGC_UpdateItemPreviewVideo(
        ulong handle,
        uint index,
        string pszVideoID)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamUGC_UpdateItemPreviewVideo(this._ptr, handle, index, pszVideoID);
      }

      public virtual bool ISteamUGC_RemoveItemPreview(ulong handle, uint index)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamUGC_RemoveItemPreview(this._ptr, handle, index);
      }

      public virtual SteamAPICall_t ISteamUGC_SubmitItemUpdate(ulong handle, string pchChangeNote)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamUGC_SubmitItemUpdate(this._ptr, handle, pchChangeNote);
      }

      public virtual ItemUpdateStatus ISteamUGC_GetItemUpdateProgress(
        ulong handle,
        out ulong punBytesProcessed,
        out ulong punBytesTotal)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamUGC_GetItemUpdateProgress(this._ptr, handle, out punBytesProcessed, out punBytesTotal) : throw new Exception("ISteamUGC _ptr is null!");
      }

      public virtual SteamAPICall_t ISteamUGC_SetUserItemVote(ulong nPublishedFileID, [MarshalAs(UnmanagedType.U1)] bool bVoteUp)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamUGC_SetUserItemVote(this._ptr, nPublishedFileID, bVoteUp);
      }

      public virtual SteamAPICall_t ISteamUGC_GetUserItemVote(ulong nPublishedFileID)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamUGC_GetUserItemVote(this._ptr, nPublishedFileID) : throw new Exception("ISteamUGC _ptr is null!");
      }

      public virtual SteamAPICall_t ISteamUGC_AddItemToFavorites(
        uint nAppId,
        ulong nPublishedFileID)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamUGC_AddItemToFavorites(this._ptr, nAppId, nPublishedFileID);
      }

      public virtual SteamAPICall_t ISteamUGC_RemoveItemFromFavorites(
        uint nAppId,
        ulong nPublishedFileID)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamUGC_RemoveItemFromFavorites(this._ptr, nAppId, nPublishedFileID);
      }

      public virtual SteamAPICall_t ISteamUGC_SubscribeItem(ulong nPublishedFileID)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamUGC_SubscribeItem(this._ptr, nPublishedFileID) : throw new Exception("ISteamUGC _ptr is null!");
      }

      public virtual SteamAPICall_t ISteamUGC_UnsubscribeItem(ulong nPublishedFileID)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamUGC_UnsubscribeItem(this._ptr, nPublishedFileID) : throw new Exception("ISteamUGC _ptr is null!");
      }

      public virtual uint ISteamUGC_GetNumSubscribedItems()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamUGC_GetNumSubscribedItems(this._ptr) : throw new Exception("ISteamUGC _ptr is null!");
      }

      public virtual uint ISteamUGC_GetSubscribedItems(IntPtr pvecPublishedFileID, uint cMaxEntries)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamUGC_GetSubscribedItems(this._ptr, pvecPublishedFileID, cMaxEntries);
      }

      public virtual uint ISteamUGC_GetItemState(ulong nPublishedFileID)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamUGC_GetItemState(this._ptr, nPublishedFileID) : throw new Exception("ISteamUGC _ptr is null!");
      }

      public virtual bool ISteamUGC_GetItemInstallInfo(
        ulong nPublishedFileID,
        out ulong punSizeOnDisk,
        StringBuilder pchFolder,
        uint cchFolderSize,
        out uint punTimeStamp)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamUGC_GetItemInstallInfo(this._ptr, nPublishedFileID, out punSizeOnDisk, pchFolder, cchFolderSize, out punTimeStamp);
      }

      public virtual bool ISteamUGC_GetItemDownloadInfo(
        ulong nPublishedFileID,
        out ulong punBytesDownloaded,
        out ulong punBytesTotal)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamUGC_GetItemDownloadInfo(this._ptr, nPublishedFileID, out punBytesDownloaded, out punBytesTotal) : throw new Exception("ISteamUGC _ptr is null!");
      }

      public virtual bool ISteamUGC_DownloadItem(ulong nPublishedFileID, [MarshalAs(UnmanagedType.U1)] bool bHighPriority)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamUGC_DownloadItem(this._ptr, nPublishedFileID, bHighPriority);
      }

      public virtual bool ISteamUGC_BInitWorkshopForGameServer(
        uint unWorkshopDepotID,
        string pszFolder)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamUGC_BInitWorkshopForGameServer(this._ptr, unWorkshopDepotID, pszFolder);
      }

      public virtual void ISteamUGC_SuspendDownloads([MarshalAs(UnmanagedType.U1)] bool bSuspend)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        Platform.Win64.Native.SteamAPI_ISteamUGC_SuspendDownloads(this._ptr, bSuspend);
      }

      public virtual SteamAPICall_t ISteamUGC_StartPlaytimeTracking(
        IntPtr pvecPublishedFileID,
        uint unNumPublishedFileIDs)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamUGC_StartPlaytimeTracking(this._ptr, pvecPublishedFileID, unNumPublishedFileIDs);
      }

      public virtual SteamAPICall_t ISteamUGC_StopPlaytimeTracking(
        IntPtr pvecPublishedFileID,
        uint unNumPublishedFileIDs)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamUGC_StopPlaytimeTracking(this._ptr, pvecPublishedFileID, unNumPublishedFileIDs);
      }

      public virtual SteamAPICall_t ISteamUGC_StopPlaytimeTrackingForAllItems()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamUGC_StopPlaytimeTrackingForAllItems(this._ptr) : throw new Exception("ISteamUGC _ptr is null!");
      }

      public virtual SteamAPICall_t ISteamUGC_AddDependency(
        ulong nParentPublishedFileID,
        ulong nChildPublishedFileID)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamUGC_AddDependency(this._ptr, nParentPublishedFileID, nChildPublishedFileID);
      }

      public virtual SteamAPICall_t ISteamUGC_RemoveDependency(
        ulong nParentPublishedFileID,
        ulong nChildPublishedFileID)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamUGC _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamUGC_RemoveDependency(this._ptr, nParentPublishedFileID, nChildPublishedFileID);
      }

      public virtual uint ISteamAppList_GetNumInstalledApps()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamAppList_GetNumInstalledApps(this._ptr) : throw new Exception("ISteamAppList _ptr is null!");
      }

      public virtual uint ISteamAppList_GetInstalledApps(IntPtr pvecAppID, uint unMaxAppIDs)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamAppList _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamAppList_GetInstalledApps(this._ptr, pvecAppID, unMaxAppIDs);
      }

      public virtual int ISteamAppList_GetAppName(
        uint nAppID,
        StringBuilder pchName,
        int cchNameMax)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamAppList _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamAppList_GetAppName(this._ptr, nAppID, pchName, cchNameMax);
      }

      public virtual int ISteamAppList_GetAppInstallDir(
        uint nAppID,
        StringBuilder pchDirectory,
        int cchNameMax)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamAppList _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamAppList_GetAppInstallDir(this._ptr, nAppID, pchDirectory, cchNameMax);
      }

      public virtual int ISteamAppList_GetAppBuildId(uint nAppID)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamAppList_GetAppBuildId(this._ptr, nAppID) : throw new Exception("ISteamAppList _ptr is null!");
      }

      public virtual void ISteamHTMLSurface_DestructISteamHTMLSurface()
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTMLSurface _ptr is null!");
        Platform.Win64.Native.SteamAPI_ISteamHTMLSurface_DestructISteamHTMLSurface(this._ptr);
      }

      public virtual bool ISteamHTMLSurface_Init()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamHTMLSurface_Init(this._ptr) : throw new Exception("ISteamHTMLSurface _ptr is null!");
      }

      public virtual bool ISteamHTMLSurface_Shutdown()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamHTMLSurface_Shutdown(this._ptr) : throw new Exception("ISteamHTMLSurface _ptr is null!");
      }

      public virtual SteamAPICall_t ISteamHTMLSurface_CreateBrowser(
        string pchUserAgent,
        string pchUserCSS)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTMLSurface _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamHTMLSurface_CreateBrowser(this._ptr, pchUserAgent, pchUserCSS);
      }

      public virtual void ISteamHTMLSurface_RemoveBrowser(uint unBrowserHandle)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTMLSurface _ptr is null!");
        Platform.Win64.Native.SteamAPI_ISteamHTMLSurface_RemoveBrowser(this._ptr, unBrowserHandle);
      }

      public virtual void ISteamHTMLSurface_LoadURL(
        uint unBrowserHandle,
        string pchURL,
        string pchPostData)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTMLSurface _ptr is null!");
        Platform.Win64.Native.SteamAPI_ISteamHTMLSurface_LoadURL(this._ptr, unBrowserHandle, pchURL, pchPostData);
      }

      public virtual void ISteamHTMLSurface_SetSize(
        uint unBrowserHandle,
        uint unWidth,
        uint unHeight)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTMLSurface _ptr is null!");
        Platform.Win64.Native.SteamAPI_ISteamHTMLSurface_SetSize(this._ptr, unBrowserHandle, unWidth, unHeight);
      }

      public virtual void ISteamHTMLSurface_StopLoad(uint unBrowserHandle)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTMLSurface _ptr is null!");
        Platform.Win64.Native.SteamAPI_ISteamHTMLSurface_StopLoad(this._ptr, unBrowserHandle);
      }

      public virtual void ISteamHTMLSurface_Reload(uint unBrowserHandle)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTMLSurface _ptr is null!");
        Platform.Win64.Native.SteamAPI_ISteamHTMLSurface_Reload(this._ptr, unBrowserHandle);
      }

      public virtual void ISteamHTMLSurface_GoBack(uint unBrowserHandle)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTMLSurface _ptr is null!");
        Platform.Win64.Native.SteamAPI_ISteamHTMLSurface_GoBack(this._ptr, unBrowserHandle);
      }

      public virtual void ISteamHTMLSurface_GoForward(uint unBrowserHandle)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTMLSurface _ptr is null!");
        Platform.Win64.Native.SteamAPI_ISteamHTMLSurface_GoForward(this._ptr, unBrowserHandle);
      }

      public virtual void ISteamHTMLSurface_AddHeader(
        uint unBrowserHandle,
        string pchKey,
        string pchValue)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTMLSurface _ptr is null!");
        Platform.Win64.Native.SteamAPI_ISteamHTMLSurface_AddHeader(this._ptr, unBrowserHandle, pchKey, pchValue);
      }

      public virtual void ISteamHTMLSurface_ExecuteJavascript(
        uint unBrowserHandle,
        string pchScript)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTMLSurface _ptr is null!");
        Platform.Win64.Native.SteamAPI_ISteamHTMLSurface_ExecuteJavascript(this._ptr, unBrowserHandle, pchScript);
      }

      public virtual void ISteamHTMLSurface_MouseUp(
        uint unBrowserHandle,
        HTMLMouseButton eMouseButton)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTMLSurface _ptr is null!");
        Platform.Win64.Native.SteamAPI_ISteamHTMLSurface_MouseUp(this._ptr, unBrowserHandle, eMouseButton);
      }

      public virtual void ISteamHTMLSurface_MouseDown(
        uint unBrowserHandle,
        HTMLMouseButton eMouseButton)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTMLSurface _ptr is null!");
        Platform.Win64.Native.SteamAPI_ISteamHTMLSurface_MouseDown(this._ptr, unBrowserHandle, eMouseButton);
      }

      public virtual void ISteamHTMLSurface_MouseDoubleClick(
        uint unBrowserHandle,
        HTMLMouseButton eMouseButton)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTMLSurface _ptr is null!");
        Platform.Win64.Native.SteamAPI_ISteamHTMLSurface_MouseDoubleClick(this._ptr, unBrowserHandle, eMouseButton);
      }

      public virtual void ISteamHTMLSurface_MouseMove(uint unBrowserHandle, int x, int y)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTMLSurface _ptr is null!");
        Platform.Win64.Native.SteamAPI_ISteamHTMLSurface_MouseMove(this._ptr, unBrowserHandle, x, y);
      }

      public virtual void ISteamHTMLSurface_MouseWheel(uint unBrowserHandle, int nDelta)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTMLSurface _ptr is null!");
        Platform.Win64.Native.SteamAPI_ISteamHTMLSurface_MouseWheel(this._ptr, unBrowserHandle, nDelta);
      }

      public virtual void ISteamHTMLSurface_KeyDown(
        uint unBrowserHandle,
        uint nNativeKeyCode,
        HTMLKeyModifiers eHTMLKeyModifiers)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTMLSurface _ptr is null!");
        Platform.Win64.Native.SteamAPI_ISteamHTMLSurface_KeyDown(this._ptr, unBrowserHandle, nNativeKeyCode, eHTMLKeyModifiers);
      }

      public virtual void ISteamHTMLSurface_KeyUp(
        uint unBrowserHandle,
        uint nNativeKeyCode,
        HTMLKeyModifiers eHTMLKeyModifiers)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTMLSurface _ptr is null!");
        Platform.Win64.Native.SteamAPI_ISteamHTMLSurface_KeyUp(this._ptr, unBrowserHandle, nNativeKeyCode, eHTMLKeyModifiers);
      }

      public virtual void ISteamHTMLSurface_KeyChar(
        uint unBrowserHandle,
        uint cUnicodeChar,
        HTMLKeyModifiers eHTMLKeyModifiers)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTMLSurface _ptr is null!");
        Platform.Win64.Native.SteamAPI_ISteamHTMLSurface_KeyChar(this._ptr, unBrowserHandle, cUnicodeChar, eHTMLKeyModifiers);
      }

      public virtual void ISteamHTMLSurface_SetHorizontalScroll(
        uint unBrowserHandle,
        uint nAbsolutePixelScroll)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTMLSurface _ptr is null!");
        Platform.Win64.Native.SteamAPI_ISteamHTMLSurface_SetHorizontalScroll(this._ptr, unBrowserHandle, nAbsolutePixelScroll);
      }

      public virtual void ISteamHTMLSurface_SetVerticalScroll(
        uint unBrowserHandle,
        uint nAbsolutePixelScroll)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTMLSurface _ptr is null!");
        Platform.Win64.Native.SteamAPI_ISteamHTMLSurface_SetVerticalScroll(this._ptr, unBrowserHandle, nAbsolutePixelScroll);
      }

      public virtual void ISteamHTMLSurface_SetKeyFocus(uint unBrowserHandle, [MarshalAs(UnmanagedType.U1)] bool bHasKeyFocus)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTMLSurface _ptr is null!");
        Platform.Win64.Native.SteamAPI_ISteamHTMLSurface_SetKeyFocus(this._ptr, unBrowserHandle, bHasKeyFocus);
      }

      public virtual void ISteamHTMLSurface_ViewSource(uint unBrowserHandle)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTMLSurface _ptr is null!");
        Platform.Win64.Native.SteamAPI_ISteamHTMLSurface_ViewSource(this._ptr, unBrowserHandle);
      }

      public virtual void ISteamHTMLSurface_CopyToClipboard(uint unBrowserHandle)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTMLSurface _ptr is null!");
        Platform.Win64.Native.SteamAPI_ISteamHTMLSurface_CopyToClipboard(this._ptr, unBrowserHandle);
      }

      public virtual void ISteamHTMLSurface_PasteFromClipboard(uint unBrowserHandle)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTMLSurface _ptr is null!");
        Platform.Win64.Native.SteamAPI_ISteamHTMLSurface_PasteFromClipboard(this._ptr, unBrowserHandle);
      }

      public virtual void ISteamHTMLSurface_Find(
        uint unBrowserHandle,
        string pchSearchStr,
        [MarshalAs(UnmanagedType.U1)] bool bCurrentlyInFind,
        [MarshalAs(UnmanagedType.U1)] bool bReverse)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTMLSurface _ptr is null!");
        Platform.Win64.Native.SteamAPI_ISteamHTMLSurface_Find(this._ptr, unBrowserHandle, pchSearchStr, bCurrentlyInFind, bReverse);
      }

      public virtual void ISteamHTMLSurface_StopFind(uint unBrowserHandle)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTMLSurface _ptr is null!");
        Platform.Win64.Native.SteamAPI_ISteamHTMLSurface_StopFind(this._ptr, unBrowserHandle);
      }

      public virtual void ISteamHTMLSurface_GetLinkAtPosition(uint unBrowserHandle, int x, int y)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTMLSurface _ptr is null!");
        Platform.Win64.Native.SteamAPI_ISteamHTMLSurface_GetLinkAtPosition(this._ptr, unBrowserHandle, x, y);
      }

      public virtual void ISteamHTMLSurface_SetCookie(
        string pchHostname,
        string pchKey,
        string pchValue,
        string pchPath,
        uint nExpires,
        [MarshalAs(UnmanagedType.U1)] bool bSecure,
        [MarshalAs(UnmanagedType.U1)] bool bHTTPOnly)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTMLSurface _ptr is null!");
        Platform.Win64.Native.SteamAPI_ISteamHTMLSurface_SetCookie(this._ptr, pchHostname, pchKey, pchValue, pchPath, nExpires, bSecure, bHTTPOnly);
      }

      public virtual void ISteamHTMLSurface_SetPageScaleFactor(
        uint unBrowserHandle,
        float flZoom,
        int nPointX,
        int nPointY)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTMLSurface _ptr is null!");
        Platform.Win64.Native.SteamAPI_ISteamHTMLSurface_SetPageScaleFactor(this._ptr, unBrowserHandle, flZoom, nPointX, nPointY);
      }

      public virtual void ISteamHTMLSurface_SetBackgroundMode(
        uint unBrowserHandle,
        [MarshalAs(UnmanagedType.U1)] bool bBackgroundMode)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTMLSurface _ptr is null!");
        Platform.Win64.Native.SteamAPI_ISteamHTMLSurface_SetBackgroundMode(this._ptr, unBrowserHandle, bBackgroundMode);
      }

      public virtual void ISteamHTMLSurface_AllowStartRequest(uint unBrowserHandle, [MarshalAs(UnmanagedType.U1)] bool bAllowed)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTMLSurface _ptr is null!");
        Platform.Win64.Native.SteamAPI_ISteamHTMLSurface_AllowStartRequest(this._ptr, unBrowserHandle, bAllowed);
      }

      public virtual void ISteamHTMLSurface_JSDialogResponse(uint unBrowserHandle, [MarshalAs(UnmanagedType.U1)] bool bResult)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamHTMLSurface _ptr is null!");
        Platform.Win64.Native.SteamAPI_ISteamHTMLSurface_JSDialogResponse(this._ptr, unBrowserHandle, bResult);
      }

      public virtual Result ISteamInventory_GetResultStatus(int resultHandle)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamInventory_GetResultStatus(this._ptr, resultHandle) : throw new Exception("ISteamInventory _ptr is null!");
      }

      public virtual bool ISteamInventory_GetResultItems(
        int resultHandle,
        IntPtr pOutItemsArray,
        out uint punOutItemsArraySize)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamInventory _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamInventory_GetResultItems(this._ptr, resultHandle, pOutItemsArray, out punOutItemsArraySize);
      }

      public virtual bool ISteamInventory_GetResultItemProperty(
        int resultHandle,
        uint unItemIndex,
        string pchPropertyName,
        StringBuilder pchValueBuffer,
        out uint punValueBufferSizeOut)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamInventory _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamInventory_GetResultItemProperty(this._ptr, resultHandle, unItemIndex, pchPropertyName, pchValueBuffer, out punValueBufferSizeOut);
      }

      public virtual uint ISteamInventory_GetResultTimestamp(int resultHandle)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamInventory_GetResultTimestamp(this._ptr, resultHandle) : throw new Exception("ISteamInventory _ptr is null!");
      }

      public virtual bool ISteamInventory_CheckResultSteamID(
        int resultHandle,
        ulong steamIDExpected)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamInventory _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamInventory_CheckResultSteamID(this._ptr, resultHandle, steamIDExpected);
      }

      public virtual void ISteamInventory_DestroyResult(int resultHandle)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamInventory _ptr is null!");
        Platform.Win64.Native.SteamAPI_ISteamInventory_DestroyResult(this._ptr, resultHandle);
      }

      public virtual bool ISteamInventory_GetAllItems(ref int pResultHandle)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamInventory_GetAllItems(this._ptr, ref pResultHandle) : throw new Exception("ISteamInventory _ptr is null!");
      }

      public virtual bool ISteamInventory_GetItemsByID(
        ref int pResultHandle,
        ulong[] pInstanceIDs,
        uint unCountInstanceIDs)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamInventory _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamInventory_GetItemsByID(this._ptr, ref pResultHandle, pInstanceIDs, unCountInstanceIDs);
      }

      public virtual bool ISteamInventory_SerializeResult(
        int resultHandle,
        IntPtr pOutBuffer,
        out uint punOutBufferSize)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamInventory _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamInventory_SerializeResult(this._ptr, resultHandle, pOutBuffer, out punOutBufferSize);
      }

      public virtual bool ISteamInventory_DeserializeResult(
        ref int pOutResultHandle,
        IntPtr pBuffer,
        uint unBufferSize,
        [MarshalAs(UnmanagedType.U1)] bool bRESERVED_MUST_BE_FALSE)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamInventory _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamInventory_DeserializeResult(this._ptr, ref pOutResultHandle, pBuffer, unBufferSize, bRESERVED_MUST_BE_FALSE);
      }

      public virtual bool ISteamInventory_GenerateItems(
        ref int pResultHandle,
        int[] pArrayItemDefs,
        uint[] punArrayQuantity,
        uint unArrayLength)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamInventory _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamInventory_GenerateItems(this._ptr, ref pResultHandle, pArrayItemDefs, punArrayQuantity, unArrayLength);
      }

      public virtual bool ISteamInventory_GrantPromoItems(ref int pResultHandle)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamInventory_GrantPromoItems(this._ptr, ref pResultHandle) : throw new Exception("ISteamInventory _ptr is null!");
      }

      public virtual bool ISteamInventory_AddPromoItem(ref int pResultHandle, int itemDef)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamInventory _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamInventory_AddPromoItem(this._ptr, ref pResultHandle, itemDef);
      }

      public virtual bool ISteamInventory_AddPromoItems(
        ref int pResultHandle,
        int[] pArrayItemDefs,
        uint unArrayLength)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamInventory _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamInventory_AddPromoItems(this._ptr, ref pResultHandle, pArrayItemDefs, unArrayLength);
      }

      public virtual bool ISteamInventory_ConsumeItem(
        ref int pResultHandle,
        ulong itemConsume,
        uint unQuantity)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamInventory _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamInventory_ConsumeItem(this._ptr, ref pResultHandle, itemConsume, unQuantity);
      }

      public virtual bool ISteamInventory_ExchangeItems(
        ref int pResultHandle,
        int[] pArrayGenerate,
        uint[] punArrayGenerateQuantity,
        uint unArrayGenerateLength,
        ulong[] pArrayDestroy,
        uint[] punArrayDestroyQuantity,
        uint unArrayDestroyLength)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamInventory _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamInventory_ExchangeItems(this._ptr, ref pResultHandle, pArrayGenerate, punArrayGenerateQuantity, unArrayGenerateLength, pArrayDestroy, punArrayDestroyQuantity, unArrayDestroyLength);
      }

      public virtual bool ISteamInventory_TransferItemQuantity(
        ref int pResultHandle,
        ulong itemIdSource,
        uint unQuantity,
        ulong itemIdDest)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamInventory _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamInventory_TransferItemQuantity(this._ptr, ref pResultHandle, itemIdSource, unQuantity, itemIdDest);
      }

      public virtual void ISteamInventory_SendItemDropHeartbeat()
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamInventory _ptr is null!");
        Platform.Win64.Native.SteamAPI_ISteamInventory_SendItemDropHeartbeat(this._ptr);
      }

      public virtual bool ISteamInventory_TriggerItemDrop(
        ref int pResultHandle,
        int dropListDefinition)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamInventory _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamInventory_TriggerItemDrop(this._ptr, ref pResultHandle, dropListDefinition);
      }

      public virtual bool ISteamInventory_TradeItems(
        ref int pResultHandle,
        ulong steamIDTradePartner,
        ulong[] pArrayGive,
        uint[] pArrayGiveQuantity,
        uint nArrayGiveLength,
        ulong[] pArrayGet,
        uint[] pArrayGetQuantity,
        uint nArrayGetLength)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamInventory _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamInventory_TradeItems(this._ptr, ref pResultHandle, steamIDTradePartner, pArrayGive, pArrayGiveQuantity, nArrayGiveLength, pArrayGet, pArrayGetQuantity, nArrayGetLength);
      }

      public virtual bool ISteamInventory_LoadItemDefinitions()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamInventory_LoadItemDefinitions(this._ptr) : throw new Exception("ISteamInventory _ptr is null!");
      }

      public virtual bool ISteamInventory_GetItemDefinitionIDs(
        IntPtr pItemDefIDs,
        out uint punItemDefIDsArraySize)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamInventory_GetItemDefinitionIDs(this._ptr, pItemDefIDs, out punItemDefIDsArraySize) : throw new Exception("ISteamInventory _ptr is null!");
      }

      public virtual bool ISteamInventory_GetItemDefinitionProperty(
        int iDefinition,
        string pchPropertyName,
        StringBuilder pchValueBuffer,
        out uint punValueBufferSizeOut)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamInventory _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamInventory_GetItemDefinitionProperty(this._ptr, iDefinition, pchPropertyName, pchValueBuffer, out punValueBufferSizeOut);
      }

      public virtual SteamAPICall_t ISteamInventory_RequestEligiblePromoItemDefinitionsIDs(
        ulong steamID)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamInventory_RequestEligiblePromoItemDefinitionsIDs(this._ptr, steamID) : throw new Exception("ISteamInventory _ptr is null!");
      }

      public virtual bool ISteamInventory_GetEligiblePromoItemDefinitionIDs(
        ulong steamID,
        IntPtr pItemDefIDs,
        out uint punItemDefIDsArraySize)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamInventory _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamInventory_GetEligiblePromoItemDefinitionIDs(this._ptr, steamID, pItemDefIDs, out punItemDefIDsArraySize);
      }

      public virtual void ISteamVideo_GetVideoURL(uint unVideoAppID)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamVideo _ptr is null!");
        Platform.Win64.Native.SteamAPI_ISteamVideo_GetVideoURL(this._ptr, unVideoAppID);
      }

      public virtual bool ISteamVideo_IsBroadcasting(IntPtr pnNumViewers)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamVideo_IsBroadcasting(this._ptr, pnNumViewers) : throw new Exception("ISteamVideo _ptr is null!");
      }

      public virtual void ISteamVideo_GetOPFSettings(uint unVideoAppID)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamVideo _ptr is null!");
        Platform.Win64.Native.SteamAPI_ISteamVideo_GetOPFSettings(this._ptr, unVideoAppID);
      }

      public virtual bool ISteamVideo_GetOPFStringForApp(
        uint unVideoAppID,
        StringBuilder pchBuffer,
        out int pnBufferSize)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamVideo _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamVideo_GetOPFStringForApp(this._ptr, unVideoAppID, pchBuffer, out pnBufferSize);
      }

      public virtual bool ISteamGameServer_InitGameServer(
        uint unIP,
        ushort usGamePort,
        ushort usQueryPort,
        uint unFlags,
        uint nGameAppId,
        string pchVersionString)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServer _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamGameServer_InitGameServer(this._ptr, unIP, usGamePort, usQueryPort, unFlags, nGameAppId, pchVersionString);
      }

      public virtual void ISteamGameServer_SetProduct(string pszProduct)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServer _ptr is null!");
        Platform.Win64.Native.SteamAPI_ISteamGameServer_SetProduct(this._ptr, pszProduct);
      }

      public virtual void ISteamGameServer_SetGameDescription(string pszGameDescription)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServer _ptr is null!");
        Platform.Win64.Native.SteamAPI_ISteamGameServer_SetGameDescription(this._ptr, pszGameDescription);
      }

      public virtual void ISteamGameServer_SetModDir(string pszModDir)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServer _ptr is null!");
        Platform.Win64.Native.SteamAPI_ISteamGameServer_SetModDir(this._ptr, pszModDir);
      }

      public virtual void ISteamGameServer_SetDedicatedServer([MarshalAs(UnmanagedType.U1)] bool bDedicated)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServer _ptr is null!");
        Platform.Win64.Native.SteamAPI_ISteamGameServer_SetDedicatedServer(this._ptr, bDedicated);
      }

      public virtual void ISteamGameServer_LogOn(string pszToken)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServer _ptr is null!");
        Platform.Win64.Native.SteamAPI_ISteamGameServer_LogOn(this._ptr, pszToken);
      }

      public virtual void ISteamGameServer_LogOnAnonymous()
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServer _ptr is null!");
        Platform.Win64.Native.SteamAPI_ISteamGameServer_LogOnAnonymous(this._ptr);
      }

      public virtual void ISteamGameServer_LogOff()
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServer _ptr is null!");
        Platform.Win64.Native.SteamAPI_ISteamGameServer_LogOff(this._ptr);
      }

      public virtual bool ISteamGameServer_BLoggedOn()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamGameServer_BLoggedOn(this._ptr) : throw new Exception("ISteamGameServer _ptr is null!");
      }

      public virtual bool ISteamGameServer_BSecure()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamGameServer_BSecure(this._ptr) : throw new Exception("ISteamGameServer _ptr is null!");
      }

      public virtual CSteamID ISteamGameServer_GetSteamID()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamGameServer_GetSteamID(this._ptr) : throw new Exception("ISteamGameServer _ptr is null!");
      }

      public virtual bool ISteamGameServer_WasRestartRequested()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamGameServer_WasRestartRequested(this._ptr) : throw new Exception("ISteamGameServer _ptr is null!");
      }

      public virtual void ISteamGameServer_SetMaxPlayerCount(int cPlayersMax)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServer _ptr is null!");
        Platform.Win64.Native.SteamAPI_ISteamGameServer_SetMaxPlayerCount(this._ptr, cPlayersMax);
      }

      public virtual void ISteamGameServer_SetBotPlayerCount(int cBotplayers)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServer _ptr is null!");
        Platform.Win64.Native.SteamAPI_ISteamGameServer_SetBotPlayerCount(this._ptr, cBotplayers);
      }

      public virtual void ISteamGameServer_SetServerName(string pszServerName)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServer _ptr is null!");
        Platform.Win64.Native.SteamAPI_ISteamGameServer_SetServerName(this._ptr, pszServerName);
      }

      public virtual void ISteamGameServer_SetMapName(string pszMapName)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServer _ptr is null!");
        Platform.Win64.Native.SteamAPI_ISteamGameServer_SetMapName(this._ptr, pszMapName);
      }

      public virtual void ISteamGameServer_SetPasswordProtected([MarshalAs(UnmanagedType.U1)] bool bPasswordProtected)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServer _ptr is null!");
        Platform.Win64.Native.SteamAPI_ISteamGameServer_SetPasswordProtected(this._ptr, bPasswordProtected);
      }

      public virtual void ISteamGameServer_SetSpectatorPort(ushort unSpectatorPort)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServer _ptr is null!");
        Platform.Win64.Native.SteamAPI_ISteamGameServer_SetSpectatorPort(this._ptr, unSpectatorPort);
      }

      public virtual void ISteamGameServer_SetSpectatorServerName(string pszSpectatorServerName)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServer _ptr is null!");
        Platform.Win64.Native.SteamAPI_ISteamGameServer_SetSpectatorServerName(this._ptr, pszSpectatorServerName);
      }

      public virtual void ISteamGameServer_ClearAllKeyValues()
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServer _ptr is null!");
        Platform.Win64.Native.SteamAPI_ISteamGameServer_ClearAllKeyValues(this._ptr);
      }

      public virtual void ISteamGameServer_SetKeyValue(string pKey, string pValue)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServer _ptr is null!");
        Platform.Win64.Native.SteamAPI_ISteamGameServer_SetKeyValue(this._ptr, pKey, pValue);
      }

      public virtual void ISteamGameServer_SetGameTags(string pchGameTags)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServer _ptr is null!");
        Platform.Win64.Native.SteamAPI_ISteamGameServer_SetGameTags(this._ptr, pchGameTags);
      }

      public virtual void ISteamGameServer_SetGameData(string pchGameData)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServer _ptr is null!");
        Platform.Win64.Native.SteamAPI_ISteamGameServer_SetGameData(this._ptr, pchGameData);
      }

      public virtual void ISteamGameServer_SetRegion(string pszRegion)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServer _ptr is null!");
        Platform.Win64.Native.SteamAPI_ISteamGameServer_SetRegion(this._ptr, pszRegion);
      }

      public virtual bool ISteamGameServer_SendUserConnectAndAuthenticate(
        uint unIPClient,
        IntPtr pvAuthBlob,
        uint cubAuthBlobSize,
        out ulong pSteamIDUser)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServer _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamGameServer_SendUserConnectAndAuthenticate(this._ptr, unIPClient, pvAuthBlob, cubAuthBlobSize, out pSteamIDUser);
      }

      public virtual CSteamID ISteamGameServer_CreateUnauthenticatedUserConnection()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamGameServer_CreateUnauthenticatedUserConnection(this._ptr) : throw new Exception("ISteamGameServer _ptr is null!");
      }

      public virtual void ISteamGameServer_SendUserDisconnect(ulong steamIDUser)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServer _ptr is null!");
        Platform.Win64.Native.SteamAPI_ISteamGameServer_SendUserDisconnect(this._ptr, steamIDUser);
      }

      public virtual bool ISteamGameServer_BUpdateUserData(
        ulong steamIDUser,
        string pchPlayerName,
        uint uScore)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServer _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamGameServer_BUpdateUserData(this._ptr, steamIDUser, pchPlayerName, uScore);
      }

      public virtual HAuthTicket ISteamGameServer_GetAuthSessionTicket(
        IntPtr pTicket,
        int cbMaxTicket,
        out uint pcbTicket)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServer _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamGameServer_GetAuthSessionTicket(this._ptr, pTicket, cbMaxTicket, out pcbTicket);
      }

      public virtual BeginAuthSessionResult ISteamGameServer_BeginAuthSession(
        IntPtr pAuthTicket,
        int cbAuthTicket,
        ulong steamID)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServer _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamGameServer_BeginAuthSession(this._ptr, pAuthTicket, cbAuthTicket, steamID);
      }

      public virtual void ISteamGameServer_EndAuthSession(ulong steamID)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServer _ptr is null!");
        Platform.Win64.Native.SteamAPI_ISteamGameServer_EndAuthSession(this._ptr, steamID);
      }

      public virtual void ISteamGameServer_CancelAuthTicket(uint hAuthTicket)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServer _ptr is null!");
        Platform.Win64.Native.SteamAPI_ISteamGameServer_CancelAuthTicket(this._ptr, hAuthTicket);
      }

      public virtual UserHasLicenseForAppResult ISteamGameServer_UserHasLicenseForApp(
        ulong steamID,
        uint appID)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServer _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamGameServer_UserHasLicenseForApp(this._ptr, steamID, appID);
      }

      public virtual bool ISteamGameServer_RequestUserGroupStatus(
        ulong steamIDUser,
        ulong steamIDGroup)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServer _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamGameServer_RequestUserGroupStatus(this._ptr, steamIDUser, steamIDGroup);
      }

      public virtual void ISteamGameServer_GetGameplayStats()
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServer _ptr is null!");
        Platform.Win64.Native.SteamAPI_ISteamGameServer_GetGameplayStats(this._ptr);
      }

      public virtual SteamAPICall_t ISteamGameServer_GetServerReputation()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamGameServer_GetServerReputation(this._ptr) : throw new Exception("ISteamGameServer _ptr is null!");
      }

      public virtual uint ISteamGameServer_GetPublicIP()
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamGameServer_GetPublicIP(this._ptr) : throw new Exception("ISteamGameServer _ptr is null!");
      }

      public virtual bool ISteamGameServer_HandleIncomingPacket(
        IntPtr pData,
        int cbData,
        uint srcIP,
        ushort srcPort)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServer _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamGameServer_HandleIncomingPacket(this._ptr, pData, cbData, srcIP, srcPort);
      }

      public virtual int ISteamGameServer_GetNextOutgoingPacket(
        IntPtr pOut,
        int cbMaxOut,
        out uint pNetAdr,
        out ushort pPort)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServer _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamGameServer_GetNextOutgoingPacket(this._ptr, pOut, cbMaxOut, out pNetAdr, out pPort);
      }

      public virtual void ISteamGameServer_EnableHeartbeats([MarshalAs(UnmanagedType.U1)] bool bActive)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServer _ptr is null!");
        Platform.Win64.Native.SteamAPI_ISteamGameServer_EnableHeartbeats(this._ptr, bActive);
      }

      public virtual void ISteamGameServer_SetHeartbeatInterval(int iHeartbeatInterval)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServer _ptr is null!");
        Platform.Win64.Native.SteamAPI_ISteamGameServer_SetHeartbeatInterval(this._ptr, iHeartbeatInterval);
      }

      public virtual void ISteamGameServer_ForceHeartbeat()
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServer _ptr is null!");
        Platform.Win64.Native.SteamAPI_ISteamGameServer_ForceHeartbeat(this._ptr);
      }

      public virtual SteamAPICall_t ISteamGameServer_AssociateWithClan(ulong steamIDClan)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamGameServer_AssociateWithClan(this._ptr, steamIDClan) : throw new Exception("ISteamGameServer _ptr is null!");
      }

      public virtual SteamAPICall_t ISteamGameServer_ComputeNewPlayerCompatibility(
        ulong steamIDNewPlayer)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamGameServer_ComputeNewPlayerCompatibility(this._ptr, steamIDNewPlayer) : throw new Exception("ISteamGameServer _ptr is null!");
      }

      public virtual SteamAPICall_t ISteamGameServerStats_RequestUserStats(ulong steamIDUser)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamGameServerStats_RequestUserStats(this._ptr, steamIDUser) : throw new Exception("ISteamGameServerStats _ptr is null!");
      }

      public virtual bool ISteamGameServerStats_GetUserStat(
        ulong steamIDUser,
        string pchName,
        out int pData)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServerStats _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamGameServerStats_GetUserStat(this._ptr, steamIDUser, pchName, out pData);
      }

      public virtual bool ISteamGameServerStats_GetUserStat0(
        ulong steamIDUser,
        string pchName,
        out float pData)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServerStats _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamGameServerStats_GetUserStat0(this._ptr, steamIDUser, pchName, out pData);
      }

      public virtual bool ISteamGameServerStats_GetUserAchievement(
        ulong steamIDUser,
        string pchName,
        [MarshalAs(UnmanagedType.U1)] ref bool pbAchieved)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServerStats _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamGameServerStats_GetUserAchievement(this._ptr, steamIDUser, pchName, ref pbAchieved);
      }

      public virtual bool ISteamGameServerStats_SetUserStat(
        ulong steamIDUser,
        string pchName,
        int nData)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServerStats _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamGameServerStats_SetUserStat(this._ptr, steamIDUser, pchName, nData);
      }

      public virtual bool ISteamGameServerStats_SetUserStat0(
        ulong steamIDUser,
        string pchName,
        float fData)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServerStats _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamGameServerStats_SetUserStat0(this._ptr, steamIDUser, pchName, fData);
      }

      public virtual bool ISteamGameServerStats_UpdateUserAvgRateStat(
        ulong steamIDUser,
        string pchName,
        float flCountThisSession,
        double dSessionLength)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServerStats _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamGameServerStats_UpdateUserAvgRateStat(this._ptr, steamIDUser, pchName, flCountThisSession, dSessionLength);
      }

      public virtual bool ISteamGameServerStats_SetUserAchievement(
        ulong steamIDUser,
        string pchName)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServerStats _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamGameServerStats_SetUserAchievement(this._ptr, steamIDUser, pchName);
      }

      public virtual bool ISteamGameServerStats_ClearUserAchievement(
        ulong steamIDUser,
        string pchName)
      {
        if (this._ptr == IntPtr.Zero)
          throw new Exception("ISteamGameServerStats _ptr is null!");
        return Platform.Win64.Native.SteamAPI_ISteamGameServerStats_ClearUserAchievement(this._ptr, steamIDUser, pchName);
      }

      public virtual SteamAPICall_t ISteamGameServerStats_StoreUserStats(ulong steamIDUser)
      {
        return !(this._ptr == IntPtr.Zero) ? Platform.Win64.Native.SteamAPI_ISteamGameServerStats_StoreUserStats(this._ptr, steamIDUser) : throw new Exception("ISteamGameServerStats _ptr is null!");
      }

      public virtual bool SteamApi_SteamAPI_Init() => Platform.Win64.Native.SteamAPI_Init();

      public virtual void SteamApi_SteamAPI_RunCallbacks()
      {
        Platform.Win64.Native.SteamAPI_RunCallbacks();
      }

      public virtual void SteamApi_SteamGameServer_RunCallbacks()
      {
        Platform.Win64.Native.SteamGameServer_RunCallbacks();
      }

      public virtual void SteamApi_SteamAPI_RegisterCallback(IntPtr pCallback, int callback)
      {
        Platform.Win64.Native.SteamAPI_RegisterCallback(pCallback, callback);
      }

      public virtual void SteamApi_SteamAPI_UnregisterCallback(IntPtr pCallback)
      {
        Platform.Win64.Native.SteamAPI_UnregisterCallback(pCallback);
      }

      public virtual void SteamApi_SteamAPI_RegisterCallResult(IntPtr pCallback, ulong callback)
      {
        Platform.Win64.Native.SteamAPI_RegisterCallResult(pCallback, callback);
      }

      public virtual void SteamApi_SteamAPI_UnregisterCallResult(IntPtr pCallback, ulong callback)
      {
        Platform.Win64.Native.SteamAPI_UnregisterCallResult(pCallback, callback);
      }

      public virtual bool SteamApi_SteamInternal_GameServer_Init(
        uint unIP,
        ushort usPort,
        ushort usGamePort,
        ushort usQueryPort,
        int eServerMode,
        string pchVersionString)
      {
        return Platform.Win64.Native.SteamInternal_GameServer_Init(unIP, usPort, usGamePort, usQueryPort, eServerMode, pchVersionString);
      }

      public virtual void SteamApi_SteamAPI_Shutdown() => Platform.Win64.Native.SteamAPI_Shutdown();

      public virtual void SteamApi_SteamGameServer_Shutdown()
      {
        Platform.Win64.Native.SteamGameServer_Shutdown();
      }

      public virtual HSteamUser SteamApi_SteamAPI_GetHSteamUser()
      {
        return Platform.Win64.Native.SteamAPI_GetHSteamUser();
      }

      public virtual HSteamPipe SteamApi_SteamAPI_GetHSteamPipe()
      {
        return Platform.Win64.Native.SteamAPI_GetHSteamPipe();
      }

      public virtual HSteamUser SteamApi_SteamGameServer_GetHSteamUser()
      {
        return Platform.Win64.Native.SteamGameServer_GetHSteamUser();
      }

      public virtual HSteamPipe SteamApi_SteamGameServer_GetHSteamPipe()
      {
        return Platform.Win64.Native.SteamGameServer_GetHSteamPipe();
      }

      public virtual IntPtr SteamApi_SteamInternal_CreateInterface(string version)
      {
        return Platform.Win64.Native.SteamInternal_CreateInterface(version);
      }

      public virtual bool SteamApi_SteamAPI_RestartAppIfNecessary(uint unOwnAppID)
      {
        return Platform.Win64.Native.SteamAPI_RestartAppIfNecessary(unOwnAppID);
      }

      internal static class Native
      {
        [DllImport("steam_api64.dll")]
        internal static extern HSteamPipe SteamAPI_ISteamClient_CreateSteamPipe(IntPtr ISteamClient);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamClient_BReleaseSteamPipe(
          IntPtr ISteamClient,
          int hSteamPipe);

        [DllImport("steam_api64.dll")]
        internal static extern HSteamUser SteamAPI_ISteamClient_ConnectToGlobalUser(
          IntPtr ISteamClient,
          int hSteamPipe);

        [DllImport("steam_api64.dll")]
        internal static extern HSteamUser SteamAPI_ISteamClient_CreateLocalUser(
          IntPtr ISteamClient,
          out int phSteamPipe,
          AccountType eAccountType);

        [DllImport("steam_api64.dll")]
        internal static extern void SteamAPI_ISteamClient_ReleaseUser(
          IntPtr ISteamClient,
          int hSteamPipe,
          int hUser);

        [DllImport("steam_api64.dll")]
        internal static extern IntPtr SteamAPI_ISteamClient_GetISteamUser(
          IntPtr ISteamClient,
          int hSteamUser,
          int hSteamPipe,
          string pchVersion);

        [DllImport("steam_api64.dll")]
        internal static extern IntPtr SteamAPI_ISteamClient_GetISteamGameServer(
          IntPtr ISteamClient,
          int hSteamUser,
          int hSteamPipe,
          string pchVersion);

        [DllImport("steam_api64.dll")]
        internal static extern void SteamAPI_ISteamClient_SetLocalIPBinding(
          IntPtr ISteamClient,
          uint unIP,
          ushort usPort);

        [DllImport("steam_api64.dll")]
        internal static extern IntPtr SteamAPI_ISteamClient_GetISteamFriends(
          IntPtr ISteamClient,
          int hSteamUser,
          int hSteamPipe,
          string pchVersion);

        [DllImport("steam_api64.dll")]
        internal static extern IntPtr SteamAPI_ISteamClient_GetISteamUtils(
          IntPtr ISteamClient,
          int hSteamPipe,
          string pchVersion);

        [DllImport("steam_api64.dll")]
        internal static extern IntPtr SteamAPI_ISteamClient_GetISteamMatchmaking(
          IntPtr ISteamClient,
          int hSteamUser,
          int hSteamPipe,
          string pchVersion);

        [DllImport("steam_api64.dll")]
        internal static extern IntPtr SteamAPI_ISteamClient_GetISteamMatchmakingServers(
          IntPtr ISteamClient,
          int hSteamUser,
          int hSteamPipe,
          string pchVersion);

        [DllImport("steam_api64.dll")]
        internal static extern IntPtr SteamAPI_ISteamClient_GetISteamGenericInterface(
          IntPtr ISteamClient,
          int hSteamUser,
          int hSteamPipe,
          string pchVersion);

        [DllImport("steam_api64.dll")]
        internal static extern IntPtr SteamAPI_ISteamClient_GetISteamUserStats(
          IntPtr ISteamClient,
          int hSteamUser,
          int hSteamPipe,
          string pchVersion);

        [DllImport("steam_api64.dll")]
        internal static extern IntPtr SteamAPI_ISteamClient_GetISteamGameServerStats(
          IntPtr ISteamClient,
          int hSteamuser,
          int hSteamPipe,
          string pchVersion);

        [DllImport("steam_api64.dll")]
        internal static extern IntPtr SteamAPI_ISteamClient_GetISteamApps(
          IntPtr ISteamClient,
          int hSteamUser,
          int hSteamPipe,
          string pchVersion);

        [DllImport("steam_api64.dll")]
        internal static extern IntPtr SteamAPI_ISteamClient_GetISteamNetworking(
          IntPtr ISteamClient,
          int hSteamUser,
          int hSteamPipe,
          string pchVersion);

        [DllImport("steam_api64.dll")]
        internal static extern IntPtr SteamAPI_ISteamClient_GetISteamRemoteStorage(
          IntPtr ISteamClient,
          int hSteamuser,
          int hSteamPipe,
          string pchVersion);

        [DllImport("steam_api64.dll")]
        internal static extern IntPtr SteamAPI_ISteamClient_GetISteamScreenshots(
          IntPtr ISteamClient,
          int hSteamuser,
          int hSteamPipe,
          string pchVersion);

        [DllImport("steam_api64.dll")]
        internal static extern uint SteamAPI_ISteamClient_GetIPCCallCount(IntPtr ISteamClient);

        [DllImport("steam_api64.dll")]
        internal static extern void SteamAPI_ISteamClient_SetWarningMessageHook(
          IntPtr ISteamClient,
          IntPtr pFunction);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamClient_BShutdownIfAllPipesClosed(
          IntPtr ISteamClient);

        [DllImport("steam_api64.dll")]
        internal static extern IntPtr SteamAPI_ISteamClient_GetISteamHTTP(
          IntPtr ISteamClient,
          int hSteamuser,
          int hSteamPipe,
          string pchVersion);

        [DllImport("steam_api64.dll")]
        internal static extern IntPtr SteamAPI_ISteamClient_GetISteamUnifiedMessages(
          IntPtr ISteamClient,
          int hSteamuser,
          int hSteamPipe,
          string pchVersion);

        [DllImport("steam_api64.dll")]
        internal static extern IntPtr SteamAPI_ISteamClient_GetISteamController(
          IntPtr ISteamClient,
          int hSteamUser,
          int hSteamPipe,
          string pchVersion);

        [DllImport("steam_api64.dll")]
        internal static extern IntPtr SteamAPI_ISteamClient_GetISteamUGC(
          IntPtr ISteamClient,
          int hSteamUser,
          int hSteamPipe,
          string pchVersion);

        [DllImport("steam_api64.dll")]
        internal static extern IntPtr SteamAPI_ISteamClient_GetISteamAppList(
          IntPtr ISteamClient,
          int hSteamUser,
          int hSteamPipe,
          string pchVersion);

        [DllImport("steam_api64.dll")]
        internal static extern IntPtr SteamAPI_ISteamClient_GetISteamMusic(
          IntPtr ISteamClient,
          int hSteamuser,
          int hSteamPipe,
          string pchVersion);

        [DllImport("steam_api64.dll")]
        internal static extern IntPtr SteamAPI_ISteamClient_GetISteamMusicRemote(
          IntPtr ISteamClient,
          int hSteamuser,
          int hSteamPipe,
          string pchVersion);

        [DllImport("steam_api64.dll")]
        internal static extern IntPtr SteamAPI_ISteamClient_GetISteamHTMLSurface(
          IntPtr ISteamClient,
          int hSteamuser,
          int hSteamPipe,
          string pchVersion);

        [DllImport("steam_api64.dll")]
        internal static extern IntPtr SteamAPI_ISteamClient_GetISteamInventory(
          IntPtr ISteamClient,
          int hSteamuser,
          int hSteamPipe,
          string pchVersion);

        [DllImport("steam_api64.dll")]
        internal static extern IntPtr SteamAPI_ISteamClient_GetISteamVideo(
          IntPtr ISteamClient,
          int hSteamuser,
          int hSteamPipe,
          string pchVersion);

        [DllImport("steam_api64.dll")]
        internal static extern HSteamUser SteamAPI_ISteamUser_GetHSteamUser(IntPtr ISteamUser);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamUser_BLoggedOn(IntPtr ISteamUser);

        [DllImport("steam_api64.dll")]
        internal static extern CSteamID SteamAPI_ISteamUser_GetSteamID(IntPtr ISteamUser);

        [DllImport("steam_api64.dll")]
        internal static extern int SteamAPI_ISteamUser_InitiateGameConnection(
          IntPtr ISteamUser,
          IntPtr pAuthBlob,
          int cbMaxAuthBlob,
          ulong steamIDGameServer,
          uint unIPServer,
          ushort usPortServer,
          [MarshalAs(UnmanagedType.U1)] bool bSecure);

        [DllImport("steam_api64.dll")]
        internal static extern void SteamAPI_ISteamUser_TerminateGameConnection(
          IntPtr ISteamUser,
          uint unIPServer,
          ushort usPortServer);

        [DllImport("steam_api64.dll")]
        internal static extern void SteamAPI_ISteamUser_TrackAppUsageEvent(
          IntPtr ISteamUser,
          ulong gameID,
          int eAppUsageEvent,
          string pchExtraInfo);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamUser_GetUserDataFolder(
          IntPtr ISteamUser,
          StringBuilder pchBuffer,
          int cubBuffer);

        [DllImport("steam_api64.dll")]
        internal static extern void SteamAPI_ISteamUser_StartVoiceRecording(IntPtr ISteamUser);

        [DllImport("steam_api64.dll")]
        internal static extern void SteamAPI_ISteamUser_StopVoiceRecording(IntPtr ISteamUser);

        [DllImport("steam_api64.dll")]
        internal static extern VoiceResult SteamAPI_ISteamUser_GetAvailableVoice(
          IntPtr ISteamUser,
          out uint pcbCompressed,
          out uint pcbUncompressed_Deprecated,
          uint nUncompressedVoiceDesiredSampleRate_Deprecated);

        [DllImport("steam_api64.dll")]
        internal static extern VoiceResult SteamAPI_ISteamUser_GetVoice(
          IntPtr ISteamUser,
          [MarshalAs(UnmanagedType.U1)] bool bWantCompressed,
          IntPtr pDestBuffer,
          uint cbDestBufferSize,
          out uint nBytesWritten,
          [MarshalAs(UnmanagedType.U1)] bool bWantUncompressed_Deprecated,
          IntPtr pUncompressedDestBuffer_Deprecated,
          uint cbUncompressedDestBufferSize_Deprecated,
          out uint nUncompressBytesWritten_Deprecated,
          uint nUncompressedVoiceDesiredSampleRate_Deprecated);

        [DllImport("steam_api64.dll")]
        internal static extern VoiceResult SteamAPI_ISteamUser_DecompressVoice(
          IntPtr ISteamUser,
          IntPtr pCompressed,
          uint cbCompressed,
          IntPtr pDestBuffer,
          uint cbDestBufferSize,
          out uint nBytesWritten,
          uint nDesiredSampleRate);

        [DllImport("steam_api64.dll")]
        internal static extern uint SteamAPI_ISteamUser_GetVoiceOptimalSampleRate(IntPtr ISteamUser);

        [DllImport("steam_api64.dll")]
        internal static extern HAuthTicket SteamAPI_ISteamUser_GetAuthSessionTicket(
          IntPtr ISteamUser,
          IntPtr pTicket,
          int cbMaxTicket,
          out uint pcbTicket);

        [DllImport("steam_api64.dll")]
        internal static extern BeginAuthSessionResult SteamAPI_ISteamUser_BeginAuthSession(
          IntPtr ISteamUser,
          IntPtr pAuthTicket,
          int cbAuthTicket,
          ulong steamID);

        [DllImport("steam_api64.dll")]
        internal static extern void SteamAPI_ISteamUser_EndAuthSession(
          IntPtr ISteamUser,
          ulong steamID);

        [DllImport("steam_api64.dll")]
        internal static extern void SteamAPI_ISteamUser_CancelAuthTicket(
          IntPtr ISteamUser,
          uint hAuthTicket);

        [DllImport("steam_api64.dll")]
        internal static extern UserHasLicenseForAppResult SteamAPI_ISteamUser_UserHasLicenseForApp(
          IntPtr ISteamUser,
          ulong steamID,
          uint appID);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamUser_BIsBehindNAT(IntPtr ISteamUser);

        [DllImport("steam_api64.dll")]
        internal static extern void SteamAPI_ISteamUser_AdvertiseGame(
          IntPtr ISteamUser,
          ulong steamIDGameServer,
          uint unIPServer,
          ushort usPortServer);

        [DllImport("steam_api64.dll")]
        internal static extern SteamAPICall_t SteamAPI_ISteamUser_RequestEncryptedAppTicket(
          IntPtr ISteamUser,
          IntPtr pDataToInclude,
          int cbDataToInclude);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamUser_GetEncryptedAppTicket(
          IntPtr ISteamUser,
          IntPtr pTicket,
          int cbMaxTicket,
          out uint pcbTicket);

        [DllImport("steam_api64.dll")]
        internal static extern int SteamAPI_ISteamUser_GetGameBadgeLevel(
          IntPtr ISteamUser,
          int nSeries,
          [MarshalAs(UnmanagedType.U1)] bool bFoil);

        [DllImport("steam_api64.dll")]
        internal static extern int SteamAPI_ISteamUser_GetPlayerSteamLevel(IntPtr ISteamUser);

        [DllImport("steam_api64.dll")]
        internal static extern SteamAPICall_t SteamAPI_ISteamUser_RequestStoreAuthURL(
          IntPtr ISteamUser,
          string pchRedirectURL);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamUser_BIsPhoneVerified(IntPtr ISteamUser);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamUser_BIsTwoFactorEnabled(IntPtr ISteamUser);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamUser_BIsPhoneIdentifying(IntPtr ISteamUser);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamUser_BIsPhoneRequiringVerification(
          IntPtr ISteamUser);

        [DllImport("steam_api64.dll")]
        internal static extern IntPtr SteamAPI_ISteamFriends_GetPersonaName(IntPtr ISteamFriends);

        [DllImport("steam_api64.dll")]
        internal static extern SteamAPICall_t SteamAPI_ISteamFriends_SetPersonaName(
          IntPtr ISteamFriends,
          string pchPersonaName);

        [DllImport("steam_api64.dll")]
        internal static extern PersonaState SteamAPI_ISteamFriends_GetPersonaState(
          IntPtr ISteamFriends);

        [DllImport("steam_api64.dll")]
        internal static extern int SteamAPI_ISteamFriends_GetFriendCount(
          IntPtr ISteamFriends,
          int iFriendFlags);

        [DllImport("steam_api64.dll")]
        internal static extern CSteamID SteamAPI_ISteamFriends_GetFriendByIndex(
          IntPtr ISteamFriends,
          int iFriend,
          int iFriendFlags);

        [DllImport("steam_api64.dll")]
        internal static extern FriendRelationship SteamAPI_ISteamFriends_GetFriendRelationship(
          IntPtr ISteamFriends,
          ulong steamIDFriend);

        [DllImport("steam_api64.dll")]
        internal static extern PersonaState SteamAPI_ISteamFriends_GetFriendPersonaState(
          IntPtr ISteamFriends,
          ulong steamIDFriend);

        [DllImport("steam_api64.dll")]
        internal static extern IntPtr SteamAPI_ISteamFriends_GetFriendPersonaName(
          IntPtr ISteamFriends,
          ulong steamIDFriend);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamFriends_GetFriendGamePlayed(
          IntPtr ISteamFriends,
          ulong steamIDFriend,
          ref FriendGameInfo_t pFriendGameInfo);

        [DllImport("steam_api64.dll")]
        internal static extern IntPtr SteamAPI_ISteamFriends_GetFriendPersonaNameHistory(
          IntPtr ISteamFriends,
          ulong steamIDFriend,
          int iPersonaName);

        [DllImport("steam_api64.dll")]
        internal static extern int SteamAPI_ISteamFriends_GetFriendSteamLevel(
          IntPtr ISteamFriends,
          ulong steamIDFriend);

        [DllImport("steam_api64.dll")]
        internal static extern IntPtr SteamAPI_ISteamFriends_GetPlayerNickname(
          IntPtr ISteamFriends,
          ulong steamIDPlayer);

        [DllImport("steam_api64.dll")]
        internal static extern int SteamAPI_ISteamFriends_GetFriendsGroupCount(IntPtr ISteamFriends);

        [DllImport("steam_api64.dll")]
        internal static extern FriendsGroupID_t SteamAPI_ISteamFriends_GetFriendsGroupIDByIndex(
          IntPtr ISteamFriends,
          int iFG);

        [DllImport("steam_api64.dll")]
        internal static extern IntPtr SteamAPI_ISteamFriends_GetFriendsGroupName(
          IntPtr ISteamFriends,
          short friendsGroupID);

        [DllImport("steam_api64.dll")]
        internal static extern int SteamAPI_ISteamFriends_GetFriendsGroupMembersCount(
          IntPtr ISteamFriends,
          short friendsGroupID);

        [DllImport("steam_api64.dll")]
        internal static extern void SteamAPI_ISteamFriends_GetFriendsGroupMembersList(
          IntPtr ISteamFriends,
          short friendsGroupID,
          IntPtr pOutSteamIDMembers,
          int nMembersCount);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamFriends_HasFriend(
          IntPtr ISteamFriends,
          ulong steamIDFriend,
          int iFriendFlags);

        [DllImport("steam_api64.dll")]
        internal static extern int SteamAPI_ISteamFriends_GetClanCount(IntPtr ISteamFriends);

        [DllImport("steam_api64.dll")]
        internal static extern CSteamID SteamAPI_ISteamFriends_GetClanByIndex(
          IntPtr ISteamFriends,
          int iClan);

        [DllImport("steam_api64.dll")]
        internal static extern IntPtr SteamAPI_ISteamFriends_GetClanName(
          IntPtr ISteamFriends,
          ulong steamIDClan);

        [DllImport("steam_api64.dll")]
        internal static extern IntPtr SteamAPI_ISteamFriends_GetClanTag(
          IntPtr ISteamFriends,
          ulong steamIDClan);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamFriends_GetClanActivityCounts(
          IntPtr ISteamFriends,
          ulong steamIDClan,
          out int pnOnline,
          out int pnInGame,
          out int pnChatting);

        [DllImport("steam_api64.dll")]
        internal static extern SteamAPICall_t SteamAPI_ISteamFriends_DownloadClanActivityCounts(
          IntPtr ISteamFriends,
          IntPtr psteamIDClans,
          int cClansToRequest);

        [DllImport("steam_api64.dll")]
        internal static extern int SteamAPI_ISteamFriends_GetFriendCountFromSource(
          IntPtr ISteamFriends,
          ulong steamIDSource);

        [DllImport("steam_api64.dll")]
        internal static extern CSteamID SteamAPI_ISteamFriends_GetFriendFromSourceByIndex(
          IntPtr ISteamFriends,
          ulong steamIDSource,
          int iFriend);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamFriends_IsUserInSource(
          IntPtr ISteamFriends,
          ulong steamIDUser,
          ulong steamIDSource);

        [DllImport("steam_api64.dll")]
        internal static extern void SteamAPI_ISteamFriends_SetInGameVoiceSpeaking(
          IntPtr ISteamFriends,
          ulong steamIDUser,
          [MarshalAs(UnmanagedType.U1)] bool bSpeaking);

        [DllImport("steam_api64.dll")]
        internal static extern void SteamAPI_ISteamFriends_ActivateGameOverlay(
          IntPtr ISteamFriends,
          string pchDialog);

        [DllImport("steam_api64.dll")]
        internal static extern void SteamAPI_ISteamFriends_ActivateGameOverlayToUser(
          IntPtr ISteamFriends,
          string pchDialog,
          ulong steamID);

        [DllImport("steam_api64.dll")]
        internal static extern void SteamAPI_ISteamFriends_ActivateGameOverlayToWebPage(
          IntPtr ISteamFriends,
          string pchURL);

        [DllImport("steam_api64.dll")]
        internal static extern void SteamAPI_ISteamFriends_ActivateGameOverlayToStore(
          IntPtr ISteamFriends,
          uint nAppID,
          OverlayToStoreFlag eFlag);

        [DllImport("steam_api64.dll")]
        internal static extern void SteamAPI_ISteamFriends_SetPlayedWith(
          IntPtr ISteamFriends,
          ulong steamIDUserPlayedWith);

        [DllImport("steam_api64.dll")]
        internal static extern void SteamAPI_ISteamFriends_ActivateGameOverlayInviteDialog(
          IntPtr ISteamFriends,
          ulong steamIDLobby);

        [DllImport("steam_api64.dll")]
        internal static extern int SteamAPI_ISteamFriends_GetSmallFriendAvatar(
          IntPtr ISteamFriends,
          ulong steamIDFriend);

        [DllImport("steam_api64.dll")]
        internal static extern int SteamAPI_ISteamFriends_GetMediumFriendAvatar(
          IntPtr ISteamFriends,
          ulong steamIDFriend);

        [DllImport("steam_api64.dll")]
        internal static extern int SteamAPI_ISteamFriends_GetLargeFriendAvatar(
          IntPtr ISteamFriends,
          ulong steamIDFriend);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamFriends_RequestUserInformation(
          IntPtr ISteamFriends,
          ulong steamIDUser,
          [MarshalAs(UnmanagedType.U1)] bool bRequireNameOnly);

        [DllImport("steam_api64.dll")]
        internal static extern SteamAPICall_t SteamAPI_ISteamFriends_RequestClanOfficerList(
          IntPtr ISteamFriends,
          ulong steamIDClan);

        [DllImport("steam_api64.dll")]
        internal static extern CSteamID SteamAPI_ISteamFriends_GetClanOwner(
          IntPtr ISteamFriends,
          ulong steamIDClan);

        [DllImport("steam_api64.dll")]
        internal static extern int SteamAPI_ISteamFriends_GetClanOfficerCount(
          IntPtr ISteamFriends,
          ulong steamIDClan);

        [DllImport("steam_api64.dll")]
        internal static extern CSteamID SteamAPI_ISteamFriends_GetClanOfficerByIndex(
          IntPtr ISteamFriends,
          ulong steamIDClan,
          int iOfficer);

        [DllImport("steam_api64.dll")]
        internal static extern uint SteamAPI_ISteamFriends_GetUserRestrictions(IntPtr ISteamFriends);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamFriends_SetRichPresence(
          IntPtr ISteamFriends,
          string pchKey,
          string pchValue);

        [DllImport("steam_api64.dll")]
        internal static extern void SteamAPI_ISteamFriends_ClearRichPresence(IntPtr ISteamFriends);

        [DllImport("steam_api64.dll")]
        internal static extern IntPtr SteamAPI_ISteamFriends_GetFriendRichPresence(
          IntPtr ISteamFriends,
          ulong steamIDFriend,
          string pchKey);

        [DllImport("steam_api64.dll")]
        internal static extern int SteamAPI_ISteamFriends_GetFriendRichPresenceKeyCount(
          IntPtr ISteamFriends,
          ulong steamIDFriend);

        [DllImport("steam_api64.dll")]
        internal static extern IntPtr SteamAPI_ISteamFriends_GetFriendRichPresenceKeyByIndex(
          IntPtr ISteamFriends,
          ulong steamIDFriend,
          int iKey);

        [DllImport("steam_api64.dll")]
        internal static extern void SteamAPI_ISteamFriends_RequestFriendRichPresence(
          IntPtr ISteamFriends,
          ulong steamIDFriend);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamFriends_InviteUserToGame(
          IntPtr ISteamFriends,
          ulong steamIDFriend,
          string pchConnectString);

        [DllImport("steam_api64.dll")]
        internal static extern int SteamAPI_ISteamFriends_GetCoplayFriendCount(IntPtr ISteamFriends);

        [DllImport("steam_api64.dll")]
        internal static extern CSteamID SteamAPI_ISteamFriends_GetCoplayFriend(
          IntPtr ISteamFriends,
          int iCoplayFriend);

        [DllImport("steam_api64.dll")]
        internal static extern int SteamAPI_ISteamFriends_GetFriendCoplayTime(
          IntPtr ISteamFriends,
          ulong steamIDFriend);

        [DllImport("steam_api64.dll")]
        internal static extern AppId_t SteamAPI_ISteamFriends_GetFriendCoplayGame(
          IntPtr ISteamFriends,
          ulong steamIDFriend);

        [DllImport("steam_api64.dll")]
        internal static extern SteamAPICall_t SteamAPI_ISteamFriends_JoinClanChatRoom(
          IntPtr ISteamFriends,
          ulong steamIDClan);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamFriends_LeaveClanChatRoom(
          IntPtr ISteamFriends,
          ulong steamIDClan);

        [DllImport("steam_api64.dll")]
        internal static extern int SteamAPI_ISteamFriends_GetClanChatMemberCount(
          IntPtr ISteamFriends,
          ulong steamIDClan);

        [DllImport("steam_api64.dll")]
        internal static extern CSteamID SteamAPI_ISteamFriends_GetChatMemberByIndex(
          IntPtr ISteamFriends,
          ulong steamIDClan,
          int iUser);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamFriends_SendClanChatMessage(
          IntPtr ISteamFriends,
          ulong steamIDClanChat,
          string pchText);

        [DllImport("steam_api64.dll")]
        internal static extern int SteamAPI_ISteamFriends_GetClanChatMessage(
          IntPtr ISteamFriends,
          ulong steamIDClanChat,
          int iMessage,
          IntPtr prgchText,
          int cchTextMax,
          out ChatEntryType peChatEntryType,
          out ulong psteamidChatter);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamFriends_IsClanChatAdmin(
          IntPtr ISteamFriends,
          ulong steamIDClanChat,
          ulong steamIDUser);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamFriends_IsClanChatWindowOpenInSteam(
          IntPtr ISteamFriends,
          ulong steamIDClanChat);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamFriends_OpenClanChatWindowInSteam(
          IntPtr ISteamFriends,
          ulong steamIDClanChat);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamFriends_CloseClanChatWindowInSteam(
          IntPtr ISteamFriends,
          ulong steamIDClanChat);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamFriends_SetListenForFriendsMessages(
          IntPtr ISteamFriends,
          [MarshalAs(UnmanagedType.U1)] bool bInterceptEnabled);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamFriends_ReplyToFriendMessage(
          IntPtr ISteamFriends,
          ulong steamIDFriend,
          string pchMsgToSend);

        [DllImport("steam_api64.dll")]
        internal static extern int SteamAPI_ISteamFriends_GetFriendMessage(
          IntPtr ISteamFriends,
          ulong steamIDFriend,
          int iMessageID,
          IntPtr pvData,
          int cubData,
          out ChatEntryType peChatEntryType);

        [DllImport("steam_api64.dll")]
        internal static extern SteamAPICall_t SteamAPI_ISteamFriends_GetFollowerCount(
          IntPtr ISteamFriends,
          ulong steamID);

        [DllImport("steam_api64.dll")]
        internal static extern SteamAPICall_t SteamAPI_ISteamFriends_IsFollowing(
          IntPtr ISteamFriends,
          ulong steamID);

        [DllImport("steam_api64.dll")]
        internal static extern SteamAPICall_t SteamAPI_ISteamFriends_EnumerateFollowingList(
          IntPtr ISteamFriends,
          uint unStartIndex);

        [DllImport("steam_api64.dll")]
        internal static extern uint SteamAPI_ISteamUtils_GetSecondsSinceAppActive(IntPtr ISteamUtils);

        [DllImport("steam_api64.dll")]
        internal static extern uint SteamAPI_ISteamUtils_GetSecondsSinceComputerActive(
          IntPtr ISteamUtils);

        [DllImport("steam_api64.dll")]
        internal static extern Universe SteamAPI_ISteamUtils_GetConnectedUniverse(IntPtr ISteamUtils);

        [DllImport("steam_api64.dll")]
        internal static extern uint SteamAPI_ISteamUtils_GetServerRealTime(IntPtr ISteamUtils);

        [DllImport("steam_api64.dll")]
        internal static extern IntPtr SteamAPI_ISteamUtils_GetIPCountry(IntPtr ISteamUtils);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamUtils_GetImageSize(
          IntPtr ISteamUtils,
          int iImage,
          out uint pnWidth,
          out uint pnHeight);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamUtils_GetImageRGBA(
          IntPtr ISteamUtils,
          int iImage,
          IntPtr pubDest,
          int nDestBufferSize);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamUtils_GetCSERIPPort(
          IntPtr ISteamUtils,
          out uint unIP,
          out ushort usPort);

        [DllImport("steam_api64.dll")]
        internal static extern byte SteamAPI_ISteamUtils_GetCurrentBatteryPower(IntPtr ISteamUtils);

        [DllImport("steam_api64.dll")]
        internal static extern uint SteamAPI_ISteamUtils_GetAppID(IntPtr ISteamUtils);

        [DllImport("steam_api64.dll")]
        internal static extern void SteamAPI_ISteamUtils_SetOverlayNotificationPosition(
          IntPtr ISteamUtils,
          NotificationPosition eNotificationPosition);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamUtils_IsAPICallCompleted(
          IntPtr ISteamUtils,
          ulong hSteamAPICall,
          [MarshalAs(UnmanagedType.U1)] ref bool pbFailed);

        [DllImport("steam_api64.dll")]
        internal static extern SteamAPICallFailure SteamAPI_ISteamUtils_GetAPICallFailureReason(
          IntPtr ISteamUtils,
          ulong hSteamAPICall);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamUtils_GetAPICallResult(
          IntPtr ISteamUtils,
          ulong hSteamAPICall,
          IntPtr pCallback,
          int cubCallback,
          int iCallbackExpected,
          [MarshalAs(UnmanagedType.U1)] ref bool pbFailed);

        [DllImport("steam_api64.dll")]
        internal static extern uint SteamAPI_ISteamUtils_GetIPCCallCount(IntPtr ISteamUtils);

        [DllImport("steam_api64.dll")]
        internal static extern void SteamAPI_ISteamUtils_SetWarningMessageHook(
          IntPtr ISteamUtils,
          IntPtr pFunction);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamUtils_IsOverlayEnabled(IntPtr ISteamUtils);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamUtils_BOverlayNeedsPresent(IntPtr ISteamUtils);

        [DllImport("steam_api64.dll")]
        internal static extern SteamAPICall_t SteamAPI_ISteamUtils_CheckFileSignature(
          IntPtr ISteamUtils,
          string szFileName);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamUtils_ShowGamepadTextInput(
          IntPtr ISteamUtils,
          GamepadTextInputMode eInputMode,
          GamepadTextInputLineMode eLineInputMode,
          string pchDescription,
          uint unCharMax,
          string pchExistingText);

        [DllImport("steam_api64.dll")]
        internal static extern uint SteamAPI_ISteamUtils_GetEnteredGamepadTextLength(
          IntPtr ISteamUtils);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamUtils_GetEnteredGamepadTextInput(
          IntPtr ISteamUtils,
          StringBuilder pchText,
          uint cchText);

        [DllImport("steam_api64.dll")]
        internal static extern IntPtr SteamAPI_ISteamUtils_GetSteamUILanguage(IntPtr ISteamUtils);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamUtils_IsSteamRunningInVR(IntPtr ISteamUtils);

        [DllImport("steam_api64.dll")]
        internal static extern void SteamAPI_ISteamUtils_SetOverlayNotificationInset(
          IntPtr ISteamUtils,
          int nHorizontalInset,
          int nVerticalInset);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamUtils_IsSteamInBigPictureMode(IntPtr ISteamUtils);

        [DllImport("steam_api64.dll")]
        internal static extern void SteamAPI_ISteamUtils_StartVRDashboard(IntPtr ISteamUtils);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamUtils_IsVRHeadsetStreamingEnabled(
          IntPtr ISteamUtils);

        [DllImport("steam_api64.dll")]
        internal static extern void SteamAPI_ISteamUtils_SetVRHeadsetStreamingEnabled(
          IntPtr ISteamUtils,
          [MarshalAs(UnmanagedType.U1)] bool bEnabled);

        [DllImport("steam_api64.dll")]
        internal static extern int SteamAPI_ISteamMatchmaking_GetFavoriteGameCount(
          IntPtr ISteamMatchmaking);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamMatchmaking_GetFavoriteGame(
          IntPtr ISteamMatchmaking,
          int iGame,
          ref uint pnAppID,
          out uint pnIP,
          out ushort pnConnPort,
          out ushort pnQueryPort,
          out uint punFlags,
          out uint pRTime32LastPlayedOnServer);

        [DllImport("steam_api64.dll")]
        internal static extern int SteamAPI_ISteamMatchmaking_AddFavoriteGame(
          IntPtr ISteamMatchmaking,
          uint nAppID,
          uint nIP,
          ushort nConnPort,
          ushort nQueryPort,
          uint unFlags,
          uint rTime32LastPlayedOnServer);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamMatchmaking_RemoveFavoriteGame(
          IntPtr ISteamMatchmaking,
          uint nAppID,
          uint nIP,
          ushort nConnPort,
          ushort nQueryPort,
          uint unFlags);

        [DllImport("steam_api64.dll")]
        internal static extern SteamAPICall_t SteamAPI_ISteamMatchmaking_RequestLobbyList(
          IntPtr ISteamMatchmaking);

        [DllImport("steam_api64.dll")]
        internal static extern void SteamAPI_ISteamMatchmaking_AddRequestLobbyListStringFilter(
          IntPtr ISteamMatchmaking,
          string pchKeyToMatch,
          string pchValueToMatch,
          LobbyComparison eComparisonType);

        [DllImport("steam_api64.dll")]
        internal static extern void SteamAPI_ISteamMatchmaking_AddRequestLobbyListNumericalFilter(
          IntPtr ISteamMatchmaking,
          string pchKeyToMatch,
          int nValueToMatch,
          LobbyComparison eComparisonType);

        [DllImport("steam_api64.dll")]
        internal static extern void SteamAPI_ISteamMatchmaking_AddRequestLobbyListNearValueFilter(
          IntPtr ISteamMatchmaking,
          string pchKeyToMatch,
          int nValueToBeCloseTo);

        [DllImport("steam_api64.dll")]
        internal static extern void SteamAPI_ISteamMatchmaking_AddRequestLobbyListFilterSlotsAvailable(
          IntPtr ISteamMatchmaking,
          int nSlotsAvailable);

        [DllImport("steam_api64.dll")]
        internal static extern void SteamAPI_ISteamMatchmaking_AddRequestLobbyListDistanceFilter(
          IntPtr ISteamMatchmaking,
          LobbyDistanceFilter eLobbyDistanceFilter);

        [DllImport("steam_api64.dll")]
        internal static extern void SteamAPI_ISteamMatchmaking_AddRequestLobbyListResultCountFilter(
          IntPtr ISteamMatchmaking,
          int cMaxResults);

        [DllImport("steam_api64.dll")]
        internal static extern void SteamAPI_ISteamMatchmaking_AddRequestLobbyListCompatibleMembersFilter(
          IntPtr ISteamMatchmaking,
          ulong steamIDLobby);

        [DllImport("steam_api64.dll")]
        internal static extern CSteamID SteamAPI_ISteamMatchmaking_GetLobbyByIndex(
          IntPtr ISteamMatchmaking,
          int iLobby);

        [DllImport("steam_api64.dll")]
        internal static extern SteamAPICall_t SteamAPI_ISteamMatchmaking_CreateLobby(
          IntPtr ISteamMatchmaking,
          LobbyType eLobbyType,
          int cMaxMembers);

        [DllImport("steam_api64.dll")]
        internal static extern SteamAPICall_t SteamAPI_ISteamMatchmaking_JoinLobby(
          IntPtr ISteamMatchmaking,
          ulong steamIDLobby);

        [DllImport("steam_api64.dll")]
        internal static extern void SteamAPI_ISteamMatchmaking_LeaveLobby(
          IntPtr ISteamMatchmaking,
          ulong steamIDLobby);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamMatchmaking_InviteUserToLobby(
          IntPtr ISteamMatchmaking,
          ulong steamIDLobby,
          ulong steamIDInvitee);

        [DllImport("steam_api64.dll")]
        internal static extern int SteamAPI_ISteamMatchmaking_GetNumLobbyMembers(
          IntPtr ISteamMatchmaking,
          ulong steamIDLobby);

        [DllImport("steam_api64.dll")]
        internal static extern CSteamID SteamAPI_ISteamMatchmaking_GetLobbyMemberByIndex(
          IntPtr ISteamMatchmaking,
          ulong steamIDLobby,
          int iMember);

        [DllImport("steam_api64.dll")]
        internal static extern IntPtr SteamAPI_ISteamMatchmaking_GetLobbyData(
          IntPtr ISteamMatchmaking,
          ulong steamIDLobby,
          string pchKey);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamMatchmaking_SetLobbyData(
          IntPtr ISteamMatchmaking,
          ulong steamIDLobby,
          string pchKey,
          string pchValue);

        [DllImport("steam_api64.dll")]
        internal static extern int SteamAPI_ISteamMatchmaking_GetLobbyDataCount(
          IntPtr ISteamMatchmaking,
          ulong steamIDLobby);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamMatchmaking_GetLobbyDataByIndex(
          IntPtr ISteamMatchmaking,
          ulong steamIDLobby,
          int iLobbyData,
          StringBuilder pchKey,
          int cchKeyBufferSize,
          StringBuilder pchValue,
          int cchValueBufferSize);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamMatchmaking_DeleteLobbyData(
          IntPtr ISteamMatchmaking,
          ulong steamIDLobby,
          string pchKey);

        [DllImport("steam_api64.dll")]
        internal static extern IntPtr SteamAPI_ISteamMatchmaking_GetLobbyMemberData(
          IntPtr ISteamMatchmaking,
          ulong steamIDLobby,
          ulong steamIDUser,
          string pchKey);

        [DllImport("steam_api64.dll")]
        internal static extern void SteamAPI_ISteamMatchmaking_SetLobbyMemberData(
          IntPtr ISteamMatchmaking,
          ulong steamIDLobby,
          string pchKey,
          string pchValue);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamMatchmaking_SendLobbyChatMsg(
          IntPtr ISteamMatchmaking,
          ulong steamIDLobby,
          IntPtr pvMsgBody,
          int cubMsgBody);

        [DllImport("steam_api64.dll")]
        internal static extern int SteamAPI_ISteamMatchmaking_GetLobbyChatEntry(
          IntPtr ISteamMatchmaking,
          ulong steamIDLobby,
          int iChatID,
          out ulong pSteamIDUser,
          IntPtr pvData,
          int cubData,
          out ChatEntryType peChatEntryType);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamMatchmaking_RequestLobbyData(
          IntPtr ISteamMatchmaking,
          ulong steamIDLobby);

        [DllImport("steam_api64.dll")]
        internal static extern void SteamAPI_ISteamMatchmaking_SetLobbyGameServer(
          IntPtr ISteamMatchmaking,
          ulong steamIDLobby,
          uint unGameServerIP,
          ushort unGameServerPort,
          ulong steamIDGameServer);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamMatchmaking_GetLobbyGameServer(
          IntPtr ISteamMatchmaking,
          ulong steamIDLobby,
          out uint punGameServerIP,
          out ushort punGameServerPort,
          out ulong psteamIDGameServer);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamMatchmaking_SetLobbyMemberLimit(
          IntPtr ISteamMatchmaking,
          ulong steamIDLobby,
          int cMaxMembers);

        [DllImport("steam_api64.dll")]
        internal static extern int SteamAPI_ISteamMatchmaking_GetLobbyMemberLimit(
          IntPtr ISteamMatchmaking,
          ulong steamIDLobby);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamMatchmaking_SetLobbyType(
          IntPtr ISteamMatchmaking,
          ulong steamIDLobby,
          LobbyType eLobbyType);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamMatchmaking_SetLobbyJoinable(
          IntPtr ISteamMatchmaking,
          ulong steamIDLobby,
          [MarshalAs(UnmanagedType.U1)] bool bLobbyJoinable);

        [DllImport("steam_api64.dll")]
        internal static extern CSteamID SteamAPI_ISteamMatchmaking_GetLobbyOwner(
          IntPtr ISteamMatchmaking,
          ulong steamIDLobby);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamMatchmaking_SetLobbyOwner(
          IntPtr ISteamMatchmaking,
          ulong steamIDLobby,
          ulong steamIDNewOwner);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamMatchmaking_SetLinkedLobby(
          IntPtr ISteamMatchmaking,
          ulong steamIDLobby,
          ulong steamIDLobbyDependent);

        [DllImport("steam_api64.dll")]
        internal static extern HServerListRequest SteamAPI_ISteamMatchmakingServers_RequestInternetServerList(
          IntPtr ISteamMatchmakingServers,
          uint iApp,
          IntPtr ppchFilters,
          uint nFilters,
          IntPtr pRequestServersResponse);

        [DllImport("steam_api64.dll")]
        internal static extern HServerListRequest SteamAPI_ISteamMatchmakingServers_RequestLANServerList(
          IntPtr ISteamMatchmakingServers,
          uint iApp,
          IntPtr pRequestServersResponse);

        [DllImport("steam_api64.dll")]
        internal static extern HServerListRequest SteamAPI_ISteamMatchmakingServers_RequestFriendsServerList(
          IntPtr ISteamMatchmakingServers,
          uint iApp,
          IntPtr ppchFilters,
          uint nFilters,
          IntPtr pRequestServersResponse);

        [DllImport("steam_api64.dll")]
        internal static extern HServerListRequest SteamAPI_ISteamMatchmakingServers_RequestFavoritesServerList(
          IntPtr ISteamMatchmakingServers,
          uint iApp,
          IntPtr ppchFilters,
          uint nFilters,
          IntPtr pRequestServersResponse);

        [DllImport("steam_api64.dll")]
        internal static extern HServerListRequest SteamAPI_ISteamMatchmakingServers_RequestHistoryServerList(
          IntPtr ISteamMatchmakingServers,
          uint iApp,
          IntPtr ppchFilters,
          uint nFilters,
          IntPtr pRequestServersResponse);

        [DllImport("steam_api64.dll")]
        internal static extern HServerListRequest SteamAPI_ISteamMatchmakingServers_RequestSpectatorServerList(
          IntPtr ISteamMatchmakingServers,
          uint iApp,
          IntPtr ppchFilters,
          uint nFilters,
          IntPtr pRequestServersResponse);

        [DllImport("steam_api64.dll")]
        internal static extern void SteamAPI_ISteamMatchmakingServers_ReleaseRequest(
          IntPtr ISteamMatchmakingServers,
          IntPtr hServerListRequest);

        [DllImport("steam_api64.dll")]
        internal static extern IntPtr SteamAPI_ISteamMatchmakingServers_GetServerDetails(
          IntPtr ISteamMatchmakingServers,
          IntPtr hRequest,
          int iServer);

        [DllImport("steam_api64.dll")]
        internal static extern void SteamAPI_ISteamMatchmakingServers_CancelQuery(
          IntPtr ISteamMatchmakingServers,
          IntPtr hRequest);

        [DllImport("steam_api64.dll")]
        internal static extern void SteamAPI_ISteamMatchmakingServers_RefreshQuery(
          IntPtr ISteamMatchmakingServers,
          IntPtr hRequest);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamMatchmakingServers_IsRefreshing(
          IntPtr ISteamMatchmakingServers,
          IntPtr hRequest);

        [DllImport("steam_api64.dll")]
        internal static extern int SteamAPI_ISteamMatchmakingServers_GetServerCount(
          IntPtr ISteamMatchmakingServers,
          IntPtr hRequest);

        [DllImport("steam_api64.dll")]
        internal static extern void SteamAPI_ISteamMatchmakingServers_RefreshServer(
          IntPtr ISteamMatchmakingServers,
          IntPtr hRequest,
          int iServer);

        [DllImport("steam_api64.dll")]
        internal static extern HServerQuery SteamAPI_ISteamMatchmakingServers_PingServer(
          IntPtr ISteamMatchmakingServers,
          uint unIP,
          ushort usPort,
          IntPtr pRequestServersResponse);

        [DllImport("steam_api64.dll")]
        internal static extern HServerQuery SteamAPI_ISteamMatchmakingServers_PlayerDetails(
          IntPtr ISteamMatchmakingServers,
          uint unIP,
          ushort usPort,
          IntPtr pRequestServersResponse);

        [DllImport("steam_api64.dll")]
        internal static extern HServerQuery SteamAPI_ISteamMatchmakingServers_ServerRules(
          IntPtr ISteamMatchmakingServers,
          uint unIP,
          ushort usPort,
          IntPtr pRequestServersResponse);

        [DllImport("steam_api64.dll")]
        internal static extern void SteamAPI_ISteamMatchmakingServers_CancelServerQuery(
          IntPtr ISteamMatchmakingServers,
          int hServerQuery);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamRemoteStorage_FileWrite(
          IntPtr ISteamRemoteStorage,
          string pchFile,
          IntPtr pvData,
          int cubData);

        [DllImport("steam_api64.dll")]
        internal static extern int SteamAPI_ISteamRemoteStorage_FileRead(
          IntPtr ISteamRemoteStorage,
          string pchFile,
          IntPtr pvData,
          int cubDataToRead);

        [DllImport("steam_api64.dll")]
        internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_FileWriteAsync(
          IntPtr ISteamRemoteStorage,
          string pchFile,
          IntPtr pvData,
          uint cubData);

        [DllImport("steam_api64.dll")]
        internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_FileReadAsync(
          IntPtr ISteamRemoteStorage,
          string pchFile,
          uint nOffset,
          uint cubToRead);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamRemoteStorage_FileReadAsyncComplete(
          IntPtr ISteamRemoteStorage,
          ulong hReadCall,
          IntPtr pvBuffer,
          uint cubToRead);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamRemoteStorage_FileForget(
          IntPtr ISteamRemoteStorage,
          string pchFile);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamRemoteStorage_FileDelete(
          IntPtr ISteamRemoteStorage,
          string pchFile);

        [DllImport("steam_api64.dll")]
        internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_FileShare(
          IntPtr ISteamRemoteStorage,
          string pchFile);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamRemoteStorage_SetSyncPlatforms(
          IntPtr ISteamRemoteStorage,
          string pchFile,
          RemoteStoragePlatform eRemoteStoragePlatform);

        [DllImport("steam_api64.dll")]
        internal static extern UGCFileWriteStreamHandle_t SteamAPI_ISteamRemoteStorage_FileWriteStreamOpen(
          IntPtr ISteamRemoteStorage,
          string pchFile);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamRemoteStorage_FileWriteStreamWriteChunk(
          IntPtr ISteamRemoteStorage,
          ulong writeHandle,
          IntPtr pvData,
          int cubData);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamRemoteStorage_FileWriteStreamClose(
          IntPtr ISteamRemoteStorage,
          ulong writeHandle);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamRemoteStorage_FileWriteStreamCancel(
          IntPtr ISteamRemoteStorage,
          ulong writeHandle);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamRemoteStorage_FileExists(
          IntPtr ISteamRemoteStorage,
          string pchFile);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamRemoteStorage_FilePersisted(
          IntPtr ISteamRemoteStorage,
          string pchFile);

        [DllImport("steam_api64.dll")]
        internal static extern int SteamAPI_ISteamRemoteStorage_GetFileSize(
          IntPtr ISteamRemoteStorage,
          string pchFile);

        [DllImport("steam_api64.dll")]
        internal static extern long SteamAPI_ISteamRemoteStorage_GetFileTimestamp(
          IntPtr ISteamRemoteStorage,
          string pchFile);

        [DllImport("steam_api64.dll")]
        internal static extern RemoteStoragePlatform SteamAPI_ISteamRemoteStorage_GetSyncPlatforms(
          IntPtr ISteamRemoteStorage,
          string pchFile);

        [DllImport("steam_api64.dll")]
        internal static extern int SteamAPI_ISteamRemoteStorage_GetFileCount(
          IntPtr ISteamRemoteStorage);

        [DllImport("steam_api64.dll")]
        internal static extern IntPtr SteamAPI_ISteamRemoteStorage_GetFileNameAndSize(
          IntPtr ISteamRemoteStorage,
          int iFile,
          out int pnFileSizeInBytes);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamRemoteStorage_GetQuota(
          IntPtr ISteamRemoteStorage,
          out ulong pnTotalBytes,
          out ulong puAvailableBytes);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamRemoteStorage_IsCloudEnabledForAccount(
          IntPtr ISteamRemoteStorage);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamRemoteStorage_IsCloudEnabledForApp(
          IntPtr ISteamRemoteStorage);

        [DllImport("steam_api64.dll")]
        internal static extern void SteamAPI_ISteamRemoteStorage_SetCloudEnabledForApp(
          IntPtr ISteamRemoteStorage,
          [MarshalAs(UnmanagedType.U1)] bool bEnabled);

        [DllImport("steam_api64.dll")]
        internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_UGCDownload(
          IntPtr ISteamRemoteStorage,
          ulong hContent,
          uint unPriority);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamRemoteStorage_GetUGCDownloadProgress(
          IntPtr ISteamRemoteStorage,
          ulong hContent,
          out int pnBytesDownloaded,
          out int pnBytesExpected);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamRemoteStorage_GetUGCDetails(
          IntPtr ISteamRemoteStorage,
          ulong hContent,
          ref uint pnAppID,
          StringBuilder ppchName,
          out int pnFileSizeInBytes,
          out ulong pSteamIDOwner);

        [DllImport("steam_api64.dll")]
        internal static extern int SteamAPI_ISteamRemoteStorage_UGCRead(
          IntPtr ISteamRemoteStorage,
          ulong hContent,
          IntPtr pvData,
          int cubDataToRead,
          uint cOffset,
          UGCReadAction eAction);

        [DllImport("steam_api64.dll")]
        internal static extern int SteamAPI_ISteamRemoteStorage_GetCachedUGCCount(
          IntPtr ISteamRemoteStorage);

        [DllImport("steam_api64.dll")]
        internal static extern UGCHandle_t SteamAPI_ISteamRemoteStorage_GetCachedUGCHandle(
          IntPtr ISteamRemoteStorage,
          int iCachedContent);

        [DllImport("steam_api64.dll")]
        internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_PublishWorkshopFile(
          IntPtr ISteamRemoteStorage,
          string pchFile,
          string pchPreviewFile,
          uint nConsumerAppId,
          string pchTitle,
          string pchDescription,
          RemoteStoragePublishedFileVisibility eVisibility,
          ref SteamParamStringArray_t pTags,
          WorkshopFileType eWorkshopFileType);

        [DllImport("steam_api64.dll")]
        internal static extern PublishedFileUpdateHandle_t SteamAPI_ISteamRemoteStorage_CreatePublishedFileUpdateRequest(
          IntPtr ISteamRemoteStorage,
          ulong unPublishedFileId);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamRemoteStorage_UpdatePublishedFileFile(
          IntPtr ISteamRemoteStorage,
          ulong updateHandle,
          string pchFile);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamRemoteStorage_UpdatePublishedFilePreviewFile(
          IntPtr ISteamRemoteStorage,
          ulong updateHandle,
          string pchPreviewFile);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamRemoteStorage_UpdatePublishedFileTitle(
          IntPtr ISteamRemoteStorage,
          ulong updateHandle,
          string pchTitle);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamRemoteStorage_UpdatePublishedFileDescription(
          IntPtr ISteamRemoteStorage,
          ulong updateHandle,
          string pchDescription);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamRemoteStorage_UpdatePublishedFileVisibility(
          IntPtr ISteamRemoteStorage,
          ulong updateHandle,
          RemoteStoragePublishedFileVisibility eVisibility);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamRemoteStorage_UpdatePublishedFileTags(
          IntPtr ISteamRemoteStorage,
          ulong updateHandle,
          ref SteamParamStringArray_t pTags);

        [DllImport("steam_api64.dll")]
        internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_CommitPublishedFileUpdate(
          IntPtr ISteamRemoteStorage,
          ulong updateHandle);

        [DllImport("steam_api64.dll")]
        internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_GetPublishedFileDetails(
          IntPtr ISteamRemoteStorage,
          ulong unPublishedFileId,
          uint unMaxSecondsOld);

        [DllImport("steam_api64.dll")]
        internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_DeletePublishedFile(
          IntPtr ISteamRemoteStorage,
          ulong unPublishedFileId);

        [DllImport("steam_api64.dll")]
        internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_EnumerateUserPublishedFiles(
          IntPtr ISteamRemoteStorage,
          uint unStartIndex);

        [DllImport("steam_api64.dll")]
        internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_SubscribePublishedFile(
          IntPtr ISteamRemoteStorage,
          ulong unPublishedFileId);

        [DllImport("steam_api64.dll")]
        internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_EnumerateUserSubscribedFiles(
          IntPtr ISteamRemoteStorage,
          uint unStartIndex);

        [DllImport("steam_api64.dll")]
        internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_UnsubscribePublishedFile(
          IntPtr ISteamRemoteStorage,
          ulong unPublishedFileId);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamRemoteStorage_UpdatePublishedFileSetChangeDescription(
          IntPtr ISteamRemoteStorage,
          ulong updateHandle,
          string pchChangeDescription);

        [DllImport("steam_api64.dll")]
        internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_GetPublishedItemVoteDetails(
          IntPtr ISteamRemoteStorage,
          ulong unPublishedFileId);

        [DllImport("steam_api64.dll")]
        internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_UpdateUserPublishedItemVote(
          IntPtr ISteamRemoteStorage,
          ulong unPublishedFileId,
          [MarshalAs(UnmanagedType.U1)] bool bVoteUp);

        [DllImport("steam_api64.dll")]
        internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_GetUserPublishedItemVoteDetails(
          IntPtr ISteamRemoteStorage,
          ulong unPublishedFileId);

        [DllImport("steam_api64.dll")]
        internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_EnumerateUserSharedWorkshopFiles(
          IntPtr ISteamRemoteStorage,
          ulong steamId,
          uint unStartIndex,
          ref SteamParamStringArray_t pRequiredTags,
          ref SteamParamStringArray_t pExcludedTags);

        [DllImport("steam_api64.dll")]
        internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_PublishVideo(
          IntPtr ISteamRemoteStorage,
          WorkshopVideoProvider eVideoProvider,
          string pchVideoAccount,
          string pchVideoIdentifier,
          string pchPreviewFile,
          uint nConsumerAppId,
          string pchTitle,
          string pchDescription,
          RemoteStoragePublishedFileVisibility eVisibility,
          ref SteamParamStringArray_t pTags);

        [DllImport("steam_api64.dll")]
        internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_SetUserPublishedFileAction(
          IntPtr ISteamRemoteStorage,
          ulong unPublishedFileId,
          WorkshopFileAction eAction);

        [DllImport("steam_api64.dll")]
        internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_EnumeratePublishedFilesByUserAction(
          IntPtr ISteamRemoteStorage,
          WorkshopFileAction eAction,
          uint unStartIndex);

        [DllImport("steam_api64.dll")]
        internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_EnumeratePublishedWorkshopFiles(
          IntPtr ISteamRemoteStorage,
          WorkshopEnumerationType eEnumerationType,
          uint unStartIndex,
          uint unCount,
          uint unDays,
          ref SteamParamStringArray_t pTags,
          ref SteamParamStringArray_t pUserTags);

        [DllImport("steam_api64.dll")]
        internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_UGCDownloadToLocation(
          IntPtr ISteamRemoteStorage,
          ulong hContent,
          string pchLocation,
          uint unPriority);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamUserStats_RequestCurrentStats(
          IntPtr ISteamUserStats);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamUserStats_GetStat(
          IntPtr ISteamUserStats,
          string pchName,
          out int pData);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamUserStats_GetStat0(
          IntPtr ISteamUserStats,
          string pchName,
          out float pData);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamUserStats_SetStat(
          IntPtr ISteamUserStats,
          string pchName,
          int nData);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamUserStats_SetStat0(
          IntPtr ISteamUserStats,
          string pchName,
          float fData);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamUserStats_UpdateAvgRateStat(
          IntPtr ISteamUserStats,
          string pchName,
          float flCountThisSession,
          double dSessionLength);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamUserStats_GetAchievement(
          IntPtr ISteamUserStats,
          string pchName,
          [MarshalAs(UnmanagedType.U1)] ref bool pbAchieved);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamUserStats_SetAchievement(
          IntPtr ISteamUserStats,
          string pchName);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamUserStats_ClearAchievement(
          IntPtr ISteamUserStats,
          string pchName);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamUserStats_GetAchievementAndUnlockTime(
          IntPtr ISteamUserStats,
          string pchName,
          [MarshalAs(UnmanagedType.U1)] ref bool pbAchieved,
          out uint punUnlockTime);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamUserStats_StoreStats(IntPtr ISteamUserStats);

        [DllImport("steam_api64.dll")]
        internal static extern int SteamAPI_ISteamUserStats_GetAchievementIcon(
          IntPtr ISteamUserStats,
          string pchName);

        [DllImport("steam_api64.dll")]
        internal static extern IntPtr SteamAPI_ISteamUserStats_GetAchievementDisplayAttribute(
          IntPtr ISteamUserStats,
          string pchName,
          string pchKey);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamUserStats_IndicateAchievementProgress(
          IntPtr ISteamUserStats,
          string pchName,
          uint nCurProgress,
          uint nMaxProgress);

        [DllImport("steam_api64.dll")]
        internal static extern uint SteamAPI_ISteamUserStats_GetNumAchievements(
          IntPtr ISteamUserStats);

        [DllImport("steam_api64.dll")]
        internal static extern IntPtr SteamAPI_ISteamUserStats_GetAchievementName(
          IntPtr ISteamUserStats,
          uint iAchievement);

        [DllImport("steam_api64.dll")]
        internal static extern SteamAPICall_t SteamAPI_ISteamUserStats_RequestUserStats(
          IntPtr ISteamUserStats,
          ulong steamIDUser);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamUserStats_GetUserStat(
          IntPtr ISteamUserStats,
          ulong steamIDUser,
          string pchName,
          out int pData);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamUserStats_GetUserStat0(
          IntPtr ISteamUserStats,
          ulong steamIDUser,
          string pchName,
          out float pData);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamUserStats_GetUserAchievement(
          IntPtr ISteamUserStats,
          ulong steamIDUser,
          string pchName,
          [MarshalAs(UnmanagedType.U1)] ref bool pbAchieved);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamUserStats_GetUserAchievementAndUnlockTime(
          IntPtr ISteamUserStats,
          ulong steamIDUser,
          string pchName,
          [MarshalAs(UnmanagedType.U1)] ref bool pbAchieved,
          out uint punUnlockTime);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamUserStats_ResetAllStats(
          IntPtr ISteamUserStats,
          [MarshalAs(UnmanagedType.U1)] bool bAchievementsToo);

        [DllImport("steam_api64.dll")]
        internal static extern SteamAPICall_t SteamAPI_ISteamUserStats_FindOrCreateLeaderboard(
          IntPtr ISteamUserStats,
          string pchLeaderboardName,
          LeaderboardSortMethod eLeaderboardSortMethod,
          LeaderboardDisplayType eLeaderboardDisplayType);

        [DllImport("steam_api64.dll")]
        internal static extern SteamAPICall_t SteamAPI_ISteamUserStats_FindLeaderboard(
          IntPtr ISteamUserStats,
          string pchLeaderboardName);

        [DllImport("steam_api64.dll")]
        internal static extern IntPtr SteamAPI_ISteamUserStats_GetLeaderboardName(
          IntPtr ISteamUserStats,
          ulong hSteamLeaderboard);

        [DllImport("steam_api64.dll")]
        internal static extern int SteamAPI_ISteamUserStats_GetLeaderboardEntryCount(
          IntPtr ISteamUserStats,
          ulong hSteamLeaderboard);

        [DllImport("steam_api64.dll")]
        internal static extern LeaderboardSortMethod SteamAPI_ISteamUserStats_GetLeaderboardSortMethod(
          IntPtr ISteamUserStats,
          ulong hSteamLeaderboard);

        [DllImport("steam_api64.dll")]
        internal static extern LeaderboardDisplayType SteamAPI_ISteamUserStats_GetLeaderboardDisplayType(
          IntPtr ISteamUserStats,
          ulong hSteamLeaderboard);

        [DllImport("steam_api64.dll")]
        internal static extern SteamAPICall_t SteamAPI_ISteamUserStats_DownloadLeaderboardEntries(
          IntPtr ISteamUserStats,
          ulong hSteamLeaderboard,
          LeaderboardDataRequest eLeaderboardDataRequest,
          int nRangeStart,
          int nRangeEnd);

        [DllImport("steam_api64.dll")]
        internal static extern SteamAPICall_t SteamAPI_ISteamUserStats_DownloadLeaderboardEntriesForUsers(
          IntPtr ISteamUserStats,
          ulong hSteamLeaderboard,
          IntPtr prgUsers,
          int cUsers);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamUserStats_GetDownloadedLeaderboardEntry(
          IntPtr ISteamUserStats,
          ulong hSteamLeaderboardEntries,
          int index,
          ref LeaderboardEntry_t pLeaderboardEntry,
          IntPtr pDetails,
          int cDetailsMax);

        [DllImport("steam_api64.dll")]
        internal static extern SteamAPICall_t SteamAPI_ISteamUserStats_UploadLeaderboardScore(
          IntPtr ISteamUserStats,
          ulong hSteamLeaderboard,
          LeaderboardUploadScoreMethod eLeaderboardUploadScoreMethod,
          int nScore,
          int[] pScoreDetails,
          int cScoreDetailsCount);

        [DllImport("steam_api64.dll")]
        internal static extern SteamAPICall_t SteamAPI_ISteamUserStats_AttachLeaderboardUGC(
          IntPtr ISteamUserStats,
          ulong hSteamLeaderboard,
          ulong hUGC);

        [DllImport("steam_api64.dll")]
        internal static extern SteamAPICall_t SteamAPI_ISteamUserStats_GetNumberOfCurrentPlayers(
          IntPtr ISteamUserStats);

        [DllImport("steam_api64.dll")]
        internal static extern SteamAPICall_t SteamAPI_ISteamUserStats_RequestGlobalAchievementPercentages(
          IntPtr ISteamUserStats);

        [DllImport("steam_api64.dll")]
        internal static extern int SteamAPI_ISteamUserStats_GetMostAchievedAchievementInfo(
          IntPtr ISteamUserStats,
          StringBuilder pchName,
          uint unNameBufLen,
          out float pflPercent,
          [MarshalAs(UnmanagedType.U1)] ref bool pbAchieved);

        [DllImport("steam_api64.dll")]
        internal static extern int SteamAPI_ISteamUserStats_GetNextMostAchievedAchievementInfo(
          IntPtr ISteamUserStats,
          int iIteratorPrevious,
          StringBuilder pchName,
          uint unNameBufLen,
          out float pflPercent,
          [MarshalAs(UnmanagedType.U1)] ref bool pbAchieved);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamUserStats_GetAchievementAchievedPercent(
          IntPtr ISteamUserStats,
          string pchName,
          out float pflPercent);

        [DllImport("steam_api64.dll")]
        internal static extern SteamAPICall_t SteamAPI_ISteamUserStats_RequestGlobalStats(
          IntPtr ISteamUserStats,
          int nHistoryDays);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamUserStats_GetGlobalStat(
          IntPtr ISteamUserStats,
          string pchStatName,
          out long pData);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamUserStats_GetGlobalStat0(
          IntPtr ISteamUserStats,
          string pchStatName,
          out double pData);

        [DllImport("steam_api64.dll")]
        internal static extern int SteamAPI_ISteamUserStats_GetGlobalStatHistory(
          IntPtr ISteamUserStats,
          string pchStatName,
          out long pData,
          uint cubData);

        [DllImport("steam_api64.dll")]
        internal static extern int SteamAPI_ISteamUserStats_GetGlobalStatHistory0(
          IntPtr ISteamUserStats,
          string pchStatName,
          out double pData,
          uint cubData);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamApps_BIsSubscribed(IntPtr ISteamApps);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamApps_BIsLowViolence(IntPtr ISteamApps);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamApps_BIsCybercafe(IntPtr ISteamApps);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamApps_BIsVACBanned(IntPtr ISteamApps);

        [DllImport("steam_api64.dll")]
        internal static extern IntPtr SteamAPI_ISteamApps_GetCurrentGameLanguage(IntPtr ISteamApps);

        [DllImport("steam_api64.dll")]
        internal static extern IntPtr SteamAPI_ISteamApps_GetAvailableGameLanguages(
          IntPtr ISteamApps);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamApps_BIsSubscribedApp(
          IntPtr ISteamApps,
          uint appID);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamApps_BIsDlcInstalled(
          IntPtr ISteamApps,
          uint appID);

        [DllImport("steam_api64.dll")]
        internal static extern uint SteamAPI_ISteamApps_GetEarliestPurchaseUnixTime(
          IntPtr ISteamApps,
          uint nAppID);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamApps_BIsSubscribedFromFreeWeekend(
          IntPtr ISteamApps);

        [DllImport("steam_api64.dll")]
        internal static extern int SteamAPI_ISteamApps_GetDLCCount(IntPtr ISteamApps);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamApps_BGetDLCDataByIndex(
          IntPtr ISteamApps,
          int iDLC,
          ref uint pAppID,
          [MarshalAs(UnmanagedType.U1)] ref bool pbAvailable,
          StringBuilder pchName,
          int cchNameBufferSize);

        [DllImport("steam_api64.dll")]
        internal static extern void SteamAPI_ISteamApps_InstallDLC(IntPtr ISteamApps, uint nAppID);

        [DllImport("steam_api64.dll")]
        internal static extern void SteamAPI_ISteamApps_UninstallDLC(IntPtr ISteamApps, uint nAppID);

        [DllImport("steam_api64.dll")]
        internal static extern void SteamAPI_ISteamApps_RequestAppProofOfPurchaseKey(
          IntPtr ISteamApps,
          uint nAppID);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamApps_GetCurrentBetaName(
          IntPtr ISteamApps,
          StringBuilder pchName,
          int cchNameBufferSize);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamApps_MarkContentCorrupt(
          IntPtr ISteamApps,
          [MarshalAs(UnmanagedType.U1)] bool bMissingFilesOnly);

        [DllImport("steam_api64.dll")]
        internal static extern uint SteamAPI_ISteamApps_GetInstalledDepots(
          IntPtr ISteamApps,
          uint appID,
          IntPtr pvecDepots,
          uint cMaxDepots);

        [DllImport("steam_api64.dll")]
        internal static extern uint SteamAPI_ISteamApps_GetAppInstallDir(
          IntPtr ISteamApps,
          uint appID,
          StringBuilder pchFolder,
          uint cchFolderBufferSize);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamApps_BIsAppInstalled(
          IntPtr ISteamApps,
          uint appID);

        [DllImport("steam_api64.dll")]
        internal static extern CSteamID SteamAPI_ISteamApps_GetAppOwner(IntPtr ISteamApps);

        [DllImport("steam_api64.dll")]
        internal static extern IntPtr SteamAPI_ISteamApps_GetLaunchQueryParam(
          IntPtr ISteamApps,
          string pchKey);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamApps_GetDlcDownloadProgress(
          IntPtr ISteamApps,
          uint nAppID,
          out ulong punBytesDownloaded,
          out ulong punBytesTotal);

        [DllImport("steam_api64.dll")]
        internal static extern int SteamAPI_ISteamApps_GetAppBuildId(IntPtr ISteamApps);

        [DllImport("steam_api64.dll")]
        internal static extern void SteamAPI_ISteamApps_RequestAllProofOfPurchaseKeys(
          IntPtr ISteamApps);

        [DllImport("steam_api64.dll")]
        internal static extern SteamAPICall_t SteamAPI_ISteamApps_GetFileDetails(
          IntPtr ISteamApps,
          string pszFileName);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamNetworking_SendP2PPacket(
          IntPtr ISteamNetworking,
          ulong steamIDRemote,
          IntPtr pubData,
          uint cubData,
          P2PSend eP2PSendType,
          int nChannel);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamNetworking_IsP2PPacketAvailable(
          IntPtr ISteamNetworking,
          out uint pcubMsgSize,
          int nChannel);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamNetworking_ReadP2PPacket(
          IntPtr ISteamNetworking,
          IntPtr pubDest,
          uint cubDest,
          out uint pcubMsgSize,
          out ulong psteamIDRemote,
          int nChannel);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamNetworking_AcceptP2PSessionWithUser(
          IntPtr ISteamNetworking,
          ulong steamIDRemote);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamNetworking_CloseP2PSessionWithUser(
          IntPtr ISteamNetworking,
          ulong steamIDRemote);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamNetworking_CloseP2PChannelWithUser(
          IntPtr ISteamNetworking,
          ulong steamIDRemote,
          int nChannel);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamNetworking_GetP2PSessionState(
          IntPtr ISteamNetworking,
          ulong steamIDRemote,
          ref P2PSessionState_t pConnectionState);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamNetworking_AllowP2PPacketRelay(
          IntPtr ISteamNetworking,
          [MarshalAs(UnmanagedType.U1)] bool bAllow);

        [DllImport("steam_api64.dll")]
        internal static extern SNetListenSocket_t SteamAPI_ISteamNetworking_CreateListenSocket(
          IntPtr ISteamNetworking,
          int nVirtualP2PPort,
          uint nIP,
          ushort nPort,
          [MarshalAs(UnmanagedType.U1)] bool bAllowUseOfPacketRelay);

        [DllImport("steam_api64.dll")]
        internal static extern SNetSocket_t SteamAPI_ISteamNetworking_CreateP2PConnectionSocket(
          IntPtr ISteamNetworking,
          ulong steamIDTarget,
          int nVirtualPort,
          int nTimeoutSec,
          [MarshalAs(UnmanagedType.U1)] bool bAllowUseOfPacketRelay);

        [DllImport("steam_api64.dll")]
        internal static extern SNetSocket_t SteamAPI_ISteamNetworking_CreateConnectionSocket(
          IntPtr ISteamNetworking,
          uint nIP,
          ushort nPort,
          int nTimeoutSec);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamNetworking_DestroySocket(
          IntPtr ISteamNetworking,
          uint hSocket,
          [MarshalAs(UnmanagedType.U1)] bool bNotifyRemoteEnd);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamNetworking_DestroyListenSocket(
          IntPtr ISteamNetworking,
          uint hSocket,
          [MarshalAs(UnmanagedType.U1)] bool bNotifyRemoteEnd);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamNetworking_SendDataOnSocket(
          IntPtr ISteamNetworking,
          uint hSocket,
          IntPtr pubData,
          uint cubData,
          [MarshalAs(UnmanagedType.U1)] bool bReliable);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamNetworking_IsDataAvailableOnSocket(
          IntPtr ISteamNetworking,
          uint hSocket,
          out uint pcubMsgSize);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamNetworking_RetrieveDataFromSocket(
          IntPtr ISteamNetworking,
          uint hSocket,
          IntPtr pubDest,
          uint cubDest,
          out uint pcubMsgSize);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamNetworking_IsDataAvailable(
          IntPtr ISteamNetworking,
          uint hListenSocket,
          out uint pcubMsgSize,
          ref uint phSocket);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamNetworking_RetrieveData(
          IntPtr ISteamNetworking,
          uint hListenSocket,
          IntPtr pubDest,
          uint cubDest,
          out uint pcubMsgSize,
          ref uint phSocket);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamNetworking_GetSocketInfo(
          IntPtr ISteamNetworking,
          uint hSocket,
          out ulong pSteamIDRemote,
          IntPtr peSocketStatus,
          out uint punIPRemote,
          out ushort punPortRemote);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamNetworking_GetListenSocketInfo(
          IntPtr ISteamNetworking,
          uint hListenSocket,
          out uint pnIP,
          out ushort pnPort);

        [DllImport("steam_api64.dll")]
        internal static extern SNetSocketConnectionType SteamAPI_ISteamNetworking_GetSocketConnectionType(
          IntPtr ISteamNetworking,
          uint hSocket);

        [DllImport("steam_api64.dll")]
        internal static extern int SteamAPI_ISteamNetworking_GetMaxPacketSize(
          IntPtr ISteamNetworking,
          uint hSocket);

        [DllImport("steam_api64.dll")]
        internal static extern ScreenshotHandle SteamAPI_ISteamScreenshots_WriteScreenshot(
          IntPtr ISteamScreenshots,
          IntPtr pubRGB,
          uint cubRGB,
          int nWidth,
          int nHeight);

        [DllImport("steam_api64.dll")]
        internal static extern ScreenshotHandle SteamAPI_ISteamScreenshots_AddScreenshotToLibrary(
          IntPtr ISteamScreenshots,
          string pchFilename,
          string pchThumbnailFilename,
          int nWidth,
          int nHeight);

        [DllImport("steam_api64.dll")]
        internal static extern void SteamAPI_ISteamScreenshots_TriggerScreenshot(
          IntPtr ISteamScreenshots);

        [DllImport("steam_api64.dll")]
        internal static extern void SteamAPI_ISteamScreenshots_HookScreenshots(
          IntPtr ISteamScreenshots,
          [MarshalAs(UnmanagedType.U1)] bool bHook);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamScreenshots_SetLocation(
          IntPtr ISteamScreenshots,
          uint hScreenshot,
          string pchLocation);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamScreenshots_TagUser(
          IntPtr ISteamScreenshots,
          uint hScreenshot,
          ulong steamID);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamScreenshots_TagPublishedFile(
          IntPtr ISteamScreenshots,
          uint hScreenshot,
          ulong unPublishedFileID);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamScreenshots_IsScreenshotsHooked(
          IntPtr ISteamScreenshots);

        [DllImport("steam_api64.dll")]
        internal static extern ScreenshotHandle SteamAPI_ISteamScreenshots_AddVRScreenshotToLibrary(
          IntPtr ISteamScreenshots,
          VRScreenshotType eType,
          string pchFilename,
          string pchVRFilename);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamMusic_BIsEnabled(IntPtr ISteamMusic);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamMusic_BIsPlaying(IntPtr ISteamMusic);

        [DllImport("steam_api64.dll")]
        internal static extern AudioPlayback_Status SteamAPI_ISteamMusic_GetPlaybackStatus(
          IntPtr ISteamMusic);

        [DllImport("steam_api64.dll")]
        internal static extern void SteamAPI_ISteamMusic_Play(IntPtr ISteamMusic);

        [DllImport("steam_api64.dll")]
        internal static extern void SteamAPI_ISteamMusic_Pause(IntPtr ISteamMusic);

        [DllImport("steam_api64.dll")]
        internal static extern void SteamAPI_ISteamMusic_PlayPrevious(IntPtr ISteamMusic);

        [DllImport("steam_api64.dll")]
        internal static extern void SteamAPI_ISteamMusic_PlayNext(IntPtr ISteamMusic);

        [DllImport("steam_api64.dll")]
        internal static extern void SteamAPI_ISteamMusic_SetVolume(
          IntPtr ISteamMusic,
          float flVolume);

        [DllImport("steam_api64.dll")]
        internal static extern float SteamAPI_ISteamMusic_GetVolume(IntPtr ISteamMusic);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamMusicRemote_RegisterSteamMusicRemote(
          IntPtr ISteamMusicRemote,
          string pchName);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamMusicRemote_DeregisterSteamMusicRemote(
          IntPtr ISteamMusicRemote);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamMusicRemote_BIsCurrentMusicRemote(
          IntPtr ISteamMusicRemote);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamMusicRemote_BActivationSuccess(
          IntPtr ISteamMusicRemote,
          [MarshalAs(UnmanagedType.U1)] bool bValue);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamMusicRemote_SetDisplayName(
          IntPtr ISteamMusicRemote,
          string pchDisplayName);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamMusicRemote_SetPNGIcon_64x64(
          IntPtr ISteamMusicRemote,
          IntPtr pvBuffer,
          uint cbBufferLength);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamMusicRemote_EnablePlayPrevious(
          IntPtr ISteamMusicRemote,
          [MarshalAs(UnmanagedType.U1)] bool bValue);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamMusicRemote_EnablePlayNext(
          IntPtr ISteamMusicRemote,
          [MarshalAs(UnmanagedType.U1)] bool bValue);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamMusicRemote_EnableShuffled(
          IntPtr ISteamMusicRemote,
          [MarshalAs(UnmanagedType.U1)] bool bValue);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamMusicRemote_EnableLooped(
          IntPtr ISteamMusicRemote,
          [MarshalAs(UnmanagedType.U1)] bool bValue);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamMusicRemote_EnableQueue(
          IntPtr ISteamMusicRemote,
          [MarshalAs(UnmanagedType.U1)] bool bValue);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamMusicRemote_EnablePlaylists(
          IntPtr ISteamMusicRemote,
          [MarshalAs(UnmanagedType.U1)] bool bValue);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamMusicRemote_UpdatePlaybackStatus(
          IntPtr ISteamMusicRemote,
          AudioPlayback_Status nStatus);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamMusicRemote_UpdateShuffled(
          IntPtr ISteamMusicRemote,
          [MarshalAs(UnmanagedType.U1)] bool bValue);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamMusicRemote_UpdateLooped(
          IntPtr ISteamMusicRemote,
          [MarshalAs(UnmanagedType.U1)] bool bValue);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamMusicRemote_UpdateVolume(
          IntPtr ISteamMusicRemote,
          float flValue);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamMusicRemote_CurrentEntryWillChange(
          IntPtr ISteamMusicRemote);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamMusicRemote_CurrentEntryIsAvailable(
          IntPtr ISteamMusicRemote,
          [MarshalAs(UnmanagedType.U1)] bool bAvailable);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamMusicRemote_UpdateCurrentEntryText(
          IntPtr ISteamMusicRemote,
          string pchText);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamMusicRemote_UpdateCurrentEntryElapsedSeconds(
          IntPtr ISteamMusicRemote,
          int nValue);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamMusicRemote_UpdateCurrentEntryCoverArt(
          IntPtr ISteamMusicRemote,
          IntPtr pvBuffer,
          uint cbBufferLength);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamMusicRemote_CurrentEntryDidChange(
          IntPtr ISteamMusicRemote);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamMusicRemote_QueueWillChange(
          IntPtr ISteamMusicRemote);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamMusicRemote_ResetQueueEntries(
          IntPtr ISteamMusicRemote);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamMusicRemote_SetQueueEntry(
          IntPtr ISteamMusicRemote,
          int nID,
          int nPosition,
          string pchEntryText);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamMusicRemote_SetCurrentQueueEntry(
          IntPtr ISteamMusicRemote,
          int nID);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamMusicRemote_QueueDidChange(
          IntPtr ISteamMusicRemote);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamMusicRemote_PlaylistWillChange(
          IntPtr ISteamMusicRemote);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamMusicRemote_ResetPlaylistEntries(
          IntPtr ISteamMusicRemote);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamMusicRemote_SetPlaylistEntry(
          IntPtr ISteamMusicRemote,
          int nID,
          int nPosition,
          string pchEntryText);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamMusicRemote_SetCurrentPlaylistEntry(
          IntPtr ISteamMusicRemote,
          int nID);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamMusicRemote_PlaylistDidChange(
          IntPtr ISteamMusicRemote);

        [DllImport("steam_api64.dll")]
        internal static extern HTTPRequestHandle SteamAPI_ISteamHTTP_CreateHTTPRequest(
          IntPtr ISteamHTTP,
          HTTPMethod eHTTPRequestMethod,
          string pchAbsoluteURL);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamHTTP_SetHTTPRequestContextValue(
          IntPtr ISteamHTTP,
          uint hRequest,
          ulong ulContextValue);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamHTTP_SetHTTPRequestNetworkActivityTimeout(
          IntPtr ISteamHTTP,
          uint hRequest,
          uint unTimeoutSeconds);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamHTTP_SetHTTPRequestHeaderValue(
          IntPtr ISteamHTTP,
          uint hRequest,
          string pchHeaderName,
          string pchHeaderValue);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamHTTP_SetHTTPRequestGetOrPostParameter(
          IntPtr ISteamHTTP,
          uint hRequest,
          string pchParamName,
          string pchParamValue);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamHTTP_SendHTTPRequest(
          IntPtr ISteamHTTP,
          uint hRequest,
          ref ulong pCallHandle);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamHTTP_SendHTTPRequestAndStreamResponse(
          IntPtr ISteamHTTP,
          uint hRequest,
          ref ulong pCallHandle);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamHTTP_DeferHTTPRequest(
          IntPtr ISteamHTTP,
          uint hRequest);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamHTTP_PrioritizeHTTPRequest(
          IntPtr ISteamHTTP,
          uint hRequest);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamHTTP_GetHTTPResponseHeaderSize(
          IntPtr ISteamHTTP,
          uint hRequest,
          string pchHeaderName,
          out uint unResponseHeaderSize);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamHTTP_GetHTTPResponseHeaderValue(
          IntPtr ISteamHTTP,
          uint hRequest,
          string pchHeaderName,
          out byte pHeaderValueBuffer,
          uint unBufferSize);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamHTTP_GetHTTPResponseBodySize(
          IntPtr ISteamHTTP,
          uint hRequest,
          out uint unBodySize);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamHTTP_GetHTTPResponseBodyData(
          IntPtr ISteamHTTP,
          uint hRequest,
          out byte pBodyDataBuffer,
          uint unBufferSize);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamHTTP_GetHTTPStreamingResponseBodyData(
          IntPtr ISteamHTTP,
          uint hRequest,
          uint cOffset,
          out byte pBodyDataBuffer,
          uint unBufferSize);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamHTTP_ReleaseHTTPRequest(
          IntPtr ISteamHTTP,
          uint hRequest);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamHTTP_GetHTTPDownloadProgressPct(
          IntPtr ISteamHTTP,
          uint hRequest,
          out float pflPercentOut);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamHTTP_SetHTTPRequestRawPostBody(
          IntPtr ISteamHTTP,
          uint hRequest,
          string pchContentType,
          out byte pubBody,
          uint unBodyLen);

        [DllImport("steam_api64.dll")]
        internal static extern HTTPCookieContainerHandle SteamAPI_ISteamHTTP_CreateCookieContainer(
          IntPtr ISteamHTTP,
          [MarshalAs(UnmanagedType.U1)] bool bAllowResponsesToModify);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamHTTP_ReleaseCookieContainer(
          IntPtr ISteamHTTP,
          uint hCookieContainer);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamHTTP_SetCookie(
          IntPtr ISteamHTTP,
          uint hCookieContainer,
          string pchHost,
          string pchUrl,
          string pchCookie);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamHTTP_SetHTTPRequestCookieContainer(
          IntPtr ISteamHTTP,
          uint hRequest,
          uint hCookieContainer);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamHTTP_SetHTTPRequestUserAgentInfo(
          IntPtr ISteamHTTP,
          uint hRequest,
          string pchUserAgentInfo);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamHTTP_SetHTTPRequestRequiresVerifiedCertificate(
          IntPtr ISteamHTTP,
          uint hRequest,
          [MarshalAs(UnmanagedType.U1)] bool bRequireVerifiedCertificate);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamHTTP_SetHTTPRequestAbsoluteTimeoutMS(
          IntPtr ISteamHTTP,
          uint hRequest,
          uint unMilliseconds);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamHTTP_GetHTTPRequestWasTimedOut(
          IntPtr ISteamHTTP,
          uint hRequest,
          [MarshalAs(UnmanagedType.U1)] ref bool pbWasTimedOut);

        [DllImport("steam_api64.dll")]
        internal static extern ClientUnifiedMessageHandle SteamAPI_ISteamUnifiedMessages_SendMethod(
          IntPtr ISteamUnifiedMessages,
          string pchServiceMethod,
          IntPtr pRequestBuffer,
          uint unRequestBufferSize,
          ulong unContext);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamUnifiedMessages_GetMethodResponseInfo(
          IntPtr ISteamUnifiedMessages,
          ulong hHandle,
          out uint punResponseSize,
          out Result peResult);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamUnifiedMessages_GetMethodResponseData(
          IntPtr ISteamUnifiedMessages,
          ulong hHandle,
          IntPtr pResponseBuffer,
          uint unResponseBufferSize,
          [MarshalAs(UnmanagedType.U1)] bool bAutoRelease);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamUnifiedMessages_ReleaseMethod(
          IntPtr ISteamUnifiedMessages,
          ulong hHandle);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamUnifiedMessages_SendNotification(
          IntPtr ISteamUnifiedMessages,
          string pchServiceNotification,
          IntPtr pNotificationBuffer,
          uint unNotificationBufferSize);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamController_Init(IntPtr ISteamController);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamController_Shutdown(IntPtr ISteamController);

        [DllImport("steam_api64.dll")]
        internal static extern void SteamAPI_ISteamController_RunFrame(IntPtr ISteamController);

        [DllImport("steam_api64.dll")]
        internal static extern int SteamAPI_ISteamController_GetConnectedControllers(
          IntPtr ISteamController,
          IntPtr handlesOut);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamController_ShowBindingPanel(
          IntPtr ISteamController,
          ulong controllerHandle);

        [DllImport("steam_api64.dll")]
        internal static extern ControllerActionSetHandle_t SteamAPI_ISteamController_GetActionSetHandle(
          IntPtr ISteamController,
          string pszActionSetName);

        [DllImport("steam_api64.dll")]
        internal static extern void SteamAPI_ISteamController_ActivateActionSet(
          IntPtr ISteamController,
          ulong controllerHandle,
          ulong actionSetHandle);

        [DllImport("steam_api64.dll")]
        internal static extern ControllerActionSetHandle_t SteamAPI_ISteamController_GetCurrentActionSet(
          IntPtr ISteamController,
          ulong controllerHandle);

        [DllImport("steam_api64.dll")]
        internal static extern ControllerDigitalActionHandle_t SteamAPI_ISteamController_GetDigitalActionHandle(
          IntPtr ISteamController,
          string pszActionName);

        [DllImport("steam_api64.dll")]
        internal static extern ControllerDigitalActionData_t SteamAPI_ISteamController_GetDigitalActionData(
          IntPtr ISteamController,
          ulong controllerHandle,
          ulong digitalActionHandle);

        [DllImport("steam_api64.dll")]
        internal static extern int SteamAPI_ISteamController_GetDigitalActionOrigins(
          IntPtr ISteamController,
          ulong controllerHandle,
          ulong actionSetHandle,
          ulong digitalActionHandle,
          out ControllerActionOrigin originsOut);

        [DllImport("steam_api64.dll")]
        internal static extern ControllerAnalogActionHandle_t SteamAPI_ISteamController_GetAnalogActionHandle(
          IntPtr ISteamController,
          string pszActionName);

        [DllImport("steam_api64.dll")]
        internal static extern ControllerAnalogActionData_t SteamAPI_ISteamController_GetAnalogActionData(
          IntPtr ISteamController,
          ulong controllerHandle,
          ulong analogActionHandle);

        [DllImport("steam_api64.dll")]
        internal static extern int SteamAPI_ISteamController_GetAnalogActionOrigins(
          IntPtr ISteamController,
          ulong controllerHandle,
          ulong actionSetHandle,
          ulong analogActionHandle,
          out ControllerActionOrigin originsOut);

        [DllImport("steam_api64.dll")]
        internal static extern void SteamAPI_ISteamController_StopAnalogActionMomentum(
          IntPtr ISteamController,
          ulong controllerHandle,
          ulong eAction);

        [DllImport("steam_api64.dll")]
        internal static extern void SteamAPI_ISteamController_TriggerHapticPulse(
          IntPtr ISteamController,
          ulong controllerHandle,
          SteamControllerPad eTargetPad,
          ushort usDurationMicroSec);

        [DllImport("steam_api64.dll")]
        internal static extern void SteamAPI_ISteamController_TriggerRepeatedHapticPulse(
          IntPtr ISteamController,
          ulong controllerHandle,
          SteamControllerPad eTargetPad,
          ushort usDurationMicroSec,
          ushort usOffMicroSec,
          ushort unRepeat,
          uint nFlags);

        [DllImport("steam_api64.dll")]
        internal static extern void SteamAPI_ISteamController_TriggerVibration(
          IntPtr ISteamController,
          ulong controllerHandle,
          ushort usLeftSpeed,
          ushort usRightSpeed);

        [DllImport("steam_api64.dll")]
        internal static extern void SteamAPI_ISteamController_SetLEDColor(
          IntPtr ISteamController,
          ulong controllerHandle,
          byte nColorR,
          byte nColorG,
          byte nColorB,
          uint nFlags);

        [DllImport("steam_api64.dll")]
        internal static extern int SteamAPI_ISteamController_GetGamepadIndexForController(
          IntPtr ISteamController,
          ulong ulControllerHandle);

        [DllImport("steam_api64.dll")]
        internal static extern ControllerHandle_t SteamAPI_ISteamController_GetControllerForGamepadIndex(
          IntPtr ISteamController,
          int nIndex);

        [DllImport("steam_api64.dll")]
        internal static extern ControllerMotionData_t SteamAPI_ISteamController_GetMotionData(
          IntPtr ISteamController,
          ulong controllerHandle);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamController_ShowDigitalActionOrigins(
          IntPtr ISteamController,
          ulong controllerHandle,
          ulong digitalActionHandle,
          float flScale,
          float flXPosition,
          float flYPosition);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamController_ShowAnalogActionOrigins(
          IntPtr ISteamController,
          ulong controllerHandle,
          ulong analogActionHandle,
          float flScale,
          float flXPosition,
          float flYPosition);

        [DllImport("steam_api64.dll")]
        internal static extern IntPtr SteamAPI_ISteamController_GetStringForActionOrigin(
          IntPtr ISteamController,
          ControllerActionOrigin eOrigin);

        [DllImport("steam_api64.dll")]
        internal static extern IntPtr SteamAPI_ISteamController_GetGlyphForActionOrigin(
          IntPtr ISteamController,
          ControllerActionOrigin eOrigin);

        [DllImport("steam_api64.dll")]
        internal static extern UGCQueryHandle_t SteamAPI_ISteamUGC_CreateQueryUserUGCRequest(
          IntPtr ISteamUGC,
          uint unAccountID,
          UserUGCList eListType,
          UGCMatchingUGCType eMatchingUGCType,
          UserUGCListSortOrder eSortOrder,
          uint nCreatorAppID,
          uint nConsumerAppID,
          uint unPage);

        [DllImport("steam_api64.dll")]
        internal static extern UGCQueryHandle_t SteamAPI_ISteamUGC_CreateQueryAllUGCRequest(
          IntPtr ISteamUGC,
          UGCQuery eQueryType,
          UGCMatchingUGCType eMatchingeMatchingUGCTypeFileType,
          uint nCreatorAppID,
          uint nConsumerAppID,
          uint unPage);

        [DllImport("steam_api64.dll")]
        internal static extern UGCQueryHandle_t SteamAPI_ISteamUGC_CreateQueryUGCDetailsRequest(
          IntPtr ISteamUGC,
          IntPtr pvecPublishedFileID,
          uint unNumPublishedFileIDs);

        [DllImport("steam_api64.dll")]
        internal static extern SteamAPICall_t SteamAPI_ISteamUGC_SendQueryUGCRequest(
          IntPtr ISteamUGC,
          ulong handle);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamUGC_GetQueryUGCResult(
          IntPtr ISteamUGC,
          ulong handle,
          uint index,
          ref SteamUGCDetails_t pDetails);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamUGC_GetQueryUGCPreviewURL(
          IntPtr ISteamUGC,
          ulong handle,
          uint index,
          StringBuilder pchURL,
          uint cchURLSize);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamUGC_GetQueryUGCMetadata(
          IntPtr ISteamUGC,
          ulong handle,
          uint index,
          StringBuilder pchMetadata,
          uint cchMetadatasize);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamUGC_GetQueryUGCChildren(
          IntPtr ISteamUGC,
          ulong handle,
          uint index,
          IntPtr pvecPublishedFileID,
          uint cMaxEntries);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamUGC_GetQueryUGCStatistic(
          IntPtr ISteamUGC,
          ulong handle,
          uint index,
          ItemStatistic eStatType,
          out ulong pStatValue);

        [DllImport("steam_api64.dll")]
        internal static extern uint SteamAPI_ISteamUGC_GetQueryUGCNumAdditionalPreviews(
          IntPtr ISteamUGC,
          ulong handle,
          uint index);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamUGC_GetQueryUGCAdditionalPreview(
          IntPtr ISteamUGC,
          ulong handle,
          uint index,
          uint previewIndex,
          StringBuilder pchURLOrVideoID,
          uint cchURLSize,
          StringBuilder pchOriginalFileName,
          uint cchOriginalFileNameSize,
          out ItemPreviewType pPreviewType);

        [DllImport("steam_api64.dll")]
        internal static extern uint SteamAPI_ISteamUGC_GetQueryUGCNumKeyValueTags(
          IntPtr ISteamUGC,
          ulong handle,
          uint index);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamUGC_GetQueryUGCKeyValueTag(
          IntPtr ISteamUGC,
          ulong handle,
          uint index,
          uint keyValueTagIndex,
          StringBuilder pchKey,
          uint cchKeySize,
          StringBuilder pchValue,
          uint cchValueSize);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamUGC_ReleaseQueryUGCRequest(
          IntPtr ISteamUGC,
          ulong handle);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamUGC_AddRequiredTag(
          IntPtr ISteamUGC,
          ulong handle,
          string pTagName);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamUGC_AddExcludedTag(
          IntPtr ISteamUGC,
          ulong handle,
          string pTagName);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamUGC_SetReturnOnlyIDs(
          IntPtr ISteamUGC,
          ulong handle,
          [MarshalAs(UnmanagedType.U1)] bool bReturnOnlyIDs);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamUGC_SetReturnKeyValueTags(
          IntPtr ISteamUGC,
          ulong handle,
          [MarshalAs(UnmanagedType.U1)] bool bReturnKeyValueTags);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamUGC_SetReturnLongDescription(
          IntPtr ISteamUGC,
          ulong handle,
          [MarshalAs(UnmanagedType.U1)] bool bReturnLongDescription);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamUGC_SetReturnMetadata(
          IntPtr ISteamUGC,
          ulong handle,
          [MarshalAs(UnmanagedType.U1)] bool bReturnMetadata);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamUGC_SetReturnChildren(
          IntPtr ISteamUGC,
          ulong handle,
          [MarshalAs(UnmanagedType.U1)] bool bReturnChildren);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamUGC_SetReturnAdditionalPreviews(
          IntPtr ISteamUGC,
          ulong handle,
          [MarshalAs(UnmanagedType.U1)] bool bReturnAdditionalPreviews);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamUGC_SetReturnTotalOnly(
          IntPtr ISteamUGC,
          ulong handle,
          [MarshalAs(UnmanagedType.U1)] bool bReturnTotalOnly);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamUGC_SetReturnPlaytimeStats(
          IntPtr ISteamUGC,
          ulong handle,
          uint unDays);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamUGC_SetLanguage(
          IntPtr ISteamUGC,
          ulong handle,
          string pchLanguage);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamUGC_SetAllowCachedResponse(
          IntPtr ISteamUGC,
          ulong handle,
          uint unMaxAgeSeconds);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamUGC_SetCloudFileNameFilter(
          IntPtr ISteamUGC,
          ulong handle,
          string pMatchCloudFileName);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamUGC_SetMatchAnyTag(
          IntPtr ISteamUGC,
          ulong handle,
          [MarshalAs(UnmanagedType.U1)] bool bMatchAnyTag);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamUGC_SetSearchText(
          IntPtr ISteamUGC,
          ulong handle,
          string pSearchText);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamUGC_SetRankedByTrendDays(
          IntPtr ISteamUGC,
          ulong handle,
          uint unDays);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamUGC_AddRequiredKeyValueTag(
          IntPtr ISteamUGC,
          ulong handle,
          string pKey,
          string pValue);

        [DllImport("steam_api64.dll")]
        internal static extern SteamAPICall_t SteamAPI_ISteamUGC_RequestUGCDetails(
          IntPtr ISteamUGC,
          ulong nPublishedFileID,
          uint unMaxAgeSeconds);

        [DllImport("steam_api64.dll")]
        internal static extern SteamAPICall_t SteamAPI_ISteamUGC_CreateItem(
          IntPtr ISteamUGC,
          uint nConsumerAppId,
          WorkshopFileType eFileType);

        [DllImport("steam_api64.dll")]
        internal static extern UGCUpdateHandle_t SteamAPI_ISteamUGC_StartItemUpdate(
          IntPtr ISteamUGC,
          uint nConsumerAppId,
          ulong nPublishedFileID);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamUGC_SetItemTitle(
          IntPtr ISteamUGC,
          ulong handle,
          string pchTitle);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamUGC_SetItemDescription(
          IntPtr ISteamUGC,
          ulong handle,
          string pchDescription);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamUGC_SetItemUpdateLanguage(
          IntPtr ISteamUGC,
          ulong handle,
          string pchLanguage);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamUGC_SetItemMetadata(
          IntPtr ISteamUGC,
          ulong handle,
          string pchMetaData);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamUGC_SetItemVisibility(
          IntPtr ISteamUGC,
          ulong handle,
          RemoteStoragePublishedFileVisibility eVisibility);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamUGC_SetItemTags(
          IntPtr ISteamUGC,
          ulong updateHandle,
          ref SteamParamStringArray_t pTags);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamUGC_SetItemContent(
          IntPtr ISteamUGC,
          ulong handle,
          string pszContentFolder);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamUGC_SetItemPreview(
          IntPtr ISteamUGC,
          ulong handle,
          string pszPreviewFile);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamUGC_RemoveItemKeyValueTags(
          IntPtr ISteamUGC,
          ulong handle,
          string pchKey);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamUGC_AddItemKeyValueTag(
          IntPtr ISteamUGC,
          ulong handle,
          string pchKey,
          string pchValue);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamUGC_AddItemPreviewFile(
          IntPtr ISteamUGC,
          ulong handle,
          string pszPreviewFile,
          ItemPreviewType type);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamUGC_AddItemPreviewVideo(
          IntPtr ISteamUGC,
          ulong handle,
          string pszVideoID);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamUGC_UpdateItemPreviewFile(
          IntPtr ISteamUGC,
          ulong handle,
          uint index,
          string pszPreviewFile);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamUGC_UpdateItemPreviewVideo(
          IntPtr ISteamUGC,
          ulong handle,
          uint index,
          string pszVideoID);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamUGC_RemoveItemPreview(
          IntPtr ISteamUGC,
          ulong handle,
          uint index);

        [DllImport("steam_api64.dll")]
        internal static extern SteamAPICall_t SteamAPI_ISteamUGC_SubmitItemUpdate(
          IntPtr ISteamUGC,
          ulong handle,
          string pchChangeNote);

        [DllImport("steam_api64.dll")]
        internal static extern ItemUpdateStatus SteamAPI_ISteamUGC_GetItemUpdateProgress(
          IntPtr ISteamUGC,
          ulong handle,
          out ulong punBytesProcessed,
          out ulong punBytesTotal);

        [DllImport("steam_api64.dll")]
        internal static extern SteamAPICall_t SteamAPI_ISteamUGC_SetUserItemVote(
          IntPtr ISteamUGC,
          ulong nPublishedFileID,
          [MarshalAs(UnmanagedType.U1)] bool bVoteUp);

        [DllImport("steam_api64.dll")]
        internal static extern SteamAPICall_t SteamAPI_ISteamUGC_GetUserItemVote(
          IntPtr ISteamUGC,
          ulong nPublishedFileID);

        [DllImport("steam_api64.dll")]
        internal static extern SteamAPICall_t SteamAPI_ISteamUGC_AddItemToFavorites(
          IntPtr ISteamUGC,
          uint nAppId,
          ulong nPublishedFileID);

        [DllImport("steam_api64.dll")]
        internal static extern SteamAPICall_t SteamAPI_ISteamUGC_RemoveItemFromFavorites(
          IntPtr ISteamUGC,
          uint nAppId,
          ulong nPublishedFileID);

        [DllImport("steam_api64.dll")]
        internal static extern SteamAPICall_t SteamAPI_ISteamUGC_SubscribeItem(
          IntPtr ISteamUGC,
          ulong nPublishedFileID);

        [DllImport("steam_api64.dll")]
        internal static extern SteamAPICall_t SteamAPI_ISteamUGC_UnsubscribeItem(
          IntPtr ISteamUGC,
          ulong nPublishedFileID);

        [DllImport("steam_api64.dll")]
        internal static extern uint SteamAPI_ISteamUGC_GetNumSubscribedItems(IntPtr ISteamUGC);

        [DllImport("steam_api64.dll")]
        internal static extern uint SteamAPI_ISteamUGC_GetSubscribedItems(
          IntPtr ISteamUGC,
          IntPtr pvecPublishedFileID,
          uint cMaxEntries);

        [DllImport("steam_api64.dll")]
        internal static extern uint SteamAPI_ISteamUGC_GetItemState(
          IntPtr ISteamUGC,
          ulong nPublishedFileID);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamUGC_GetItemInstallInfo(
          IntPtr ISteamUGC,
          ulong nPublishedFileID,
          out ulong punSizeOnDisk,
          StringBuilder pchFolder,
          uint cchFolderSize,
          out uint punTimeStamp);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamUGC_GetItemDownloadInfo(
          IntPtr ISteamUGC,
          ulong nPublishedFileID,
          out ulong punBytesDownloaded,
          out ulong punBytesTotal);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamUGC_DownloadItem(
          IntPtr ISteamUGC,
          ulong nPublishedFileID,
          [MarshalAs(UnmanagedType.U1)] bool bHighPriority);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamUGC_BInitWorkshopForGameServer(
          IntPtr ISteamUGC,
          uint unWorkshopDepotID,
          string pszFolder);

        [DllImport("steam_api64.dll")]
        internal static extern void SteamAPI_ISteamUGC_SuspendDownloads(
          IntPtr ISteamUGC,
          [MarshalAs(UnmanagedType.U1)] bool bSuspend);

        [DllImport("steam_api64.dll")]
        internal static extern SteamAPICall_t SteamAPI_ISteamUGC_StartPlaytimeTracking(
          IntPtr ISteamUGC,
          IntPtr pvecPublishedFileID,
          uint unNumPublishedFileIDs);

        [DllImport("steam_api64.dll")]
        internal static extern SteamAPICall_t SteamAPI_ISteamUGC_StopPlaytimeTracking(
          IntPtr ISteamUGC,
          IntPtr pvecPublishedFileID,
          uint unNumPublishedFileIDs);

        [DllImport("steam_api64.dll")]
        internal static extern SteamAPICall_t SteamAPI_ISteamUGC_StopPlaytimeTrackingForAllItems(
          IntPtr ISteamUGC);

        [DllImport("steam_api64.dll")]
        internal static extern SteamAPICall_t SteamAPI_ISteamUGC_AddDependency(
          IntPtr ISteamUGC,
          ulong nParentPublishedFileID,
          ulong nChildPublishedFileID);

        [DllImport("steam_api64.dll")]
        internal static extern SteamAPICall_t SteamAPI_ISteamUGC_RemoveDependency(
          IntPtr ISteamUGC,
          ulong nParentPublishedFileID,
          ulong nChildPublishedFileID);

        [DllImport("steam_api64.dll")]
        internal static extern uint SteamAPI_ISteamAppList_GetNumInstalledApps(IntPtr ISteamAppList);

        [DllImport("steam_api64.dll")]
        internal static extern uint SteamAPI_ISteamAppList_GetInstalledApps(
          IntPtr ISteamAppList,
          IntPtr pvecAppID,
          uint unMaxAppIDs);

        [DllImport("steam_api64.dll")]
        internal static extern int SteamAPI_ISteamAppList_GetAppName(
          IntPtr ISteamAppList,
          uint nAppID,
          StringBuilder pchName,
          int cchNameMax);

        [DllImport("steam_api64.dll")]
        internal static extern int SteamAPI_ISteamAppList_GetAppInstallDir(
          IntPtr ISteamAppList,
          uint nAppID,
          StringBuilder pchDirectory,
          int cchNameMax);

        [DllImport("steam_api64.dll")]
        internal static extern int SteamAPI_ISteamAppList_GetAppBuildId(
          IntPtr ISteamAppList,
          uint nAppID);

        [DllImport("steam_api64.dll")]
        internal static extern void SteamAPI_ISteamHTMLSurface_DestructISteamHTMLSurface(
          IntPtr ISteamHTMLSurface);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamHTMLSurface_Init(IntPtr ISteamHTMLSurface);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamHTMLSurface_Shutdown(IntPtr ISteamHTMLSurface);

        [DllImport("steam_api64.dll")]
        internal static extern SteamAPICall_t SteamAPI_ISteamHTMLSurface_CreateBrowser(
          IntPtr ISteamHTMLSurface,
          string pchUserAgent,
          string pchUserCSS);

        [DllImport("steam_api64.dll")]
        internal static extern void SteamAPI_ISteamHTMLSurface_RemoveBrowser(
          IntPtr ISteamHTMLSurface,
          uint unBrowserHandle);

        [DllImport("steam_api64.dll")]
        internal static extern void SteamAPI_ISteamHTMLSurface_LoadURL(
          IntPtr ISteamHTMLSurface,
          uint unBrowserHandle,
          string pchURL,
          string pchPostData);

        [DllImport("steam_api64.dll")]
        internal static extern void SteamAPI_ISteamHTMLSurface_SetSize(
          IntPtr ISteamHTMLSurface,
          uint unBrowserHandle,
          uint unWidth,
          uint unHeight);

        [DllImport("steam_api64.dll")]
        internal static extern void SteamAPI_ISteamHTMLSurface_StopLoad(
          IntPtr ISteamHTMLSurface,
          uint unBrowserHandle);

        [DllImport("steam_api64.dll")]
        internal static extern void SteamAPI_ISteamHTMLSurface_Reload(
          IntPtr ISteamHTMLSurface,
          uint unBrowserHandle);

        [DllImport("steam_api64.dll")]
        internal static extern void SteamAPI_ISteamHTMLSurface_GoBack(
          IntPtr ISteamHTMLSurface,
          uint unBrowserHandle);

        [DllImport("steam_api64.dll")]
        internal static extern void SteamAPI_ISteamHTMLSurface_GoForward(
          IntPtr ISteamHTMLSurface,
          uint unBrowserHandle);

        [DllImport("steam_api64.dll")]
        internal static extern void SteamAPI_ISteamHTMLSurface_AddHeader(
          IntPtr ISteamHTMLSurface,
          uint unBrowserHandle,
          string pchKey,
          string pchValue);

        [DllImport("steam_api64.dll")]
        internal static extern void SteamAPI_ISteamHTMLSurface_ExecuteJavascript(
          IntPtr ISteamHTMLSurface,
          uint unBrowserHandle,
          string pchScript);

        [DllImport("steam_api64.dll")]
        internal static extern void SteamAPI_ISteamHTMLSurface_MouseUp(
          IntPtr ISteamHTMLSurface,
          uint unBrowserHandle,
          HTMLMouseButton eMouseButton);

        [DllImport("steam_api64.dll")]
        internal static extern void SteamAPI_ISteamHTMLSurface_MouseDown(
          IntPtr ISteamHTMLSurface,
          uint unBrowserHandle,
          HTMLMouseButton eMouseButton);

        [DllImport("steam_api64.dll")]
        internal static extern void SteamAPI_ISteamHTMLSurface_MouseDoubleClick(
          IntPtr ISteamHTMLSurface,
          uint unBrowserHandle,
          HTMLMouseButton eMouseButton);

        [DllImport("steam_api64.dll")]
        internal static extern void SteamAPI_ISteamHTMLSurface_MouseMove(
          IntPtr ISteamHTMLSurface,
          uint unBrowserHandle,
          int x,
          int y);

        [DllImport("steam_api64.dll")]
        internal static extern void SteamAPI_ISteamHTMLSurface_MouseWheel(
          IntPtr ISteamHTMLSurface,
          uint unBrowserHandle,
          int nDelta);

        [DllImport("steam_api64.dll")]
        internal static extern void SteamAPI_ISteamHTMLSurface_KeyDown(
          IntPtr ISteamHTMLSurface,
          uint unBrowserHandle,
          uint nNativeKeyCode,
          HTMLKeyModifiers eHTMLKeyModifiers);

        [DllImport("steam_api64.dll")]
        internal static extern void SteamAPI_ISteamHTMLSurface_KeyUp(
          IntPtr ISteamHTMLSurface,
          uint unBrowserHandle,
          uint nNativeKeyCode,
          HTMLKeyModifiers eHTMLKeyModifiers);

        [DllImport("steam_api64.dll")]
        internal static extern void SteamAPI_ISteamHTMLSurface_KeyChar(
          IntPtr ISteamHTMLSurface,
          uint unBrowserHandle,
          uint cUnicodeChar,
          HTMLKeyModifiers eHTMLKeyModifiers);

        [DllImport("steam_api64.dll")]
        internal static extern void SteamAPI_ISteamHTMLSurface_SetHorizontalScroll(
          IntPtr ISteamHTMLSurface,
          uint unBrowserHandle,
          uint nAbsolutePixelScroll);

        [DllImport("steam_api64.dll")]
        internal static extern void SteamAPI_ISteamHTMLSurface_SetVerticalScroll(
          IntPtr ISteamHTMLSurface,
          uint unBrowserHandle,
          uint nAbsolutePixelScroll);

        [DllImport("steam_api64.dll")]
        internal static extern void SteamAPI_ISteamHTMLSurface_SetKeyFocus(
          IntPtr ISteamHTMLSurface,
          uint unBrowserHandle,
          [MarshalAs(UnmanagedType.U1)] bool bHasKeyFocus);

        [DllImport("steam_api64.dll")]
        internal static extern void SteamAPI_ISteamHTMLSurface_ViewSource(
          IntPtr ISteamHTMLSurface,
          uint unBrowserHandle);

        [DllImport("steam_api64.dll")]
        internal static extern void SteamAPI_ISteamHTMLSurface_CopyToClipboard(
          IntPtr ISteamHTMLSurface,
          uint unBrowserHandle);

        [DllImport("steam_api64.dll")]
        internal static extern void SteamAPI_ISteamHTMLSurface_PasteFromClipboard(
          IntPtr ISteamHTMLSurface,
          uint unBrowserHandle);

        [DllImport("steam_api64.dll")]
        internal static extern void SteamAPI_ISteamHTMLSurface_Find(
          IntPtr ISteamHTMLSurface,
          uint unBrowserHandle,
          string pchSearchStr,
          [MarshalAs(UnmanagedType.U1)] bool bCurrentlyInFind,
          [MarshalAs(UnmanagedType.U1)] bool bReverse);

        [DllImport("steam_api64.dll")]
        internal static extern void SteamAPI_ISteamHTMLSurface_StopFind(
          IntPtr ISteamHTMLSurface,
          uint unBrowserHandle);

        [DllImport("steam_api64.dll")]
        internal static extern void SteamAPI_ISteamHTMLSurface_GetLinkAtPosition(
          IntPtr ISteamHTMLSurface,
          uint unBrowserHandle,
          int x,
          int y);

        [DllImport("steam_api64.dll")]
        internal static extern void SteamAPI_ISteamHTMLSurface_SetCookie(
          IntPtr ISteamHTMLSurface,
          string pchHostname,
          string pchKey,
          string pchValue,
          string pchPath,
          uint nExpires,
          [MarshalAs(UnmanagedType.U1)] bool bSecure,
          [MarshalAs(UnmanagedType.U1)] bool bHTTPOnly);

        [DllImport("steam_api64.dll")]
        internal static extern void SteamAPI_ISteamHTMLSurface_SetPageScaleFactor(
          IntPtr ISteamHTMLSurface,
          uint unBrowserHandle,
          float flZoom,
          int nPointX,
          int nPointY);

        [DllImport("steam_api64.dll")]
        internal static extern void SteamAPI_ISteamHTMLSurface_SetBackgroundMode(
          IntPtr ISteamHTMLSurface,
          uint unBrowserHandle,
          [MarshalAs(UnmanagedType.U1)] bool bBackgroundMode);

        [DllImport("steam_api64.dll")]
        internal static extern void SteamAPI_ISteamHTMLSurface_AllowStartRequest(
          IntPtr ISteamHTMLSurface,
          uint unBrowserHandle,
          [MarshalAs(UnmanagedType.U1)] bool bAllowed);

        [DllImport("steam_api64.dll")]
        internal static extern void SteamAPI_ISteamHTMLSurface_JSDialogResponse(
          IntPtr ISteamHTMLSurface,
          uint unBrowserHandle,
          [MarshalAs(UnmanagedType.U1)] bool bResult);

        [DllImport("steam_api64.dll")]
        internal static extern Result SteamAPI_ISteamInventory_GetResultStatus(
          IntPtr ISteamInventory,
          int resultHandle);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamInventory_GetResultItems(
          IntPtr ISteamInventory,
          int resultHandle,
          IntPtr pOutItemsArray,
          out uint punOutItemsArraySize);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamInventory_GetResultItemProperty(
          IntPtr ISteamInventory,
          int resultHandle,
          uint unItemIndex,
          string pchPropertyName,
          StringBuilder pchValueBuffer,
          out uint punValueBufferSizeOut);

        [DllImport("steam_api64.dll")]
        internal static extern uint SteamAPI_ISteamInventory_GetResultTimestamp(
          IntPtr ISteamInventory,
          int resultHandle);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamInventory_CheckResultSteamID(
          IntPtr ISteamInventory,
          int resultHandle,
          ulong steamIDExpected);

        [DllImport("steam_api64.dll")]
        internal static extern void SteamAPI_ISteamInventory_DestroyResult(
          IntPtr ISteamInventory,
          int resultHandle);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamInventory_GetAllItems(
          IntPtr ISteamInventory,
          ref int pResultHandle);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamInventory_GetItemsByID(
          IntPtr ISteamInventory,
          ref int pResultHandle,
          ulong[] pInstanceIDs,
          uint unCountInstanceIDs);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamInventory_SerializeResult(
          IntPtr ISteamInventory,
          int resultHandle,
          IntPtr pOutBuffer,
          out uint punOutBufferSize);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamInventory_DeserializeResult(
          IntPtr ISteamInventory,
          ref int pOutResultHandle,
          IntPtr pBuffer,
          uint unBufferSize,
          [MarshalAs(UnmanagedType.U1)] bool bRESERVED_MUST_BE_FALSE);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamInventory_GenerateItems(
          IntPtr ISteamInventory,
          ref int pResultHandle,
          int[] pArrayItemDefs,
          uint[] punArrayQuantity,
          uint unArrayLength);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamInventory_GrantPromoItems(
          IntPtr ISteamInventory,
          ref int pResultHandle);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamInventory_AddPromoItem(
          IntPtr ISteamInventory,
          ref int pResultHandle,
          int itemDef);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamInventory_AddPromoItems(
          IntPtr ISteamInventory,
          ref int pResultHandle,
          int[] pArrayItemDefs,
          uint unArrayLength);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamInventory_ConsumeItem(
          IntPtr ISteamInventory,
          ref int pResultHandle,
          ulong itemConsume,
          uint unQuantity);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamInventory_ExchangeItems(
          IntPtr ISteamInventory,
          ref int pResultHandle,
          int[] pArrayGenerate,
          uint[] punArrayGenerateQuantity,
          uint unArrayGenerateLength,
          ulong[] pArrayDestroy,
          uint[] punArrayDestroyQuantity,
          uint unArrayDestroyLength);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamInventory_TransferItemQuantity(
          IntPtr ISteamInventory,
          ref int pResultHandle,
          ulong itemIdSource,
          uint unQuantity,
          ulong itemIdDest);

        [DllImport("steam_api64.dll")]
        internal static extern void SteamAPI_ISteamInventory_SendItemDropHeartbeat(
          IntPtr ISteamInventory);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamInventory_TriggerItemDrop(
          IntPtr ISteamInventory,
          ref int pResultHandle,
          int dropListDefinition);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamInventory_TradeItems(
          IntPtr ISteamInventory,
          ref int pResultHandle,
          ulong steamIDTradePartner,
          ulong[] pArrayGive,
          uint[] pArrayGiveQuantity,
          uint nArrayGiveLength,
          ulong[] pArrayGet,
          uint[] pArrayGetQuantity,
          uint nArrayGetLength);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamInventory_LoadItemDefinitions(
          IntPtr ISteamInventory);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamInventory_GetItemDefinitionIDs(
          IntPtr ISteamInventory,
          IntPtr pItemDefIDs,
          out uint punItemDefIDsArraySize);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamInventory_GetItemDefinitionProperty(
          IntPtr ISteamInventory,
          int iDefinition,
          string pchPropertyName,
          StringBuilder pchValueBuffer,
          out uint punValueBufferSizeOut);

        [DllImport("steam_api64.dll")]
        internal static extern SteamAPICall_t SteamAPI_ISteamInventory_RequestEligiblePromoItemDefinitionsIDs(
          IntPtr ISteamInventory,
          ulong steamID);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamInventory_GetEligiblePromoItemDefinitionIDs(
          IntPtr ISteamInventory,
          ulong steamID,
          IntPtr pItemDefIDs,
          out uint punItemDefIDsArraySize);

        [DllImport("steam_api64.dll")]
        internal static extern void SteamAPI_ISteamVideo_GetVideoURL(
          IntPtr ISteamVideo,
          uint unVideoAppID);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamVideo_IsBroadcasting(
          IntPtr ISteamVideo,
          IntPtr pnNumViewers);

        [DllImport("steam_api64.dll")]
        internal static extern void SteamAPI_ISteamVideo_GetOPFSettings(
          IntPtr ISteamVideo,
          uint unVideoAppID);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamVideo_GetOPFStringForApp(
          IntPtr ISteamVideo,
          uint unVideoAppID,
          StringBuilder pchBuffer,
          out int pnBufferSize);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamGameServer_InitGameServer(
          IntPtr ISteamGameServer,
          uint unIP,
          ushort usGamePort,
          ushort usQueryPort,
          uint unFlags,
          uint nGameAppId,
          string pchVersionString);

        [DllImport("steam_api64.dll")]
        internal static extern void SteamAPI_ISteamGameServer_SetProduct(
          IntPtr ISteamGameServer,
          string pszProduct);

        [DllImport("steam_api64.dll")]
        internal static extern void SteamAPI_ISteamGameServer_SetGameDescription(
          IntPtr ISteamGameServer,
          string pszGameDescription);

        [DllImport("steam_api64.dll")]
        internal static extern void SteamAPI_ISteamGameServer_SetModDir(
          IntPtr ISteamGameServer,
          string pszModDir);

        [DllImport("steam_api64.dll")]
        internal static extern void SteamAPI_ISteamGameServer_SetDedicatedServer(
          IntPtr ISteamGameServer,
          [MarshalAs(UnmanagedType.U1)] bool bDedicated);

        [DllImport("steam_api64.dll")]
        internal static extern void SteamAPI_ISteamGameServer_LogOn(
          IntPtr ISteamGameServer,
          string pszToken);

        [DllImport("steam_api64.dll")]
        internal static extern void SteamAPI_ISteamGameServer_LogOnAnonymous(IntPtr ISteamGameServer);

        [DllImport("steam_api64.dll")]
        internal static extern void SteamAPI_ISteamGameServer_LogOff(IntPtr ISteamGameServer);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamGameServer_BLoggedOn(IntPtr ISteamGameServer);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamGameServer_BSecure(IntPtr ISteamGameServer);

        [DllImport("steam_api64.dll")]
        internal static extern CSteamID SteamAPI_ISteamGameServer_GetSteamID(IntPtr ISteamGameServer);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamGameServer_WasRestartRequested(
          IntPtr ISteamGameServer);

        [DllImport("steam_api64.dll")]
        internal static extern void SteamAPI_ISteamGameServer_SetMaxPlayerCount(
          IntPtr ISteamGameServer,
          int cPlayersMax);

        [DllImport("steam_api64.dll")]
        internal static extern void SteamAPI_ISteamGameServer_SetBotPlayerCount(
          IntPtr ISteamGameServer,
          int cBotplayers);

        [DllImport("steam_api64.dll")]
        internal static extern void SteamAPI_ISteamGameServer_SetServerName(
          IntPtr ISteamGameServer,
          string pszServerName);

        [DllImport("steam_api64.dll")]
        internal static extern void SteamAPI_ISteamGameServer_SetMapName(
          IntPtr ISteamGameServer,
          string pszMapName);

        [DllImport("steam_api64.dll")]
        internal static extern void SteamAPI_ISteamGameServer_SetPasswordProtected(
          IntPtr ISteamGameServer,
          [MarshalAs(UnmanagedType.U1)] bool bPasswordProtected);

        [DllImport("steam_api64.dll")]
        internal static extern void SteamAPI_ISteamGameServer_SetSpectatorPort(
          IntPtr ISteamGameServer,
          ushort unSpectatorPort);

        [DllImport("steam_api64.dll")]
        internal static extern void SteamAPI_ISteamGameServer_SetSpectatorServerName(
          IntPtr ISteamGameServer,
          string pszSpectatorServerName);

        [DllImport("steam_api64.dll")]
        internal static extern void SteamAPI_ISteamGameServer_ClearAllKeyValues(
          IntPtr ISteamGameServer);

        [DllImport("steam_api64.dll")]
        internal static extern void SteamAPI_ISteamGameServer_SetKeyValue(
          IntPtr ISteamGameServer,
          string pKey,
          string pValue);

        [DllImport("steam_api64.dll")]
        internal static extern void SteamAPI_ISteamGameServer_SetGameTags(
          IntPtr ISteamGameServer,
          string pchGameTags);

        [DllImport("steam_api64.dll")]
        internal static extern void SteamAPI_ISteamGameServer_SetGameData(
          IntPtr ISteamGameServer,
          string pchGameData);

        [DllImport("steam_api64.dll")]
        internal static extern void SteamAPI_ISteamGameServer_SetRegion(
          IntPtr ISteamGameServer,
          string pszRegion);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamGameServer_SendUserConnectAndAuthenticate(
          IntPtr ISteamGameServer,
          uint unIPClient,
          IntPtr pvAuthBlob,
          uint cubAuthBlobSize,
          out ulong pSteamIDUser);

        [DllImport("steam_api64.dll")]
        internal static extern CSteamID SteamAPI_ISteamGameServer_CreateUnauthenticatedUserConnection(
          IntPtr ISteamGameServer);

        [DllImport("steam_api64.dll")]
        internal static extern void SteamAPI_ISteamGameServer_SendUserDisconnect(
          IntPtr ISteamGameServer,
          ulong steamIDUser);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamGameServer_BUpdateUserData(
          IntPtr ISteamGameServer,
          ulong steamIDUser,
          string pchPlayerName,
          uint uScore);

        [DllImport("steam_api64.dll")]
        internal static extern HAuthTicket SteamAPI_ISteamGameServer_GetAuthSessionTicket(
          IntPtr ISteamGameServer,
          IntPtr pTicket,
          int cbMaxTicket,
          out uint pcbTicket);

        [DllImport("steam_api64.dll")]
        internal static extern BeginAuthSessionResult SteamAPI_ISteamGameServer_BeginAuthSession(
          IntPtr ISteamGameServer,
          IntPtr pAuthTicket,
          int cbAuthTicket,
          ulong steamID);

        [DllImport("steam_api64.dll")]
        internal static extern void SteamAPI_ISteamGameServer_EndAuthSession(
          IntPtr ISteamGameServer,
          ulong steamID);

        [DllImport("steam_api64.dll")]
        internal static extern void SteamAPI_ISteamGameServer_CancelAuthTicket(
          IntPtr ISteamGameServer,
          uint hAuthTicket);

        [DllImport("steam_api64.dll")]
        internal static extern UserHasLicenseForAppResult SteamAPI_ISteamGameServer_UserHasLicenseForApp(
          IntPtr ISteamGameServer,
          ulong steamID,
          uint appID);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamGameServer_RequestUserGroupStatus(
          IntPtr ISteamGameServer,
          ulong steamIDUser,
          ulong steamIDGroup);

        [DllImport("steam_api64.dll")]
        internal static extern void SteamAPI_ISteamGameServer_GetGameplayStats(
          IntPtr ISteamGameServer);

        [DllImport("steam_api64.dll")]
        internal static extern SteamAPICall_t SteamAPI_ISteamGameServer_GetServerReputation(
          IntPtr ISteamGameServer);

        [DllImport("steam_api64.dll")]
        internal static extern uint SteamAPI_ISteamGameServer_GetPublicIP(IntPtr ISteamGameServer);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamGameServer_HandleIncomingPacket(
          IntPtr ISteamGameServer,
          IntPtr pData,
          int cbData,
          uint srcIP,
          ushort srcPort);

        [DllImport("steam_api64.dll")]
        internal static extern int SteamAPI_ISteamGameServer_GetNextOutgoingPacket(
          IntPtr ISteamGameServer,
          IntPtr pOut,
          int cbMaxOut,
          out uint pNetAdr,
          out ushort pPort);

        [DllImport("steam_api64.dll")]
        internal static extern void SteamAPI_ISteamGameServer_EnableHeartbeats(
          IntPtr ISteamGameServer,
          [MarshalAs(UnmanagedType.U1)] bool bActive);

        [DllImport("steam_api64.dll")]
        internal static extern void SteamAPI_ISteamGameServer_SetHeartbeatInterval(
          IntPtr ISteamGameServer,
          int iHeartbeatInterval);

        [DllImport("steam_api64.dll")]
        internal static extern void SteamAPI_ISteamGameServer_ForceHeartbeat(IntPtr ISteamGameServer);

        [DllImport("steam_api64.dll")]
        internal static extern SteamAPICall_t SteamAPI_ISteamGameServer_AssociateWithClan(
          IntPtr ISteamGameServer,
          ulong steamIDClan);

        [DllImport("steam_api64.dll")]
        internal static extern SteamAPICall_t SteamAPI_ISteamGameServer_ComputeNewPlayerCompatibility(
          IntPtr ISteamGameServer,
          ulong steamIDNewPlayer);

        [DllImport("steam_api64.dll")]
        internal static extern SteamAPICall_t SteamAPI_ISteamGameServerStats_RequestUserStats(
          IntPtr ISteamGameServerStats,
          ulong steamIDUser);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamGameServerStats_GetUserStat(
          IntPtr ISteamGameServerStats,
          ulong steamIDUser,
          string pchName,
          out int pData);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamGameServerStats_GetUserStat0(
          IntPtr ISteamGameServerStats,
          ulong steamIDUser,
          string pchName,
          out float pData);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamGameServerStats_GetUserAchievement(
          IntPtr ISteamGameServerStats,
          ulong steamIDUser,
          string pchName,
          [MarshalAs(UnmanagedType.U1)] ref bool pbAchieved);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamGameServerStats_SetUserStat(
          IntPtr ISteamGameServerStats,
          ulong steamIDUser,
          string pchName,
          int nData);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamGameServerStats_SetUserStat0(
          IntPtr ISteamGameServerStats,
          ulong steamIDUser,
          string pchName,
          float fData);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamGameServerStats_UpdateUserAvgRateStat(
          IntPtr ISteamGameServerStats,
          ulong steamIDUser,
          string pchName,
          float flCountThisSession,
          double dSessionLength);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamGameServerStats_SetUserAchievement(
          IntPtr ISteamGameServerStats,
          ulong steamIDUser,
          string pchName);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_ISteamGameServerStats_ClearUserAchievement(
          IntPtr ISteamGameServerStats,
          ulong steamIDUser,
          string pchName);

        [DllImport("steam_api64.dll")]
        internal static extern SteamAPICall_t SteamAPI_ISteamGameServerStats_StoreUserStats(
          IntPtr ISteamGameServerStats,
          ulong steamIDUser);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_Init();

        [DllImport("steam_api64.dll")]
        internal static extern void SteamAPI_RunCallbacks();

        [DllImport("steam_api64.dll")]
        internal static extern void SteamGameServer_RunCallbacks();

        [DllImport("steam_api64.dll")]
        internal static extern void SteamAPI_RegisterCallback(IntPtr pCallback, int callback);

        [DllImport("steam_api64.dll")]
        internal static extern void SteamAPI_UnregisterCallback(IntPtr pCallback);

        [DllImport("steam_api64.dll")]
        internal static extern void SteamAPI_RegisterCallResult(IntPtr pCallback, ulong callback);

        [DllImport("steam_api64.dll")]
        internal static extern void SteamAPI_UnregisterCallResult(IntPtr pCallback, ulong callback);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamInternal_GameServer_Init(
          uint unIP,
          ushort usPort,
          ushort usGamePort,
          ushort usQueryPort,
          int eServerMode,
          string pchVersionString);

        [DllImport("steam_api64.dll")]
        internal static extern void SteamAPI_Shutdown();

        [DllImport("steam_api64.dll")]
        internal static extern void SteamGameServer_Shutdown();

        [DllImport("steam_api64.dll")]
        internal static extern HSteamUser SteamAPI_GetHSteamUser();

        [DllImport("steam_api64.dll")]
        internal static extern HSteamPipe SteamAPI_GetHSteamPipe();

        [DllImport("steam_api64.dll")]
        internal static extern HSteamUser SteamGameServer_GetHSteamUser();

        [DllImport("steam_api64.dll")]
        internal static extern HSteamPipe SteamGameServer_GetHSteamPipe();

        [DllImport("steam_api64.dll")]
        internal static extern IntPtr SteamInternal_CreateInterface(string version);

        [DllImport("steam_api64.dll")]
        internal static extern bool SteamAPI_RestartAppIfNecessary(uint unOwnAppID);
      }
    }
  }
}
