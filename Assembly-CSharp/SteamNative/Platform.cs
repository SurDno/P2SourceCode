using System;
using System.Runtime.InteropServices;
using System.Text;

namespace SteamNative;

internal static class Platform {
	private static Facepunch.Steamworks.OperatingSystem _os;
	private static Facepunch.Steamworks.Architecture _arch;

	internal static Facepunch.Steamworks.OperatingSystem Os {
		get {
			if (_os == Facepunch.Steamworks.OperatingSystem.Unset) {
				_os = Facepunch.Steamworks.OperatingSystem.Windows;
				if (Environment.OSVersion.Platform == PlatformID.MacOSX)
					_os = Facepunch.Steamworks.OperatingSystem.Osx;
				if (Environment.OSVersion.Platform == PlatformID.Unix)
					_os = Facepunch.Steamworks.OperatingSystem.Linux;
				if (Environment.OSVersion.VersionString.ToLower().Contains("unix"))
					_os = Facepunch.Steamworks.OperatingSystem.Linux;
				if (Environment.OSVersion.VersionString.ToLower().Contains("osx"))
					_os = Facepunch.Steamworks.OperatingSystem.Osx;
			}

			return _os;
		}
		set => _os = value;
	}

	internal static Facepunch.Steamworks.Architecture Arch {
		get {
			if (_arch == Facepunch.Steamworks.Architecture.Unset) {
				if (IntPtr.Size == 8)
					_arch = Facepunch.Steamworks.Architecture.x64;
				else {
					if (IntPtr.Size != 4)
						throw new Exception("Unsupported Architecture!");
					_arch = Facepunch.Steamworks.Architecture.x86;
				}
			}

			return _arch;
		}
		set => _arch = value;
	}

	public static bool IsWindows => Os == Facepunch.Steamworks.OperatingSystem.Windows;

	public static bool IsWindows64 => Arch == Facepunch.Steamworks.Architecture.x64 && IsWindows;

	public static bool IsWindows32 => Arch == Facepunch.Steamworks.Architecture.x86 && IsWindows;

	public static bool IsLinux64 => Arch == Facepunch.Steamworks.Architecture.x64 &&
	                                Os == Facepunch.Steamworks.OperatingSystem.Linux;

	public static bool IsLinux32 => Arch == Facepunch.Steamworks.Architecture.x86 &&
	                                Os == Facepunch.Steamworks.OperatingSystem.Linux;

	public static bool IsOsx => Os == Facepunch.Steamworks.OperatingSystem.Osx;

	public static bool PackSmall => Os != Facepunch.Steamworks.OperatingSystem.Windows;

	internal interface Interface : IDisposable {
		bool IsValid { get; }

		uint ISteamAppList_GetNumInstalledApps();

		uint ISteamAppList_GetInstalledApps(IntPtr pvecAppID, uint unMaxAppIDs);

		int ISteamAppList_GetAppName(uint nAppID, StringBuilder pchName, int cchNameMax);

		int ISteamAppList_GetAppInstallDir(uint nAppID, StringBuilder pchDirectory, int cchNameMax);

		int ISteamAppList_GetAppBuildId(uint nAppID);

		bool ISteamApps_BIsSubscribed();

		bool ISteamApps_BIsLowViolence();

		bool ISteamApps_BIsCybercafe();

		bool ISteamApps_BIsVACBanned();

		IntPtr ISteamApps_GetCurrentGameLanguage();

		IntPtr ISteamApps_GetAvailableGameLanguages();

		bool ISteamApps_BIsSubscribedApp(uint appID);

		bool ISteamApps_BIsDlcInstalled(uint appID);

		uint ISteamApps_GetEarliestPurchaseUnixTime(uint nAppID);

		bool ISteamApps_BIsSubscribedFromFreeWeekend();

		int ISteamApps_GetDLCCount();

		bool ISteamApps_BGetDLCDataByIndex(
			int iDLC,
			ref uint pAppID,
			[MarshalAs(UnmanagedType.U1)] ref bool pbAvailable,
			StringBuilder pchName,
			int cchNameBufferSize);

		void ISteamApps_InstallDLC(uint nAppID);

		void ISteamApps_UninstallDLC(uint nAppID);

		void ISteamApps_RequestAppProofOfPurchaseKey(uint nAppID);

		bool ISteamApps_GetCurrentBetaName(StringBuilder pchName, int cchNameBufferSize);

		bool ISteamApps_MarkContentCorrupt([MarshalAs(UnmanagedType.U1)] bool bMissingFilesOnly);

		uint ISteamApps_GetInstalledDepots(uint appID, IntPtr pvecDepots, uint cMaxDepots);

		uint ISteamApps_GetAppInstallDir(
			uint appID,
			StringBuilder pchFolder,
			uint cchFolderBufferSize);

		bool ISteamApps_BIsAppInstalled(uint appID);

		CSteamID ISteamApps_GetAppOwner();

		IntPtr ISteamApps_GetLaunchQueryParam(string pchKey);

		bool ISteamApps_GetDlcDownloadProgress(
			uint nAppID,
			out ulong punBytesDownloaded,
			out ulong punBytesTotal);

		int ISteamApps_GetAppBuildId();

		void ISteamApps_RequestAllProofOfPurchaseKeys();

		SteamAPICall_t ISteamApps_GetFileDetails(string pszFileName);

		HSteamPipe ISteamClient_CreateSteamPipe();

		bool ISteamClient_BReleaseSteamPipe(int hSteamPipe);

		HSteamUser ISteamClient_ConnectToGlobalUser(int hSteamPipe);

		HSteamUser ISteamClient_CreateLocalUser(out int phSteamPipe, AccountType eAccountType);

		void ISteamClient_ReleaseUser(int hSteamPipe, int hUser);

		IntPtr ISteamClient_GetISteamUser(int hSteamUser, int hSteamPipe, string pchVersion);

		IntPtr ISteamClient_GetISteamGameServer(int hSteamUser, int hSteamPipe, string pchVersion);

		void ISteamClient_SetLocalIPBinding(uint unIP, ushort usPort);

		IntPtr ISteamClient_GetISteamFriends(int hSteamUser, int hSteamPipe, string pchVersion);

		IntPtr ISteamClient_GetISteamUtils(int hSteamPipe, string pchVersion);

		IntPtr ISteamClient_GetISteamMatchmaking(int hSteamUser, int hSteamPipe, string pchVersion);

		IntPtr ISteamClient_GetISteamMatchmakingServers(
			int hSteamUser,
			int hSteamPipe,
			string pchVersion);

		IntPtr ISteamClient_GetISteamGenericInterface(
			int hSteamUser,
			int hSteamPipe,
			string pchVersion);

		IntPtr ISteamClient_GetISteamUserStats(int hSteamUser, int hSteamPipe, string pchVersion);

		IntPtr ISteamClient_GetISteamGameServerStats(
			int hSteamuser,
			int hSteamPipe,
			string pchVersion);

		IntPtr ISteamClient_GetISteamApps(int hSteamUser, int hSteamPipe, string pchVersion);

		IntPtr ISteamClient_GetISteamNetworking(int hSteamUser, int hSteamPipe, string pchVersion);

		IntPtr ISteamClient_GetISteamRemoteStorage(int hSteamuser, int hSteamPipe, string pchVersion);

		IntPtr ISteamClient_GetISteamScreenshots(int hSteamuser, int hSteamPipe, string pchVersion);

		uint ISteamClient_GetIPCCallCount();

		void ISteamClient_SetWarningMessageHook(IntPtr pFunction);

		bool ISteamClient_BShutdownIfAllPipesClosed();

		IntPtr ISteamClient_GetISteamHTTP(int hSteamuser, int hSteamPipe, string pchVersion);

		IntPtr ISteamClient_GetISteamUnifiedMessages(
			int hSteamuser,
			int hSteamPipe,
			string pchVersion);

		IntPtr ISteamClient_GetISteamController(int hSteamUser, int hSteamPipe, string pchVersion);

		IntPtr ISteamClient_GetISteamUGC(int hSteamUser, int hSteamPipe, string pchVersion);

		IntPtr ISteamClient_GetISteamAppList(int hSteamUser, int hSteamPipe, string pchVersion);

		IntPtr ISteamClient_GetISteamMusic(int hSteamuser, int hSteamPipe, string pchVersion);

		IntPtr ISteamClient_GetISteamMusicRemote(int hSteamuser, int hSteamPipe, string pchVersion);

		IntPtr ISteamClient_GetISteamHTMLSurface(int hSteamuser, int hSteamPipe, string pchVersion);

		IntPtr ISteamClient_GetISteamInventory(int hSteamuser, int hSteamPipe, string pchVersion);

		IntPtr ISteamClient_GetISteamVideo(int hSteamuser, int hSteamPipe, string pchVersion);

		bool ISteamController_Init();

		bool ISteamController_Shutdown();

		void ISteamController_RunFrame();

		int ISteamController_GetConnectedControllers(IntPtr handlesOut);

		bool ISteamController_ShowBindingPanel(ulong controllerHandle);

		ControllerActionSetHandle_t ISteamController_GetActionSetHandle(string pszActionSetName);

		void ISteamController_ActivateActionSet(ulong controllerHandle, ulong actionSetHandle);

		ControllerActionSetHandle_t ISteamController_GetCurrentActionSet(ulong controllerHandle);

		ControllerDigitalActionHandle_t ISteamController_GetDigitalActionHandle(string pszActionName);

		ControllerDigitalActionData_t ISteamController_GetDigitalActionData(
			ulong controllerHandle,
			ulong digitalActionHandle);

		int ISteamController_GetDigitalActionOrigins(
			ulong controllerHandle,
			ulong actionSetHandle,
			ulong digitalActionHandle,
			out ControllerActionOrigin originsOut);

		ControllerAnalogActionHandle_t ISteamController_GetAnalogActionHandle(string pszActionName);

		ControllerAnalogActionData_t ISteamController_GetAnalogActionData(
			ulong controllerHandle,
			ulong analogActionHandle);

		int ISteamController_GetAnalogActionOrigins(
			ulong controllerHandle,
			ulong actionSetHandle,
			ulong analogActionHandle,
			out ControllerActionOrigin originsOut);

		void ISteamController_StopAnalogActionMomentum(ulong controllerHandle, ulong eAction);

		void ISteamController_TriggerHapticPulse(
			ulong controllerHandle,
			SteamControllerPad eTargetPad,
			ushort usDurationMicroSec);

		void ISteamController_TriggerRepeatedHapticPulse(
			ulong controllerHandle,
			SteamControllerPad eTargetPad,
			ushort usDurationMicroSec,
			ushort usOffMicroSec,
			ushort unRepeat,
			uint nFlags);

		void ISteamController_TriggerVibration(
			ulong controllerHandle,
			ushort usLeftSpeed,
			ushort usRightSpeed);

		void ISteamController_SetLEDColor(
			ulong controllerHandle,
			byte nColorR,
			byte nColorG,
			byte nColorB,
			uint nFlags);

		int ISteamController_GetGamepadIndexForController(ulong ulControllerHandle);

		ControllerHandle_t ISteamController_GetControllerForGamepadIndex(int nIndex);

		ControllerMotionData_t ISteamController_GetMotionData(ulong controllerHandle);

		bool ISteamController_ShowDigitalActionOrigins(
			ulong controllerHandle,
			ulong digitalActionHandle,
			float flScale,
			float flXPosition,
			float flYPosition);

		bool ISteamController_ShowAnalogActionOrigins(
			ulong controllerHandle,
			ulong analogActionHandle,
			float flScale,
			float flXPosition,
			float flYPosition);

		IntPtr ISteamController_GetStringForActionOrigin(ControllerActionOrigin eOrigin);

		IntPtr ISteamController_GetGlyphForActionOrigin(ControllerActionOrigin eOrigin);

		IntPtr ISteamFriends_GetPersonaName();

		SteamAPICall_t ISteamFriends_SetPersonaName(string pchPersonaName);

		PersonaState ISteamFriends_GetPersonaState();

		int ISteamFriends_GetFriendCount(int iFriendFlags);

		CSteamID ISteamFriends_GetFriendByIndex(int iFriend, int iFriendFlags);

		FriendRelationship ISteamFriends_GetFriendRelationship(ulong steamIDFriend);

		PersonaState ISteamFriends_GetFriendPersonaState(ulong steamIDFriend);

		IntPtr ISteamFriends_GetFriendPersonaName(ulong steamIDFriend);

		bool ISteamFriends_GetFriendGamePlayed(
			ulong steamIDFriend,
			ref FriendGameInfo_t pFriendGameInfo);

		IntPtr ISteamFriends_GetFriendPersonaNameHistory(ulong steamIDFriend, int iPersonaName);

		int ISteamFriends_GetFriendSteamLevel(ulong steamIDFriend);

		IntPtr ISteamFriends_GetPlayerNickname(ulong steamIDPlayer);

		int ISteamFriends_GetFriendsGroupCount();

		FriendsGroupID_t ISteamFriends_GetFriendsGroupIDByIndex(int iFG);

		IntPtr ISteamFriends_GetFriendsGroupName(short friendsGroupID);

		int ISteamFriends_GetFriendsGroupMembersCount(short friendsGroupID);

		void ISteamFriends_GetFriendsGroupMembersList(
			short friendsGroupID,
			IntPtr pOutSteamIDMembers,
			int nMembersCount);

		bool ISteamFriends_HasFriend(ulong steamIDFriend, int iFriendFlags);

		int ISteamFriends_GetClanCount();

		CSteamID ISteamFriends_GetClanByIndex(int iClan);

		IntPtr ISteamFriends_GetClanName(ulong steamIDClan);

		IntPtr ISteamFriends_GetClanTag(ulong steamIDClan);

		bool ISteamFriends_GetClanActivityCounts(
			ulong steamIDClan,
			out int pnOnline,
			out int pnInGame,
			out int pnChatting);

		SteamAPICall_t ISteamFriends_DownloadClanActivityCounts(
			IntPtr psteamIDClans,
			int cClansToRequest);

		int ISteamFriends_GetFriendCountFromSource(ulong steamIDSource);

		CSteamID ISteamFriends_GetFriendFromSourceByIndex(ulong steamIDSource, int iFriend);

		bool ISteamFriends_IsUserInSource(ulong steamIDUser, ulong steamIDSource);

		void ISteamFriends_SetInGameVoiceSpeaking(ulong steamIDUser, [MarshalAs(UnmanagedType.U1)] bool bSpeaking);

		void ISteamFriends_ActivateGameOverlay(string pchDialog);

		void ISteamFriends_ActivateGameOverlayToUser(string pchDialog, ulong steamID);

		void ISteamFriends_ActivateGameOverlayToWebPage(string pchURL);

		void ISteamFriends_ActivateGameOverlayToStore(uint nAppID, OverlayToStoreFlag eFlag);

		void ISteamFriends_SetPlayedWith(ulong steamIDUserPlayedWith);

		void ISteamFriends_ActivateGameOverlayInviteDialog(ulong steamIDLobby);

		int ISteamFriends_GetSmallFriendAvatar(ulong steamIDFriend);

		int ISteamFriends_GetMediumFriendAvatar(ulong steamIDFriend);

		int ISteamFriends_GetLargeFriendAvatar(ulong steamIDFriend);

		bool ISteamFriends_RequestUserInformation(ulong steamIDUser,
			[MarshalAs(UnmanagedType.U1)] bool bRequireNameOnly);

		SteamAPICall_t ISteamFriends_RequestClanOfficerList(ulong steamIDClan);

		CSteamID ISteamFriends_GetClanOwner(ulong steamIDClan);

		int ISteamFriends_GetClanOfficerCount(ulong steamIDClan);

		CSteamID ISteamFriends_GetClanOfficerByIndex(ulong steamIDClan, int iOfficer);

		uint ISteamFriends_GetUserRestrictions();

		bool ISteamFriends_SetRichPresence(string pchKey, string pchValue);

		void ISteamFriends_ClearRichPresence();

		IntPtr ISteamFriends_GetFriendRichPresence(ulong steamIDFriend, string pchKey);

		int ISteamFriends_GetFriendRichPresenceKeyCount(ulong steamIDFriend);

		IntPtr ISteamFriends_GetFriendRichPresenceKeyByIndex(ulong steamIDFriend, int iKey);

		void ISteamFriends_RequestFriendRichPresence(ulong steamIDFriend);

		bool ISteamFriends_InviteUserToGame(ulong steamIDFriend, string pchConnectString);

		int ISteamFriends_GetCoplayFriendCount();

		CSteamID ISteamFriends_GetCoplayFriend(int iCoplayFriend);

		int ISteamFriends_GetFriendCoplayTime(ulong steamIDFriend);

		AppId_t ISteamFriends_GetFriendCoplayGame(ulong steamIDFriend);

		SteamAPICall_t ISteamFriends_JoinClanChatRoom(ulong steamIDClan);

		bool ISteamFriends_LeaveClanChatRoom(ulong steamIDClan);

		int ISteamFriends_GetClanChatMemberCount(ulong steamIDClan);

		CSteamID ISteamFriends_GetChatMemberByIndex(ulong steamIDClan, int iUser);

		bool ISteamFriends_SendClanChatMessage(ulong steamIDClanChat, string pchText);

		int ISteamFriends_GetClanChatMessage(
			ulong steamIDClanChat,
			int iMessage,
			IntPtr prgchText,
			int cchTextMax,
			out ChatEntryType peChatEntryType,
			out ulong psteamidChatter);

		bool ISteamFriends_IsClanChatAdmin(ulong steamIDClanChat, ulong steamIDUser);

		bool ISteamFriends_IsClanChatWindowOpenInSteam(ulong steamIDClanChat);

		bool ISteamFriends_OpenClanChatWindowInSteam(ulong steamIDClanChat);

		bool ISteamFriends_CloseClanChatWindowInSteam(ulong steamIDClanChat);

		bool ISteamFriends_SetListenForFriendsMessages([MarshalAs(UnmanagedType.U1)] bool bInterceptEnabled);

		bool ISteamFriends_ReplyToFriendMessage(ulong steamIDFriend, string pchMsgToSend);

		int ISteamFriends_GetFriendMessage(
			ulong steamIDFriend,
			int iMessageID,
			IntPtr pvData,
			int cubData,
			out ChatEntryType peChatEntryType);

		SteamAPICall_t ISteamFriends_GetFollowerCount(ulong steamID);

		SteamAPICall_t ISteamFriends_IsFollowing(ulong steamID);

		SteamAPICall_t ISteamFriends_EnumerateFollowingList(uint unStartIndex);

		bool ISteamGameServer_InitGameServer(
			uint unIP,
			ushort usGamePort,
			ushort usQueryPort,
			uint unFlags,
			uint nGameAppId,
			string pchVersionString);

		void ISteamGameServer_SetProduct(string pszProduct);

		void ISteamGameServer_SetGameDescription(string pszGameDescription);

		void ISteamGameServer_SetModDir(string pszModDir);

		void ISteamGameServer_SetDedicatedServer([MarshalAs(UnmanagedType.U1)] bool bDedicated);

		void ISteamGameServer_LogOn(string pszToken);

		void ISteamGameServer_LogOnAnonymous();

		void ISteamGameServer_LogOff();

		bool ISteamGameServer_BLoggedOn();

		bool ISteamGameServer_BSecure();

		CSteamID ISteamGameServer_GetSteamID();

		bool ISteamGameServer_WasRestartRequested();

		void ISteamGameServer_SetMaxPlayerCount(int cPlayersMax);

		void ISteamGameServer_SetBotPlayerCount(int cBotplayers);

		void ISteamGameServer_SetServerName(string pszServerName);

		void ISteamGameServer_SetMapName(string pszMapName);

		void ISteamGameServer_SetPasswordProtected([MarshalAs(UnmanagedType.U1)] bool bPasswordProtected);

		void ISteamGameServer_SetSpectatorPort(ushort unSpectatorPort);

		void ISteamGameServer_SetSpectatorServerName(string pszSpectatorServerName);

		void ISteamGameServer_ClearAllKeyValues();

		void ISteamGameServer_SetKeyValue(string pKey, string pValue);

		void ISteamGameServer_SetGameTags(string pchGameTags);

		void ISteamGameServer_SetGameData(string pchGameData);

		void ISteamGameServer_SetRegion(string pszRegion);

		bool ISteamGameServer_SendUserConnectAndAuthenticate(
			uint unIPClient,
			IntPtr pvAuthBlob,
			uint cubAuthBlobSize,
			out ulong pSteamIDUser);

		CSteamID ISteamGameServer_CreateUnauthenticatedUserConnection();

		void ISteamGameServer_SendUserDisconnect(ulong steamIDUser);

		bool ISteamGameServer_BUpdateUserData(ulong steamIDUser, string pchPlayerName, uint uScore);

		HAuthTicket ISteamGameServer_GetAuthSessionTicket(
			IntPtr pTicket,
			int cbMaxTicket,
			out uint pcbTicket);

		BeginAuthSessionResult ISteamGameServer_BeginAuthSession(
			IntPtr pAuthTicket,
			int cbAuthTicket,
			ulong steamID);

		void ISteamGameServer_EndAuthSession(ulong steamID);

		void ISteamGameServer_CancelAuthTicket(uint hAuthTicket);

		UserHasLicenseForAppResult ISteamGameServer_UserHasLicenseForApp(ulong steamID, uint appID);

		bool ISteamGameServer_RequestUserGroupStatus(ulong steamIDUser, ulong steamIDGroup);

		void ISteamGameServer_GetGameplayStats();

		SteamAPICall_t ISteamGameServer_GetServerReputation();

		uint ISteamGameServer_GetPublicIP();

		bool ISteamGameServer_HandleIncomingPacket(
			IntPtr pData,
			int cbData,
			uint srcIP,
			ushort srcPort);

		int ISteamGameServer_GetNextOutgoingPacket(
			IntPtr pOut,
			int cbMaxOut,
			out uint pNetAdr,
			out ushort pPort);

		void ISteamGameServer_EnableHeartbeats([MarshalAs(UnmanagedType.U1)] bool bActive);

		void ISteamGameServer_SetHeartbeatInterval(int iHeartbeatInterval);

		void ISteamGameServer_ForceHeartbeat();

		SteamAPICall_t ISteamGameServer_AssociateWithClan(ulong steamIDClan);

		SteamAPICall_t ISteamGameServer_ComputeNewPlayerCompatibility(ulong steamIDNewPlayer);

		SteamAPICall_t ISteamGameServerStats_RequestUserStats(ulong steamIDUser);

		bool ISteamGameServerStats_GetUserStat(ulong steamIDUser, string pchName, out int pData);

		bool ISteamGameServerStats_GetUserStat0(ulong steamIDUser, string pchName, out float pData);

		bool ISteamGameServerStats_GetUserAchievement(
			ulong steamIDUser,
			string pchName,
			[MarshalAs(UnmanagedType.U1)] ref bool pbAchieved);

		bool ISteamGameServerStats_SetUserStat(ulong steamIDUser, string pchName, int nData);

		bool ISteamGameServerStats_SetUserStat0(ulong steamIDUser, string pchName, float fData);

		bool ISteamGameServerStats_UpdateUserAvgRateStat(
			ulong steamIDUser,
			string pchName,
			float flCountThisSession,
			double dSessionLength);

		bool ISteamGameServerStats_SetUserAchievement(ulong steamIDUser, string pchName);

		bool ISteamGameServerStats_ClearUserAchievement(ulong steamIDUser, string pchName);

		SteamAPICall_t ISteamGameServerStats_StoreUserStats(ulong steamIDUser);

		void ISteamHTMLSurface_DestructISteamHTMLSurface();

		bool ISteamHTMLSurface_Init();

		bool ISteamHTMLSurface_Shutdown();

		SteamAPICall_t ISteamHTMLSurface_CreateBrowser(string pchUserAgent, string pchUserCSS);

		void ISteamHTMLSurface_RemoveBrowser(uint unBrowserHandle);

		void ISteamHTMLSurface_LoadURL(uint unBrowserHandle, string pchURL, string pchPostData);

		void ISteamHTMLSurface_SetSize(uint unBrowserHandle, uint unWidth, uint unHeight);

		void ISteamHTMLSurface_StopLoad(uint unBrowserHandle);

		void ISteamHTMLSurface_Reload(uint unBrowserHandle);

		void ISteamHTMLSurface_GoBack(uint unBrowserHandle);

		void ISteamHTMLSurface_GoForward(uint unBrowserHandle);

		void ISteamHTMLSurface_AddHeader(uint unBrowserHandle, string pchKey, string pchValue);

		void ISteamHTMLSurface_ExecuteJavascript(uint unBrowserHandle, string pchScript);

		void ISteamHTMLSurface_MouseUp(uint unBrowserHandle, HTMLMouseButton eMouseButton);

		void ISteamHTMLSurface_MouseDown(uint unBrowserHandle, HTMLMouseButton eMouseButton);

		void ISteamHTMLSurface_MouseDoubleClick(uint unBrowserHandle, HTMLMouseButton eMouseButton);

		void ISteamHTMLSurface_MouseMove(uint unBrowserHandle, int x, int y);

		void ISteamHTMLSurface_MouseWheel(uint unBrowserHandle, int nDelta);

		void ISteamHTMLSurface_KeyDown(
			uint unBrowserHandle,
			uint nNativeKeyCode,
			HTMLKeyModifiers eHTMLKeyModifiers);

		void ISteamHTMLSurface_KeyUp(
			uint unBrowserHandle,
			uint nNativeKeyCode,
			HTMLKeyModifiers eHTMLKeyModifiers);

		void ISteamHTMLSurface_KeyChar(
			uint unBrowserHandle,
			uint cUnicodeChar,
			HTMLKeyModifiers eHTMLKeyModifiers);

		void ISteamHTMLSurface_SetHorizontalScroll(uint unBrowserHandle, uint nAbsolutePixelScroll);

		void ISteamHTMLSurface_SetVerticalScroll(uint unBrowserHandle, uint nAbsolutePixelScroll);

		void ISteamHTMLSurface_SetKeyFocus(uint unBrowserHandle, [MarshalAs(UnmanagedType.U1)] bool bHasKeyFocus);

		void ISteamHTMLSurface_ViewSource(uint unBrowserHandle);

		void ISteamHTMLSurface_CopyToClipboard(uint unBrowserHandle);

		void ISteamHTMLSurface_PasteFromClipboard(uint unBrowserHandle);

		void ISteamHTMLSurface_Find(
			uint unBrowserHandle,
			string pchSearchStr,
			[MarshalAs(UnmanagedType.U1)] bool bCurrentlyInFind,
			[MarshalAs(UnmanagedType.U1)] bool bReverse);

		void ISteamHTMLSurface_StopFind(uint unBrowserHandle);

		void ISteamHTMLSurface_GetLinkAtPosition(uint unBrowserHandle, int x, int y);

		void ISteamHTMLSurface_SetCookie(
			string pchHostname,
			string pchKey,
			string pchValue,
			string pchPath,
			uint nExpires,
			[MarshalAs(UnmanagedType.U1)] bool bSecure,
			[MarshalAs(UnmanagedType.U1)] bool bHTTPOnly);

		void ISteamHTMLSurface_SetPageScaleFactor(
			uint unBrowserHandle,
			float flZoom,
			int nPointX,
			int nPointY);

		void ISteamHTMLSurface_SetBackgroundMode(uint unBrowserHandle,
			[MarshalAs(UnmanagedType.U1)] bool bBackgroundMode);

		void ISteamHTMLSurface_AllowStartRequest(uint unBrowserHandle, [MarshalAs(UnmanagedType.U1)] bool bAllowed);

		void ISteamHTMLSurface_JSDialogResponse(uint unBrowserHandle, [MarshalAs(UnmanagedType.U1)] bool bResult);

		HTTPRequestHandle ISteamHTTP_CreateHTTPRequest(
			HTTPMethod eHTTPRequestMethod,
			string pchAbsoluteURL);

		bool ISteamHTTP_SetHTTPRequestContextValue(uint hRequest, ulong ulContextValue);

		bool ISteamHTTP_SetHTTPRequestNetworkActivityTimeout(uint hRequest, uint unTimeoutSeconds);

		bool ISteamHTTP_SetHTTPRequestHeaderValue(
			uint hRequest,
			string pchHeaderName,
			string pchHeaderValue);

		bool ISteamHTTP_SetHTTPRequestGetOrPostParameter(
			uint hRequest,
			string pchParamName,
			string pchParamValue);

		bool ISteamHTTP_SendHTTPRequest(uint hRequest, ref ulong pCallHandle);

		bool ISteamHTTP_SendHTTPRequestAndStreamResponse(uint hRequest, ref ulong pCallHandle);

		bool ISteamHTTP_DeferHTTPRequest(uint hRequest);

		bool ISteamHTTP_PrioritizeHTTPRequest(uint hRequest);

		bool ISteamHTTP_GetHTTPResponseHeaderSize(
			uint hRequest,
			string pchHeaderName,
			out uint unResponseHeaderSize);

		bool ISteamHTTP_GetHTTPResponseHeaderValue(
			uint hRequest,
			string pchHeaderName,
			out byte pHeaderValueBuffer,
			uint unBufferSize);

		bool ISteamHTTP_GetHTTPResponseBodySize(uint hRequest, out uint unBodySize);

		bool ISteamHTTP_GetHTTPResponseBodyData(
			uint hRequest,
			out byte pBodyDataBuffer,
			uint unBufferSize);

		bool ISteamHTTP_GetHTTPStreamingResponseBodyData(
			uint hRequest,
			uint cOffset,
			out byte pBodyDataBuffer,
			uint unBufferSize);

		bool ISteamHTTP_ReleaseHTTPRequest(uint hRequest);

		bool ISteamHTTP_GetHTTPDownloadProgressPct(uint hRequest, out float pflPercentOut);

		bool ISteamHTTP_SetHTTPRequestRawPostBody(
			uint hRequest,
			string pchContentType,
			out byte pubBody,
			uint unBodyLen);

		HTTPCookieContainerHandle ISteamHTTP_CreateCookieContainer(
			[MarshalAs(UnmanagedType.U1)] bool bAllowResponsesToModify);

		bool ISteamHTTP_ReleaseCookieContainer(uint hCookieContainer);

		bool ISteamHTTP_SetCookie(
			uint hCookieContainer,
			string pchHost,
			string pchUrl,
			string pchCookie);

		bool ISteamHTTP_SetHTTPRequestCookieContainer(uint hRequest, uint hCookieContainer);

		bool ISteamHTTP_SetHTTPRequestUserAgentInfo(uint hRequest, string pchUserAgentInfo);

		bool ISteamHTTP_SetHTTPRequestRequiresVerifiedCertificate(
			uint hRequest,
			[MarshalAs(UnmanagedType.U1)] bool bRequireVerifiedCertificate);

		bool ISteamHTTP_SetHTTPRequestAbsoluteTimeoutMS(uint hRequest, uint unMilliseconds);

		bool ISteamHTTP_GetHTTPRequestWasTimedOut(uint hRequest, [MarshalAs(UnmanagedType.U1)] ref bool pbWasTimedOut);

		Result ISteamInventory_GetResultStatus(int resultHandle);

		bool ISteamInventory_GetResultItems(
			int resultHandle,
			IntPtr pOutItemsArray,
			out uint punOutItemsArraySize);

		bool ISteamInventory_GetResultItemProperty(
			int resultHandle,
			uint unItemIndex,
			string pchPropertyName,
			StringBuilder pchValueBuffer,
			out uint punValueBufferSizeOut);

		uint ISteamInventory_GetResultTimestamp(int resultHandle);

		bool ISteamInventory_CheckResultSteamID(int resultHandle, ulong steamIDExpected);

		void ISteamInventory_DestroyResult(int resultHandle);

		bool ISteamInventory_GetAllItems(ref int pResultHandle);

		bool ISteamInventory_GetItemsByID(
			ref int pResultHandle,
			ulong[] pInstanceIDs,
			uint unCountInstanceIDs);

		bool ISteamInventory_SerializeResult(
			int resultHandle,
			IntPtr pOutBuffer,
			out uint punOutBufferSize);

		bool ISteamInventory_DeserializeResult(
			ref int pOutResultHandle,
			IntPtr pBuffer,
			uint unBufferSize,
			[MarshalAs(UnmanagedType.U1)] bool bRESERVED_MUST_BE_FALSE);

		bool ISteamInventory_GenerateItems(
			ref int pResultHandle,
			int[] pArrayItemDefs,
			uint[] punArrayQuantity,
			uint unArrayLength);

		bool ISteamInventory_GrantPromoItems(ref int pResultHandle);

		bool ISteamInventory_AddPromoItem(ref int pResultHandle, int itemDef);

		bool ISteamInventory_AddPromoItems(
			ref int pResultHandle,
			int[] pArrayItemDefs,
			uint unArrayLength);

		bool ISteamInventory_ConsumeItem(ref int pResultHandle, ulong itemConsume, uint unQuantity);

		bool ISteamInventory_ExchangeItems(
			ref int pResultHandle,
			int[] pArrayGenerate,
			uint[] punArrayGenerateQuantity,
			uint unArrayGenerateLength,
			ulong[] pArrayDestroy,
			uint[] punArrayDestroyQuantity,
			uint unArrayDestroyLength);

		bool ISteamInventory_TransferItemQuantity(
			ref int pResultHandle,
			ulong itemIdSource,
			uint unQuantity,
			ulong itemIdDest);

		void ISteamInventory_SendItemDropHeartbeat();

		bool ISteamInventory_TriggerItemDrop(ref int pResultHandle, int dropListDefinition);

		bool ISteamInventory_TradeItems(
			ref int pResultHandle,
			ulong steamIDTradePartner,
			ulong[] pArrayGive,
			uint[] pArrayGiveQuantity,
			uint nArrayGiveLength,
			ulong[] pArrayGet,
			uint[] pArrayGetQuantity,
			uint nArrayGetLength);

		bool ISteamInventory_LoadItemDefinitions();

		bool ISteamInventory_GetItemDefinitionIDs(IntPtr pItemDefIDs, out uint punItemDefIDsArraySize);

		bool ISteamInventory_GetItemDefinitionProperty(
			int iDefinition,
			string pchPropertyName,
			StringBuilder pchValueBuffer,
			out uint punValueBufferSizeOut);

		SteamAPICall_t ISteamInventory_RequestEligiblePromoItemDefinitionsIDs(ulong steamID);

		bool ISteamInventory_GetEligiblePromoItemDefinitionIDs(
			ulong steamID,
			IntPtr pItemDefIDs,
			out uint punItemDefIDsArraySize);

		int ISteamMatchmaking_GetFavoriteGameCount();

		bool ISteamMatchmaking_GetFavoriteGame(
			int iGame,
			ref uint pnAppID,
			out uint pnIP,
			out ushort pnConnPort,
			out ushort pnQueryPort,
			out uint punFlags,
			out uint pRTime32LastPlayedOnServer);

		int ISteamMatchmaking_AddFavoriteGame(
			uint nAppID,
			uint nIP,
			ushort nConnPort,
			ushort nQueryPort,
			uint unFlags,
			uint rTime32LastPlayedOnServer);

		bool ISteamMatchmaking_RemoveFavoriteGame(
			uint nAppID,
			uint nIP,
			ushort nConnPort,
			ushort nQueryPort,
			uint unFlags);

		SteamAPICall_t ISteamMatchmaking_RequestLobbyList();

		void ISteamMatchmaking_AddRequestLobbyListStringFilter(
			string pchKeyToMatch,
			string pchValueToMatch,
			LobbyComparison eComparisonType);

		void ISteamMatchmaking_AddRequestLobbyListNumericalFilter(
			string pchKeyToMatch,
			int nValueToMatch,
			LobbyComparison eComparisonType);

		void ISteamMatchmaking_AddRequestLobbyListNearValueFilter(
			string pchKeyToMatch,
			int nValueToBeCloseTo);

		void ISteamMatchmaking_AddRequestLobbyListFilterSlotsAvailable(int nSlotsAvailable);

		void ISteamMatchmaking_AddRequestLobbyListDistanceFilter(
			LobbyDistanceFilter eLobbyDistanceFilter);

		void ISteamMatchmaking_AddRequestLobbyListResultCountFilter(int cMaxResults);

		void ISteamMatchmaking_AddRequestLobbyListCompatibleMembersFilter(ulong steamIDLobby);

		CSteamID ISteamMatchmaking_GetLobbyByIndex(int iLobby);

		SteamAPICall_t ISteamMatchmaking_CreateLobby(LobbyType eLobbyType, int cMaxMembers);

		SteamAPICall_t ISteamMatchmaking_JoinLobby(ulong steamIDLobby);

		void ISteamMatchmaking_LeaveLobby(ulong steamIDLobby);

		bool ISteamMatchmaking_InviteUserToLobby(ulong steamIDLobby, ulong steamIDInvitee);

		int ISteamMatchmaking_GetNumLobbyMembers(ulong steamIDLobby);

		CSteamID ISteamMatchmaking_GetLobbyMemberByIndex(ulong steamIDLobby, int iMember);

		IntPtr ISteamMatchmaking_GetLobbyData(ulong steamIDLobby, string pchKey);

		bool ISteamMatchmaking_SetLobbyData(ulong steamIDLobby, string pchKey, string pchValue);

		int ISteamMatchmaking_GetLobbyDataCount(ulong steamIDLobby);

		bool ISteamMatchmaking_GetLobbyDataByIndex(
			ulong steamIDLobby,
			int iLobbyData,
			StringBuilder pchKey,
			int cchKeyBufferSize,
			StringBuilder pchValue,
			int cchValueBufferSize);

		bool ISteamMatchmaking_DeleteLobbyData(ulong steamIDLobby, string pchKey);

		IntPtr ISteamMatchmaking_GetLobbyMemberData(
			ulong steamIDLobby,
			ulong steamIDUser,
			string pchKey);

		void ISteamMatchmaking_SetLobbyMemberData(ulong steamIDLobby, string pchKey, string pchValue);

		bool ISteamMatchmaking_SendLobbyChatMsg(ulong steamIDLobby, IntPtr pvMsgBody, int cubMsgBody);

		int ISteamMatchmaking_GetLobbyChatEntry(
			ulong steamIDLobby,
			int iChatID,
			out ulong pSteamIDUser,
			IntPtr pvData,
			int cubData,
			out ChatEntryType peChatEntryType);

		bool ISteamMatchmaking_RequestLobbyData(ulong steamIDLobby);

		void ISteamMatchmaking_SetLobbyGameServer(
			ulong steamIDLobby,
			uint unGameServerIP,
			ushort unGameServerPort,
			ulong steamIDGameServer);

		bool ISteamMatchmaking_GetLobbyGameServer(
			ulong steamIDLobby,
			out uint punGameServerIP,
			out ushort punGameServerPort,
			out ulong psteamIDGameServer);

		bool ISteamMatchmaking_SetLobbyMemberLimit(ulong steamIDLobby, int cMaxMembers);

		int ISteamMatchmaking_GetLobbyMemberLimit(ulong steamIDLobby);

		bool ISteamMatchmaking_SetLobbyType(ulong steamIDLobby, LobbyType eLobbyType);

		bool ISteamMatchmaking_SetLobbyJoinable(ulong steamIDLobby, [MarshalAs(UnmanagedType.U1)] bool bLobbyJoinable);

		CSteamID ISteamMatchmaking_GetLobbyOwner(ulong steamIDLobby);

		bool ISteamMatchmaking_SetLobbyOwner(ulong steamIDLobby, ulong steamIDNewOwner);

		bool ISteamMatchmaking_SetLinkedLobby(ulong steamIDLobby, ulong steamIDLobbyDependent);

		HServerListRequest ISteamMatchmakingServers_RequestInternetServerList(
			uint iApp,
			IntPtr ppchFilters,
			uint nFilters,
			IntPtr pRequestServersResponse);

		HServerListRequest ISteamMatchmakingServers_RequestLANServerList(
			uint iApp,
			IntPtr pRequestServersResponse);

		HServerListRequest ISteamMatchmakingServers_RequestFriendsServerList(
			uint iApp,
			IntPtr ppchFilters,
			uint nFilters,
			IntPtr pRequestServersResponse);

		HServerListRequest ISteamMatchmakingServers_RequestFavoritesServerList(
			uint iApp,
			IntPtr ppchFilters,
			uint nFilters,
			IntPtr pRequestServersResponse);

		HServerListRequest ISteamMatchmakingServers_RequestHistoryServerList(
			uint iApp,
			IntPtr ppchFilters,
			uint nFilters,
			IntPtr pRequestServersResponse);

		HServerListRequest ISteamMatchmakingServers_RequestSpectatorServerList(
			uint iApp,
			IntPtr ppchFilters,
			uint nFilters,
			IntPtr pRequestServersResponse);

		void ISteamMatchmakingServers_ReleaseRequest(IntPtr hServerListRequest);

		IntPtr ISteamMatchmakingServers_GetServerDetails(IntPtr hRequest, int iServer);

		void ISteamMatchmakingServers_CancelQuery(IntPtr hRequest);

		void ISteamMatchmakingServers_RefreshQuery(IntPtr hRequest);

		bool ISteamMatchmakingServers_IsRefreshing(IntPtr hRequest);

		int ISteamMatchmakingServers_GetServerCount(IntPtr hRequest);

		void ISteamMatchmakingServers_RefreshServer(IntPtr hRequest, int iServer);

		HServerQuery ISteamMatchmakingServers_PingServer(
			uint unIP,
			ushort usPort,
			IntPtr pRequestServersResponse);

		HServerQuery ISteamMatchmakingServers_PlayerDetails(
			uint unIP,
			ushort usPort,
			IntPtr pRequestServersResponse);

		HServerQuery ISteamMatchmakingServers_ServerRules(
			uint unIP,
			ushort usPort,
			IntPtr pRequestServersResponse);

		void ISteamMatchmakingServers_CancelServerQuery(int hServerQuery);

		bool ISteamMusic_BIsEnabled();

		bool ISteamMusic_BIsPlaying();

		AudioPlayback_Status ISteamMusic_GetPlaybackStatus();

		void ISteamMusic_Play();

		void ISteamMusic_Pause();

		void ISteamMusic_PlayPrevious();

		void ISteamMusic_PlayNext();

		void ISteamMusic_SetVolume(float flVolume);

		float ISteamMusic_GetVolume();

		bool ISteamMusicRemote_RegisterSteamMusicRemote(string pchName);

		bool ISteamMusicRemote_DeregisterSteamMusicRemote();

		bool ISteamMusicRemote_BIsCurrentMusicRemote();

		bool ISteamMusicRemote_BActivationSuccess([MarshalAs(UnmanagedType.U1)] bool bValue);

		bool ISteamMusicRemote_SetDisplayName(string pchDisplayName);

		bool ISteamMusicRemote_SetPNGIcon_64x64(IntPtr pvBuffer, uint cbBufferLength);

		bool ISteamMusicRemote_EnablePlayPrevious([MarshalAs(UnmanagedType.U1)] bool bValue);

		bool ISteamMusicRemote_EnablePlayNext([MarshalAs(UnmanagedType.U1)] bool bValue);

		bool ISteamMusicRemote_EnableShuffled([MarshalAs(UnmanagedType.U1)] bool bValue);

		bool ISteamMusicRemote_EnableLooped([MarshalAs(UnmanagedType.U1)] bool bValue);

		bool ISteamMusicRemote_EnableQueue([MarshalAs(UnmanagedType.U1)] bool bValue);

		bool ISteamMusicRemote_EnablePlaylists([MarshalAs(UnmanagedType.U1)] bool bValue);

		bool ISteamMusicRemote_UpdatePlaybackStatus(AudioPlayback_Status nStatus);

		bool ISteamMusicRemote_UpdateShuffled([MarshalAs(UnmanagedType.U1)] bool bValue);

		bool ISteamMusicRemote_UpdateLooped([MarshalAs(UnmanagedType.U1)] bool bValue);

		bool ISteamMusicRemote_UpdateVolume(float flValue);

		bool ISteamMusicRemote_CurrentEntryWillChange();

		bool ISteamMusicRemote_CurrentEntryIsAvailable([MarshalAs(UnmanagedType.U1)] bool bAvailable);

		bool ISteamMusicRemote_UpdateCurrentEntryText(string pchText);

		bool ISteamMusicRemote_UpdateCurrentEntryElapsedSeconds(int nValue);

		bool ISteamMusicRemote_UpdateCurrentEntryCoverArt(IntPtr pvBuffer, uint cbBufferLength);

		bool ISteamMusicRemote_CurrentEntryDidChange();

		bool ISteamMusicRemote_QueueWillChange();

		bool ISteamMusicRemote_ResetQueueEntries();

		bool ISteamMusicRemote_SetQueueEntry(int nID, int nPosition, string pchEntryText);

		bool ISteamMusicRemote_SetCurrentQueueEntry(int nID);

		bool ISteamMusicRemote_QueueDidChange();

		bool ISteamMusicRemote_PlaylistWillChange();

		bool ISteamMusicRemote_ResetPlaylistEntries();

		bool ISteamMusicRemote_SetPlaylistEntry(int nID, int nPosition, string pchEntryText);

		bool ISteamMusicRemote_SetCurrentPlaylistEntry(int nID);

		bool ISteamMusicRemote_PlaylistDidChange();

		bool ISteamNetworking_SendP2PPacket(
			ulong steamIDRemote,
			IntPtr pubData,
			uint cubData,
			P2PSend eP2PSendType,
			int nChannel);

		bool ISteamNetworking_IsP2PPacketAvailable(out uint pcubMsgSize, int nChannel);

		bool ISteamNetworking_ReadP2PPacket(
			IntPtr pubDest,
			uint cubDest,
			out uint pcubMsgSize,
			out ulong psteamIDRemote,
			int nChannel);

		bool ISteamNetworking_AcceptP2PSessionWithUser(ulong steamIDRemote);

		bool ISteamNetworking_CloseP2PSessionWithUser(ulong steamIDRemote);

		bool ISteamNetworking_CloseP2PChannelWithUser(ulong steamIDRemote, int nChannel);

		bool ISteamNetworking_GetP2PSessionState(
			ulong steamIDRemote,
			ref P2PSessionState_t pConnectionState);

		bool ISteamNetworking_AllowP2PPacketRelay([MarshalAs(UnmanagedType.U1)] bool bAllow);

		SNetListenSocket_t ISteamNetworking_CreateListenSocket(
			int nVirtualP2PPort,
			uint nIP,
			ushort nPort,
			[MarshalAs(UnmanagedType.U1)] bool bAllowUseOfPacketRelay);

		SNetSocket_t ISteamNetworking_CreateP2PConnectionSocket(
			ulong steamIDTarget,
			int nVirtualPort,
			int nTimeoutSec,
			[MarshalAs(UnmanagedType.U1)] bool bAllowUseOfPacketRelay);

		SNetSocket_t ISteamNetworking_CreateConnectionSocket(uint nIP, ushort nPort, int nTimeoutSec);

		bool ISteamNetworking_DestroySocket(uint hSocket, [MarshalAs(UnmanagedType.U1)] bool bNotifyRemoteEnd);

		bool ISteamNetworking_DestroyListenSocket(uint hSocket, [MarshalAs(UnmanagedType.U1)] bool bNotifyRemoteEnd);

		bool ISteamNetworking_SendDataOnSocket(
			uint hSocket,
			IntPtr pubData,
			uint cubData,
			[MarshalAs(UnmanagedType.U1)] bool bReliable);

		bool ISteamNetworking_IsDataAvailableOnSocket(uint hSocket, out uint pcubMsgSize);

		bool ISteamNetworking_RetrieveDataFromSocket(
			uint hSocket,
			IntPtr pubDest,
			uint cubDest,
			out uint pcubMsgSize);

		bool ISteamNetworking_IsDataAvailable(
			uint hListenSocket,
			out uint pcubMsgSize,
			ref uint phSocket);

		bool ISteamNetworking_RetrieveData(
			uint hListenSocket,
			IntPtr pubDest,
			uint cubDest,
			out uint pcubMsgSize,
			ref uint phSocket);

		bool ISteamNetworking_GetSocketInfo(
			uint hSocket,
			out ulong pSteamIDRemote,
			IntPtr peSocketStatus,
			out uint punIPRemote,
			out ushort punPortRemote);

		bool ISteamNetworking_GetListenSocketInfo(
			uint hListenSocket,
			out uint pnIP,
			out ushort pnPort);

		SNetSocketConnectionType ISteamNetworking_GetSocketConnectionType(uint hSocket);

		int ISteamNetworking_GetMaxPacketSize(uint hSocket);

		bool ISteamRemoteStorage_FileWrite(string pchFile, IntPtr pvData, int cubData);

		int ISteamRemoteStorage_FileRead(string pchFile, IntPtr pvData, int cubDataToRead);

		SteamAPICall_t ISteamRemoteStorage_FileWriteAsync(
			string pchFile,
			IntPtr pvData,
			uint cubData);

		SteamAPICall_t ISteamRemoteStorage_FileReadAsync(
			string pchFile,
			uint nOffset,
			uint cubToRead);

		bool ISteamRemoteStorage_FileReadAsyncComplete(
			ulong hReadCall,
			IntPtr pvBuffer,
			uint cubToRead);

		bool ISteamRemoteStorage_FileForget(string pchFile);

		bool ISteamRemoteStorage_FileDelete(string pchFile);

		SteamAPICall_t ISteamRemoteStorage_FileShare(string pchFile);

		bool ISteamRemoteStorage_SetSyncPlatforms(
			string pchFile,
			RemoteStoragePlatform eRemoteStoragePlatform);

		UGCFileWriteStreamHandle_t ISteamRemoteStorage_FileWriteStreamOpen(string pchFile);

		bool ISteamRemoteStorage_FileWriteStreamWriteChunk(
			ulong writeHandle,
			IntPtr pvData,
			int cubData);

		bool ISteamRemoteStorage_FileWriteStreamClose(ulong writeHandle);

		bool ISteamRemoteStorage_FileWriteStreamCancel(ulong writeHandle);

		bool ISteamRemoteStorage_FileExists(string pchFile);

		bool ISteamRemoteStorage_FilePersisted(string pchFile);

		int ISteamRemoteStorage_GetFileSize(string pchFile);

		long ISteamRemoteStorage_GetFileTimestamp(string pchFile);

		RemoteStoragePlatform ISteamRemoteStorage_GetSyncPlatforms(string pchFile);

		int ISteamRemoteStorage_GetFileCount();

		IntPtr ISteamRemoteStorage_GetFileNameAndSize(int iFile, out int pnFileSizeInBytes);

		bool ISteamRemoteStorage_GetQuota(out ulong pnTotalBytes, out ulong puAvailableBytes);

		bool ISteamRemoteStorage_IsCloudEnabledForAccount();

		bool ISteamRemoteStorage_IsCloudEnabledForApp();

		void ISteamRemoteStorage_SetCloudEnabledForApp([MarshalAs(UnmanagedType.U1)] bool bEnabled);

		SteamAPICall_t ISteamRemoteStorage_UGCDownload(ulong hContent, uint unPriority);

		bool ISteamRemoteStorage_GetUGCDownloadProgress(
			ulong hContent,
			out int pnBytesDownloaded,
			out int pnBytesExpected);

		bool ISteamRemoteStorage_GetUGCDetails(
			ulong hContent,
			ref uint pnAppID,
			StringBuilder ppchName,
			out int pnFileSizeInBytes,
			out ulong pSteamIDOwner);

		int ISteamRemoteStorage_UGCRead(
			ulong hContent,
			IntPtr pvData,
			int cubDataToRead,
			uint cOffset,
			UGCReadAction eAction);

		int ISteamRemoteStorage_GetCachedUGCCount();

		UGCHandle_t ISteamRemoteStorage_GetCachedUGCHandle(int iCachedContent);

		SteamAPICall_t ISteamRemoteStorage_PublishWorkshopFile(
			string pchFile,
			string pchPreviewFile,
			uint nConsumerAppId,
			string pchTitle,
			string pchDescription,
			RemoteStoragePublishedFileVisibility eVisibility,
			ref SteamParamStringArray_t pTags,
			WorkshopFileType eWorkshopFileType);

		PublishedFileUpdateHandle_t ISteamRemoteStorage_CreatePublishedFileUpdateRequest(
			ulong unPublishedFileId);

		bool ISteamRemoteStorage_UpdatePublishedFileFile(ulong updateHandle, string pchFile);

		bool ISteamRemoteStorage_UpdatePublishedFilePreviewFile(
			ulong updateHandle,
			string pchPreviewFile);

		bool ISteamRemoteStorage_UpdatePublishedFileTitle(ulong updateHandle, string pchTitle);

		bool ISteamRemoteStorage_UpdatePublishedFileDescription(
			ulong updateHandle,
			string pchDescription);

		bool ISteamRemoteStorage_UpdatePublishedFileVisibility(
			ulong updateHandle,
			RemoteStoragePublishedFileVisibility eVisibility);

		bool ISteamRemoteStorage_UpdatePublishedFileTags(
			ulong updateHandle,
			ref SteamParamStringArray_t pTags);

		SteamAPICall_t ISteamRemoteStorage_CommitPublishedFileUpdate(ulong updateHandle);

		SteamAPICall_t ISteamRemoteStorage_GetPublishedFileDetails(
			ulong unPublishedFileId,
			uint unMaxSecondsOld);

		SteamAPICall_t ISteamRemoteStorage_DeletePublishedFile(ulong unPublishedFileId);

		SteamAPICall_t ISteamRemoteStorage_EnumerateUserPublishedFiles(uint unStartIndex);

		SteamAPICall_t ISteamRemoteStorage_SubscribePublishedFile(ulong unPublishedFileId);

		SteamAPICall_t ISteamRemoteStorage_EnumerateUserSubscribedFiles(uint unStartIndex);

		SteamAPICall_t ISteamRemoteStorage_UnsubscribePublishedFile(ulong unPublishedFileId);

		bool ISteamRemoteStorage_UpdatePublishedFileSetChangeDescription(
			ulong updateHandle,
			string pchChangeDescription);

		SteamAPICall_t ISteamRemoteStorage_GetPublishedItemVoteDetails(ulong unPublishedFileId);

		SteamAPICall_t ISteamRemoteStorage_UpdateUserPublishedItemVote(
			ulong unPublishedFileId,
			[MarshalAs(UnmanagedType.U1)] bool bVoteUp);

		SteamAPICall_t ISteamRemoteStorage_GetUserPublishedItemVoteDetails(ulong unPublishedFileId);

		SteamAPICall_t ISteamRemoteStorage_EnumerateUserSharedWorkshopFiles(
			ulong steamId,
			uint unStartIndex,
			ref SteamParamStringArray_t pRequiredTags,
			ref SteamParamStringArray_t pExcludedTags);

		SteamAPICall_t ISteamRemoteStorage_PublishVideo(
			WorkshopVideoProvider eVideoProvider,
			string pchVideoAccount,
			string pchVideoIdentifier,
			string pchPreviewFile,
			uint nConsumerAppId,
			string pchTitle,
			string pchDescription,
			RemoteStoragePublishedFileVisibility eVisibility,
			ref SteamParamStringArray_t pTags);

		SteamAPICall_t ISteamRemoteStorage_SetUserPublishedFileAction(
			ulong unPublishedFileId,
			WorkshopFileAction eAction);

		SteamAPICall_t ISteamRemoteStorage_EnumeratePublishedFilesByUserAction(
			WorkshopFileAction eAction,
			uint unStartIndex);

		SteamAPICall_t ISteamRemoteStorage_EnumeratePublishedWorkshopFiles(
			WorkshopEnumerationType eEnumerationType,
			uint unStartIndex,
			uint unCount,
			uint unDays,
			ref SteamParamStringArray_t pTags,
			ref SteamParamStringArray_t pUserTags);

		SteamAPICall_t ISteamRemoteStorage_UGCDownloadToLocation(
			ulong hContent,
			string pchLocation,
			uint unPriority);

		ScreenshotHandle ISteamScreenshots_WriteScreenshot(
			IntPtr pubRGB,
			uint cubRGB,
			int nWidth,
			int nHeight);

		ScreenshotHandle ISteamScreenshots_AddScreenshotToLibrary(
			string pchFilename,
			string pchThumbnailFilename,
			int nWidth,
			int nHeight);

		void ISteamScreenshots_TriggerScreenshot();

		void ISteamScreenshots_HookScreenshots([MarshalAs(UnmanagedType.U1)] bool bHook);

		bool ISteamScreenshots_SetLocation(uint hScreenshot, string pchLocation);

		bool ISteamScreenshots_TagUser(uint hScreenshot, ulong steamID);

		bool ISteamScreenshots_TagPublishedFile(uint hScreenshot, ulong unPublishedFileID);

		bool ISteamScreenshots_IsScreenshotsHooked();

		ScreenshotHandle ISteamScreenshots_AddVRScreenshotToLibrary(
			VRScreenshotType eType,
			string pchFilename,
			string pchVRFilename);

		UGCQueryHandle_t ISteamUGC_CreateQueryUserUGCRequest(
			uint unAccountID,
			UserUGCList eListType,
			UGCMatchingUGCType eMatchingUGCType,
			UserUGCListSortOrder eSortOrder,
			uint nCreatorAppID,
			uint nConsumerAppID,
			uint unPage);

		UGCQueryHandle_t ISteamUGC_CreateQueryAllUGCRequest(
			UGCQuery eQueryType,
			UGCMatchingUGCType eMatchingeMatchingUGCTypeFileType,
			uint nCreatorAppID,
			uint nConsumerAppID,
			uint unPage);

		UGCQueryHandle_t ISteamUGC_CreateQueryUGCDetailsRequest(
			IntPtr pvecPublishedFileID,
			uint unNumPublishedFileIDs);

		SteamAPICall_t ISteamUGC_SendQueryUGCRequest(ulong handle);

		bool ISteamUGC_GetQueryUGCResult(ulong handle, uint index, ref SteamUGCDetails_t pDetails);

		bool ISteamUGC_GetQueryUGCPreviewURL(
			ulong handle,
			uint index,
			StringBuilder pchURL,
			uint cchURLSize);

		bool ISteamUGC_GetQueryUGCMetadata(
			ulong handle,
			uint index,
			StringBuilder pchMetadata,
			uint cchMetadatasize);

		bool ISteamUGC_GetQueryUGCChildren(
			ulong handle,
			uint index,
			IntPtr pvecPublishedFileID,
			uint cMaxEntries);

		bool ISteamUGC_GetQueryUGCStatistic(
			ulong handle,
			uint index,
			ItemStatistic eStatType,
			out ulong pStatValue);

		uint ISteamUGC_GetQueryUGCNumAdditionalPreviews(ulong handle, uint index);

		bool ISteamUGC_GetQueryUGCAdditionalPreview(
			ulong handle,
			uint index,
			uint previewIndex,
			StringBuilder pchURLOrVideoID,
			uint cchURLSize,
			StringBuilder pchOriginalFileName,
			uint cchOriginalFileNameSize,
			out ItemPreviewType pPreviewType);

		uint ISteamUGC_GetQueryUGCNumKeyValueTags(ulong handle, uint index);

		bool ISteamUGC_GetQueryUGCKeyValueTag(
			ulong handle,
			uint index,
			uint keyValueTagIndex,
			StringBuilder pchKey,
			uint cchKeySize,
			StringBuilder pchValue,
			uint cchValueSize);

		bool ISteamUGC_ReleaseQueryUGCRequest(ulong handle);

		bool ISteamUGC_AddRequiredTag(ulong handle, string pTagName);

		bool ISteamUGC_AddExcludedTag(ulong handle, string pTagName);

		bool ISteamUGC_SetReturnOnlyIDs(ulong handle, [MarshalAs(UnmanagedType.U1)] bool bReturnOnlyIDs);

		bool ISteamUGC_SetReturnKeyValueTags(ulong handle, [MarshalAs(UnmanagedType.U1)] bool bReturnKeyValueTags);

		bool ISteamUGC_SetReturnLongDescription(ulong handle,
			[MarshalAs(UnmanagedType.U1)] bool bReturnLongDescription);

		bool ISteamUGC_SetReturnMetadata(ulong handle, [MarshalAs(UnmanagedType.U1)] bool bReturnMetadata);

		bool ISteamUGC_SetReturnChildren(ulong handle, [MarshalAs(UnmanagedType.U1)] bool bReturnChildren);

		bool ISteamUGC_SetReturnAdditionalPreviews(ulong handle,
			[MarshalAs(UnmanagedType.U1)] bool bReturnAdditionalPreviews);

		bool ISteamUGC_SetReturnTotalOnly(ulong handle, [MarshalAs(UnmanagedType.U1)] bool bReturnTotalOnly);

		bool ISteamUGC_SetReturnPlaytimeStats(ulong handle, uint unDays);

		bool ISteamUGC_SetLanguage(ulong handle, string pchLanguage);

		bool ISteamUGC_SetAllowCachedResponse(ulong handle, uint unMaxAgeSeconds);

		bool ISteamUGC_SetCloudFileNameFilter(ulong handle, string pMatchCloudFileName);

		bool ISteamUGC_SetMatchAnyTag(ulong handle, [MarshalAs(UnmanagedType.U1)] bool bMatchAnyTag);

		bool ISteamUGC_SetSearchText(ulong handle, string pSearchText);

		bool ISteamUGC_SetRankedByTrendDays(ulong handle, uint unDays);

		bool ISteamUGC_AddRequiredKeyValueTag(ulong handle, string pKey, string pValue);

		SteamAPICall_t ISteamUGC_RequestUGCDetails(ulong nPublishedFileID, uint unMaxAgeSeconds);

		SteamAPICall_t ISteamUGC_CreateItem(uint nConsumerAppId, WorkshopFileType eFileType);

		UGCUpdateHandle_t ISteamUGC_StartItemUpdate(uint nConsumerAppId, ulong nPublishedFileID);

		bool ISteamUGC_SetItemTitle(ulong handle, string pchTitle);

		bool ISteamUGC_SetItemDescription(ulong handle, string pchDescription);

		bool ISteamUGC_SetItemUpdateLanguage(ulong handle, string pchLanguage);

		bool ISteamUGC_SetItemMetadata(ulong handle, string pchMetaData);

		bool ISteamUGC_SetItemVisibility(
			ulong handle,
			RemoteStoragePublishedFileVisibility eVisibility);

		bool ISteamUGC_SetItemTags(ulong updateHandle, ref SteamParamStringArray_t pTags);

		bool ISteamUGC_SetItemContent(ulong handle, string pszContentFolder);

		bool ISteamUGC_SetItemPreview(ulong handle, string pszPreviewFile);

		bool ISteamUGC_RemoveItemKeyValueTags(ulong handle, string pchKey);

		bool ISteamUGC_AddItemKeyValueTag(ulong handle, string pchKey, string pchValue);

		bool ISteamUGC_AddItemPreviewFile(ulong handle, string pszPreviewFile, ItemPreviewType type);

		bool ISteamUGC_AddItemPreviewVideo(ulong handle, string pszVideoID);

		bool ISteamUGC_UpdateItemPreviewFile(ulong handle, uint index, string pszPreviewFile);

		bool ISteamUGC_UpdateItemPreviewVideo(ulong handle, uint index, string pszVideoID);

		bool ISteamUGC_RemoveItemPreview(ulong handle, uint index);

		SteamAPICall_t ISteamUGC_SubmitItemUpdate(ulong handle, string pchChangeNote);

		ItemUpdateStatus ISteamUGC_GetItemUpdateProgress(
			ulong handle,
			out ulong punBytesProcessed,
			out ulong punBytesTotal);

		SteamAPICall_t ISteamUGC_SetUserItemVote(ulong nPublishedFileID, [MarshalAs(UnmanagedType.U1)] bool bVoteUp);

		SteamAPICall_t ISteamUGC_GetUserItemVote(ulong nPublishedFileID);

		SteamAPICall_t ISteamUGC_AddItemToFavorites(uint nAppId, ulong nPublishedFileID);

		SteamAPICall_t ISteamUGC_RemoveItemFromFavorites(uint nAppId, ulong nPublishedFileID);

		SteamAPICall_t ISteamUGC_SubscribeItem(ulong nPublishedFileID);

		SteamAPICall_t ISteamUGC_UnsubscribeItem(ulong nPublishedFileID);

		uint ISteamUGC_GetNumSubscribedItems();

		uint ISteamUGC_GetSubscribedItems(IntPtr pvecPublishedFileID, uint cMaxEntries);

		uint ISteamUGC_GetItemState(ulong nPublishedFileID);

		bool ISteamUGC_GetItemInstallInfo(
			ulong nPublishedFileID,
			out ulong punSizeOnDisk,
			StringBuilder pchFolder,
			uint cchFolderSize,
			out uint punTimeStamp);

		bool ISteamUGC_GetItemDownloadInfo(
			ulong nPublishedFileID,
			out ulong punBytesDownloaded,
			out ulong punBytesTotal);

		bool ISteamUGC_DownloadItem(ulong nPublishedFileID, [MarshalAs(UnmanagedType.U1)] bool bHighPriority);

		bool ISteamUGC_BInitWorkshopForGameServer(uint unWorkshopDepotID, string pszFolder);

		void ISteamUGC_SuspendDownloads([MarshalAs(UnmanagedType.U1)] bool bSuspend);

		SteamAPICall_t ISteamUGC_StartPlaytimeTracking(
			IntPtr pvecPublishedFileID,
			uint unNumPublishedFileIDs);

		SteamAPICall_t ISteamUGC_StopPlaytimeTracking(
			IntPtr pvecPublishedFileID,
			uint unNumPublishedFileIDs);

		SteamAPICall_t ISteamUGC_StopPlaytimeTrackingForAllItems();

		SteamAPICall_t ISteamUGC_AddDependency(
			ulong nParentPublishedFileID,
			ulong nChildPublishedFileID);

		SteamAPICall_t ISteamUGC_RemoveDependency(
			ulong nParentPublishedFileID,
			ulong nChildPublishedFileID);

		ClientUnifiedMessageHandle ISteamUnifiedMessages_SendMethod(
			string pchServiceMethod,
			IntPtr pRequestBuffer,
			uint unRequestBufferSize,
			ulong unContext);

		bool ISteamUnifiedMessages_GetMethodResponseInfo(
			ulong hHandle,
			out uint punResponseSize,
			out Result peResult);

		bool ISteamUnifiedMessages_GetMethodResponseData(
			ulong hHandle,
			IntPtr pResponseBuffer,
			uint unResponseBufferSize,
			[MarshalAs(UnmanagedType.U1)] bool bAutoRelease);

		bool ISteamUnifiedMessages_ReleaseMethod(ulong hHandle);

		bool ISteamUnifiedMessages_SendNotification(
			string pchServiceNotification,
			IntPtr pNotificationBuffer,
			uint unNotificationBufferSize);

		HSteamUser ISteamUser_GetHSteamUser();

		bool ISteamUser_BLoggedOn();

		CSteamID ISteamUser_GetSteamID();

		int ISteamUser_InitiateGameConnection(
			IntPtr pAuthBlob,
			int cbMaxAuthBlob,
			ulong steamIDGameServer,
			uint unIPServer,
			ushort usPortServer,
			[MarshalAs(UnmanagedType.U1)] bool bSecure);

		void ISteamUser_TerminateGameConnection(uint unIPServer, ushort usPortServer);

		void ISteamUser_TrackAppUsageEvent(ulong gameID, int eAppUsageEvent, string pchExtraInfo);

		bool ISteamUser_GetUserDataFolder(StringBuilder pchBuffer, int cubBuffer);

		void ISteamUser_StartVoiceRecording();

		void ISteamUser_StopVoiceRecording();

		VoiceResult ISteamUser_GetAvailableVoice(
			out uint pcbCompressed,
			out uint pcbUncompressed_Deprecated,
			uint nUncompressedVoiceDesiredSampleRate_Deprecated);

		VoiceResult ISteamUser_GetVoice(
			[MarshalAs(UnmanagedType.U1)] bool bWantCompressed,
			IntPtr pDestBuffer,
			uint cbDestBufferSize,
			out uint nBytesWritten,
			[MarshalAs(UnmanagedType.U1)] bool bWantUncompressed_Deprecated,
			IntPtr pUncompressedDestBuffer_Deprecated,
			uint cbUncompressedDestBufferSize_Deprecated,
			out uint nUncompressBytesWritten_Deprecated,
			uint nUncompressedVoiceDesiredSampleRate_Deprecated);

		VoiceResult ISteamUser_DecompressVoice(
			IntPtr pCompressed,
			uint cbCompressed,
			IntPtr pDestBuffer,
			uint cbDestBufferSize,
			out uint nBytesWritten,
			uint nDesiredSampleRate);

		uint ISteamUser_GetVoiceOptimalSampleRate();

		HAuthTicket ISteamUser_GetAuthSessionTicket(
			IntPtr pTicket,
			int cbMaxTicket,
			out uint pcbTicket);

		BeginAuthSessionResult ISteamUser_BeginAuthSession(
			IntPtr pAuthTicket,
			int cbAuthTicket,
			ulong steamID);

		void ISteamUser_EndAuthSession(ulong steamID);

		void ISteamUser_CancelAuthTicket(uint hAuthTicket);

		UserHasLicenseForAppResult ISteamUser_UserHasLicenseForApp(ulong steamID, uint appID);

		bool ISteamUser_BIsBehindNAT();

		void ISteamUser_AdvertiseGame(ulong steamIDGameServer, uint unIPServer, ushort usPortServer);

		SteamAPICall_t ISteamUser_RequestEncryptedAppTicket(
			IntPtr pDataToInclude,
			int cbDataToInclude);

		bool ISteamUser_GetEncryptedAppTicket(IntPtr pTicket, int cbMaxTicket, out uint pcbTicket);

		int ISteamUser_GetGameBadgeLevel(int nSeries, [MarshalAs(UnmanagedType.U1)] bool bFoil);

		int ISteamUser_GetPlayerSteamLevel();

		SteamAPICall_t ISteamUser_RequestStoreAuthURL(string pchRedirectURL);

		bool ISteamUser_BIsPhoneVerified();

		bool ISteamUser_BIsTwoFactorEnabled();

		bool ISteamUser_BIsPhoneIdentifying();

		bool ISteamUser_BIsPhoneRequiringVerification();

		bool ISteamUserStats_RequestCurrentStats();

		bool ISteamUserStats_GetStat(string pchName, out int pData);

		bool ISteamUserStats_GetStat0(string pchName, out float pData);

		bool ISteamUserStats_SetStat(string pchName, int nData);

		bool ISteamUserStats_SetStat0(string pchName, float fData);

		bool ISteamUserStats_UpdateAvgRateStat(
			string pchName,
			float flCountThisSession,
			double dSessionLength);

		bool ISteamUserStats_GetAchievement(string pchName, [MarshalAs(UnmanagedType.U1)] ref bool pbAchieved);

		bool ISteamUserStats_SetAchievement(string pchName);

		bool ISteamUserStats_ClearAchievement(string pchName);

		bool ISteamUserStats_GetAchievementAndUnlockTime(
			string pchName,
			[MarshalAs(UnmanagedType.U1)] ref bool pbAchieved,
			out uint punUnlockTime);

		bool ISteamUserStats_StoreStats();

		int ISteamUserStats_GetAchievementIcon(string pchName);

		IntPtr ISteamUserStats_GetAchievementDisplayAttribute(string pchName, string pchKey);

		bool ISteamUserStats_IndicateAchievementProgress(
			string pchName,
			uint nCurProgress,
			uint nMaxProgress);

		uint ISteamUserStats_GetNumAchievements();

		IntPtr ISteamUserStats_GetAchievementName(uint iAchievement);

		SteamAPICall_t ISteamUserStats_RequestUserStats(ulong steamIDUser);

		bool ISteamUserStats_GetUserStat(ulong steamIDUser, string pchName, out int pData);

		bool ISteamUserStats_GetUserStat0(ulong steamIDUser, string pchName, out float pData);

		bool ISteamUserStats_GetUserAchievement(
			ulong steamIDUser,
			string pchName,
			[MarshalAs(UnmanagedType.U1)] ref bool pbAchieved);

		bool ISteamUserStats_GetUserAchievementAndUnlockTime(
			ulong steamIDUser,
			string pchName,
			[MarshalAs(UnmanagedType.U1)] ref bool pbAchieved,
			out uint punUnlockTime);

		bool ISteamUserStats_ResetAllStats([MarshalAs(UnmanagedType.U1)] bool bAchievementsToo);

		SteamAPICall_t ISteamUserStats_FindOrCreateLeaderboard(
			string pchLeaderboardName,
			LeaderboardSortMethod eLeaderboardSortMethod,
			LeaderboardDisplayType eLeaderboardDisplayType);

		SteamAPICall_t ISteamUserStats_FindLeaderboard(string pchLeaderboardName);

		IntPtr ISteamUserStats_GetLeaderboardName(ulong hSteamLeaderboard);

		int ISteamUserStats_GetLeaderboardEntryCount(ulong hSteamLeaderboard);

		LeaderboardSortMethod ISteamUserStats_GetLeaderboardSortMethod(ulong hSteamLeaderboard);

		LeaderboardDisplayType ISteamUserStats_GetLeaderboardDisplayType(ulong hSteamLeaderboard);

		SteamAPICall_t ISteamUserStats_DownloadLeaderboardEntries(
			ulong hSteamLeaderboard,
			LeaderboardDataRequest eLeaderboardDataRequest,
			int nRangeStart,
			int nRangeEnd);

		SteamAPICall_t ISteamUserStats_DownloadLeaderboardEntriesForUsers(
			ulong hSteamLeaderboard,
			IntPtr prgUsers,
			int cUsers);

		bool ISteamUserStats_GetDownloadedLeaderboardEntry(
			ulong hSteamLeaderboardEntries,
			int index,
			ref LeaderboardEntry_t pLeaderboardEntry,
			IntPtr pDetails,
			int cDetailsMax);

		SteamAPICall_t ISteamUserStats_UploadLeaderboardScore(
			ulong hSteamLeaderboard,
			LeaderboardUploadScoreMethod eLeaderboardUploadScoreMethod,
			int nScore,
			int[] pScoreDetails,
			int cScoreDetailsCount);

		SteamAPICall_t ISteamUserStats_AttachLeaderboardUGC(ulong hSteamLeaderboard, ulong hUGC);

		SteamAPICall_t ISteamUserStats_GetNumberOfCurrentPlayers();

		SteamAPICall_t ISteamUserStats_RequestGlobalAchievementPercentages();

		int ISteamUserStats_GetMostAchievedAchievementInfo(
			StringBuilder pchName,
			uint unNameBufLen,
			out float pflPercent,
			[MarshalAs(UnmanagedType.U1)] ref bool pbAchieved);

		int ISteamUserStats_GetNextMostAchievedAchievementInfo(
			int iIteratorPrevious,
			StringBuilder pchName,
			uint unNameBufLen,
			out float pflPercent,
			[MarshalAs(UnmanagedType.U1)] ref bool pbAchieved);

		bool ISteamUserStats_GetAchievementAchievedPercent(string pchName, out float pflPercent);

		SteamAPICall_t ISteamUserStats_RequestGlobalStats(int nHistoryDays);

		bool ISteamUserStats_GetGlobalStat(string pchStatName, out long pData);

		bool ISteamUserStats_GetGlobalStat0(string pchStatName, out double pData);

		int ISteamUserStats_GetGlobalStatHistory(string pchStatName, out long pData, uint cubData);

		int ISteamUserStats_GetGlobalStatHistory0(string pchStatName, out double pData, uint cubData);

		uint ISteamUtils_GetSecondsSinceAppActive();

		uint ISteamUtils_GetSecondsSinceComputerActive();

		Universe ISteamUtils_GetConnectedUniverse();

		uint ISteamUtils_GetServerRealTime();

		IntPtr ISteamUtils_GetIPCountry();

		bool ISteamUtils_GetImageSize(int iImage, out uint pnWidth, out uint pnHeight);

		bool ISteamUtils_GetImageRGBA(int iImage, IntPtr pubDest, int nDestBufferSize);

		bool ISteamUtils_GetCSERIPPort(out uint unIP, out ushort usPort);

		byte ISteamUtils_GetCurrentBatteryPower();

		uint ISteamUtils_GetAppID();

		void ISteamUtils_SetOverlayNotificationPosition(NotificationPosition eNotificationPosition);

		bool ISteamUtils_IsAPICallCompleted(ulong hSteamAPICall, [MarshalAs(UnmanagedType.U1)] ref bool pbFailed);

		SteamAPICallFailure ISteamUtils_GetAPICallFailureReason(ulong hSteamAPICall);

		bool ISteamUtils_GetAPICallResult(
			ulong hSteamAPICall,
			IntPtr pCallback,
			int cubCallback,
			int iCallbackExpected,
			[MarshalAs(UnmanagedType.U1)] ref bool pbFailed);

		uint ISteamUtils_GetIPCCallCount();

		void ISteamUtils_SetWarningMessageHook(IntPtr pFunction);

		bool ISteamUtils_IsOverlayEnabled();

		bool ISteamUtils_BOverlayNeedsPresent();

		SteamAPICall_t ISteamUtils_CheckFileSignature(string szFileName);

		bool ISteamUtils_ShowGamepadTextInput(
			GamepadTextInputMode eInputMode,
			GamepadTextInputLineMode eLineInputMode,
			string pchDescription,
			uint unCharMax,
			string pchExistingText);

		uint ISteamUtils_GetEnteredGamepadTextLength();

		bool ISteamUtils_GetEnteredGamepadTextInput(StringBuilder pchText, uint cchText);

		IntPtr ISteamUtils_GetSteamUILanguage();

		bool ISteamUtils_IsSteamRunningInVR();

		void ISteamUtils_SetOverlayNotificationInset(int nHorizontalInset, int nVerticalInset);

		bool ISteamUtils_IsSteamInBigPictureMode();

		void ISteamUtils_StartVRDashboard();

		bool ISteamUtils_IsVRHeadsetStreamingEnabled();

		void ISteamUtils_SetVRHeadsetStreamingEnabled([MarshalAs(UnmanagedType.U1)] bool bEnabled);

		void ISteamVideo_GetVideoURL(uint unVideoAppID);

		bool ISteamVideo_IsBroadcasting(IntPtr pnNumViewers);

		void ISteamVideo_GetOPFSettings(uint unVideoAppID);

		bool ISteamVideo_GetOPFStringForApp(
			uint unVideoAppID,
			StringBuilder pchBuffer,
			out int pnBufferSize);

		bool SteamApi_SteamAPI_Init();

		void SteamApi_SteamAPI_RunCallbacks();

		void SteamApi_SteamGameServer_RunCallbacks();

		void SteamApi_SteamAPI_RegisterCallback(IntPtr pCallback, int callback);

		void SteamApi_SteamAPI_UnregisterCallback(IntPtr pCallback);

		void SteamApi_SteamAPI_RegisterCallResult(IntPtr pCallback, ulong callback);

		void SteamApi_SteamAPI_UnregisterCallResult(IntPtr pCallback, ulong callback);

		bool SteamApi_SteamInternal_GameServer_Init(
			uint unIP,
			ushort usPort,
			ushort usGamePort,
			ushort usQueryPort,
			int eServerMode,
			string pchVersionString);

		void SteamApi_SteamAPI_Shutdown();

		void SteamApi_SteamGameServer_Shutdown();

		HSteamUser SteamApi_SteamAPI_GetHSteamUser();

		HSteamPipe SteamApi_SteamAPI_GetHSteamPipe();

		HSteamUser SteamApi_SteamGameServer_GetHSteamUser();

		HSteamPipe SteamApi_SteamGameServer_GetHSteamPipe();

		IntPtr SteamApi_SteamInternal_CreateInterface(string version);

		bool SteamApi_SteamAPI_RestartAppIfNecessary(uint unOwnAppID);
	}

	internal class Linux32 : Interface, IDisposable {
		internal IntPtr _ptr;

		public bool IsValid => _ptr != IntPtr.Zero;

		internal Linux32(IntPtr pointer) {
			_ptr = pointer;
		}

		public virtual void Dispose() {
			_ptr = IntPtr.Zero;
		}

		public virtual HSteamPipe ISteamClient_CreateSteamPipe() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamClient_CreateSteamPipe(_ptr)
				: throw new Exception("ISteamClient _ptr is null!");
		}

		public virtual bool ISteamClient_BReleaseSteamPipe(int hSteamPipe) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamClient_BReleaseSteamPipe(_ptr, hSteamPipe)
				: throw new Exception("ISteamClient _ptr is null!");
		}

		public virtual HSteamUser ISteamClient_ConnectToGlobalUser(int hSteamPipe) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamClient_ConnectToGlobalUser(_ptr, hSteamPipe)
				: throw new Exception("ISteamClient _ptr is null!");
		}

		public virtual HSteamUser ISteamClient_CreateLocalUser(
			out int phSteamPipe,
			AccountType eAccountType) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamClient_CreateLocalUser(_ptr, out phSteamPipe, eAccountType)
				: throw new Exception("ISteamClient _ptr is null!");
		}

		public virtual void ISteamClient_ReleaseUser(int hSteamPipe, int hUser) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamClient _ptr is null!");
			Native.SteamAPI_ISteamClient_ReleaseUser(_ptr, hSteamPipe, hUser);
		}

		public virtual IntPtr ISteamClient_GetISteamUser(
			int hSteamUser,
			int hSteamPipe,
			string pchVersion) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamClient _ptr is null!");
			return Native.SteamAPI_ISteamClient_GetISteamUser(_ptr, hSteamUser, hSteamPipe, pchVersion);
		}

		public virtual IntPtr ISteamClient_GetISteamGameServer(
			int hSteamUser,
			int hSteamPipe,
			string pchVersion) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamClient _ptr is null!");
			return Native.SteamAPI_ISteamClient_GetISteamGameServer(_ptr, hSteamUser, hSteamPipe, pchVersion);
		}

		public virtual void ISteamClient_SetLocalIPBinding(uint unIP, ushort usPort) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamClient _ptr is null!");
			Native.SteamAPI_ISteamClient_SetLocalIPBinding(_ptr, unIP, usPort);
		}

		public virtual IntPtr ISteamClient_GetISteamFriends(
			int hSteamUser,
			int hSteamPipe,
			string pchVersion) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamClient _ptr is null!");
			return Native.SteamAPI_ISteamClient_GetISteamFriends(_ptr, hSteamUser, hSteamPipe, pchVersion);
		}

		public virtual IntPtr ISteamClient_GetISteamUtils(int hSteamPipe, string pchVersion) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamClient _ptr is null!");
			return Native.SteamAPI_ISteamClient_GetISteamUtils(_ptr, hSteamPipe, pchVersion);
		}

		public virtual IntPtr ISteamClient_GetISteamMatchmaking(
			int hSteamUser,
			int hSteamPipe,
			string pchVersion) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamClient _ptr is null!");
			return Native.SteamAPI_ISteamClient_GetISteamMatchmaking(_ptr, hSteamUser, hSteamPipe, pchVersion);
		}

		public virtual IntPtr ISteamClient_GetISteamMatchmakingServers(
			int hSteamUser,
			int hSteamPipe,
			string pchVersion) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamClient _ptr is null!");
			return Native.SteamAPI_ISteamClient_GetISteamMatchmakingServers(_ptr, hSteamUser, hSteamPipe, pchVersion);
		}

		public virtual IntPtr ISteamClient_GetISteamGenericInterface(
			int hSteamUser,
			int hSteamPipe,
			string pchVersion) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamClient _ptr is null!");
			return Native.SteamAPI_ISteamClient_GetISteamGenericInterface(_ptr, hSteamUser, hSteamPipe, pchVersion);
		}

		public virtual IntPtr ISteamClient_GetISteamUserStats(
			int hSteamUser,
			int hSteamPipe,
			string pchVersion) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamClient _ptr is null!");
			return Native.SteamAPI_ISteamClient_GetISteamUserStats(_ptr, hSteamUser, hSteamPipe, pchVersion);
		}

		public virtual IntPtr ISteamClient_GetISteamGameServerStats(
			int hSteamuser,
			int hSteamPipe,
			string pchVersion) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamClient _ptr is null!");
			return Native.SteamAPI_ISteamClient_GetISteamGameServerStats(_ptr, hSteamuser, hSteamPipe, pchVersion);
		}

		public virtual IntPtr ISteamClient_GetISteamApps(
			int hSteamUser,
			int hSteamPipe,
			string pchVersion) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamClient _ptr is null!");
			return Native.SteamAPI_ISteamClient_GetISteamApps(_ptr, hSteamUser, hSteamPipe, pchVersion);
		}

		public virtual IntPtr ISteamClient_GetISteamNetworking(
			int hSteamUser,
			int hSteamPipe,
			string pchVersion) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamClient _ptr is null!");
			return Native.SteamAPI_ISteamClient_GetISteamNetworking(_ptr, hSteamUser, hSteamPipe, pchVersion);
		}

		public virtual IntPtr ISteamClient_GetISteamRemoteStorage(
			int hSteamuser,
			int hSteamPipe,
			string pchVersion) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamClient _ptr is null!");
			return Native.SteamAPI_ISteamClient_GetISteamRemoteStorage(_ptr, hSteamuser, hSteamPipe, pchVersion);
		}

		public virtual IntPtr ISteamClient_GetISteamScreenshots(
			int hSteamuser,
			int hSteamPipe,
			string pchVersion) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamClient _ptr is null!");
			return Native.SteamAPI_ISteamClient_GetISteamScreenshots(_ptr, hSteamuser, hSteamPipe, pchVersion);
		}

		public virtual uint ISteamClient_GetIPCCallCount() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamClient_GetIPCCallCount(_ptr)
				: throw new Exception("ISteamClient _ptr is null!");
		}

		public virtual void ISteamClient_SetWarningMessageHook(IntPtr pFunction) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamClient _ptr is null!");
			Native.SteamAPI_ISteamClient_SetWarningMessageHook(_ptr, pFunction);
		}

		public virtual bool ISteamClient_BShutdownIfAllPipesClosed() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamClient_BShutdownIfAllPipesClosed(_ptr)
				: throw new Exception("ISteamClient _ptr is null!");
		}

		public virtual IntPtr ISteamClient_GetISteamHTTP(
			int hSteamuser,
			int hSteamPipe,
			string pchVersion) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamClient _ptr is null!");
			return Native.SteamAPI_ISteamClient_GetISteamHTTP(_ptr, hSteamuser, hSteamPipe, pchVersion);
		}

		public virtual IntPtr ISteamClient_GetISteamUnifiedMessages(
			int hSteamuser,
			int hSteamPipe,
			string pchVersion) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamClient _ptr is null!");
			return Native.SteamAPI_ISteamClient_GetISteamUnifiedMessages(_ptr, hSteamuser, hSteamPipe, pchVersion);
		}

		public virtual IntPtr ISteamClient_GetISteamController(
			int hSteamUser,
			int hSteamPipe,
			string pchVersion) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamClient _ptr is null!");
			return Native.SteamAPI_ISteamClient_GetISteamController(_ptr, hSteamUser, hSteamPipe, pchVersion);
		}

		public virtual IntPtr ISteamClient_GetISteamUGC(
			int hSteamUser,
			int hSteamPipe,
			string pchVersion) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamClient _ptr is null!");
			return Native.SteamAPI_ISteamClient_GetISteamUGC(_ptr, hSteamUser, hSteamPipe, pchVersion);
		}

		public virtual IntPtr ISteamClient_GetISteamAppList(
			int hSteamUser,
			int hSteamPipe,
			string pchVersion) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamClient _ptr is null!");
			return Native.SteamAPI_ISteamClient_GetISteamAppList(_ptr, hSteamUser, hSteamPipe, pchVersion);
		}

		public virtual IntPtr ISteamClient_GetISteamMusic(
			int hSteamuser,
			int hSteamPipe,
			string pchVersion) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamClient _ptr is null!");
			return Native.SteamAPI_ISteamClient_GetISteamMusic(_ptr, hSteamuser, hSteamPipe, pchVersion);
		}

		public virtual IntPtr ISteamClient_GetISteamMusicRemote(
			int hSteamuser,
			int hSteamPipe,
			string pchVersion) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamClient _ptr is null!");
			return Native.SteamAPI_ISteamClient_GetISteamMusicRemote(_ptr, hSteamuser, hSteamPipe, pchVersion);
		}

		public virtual IntPtr ISteamClient_GetISteamHTMLSurface(
			int hSteamuser,
			int hSteamPipe,
			string pchVersion) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamClient _ptr is null!");
			return Native.SteamAPI_ISteamClient_GetISteamHTMLSurface(_ptr, hSteamuser, hSteamPipe, pchVersion);
		}

		public virtual IntPtr ISteamClient_GetISteamInventory(
			int hSteamuser,
			int hSteamPipe,
			string pchVersion) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamClient _ptr is null!");
			return Native.SteamAPI_ISteamClient_GetISteamInventory(_ptr, hSteamuser, hSteamPipe, pchVersion);
		}

		public virtual IntPtr ISteamClient_GetISteamVideo(
			int hSteamuser,
			int hSteamPipe,
			string pchVersion) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamClient _ptr is null!");
			return Native.SteamAPI_ISteamClient_GetISteamVideo(_ptr, hSteamuser, hSteamPipe, pchVersion);
		}

		public virtual HSteamUser ISteamUser_GetHSteamUser() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUser_GetHSteamUser(_ptr)
				: throw new Exception("ISteamUser _ptr is null!");
		}

		public virtual bool ISteamUser_BLoggedOn() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUser_BLoggedOn(_ptr)
				: throw new Exception("ISteamUser _ptr is null!");
		}

		public virtual CSteamID ISteamUser_GetSteamID() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUser_GetSteamID(_ptr)
				: throw new Exception("ISteamUser _ptr is null!");
		}

		public virtual int ISteamUser_InitiateGameConnection(
			IntPtr pAuthBlob,
			int cbMaxAuthBlob,
			ulong steamIDGameServer,
			uint unIPServer,
			ushort usPortServer,
			[MarshalAs(UnmanagedType.U1)] bool bSecure) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUser _ptr is null!");
			return Native.SteamAPI_ISteamUser_InitiateGameConnection(_ptr, pAuthBlob, cbMaxAuthBlob, steamIDGameServer,
				unIPServer, usPortServer, bSecure);
		}

		public virtual void ISteamUser_TerminateGameConnection(uint unIPServer, ushort usPortServer) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUser _ptr is null!");
			Native.SteamAPI_ISteamUser_TerminateGameConnection(_ptr, unIPServer, usPortServer);
		}

		public virtual void ISteamUser_TrackAppUsageEvent(
			ulong gameID,
			int eAppUsageEvent,
			string pchExtraInfo) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUser _ptr is null!");
			Native.SteamAPI_ISteamUser_TrackAppUsageEvent(_ptr, gameID, eAppUsageEvent, pchExtraInfo);
		}

		public virtual bool ISteamUser_GetUserDataFolder(StringBuilder pchBuffer, int cubBuffer) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUser _ptr is null!");
			return Native.SteamAPI_ISteamUser_GetUserDataFolder(_ptr, pchBuffer, cubBuffer);
		}

		public virtual void ISteamUser_StartVoiceRecording() {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUser _ptr is null!");
			Native.SteamAPI_ISteamUser_StartVoiceRecording(_ptr);
		}

		public virtual void ISteamUser_StopVoiceRecording() {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUser _ptr is null!");
			Native.SteamAPI_ISteamUser_StopVoiceRecording(_ptr);
		}

		public virtual VoiceResult ISteamUser_GetAvailableVoice(
			out uint pcbCompressed,
			out uint pcbUncompressed_Deprecated,
			uint nUncompressedVoiceDesiredSampleRate_Deprecated) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUser_GetAvailableVoice(_ptr, out pcbCompressed, out pcbUncompressed_Deprecated,
					nUncompressedVoiceDesiredSampleRate_Deprecated)
				: throw new Exception("ISteamUser _ptr is null!");
		}

		public virtual VoiceResult ISteamUser_GetVoice(
			[MarshalAs(UnmanagedType.U1)] bool bWantCompressed,
			IntPtr pDestBuffer,
			uint cbDestBufferSize,
			out uint nBytesWritten,
			[MarshalAs(UnmanagedType.U1)] bool bWantUncompressed_Deprecated,
			IntPtr pUncompressedDestBuffer_Deprecated,
			uint cbUncompressedDestBufferSize_Deprecated,
			out uint nUncompressBytesWritten_Deprecated,
			uint nUncompressedVoiceDesiredSampleRate_Deprecated) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUser _ptr is null!");
			return Native.SteamAPI_ISteamUser_GetVoice(_ptr, bWantCompressed, pDestBuffer, cbDestBufferSize,
				out nBytesWritten, bWantUncompressed_Deprecated, pUncompressedDestBuffer_Deprecated,
				cbUncompressedDestBufferSize_Deprecated, out nUncompressBytesWritten_Deprecated,
				nUncompressedVoiceDesiredSampleRate_Deprecated);
		}

		public virtual VoiceResult ISteamUser_DecompressVoice(
			IntPtr pCompressed,
			uint cbCompressed,
			IntPtr pDestBuffer,
			uint cbDestBufferSize,
			out uint nBytesWritten,
			uint nDesiredSampleRate) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUser _ptr is null!");
			return Native.SteamAPI_ISteamUser_DecompressVoice(_ptr, pCompressed, cbCompressed, pDestBuffer,
				cbDestBufferSize, out nBytesWritten, nDesiredSampleRate);
		}

		public virtual uint ISteamUser_GetVoiceOptimalSampleRate() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUser_GetVoiceOptimalSampleRate(_ptr)
				: throw new Exception("ISteamUser _ptr is null!");
		}

		public virtual HAuthTicket ISteamUser_GetAuthSessionTicket(
			IntPtr pTicket,
			int cbMaxTicket,
			out uint pcbTicket) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUser _ptr is null!");
			return Native.SteamAPI_ISteamUser_GetAuthSessionTicket(_ptr, pTicket, cbMaxTicket, out pcbTicket);
		}

		public virtual BeginAuthSessionResult ISteamUser_BeginAuthSession(
			IntPtr pAuthTicket,
			int cbAuthTicket,
			ulong steamID) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUser _ptr is null!");
			return Native.SteamAPI_ISteamUser_BeginAuthSession(_ptr, pAuthTicket, cbAuthTicket, steamID);
		}

		public virtual void ISteamUser_EndAuthSession(ulong steamID) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUser _ptr is null!");
			Native.SteamAPI_ISteamUser_EndAuthSession(_ptr, steamID);
		}

		public virtual void ISteamUser_CancelAuthTicket(uint hAuthTicket) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUser _ptr is null!");
			Native.SteamAPI_ISteamUser_CancelAuthTicket(_ptr, hAuthTicket);
		}

		public virtual UserHasLicenseForAppResult ISteamUser_UserHasLicenseForApp(
			ulong steamID,
			uint appID) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUser _ptr is null!");
			return Native.SteamAPI_ISteamUser_UserHasLicenseForApp(_ptr, steamID, appID);
		}

		public virtual bool ISteamUser_BIsBehindNAT() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUser_BIsBehindNAT(_ptr)
				: throw new Exception("ISteamUser _ptr is null!");
		}

		public virtual void ISteamUser_AdvertiseGame(
			ulong steamIDGameServer,
			uint unIPServer,
			ushort usPortServer) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUser _ptr is null!");
			Native.SteamAPI_ISteamUser_AdvertiseGame(_ptr, steamIDGameServer, unIPServer, usPortServer);
		}

		public virtual SteamAPICall_t ISteamUser_RequestEncryptedAppTicket(
			IntPtr pDataToInclude,
			int cbDataToInclude) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUser _ptr is null!");
			return Native.SteamAPI_ISteamUser_RequestEncryptedAppTicket(_ptr, pDataToInclude, cbDataToInclude);
		}

		public virtual bool ISteamUser_GetEncryptedAppTicket(
			IntPtr pTicket,
			int cbMaxTicket,
			out uint pcbTicket) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUser _ptr is null!");
			return Native.SteamAPI_ISteamUser_GetEncryptedAppTicket(_ptr, pTicket, cbMaxTicket, out pcbTicket);
		}

		public virtual int ISteamUser_GetGameBadgeLevel(int nSeries, [MarshalAs(UnmanagedType.U1)] bool bFoil) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUser _ptr is null!");
			return Native.SteamAPI_ISteamUser_GetGameBadgeLevel(_ptr, nSeries, bFoil);
		}

		public virtual int ISteamUser_GetPlayerSteamLevel() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUser_GetPlayerSteamLevel(_ptr)
				: throw new Exception("ISteamUser _ptr is null!");
		}

		public virtual SteamAPICall_t ISteamUser_RequestStoreAuthURL(string pchRedirectURL) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUser_RequestStoreAuthURL(_ptr, pchRedirectURL)
				: throw new Exception("ISteamUser _ptr is null!");
		}

		public virtual bool ISteamUser_BIsPhoneVerified() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUser_BIsPhoneVerified(_ptr)
				: throw new Exception("ISteamUser _ptr is null!");
		}

		public virtual bool ISteamUser_BIsTwoFactorEnabled() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUser_BIsTwoFactorEnabled(_ptr)
				: throw new Exception("ISteamUser _ptr is null!");
		}

		public virtual bool ISteamUser_BIsPhoneIdentifying() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUser_BIsPhoneIdentifying(_ptr)
				: throw new Exception("ISteamUser _ptr is null!");
		}

		public virtual bool ISteamUser_BIsPhoneRequiringVerification() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUser_BIsPhoneRequiringVerification(_ptr)
				: throw new Exception("ISteamUser _ptr is null!");
		}

		public virtual IntPtr ISteamFriends_GetPersonaName() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_GetPersonaName(_ptr)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual SteamAPICall_t ISteamFriends_SetPersonaName(string pchPersonaName) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_SetPersonaName(_ptr, pchPersonaName)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual PersonaState ISteamFriends_GetPersonaState() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_GetPersonaState(_ptr)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual int ISteamFriends_GetFriendCount(int iFriendFlags) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_GetFriendCount(_ptr, iFriendFlags)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual CSteamID ISteamFriends_GetFriendByIndex(int iFriend, int iFriendFlags) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamFriends _ptr is null!");
			return Native.SteamAPI_ISteamFriends_GetFriendByIndex(_ptr, iFriend, iFriendFlags);
		}

		public virtual FriendRelationship ISteamFriends_GetFriendRelationship(ulong steamIDFriend) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_GetFriendRelationship(_ptr, steamIDFriend)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual PersonaState ISteamFriends_GetFriendPersonaState(ulong steamIDFriend) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_GetFriendPersonaState(_ptr, steamIDFriend)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual IntPtr ISteamFriends_GetFriendPersonaName(ulong steamIDFriend) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_GetFriendPersonaName(_ptr, steamIDFriend)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual bool ISteamFriends_GetFriendGamePlayed(
			ulong steamIDFriend,
			ref FriendGameInfo_t pFriendGameInfo) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamFriends _ptr is null!");
			var pFriendGameInfo1 = new FriendGameInfo_t.PackSmall();
			var friendGamePlayed =
				Native.SteamAPI_ISteamFriends_GetFriendGamePlayed(_ptr, steamIDFriend, ref pFriendGameInfo1);
			pFriendGameInfo = (FriendGameInfo_t)pFriendGameInfo1;
			return friendGamePlayed;
		}

		public virtual IntPtr ISteamFriends_GetFriendPersonaNameHistory(
			ulong steamIDFriend,
			int iPersonaName) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamFriends _ptr is null!");
			return Native.SteamAPI_ISteamFriends_GetFriendPersonaNameHistory(_ptr, steamIDFriend, iPersonaName);
		}

		public virtual int ISteamFriends_GetFriendSteamLevel(ulong steamIDFriend) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_GetFriendSteamLevel(_ptr, steamIDFriend)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual IntPtr ISteamFriends_GetPlayerNickname(ulong steamIDPlayer) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_GetPlayerNickname(_ptr, steamIDPlayer)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual int ISteamFriends_GetFriendsGroupCount() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_GetFriendsGroupCount(_ptr)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual FriendsGroupID_t ISteamFriends_GetFriendsGroupIDByIndex(int iFG) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_GetFriendsGroupIDByIndex(_ptr, iFG)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual IntPtr ISteamFriends_GetFriendsGroupName(short friendsGroupID) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_GetFriendsGroupName(_ptr, friendsGroupID)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual int ISteamFriends_GetFriendsGroupMembersCount(short friendsGroupID) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_GetFriendsGroupMembersCount(_ptr, friendsGroupID)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual void ISteamFriends_GetFriendsGroupMembersList(
			short friendsGroupID,
			IntPtr pOutSteamIDMembers,
			int nMembersCount) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamFriends _ptr is null!");
			Native.SteamAPI_ISteamFriends_GetFriendsGroupMembersList(_ptr, friendsGroupID, pOutSteamIDMembers,
				nMembersCount);
		}

		public virtual bool ISteamFriends_HasFriend(ulong steamIDFriend, int iFriendFlags) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamFriends _ptr is null!");
			return Native.SteamAPI_ISteamFriends_HasFriend(_ptr, steamIDFriend, iFriendFlags);
		}

		public virtual int ISteamFriends_GetClanCount() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_GetClanCount(_ptr)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual CSteamID ISteamFriends_GetClanByIndex(int iClan) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_GetClanByIndex(_ptr, iClan)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual IntPtr ISteamFriends_GetClanName(ulong steamIDClan) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_GetClanName(_ptr, steamIDClan)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual IntPtr ISteamFriends_GetClanTag(ulong steamIDClan) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_GetClanTag(_ptr, steamIDClan)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual bool ISteamFriends_GetClanActivityCounts(
			ulong steamIDClan,
			out int pnOnline,
			out int pnInGame,
			out int pnChatting) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_GetClanActivityCounts(_ptr, steamIDClan, out pnOnline, out pnInGame,
					out pnChatting)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual SteamAPICall_t ISteamFriends_DownloadClanActivityCounts(
			IntPtr psteamIDClans,
			int cClansToRequest) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamFriends _ptr is null!");
			return Native.SteamAPI_ISteamFriends_DownloadClanActivityCounts(_ptr, psteamIDClans, cClansToRequest);
		}

		public virtual int ISteamFriends_GetFriendCountFromSource(ulong steamIDSource) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_GetFriendCountFromSource(_ptr, steamIDSource)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual CSteamID ISteamFriends_GetFriendFromSourceByIndex(
			ulong steamIDSource,
			int iFriend) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamFriends _ptr is null!");
			return Native.SteamAPI_ISteamFriends_GetFriendFromSourceByIndex(_ptr, steamIDSource, iFriend);
		}

		public virtual bool ISteamFriends_IsUserInSource(ulong steamIDUser, ulong steamIDSource) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamFriends _ptr is null!");
			return Native.SteamAPI_ISteamFriends_IsUserInSource(_ptr, steamIDUser, steamIDSource);
		}

		public virtual void ISteamFriends_SetInGameVoiceSpeaking(ulong steamIDUser,
			[MarshalAs(UnmanagedType.U1)] bool bSpeaking) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamFriends _ptr is null!");
			Native.SteamAPI_ISteamFriends_SetInGameVoiceSpeaking(_ptr, steamIDUser, bSpeaking);
		}

		public virtual void ISteamFriends_ActivateGameOverlay(string pchDialog) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamFriends _ptr is null!");
			Native.SteamAPI_ISteamFriends_ActivateGameOverlay(_ptr, pchDialog);
		}

		public virtual void ISteamFriends_ActivateGameOverlayToUser(string pchDialog, ulong steamID) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamFriends _ptr is null!");
			Native.SteamAPI_ISteamFriends_ActivateGameOverlayToUser(_ptr, pchDialog, steamID);
		}

		public virtual void ISteamFriends_ActivateGameOverlayToWebPage(string pchURL) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamFriends _ptr is null!");
			Native.SteamAPI_ISteamFriends_ActivateGameOverlayToWebPage(_ptr, pchURL);
		}

		public virtual void ISteamFriends_ActivateGameOverlayToStore(
			uint nAppID,
			OverlayToStoreFlag eFlag) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamFriends _ptr is null!");
			Native.SteamAPI_ISteamFriends_ActivateGameOverlayToStore(_ptr, nAppID, eFlag);
		}

		public virtual void ISteamFriends_SetPlayedWith(ulong steamIDUserPlayedWith) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamFriends _ptr is null!");
			Native.SteamAPI_ISteamFriends_SetPlayedWith(_ptr, steamIDUserPlayedWith);
		}

		public virtual void ISteamFriends_ActivateGameOverlayInviteDialog(ulong steamIDLobby) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamFriends _ptr is null!");
			Native.SteamAPI_ISteamFriends_ActivateGameOverlayInviteDialog(_ptr, steamIDLobby);
		}

		public virtual int ISteamFriends_GetSmallFriendAvatar(ulong steamIDFriend) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_GetSmallFriendAvatar(_ptr, steamIDFriend)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual int ISteamFriends_GetMediumFriendAvatar(ulong steamIDFriend) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_GetMediumFriendAvatar(_ptr, steamIDFriend)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual int ISteamFriends_GetLargeFriendAvatar(ulong steamIDFriend) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_GetLargeFriendAvatar(_ptr, steamIDFriend)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual bool ISteamFriends_RequestUserInformation(
			ulong steamIDUser,
			[MarshalAs(UnmanagedType.U1)] bool bRequireNameOnly) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamFriends _ptr is null!");
			return Native.SteamAPI_ISteamFriends_RequestUserInformation(_ptr, steamIDUser, bRequireNameOnly);
		}

		public virtual SteamAPICall_t ISteamFriends_RequestClanOfficerList(ulong steamIDClan) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_RequestClanOfficerList(_ptr, steamIDClan)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual CSteamID ISteamFriends_GetClanOwner(ulong steamIDClan) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_GetClanOwner(_ptr, steamIDClan)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual int ISteamFriends_GetClanOfficerCount(ulong steamIDClan) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_GetClanOfficerCount(_ptr, steamIDClan)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual CSteamID ISteamFriends_GetClanOfficerByIndex(ulong steamIDClan, int iOfficer) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamFriends _ptr is null!");
			return Native.SteamAPI_ISteamFriends_GetClanOfficerByIndex(_ptr, steamIDClan, iOfficer);
		}

		public virtual uint ISteamFriends_GetUserRestrictions() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_GetUserRestrictions(_ptr)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual bool ISteamFriends_SetRichPresence(string pchKey, string pchValue) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamFriends _ptr is null!");
			return Native.SteamAPI_ISteamFriends_SetRichPresence(_ptr, pchKey, pchValue);
		}

		public virtual void ISteamFriends_ClearRichPresence() {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamFriends _ptr is null!");
			Native.SteamAPI_ISteamFriends_ClearRichPresence(_ptr);
		}

		public virtual IntPtr ISteamFriends_GetFriendRichPresence(ulong steamIDFriend, string pchKey) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamFriends _ptr is null!");
			return Native.SteamAPI_ISteamFriends_GetFriendRichPresence(_ptr, steamIDFriend, pchKey);
		}

		public virtual int ISteamFriends_GetFriendRichPresenceKeyCount(ulong steamIDFriend) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_GetFriendRichPresenceKeyCount(_ptr, steamIDFriend)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual IntPtr ISteamFriends_GetFriendRichPresenceKeyByIndex(
			ulong steamIDFriend,
			int iKey) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamFriends _ptr is null!");
			return Native.SteamAPI_ISteamFriends_GetFriendRichPresenceKeyByIndex(_ptr, steamIDFriend, iKey);
		}

		public virtual void ISteamFriends_RequestFriendRichPresence(ulong steamIDFriend) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamFriends _ptr is null!");
			Native.SteamAPI_ISteamFriends_RequestFriendRichPresence(_ptr, steamIDFriend);
		}

		public virtual bool ISteamFriends_InviteUserToGame(
			ulong steamIDFriend,
			string pchConnectString) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamFriends _ptr is null!");
			return Native.SteamAPI_ISteamFriends_InviteUserToGame(_ptr, steamIDFriend, pchConnectString);
		}

		public virtual int ISteamFriends_GetCoplayFriendCount() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_GetCoplayFriendCount(_ptr)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual CSteamID ISteamFriends_GetCoplayFriend(int iCoplayFriend) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_GetCoplayFriend(_ptr, iCoplayFriend)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual int ISteamFriends_GetFriendCoplayTime(ulong steamIDFriend) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_GetFriendCoplayTime(_ptr, steamIDFriend)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual AppId_t ISteamFriends_GetFriendCoplayGame(ulong steamIDFriend) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_GetFriendCoplayGame(_ptr, steamIDFriend)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual SteamAPICall_t ISteamFriends_JoinClanChatRoom(ulong steamIDClan) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_JoinClanChatRoom(_ptr, steamIDClan)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual bool ISteamFriends_LeaveClanChatRoom(ulong steamIDClan) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_LeaveClanChatRoom(_ptr, steamIDClan)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual int ISteamFriends_GetClanChatMemberCount(ulong steamIDClan) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_GetClanChatMemberCount(_ptr, steamIDClan)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual CSteamID ISteamFriends_GetChatMemberByIndex(ulong steamIDClan, int iUser) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamFriends _ptr is null!");
			return Native.SteamAPI_ISteamFriends_GetChatMemberByIndex(_ptr, steamIDClan, iUser);
		}

		public virtual bool ISteamFriends_SendClanChatMessage(ulong steamIDClanChat, string pchText) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamFriends _ptr is null!");
			return Native.SteamAPI_ISteamFriends_SendClanChatMessage(_ptr, steamIDClanChat, pchText);
		}

		public virtual int ISteamFriends_GetClanChatMessage(
			ulong steamIDClanChat,
			int iMessage,
			IntPtr prgchText,
			int cchTextMax,
			out ChatEntryType peChatEntryType,
			out ulong psteamidChatter) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamFriends _ptr is null!");
			return Native.SteamAPI_ISteamFriends_GetClanChatMessage(_ptr, steamIDClanChat, iMessage, prgchText,
				cchTextMax, out peChatEntryType, out psteamidChatter);
		}

		public virtual bool ISteamFriends_IsClanChatAdmin(ulong steamIDClanChat, ulong steamIDUser) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamFriends _ptr is null!");
			return Native.SteamAPI_ISteamFriends_IsClanChatAdmin(_ptr, steamIDClanChat, steamIDUser);
		}

		public virtual bool ISteamFriends_IsClanChatWindowOpenInSteam(ulong steamIDClanChat) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_IsClanChatWindowOpenInSteam(_ptr, steamIDClanChat)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual bool ISteamFriends_OpenClanChatWindowInSteam(ulong steamIDClanChat) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_OpenClanChatWindowInSteam(_ptr, steamIDClanChat)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual bool ISteamFriends_CloseClanChatWindowInSteam(ulong steamIDClanChat) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_CloseClanChatWindowInSteam(_ptr, steamIDClanChat)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual bool ISteamFriends_SetListenForFriendsMessages(
			[MarshalAs(UnmanagedType.U1)] bool bInterceptEnabled) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_SetListenForFriendsMessages(_ptr, bInterceptEnabled)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual bool ISteamFriends_ReplyToFriendMessage(
			ulong steamIDFriend,
			string pchMsgToSend) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamFriends _ptr is null!");
			return Native.SteamAPI_ISteamFriends_ReplyToFriendMessage(_ptr, steamIDFriend, pchMsgToSend);
		}

		public virtual int ISteamFriends_GetFriendMessage(
			ulong steamIDFriend,
			int iMessageID,
			IntPtr pvData,
			int cubData,
			out ChatEntryType peChatEntryType) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamFriends _ptr is null!");
			return Native.SteamAPI_ISteamFriends_GetFriendMessage(_ptr, steamIDFriend, iMessageID, pvData, cubData,
				out peChatEntryType);
		}

		public virtual SteamAPICall_t ISteamFriends_GetFollowerCount(ulong steamID) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_GetFollowerCount(_ptr, steamID)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual SteamAPICall_t ISteamFriends_IsFollowing(ulong steamID) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_IsFollowing(_ptr, steamID)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual SteamAPICall_t ISteamFriends_EnumerateFollowingList(uint unStartIndex) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_EnumerateFollowingList(_ptr, unStartIndex)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual uint ISteamUtils_GetSecondsSinceAppActive() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUtils_GetSecondsSinceAppActive(_ptr)
				: throw new Exception("ISteamUtils _ptr is null!");
		}

		public virtual uint ISteamUtils_GetSecondsSinceComputerActive() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUtils_GetSecondsSinceComputerActive(_ptr)
				: throw new Exception("ISteamUtils _ptr is null!");
		}

		public virtual Universe ISteamUtils_GetConnectedUniverse() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUtils_GetConnectedUniverse(_ptr)
				: throw new Exception("ISteamUtils _ptr is null!");
		}

		public virtual uint ISteamUtils_GetServerRealTime() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUtils_GetServerRealTime(_ptr)
				: throw new Exception("ISteamUtils _ptr is null!");
		}

		public virtual IntPtr ISteamUtils_GetIPCountry() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUtils_GetIPCountry(_ptr)
				: throw new Exception("ISteamUtils _ptr is null!");
		}

		public virtual bool ISteamUtils_GetImageSize(int iImage, out uint pnWidth, out uint pnHeight) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUtils_GetImageSize(_ptr, iImage, out pnWidth, out pnHeight)
				: throw new Exception("ISteamUtils _ptr is null!");
		}

		public virtual bool ISteamUtils_GetImageRGBA(int iImage, IntPtr pubDest, int nDestBufferSize) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUtils _ptr is null!");
			return Native.SteamAPI_ISteamUtils_GetImageRGBA(_ptr, iImage, pubDest, nDestBufferSize);
		}

		public virtual bool ISteamUtils_GetCSERIPPort(out uint unIP, out ushort usPort) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUtils_GetCSERIPPort(_ptr, out unIP, out usPort)
				: throw new Exception("ISteamUtils _ptr is null!");
		}

		public virtual byte ISteamUtils_GetCurrentBatteryPower() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUtils_GetCurrentBatteryPower(_ptr)
				: throw new Exception("ISteamUtils _ptr is null!");
		}

		public virtual uint ISteamUtils_GetAppID() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUtils_GetAppID(_ptr)
				: throw new Exception("ISteamUtils _ptr is null!");
		}

		public virtual void ISteamUtils_SetOverlayNotificationPosition(
			NotificationPosition eNotificationPosition) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUtils _ptr is null!");
			Native.SteamAPI_ISteamUtils_SetOverlayNotificationPosition(_ptr, eNotificationPosition);
		}

		public virtual bool ISteamUtils_IsAPICallCompleted(ulong hSteamAPICall,
			[MarshalAs(UnmanagedType.U1)] ref bool pbFailed) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUtils _ptr is null!");
			return Native.SteamAPI_ISteamUtils_IsAPICallCompleted(_ptr, hSteamAPICall, ref pbFailed);
		}

		public virtual SteamAPICallFailure ISteamUtils_GetAPICallFailureReason(ulong hSteamAPICall) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUtils_GetAPICallFailureReason(_ptr, hSteamAPICall)
				: throw new Exception("ISteamUtils _ptr is null!");
		}

		public virtual bool ISteamUtils_GetAPICallResult(
			ulong hSteamAPICall,
			IntPtr pCallback,
			int cubCallback,
			int iCallbackExpected,
			[MarshalAs(UnmanagedType.U1)] ref bool pbFailed) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUtils _ptr is null!");
			return Native.SteamAPI_ISteamUtils_GetAPICallResult(_ptr, hSteamAPICall, pCallback, cubCallback,
				iCallbackExpected, ref pbFailed);
		}

		public virtual uint ISteamUtils_GetIPCCallCount() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUtils_GetIPCCallCount(_ptr)
				: throw new Exception("ISteamUtils _ptr is null!");
		}

		public virtual void ISteamUtils_SetWarningMessageHook(IntPtr pFunction) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUtils _ptr is null!");
			Native.SteamAPI_ISteamUtils_SetWarningMessageHook(_ptr, pFunction);
		}

		public virtual bool ISteamUtils_IsOverlayEnabled() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUtils_IsOverlayEnabled(_ptr)
				: throw new Exception("ISteamUtils _ptr is null!");
		}

		public virtual bool ISteamUtils_BOverlayNeedsPresent() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUtils_BOverlayNeedsPresent(_ptr)
				: throw new Exception("ISteamUtils _ptr is null!");
		}

		public virtual SteamAPICall_t ISteamUtils_CheckFileSignature(string szFileName) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUtils_CheckFileSignature(_ptr, szFileName)
				: throw new Exception("ISteamUtils _ptr is null!");
		}

		public virtual bool ISteamUtils_ShowGamepadTextInput(
			GamepadTextInputMode eInputMode,
			GamepadTextInputLineMode eLineInputMode,
			string pchDescription,
			uint unCharMax,
			string pchExistingText) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUtils _ptr is null!");
			return Native.SteamAPI_ISteamUtils_ShowGamepadTextInput(_ptr, eInputMode, eLineInputMode, pchDescription,
				unCharMax, pchExistingText);
		}

		public virtual uint ISteamUtils_GetEnteredGamepadTextLength() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUtils_GetEnteredGamepadTextLength(_ptr)
				: throw new Exception("ISteamUtils _ptr is null!");
		}

		public virtual bool ISteamUtils_GetEnteredGamepadTextInput(
			StringBuilder pchText,
			uint cchText) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUtils _ptr is null!");
			return Native.SteamAPI_ISteamUtils_GetEnteredGamepadTextInput(_ptr, pchText, cchText);
		}

		public virtual IntPtr ISteamUtils_GetSteamUILanguage() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUtils_GetSteamUILanguage(_ptr)
				: throw new Exception("ISteamUtils _ptr is null!");
		}

		public virtual bool ISteamUtils_IsSteamRunningInVR() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUtils_IsSteamRunningInVR(_ptr)
				: throw new Exception("ISteamUtils _ptr is null!");
		}

		public virtual void ISteamUtils_SetOverlayNotificationInset(
			int nHorizontalInset,
			int nVerticalInset) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUtils _ptr is null!");
			Native.SteamAPI_ISteamUtils_SetOverlayNotificationInset(_ptr, nHorizontalInset, nVerticalInset);
		}

		public virtual bool ISteamUtils_IsSteamInBigPictureMode() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUtils_IsSteamInBigPictureMode(_ptr)
				: throw new Exception("ISteamUtils _ptr is null!");
		}

		public virtual void ISteamUtils_StartVRDashboard() {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUtils _ptr is null!");
			Native.SteamAPI_ISteamUtils_StartVRDashboard(_ptr);
		}

		public virtual bool ISteamUtils_IsVRHeadsetStreamingEnabled() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUtils_IsVRHeadsetStreamingEnabled(_ptr)
				: throw new Exception("ISteamUtils _ptr is null!");
		}

		public virtual void ISteamUtils_SetVRHeadsetStreamingEnabled([MarshalAs(UnmanagedType.U1)] bool bEnabled) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUtils _ptr is null!");
			Native.SteamAPI_ISteamUtils_SetVRHeadsetStreamingEnabled(_ptr, bEnabled);
		}

		public virtual int ISteamMatchmaking_GetFavoriteGameCount() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMatchmaking_GetFavoriteGameCount(_ptr)
				: throw new Exception("ISteamMatchmaking _ptr is null!");
		}

		public virtual bool ISteamMatchmaking_GetFavoriteGame(
			int iGame,
			ref uint pnAppID,
			out uint pnIP,
			out ushort pnConnPort,
			out ushort pnQueryPort,
			out uint punFlags,
			out uint pRTime32LastPlayedOnServer) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmaking _ptr is null!");
			return Native.SteamAPI_ISteamMatchmaking_GetFavoriteGame(_ptr, iGame, ref pnAppID, out pnIP, out pnConnPort,
				out pnQueryPort, out punFlags, out pRTime32LastPlayedOnServer);
		}

		public virtual int ISteamMatchmaking_AddFavoriteGame(
			uint nAppID,
			uint nIP,
			ushort nConnPort,
			ushort nQueryPort,
			uint unFlags,
			uint rTime32LastPlayedOnServer) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmaking _ptr is null!");
			return Native.SteamAPI_ISteamMatchmaking_AddFavoriteGame(_ptr, nAppID, nIP, nConnPort, nQueryPort, unFlags,
				rTime32LastPlayedOnServer);
		}

		public virtual bool ISteamMatchmaking_RemoveFavoriteGame(
			uint nAppID,
			uint nIP,
			ushort nConnPort,
			ushort nQueryPort,
			uint unFlags) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmaking _ptr is null!");
			return Native.SteamAPI_ISteamMatchmaking_RemoveFavoriteGame(_ptr, nAppID, nIP, nConnPort, nQueryPort,
				unFlags);
		}

		public virtual SteamAPICall_t ISteamMatchmaking_RequestLobbyList() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMatchmaking_RequestLobbyList(_ptr)
				: throw new Exception("ISteamMatchmaking _ptr is null!");
		}

		public virtual void ISteamMatchmaking_AddRequestLobbyListStringFilter(
			string pchKeyToMatch,
			string pchValueToMatch,
			LobbyComparison eComparisonType) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmaking _ptr is null!");
			Native.SteamAPI_ISteamMatchmaking_AddRequestLobbyListStringFilter(_ptr, pchKeyToMatch, pchValueToMatch,
				eComparisonType);
		}

		public virtual void ISteamMatchmaking_AddRequestLobbyListNumericalFilter(
			string pchKeyToMatch,
			int nValueToMatch,
			LobbyComparison eComparisonType) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmaking _ptr is null!");
			Native.SteamAPI_ISteamMatchmaking_AddRequestLobbyListNumericalFilter(_ptr, pchKeyToMatch, nValueToMatch,
				eComparisonType);
		}

		public virtual void ISteamMatchmaking_AddRequestLobbyListNearValueFilter(
			string pchKeyToMatch,
			int nValueToBeCloseTo) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmaking _ptr is null!");
			Native.SteamAPI_ISteamMatchmaking_AddRequestLobbyListNearValueFilter(_ptr, pchKeyToMatch,
				nValueToBeCloseTo);
		}

		public virtual void ISteamMatchmaking_AddRequestLobbyListFilterSlotsAvailable(
			int nSlotsAvailable) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmaking _ptr is null!");
			Native.SteamAPI_ISteamMatchmaking_AddRequestLobbyListFilterSlotsAvailable(_ptr, nSlotsAvailable);
		}

		public virtual void ISteamMatchmaking_AddRequestLobbyListDistanceFilter(
			LobbyDistanceFilter eLobbyDistanceFilter) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmaking _ptr is null!");
			Native.SteamAPI_ISteamMatchmaking_AddRequestLobbyListDistanceFilter(_ptr, eLobbyDistanceFilter);
		}

		public virtual void ISteamMatchmaking_AddRequestLobbyListResultCountFilter(int cMaxResults) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmaking _ptr is null!");
			Native.SteamAPI_ISteamMatchmaking_AddRequestLobbyListResultCountFilter(_ptr, cMaxResults);
		}

		public virtual void ISteamMatchmaking_AddRequestLobbyListCompatibleMembersFilter(
			ulong steamIDLobby) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmaking _ptr is null!");
			Native.SteamAPI_ISteamMatchmaking_AddRequestLobbyListCompatibleMembersFilter(_ptr, steamIDLobby);
		}

		public virtual CSteamID ISteamMatchmaking_GetLobbyByIndex(int iLobby) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMatchmaking_GetLobbyByIndex(_ptr, iLobby)
				: throw new Exception("ISteamMatchmaking _ptr is null!");
		}

		public virtual SteamAPICall_t ISteamMatchmaking_CreateLobby(
			LobbyType eLobbyType,
			int cMaxMembers) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmaking _ptr is null!");
			return Native.SteamAPI_ISteamMatchmaking_CreateLobby(_ptr, eLobbyType, cMaxMembers);
		}

		public virtual SteamAPICall_t ISteamMatchmaking_JoinLobby(ulong steamIDLobby) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMatchmaking_JoinLobby(_ptr, steamIDLobby)
				: throw new Exception("ISteamMatchmaking _ptr is null!");
		}

		public virtual void ISteamMatchmaking_LeaveLobby(ulong steamIDLobby) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmaking _ptr is null!");
			Native.SteamAPI_ISteamMatchmaking_LeaveLobby(_ptr, steamIDLobby);
		}

		public virtual bool ISteamMatchmaking_InviteUserToLobby(
			ulong steamIDLobby,
			ulong steamIDInvitee) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmaking _ptr is null!");
			return Native.SteamAPI_ISteamMatchmaking_InviteUserToLobby(_ptr, steamIDLobby, steamIDInvitee);
		}

		public virtual int ISteamMatchmaking_GetNumLobbyMembers(ulong steamIDLobby) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMatchmaking_GetNumLobbyMembers(_ptr, steamIDLobby)
				: throw new Exception("ISteamMatchmaking _ptr is null!");
		}

		public virtual CSteamID ISteamMatchmaking_GetLobbyMemberByIndex(
			ulong steamIDLobby,
			int iMember) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmaking _ptr is null!");
			return Native.SteamAPI_ISteamMatchmaking_GetLobbyMemberByIndex(_ptr, steamIDLobby, iMember);
		}

		public virtual IntPtr ISteamMatchmaking_GetLobbyData(ulong steamIDLobby, string pchKey) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmaking _ptr is null!");
			return Native.SteamAPI_ISteamMatchmaking_GetLobbyData(_ptr, steamIDLobby, pchKey);
		}

		public virtual bool ISteamMatchmaking_SetLobbyData(
			ulong steamIDLobby,
			string pchKey,
			string pchValue) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmaking _ptr is null!");
			return Native.SteamAPI_ISteamMatchmaking_SetLobbyData(_ptr, steamIDLobby, pchKey, pchValue);
		}

		public virtual int ISteamMatchmaking_GetLobbyDataCount(ulong steamIDLobby) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMatchmaking_GetLobbyDataCount(_ptr, steamIDLobby)
				: throw new Exception("ISteamMatchmaking _ptr is null!");
		}

		public virtual bool ISteamMatchmaking_GetLobbyDataByIndex(
			ulong steamIDLobby,
			int iLobbyData,
			StringBuilder pchKey,
			int cchKeyBufferSize,
			StringBuilder pchValue,
			int cchValueBufferSize) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmaking _ptr is null!");
			return Native.SteamAPI_ISteamMatchmaking_GetLobbyDataByIndex(_ptr, steamIDLobby, iLobbyData, pchKey,
				cchKeyBufferSize, pchValue, cchValueBufferSize);
		}

		public virtual bool ISteamMatchmaking_DeleteLobbyData(ulong steamIDLobby, string pchKey) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmaking _ptr is null!");
			return Native.SteamAPI_ISteamMatchmaking_DeleteLobbyData(_ptr, steamIDLobby, pchKey);
		}

		public virtual IntPtr ISteamMatchmaking_GetLobbyMemberData(
			ulong steamIDLobby,
			ulong steamIDUser,
			string pchKey) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmaking _ptr is null!");
			return Native.SteamAPI_ISteamMatchmaking_GetLobbyMemberData(_ptr, steamIDLobby, steamIDUser, pchKey);
		}

		public virtual void ISteamMatchmaking_SetLobbyMemberData(
			ulong steamIDLobby,
			string pchKey,
			string pchValue) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmaking _ptr is null!");
			Native.SteamAPI_ISteamMatchmaking_SetLobbyMemberData(_ptr, steamIDLobby, pchKey, pchValue);
		}

		public virtual bool ISteamMatchmaking_SendLobbyChatMsg(
			ulong steamIDLobby,
			IntPtr pvMsgBody,
			int cubMsgBody) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmaking _ptr is null!");
			return Native.SteamAPI_ISteamMatchmaking_SendLobbyChatMsg(_ptr, steamIDLobby, pvMsgBody, cubMsgBody);
		}

		public virtual int ISteamMatchmaking_GetLobbyChatEntry(
			ulong steamIDLobby,
			int iChatID,
			out ulong pSteamIDUser,
			IntPtr pvData,
			int cubData,
			out ChatEntryType peChatEntryType) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmaking _ptr is null!");
			return Native.SteamAPI_ISteamMatchmaking_GetLobbyChatEntry(_ptr, steamIDLobby, iChatID, out pSteamIDUser,
				pvData, cubData, out peChatEntryType);
		}

		public virtual bool ISteamMatchmaking_RequestLobbyData(ulong steamIDLobby) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMatchmaking_RequestLobbyData(_ptr, steamIDLobby)
				: throw new Exception("ISteamMatchmaking _ptr is null!");
		}

		public virtual void ISteamMatchmaking_SetLobbyGameServer(
			ulong steamIDLobby,
			uint unGameServerIP,
			ushort unGameServerPort,
			ulong steamIDGameServer) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmaking _ptr is null!");
			Native.SteamAPI_ISteamMatchmaking_SetLobbyGameServer(_ptr, steamIDLobby, unGameServerIP, unGameServerPort,
				steamIDGameServer);
		}

		public virtual bool ISteamMatchmaking_GetLobbyGameServer(
			ulong steamIDLobby,
			out uint punGameServerIP,
			out ushort punGameServerPort,
			out ulong psteamIDGameServer) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMatchmaking_GetLobbyGameServer(_ptr, steamIDLobby, out punGameServerIP,
					out punGameServerPort, out psteamIDGameServer)
				: throw new Exception("ISteamMatchmaking _ptr is null!");
		}

		public virtual bool ISteamMatchmaking_SetLobbyMemberLimit(ulong steamIDLobby, int cMaxMembers) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmaking _ptr is null!");
			return Native.SteamAPI_ISteamMatchmaking_SetLobbyMemberLimit(_ptr, steamIDLobby, cMaxMembers);
		}

		public virtual int ISteamMatchmaking_GetLobbyMemberLimit(ulong steamIDLobby) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMatchmaking_GetLobbyMemberLimit(_ptr, steamIDLobby)
				: throw new Exception("ISteamMatchmaking _ptr is null!");
		}

		public virtual bool ISteamMatchmaking_SetLobbyType(ulong steamIDLobby, LobbyType eLobbyType) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmaking _ptr is null!");
			return Native.SteamAPI_ISteamMatchmaking_SetLobbyType(_ptr, steamIDLobby, eLobbyType);
		}

		public virtual bool ISteamMatchmaking_SetLobbyJoinable(
			ulong steamIDLobby,
			[MarshalAs(UnmanagedType.U1)] bool bLobbyJoinable) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmaking _ptr is null!");
			return Native.SteamAPI_ISteamMatchmaking_SetLobbyJoinable(_ptr, steamIDLobby, bLobbyJoinable);
		}

		public virtual CSteamID ISteamMatchmaking_GetLobbyOwner(ulong steamIDLobby) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMatchmaking_GetLobbyOwner(_ptr, steamIDLobby)
				: throw new Exception("ISteamMatchmaking _ptr is null!");
		}

		public virtual bool ISteamMatchmaking_SetLobbyOwner(ulong steamIDLobby, ulong steamIDNewOwner) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmaking _ptr is null!");
			return Native.SteamAPI_ISteamMatchmaking_SetLobbyOwner(_ptr, steamIDLobby, steamIDNewOwner);
		}

		public virtual bool ISteamMatchmaking_SetLinkedLobby(
			ulong steamIDLobby,
			ulong steamIDLobbyDependent) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmaking _ptr is null!");
			return Native.SteamAPI_ISteamMatchmaking_SetLinkedLobby(_ptr, steamIDLobby, steamIDLobbyDependent);
		}

		public virtual HServerListRequest ISteamMatchmakingServers_RequestInternetServerList(
			uint iApp,
			IntPtr ppchFilters,
			uint nFilters,
			IntPtr pRequestServersResponse) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmakingServers _ptr is null!");
			return Native.SteamAPI_ISteamMatchmakingServers_RequestInternetServerList(_ptr, iApp, ppchFilters, nFilters,
				pRequestServersResponse);
		}

		public virtual HServerListRequest ISteamMatchmakingServers_RequestLANServerList(
			uint iApp,
			IntPtr pRequestServersResponse) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmakingServers _ptr is null!");
			return Native.SteamAPI_ISteamMatchmakingServers_RequestLANServerList(_ptr, iApp, pRequestServersResponse);
		}

		public virtual HServerListRequest ISteamMatchmakingServers_RequestFriendsServerList(
			uint iApp,
			IntPtr ppchFilters,
			uint nFilters,
			IntPtr pRequestServersResponse) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmakingServers _ptr is null!");
			return Native.SteamAPI_ISteamMatchmakingServers_RequestFriendsServerList(_ptr, iApp, ppchFilters, nFilters,
				pRequestServersResponse);
		}

		public virtual HServerListRequest ISteamMatchmakingServers_RequestFavoritesServerList(
			uint iApp,
			IntPtr ppchFilters,
			uint nFilters,
			IntPtr pRequestServersResponse) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmakingServers _ptr is null!");
			return Native.SteamAPI_ISteamMatchmakingServers_RequestFavoritesServerList(_ptr, iApp, ppchFilters,
				nFilters, pRequestServersResponse);
		}

		public virtual HServerListRequest ISteamMatchmakingServers_RequestHistoryServerList(
			uint iApp,
			IntPtr ppchFilters,
			uint nFilters,
			IntPtr pRequestServersResponse) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmakingServers _ptr is null!");
			return Native.SteamAPI_ISteamMatchmakingServers_RequestHistoryServerList(_ptr, iApp, ppchFilters, nFilters,
				pRequestServersResponse);
		}

		public virtual HServerListRequest ISteamMatchmakingServers_RequestSpectatorServerList(
			uint iApp,
			IntPtr ppchFilters,
			uint nFilters,
			IntPtr pRequestServersResponse) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmakingServers _ptr is null!");
			return Native.SteamAPI_ISteamMatchmakingServers_RequestSpectatorServerList(_ptr, iApp, ppchFilters,
				nFilters, pRequestServersResponse);
		}

		public virtual void ISteamMatchmakingServers_ReleaseRequest(IntPtr hServerListRequest) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmakingServers _ptr is null!");
			Native.SteamAPI_ISteamMatchmakingServers_ReleaseRequest(_ptr, hServerListRequest);
		}

		public virtual IntPtr ISteamMatchmakingServers_GetServerDetails(IntPtr hRequest, int iServer) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmakingServers _ptr is null!");
			return Native.SteamAPI_ISteamMatchmakingServers_GetServerDetails(_ptr, hRequest, iServer);
		}

		public virtual void ISteamMatchmakingServers_CancelQuery(IntPtr hRequest) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmakingServers _ptr is null!");
			Native.SteamAPI_ISteamMatchmakingServers_CancelQuery(_ptr, hRequest);
		}

		public virtual void ISteamMatchmakingServers_RefreshQuery(IntPtr hRequest) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmakingServers _ptr is null!");
			Native.SteamAPI_ISteamMatchmakingServers_RefreshQuery(_ptr, hRequest);
		}

		public virtual bool ISteamMatchmakingServers_IsRefreshing(IntPtr hRequest) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMatchmakingServers_IsRefreshing(_ptr, hRequest)
				: throw new Exception("ISteamMatchmakingServers _ptr is null!");
		}

		public virtual int ISteamMatchmakingServers_GetServerCount(IntPtr hRequest) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMatchmakingServers_GetServerCount(_ptr, hRequest)
				: throw new Exception("ISteamMatchmakingServers _ptr is null!");
		}

		public virtual void ISteamMatchmakingServers_RefreshServer(IntPtr hRequest, int iServer) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmakingServers _ptr is null!");
			Native.SteamAPI_ISteamMatchmakingServers_RefreshServer(_ptr, hRequest, iServer);
		}

		public virtual HServerQuery ISteamMatchmakingServers_PingServer(
			uint unIP,
			ushort usPort,
			IntPtr pRequestServersResponse) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmakingServers _ptr is null!");
			return Native.SteamAPI_ISteamMatchmakingServers_PingServer(_ptr, unIP, usPort, pRequestServersResponse);
		}

		public virtual HServerQuery ISteamMatchmakingServers_PlayerDetails(
			uint unIP,
			ushort usPort,
			IntPtr pRequestServersResponse) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmakingServers _ptr is null!");
			return Native.SteamAPI_ISteamMatchmakingServers_PlayerDetails(_ptr, unIP, usPort, pRequestServersResponse);
		}

		public virtual HServerQuery ISteamMatchmakingServers_ServerRules(
			uint unIP,
			ushort usPort,
			IntPtr pRequestServersResponse) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmakingServers _ptr is null!");
			return Native.SteamAPI_ISteamMatchmakingServers_ServerRules(_ptr, unIP, usPort, pRequestServersResponse);
		}

		public virtual void ISteamMatchmakingServers_CancelServerQuery(int hServerQuery) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmakingServers _ptr is null!");
			Native.SteamAPI_ISteamMatchmakingServers_CancelServerQuery(_ptr, hServerQuery);
		}

		public virtual bool ISteamRemoteStorage_FileWrite(string pchFile, IntPtr pvData, int cubData) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamRemoteStorage _ptr is null!");
			return Native.SteamAPI_ISteamRemoteStorage_FileWrite(_ptr, pchFile, pvData, cubData);
		}

		public virtual int ISteamRemoteStorage_FileRead(
			string pchFile,
			IntPtr pvData,
			int cubDataToRead) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamRemoteStorage _ptr is null!");
			return Native.SteamAPI_ISteamRemoteStorage_FileRead(_ptr, pchFile, pvData, cubDataToRead);
		}

		public virtual SteamAPICall_t ISteamRemoteStorage_FileWriteAsync(
			string pchFile,
			IntPtr pvData,
			uint cubData) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamRemoteStorage _ptr is null!");
			return Native.SteamAPI_ISteamRemoteStorage_FileWriteAsync(_ptr, pchFile, pvData, cubData);
		}

		public virtual SteamAPICall_t ISteamRemoteStorage_FileReadAsync(
			string pchFile,
			uint nOffset,
			uint cubToRead) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamRemoteStorage _ptr is null!");
			return Native.SteamAPI_ISteamRemoteStorage_FileReadAsync(_ptr, pchFile, nOffset, cubToRead);
		}

		public virtual bool ISteamRemoteStorage_FileReadAsyncComplete(
			ulong hReadCall,
			IntPtr pvBuffer,
			uint cubToRead) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamRemoteStorage _ptr is null!");
			return Native.SteamAPI_ISteamRemoteStorage_FileReadAsyncComplete(_ptr, hReadCall, pvBuffer, cubToRead);
		}

		public virtual bool ISteamRemoteStorage_FileForget(string pchFile) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamRemoteStorage_FileForget(_ptr, pchFile)
				: throw new Exception("ISteamRemoteStorage _ptr is null!");
		}

		public virtual bool ISteamRemoteStorage_FileDelete(string pchFile) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamRemoteStorage_FileDelete(_ptr, pchFile)
				: throw new Exception("ISteamRemoteStorage _ptr is null!");
		}

		public virtual SteamAPICall_t ISteamRemoteStorage_FileShare(string pchFile) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamRemoteStorage_FileShare(_ptr, pchFile)
				: throw new Exception("ISteamRemoteStorage _ptr is null!");
		}

		public virtual bool ISteamRemoteStorage_SetSyncPlatforms(
			string pchFile,
			RemoteStoragePlatform eRemoteStoragePlatform) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamRemoteStorage _ptr is null!");
			return Native.SteamAPI_ISteamRemoteStorage_SetSyncPlatforms(_ptr, pchFile, eRemoteStoragePlatform);
		}

		public virtual UGCFileWriteStreamHandle_t ISteamRemoteStorage_FileWriteStreamOpen(
			string pchFile) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamRemoteStorage_FileWriteStreamOpen(_ptr, pchFile)
				: throw new Exception("ISteamRemoteStorage _ptr is null!");
		}

		public virtual bool ISteamRemoteStorage_FileWriteStreamWriteChunk(
			ulong writeHandle,
			IntPtr pvData,
			int cubData) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamRemoteStorage _ptr is null!");
			return Native.SteamAPI_ISteamRemoteStorage_FileWriteStreamWriteChunk(_ptr, writeHandle, pvData, cubData);
		}

		public virtual bool ISteamRemoteStorage_FileWriteStreamClose(ulong writeHandle) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamRemoteStorage_FileWriteStreamClose(_ptr, writeHandle)
				: throw new Exception("ISteamRemoteStorage _ptr is null!");
		}

		public virtual bool ISteamRemoteStorage_FileWriteStreamCancel(ulong writeHandle) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamRemoteStorage_FileWriteStreamCancel(_ptr, writeHandle)
				: throw new Exception("ISteamRemoteStorage _ptr is null!");
		}

		public virtual bool ISteamRemoteStorage_FileExists(string pchFile) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamRemoteStorage_FileExists(_ptr, pchFile)
				: throw new Exception("ISteamRemoteStorage _ptr is null!");
		}

		public virtual bool ISteamRemoteStorage_FilePersisted(string pchFile) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamRemoteStorage_FilePersisted(_ptr, pchFile)
				: throw new Exception("ISteamRemoteStorage _ptr is null!");
		}

		public virtual int ISteamRemoteStorage_GetFileSize(string pchFile) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamRemoteStorage_GetFileSize(_ptr, pchFile)
				: throw new Exception("ISteamRemoteStorage _ptr is null!");
		}

		public virtual long ISteamRemoteStorage_GetFileTimestamp(string pchFile) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamRemoteStorage_GetFileTimestamp(_ptr, pchFile)
				: throw new Exception("ISteamRemoteStorage _ptr is null!");
		}

		public virtual RemoteStoragePlatform ISteamRemoteStorage_GetSyncPlatforms(string pchFile) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamRemoteStorage_GetSyncPlatforms(_ptr, pchFile)
				: throw new Exception("ISteamRemoteStorage _ptr is null!");
		}

		public virtual int ISteamRemoteStorage_GetFileCount() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamRemoteStorage_GetFileCount(_ptr)
				: throw new Exception("ISteamRemoteStorage _ptr is null!");
		}

		public virtual IntPtr ISteamRemoteStorage_GetFileNameAndSize(
			int iFile,
			out int pnFileSizeInBytes) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamRemoteStorage_GetFileNameAndSize(_ptr, iFile, out pnFileSizeInBytes)
				: throw new Exception("ISteamRemoteStorage _ptr is null!");
		}

		public virtual bool ISteamRemoteStorage_GetQuota(
			out ulong pnTotalBytes,
			out ulong puAvailableBytes) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamRemoteStorage_GetQuota(_ptr, out pnTotalBytes, out puAvailableBytes)
				: throw new Exception("ISteamRemoteStorage _ptr is null!");
		}

		public virtual bool ISteamRemoteStorage_IsCloudEnabledForAccount() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamRemoteStorage_IsCloudEnabledForAccount(_ptr)
				: throw new Exception("ISteamRemoteStorage _ptr is null!");
		}

		public virtual bool ISteamRemoteStorage_IsCloudEnabledForApp() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamRemoteStorage_IsCloudEnabledForApp(_ptr)
				: throw new Exception("ISteamRemoteStorage _ptr is null!");
		}

		public virtual void ISteamRemoteStorage_SetCloudEnabledForApp([MarshalAs(UnmanagedType.U1)] bool bEnabled) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamRemoteStorage _ptr is null!");
			Native.SteamAPI_ISteamRemoteStorage_SetCloudEnabledForApp(_ptr, bEnabled);
		}

		public virtual SteamAPICall_t ISteamRemoteStorage_UGCDownload(ulong hContent, uint unPriority) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamRemoteStorage _ptr is null!");
			return Native.SteamAPI_ISteamRemoteStorage_UGCDownload(_ptr, hContent, unPriority);
		}

		public virtual bool ISteamRemoteStorage_GetUGCDownloadProgress(
			ulong hContent,
			out int pnBytesDownloaded,
			out int pnBytesExpected) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamRemoteStorage_GetUGCDownloadProgress(_ptr, hContent, out pnBytesDownloaded,
					out pnBytesExpected)
				: throw new Exception("ISteamRemoteStorage _ptr is null!");
		}

		public virtual bool ISteamRemoteStorage_GetUGCDetails(
			ulong hContent,
			ref uint pnAppID,
			StringBuilder ppchName,
			out int pnFileSizeInBytes,
			out ulong pSteamIDOwner) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamRemoteStorage _ptr is null!");
			return Native.SteamAPI_ISteamRemoteStorage_GetUGCDetails(_ptr, hContent, ref pnAppID, ppchName,
				out pnFileSizeInBytes, out pSteamIDOwner);
		}

		public virtual int ISteamRemoteStorage_UGCRead(
			ulong hContent,
			IntPtr pvData,
			int cubDataToRead,
			uint cOffset,
			UGCReadAction eAction) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamRemoteStorage _ptr is null!");
			return Native.SteamAPI_ISteamRemoteStorage_UGCRead(_ptr, hContent, pvData, cubDataToRead, cOffset, eAction);
		}

		public virtual int ISteamRemoteStorage_GetCachedUGCCount() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamRemoteStorage_GetCachedUGCCount(_ptr)
				: throw new Exception("ISteamRemoteStorage _ptr is null!");
		}

		public virtual UGCHandle_t ISteamRemoteStorage_GetCachedUGCHandle(int iCachedContent) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamRemoteStorage_GetCachedUGCHandle(_ptr, iCachedContent)
				: throw new Exception("ISteamRemoteStorage _ptr is null!");
		}

		public virtual SteamAPICall_t ISteamRemoteStorage_PublishWorkshopFile(
			string pchFile,
			string pchPreviewFile,
			uint nConsumerAppId,
			string pchTitle,
			string pchDescription,
			RemoteStoragePublishedFileVisibility eVisibility,
			ref SteamParamStringArray_t pTags,
			WorkshopFileType eWorkshopFileType) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamRemoteStorage _ptr is null!");
			var pTags1 = new SteamParamStringArray_t.PackSmall();
			var steamApiCallT = Native.SteamAPI_ISteamRemoteStorage_PublishWorkshopFile(_ptr, pchFile, pchPreviewFile,
				nConsumerAppId, pchTitle, pchDescription, eVisibility, ref pTags1, eWorkshopFileType);
			pTags = (SteamParamStringArray_t)pTags1;
			return steamApiCallT;
		}

		public virtual PublishedFileUpdateHandle_t ISteamRemoteStorage_CreatePublishedFileUpdateRequest(
			ulong unPublishedFileId) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamRemoteStorage_CreatePublishedFileUpdateRequest(_ptr, unPublishedFileId)
				: throw new Exception("ISteamRemoteStorage _ptr is null!");
		}

		public virtual bool ISteamRemoteStorage_UpdatePublishedFileFile(
			ulong updateHandle,
			string pchFile) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamRemoteStorage _ptr is null!");
			return Native.SteamAPI_ISteamRemoteStorage_UpdatePublishedFileFile(_ptr, updateHandle, pchFile);
		}

		public virtual bool ISteamRemoteStorage_UpdatePublishedFilePreviewFile(
			ulong updateHandle,
			string pchPreviewFile) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamRemoteStorage _ptr is null!");
			return Native.SteamAPI_ISteamRemoteStorage_UpdatePublishedFilePreviewFile(_ptr, updateHandle,
				pchPreviewFile);
		}

		public virtual bool ISteamRemoteStorage_UpdatePublishedFileTitle(
			ulong updateHandle,
			string pchTitle) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamRemoteStorage _ptr is null!");
			return Native.SteamAPI_ISteamRemoteStorage_UpdatePublishedFileTitle(_ptr, updateHandle, pchTitle);
		}

		public virtual bool ISteamRemoteStorage_UpdatePublishedFileDescription(
			ulong updateHandle,
			string pchDescription) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamRemoteStorage _ptr is null!");
			return Native.SteamAPI_ISteamRemoteStorage_UpdatePublishedFileDescription(_ptr, updateHandle,
				pchDescription);
		}

		public virtual bool ISteamRemoteStorage_UpdatePublishedFileVisibility(
			ulong updateHandle,
			RemoteStoragePublishedFileVisibility eVisibility) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamRemoteStorage _ptr is null!");
			return Native.SteamAPI_ISteamRemoteStorage_UpdatePublishedFileVisibility(_ptr, updateHandle, eVisibility);
		}

		public virtual bool ISteamRemoteStorage_UpdatePublishedFileTags(
			ulong updateHandle,
			ref SteamParamStringArray_t pTags) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamRemoteStorage _ptr is null!");
			var pTags1 = new SteamParamStringArray_t.PackSmall();
			var flag = Native.SteamAPI_ISteamRemoteStorage_UpdatePublishedFileTags(_ptr, updateHandle, ref pTags1);
			pTags = (SteamParamStringArray_t)pTags1;
			return flag;
		}

		public virtual SteamAPICall_t ISteamRemoteStorage_CommitPublishedFileUpdate(ulong updateHandle) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamRemoteStorage_CommitPublishedFileUpdate(_ptr, updateHandle)
				: throw new Exception("ISteamRemoteStorage _ptr is null!");
		}

		public virtual SteamAPICall_t ISteamRemoteStorage_GetPublishedFileDetails(
			ulong unPublishedFileId,
			uint unMaxSecondsOld) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamRemoteStorage _ptr is null!");
			return Native.SteamAPI_ISteamRemoteStorage_GetPublishedFileDetails(_ptr, unPublishedFileId,
				unMaxSecondsOld);
		}

		public virtual SteamAPICall_t ISteamRemoteStorage_DeletePublishedFile(ulong unPublishedFileId) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamRemoteStorage_DeletePublishedFile(_ptr, unPublishedFileId)
				: throw new Exception("ISteamRemoteStorage _ptr is null!");
		}

		public virtual SteamAPICall_t ISteamRemoteStorage_EnumerateUserPublishedFiles(
			uint unStartIndex) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamRemoteStorage_EnumerateUserPublishedFiles(_ptr, unStartIndex)
				: throw new Exception("ISteamRemoteStorage _ptr is null!");
		}

		public virtual SteamAPICall_t ISteamRemoteStorage_SubscribePublishedFile(
			ulong unPublishedFileId) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamRemoteStorage_SubscribePublishedFile(_ptr, unPublishedFileId)
				: throw new Exception("ISteamRemoteStorage _ptr is null!");
		}

		public virtual SteamAPICall_t ISteamRemoteStorage_EnumerateUserSubscribedFiles(
			uint unStartIndex) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamRemoteStorage_EnumerateUserSubscribedFiles(_ptr, unStartIndex)
				: throw new Exception("ISteamRemoteStorage _ptr is null!");
		}

		public virtual SteamAPICall_t ISteamRemoteStorage_UnsubscribePublishedFile(
			ulong unPublishedFileId) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamRemoteStorage_UnsubscribePublishedFile(_ptr, unPublishedFileId)
				: throw new Exception("ISteamRemoteStorage _ptr is null!");
		}

		public virtual bool ISteamRemoteStorage_UpdatePublishedFileSetChangeDescription(
			ulong updateHandle,
			string pchChangeDescription) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamRemoteStorage _ptr is null!");
			return Native.SteamAPI_ISteamRemoteStorage_UpdatePublishedFileSetChangeDescription(_ptr, updateHandle,
				pchChangeDescription);
		}

		public virtual SteamAPICall_t ISteamRemoteStorage_GetPublishedItemVoteDetails(
			ulong unPublishedFileId) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamRemoteStorage_GetPublishedItemVoteDetails(_ptr, unPublishedFileId)
				: throw new Exception("ISteamRemoteStorage _ptr is null!");
		}

		public virtual SteamAPICall_t ISteamRemoteStorage_UpdateUserPublishedItemVote(
			ulong unPublishedFileId,
			[MarshalAs(UnmanagedType.U1)] bool bVoteUp) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamRemoteStorage _ptr is null!");
			return Native.SteamAPI_ISteamRemoteStorage_UpdateUserPublishedItemVote(_ptr, unPublishedFileId, bVoteUp);
		}

		public virtual SteamAPICall_t ISteamRemoteStorage_GetUserPublishedItemVoteDetails(
			ulong unPublishedFileId) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamRemoteStorage_GetUserPublishedItemVoteDetails(_ptr, unPublishedFileId)
				: throw new Exception("ISteamRemoteStorage _ptr is null!");
		}

		public virtual SteamAPICall_t ISteamRemoteStorage_EnumerateUserSharedWorkshopFiles(
			ulong steamId,
			uint unStartIndex,
			ref SteamParamStringArray_t pRequiredTags,
			ref SteamParamStringArray_t pExcludedTags) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamRemoteStorage _ptr is null!");
			var pRequiredTags1 = new SteamParamStringArray_t.PackSmall();
			var pExcludedTags1 = new SteamParamStringArray_t.PackSmall();
			var steamApiCallT = Native.SteamAPI_ISteamRemoteStorage_EnumerateUserSharedWorkshopFiles(_ptr, steamId,
				unStartIndex, ref pRequiredTags1, ref pExcludedTags1);
			pRequiredTags = (SteamParamStringArray_t)pRequiredTags1;
			pExcludedTags = (SteamParamStringArray_t)pExcludedTags1;
			return steamApiCallT;
		}

		public virtual SteamAPICall_t ISteamRemoteStorage_PublishVideo(
			WorkshopVideoProvider eVideoProvider,
			string pchVideoAccount,
			string pchVideoIdentifier,
			string pchPreviewFile,
			uint nConsumerAppId,
			string pchTitle,
			string pchDescription,
			RemoteStoragePublishedFileVisibility eVisibility,
			ref SteamParamStringArray_t pTags) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamRemoteStorage _ptr is null!");
			var pTags1 = new SteamParamStringArray_t.PackSmall();
			var steamApiCallT = Native.SteamAPI_ISteamRemoteStorage_PublishVideo(_ptr, eVideoProvider, pchVideoAccount,
				pchVideoIdentifier, pchPreviewFile, nConsumerAppId, pchTitle, pchDescription, eVisibility, ref pTags1);
			pTags = (SteamParamStringArray_t)pTags1;
			return steamApiCallT;
		}

		public virtual SteamAPICall_t ISteamRemoteStorage_SetUserPublishedFileAction(
			ulong unPublishedFileId,
			WorkshopFileAction eAction) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamRemoteStorage _ptr is null!");
			return Native.SteamAPI_ISteamRemoteStorage_SetUserPublishedFileAction(_ptr, unPublishedFileId, eAction);
		}

		public virtual SteamAPICall_t ISteamRemoteStorage_EnumeratePublishedFilesByUserAction(
			WorkshopFileAction eAction,
			uint unStartIndex) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamRemoteStorage _ptr is null!");
			return Native.SteamAPI_ISteamRemoteStorage_EnumeratePublishedFilesByUserAction(_ptr, eAction, unStartIndex);
		}

		public virtual SteamAPICall_t ISteamRemoteStorage_EnumeratePublishedWorkshopFiles(
			WorkshopEnumerationType eEnumerationType,
			uint unStartIndex,
			uint unCount,
			uint unDays,
			ref SteamParamStringArray_t pTags,
			ref SteamParamStringArray_t pUserTags) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamRemoteStorage _ptr is null!");
			var pTags1 = new SteamParamStringArray_t.PackSmall();
			var pUserTags1 = new SteamParamStringArray_t.PackSmall();
			var steamApiCallT = Native.SteamAPI_ISteamRemoteStorage_EnumeratePublishedWorkshopFiles(_ptr,
				eEnumerationType, unStartIndex, unCount, unDays, ref pTags1, ref pUserTags1);
			pTags = (SteamParamStringArray_t)pTags1;
			pUserTags = (SteamParamStringArray_t)pUserTags1;
			return steamApiCallT;
		}

		public virtual SteamAPICall_t ISteamRemoteStorage_UGCDownloadToLocation(
			ulong hContent,
			string pchLocation,
			uint unPriority) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamRemoteStorage _ptr is null!");
			return Native.SteamAPI_ISteamRemoteStorage_UGCDownloadToLocation(_ptr, hContent, pchLocation, unPriority);
		}

		public virtual bool ISteamUserStats_RequestCurrentStats() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUserStats_RequestCurrentStats(_ptr)
				: throw new Exception("ISteamUserStats _ptr is null!");
		}

		public virtual bool ISteamUserStats_GetStat(string pchName, out int pData) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUserStats_GetStat(_ptr, pchName, out pData)
				: throw new Exception("ISteamUserStats _ptr is null!");
		}

		public virtual bool ISteamUserStats_GetStat0(string pchName, out float pData) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUserStats_GetStat0(_ptr, pchName, out pData)
				: throw new Exception("ISteamUserStats _ptr is null!");
		}

		public virtual bool ISteamUserStats_SetStat(string pchName, int nData) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUserStats _ptr is null!");
			return Native.SteamAPI_ISteamUserStats_SetStat(_ptr, pchName, nData);
		}

		public virtual bool ISteamUserStats_SetStat0(string pchName, float fData) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUserStats _ptr is null!");
			return Native.SteamAPI_ISteamUserStats_SetStat0(_ptr, pchName, fData);
		}

		public virtual bool ISteamUserStats_UpdateAvgRateStat(
			string pchName,
			float flCountThisSession,
			double dSessionLength) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUserStats _ptr is null!");
			return Native.SteamAPI_ISteamUserStats_UpdateAvgRateStat(_ptr, pchName, flCountThisSession, dSessionLength);
		}

		public virtual bool ISteamUserStats_GetAchievement(string pchName,
			[MarshalAs(UnmanagedType.U1)] ref bool pbAchieved) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUserStats _ptr is null!");
			return Native.SteamAPI_ISteamUserStats_GetAchievement(_ptr, pchName, ref pbAchieved);
		}

		public virtual bool ISteamUserStats_SetAchievement(string pchName) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUserStats_SetAchievement(_ptr, pchName)
				: throw new Exception("ISteamUserStats _ptr is null!");
		}

		public virtual bool ISteamUserStats_ClearAchievement(string pchName) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUserStats_ClearAchievement(_ptr, pchName)
				: throw new Exception("ISteamUserStats _ptr is null!");
		}

		public virtual bool ISteamUserStats_GetAchievementAndUnlockTime(
			string pchName,
			[MarshalAs(UnmanagedType.U1)] ref bool pbAchieved,
			out uint punUnlockTime) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUserStats _ptr is null!");
			return Native.SteamAPI_ISteamUserStats_GetAchievementAndUnlockTime(_ptr, pchName, ref pbAchieved,
				out punUnlockTime);
		}

		public virtual bool ISteamUserStats_StoreStats() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUserStats_StoreStats(_ptr)
				: throw new Exception("ISteamUserStats _ptr is null!");
		}

		public virtual int ISteamUserStats_GetAchievementIcon(string pchName) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUserStats_GetAchievementIcon(_ptr, pchName)
				: throw new Exception("ISteamUserStats _ptr is null!");
		}

		public virtual IntPtr ISteamUserStats_GetAchievementDisplayAttribute(
			string pchName,
			string pchKey) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUserStats _ptr is null!");
			return Native.SteamAPI_ISteamUserStats_GetAchievementDisplayAttribute(_ptr, pchName, pchKey);
		}

		public virtual bool ISteamUserStats_IndicateAchievementProgress(
			string pchName,
			uint nCurProgress,
			uint nMaxProgress) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUserStats _ptr is null!");
			return Native.SteamAPI_ISteamUserStats_IndicateAchievementProgress(_ptr, pchName, nCurProgress,
				nMaxProgress);
		}

		public virtual uint ISteamUserStats_GetNumAchievements() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUserStats_GetNumAchievements(_ptr)
				: throw new Exception("ISteamUserStats _ptr is null!");
		}

		public virtual IntPtr ISteamUserStats_GetAchievementName(uint iAchievement) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUserStats_GetAchievementName(_ptr, iAchievement)
				: throw new Exception("ISteamUserStats _ptr is null!");
		}

		public virtual SteamAPICall_t ISteamUserStats_RequestUserStats(ulong steamIDUser) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUserStats_RequestUserStats(_ptr, steamIDUser)
				: throw new Exception("ISteamUserStats _ptr is null!");
		}

		public virtual bool ISteamUserStats_GetUserStat(
			ulong steamIDUser,
			string pchName,
			out int pData) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUserStats _ptr is null!");
			return Native.SteamAPI_ISteamUserStats_GetUserStat(_ptr, steamIDUser, pchName, out pData);
		}

		public virtual bool ISteamUserStats_GetUserStat0(
			ulong steamIDUser,
			string pchName,
			out float pData) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUserStats _ptr is null!");
			return Native.SteamAPI_ISteamUserStats_GetUserStat0(_ptr, steamIDUser, pchName, out pData);
		}

		public virtual bool ISteamUserStats_GetUserAchievement(
			ulong steamIDUser,
			string pchName,
			[MarshalAs(UnmanagedType.U1)] ref bool pbAchieved) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUserStats _ptr is null!");
			return Native.SteamAPI_ISteamUserStats_GetUserAchievement(_ptr, steamIDUser, pchName, ref pbAchieved);
		}

		public virtual bool ISteamUserStats_GetUserAchievementAndUnlockTime(
			ulong steamIDUser,
			string pchName,
			[MarshalAs(UnmanagedType.U1)] ref bool pbAchieved,
			out uint punUnlockTime) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUserStats _ptr is null!");
			return Native.SteamAPI_ISteamUserStats_GetUserAchievementAndUnlockTime(_ptr, steamIDUser, pchName,
				ref pbAchieved, out punUnlockTime);
		}

		public virtual bool ISteamUserStats_ResetAllStats([MarshalAs(UnmanagedType.U1)] bool bAchievementsToo) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUserStats_ResetAllStats(_ptr, bAchievementsToo)
				: throw new Exception("ISteamUserStats _ptr is null!");
		}

		public virtual SteamAPICall_t ISteamUserStats_FindOrCreateLeaderboard(
			string pchLeaderboardName,
			LeaderboardSortMethod eLeaderboardSortMethod,
			LeaderboardDisplayType eLeaderboardDisplayType) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUserStats _ptr is null!");
			return Native.SteamAPI_ISteamUserStats_FindOrCreateLeaderboard(_ptr, pchLeaderboardName,
				eLeaderboardSortMethod, eLeaderboardDisplayType);
		}

		public virtual SteamAPICall_t ISteamUserStats_FindLeaderboard(string pchLeaderboardName) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUserStats_FindLeaderboard(_ptr, pchLeaderboardName)
				: throw new Exception("ISteamUserStats _ptr is null!");
		}

		public virtual IntPtr ISteamUserStats_GetLeaderboardName(ulong hSteamLeaderboard) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUserStats_GetLeaderboardName(_ptr, hSteamLeaderboard)
				: throw new Exception("ISteamUserStats _ptr is null!");
		}

		public virtual int ISteamUserStats_GetLeaderboardEntryCount(ulong hSteamLeaderboard) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUserStats_GetLeaderboardEntryCount(_ptr, hSteamLeaderboard)
				: throw new Exception("ISteamUserStats _ptr is null!");
		}

		public virtual LeaderboardSortMethod ISteamUserStats_GetLeaderboardSortMethod(
			ulong hSteamLeaderboard) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUserStats_GetLeaderboardSortMethod(_ptr, hSteamLeaderboard)
				: throw new Exception("ISteamUserStats _ptr is null!");
		}

		public virtual LeaderboardDisplayType ISteamUserStats_GetLeaderboardDisplayType(
			ulong hSteamLeaderboard) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUserStats_GetLeaderboardDisplayType(_ptr, hSteamLeaderboard)
				: throw new Exception("ISteamUserStats _ptr is null!");
		}

		public virtual SteamAPICall_t ISteamUserStats_DownloadLeaderboardEntries(
			ulong hSteamLeaderboard,
			LeaderboardDataRequest eLeaderboardDataRequest,
			int nRangeStart,
			int nRangeEnd) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUserStats _ptr is null!");
			return Native.SteamAPI_ISteamUserStats_DownloadLeaderboardEntries(_ptr, hSteamLeaderboard,
				eLeaderboardDataRequest, nRangeStart, nRangeEnd);
		}

		public virtual SteamAPICall_t ISteamUserStats_DownloadLeaderboardEntriesForUsers(
			ulong hSteamLeaderboard,
			IntPtr prgUsers,
			int cUsers) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUserStats _ptr is null!");
			return Native.SteamAPI_ISteamUserStats_DownloadLeaderboardEntriesForUsers(_ptr, hSteamLeaderboard, prgUsers,
				cUsers);
		}

		public virtual bool ISteamUserStats_GetDownloadedLeaderboardEntry(
			ulong hSteamLeaderboardEntries,
			int index,
			ref LeaderboardEntry_t pLeaderboardEntry,
			IntPtr pDetails,
			int cDetailsMax) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUserStats _ptr is null!");
			var pLeaderboardEntry1 = new LeaderboardEntry_t.PackSmall();
			var leaderboardEntry = Native.SteamAPI_ISteamUserStats_GetDownloadedLeaderboardEntry(_ptr,
				hSteamLeaderboardEntries, index, ref pLeaderboardEntry1, pDetails, cDetailsMax);
			pLeaderboardEntry = (LeaderboardEntry_t)pLeaderboardEntry1;
			return leaderboardEntry;
		}

		public virtual SteamAPICall_t ISteamUserStats_UploadLeaderboardScore(
			ulong hSteamLeaderboard,
			LeaderboardUploadScoreMethod eLeaderboardUploadScoreMethod,
			int nScore,
			int[] pScoreDetails,
			int cScoreDetailsCount) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUserStats _ptr is null!");
			return Native.SteamAPI_ISteamUserStats_UploadLeaderboardScore(_ptr, hSteamLeaderboard,
				eLeaderboardUploadScoreMethod, nScore, pScoreDetails, cScoreDetailsCount);
		}

		public virtual SteamAPICall_t ISteamUserStats_AttachLeaderboardUGC(
			ulong hSteamLeaderboard,
			ulong hUGC) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUserStats _ptr is null!");
			return Native.SteamAPI_ISteamUserStats_AttachLeaderboardUGC(_ptr, hSteamLeaderboard, hUGC);
		}

		public virtual SteamAPICall_t ISteamUserStats_GetNumberOfCurrentPlayers() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUserStats_GetNumberOfCurrentPlayers(_ptr)
				: throw new Exception("ISteamUserStats _ptr is null!");
		}

		public virtual SteamAPICall_t ISteamUserStats_RequestGlobalAchievementPercentages() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUserStats_RequestGlobalAchievementPercentages(_ptr)
				: throw new Exception("ISteamUserStats _ptr is null!");
		}

		public virtual int ISteamUserStats_GetMostAchievedAchievementInfo(
			StringBuilder pchName,
			uint unNameBufLen,
			out float pflPercent,
			[MarshalAs(UnmanagedType.U1)] ref bool pbAchieved) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUserStats _ptr is null!");
			return Native.SteamAPI_ISteamUserStats_GetMostAchievedAchievementInfo(_ptr, pchName, unNameBufLen,
				out pflPercent, ref pbAchieved);
		}

		public virtual int ISteamUserStats_GetNextMostAchievedAchievementInfo(
			int iIteratorPrevious,
			StringBuilder pchName,
			uint unNameBufLen,
			out float pflPercent,
			[MarshalAs(UnmanagedType.U1)] ref bool pbAchieved) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUserStats _ptr is null!");
			return Native.SteamAPI_ISteamUserStats_GetNextMostAchievedAchievementInfo(_ptr, iIteratorPrevious, pchName,
				unNameBufLen, out pflPercent, ref pbAchieved);
		}

		public virtual bool ISteamUserStats_GetAchievementAchievedPercent(
			string pchName,
			out float pflPercent) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUserStats_GetAchievementAchievedPercent(_ptr, pchName, out pflPercent)
				: throw new Exception("ISteamUserStats _ptr is null!");
		}

		public virtual SteamAPICall_t ISteamUserStats_RequestGlobalStats(int nHistoryDays) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUserStats_RequestGlobalStats(_ptr, nHistoryDays)
				: throw new Exception("ISteamUserStats _ptr is null!");
		}

		public virtual bool ISteamUserStats_GetGlobalStat(string pchStatName, out long pData) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUserStats_GetGlobalStat(_ptr, pchStatName, out pData)
				: throw new Exception("ISteamUserStats _ptr is null!");
		}

		public virtual bool ISteamUserStats_GetGlobalStat0(string pchStatName, out double pData) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUserStats_GetGlobalStat0(_ptr, pchStatName, out pData)
				: throw new Exception("ISteamUserStats _ptr is null!");
		}

		public virtual int ISteamUserStats_GetGlobalStatHistory(
			string pchStatName,
			out long pData,
			uint cubData) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUserStats _ptr is null!");
			return Native.SteamAPI_ISteamUserStats_GetGlobalStatHistory(_ptr, pchStatName, out pData, cubData);
		}

		public virtual int ISteamUserStats_GetGlobalStatHistory0(
			string pchStatName,
			out double pData,
			uint cubData) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUserStats _ptr is null!");
			return Native.SteamAPI_ISteamUserStats_GetGlobalStatHistory0(_ptr, pchStatName, out pData, cubData);
		}

		public virtual bool ISteamApps_BIsSubscribed() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamApps_BIsSubscribed(_ptr)
				: throw new Exception("ISteamApps _ptr is null!");
		}

		public virtual bool ISteamApps_BIsLowViolence() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamApps_BIsLowViolence(_ptr)
				: throw new Exception("ISteamApps _ptr is null!");
		}

		public virtual bool ISteamApps_BIsCybercafe() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamApps_BIsCybercafe(_ptr)
				: throw new Exception("ISteamApps _ptr is null!");
		}

		public virtual bool ISteamApps_BIsVACBanned() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamApps_BIsVACBanned(_ptr)
				: throw new Exception("ISteamApps _ptr is null!");
		}

		public virtual IntPtr ISteamApps_GetCurrentGameLanguage() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamApps_GetCurrentGameLanguage(_ptr)
				: throw new Exception("ISteamApps _ptr is null!");
		}

		public virtual IntPtr ISteamApps_GetAvailableGameLanguages() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamApps_GetAvailableGameLanguages(_ptr)
				: throw new Exception("ISteamApps _ptr is null!");
		}

		public virtual bool ISteamApps_BIsSubscribedApp(uint appID) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamApps_BIsSubscribedApp(_ptr, appID)
				: throw new Exception("ISteamApps _ptr is null!");
		}

		public virtual bool ISteamApps_BIsDlcInstalled(uint appID) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamApps_BIsDlcInstalled(_ptr, appID)
				: throw new Exception("ISteamApps _ptr is null!");
		}

		public virtual uint ISteamApps_GetEarliestPurchaseUnixTime(uint nAppID) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamApps_GetEarliestPurchaseUnixTime(_ptr, nAppID)
				: throw new Exception("ISteamApps _ptr is null!");
		}

		public virtual bool ISteamApps_BIsSubscribedFromFreeWeekend() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamApps_BIsSubscribedFromFreeWeekend(_ptr)
				: throw new Exception("ISteamApps _ptr is null!");
		}

		public virtual int ISteamApps_GetDLCCount() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamApps_GetDLCCount(_ptr)
				: throw new Exception("ISteamApps _ptr is null!");
		}

		public virtual bool ISteamApps_BGetDLCDataByIndex(
			int iDLC,
			ref uint pAppID,
			[MarshalAs(UnmanagedType.U1)] ref bool pbAvailable,
			StringBuilder pchName,
			int cchNameBufferSize) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamApps _ptr is null!");
			return Native.SteamAPI_ISteamApps_BGetDLCDataByIndex(_ptr, iDLC, ref pAppID, ref pbAvailable, pchName,
				cchNameBufferSize);
		}

		public virtual void ISteamApps_InstallDLC(uint nAppID) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamApps _ptr is null!");
			Native.SteamAPI_ISteamApps_InstallDLC(_ptr, nAppID);
		}

		public virtual void ISteamApps_UninstallDLC(uint nAppID) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamApps _ptr is null!");
			Native.SteamAPI_ISteamApps_UninstallDLC(_ptr, nAppID);
		}

		public virtual void ISteamApps_RequestAppProofOfPurchaseKey(uint nAppID) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamApps _ptr is null!");
			Native.SteamAPI_ISteamApps_RequestAppProofOfPurchaseKey(_ptr, nAppID);
		}

		public virtual bool ISteamApps_GetCurrentBetaName(
			StringBuilder pchName,
			int cchNameBufferSize) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamApps _ptr is null!");
			return Native.SteamAPI_ISteamApps_GetCurrentBetaName(_ptr, pchName, cchNameBufferSize);
		}

		public virtual bool ISteamApps_MarkContentCorrupt([MarshalAs(UnmanagedType.U1)] bool bMissingFilesOnly) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamApps_MarkContentCorrupt(_ptr, bMissingFilesOnly)
				: throw new Exception("ISteamApps _ptr is null!");
		}

		public virtual uint ISteamApps_GetInstalledDepots(
			uint appID,
			IntPtr pvecDepots,
			uint cMaxDepots) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamApps _ptr is null!");
			return Native.SteamAPI_ISteamApps_GetInstalledDepots(_ptr, appID, pvecDepots, cMaxDepots);
		}

		public virtual uint ISteamApps_GetAppInstallDir(
			uint appID,
			StringBuilder pchFolder,
			uint cchFolderBufferSize) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamApps _ptr is null!");
			return Native.SteamAPI_ISteamApps_GetAppInstallDir(_ptr, appID, pchFolder, cchFolderBufferSize);
		}

		public virtual bool ISteamApps_BIsAppInstalled(uint appID) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamApps_BIsAppInstalled(_ptr, appID)
				: throw new Exception("ISteamApps _ptr is null!");
		}

		public virtual CSteamID ISteamApps_GetAppOwner() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamApps_GetAppOwner(_ptr)
				: throw new Exception("ISteamApps _ptr is null!");
		}

		public virtual IntPtr ISteamApps_GetLaunchQueryParam(string pchKey) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamApps_GetLaunchQueryParam(_ptr, pchKey)
				: throw new Exception("ISteamApps _ptr is null!");
		}

		public virtual bool ISteamApps_GetDlcDownloadProgress(
			uint nAppID,
			out ulong punBytesDownloaded,
			out ulong punBytesTotal) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamApps_GetDlcDownloadProgress(_ptr, nAppID, out punBytesDownloaded,
					out punBytesTotal)
				: throw new Exception("ISteamApps _ptr is null!");
		}

		public virtual int ISteamApps_GetAppBuildId() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamApps_GetAppBuildId(_ptr)
				: throw new Exception("ISteamApps _ptr is null!");
		}

		public virtual void ISteamApps_RequestAllProofOfPurchaseKeys() {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamApps _ptr is null!");
			Native.SteamAPI_ISteamApps_RequestAllProofOfPurchaseKeys(_ptr);
		}

		public virtual SteamAPICall_t ISteamApps_GetFileDetails(string pszFileName) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamApps_GetFileDetails(_ptr, pszFileName)
				: throw new Exception("ISteamApps _ptr is null!");
		}

		public virtual bool ISteamNetworking_SendP2PPacket(
			ulong steamIDRemote,
			IntPtr pubData,
			uint cubData,
			P2PSend eP2PSendType,
			int nChannel) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamNetworking _ptr is null!");
			return Native.SteamAPI_ISteamNetworking_SendP2PPacket(_ptr, steamIDRemote, pubData, cubData, eP2PSendType,
				nChannel);
		}

		public virtual bool ISteamNetworking_IsP2PPacketAvailable(out uint pcubMsgSize, int nChannel) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamNetworking_IsP2PPacketAvailable(_ptr, out pcubMsgSize, nChannel)
				: throw new Exception("ISteamNetworking _ptr is null!");
		}

		public virtual bool ISteamNetworking_ReadP2PPacket(
			IntPtr pubDest,
			uint cubDest,
			out uint pcubMsgSize,
			out ulong psteamIDRemote,
			int nChannel) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamNetworking _ptr is null!");
			return Native.SteamAPI_ISteamNetworking_ReadP2PPacket(_ptr, pubDest, cubDest, out pcubMsgSize,
				out psteamIDRemote, nChannel);
		}

		public virtual bool ISteamNetworking_AcceptP2PSessionWithUser(ulong steamIDRemote) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamNetworking_AcceptP2PSessionWithUser(_ptr, steamIDRemote)
				: throw new Exception("ISteamNetworking _ptr is null!");
		}

		public virtual bool ISteamNetworking_CloseP2PSessionWithUser(ulong steamIDRemote) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamNetworking_CloseP2PSessionWithUser(_ptr, steamIDRemote)
				: throw new Exception("ISteamNetworking _ptr is null!");
		}

		public virtual bool ISteamNetworking_CloseP2PChannelWithUser(
			ulong steamIDRemote,
			int nChannel) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamNetworking _ptr is null!");
			return Native.SteamAPI_ISteamNetworking_CloseP2PChannelWithUser(_ptr, steamIDRemote, nChannel);
		}

		public virtual bool ISteamNetworking_GetP2PSessionState(
			ulong steamIDRemote,
			ref P2PSessionState_t pConnectionState) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamNetworking _ptr is null!");
			var pConnectionState1 = new P2PSessionState_t.PackSmall();
			var p2PsessionState =
				Native.SteamAPI_ISteamNetworking_GetP2PSessionState(_ptr, steamIDRemote, ref pConnectionState1);
			pConnectionState = (P2PSessionState_t)pConnectionState1;
			return p2PsessionState;
		}

		public virtual bool ISteamNetworking_AllowP2PPacketRelay([MarshalAs(UnmanagedType.U1)] bool bAllow) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamNetworking_AllowP2PPacketRelay(_ptr, bAllow)
				: throw new Exception("ISteamNetworking _ptr is null!");
		}

		public virtual SNetListenSocket_t ISteamNetworking_CreateListenSocket(
			int nVirtualP2PPort,
			uint nIP,
			ushort nPort,
			[MarshalAs(UnmanagedType.U1)] bool bAllowUseOfPacketRelay) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamNetworking _ptr is null!");
			return Native.SteamAPI_ISteamNetworking_CreateListenSocket(_ptr, nVirtualP2PPort, nIP, nPort,
				bAllowUseOfPacketRelay);
		}

		public virtual SNetSocket_t ISteamNetworking_CreateP2PConnectionSocket(
			ulong steamIDTarget,
			int nVirtualPort,
			int nTimeoutSec,
			[MarshalAs(UnmanagedType.U1)] bool bAllowUseOfPacketRelay) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamNetworking _ptr is null!");
			return Native.SteamAPI_ISteamNetworking_CreateP2PConnectionSocket(_ptr, steamIDTarget, nVirtualPort,
				nTimeoutSec, bAllowUseOfPacketRelay);
		}

		public virtual SNetSocket_t ISteamNetworking_CreateConnectionSocket(
			uint nIP,
			ushort nPort,
			int nTimeoutSec) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamNetworking _ptr is null!");
			return Native.SteamAPI_ISteamNetworking_CreateConnectionSocket(_ptr, nIP, nPort, nTimeoutSec);
		}

		public virtual bool ISteamNetworking_DestroySocket(uint hSocket,
			[MarshalAs(UnmanagedType.U1)] bool bNotifyRemoteEnd) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamNetworking _ptr is null!");
			return Native.SteamAPI_ISteamNetworking_DestroySocket(_ptr, hSocket, bNotifyRemoteEnd);
		}

		public virtual bool ISteamNetworking_DestroyListenSocket(uint hSocket,
			[MarshalAs(UnmanagedType.U1)] bool bNotifyRemoteEnd) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamNetworking _ptr is null!");
			return Native.SteamAPI_ISteamNetworking_DestroyListenSocket(_ptr, hSocket, bNotifyRemoteEnd);
		}

		public virtual bool ISteamNetworking_SendDataOnSocket(
			uint hSocket,
			IntPtr pubData,
			uint cubData,
			[MarshalAs(UnmanagedType.U1)] bool bReliable) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamNetworking _ptr is null!");
			return Native.SteamAPI_ISteamNetworking_SendDataOnSocket(_ptr, hSocket, pubData, cubData, bReliable);
		}

		public virtual bool ISteamNetworking_IsDataAvailableOnSocket(
			uint hSocket,
			out uint pcubMsgSize) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamNetworking_IsDataAvailableOnSocket(_ptr, hSocket, out pcubMsgSize)
				: throw new Exception("ISteamNetworking _ptr is null!");
		}

		public virtual bool ISteamNetworking_RetrieveDataFromSocket(
			uint hSocket,
			IntPtr pubDest,
			uint cubDest,
			out uint pcubMsgSize) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamNetworking _ptr is null!");
			return Native.SteamAPI_ISteamNetworking_RetrieveDataFromSocket(_ptr, hSocket, pubDest, cubDest,
				out pcubMsgSize);
		}

		public virtual bool ISteamNetworking_IsDataAvailable(
			uint hListenSocket,
			out uint pcubMsgSize,
			ref uint phSocket) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamNetworking _ptr is null!");
			return Native.SteamAPI_ISteamNetworking_IsDataAvailable(_ptr, hListenSocket, out pcubMsgSize, ref phSocket);
		}

		public virtual bool ISteamNetworking_RetrieveData(
			uint hListenSocket,
			IntPtr pubDest,
			uint cubDest,
			out uint pcubMsgSize,
			ref uint phSocket) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamNetworking _ptr is null!");
			return Native.SteamAPI_ISteamNetworking_RetrieveData(_ptr, hListenSocket, pubDest, cubDest, out pcubMsgSize,
				ref phSocket);
		}

		public virtual bool ISteamNetworking_GetSocketInfo(
			uint hSocket,
			out ulong pSteamIDRemote,
			IntPtr peSocketStatus,
			out uint punIPRemote,
			out ushort punPortRemote) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamNetworking _ptr is null!");
			return Native.SteamAPI_ISteamNetworking_GetSocketInfo(_ptr, hSocket, out pSteamIDRemote, peSocketStatus,
				out punIPRemote, out punPortRemote);
		}

		public virtual bool ISteamNetworking_GetListenSocketInfo(
			uint hListenSocket,
			out uint pnIP,
			out ushort pnPort) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamNetworking_GetListenSocketInfo(_ptr, hListenSocket, out pnIP, out pnPort)
				: throw new Exception("ISteamNetworking _ptr is null!");
		}

		public virtual SNetSocketConnectionType ISteamNetworking_GetSocketConnectionType(uint hSocket) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamNetworking_GetSocketConnectionType(_ptr, hSocket)
				: throw new Exception("ISteamNetworking _ptr is null!");
		}

		public virtual int ISteamNetworking_GetMaxPacketSize(uint hSocket) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamNetworking_GetMaxPacketSize(_ptr, hSocket)
				: throw new Exception("ISteamNetworking _ptr is null!");
		}

		public virtual ScreenshotHandle ISteamScreenshots_WriteScreenshot(
			IntPtr pubRGB,
			uint cubRGB,
			int nWidth,
			int nHeight) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamScreenshots _ptr is null!");
			return Native.SteamAPI_ISteamScreenshots_WriteScreenshot(_ptr, pubRGB, cubRGB, nWidth, nHeight);
		}

		public virtual ScreenshotHandle ISteamScreenshots_AddScreenshotToLibrary(
			string pchFilename,
			string pchThumbnailFilename,
			int nWidth,
			int nHeight) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamScreenshots _ptr is null!");
			return Native.SteamAPI_ISteamScreenshots_AddScreenshotToLibrary(_ptr, pchFilename, pchThumbnailFilename,
				nWidth, nHeight);
		}

		public virtual void ISteamScreenshots_TriggerScreenshot() {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamScreenshots _ptr is null!");
			Native.SteamAPI_ISteamScreenshots_TriggerScreenshot(_ptr);
		}

		public virtual void ISteamScreenshots_HookScreenshots([MarshalAs(UnmanagedType.U1)] bool bHook) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamScreenshots _ptr is null!");
			Native.SteamAPI_ISteamScreenshots_HookScreenshots(_ptr, bHook);
		}

		public virtual bool ISteamScreenshots_SetLocation(uint hScreenshot, string pchLocation) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamScreenshots _ptr is null!");
			return Native.SteamAPI_ISteamScreenshots_SetLocation(_ptr, hScreenshot, pchLocation);
		}

		public virtual bool ISteamScreenshots_TagUser(uint hScreenshot, ulong steamID) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamScreenshots _ptr is null!");
			return Native.SteamAPI_ISteamScreenshots_TagUser(_ptr, hScreenshot, steamID);
		}

		public virtual bool ISteamScreenshots_TagPublishedFile(
			uint hScreenshot,
			ulong unPublishedFileID) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamScreenshots _ptr is null!");
			return Native.SteamAPI_ISteamScreenshots_TagPublishedFile(_ptr, hScreenshot, unPublishedFileID);
		}

		public virtual bool ISteamScreenshots_IsScreenshotsHooked() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamScreenshots_IsScreenshotsHooked(_ptr)
				: throw new Exception("ISteamScreenshots _ptr is null!");
		}

		public virtual ScreenshotHandle ISteamScreenshots_AddVRScreenshotToLibrary(
			VRScreenshotType eType,
			string pchFilename,
			string pchVRFilename) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamScreenshots _ptr is null!");
			return Native.SteamAPI_ISteamScreenshots_AddVRScreenshotToLibrary(_ptr, eType, pchFilename, pchVRFilename);
		}

		public virtual bool ISteamMusic_BIsEnabled() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMusic_BIsEnabled(_ptr)
				: throw new Exception("ISteamMusic _ptr is null!");
		}

		public virtual bool ISteamMusic_BIsPlaying() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMusic_BIsPlaying(_ptr)
				: throw new Exception("ISteamMusic _ptr is null!");
		}

		public virtual AudioPlayback_Status ISteamMusic_GetPlaybackStatus() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMusic_GetPlaybackStatus(_ptr)
				: throw new Exception("ISteamMusic _ptr is null!");
		}

		public virtual void ISteamMusic_Play() {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMusic _ptr is null!");
			Native.SteamAPI_ISteamMusic_Play(_ptr);
		}

		public virtual void ISteamMusic_Pause() {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMusic _ptr is null!");
			Native.SteamAPI_ISteamMusic_Pause(_ptr);
		}

		public virtual void ISteamMusic_PlayPrevious() {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMusic _ptr is null!");
			Native.SteamAPI_ISteamMusic_PlayPrevious(_ptr);
		}

		public virtual void ISteamMusic_PlayNext() {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMusic _ptr is null!");
			Native.SteamAPI_ISteamMusic_PlayNext(_ptr);
		}

		public virtual void ISteamMusic_SetVolume(float flVolume) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMusic _ptr is null!");
			Native.SteamAPI_ISteamMusic_SetVolume(_ptr, flVolume);
		}

		public virtual float ISteamMusic_GetVolume() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMusic_GetVolume(_ptr)
				: throw new Exception("ISteamMusic _ptr is null!");
		}

		public virtual bool ISteamMusicRemote_RegisterSteamMusicRemote(string pchName) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMusicRemote_RegisterSteamMusicRemote(_ptr, pchName)
				: throw new Exception("ISteamMusicRemote _ptr is null!");
		}

		public virtual bool ISteamMusicRemote_DeregisterSteamMusicRemote() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMusicRemote_DeregisterSteamMusicRemote(_ptr)
				: throw new Exception("ISteamMusicRemote _ptr is null!");
		}

		public virtual bool ISteamMusicRemote_BIsCurrentMusicRemote() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMusicRemote_BIsCurrentMusicRemote(_ptr)
				: throw new Exception("ISteamMusicRemote _ptr is null!");
		}

		public virtual bool ISteamMusicRemote_BActivationSuccess([MarshalAs(UnmanagedType.U1)] bool bValue) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMusicRemote_BActivationSuccess(_ptr, bValue)
				: throw new Exception("ISteamMusicRemote _ptr is null!");
		}

		public virtual bool ISteamMusicRemote_SetDisplayName(string pchDisplayName) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMusicRemote_SetDisplayName(_ptr, pchDisplayName)
				: throw new Exception("ISteamMusicRemote _ptr is null!");
		}

		public virtual bool ISteamMusicRemote_SetPNGIcon_64x64(IntPtr pvBuffer, uint cbBufferLength) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMusicRemote _ptr is null!");
			return Native.SteamAPI_ISteamMusicRemote_SetPNGIcon_64x64(_ptr, pvBuffer, cbBufferLength);
		}

		public virtual bool ISteamMusicRemote_EnablePlayPrevious([MarshalAs(UnmanagedType.U1)] bool bValue) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMusicRemote_EnablePlayPrevious(_ptr, bValue)
				: throw new Exception("ISteamMusicRemote _ptr is null!");
		}

		public virtual bool ISteamMusicRemote_EnablePlayNext([MarshalAs(UnmanagedType.U1)] bool bValue) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMusicRemote_EnablePlayNext(_ptr, bValue)
				: throw new Exception("ISteamMusicRemote _ptr is null!");
		}

		public virtual bool ISteamMusicRemote_EnableShuffled([MarshalAs(UnmanagedType.U1)] bool bValue) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMusicRemote_EnableShuffled(_ptr, bValue)
				: throw new Exception("ISteamMusicRemote _ptr is null!");
		}

		public virtual bool ISteamMusicRemote_EnableLooped([MarshalAs(UnmanagedType.U1)] bool bValue) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMusicRemote_EnableLooped(_ptr, bValue)
				: throw new Exception("ISteamMusicRemote _ptr is null!");
		}

		public virtual bool ISteamMusicRemote_EnableQueue([MarshalAs(UnmanagedType.U1)] bool bValue) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMusicRemote_EnableQueue(_ptr, bValue)
				: throw new Exception("ISteamMusicRemote _ptr is null!");
		}

		public virtual bool ISteamMusicRemote_EnablePlaylists([MarshalAs(UnmanagedType.U1)] bool bValue) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMusicRemote_EnablePlaylists(_ptr, bValue)
				: throw new Exception("ISteamMusicRemote _ptr is null!");
		}

		public virtual bool ISteamMusicRemote_UpdatePlaybackStatus(AudioPlayback_Status nStatus) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMusicRemote_UpdatePlaybackStatus(_ptr, nStatus)
				: throw new Exception("ISteamMusicRemote _ptr is null!");
		}

		public virtual bool ISteamMusicRemote_UpdateShuffled([MarshalAs(UnmanagedType.U1)] bool bValue) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMusicRemote_UpdateShuffled(_ptr, bValue)
				: throw new Exception("ISteamMusicRemote _ptr is null!");
		}

		public virtual bool ISteamMusicRemote_UpdateLooped([MarshalAs(UnmanagedType.U1)] bool bValue) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMusicRemote_UpdateLooped(_ptr, bValue)
				: throw new Exception("ISteamMusicRemote _ptr is null!");
		}

		public virtual bool ISteamMusicRemote_UpdateVolume(float flValue) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMusicRemote_UpdateVolume(_ptr, flValue)
				: throw new Exception("ISteamMusicRemote _ptr is null!");
		}

		public virtual bool ISteamMusicRemote_CurrentEntryWillChange() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMusicRemote_CurrentEntryWillChange(_ptr)
				: throw new Exception("ISteamMusicRemote _ptr is null!");
		}

		public virtual bool ISteamMusicRemote_CurrentEntryIsAvailable([MarshalAs(UnmanagedType.U1)] bool bAvailable) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMusicRemote_CurrentEntryIsAvailable(_ptr, bAvailable)
				: throw new Exception("ISteamMusicRemote _ptr is null!");
		}

		public virtual bool ISteamMusicRemote_UpdateCurrentEntryText(string pchText) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMusicRemote_UpdateCurrentEntryText(_ptr, pchText)
				: throw new Exception("ISteamMusicRemote _ptr is null!");
		}

		public virtual bool ISteamMusicRemote_UpdateCurrentEntryElapsedSeconds(int nValue) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMusicRemote_UpdateCurrentEntryElapsedSeconds(_ptr, nValue)
				: throw new Exception("ISteamMusicRemote _ptr is null!");
		}

		public virtual bool ISteamMusicRemote_UpdateCurrentEntryCoverArt(
			IntPtr pvBuffer,
			uint cbBufferLength) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMusicRemote _ptr is null!");
			return Native.SteamAPI_ISteamMusicRemote_UpdateCurrentEntryCoverArt(_ptr, pvBuffer, cbBufferLength);
		}

		public virtual bool ISteamMusicRemote_CurrentEntryDidChange() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMusicRemote_CurrentEntryDidChange(_ptr)
				: throw new Exception("ISteamMusicRemote _ptr is null!");
		}

		public virtual bool ISteamMusicRemote_QueueWillChange() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMusicRemote_QueueWillChange(_ptr)
				: throw new Exception("ISteamMusicRemote _ptr is null!");
		}

		public virtual bool ISteamMusicRemote_ResetQueueEntries() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMusicRemote_ResetQueueEntries(_ptr)
				: throw new Exception("ISteamMusicRemote _ptr is null!");
		}

		public virtual bool ISteamMusicRemote_SetQueueEntry(
			int nID,
			int nPosition,
			string pchEntryText) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMusicRemote _ptr is null!");
			return Native.SteamAPI_ISteamMusicRemote_SetQueueEntry(_ptr, nID, nPosition, pchEntryText);
		}

		public virtual bool ISteamMusicRemote_SetCurrentQueueEntry(int nID) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMusicRemote_SetCurrentQueueEntry(_ptr, nID)
				: throw new Exception("ISteamMusicRemote _ptr is null!");
		}

		public virtual bool ISteamMusicRemote_QueueDidChange() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMusicRemote_QueueDidChange(_ptr)
				: throw new Exception("ISteamMusicRemote _ptr is null!");
		}

		public virtual bool ISteamMusicRemote_PlaylistWillChange() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMusicRemote_PlaylistWillChange(_ptr)
				: throw new Exception("ISteamMusicRemote _ptr is null!");
		}

		public virtual bool ISteamMusicRemote_ResetPlaylistEntries() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMusicRemote_ResetPlaylistEntries(_ptr)
				: throw new Exception("ISteamMusicRemote _ptr is null!");
		}

		public virtual bool ISteamMusicRemote_SetPlaylistEntry(
			int nID,
			int nPosition,
			string pchEntryText) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMusicRemote _ptr is null!");
			return Native.SteamAPI_ISteamMusicRemote_SetPlaylistEntry(_ptr, nID, nPosition, pchEntryText);
		}

		public virtual bool ISteamMusicRemote_SetCurrentPlaylistEntry(int nID) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMusicRemote_SetCurrentPlaylistEntry(_ptr, nID)
				: throw new Exception("ISteamMusicRemote _ptr is null!");
		}

		public virtual bool ISteamMusicRemote_PlaylistDidChange() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMusicRemote_PlaylistDidChange(_ptr)
				: throw new Exception("ISteamMusicRemote _ptr is null!");
		}

		public virtual HTTPRequestHandle ISteamHTTP_CreateHTTPRequest(
			HTTPMethod eHTTPRequestMethod,
			string pchAbsoluteURL) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTTP _ptr is null!");
			return Native.SteamAPI_ISteamHTTP_CreateHTTPRequest(_ptr, eHTTPRequestMethod, pchAbsoluteURL);
		}

		public virtual bool ISteamHTTP_SetHTTPRequestContextValue(uint hRequest, ulong ulContextValue) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTTP _ptr is null!");
			return Native.SteamAPI_ISteamHTTP_SetHTTPRequestContextValue(_ptr, hRequest, ulContextValue);
		}

		public virtual bool ISteamHTTP_SetHTTPRequestNetworkActivityTimeout(
			uint hRequest,
			uint unTimeoutSeconds) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTTP _ptr is null!");
			return Native.SteamAPI_ISteamHTTP_SetHTTPRequestNetworkActivityTimeout(_ptr, hRequest, unTimeoutSeconds);
		}

		public virtual bool ISteamHTTP_SetHTTPRequestHeaderValue(
			uint hRequest,
			string pchHeaderName,
			string pchHeaderValue) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTTP _ptr is null!");
			return Native.SteamAPI_ISteamHTTP_SetHTTPRequestHeaderValue(_ptr, hRequest, pchHeaderName, pchHeaderValue);
		}

		public virtual bool ISteamHTTP_SetHTTPRequestGetOrPostParameter(
			uint hRequest,
			string pchParamName,
			string pchParamValue) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTTP _ptr is null!");
			return Native.SteamAPI_ISteamHTTP_SetHTTPRequestGetOrPostParameter(_ptr, hRequest, pchParamName,
				pchParamValue);
		}

		public virtual bool ISteamHTTP_SendHTTPRequest(uint hRequest, ref ulong pCallHandle) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTTP _ptr is null!");
			return Native.SteamAPI_ISteamHTTP_SendHTTPRequest(_ptr, hRequest, ref pCallHandle);
		}

		public virtual bool ISteamHTTP_SendHTTPRequestAndStreamResponse(
			uint hRequest,
			ref ulong pCallHandle) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTTP _ptr is null!");
			return Native.SteamAPI_ISteamHTTP_SendHTTPRequestAndStreamResponse(_ptr, hRequest, ref pCallHandle);
		}

		public virtual bool ISteamHTTP_DeferHTTPRequest(uint hRequest) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamHTTP_DeferHTTPRequest(_ptr, hRequest)
				: throw new Exception("ISteamHTTP _ptr is null!");
		}

		public virtual bool ISteamHTTP_PrioritizeHTTPRequest(uint hRequest) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamHTTP_PrioritizeHTTPRequest(_ptr, hRequest)
				: throw new Exception("ISteamHTTP _ptr is null!");
		}

		public virtual bool ISteamHTTP_GetHTTPResponseHeaderSize(
			uint hRequest,
			string pchHeaderName,
			out uint unResponseHeaderSize) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTTP _ptr is null!");
			return Native.SteamAPI_ISteamHTTP_GetHTTPResponseHeaderSize(_ptr, hRequest, pchHeaderName,
				out unResponseHeaderSize);
		}

		public virtual bool ISteamHTTP_GetHTTPResponseHeaderValue(
			uint hRequest,
			string pchHeaderName,
			out byte pHeaderValueBuffer,
			uint unBufferSize) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTTP _ptr is null!");
			return Native.SteamAPI_ISteamHTTP_GetHTTPResponseHeaderValue(_ptr, hRequest, pchHeaderName,
				out pHeaderValueBuffer, unBufferSize);
		}

		public virtual bool ISteamHTTP_GetHTTPResponseBodySize(uint hRequest, out uint unBodySize) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamHTTP_GetHTTPResponseBodySize(_ptr, hRequest, out unBodySize)
				: throw new Exception("ISteamHTTP _ptr is null!");
		}

		public virtual bool ISteamHTTP_GetHTTPResponseBodyData(
			uint hRequest,
			out byte pBodyDataBuffer,
			uint unBufferSize) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTTP _ptr is null!");
			return Native.SteamAPI_ISteamHTTP_GetHTTPResponseBodyData(_ptr, hRequest, out pBodyDataBuffer,
				unBufferSize);
		}

		public virtual bool ISteamHTTP_GetHTTPStreamingResponseBodyData(
			uint hRequest,
			uint cOffset,
			out byte pBodyDataBuffer,
			uint unBufferSize) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTTP _ptr is null!");
			return Native.SteamAPI_ISteamHTTP_GetHTTPStreamingResponseBodyData(_ptr, hRequest, cOffset,
				out pBodyDataBuffer, unBufferSize);
		}

		public virtual bool ISteamHTTP_ReleaseHTTPRequest(uint hRequest) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamHTTP_ReleaseHTTPRequest(_ptr, hRequest)
				: throw new Exception("ISteamHTTP _ptr is null!");
		}

		public virtual bool ISteamHTTP_GetHTTPDownloadProgressPct(
			uint hRequest,
			out float pflPercentOut) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamHTTP_GetHTTPDownloadProgressPct(_ptr, hRequest, out pflPercentOut)
				: throw new Exception("ISteamHTTP _ptr is null!");
		}

		public virtual bool ISteamHTTP_SetHTTPRequestRawPostBody(
			uint hRequest,
			string pchContentType,
			out byte pubBody,
			uint unBodyLen) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTTP _ptr is null!");
			return Native.SteamAPI_ISteamHTTP_SetHTTPRequestRawPostBody(_ptr, hRequest, pchContentType, out pubBody,
				unBodyLen);
		}

		public virtual HTTPCookieContainerHandle ISteamHTTP_CreateCookieContainer(
			[MarshalAs(UnmanagedType.U1)] bool bAllowResponsesToModify) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamHTTP_CreateCookieContainer(_ptr, bAllowResponsesToModify)
				: throw new Exception("ISteamHTTP _ptr is null!");
		}

		public virtual bool ISteamHTTP_ReleaseCookieContainer(uint hCookieContainer) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamHTTP_ReleaseCookieContainer(_ptr, hCookieContainer)
				: throw new Exception("ISteamHTTP _ptr is null!");
		}

		public virtual bool ISteamHTTP_SetCookie(
			uint hCookieContainer,
			string pchHost,
			string pchUrl,
			string pchCookie) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTTP _ptr is null!");
			return Native.SteamAPI_ISteamHTTP_SetCookie(_ptr, hCookieContainer, pchHost, pchUrl, pchCookie);
		}

		public virtual bool ISteamHTTP_SetHTTPRequestCookieContainer(
			uint hRequest,
			uint hCookieContainer) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTTP _ptr is null!");
			return Native.SteamAPI_ISteamHTTP_SetHTTPRequestCookieContainer(_ptr, hRequest, hCookieContainer);
		}

		public virtual bool ISteamHTTP_SetHTTPRequestUserAgentInfo(
			uint hRequest,
			string pchUserAgentInfo) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTTP _ptr is null!");
			return Native.SteamAPI_ISteamHTTP_SetHTTPRequestUserAgentInfo(_ptr, hRequest, pchUserAgentInfo);
		}

		public virtual bool ISteamHTTP_SetHTTPRequestRequiresVerifiedCertificate(
			uint hRequest,
			[MarshalAs(UnmanagedType.U1)] bool bRequireVerifiedCertificate) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTTP _ptr is null!");
			return Native.SteamAPI_ISteamHTTP_SetHTTPRequestRequiresVerifiedCertificate(_ptr, hRequest,
				bRequireVerifiedCertificate);
		}

		public virtual bool ISteamHTTP_SetHTTPRequestAbsoluteTimeoutMS(
			uint hRequest,
			uint unMilliseconds) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTTP _ptr is null!");
			return Native.SteamAPI_ISteamHTTP_SetHTTPRequestAbsoluteTimeoutMS(_ptr, hRequest, unMilliseconds);
		}

		public virtual bool ISteamHTTP_GetHTTPRequestWasTimedOut(
			uint hRequest,
			[MarshalAs(UnmanagedType.U1)] ref bool pbWasTimedOut) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTTP _ptr is null!");
			return Native.SteamAPI_ISteamHTTP_GetHTTPRequestWasTimedOut(_ptr, hRequest, ref pbWasTimedOut);
		}

		public virtual ClientUnifiedMessageHandle ISteamUnifiedMessages_SendMethod(
			string pchServiceMethod,
			IntPtr pRequestBuffer,
			uint unRequestBufferSize,
			ulong unContext) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUnifiedMessages _ptr is null!");
			return Native.SteamAPI_ISteamUnifiedMessages_SendMethod(_ptr, pchServiceMethod, pRequestBuffer,
				unRequestBufferSize, unContext);
		}

		public virtual bool ISteamUnifiedMessages_GetMethodResponseInfo(
			ulong hHandle,
			out uint punResponseSize,
			out Result peResult) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUnifiedMessages_GetMethodResponseInfo(_ptr, hHandle, out punResponseSize,
					out peResult)
				: throw new Exception("ISteamUnifiedMessages _ptr is null!");
		}

		public virtual bool ISteamUnifiedMessages_GetMethodResponseData(
			ulong hHandle,
			IntPtr pResponseBuffer,
			uint unResponseBufferSize,
			[MarshalAs(UnmanagedType.U1)] bool bAutoRelease) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUnifiedMessages _ptr is null!");
			return Native.SteamAPI_ISteamUnifiedMessages_GetMethodResponseData(_ptr, hHandle, pResponseBuffer,
				unResponseBufferSize, bAutoRelease);
		}

		public virtual bool ISteamUnifiedMessages_ReleaseMethod(ulong hHandle) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUnifiedMessages_ReleaseMethod(_ptr, hHandle)
				: throw new Exception("ISteamUnifiedMessages _ptr is null!");
		}

		public virtual bool ISteamUnifiedMessages_SendNotification(
			string pchServiceNotification,
			IntPtr pNotificationBuffer,
			uint unNotificationBufferSize) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUnifiedMessages _ptr is null!");
			return Native.SteamAPI_ISteamUnifiedMessages_SendNotification(_ptr, pchServiceNotification,
				pNotificationBuffer, unNotificationBufferSize);
		}

		public virtual bool ISteamController_Init() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamController_Init(_ptr)
				: throw new Exception("ISteamController _ptr is null!");
		}

		public virtual bool ISteamController_Shutdown() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamController_Shutdown(_ptr)
				: throw new Exception("ISteamController _ptr is null!");
		}

		public virtual void ISteamController_RunFrame() {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamController _ptr is null!");
			Native.SteamAPI_ISteamController_RunFrame(_ptr);
		}

		public virtual int ISteamController_GetConnectedControllers(IntPtr handlesOut) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamController_GetConnectedControllers(_ptr, handlesOut)
				: throw new Exception("ISteamController _ptr is null!");
		}

		public virtual bool ISteamController_ShowBindingPanel(ulong controllerHandle) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamController_ShowBindingPanel(_ptr, controllerHandle)
				: throw new Exception("ISteamController _ptr is null!");
		}

		public virtual ControllerActionSetHandle_t ISteamController_GetActionSetHandle(
			string pszActionSetName) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamController_GetActionSetHandle(_ptr, pszActionSetName)
				: throw new Exception("ISteamController _ptr is null!");
		}

		public virtual void ISteamController_ActivateActionSet(
			ulong controllerHandle,
			ulong actionSetHandle) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamController _ptr is null!");
			Native.SteamAPI_ISteamController_ActivateActionSet(_ptr, controllerHandle, actionSetHandle);
		}

		public virtual ControllerActionSetHandle_t ISteamController_GetCurrentActionSet(
			ulong controllerHandle) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamController_GetCurrentActionSet(_ptr, controllerHandle)
				: throw new Exception("ISteamController _ptr is null!");
		}

		public virtual ControllerDigitalActionHandle_t ISteamController_GetDigitalActionHandle(
			string pszActionName) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamController_GetDigitalActionHandle(_ptr, pszActionName)
				: throw new Exception("ISteamController _ptr is null!");
		}

		public virtual ControllerDigitalActionData_t ISteamController_GetDigitalActionData(
			ulong controllerHandle,
			ulong digitalActionHandle) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamController _ptr is null!");
			return Native.SteamAPI_ISteamController_GetDigitalActionData(_ptr, controllerHandle, digitalActionHandle);
		}

		public virtual int ISteamController_GetDigitalActionOrigins(
			ulong controllerHandle,
			ulong actionSetHandle,
			ulong digitalActionHandle,
			out ControllerActionOrigin originsOut) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamController _ptr is null!");
			return Native.SteamAPI_ISteamController_GetDigitalActionOrigins(_ptr, controllerHandle, actionSetHandle,
				digitalActionHandle, out originsOut);
		}

		public virtual ControllerAnalogActionHandle_t ISteamController_GetAnalogActionHandle(
			string pszActionName) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamController_GetAnalogActionHandle(_ptr, pszActionName)
				: throw new Exception("ISteamController _ptr is null!");
		}

		public virtual ControllerAnalogActionData_t ISteamController_GetAnalogActionData(
			ulong controllerHandle,
			ulong analogActionHandle) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamController _ptr is null!");
			return Native.SteamAPI_ISteamController_GetAnalogActionData(_ptr, controllerHandle, analogActionHandle);
		}

		public virtual int ISteamController_GetAnalogActionOrigins(
			ulong controllerHandle,
			ulong actionSetHandle,
			ulong analogActionHandle,
			out ControllerActionOrigin originsOut) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamController _ptr is null!");
			return Native.SteamAPI_ISteamController_GetAnalogActionOrigins(_ptr, controllerHandle, actionSetHandle,
				analogActionHandle, out originsOut);
		}

		public virtual void ISteamController_StopAnalogActionMomentum(
			ulong controllerHandle,
			ulong eAction) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamController _ptr is null!");
			Native.SteamAPI_ISteamController_StopAnalogActionMomentum(_ptr, controllerHandle, eAction);
		}

		public virtual void ISteamController_TriggerHapticPulse(
			ulong controllerHandle,
			SteamControllerPad eTargetPad,
			ushort usDurationMicroSec) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamController _ptr is null!");
			Native.SteamAPI_ISteamController_TriggerHapticPulse(_ptr, controllerHandle, eTargetPad, usDurationMicroSec);
		}

		public virtual void ISteamController_TriggerRepeatedHapticPulse(
			ulong controllerHandle,
			SteamControllerPad eTargetPad,
			ushort usDurationMicroSec,
			ushort usOffMicroSec,
			ushort unRepeat,
			uint nFlags) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamController _ptr is null!");
			Native.SteamAPI_ISteamController_TriggerRepeatedHapticPulse(_ptr, controllerHandle, eTargetPad,
				usDurationMicroSec, usOffMicroSec, unRepeat, nFlags);
		}

		public virtual void ISteamController_TriggerVibration(
			ulong controllerHandle,
			ushort usLeftSpeed,
			ushort usRightSpeed) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamController _ptr is null!");
			Native.SteamAPI_ISteamController_TriggerVibration(_ptr, controllerHandle, usLeftSpeed, usRightSpeed);
		}

		public virtual void ISteamController_SetLEDColor(
			ulong controllerHandle,
			byte nColorR,
			byte nColorG,
			byte nColorB,
			uint nFlags) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamController _ptr is null!");
			Native.SteamAPI_ISteamController_SetLEDColor(_ptr, controllerHandle, nColorR, nColorG, nColorB, nFlags);
		}

		public virtual int ISteamController_GetGamepadIndexForController(ulong ulControllerHandle) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamController_GetGamepadIndexForController(_ptr, ulControllerHandle)
				: throw new Exception("ISteamController _ptr is null!");
		}

		public virtual ControllerHandle_t ISteamController_GetControllerForGamepadIndex(int nIndex) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamController_GetControllerForGamepadIndex(_ptr, nIndex)
				: throw new Exception("ISteamController _ptr is null!");
		}

		public virtual ControllerMotionData_t ISteamController_GetMotionData(ulong controllerHandle) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamController_GetMotionData(_ptr, controllerHandle)
				: throw new Exception("ISteamController _ptr is null!");
		}

		public virtual bool ISteamController_ShowDigitalActionOrigins(
			ulong controllerHandle,
			ulong digitalActionHandle,
			float flScale,
			float flXPosition,
			float flYPosition) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamController _ptr is null!");
			return Native.SteamAPI_ISteamController_ShowDigitalActionOrigins(_ptr, controllerHandle,
				digitalActionHandle, flScale, flXPosition, flYPosition);
		}

		public virtual bool ISteamController_ShowAnalogActionOrigins(
			ulong controllerHandle,
			ulong analogActionHandle,
			float flScale,
			float flXPosition,
			float flYPosition) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamController _ptr is null!");
			return Native.SteamAPI_ISteamController_ShowAnalogActionOrigins(_ptr, controllerHandle, analogActionHandle,
				flScale, flXPosition, flYPosition);
		}

		public virtual IntPtr ISteamController_GetStringForActionOrigin(ControllerActionOrigin eOrigin) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamController_GetStringForActionOrigin(_ptr, eOrigin)
				: throw new Exception("ISteamController _ptr is null!");
		}

		public virtual IntPtr ISteamController_GetGlyphForActionOrigin(ControllerActionOrigin eOrigin) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamController_GetGlyphForActionOrigin(_ptr, eOrigin)
				: throw new Exception("ISteamController _ptr is null!");
		}

		public virtual UGCQueryHandle_t ISteamUGC_CreateQueryUserUGCRequest(
			uint unAccountID,
			UserUGCList eListType,
			UGCMatchingUGCType eMatchingUGCType,
			UserUGCListSortOrder eSortOrder,
			uint nCreatorAppID,
			uint nConsumerAppID,
			uint unPage) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_CreateQueryUserUGCRequest(_ptr, unAccountID, eListType, eMatchingUGCType,
				eSortOrder, nCreatorAppID, nConsumerAppID, unPage);
		}

		public virtual UGCQueryHandle_t ISteamUGC_CreateQueryAllUGCRequest(
			UGCQuery eQueryType,
			UGCMatchingUGCType eMatchingeMatchingUGCTypeFileType,
			uint nCreatorAppID,
			uint nConsumerAppID,
			uint unPage) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_CreateQueryAllUGCRequest(_ptr, eQueryType,
				eMatchingeMatchingUGCTypeFileType, nCreatorAppID, nConsumerAppID, unPage);
		}

		public virtual UGCQueryHandle_t ISteamUGC_CreateQueryUGCDetailsRequest(
			IntPtr pvecPublishedFileID,
			uint unNumPublishedFileIDs) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_CreateQueryUGCDetailsRequest(_ptr, pvecPublishedFileID,
				unNumPublishedFileIDs);
		}

		public virtual SteamAPICall_t ISteamUGC_SendQueryUGCRequest(ulong handle) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUGC_SendQueryUGCRequest(_ptr, handle)
				: throw new Exception("ISteamUGC _ptr is null!");
		}

		public virtual bool ISteamUGC_GetQueryUGCResult(
			ulong handle,
			uint index,
			ref SteamUGCDetails_t pDetails) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			var pDetails1 = new SteamUGCDetails_t.PackSmall();
			var queryUgcResult = Native.SteamAPI_ISteamUGC_GetQueryUGCResult(_ptr, handle, index, ref pDetails1);
			pDetails = (SteamUGCDetails_t)pDetails1;
			return queryUgcResult;
		}

		public virtual bool ISteamUGC_GetQueryUGCPreviewURL(
			ulong handle,
			uint index,
			StringBuilder pchURL,
			uint cchURLSize) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_GetQueryUGCPreviewURL(_ptr, handle, index, pchURL, cchURLSize);
		}

		public virtual bool ISteamUGC_GetQueryUGCMetadata(
			ulong handle,
			uint index,
			StringBuilder pchMetadata,
			uint cchMetadatasize) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_GetQueryUGCMetadata(_ptr, handle, index, pchMetadata, cchMetadatasize);
		}

		public virtual bool ISteamUGC_GetQueryUGCChildren(
			ulong handle,
			uint index,
			IntPtr pvecPublishedFileID,
			uint cMaxEntries) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_GetQueryUGCChildren(_ptr, handle, index, pvecPublishedFileID, cMaxEntries);
		}

		public virtual bool ISteamUGC_GetQueryUGCStatistic(
			ulong handle,
			uint index,
			ItemStatistic eStatType,
			out ulong pStatValue) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_GetQueryUGCStatistic(_ptr, handle, index, eStatType, out pStatValue);
		}

		public virtual uint ISteamUGC_GetQueryUGCNumAdditionalPreviews(ulong handle, uint index) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_GetQueryUGCNumAdditionalPreviews(_ptr, handle, index);
		}

		public virtual bool ISteamUGC_GetQueryUGCAdditionalPreview(
			ulong handle,
			uint index,
			uint previewIndex,
			StringBuilder pchURLOrVideoID,
			uint cchURLSize,
			StringBuilder pchOriginalFileName,
			uint cchOriginalFileNameSize,
			out ItemPreviewType pPreviewType) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_GetQueryUGCAdditionalPreview(_ptr, handle, index, previewIndex,
				pchURLOrVideoID, cchURLSize, pchOriginalFileName, cchOriginalFileNameSize, out pPreviewType);
		}

		public virtual uint ISteamUGC_GetQueryUGCNumKeyValueTags(ulong handle, uint index) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_GetQueryUGCNumKeyValueTags(_ptr, handle, index);
		}

		public virtual bool ISteamUGC_GetQueryUGCKeyValueTag(
			ulong handle,
			uint index,
			uint keyValueTagIndex,
			StringBuilder pchKey,
			uint cchKeySize,
			StringBuilder pchValue,
			uint cchValueSize) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_GetQueryUGCKeyValueTag(_ptr, handle, index, keyValueTagIndex, pchKey,
				cchKeySize, pchValue, cchValueSize);
		}

		public virtual bool ISteamUGC_ReleaseQueryUGCRequest(ulong handle) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUGC_ReleaseQueryUGCRequest(_ptr, handle)
				: throw new Exception("ISteamUGC _ptr is null!");
		}

		public virtual bool ISteamUGC_AddRequiredTag(ulong handle, string pTagName) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_AddRequiredTag(_ptr, handle, pTagName);
		}

		public virtual bool ISteamUGC_AddExcludedTag(ulong handle, string pTagName) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_AddExcludedTag(_ptr, handle, pTagName);
		}

		public virtual bool
			ISteamUGC_SetReturnOnlyIDs(ulong handle, [MarshalAs(UnmanagedType.U1)] bool bReturnOnlyIDs) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_SetReturnOnlyIDs(_ptr, handle, bReturnOnlyIDs);
		}

		public virtual bool ISteamUGC_SetReturnKeyValueTags(ulong handle,
			[MarshalAs(UnmanagedType.U1)] bool bReturnKeyValueTags) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_SetReturnKeyValueTags(_ptr, handle, bReturnKeyValueTags);
		}

		public virtual bool ISteamUGC_SetReturnLongDescription(
			ulong handle,
			[MarshalAs(UnmanagedType.U1)] bool bReturnLongDescription) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_SetReturnLongDescription(_ptr, handle, bReturnLongDescription);
		}

		public virtual bool ISteamUGC_SetReturnMetadata(ulong handle,
			[MarshalAs(UnmanagedType.U1)] bool bReturnMetadata) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_SetReturnMetadata(_ptr, handle, bReturnMetadata);
		}

		public virtual bool ISteamUGC_SetReturnChildren(ulong handle,
			[MarshalAs(UnmanagedType.U1)] bool bReturnChildren) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_SetReturnChildren(_ptr, handle, bReturnChildren);
		}

		public virtual bool ISteamUGC_SetReturnAdditionalPreviews(
			ulong handle,
			[MarshalAs(UnmanagedType.U1)] bool bReturnAdditionalPreviews) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_SetReturnAdditionalPreviews(_ptr, handle, bReturnAdditionalPreviews);
		}

		public virtual bool ISteamUGC_SetReturnTotalOnly(ulong handle,
			[MarshalAs(UnmanagedType.U1)] bool bReturnTotalOnly) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_SetReturnTotalOnly(_ptr, handle, bReturnTotalOnly);
		}

		public virtual bool ISteamUGC_SetReturnPlaytimeStats(ulong handle, uint unDays) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_SetReturnPlaytimeStats(_ptr, handle, unDays);
		}

		public virtual bool ISteamUGC_SetLanguage(ulong handle, string pchLanguage) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_SetLanguage(_ptr, handle, pchLanguage);
		}

		public virtual bool ISteamUGC_SetAllowCachedResponse(ulong handle, uint unMaxAgeSeconds) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_SetAllowCachedResponse(_ptr, handle, unMaxAgeSeconds);
		}

		public virtual bool ISteamUGC_SetCloudFileNameFilter(ulong handle, string pMatchCloudFileName) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_SetCloudFileNameFilter(_ptr, handle, pMatchCloudFileName);
		}

		public virtual bool ISteamUGC_SetMatchAnyTag(ulong handle, [MarshalAs(UnmanagedType.U1)] bool bMatchAnyTag) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_SetMatchAnyTag(_ptr, handle, bMatchAnyTag);
		}

		public virtual bool ISteamUGC_SetSearchText(ulong handle, string pSearchText) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_SetSearchText(_ptr, handle, pSearchText);
		}

		public virtual bool ISteamUGC_SetRankedByTrendDays(ulong handle, uint unDays) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_SetRankedByTrendDays(_ptr, handle, unDays);
		}

		public virtual bool ISteamUGC_AddRequiredKeyValueTag(
			ulong handle,
			string pKey,
			string pValue) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_AddRequiredKeyValueTag(_ptr, handle, pKey, pValue);
		}

		public virtual SteamAPICall_t ISteamUGC_RequestUGCDetails(
			ulong nPublishedFileID,
			uint unMaxAgeSeconds) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_RequestUGCDetails(_ptr, nPublishedFileID, unMaxAgeSeconds);
		}

		public virtual SteamAPICall_t ISteamUGC_CreateItem(
			uint nConsumerAppId,
			WorkshopFileType eFileType) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_CreateItem(_ptr, nConsumerAppId, eFileType);
		}

		public virtual UGCUpdateHandle_t ISteamUGC_StartItemUpdate(
			uint nConsumerAppId,
			ulong nPublishedFileID) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_StartItemUpdate(_ptr, nConsumerAppId, nPublishedFileID);
		}

		public virtual bool ISteamUGC_SetItemTitle(ulong handle, string pchTitle) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_SetItemTitle(_ptr, handle, pchTitle);
		}

		public virtual bool ISteamUGC_SetItemDescription(ulong handle, string pchDescription) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_SetItemDescription(_ptr, handle, pchDescription);
		}

		public virtual bool ISteamUGC_SetItemUpdateLanguage(ulong handle, string pchLanguage) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_SetItemUpdateLanguage(_ptr, handle, pchLanguage);
		}

		public virtual bool ISteamUGC_SetItemMetadata(ulong handle, string pchMetaData) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_SetItemMetadata(_ptr, handle, pchMetaData);
		}

		public virtual bool ISteamUGC_SetItemVisibility(
			ulong handle,
			RemoteStoragePublishedFileVisibility eVisibility) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_SetItemVisibility(_ptr, handle, eVisibility);
		}

		public virtual bool ISteamUGC_SetItemTags(
			ulong updateHandle,
			ref SteamParamStringArray_t pTags) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			var pTags1 = new SteamParamStringArray_t.PackSmall();
			var flag = Native.SteamAPI_ISteamUGC_SetItemTags(_ptr, updateHandle, ref pTags1);
			pTags = (SteamParamStringArray_t)pTags1;
			return flag;
		}

		public virtual bool ISteamUGC_SetItemContent(ulong handle, string pszContentFolder) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_SetItemContent(_ptr, handle, pszContentFolder);
		}

		public virtual bool ISteamUGC_SetItemPreview(ulong handle, string pszPreviewFile) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_SetItemPreview(_ptr, handle, pszPreviewFile);
		}

		public virtual bool ISteamUGC_RemoveItemKeyValueTags(ulong handle, string pchKey) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_RemoveItemKeyValueTags(_ptr, handle, pchKey);
		}

		public virtual bool ISteamUGC_AddItemKeyValueTag(
			ulong handle,
			string pchKey,
			string pchValue) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_AddItemKeyValueTag(_ptr, handle, pchKey, pchValue);
		}

		public virtual bool ISteamUGC_AddItemPreviewFile(
			ulong handle,
			string pszPreviewFile,
			ItemPreviewType type) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_AddItemPreviewFile(_ptr, handle, pszPreviewFile, type);
		}

		public virtual bool ISteamUGC_AddItemPreviewVideo(ulong handle, string pszVideoID) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_AddItemPreviewVideo(_ptr, handle, pszVideoID);
		}

		public virtual bool ISteamUGC_UpdateItemPreviewFile(
			ulong handle,
			uint index,
			string pszPreviewFile) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_UpdateItemPreviewFile(_ptr, handle, index, pszPreviewFile);
		}

		public virtual bool ISteamUGC_UpdateItemPreviewVideo(
			ulong handle,
			uint index,
			string pszVideoID) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_UpdateItemPreviewVideo(_ptr, handle, index, pszVideoID);
		}

		public virtual bool ISteamUGC_RemoveItemPreview(ulong handle, uint index) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_RemoveItemPreview(_ptr, handle, index);
		}

		public virtual SteamAPICall_t ISteamUGC_SubmitItemUpdate(ulong handle, string pchChangeNote) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_SubmitItemUpdate(_ptr, handle, pchChangeNote);
		}

		public virtual ItemUpdateStatus ISteamUGC_GetItemUpdateProgress(
			ulong handle,
			out ulong punBytesProcessed,
			out ulong punBytesTotal) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUGC_GetItemUpdateProgress(_ptr, handle, out punBytesProcessed,
					out punBytesTotal)
				: throw new Exception("ISteamUGC _ptr is null!");
		}

		public virtual SteamAPICall_t ISteamUGC_SetUserItemVote(ulong nPublishedFileID,
			[MarshalAs(UnmanagedType.U1)] bool bVoteUp) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_SetUserItemVote(_ptr, nPublishedFileID, bVoteUp);
		}

		public virtual SteamAPICall_t ISteamUGC_GetUserItemVote(ulong nPublishedFileID) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUGC_GetUserItemVote(_ptr, nPublishedFileID)
				: throw new Exception("ISteamUGC _ptr is null!");
		}

		public virtual SteamAPICall_t ISteamUGC_AddItemToFavorites(
			uint nAppId,
			ulong nPublishedFileID) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_AddItemToFavorites(_ptr, nAppId, nPublishedFileID);
		}

		public virtual SteamAPICall_t ISteamUGC_RemoveItemFromFavorites(
			uint nAppId,
			ulong nPublishedFileID) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_RemoveItemFromFavorites(_ptr, nAppId, nPublishedFileID);
		}

		public virtual SteamAPICall_t ISteamUGC_SubscribeItem(ulong nPublishedFileID) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUGC_SubscribeItem(_ptr, nPublishedFileID)
				: throw new Exception("ISteamUGC _ptr is null!");
		}

		public virtual SteamAPICall_t ISteamUGC_UnsubscribeItem(ulong nPublishedFileID) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUGC_UnsubscribeItem(_ptr, nPublishedFileID)
				: throw new Exception("ISteamUGC _ptr is null!");
		}

		public virtual uint ISteamUGC_GetNumSubscribedItems() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUGC_GetNumSubscribedItems(_ptr)
				: throw new Exception("ISteamUGC _ptr is null!");
		}

		public virtual uint ISteamUGC_GetSubscribedItems(IntPtr pvecPublishedFileID, uint cMaxEntries) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_GetSubscribedItems(_ptr, pvecPublishedFileID, cMaxEntries);
		}

		public virtual uint ISteamUGC_GetItemState(ulong nPublishedFileID) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUGC_GetItemState(_ptr, nPublishedFileID)
				: throw new Exception("ISteamUGC _ptr is null!");
		}

		public virtual bool ISteamUGC_GetItemInstallInfo(
			ulong nPublishedFileID,
			out ulong punSizeOnDisk,
			StringBuilder pchFolder,
			uint cchFolderSize,
			out uint punTimeStamp) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_GetItemInstallInfo(_ptr, nPublishedFileID, out punSizeOnDisk, pchFolder,
				cchFolderSize, out punTimeStamp);
		}

		public virtual bool ISteamUGC_GetItemDownloadInfo(
			ulong nPublishedFileID,
			out ulong punBytesDownloaded,
			out ulong punBytesTotal) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUGC_GetItemDownloadInfo(_ptr, nPublishedFileID, out punBytesDownloaded,
					out punBytesTotal)
				: throw new Exception("ISteamUGC _ptr is null!");
		}

		public virtual bool ISteamUGC_DownloadItem(ulong nPublishedFileID,
			[MarshalAs(UnmanagedType.U1)] bool bHighPriority) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_DownloadItem(_ptr, nPublishedFileID, bHighPriority);
		}

		public virtual bool ISteamUGC_BInitWorkshopForGameServer(
			uint unWorkshopDepotID,
			string pszFolder) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_BInitWorkshopForGameServer(_ptr, unWorkshopDepotID, pszFolder);
		}

		public virtual void ISteamUGC_SuspendDownloads([MarshalAs(UnmanagedType.U1)] bool bSuspend) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			Native.SteamAPI_ISteamUGC_SuspendDownloads(_ptr, bSuspend);
		}

		public virtual SteamAPICall_t ISteamUGC_StartPlaytimeTracking(
			IntPtr pvecPublishedFileID,
			uint unNumPublishedFileIDs) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_StartPlaytimeTracking(_ptr, pvecPublishedFileID, unNumPublishedFileIDs);
		}

		public virtual SteamAPICall_t ISteamUGC_StopPlaytimeTracking(
			IntPtr pvecPublishedFileID,
			uint unNumPublishedFileIDs) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_StopPlaytimeTracking(_ptr, pvecPublishedFileID, unNumPublishedFileIDs);
		}

		public virtual SteamAPICall_t ISteamUGC_StopPlaytimeTrackingForAllItems() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUGC_StopPlaytimeTrackingForAllItems(_ptr)
				: throw new Exception("ISteamUGC _ptr is null!");
		}

		public virtual SteamAPICall_t ISteamUGC_AddDependency(
			ulong nParentPublishedFileID,
			ulong nChildPublishedFileID) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_AddDependency(_ptr, nParentPublishedFileID, nChildPublishedFileID);
		}

		public virtual SteamAPICall_t ISteamUGC_RemoveDependency(
			ulong nParentPublishedFileID,
			ulong nChildPublishedFileID) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_RemoveDependency(_ptr, nParentPublishedFileID, nChildPublishedFileID);
		}

		public virtual uint ISteamAppList_GetNumInstalledApps() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamAppList_GetNumInstalledApps(_ptr)
				: throw new Exception("ISteamAppList _ptr is null!");
		}

		public virtual uint ISteamAppList_GetInstalledApps(IntPtr pvecAppID, uint unMaxAppIDs) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamAppList _ptr is null!");
			return Native.SteamAPI_ISteamAppList_GetInstalledApps(_ptr, pvecAppID, unMaxAppIDs);
		}

		public virtual int ISteamAppList_GetAppName(
			uint nAppID,
			StringBuilder pchName,
			int cchNameMax) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamAppList _ptr is null!");
			return Native.SteamAPI_ISteamAppList_GetAppName(_ptr, nAppID, pchName, cchNameMax);
		}

		public virtual int ISteamAppList_GetAppInstallDir(
			uint nAppID,
			StringBuilder pchDirectory,
			int cchNameMax) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamAppList _ptr is null!");
			return Native.SteamAPI_ISteamAppList_GetAppInstallDir(_ptr, nAppID, pchDirectory, cchNameMax);
		}

		public virtual int ISteamAppList_GetAppBuildId(uint nAppID) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamAppList_GetAppBuildId(_ptr, nAppID)
				: throw new Exception("ISteamAppList _ptr is null!");
		}

		public virtual void ISteamHTMLSurface_DestructISteamHTMLSurface() {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTMLSurface _ptr is null!");
			Native.SteamAPI_ISteamHTMLSurface_DestructISteamHTMLSurface(_ptr);
		}

		public virtual bool ISteamHTMLSurface_Init() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamHTMLSurface_Init(_ptr)
				: throw new Exception("ISteamHTMLSurface _ptr is null!");
		}

		public virtual bool ISteamHTMLSurface_Shutdown() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamHTMLSurface_Shutdown(_ptr)
				: throw new Exception("ISteamHTMLSurface _ptr is null!");
		}

		public virtual SteamAPICall_t ISteamHTMLSurface_CreateBrowser(
			string pchUserAgent,
			string pchUserCSS) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTMLSurface _ptr is null!");
			return Native.SteamAPI_ISteamHTMLSurface_CreateBrowser(_ptr, pchUserAgent, pchUserCSS);
		}

		public virtual void ISteamHTMLSurface_RemoveBrowser(uint unBrowserHandle) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTMLSurface _ptr is null!");
			Native.SteamAPI_ISteamHTMLSurface_RemoveBrowser(_ptr, unBrowserHandle);
		}

		public virtual void ISteamHTMLSurface_LoadURL(
			uint unBrowserHandle,
			string pchURL,
			string pchPostData) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTMLSurface _ptr is null!");
			Native.SteamAPI_ISteamHTMLSurface_LoadURL(_ptr, unBrowserHandle, pchURL, pchPostData);
		}

		public virtual void ISteamHTMLSurface_SetSize(
			uint unBrowserHandle,
			uint unWidth,
			uint unHeight) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTMLSurface _ptr is null!");
			Native.SteamAPI_ISteamHTMLSurface_SetSize(_ptr, unBrowserHandle, unWidth, unHeight);
		}

		public virtual void ISteamHTMLSurface_StopLoad(uint unBrowserHandle) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTMLSurface _ptr is null!");
			Native.SteamAPI_ISteamHTMLSurface_StopLoad(_ptr, unBrowserHandle);
		}

		public virtual void ISteamHTMLSurface_Reload(uint unBrowserHandle) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTMLSurface _ptr is null!");
			Native.SteamAPI_ISteamHTMLSurface_Reload(_ptr, unBrowserHandle);
		}

		public virtual void ISteamHTMLSurface_GoBack(uint unBrowserHandle) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTMLSurface _ptr is null!");
			Native.SteamAPI_ISteamHTMLSurface_GoBack(_ptr, unBrowserHandle);
		}

		public virtual void ISteamHTMLSurface_GoForward(uint unBrowserHandle) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTMLSurface _ptr is null!");
			Native.SteamAPI_ISteamHTMLSurface_GoForward(_ptr, unBrowserHandle);
		}

		public virtual void ISteamHTMLSurface_AddHeader(
			uint unBrowserHandle,
			string pchKey,
			string pchValue) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTMLSurface _ptr is null!");
			Native.SteamAPI_ISteamHTMLSurface_AddHeader(_ptr, unBrowserHandle, pchKey, pchValue);
		}

		public virtual void ISteamHTMLSurface_ExecuteJavascript(
			uint unBrowserHandle,
			string pchScript) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTMLSurface _ptr is null!");
			Native.SteamAPI_ISteamHTMLSurface_ExecuteJavascript(_ptr, unBrowserHandle, pchScript);
		}

		public virtual void ISteamHTMLSurface_MouseUp(
			uint unBrowserHandle,
			HTMLMouseButton eMouseButton) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTMLSurface _ptr is null!");
			Native.SteamAPI_ISteamHTMLSurface_MouseUp(_ptr, unBrowserHandle, eMouseButton);
		}

		public virtual void ISteamHTMLSurface_MouseDown(
			uint unBrowserHandle,
			HTMLMouseButton eMouseButton) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTMLSurface _ptr is null!");
			Native.SteamAPI_ISteamHTMLSurface_MouseDown(_ptr, unBrowserHandle, eMouseButton);
		}

		public virtual void ISteamHTMLSurface_MouseDoubleClick(
			uint unBrowserHandle,
			HTMLMouseButton eMouseButton) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTMLSurface _ptr is null!");
			Native.SteamAPI_ISteamHTMLSurface_MouseDoubleClick(_ptr, unBrowserHandle, eMouseButton);
		}

		public virtual void ISteamHTMLSurface_MouseMove(uint unBrowserHandle, int x, int y) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTMLSurface _ptr is null!");
			Native.SteamAPI_ISteamHTMLSurface_MouseMove(_ptr, unBrowserHandle, x, y);
		}

		public virtual void ISteamHTMLSurface_MouseWheel(uint unBrowserHandle, int nDelta) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTMLSurface _ptr is null!");
			Native.SteamAPI_ISteamHTMLSurface_MouseWheel(_ptr, unBrowserHandle, nDelta);
		}

		public virtual void ISteamHTMLSurface_KeyDown(
			uint unBrowserHandle,
			uint nNativeKeyCode,
			HTMLKeyModifiers eHTMLKeyModifiers) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTMLSurface _ptr is null!");
			Native.SteamAPI_ISteamHTMLSurface_KeyDown(_ptr, unBrowserHandle, nNativeKeyCode, eHTMLKeyModifiers);
		}

		public virtual void ISteamHTMLSurface_KeyUp(
			uint unBrowserHandle,
			uint nNativeKeyCode,
			HTMLKeyModifiers eHTMLKeyModifiers) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTMLSurface _ptr is null!");
			Native.SteamAPI_ISteamHTMLSurface_KeyUp(_ptr, unBrowserHandle, nNativeKeyCode, eHTMLKeyModifiers);
		}

		public virtual void ISteamHTMLSurface_KeyChar(
			uint unBrowserHandle,
			uint cUnicodeChar,
			HTMLKeyModifiers eHTMLKeyModifiers) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTMLSurface _ptr is null!");
			Native.SteamAPI_ISteamHTMLSurface_KeyChar(_ptr, unBrowserHandle, cUnicodeChar, eHTMLKeyModifiers);
		}

		public virtual void ISteamHTMLSurface_SetHorizontalScroll(
			uint unBrowserHandle,
			uint nAbsolutePixelScroll) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTMLSurface _ptr is null!");
			Native.SteamAPI_ISteamHTMLSurface_SetHorizontalScroll(_ptr, unBrowserHandle, nAbsolutePixelScroll);
		}

		public virtual void ISteamHTMLSurface_SetVerticalScroll(
			uint unBrowserHandle,
			uint nAbsolutePixelScroll) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTMLSurface _ptr is null!");
			Native.SteamAPI_ISteamHTMLSurface_SetVerticalScroll(_ptr, unBrowserHandle, nAbsolutePixelScroll);
		}

		public virtual void ISteamHTMLSurface_SetKeyFocus(uint unBrowserHandle,
			[MarshalAs(UnmanagedType.U1)] bool bHasKeyFocus) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTMLSurface _ptr is null!");
			Native.SteamAPI_ISteamHTMLSurface_SetKeyFocus(_ptr, unBrowserHandle, bHasKeyFocus);
		}

		public virtual void ISteamHTMLSurface_ViewSource(uint unBrowserHandle) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTMLSurface _ptr is null!");
			Native.SteamAPI_ISteamHTMLSurface_ViewSource(_ptr, unBrowserHandle);
		}

		public virtual void ISteamHTMLSurface_CopyToClipboard(uint unBrowserHandle) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTMLSurface _ptr is null!");
			Native.SteamAPI_ISteamHTMLSurface_CopyToClipboard(_ptr, unBrowserHandle);
		}

		public virtual void ISteamHTMLSurface_PasteFromClipboard(uint unBrowserHandle) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTMLSurface _ptr is null!");
			Native.SteamAPI_ISteamHTMLSurface_PasteFromClipboard(_ptr, unBrowserHandle);
		}

		public virtual void ISteamHTMLSurface_Find(
			uint unBrowserHandle,
			string pchSearchStr,
			[MarshalAs(UnmanagedType.U1)] bool bCurrentlyInFind,
			[MarshalAs(UnmanagedType.U1)] bool bReverse) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTMLSurface _ptr is null!");
			Native.SteamAPI_ISteamHTMLSurface_Find(_ptr, unBrowserHandle, pchSearchStr, bCurrentlyInFind, bReverse);
		}

		public virtual void ISteamHTMLSurface_StopFind(uint unBrowserHandle) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTMLSurface _ptr is null!");
			Native.SteamAPI_ISteamHTMLSurface_StopFind(_ptr, unBrowserHandle);
		}

		public virtual void ISteamHTMLSurface_GetLinkAtPosition(uint unBrowserHandle, int x, int y) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTMLSurface _ptr is null!");
			Native.SteamAPI_ISteamHTMLSurface_GetLinkAtPosition(_ptr, unBrowserHandle, x, y);
		}

		public virtual void ISteamHTMLSurface_SetCookie(
			string pchHostname,
			string pchKey,
			string pchValue,
			string pchPath,
			uint nExpires,
			[MarshalAs(UnmanagedType.U1)] bool bSecure,
			[MarshalAs(UnmanagedType.U1)] bool bHTTPOnly) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTMLSurface _ptr is null!");
			Native.SteamAPI_ISteamHTMLSurface_SetCookie(_ptr, pchHostname, pchKey, pchValue, pchPath, nExpires, bSecure,
				bHTTPOnly);
		}

		public virtual void ISteamHTMLSurface_SetPageScaleFactor(
			uint unBrowserHandle,
			float flZoom,
			int nPointX,
			int nPointY) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTMLSurface _ptr is null!");
			Native.SteamAPI_ISteamHTMLSurface_SetPageScaleFactor(_ptr, unBrowserHandle, flZoom, nPointX, nPointY);
		}

		public virtual void ISteamHTMLSurface_SetBackgroundMode(
			uint unBrowserHandle,
			[MarshalAs(UnmanagedType.U1)] bool bBackgroundMode) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTMLSurface _ptr is null!");
			Native.SteamAPI_ISteamHTMLSurface_SetBackgroundMode(_ptr, unBrowserHandle, bBackgroundMode);
		}

		public virtual void ISteamHTMLSurface_AllowStartRequest(uint unBrowserHandle,
			[MarshalAs(UnmanagedType.U1)] bool bAllowed) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTMLSurface _ptr is null!");
			Native.SteamAPI_ISteamHTMLSurface_AllowStartRequest(_ptr, unBrowserHandle, bAllowed);
		}

		public virtual void ISteamHTMLSurface_JSDialogResponse(uint unBrowserHandle,
			[MarshalAs(UnmanagedType.U1)] bool bResult) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTMLSurface _ptr is null!");
			Native.SteamAPI_ISteamHTMLSurface_JSDialogResponse(_ptr, unBrowserHandle, bResult);
		}

		public virtual Result ISteamInventory_GetResultStatus(int resultHandle) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamInventory_GetResultStatus(_ptr, resultHandle)
				: throw new Exception("ISteamInventory _ptr is null!");
		}

		public virtual bool ISteamInventory_GetResultItems(
			int resultHandle,
			IntPtr pOutItemsArray,
			out uint punOutItemsArraySize) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamInventory _ptr is null!");
			return Native.SteamAPI_ISteamInventory_GetResultItems(_ptr, resultHandle, pOutItemsArray,
				out punOutItemsArraySize);
		}

		public virtual bool ISteamInventory_GetResultItemProperty(
			int resultHandle,
			uint unItemIndex,
			string pchPropertyName,
			StringBuilder pchValueBuffer,
			out uint punValueBufferSizeOut) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamInventory _ptr is null!");
			return Native.SteamAPI_ISteamInventory_GetResultItemProperty(_ptr, resultHandle, unItemIndex,
				pchPropertyName, pchValueBuffer, out punValueBufferSizeOut);
		}

		public virtual uint ISteamInventory_GetResultTimestamp(int resultHandle) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamInventory_GetResultTimestamp(_ptr, resultHandle)
				: throw new Exception("ISteamInventory _ptr is null!");
		}

		public virtual bool ISteamInventory_CheckResultSteamID(
			int resultHandle,
			ulong steamIDExpected) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamInventory _ptr is null!");
			return Native.SteamAPI_ISteamInventory_CheckResultSteamID(_ptr, resultHandle, steamIDExpected);
		}

		public virtual void ISteamInventory_DestroyResult(int resultHandle) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamInventory _ptr is null!");
			Native.SteamAPI_ISteamInventory_DestroyResult(_ptr, resultHandle);
		}

		public virtual bool ISteamInventory_GetAllItems(ref int pResultHandle) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamInventory_GetAllItems(_ptr, ref pResultHandle)
				: throw new Exception("ISteamInventory _ptr is null!");
		}

		public virtual bool ISteamInventory_GetItemsByID(
			ref int pResultHandle,
			ulong[] pInstanceIDs,
			uint unCountInstanceIDs) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamInventory _ptr is null!");
			return Native.SteamAPI_ISteamInventory_GetItemsByID(_ptr, ref pResultHandle, pInstanceIDs,
				unCountInstanceIDs);
		}

		public virtual bool ISteamInventory_SerializeResult(
			int resultHandle,
			IntPtr pOutBuffer,
			out uint punOutBufferSize) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamInventory _ptr is null!");
			return Native.SteamAPI_ISteamInventory_SerializeResult(_ptr, resultHandle, pOutBuffer,
				out punOutBufferSize);
		}

		public virtual bool ISteamInventory_DeserializeResult(
			ref int pOutResultHandle,
			IntPtr pBuffer,
			uint unBufferSize,
			[MarshalAs(UnmanagedType.U1)] bool bRESERVED_MUST_BE_FALSE) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamInventory _ptr is null!");
			return Native.SteamAPI_ISteamInventory_DeserializeResult(_ptr, ref pOutResultHandle, pBuffer, unBufferSize,
				bRESERVED_MUST_BE_FALSE);
		}

		public virtual bool ISteamInventory_GenerateItems(
			ref int pResultHandle,
			int[] pArrayItemDefs,
			uint[] punArrayQuantity,
			uint unArrayLength) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamInventory _ptr is null!");
			return Native.SteamAPI_ISteamInventory_GenerateItems(_ptr, ref pResultHandle, pArrayItemDefs,
				punArrayQuantity, unArrayLength);
		}

		public virtual bool ISteamInventory_GrantPromoItems(ref int pResultHandle) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamInventory_GrantPromoItems(_ptr, ref pResultHandle)
				: throw new Exception("ISteamInventory _ptr is null!");
		}

		public virtual bool ISteamInventory_AddPromoItem(ref int pResultHandle, int itemDef) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamInventory _ptr is null!");
			return Native.SteamAPI_ISteamInventory_AddPromoItem(_ptr, ref pResultHandle, itemDef);
		}

		public virtual bool ISteamInventory_AddPromoItems(
			ref int pResultHandle,
			int[] pArrayItemDefs,
			uint unArrayLength) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamInventory _ptr is null!");
			return Native.SteamAPI_ISteamInventory_AddPromoItems(_ptr, ref pResultHandle, pArrayItemDefs,
				unArrayLength);
		}

		public virtual bool ISteamInventory_ConsumeItem(
			ref int pResultHandle,
			ulong itemConsume,
			uint unQuantity) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamInventory _ptr is null!");
			return Native.SteamAPI_ISteamInventory_ConsumeItem(_ptr, ref pResultHandle, itemConsume, unQuantity);
		}

		public virtual bool ISteamInventory_ExchangeItems(
			ref int pResultHandle,
			int[] pArrayGenerate,
			uint[] punArrayGenerateQuantity,
			uint unArrayGenerateLength,
			ulong[] pArrayDestroy,
			uint[] punArrayDestroyQuantity,
			uint unArrayDestroyLength) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamInventory _ptr is null!");
			return Native.SteamAPI_ISteamInventory_ExchangeItems(_ptr, ref pResultHandle, pArrayGenerate,
				punArrayGenerateQuantity, unArrayGenerateLength, pArrayDestroy, punArrayDestroyQuantity,
				unArrayDestroyLength);
		}

		public virtual bool ISteamInventory_TransferItemQuantity(
			ref int pResultHandle,
			ulong itemIdSource,
			uint unQuantity,
			ulong itemIdDest) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamInventory _ptr is null!");
			return Native.SteamAPI_ISteamInventory_TransferItemQuantity(_ptr, ref pResultHandle, itemIdSource,
				unQuantity, itemIdDest);
		}

		public virtual void ISteamInventory_SendItemDropHeartbeat() {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamInventory _ptr is null!");
			Native.SteamAPI_ISteamInventory_SendItemDropHeartbeat(_ptr);
		}

		public virtual bool ISteamInventory_TriggerItemDrop(
			ref int pResultHandle,
			int dropListDefinition) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamInventory _ptr is null!");
			return Native.SteamAPI_ISteamInventory_TriggerItemDrop(_ptr, ref pResultHandle, dropListDefinition);
		}

		public virtual bool ISteamInventory_TradeItems(
			ref int pResultHandle,
			ulong steamIDTradePartner,
			ulong[] pArrayGive,
			uint[] pArrayGiveQuantity,
			uint nArrayGiveLength,
			ulong[] pArrayGet,
			uint[] pArrayGetQuantity,
			uint nArrayGetLength) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamInventory _ptr is null!");
			return Native.SteamAPI_ISteamInventory_TradeItems(_ptr, ref pResultHandle, steamIDTradePartner, pArrayGive,
				pArrayGiveQuantity, nArrayGiveLength, pArrayGet, pArrayGetQuantity, nArrayGetLength);
		}

		public virtual bool ISteamInventory_LoadItemDefinitions() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamInventory_LoadItemDefinitions(_ptr)
				: throw new Exception("ISteamInventory _ptr is null!");
		}

		public virtual bool ISteamInventory_GetItemDefinitionIDs(
			IntPtr pItemDefIDs,
			out uint punItemDefIDsArraySize) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamInventory_GetItemDefinitionIDs(_ptr, pItemDefIDs, out punItemDefIDsArraySize)
				: throw new Exception("ISteamInventory _ptr is null!");
		}

		public virtual bool ISteamInventory_GetItemDefinitionProperty(
			int iDefinition,
			string pchPropertyName,
			StringBuilder pchValueBuffer,
			out uint punValueBufferSizeOut) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamInventory _ptr is null!");
			return Native.SteamAPI_ISteamInventory_GetItemDefinitionProperty(_ptr, iDefinition, pchPropertyName,
				pchValueBuffer, out punValueBufferSizeOut);
		}

		public virtual SteamAPICall_t ISteamInventory_RequestEligiblePromoItemDefinitionsIDs(
			ulong steamID) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamInventory_RequestEligiblePromoItemDefinitionsIDs(_ptr, steamID)
				: throw new Exception("ISteamInventory _ptr is null!");
		}

		public virtual bool ISteamInventory_GetEligiblePromoItemDefinitionIDs(
			ulong steamID,
			IntPtr pItemDefIDs,
			out uint punItemDefIDsArraySize) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamInventory _ptr is null!");
			return Native.SteamAPI_ISteamInventory_GetEligiblePromoItemDefinitionIDs(_ptr, steamID, pItemDefIDs,
				out punItemDefIDsArraySize);
		}

		public virtual void ISteamVideo_GetVideoURL(uint unVideoAppID) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamVideo _ptr is null!");
			Native.SteamAPI_ISteamVideo_GetVideoURL(_ptr, unVideoAppID);
		}

		public virtual bool ISteamVideo_IsBroadcasting(IntPtr pnNumViewers) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamVideo_IsBroadcasting(_ptr, pnNumViewers)
				: throw new Exception("ISteamVideo _ptr is null!");
		}

		public virtual void ISteamVideo_GetOPFSettings(uint unVideoAppID) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamVideo _ptr is null!");
			Native.SteamAPI_ISteamVideo_GetOPFSettings(_ptr, unVideoAppID);
		}

		public virtual bool ISteamVideo_GetOPFStringForApp(
			uint unVideoAppID,
			StringBuilder pchBuffer,
			out int pnBufferSize) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamVideo _ptr is null!");
			return Native.SteamAPI_ISteamVideo_GetOPFStringForApp(_ptr, unVideoAppID, pchBuffer, out pnBufferSize);
		}

		public virtual bool ISteamGameServer_InitGameServer(
			uint unIP,
			ushort usGamePort,
			ushort usQueryPort,
			uint unFlags,
			uint nGameAppId,
			string pchVersionString) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServer _ptr is null!");
			return Native.SteamAPI_ISteamGameServer_InitGameServer(_ptr, unIP, usGamePort, usQueryPort, unFlags,
				nGameAppId, pchVersionString);
		}

		public virtual void ISteamGameServer_SetProduct(string pszProduct) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServer _ptr is null!");
			Native.SteamAPI_ISteamGameServer_SetProduct(_ptr, pszProduct);
		}

		public virtual void ISteamGameServer_SetGameDescription(string pszGameDescription) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServer _ptr is null!");
			Native.SteamAPI_ISteamGameServer_SetGameDescription(_ptr, pszGameDescription);
		}

		public virtual void ISteamGameServer_SetModDir(string pszModDir) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServer _ptr is null!");
			Native.SteamAPI_ISteamGameServer_SetModDir(_ptr, pszModDir);
		}

		public virtual void ISteamGameServer_SetDedicatedServer([MarshalAs(UnmanagedType.U1)] bool bDedicated) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServer _ptr is null!");
			Native.SteamAPI_ISteamGameServer_SetDedicatedServer(_ptr, bDedicated);
		}

		public virtual void ISteamGameServer_LogOn(string pszToken) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServer _ptr is null!");
			Native.SteamAPI_ISteamGameServer_LogOn(_ptr, pszToken);
		}

		public virtual void ISteamGameServer_LogOnAnonymous() {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServer _ptr is null!");
			Native.SteamAPI_ISteamGameServer_LogOnAnonymous(_ptr);
		}

		public virtual void ISteamGameServer_LogOff() {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServer _ptr is null!");
			Native.SteamAPI_ISteamGameServer_LogOff(_ptr);
		}

		public virtual bool ISteamGameServer_BLoggedOn() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamGameServer_BLoggedOn(_ptr)
				: throw new Exception("ISteamGameServer _ptr is null!");
		}

		public virtual bool ISteamGameServer_BSecure() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamGameServer_BSecure(_ptr)
				: throw new Exception("ISteamGameServer _ptr is null!");
		}

		public virtual CSteamID ISteamGameServer_GetSteamID() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamGameServer_GetSteamID(_ptr)
				: throw new Exception("ISteamGameServer _ptr is null!");
		}

		public virtual bool ISteamGameServer_WasRestartRequested() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamGameServer_WasRestartRequested(_ptr)
				: throw new Exception("ISteamGameServer _ptr is null!");
		}

		public virtual void ISteamGameServer_SetMaxPlayerCount(int cPlayersMax) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServer _ptr is null!");
			Native.SteamAPI_ISteamGameServer_SetMaxPlayerCount(_ptr, cPlayersMax);
		}

		public virtual void ISteamGameServer_SetBotPlayerCount(int cBotplayers) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServer _ptr is null!");
			Native.SteamAPI_ISteamGameServer_SetBotPlayerCount(_ptr, cBotplayers);
		}

		public virtual void ISteamGameServer_SetServerName(string pszServerName) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServer _ptr is null!");
			Native.SteamAPI_ISteamGameServer_SetServerName(_ptr, pszServerName);
		}

		public virtual void ISteamGameServer_SetMapName(string pszMapName) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServer _ptr is null!");
			Native.SteamAPI_ISteamGameServer_SetMapName(_ptr, pszMapName);
		}

		public virtual void
			ISteamGameServer_SetPasswordProtected([MarshalAs(UnmanagedType.U1)] bool bPasswordProtected) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServer _ptr is null!");
			Native.SteamAPI_ISteamGameServer_SetPasswordProtected(_ptr, bPasswordProtected);
		}

		public virtual void ISteamGameServer_SetSpectatorPort(ushort unSpectatorPort) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServer _ptr is null!");
			Native.SteamAPI_ISteamGameServer_SetSpectatorPort(_ptr, unSpectatorPort);
		}

		public virtual void ISteamGameServer_SetSpectatorServerName(string pszSpectatorServerName) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServer _ptr is null!");
			Native.SteamAPI_ISteamGameServer_SetSpectatorServerName(_ptr, pszSpectatorServerName);
		}

		public virtual void ISteamGameServer_ClearAllKeyValues() {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServer _ptr is null!");
			Native.SteamAPI_ISteamGameServer_ClearAllKeyValues(_ptr);
		}

		public virtual void ISteamGameServer_SetKeyValue(string pKey, string pValue) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServer _ptr is null!");
			Native.SteamAPI_ISteamGameServer_SetKeyValue(_ptr, pKey, pValue);
		}

		public virtual void ISteamGameServer_SetGameTags(string pchGameTags) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServer _ptr is null!");
			Native.SteamAPI_ISteamGameServer_SetGameTags(_ptr, pchGameTags);
		}

		public virtual void ISteamGameServer_SetGameData(string pchGameData) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServer _ptr is null!");
			Native.SteamAPI_ISteamGameServer_SetGameData(_ptr, pchGameData);
		}

		public virtual void ISteamGameServer_SetRegion(string pszRegion) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServer _ptr is null!");
			Native.SteamAPI_ISteamGameServer_SetRegion(_ptr, pszRegion);
		}

		public virtual bool ISteamGameServer_SendUserConnectAndAuthenticate(
			uint unIPClient,
			IntPtr pvAuthBlob,
			uint cubAuthBlobSize,
			out ulong pSteamIDUser) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServer _ptr is null!");
			return Native.SteamAPI_ISteamGameServer_SendUserConnectAndAuthenticate(_ptr, unIPClient, pvAuthBlob,
				cubAuthBlobSize, out pSteamIDUser);
		}

		public virtual CSteamID ISteamGameServer_CreateUnauthenticatedUserConnection() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamGameServer_CreateUnauthenticatedUserConnection(_ptr)
				: throw new Exception("ISteamGameServer _ptr is null!");
		}

		public virtual void ISteamGameServer_SendUserDisconnect(ulong steamIDUser) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServer _ptr is null!");
			Native.SteamAPI_ISteamGameServer_SendUserDisconnect(_ptr, steamIDUser);
		}

		public virtual bool ISteamGameServer_BUpdateUserData(
			ulong steamIDUser,
			string pchPlayerName,
			uint uScore) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServer _ptr is null!");
			return Native.SteamAPI_ISteamGameServer_BUpdateUserData(_ptr, steamIDUser, pchPlayerName, uScore);
		}

		public virtual HAuthTicket ISteamGameServer_GetAuthSessionTicket(
			IntPtr pTicket,
			int cbMaxTicket,
			out uint pcbTicket) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServer _ptr is null!");
			return Native.SteamAPI_ISteamGameServer_GetAuthSessionTicket(_ptr, pTicket, cbMaxTicket, out pcbTicket);
		}

		public virtual BeginAuthSessionResult ISteamGameServer_BeginAuthSession(
			IntPtr pAuthTicket,
			int cbAuthTicket,
			ulong steamID) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServer _ptr is null!");
			return Native.SteamAPI_ISteamGameServer_BeginAuthSession(_ptr, pAuthTicket, cbAuthTicket, steamID);
		}

		public virtual void ISteamGameServer_EndAuthSession(ulong steamID) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServer _ptr is null!");
			Native.SteamAPI_ISteamGameServer_EndAuthSession(_ptr, steamID);
		}

		public virtual void ISteamGameServer_CancelAuthTicket(uint hAuthTicket) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServer _ptr is null!");
			Native.SteamAPI_ISteamGameServer_CancelAuthTicket(_ptr, hAuthTicket);
		}

		public virtual UserHasLicenseForAppResult ISteamGameServer_UserHasLicenseForApp(
			ulong steamID,
			uint appID) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServer _ptr is null!");
			return Native.SteamAPI_ISteamGameServer_UserHasLicenseForApp(_ptr, steamID, appID);
		}

		public virtual bool ISteamGameServer_RequestUserGroupStatus(
			ulong steamIDUser,
			ulong steamIDGroup) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServer _ptr is null!");
			return Native.SteamAPI_ISteamGameServer_RequestUserGroupStatus(_ptr, steamIDUser, steamIDGroup);
		}

		public virtual void ISteamGameServer_GetGameplayStats() {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServer _ptr is null!");
			Native.SteamAPI_ISteamGameServer_GetGameplayStats(_ptr);
		}

		public virtual SteamAPICall_t ISteamGameServer_GetServerReputation() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamGameServer_GetServerReputation(_ptr)
				: throw new Exception("ISteamGameServer _ptr is null!");
		}

		public virtual uint ISteamGameServer_GetPublicIP() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamGameServer_GetPublicIP(_ptr)
				: throw new Exception("ISteamGameServer _ptr is null!");
		}

		public virtual bool ISteamGameServer_HandleIncomingPacket(
			IntPtr pData,
			int cbData,
			uint srcIP,
			ushort srcPort) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServer _ptr is null!");
			return Native.SteamAPI_ISteamGameServer_HandleIncomingPacket(_ptr, pData, cbData, srcIP, srcPort);
		}

		public virtual int ISteamGameServer_GetNextOutgoingPacket(
			IntPtr pOut,
			int cbMaxOut,
			out uint pNetAdr,
			out ushort pPort) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServer _ptr is null!");
			return Native.SteamAPI_ISteamGameServer_GetNextOutgoingPacket(_ptr, pOut, cbMaxOut, out pNetAdr, out pPort);
		}

		public virtual void ISteamGameServer_EnableHeartbeats([MarshalAs(UnmanagedType.U1)] bool bActive) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServer _ptr is null!");
			Native.SteamAPI_ISteamGameServer_EnableHeartbeats(_ptr, bActive);
		}

		public virtual void ISteamGameServer_SetHeartbeatInterval(int iHeartbeatInterval) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServer _ptr is null!");
			Native.SteamAPI_ISteamGameServer_SetHeartbeatInterval(_ptr, iHeartbeatInterval);
		}

		public virtual void ISteamGameServer_ForceHeartbeat() {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServer _ptr is null!");
			Native.SteamAPI_ISteamGameServer_ForceHeartbeat(_ptr);
		}

		public virtual SteamAPICall_t ISteamGameServer_AssociateWithClan(ulong steamIDClan) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamGameServer_AssociateWithClan(_ptr, steamIDClan)
				: throw new Exception("ISteamGameServer _ptr is null!");
		}

		public virtual SteamAPICall_t ISteamGameServer_ComputeNewPlayerCompatibility(
			ulong steamIDNewPlayer) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamGameServer_ComputeNewPlayerCompatibility(_ptr, steamIDNewPlayer)
				: throw new Exception("ISteamGameServer _ptr is null!");
		}

		public virtual SteamAPICall_t ISteamGameServerStats_RequestUserStats(ulong steamIDUser) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamGameServerStats_RequestUserStats(_ptr, steamIDUser)
				: throw new Exception("ISteamGameServerStats _ptr is null!");
		}

		public virtual bool ISteamGameServerStats_GetUserStat(
			ulong steamIDUser,
			string pchName,
			out int pData) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServerStats _ptr is null!");
			return Native.SteamAPI_ISteamGameServerStats_GetUserStat(_ptr, steamIDUser, pchName, out pData);
		}

		public virtual bool ISteamGameServerStats_GetUserStat0(
			ulong steamIDUser,
			string pchName,
			out float pData) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServerStats _ptr is null!");
			return Native.SteamAPI_ISteamGameServerStats_GetUserStat0(_ptr, steamIDUser, pchName, out pData);
		}

		public virtual bool ISteamGameServerStats_GetUserAchievement(
			ulong steamIDUser,
			string pchName,
			[MarshalAs(UnmanagedType.U1)] ref bool pbAchieved) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServerStats _ptr is null!");
			return Native.SteamAPI_ISteamGameServerStats_GetUserAchievement(_ptr, steamIDUser, pchName, ref pbAchieved);
		}

		public virtual bool ISteamGameServerStats_SetUserStat(
			ulong steamIDUser,
			string pchName,
			int nData) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServerStats _ptr is null!");
			return Native.SteamAPI_ISteamGameServerStats_SetUserStat(_ptr, steamIDUser, pchName, nData);
		}

		public virtual bool ISteamGameServerStats_SetUserStat0(
			ulong steamIDUser,
			string pchName,
			float fData) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServerStats _ptr is null!");
			return Native.SteamAPI_ISteamGameServerStats_SetUserStat0(_ptr, steamIDUser, pchName, fData);
		}

		public virtual bool ISteamGameServerStats_UpdateUserAvgRateStat(
			ulong steamIDUser,
			string pchName,
			float flCountThisSession,
			double dSessionLength) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServerStats _ptr is null!");
			return Native.SteamAPI_ISteamGameServerStats_UpdateUserAvgRateStat(_ptr, steamIDUser, pchName,
				flCountThisSession, dSessionLength);
		}

		public virtual bool ISteamGameServerStats_SetUserAchievement(
			ulong steamIDUser,
			string pchName) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServerStats _ptr is null!");
			return Native.SteamAPI_ISteamGameServerStats_SetUserAchievement(_ptr, steamIDUser, pchName);
		}

		public virtual bool ISteamGameServerStats_ClearUserAchievement(
			ulong steamIDUser,
			string pchName) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServerStats _ptr is null!");
			return Native.SteamAPI_ISteamGameServerStats_ClearUserAchievement(_ptr, steamIDUser, pchName);
		}

		public virtual SteamAPICall_t ISteamGameServerStats_StoreUserStats(ulong steamIDUser) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamGameServerStats_StoreUserStats(_ptr, steamIDUser)
				: throw new Exception("ISteamGameServerStats _ptr is null!");
		}

		public virtual bool SteamApi_SteamAPI_Init() {
			return Native.SteamAPI_Init();
		}

		public virtual void SteamApi_SteamAPI_RunCallbacks() {
			Native.SteamAPI_RunCallbacks();
		}

		public virtual void SteamApi_SteamGameServer_RunCallbacks() {
			Native.SteamGameServer_RunCallbacks();
		}

		public virtual void SteamApi_SteamAPI_RegisterCallback(IntPtr pCallback, int callback) {
			Native.SteamAPI_RegisterCallback(pCallback, callback);
		}

		public virtual void SteamApi_SteamAPI_UnregisterCallback(IntPtr pCallback) {
			Native.SteamAPI_UnregisterCallback(pCallback);
		}

		public virtual void SteamApi_SteamAPI_RegisterCallResult(IntPtr pCallback, ulong callback) {
			Native.SteamAPI_RegisterCallResult(pCallback, callback);
		}

		public virtual void SteamApi_SteamAPI_UnregisterCallResult(IntPtr pCallback, ulong callback) {
			Native.SteamAPI_UnregisterCallResult(pCallback, callback);
		}

		public virtual bool SteamApi_SteamInternal_GameServer_Init(
			uint unIP,
			ushort usPort,
			ushort usGamePort,
			ushort usQueryPort,
			int eServerMode,
			string pchVersionString) {
			return Native.SteamInternal_GameServer_Init(unIP, usPort, usGamePort, usQueryPort, eServerMode,
				pchVersionString);
		}

		public virtual void SteamApi_SteamAPI_Shutdown() {
			Native.SteamAPI_Shutdown();
		}

		public virtual void SteamApi_SteamGameServer_Shutdown() {
			Native.SteamGameServer_Shutdown();
		}

		public virtual HSteamUser SteamApi_SteamAPI_GetHSteamUser() {
			return Native.SteamAPI_GetHSteamUser();
		}

		public virtual HSteamPipe SteamApi_SteamAPI_GetHSteamPipe() {
			return Native.SteamAPI_GetHSteamPipe();
		}

		public virtual HSteamUser SteamApi_SteamGameServer_GetHSteamUser() {
			return Native.SteamGameServer_GetHSteamUser();
		}

		public virtual HSteamPipe SteamApi_SteamGameServer_GetHSteamPipe() {
			return Native.SteamGameServer_GetHSteamPipe();
		}

		public virtual IntPtr SteamApi_SteamInternal_CreateInterface(string version) {
			return Native.SteamInternal_CreateInterface(version);
		}

		public virtual bool SteamApi_SteamAPI_RestartAppIfNecessary(uint unOwnAppID) {
			return Native.SteamAPI_RestartAppIfNecessary(unOwnAppID);
		}

		internal static class Native {
			[DllImport("libsteam_api.so")]
			internal static extern HSteamPipe SteamAPI_ISteamClient_CreateSteamPipe(IntPtr ISteamClient);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamClient_BReleaseSteamPipe(
				IntPtr ISteamClient,
				int hSteamPipe);

			[DllImport("libsteam_api.so")]
			internal static extern HSteamUser SteamAPI_ISteamClient_ConnectToGlobalUser(
				IntPtr ISteamClient,
				int hSteamPipe);

			[DllImport("libsteam_api.so")]
			internal static extern HSteamUser SteamAPI_ISteamClient_CreateLocalUser(
				IntPtr ISteamClient,
				out int phSteamPipe,
				AccountType eAccountType);

			[DllImport("libsteam_api.so")]
			internal static extern void SteamAPI_ISteamClient_ReleaseUser(
				IntPtr ISteamClient,
				int hSteamPipe,
				int hUser);

			[DllImport("libsteam_api.so")]
			internal static extern IntPtr SteamAPI_ISteamClient_GetISteamUser(
				IntPtr ISteamClient,
				int hSteamUser,
				int hSteamPipe,
				string pchVersion);

			[DllImport("libsteam_api.so")]
			internal static extern IntPtr SteamAPI_ISteamClient_GetISteamGameServer(
				IntPtr ISteamClient,
				int hSteamUser,
				int hSteamPipe,
				string pchVersion);

			[DllImport("libsteam_api.so")]
			internal static extern void SteamAPI_ISteamClient_SetLocalIPBinding(
				IntPtr ISteamClient,
				uint unIP,
				ushort usPort);

			[DllImport("libsteam_api.so")]
			internal static extern IntPtr SteamAPI_ISteamClient_GetISteamFriends(
				IntPtr ISteamClient,
				int hSteamUser,
				int hSteamPipe,
				string pchVersion);

			[DllImport("libsteam_api.so")]
			internal static extern IntPtr SteamAPI_ISteamClient_GetISteamUtils(
				IntPtr ISteamClient,
				int hSteamPipe,
				string pchVersion);

			[DllImport("libsteam_api.so")]
			internal static extern IntPtr SteamAPI_ISteamClient_GetISteamMatchmaking(
				IntPtr ISteamClient,
				int hSteamUser,
				int hSteamPipe,
				string pchVersion);

			[DllImport("libsteam_api.so")]
			internal static extern IntPtr SteamAPI_ISteamClient_GetISteamMatchmakingServers(
				IntPtr ISteamClient,
				int hSteamUser,
				int hSteamPipe,
				string pchVersion);

			[DllImport("libsteam_api.so")]
			internal static extern IntPtr SteamAPI_ISteamClient_GetISteamGenericInterface(
				IntPtr ISteamClient,
				int hSteamUser,
				int hSteamPipe,
				string pchVersion);

			[DllImport("libsteam_api.so")]
			internal static extern IntPtr SteamAPI_ISteamClient_GetISteamUserStats(
				IntPtr ISteamClient,
				int hSteamUser,
				int hSteamPipe,
				string pchVersion);

			[DllImport("libsteam_api.so")]
			internal static extern IntPtr SteamAPI_ISteamClient_GetISteamGameServerStats(
				IntPtr ISteamClient,
				int hSteamuser,
				int hSteamPipe,
				string pchVersion);

			[DllImport("libsteam_api.so")]
			internal static extern IntPtr SteamAPI_ISteamClient_GetISteamApps(
				IntPtr ISteamClient,
				int hSteamUser,
				int hSteamPipe,
				string pchVersion);

			[DllImport("libsteam_api.so")]
			internal static extern IntPtr SteamAPI_ISteamClient_GetISteamNetworking(
				IntPtr ISteamClient,
				int hSteamUser,
				int hSteamPipe,
				string pchVersion);

			[DllImport("libsteam_api.so")]
			internal static extern IntPtr SteamAPI_ISteamClient_GetISteamRemoteStorage(
				IntPtr ISteamClient,
				int hSteamuser,
				int hSteamPipe,
				string pchVersion);

			[DllImport("libsteam_api.so")]
			internal static extern IntPtr SteamAPI_ISteamClient_GetISteamScreenshots(
				IntPtr ISteamClient,
				int hSteamuser,
				int hSteamPipe,
				string pchVersion);

			[DllImport("libsteam_api.so")]
			internal static extern uint SteamAPI_ISteamClient_GetIPCCallCount(IntPtr ISteamClient);

			[DllImport("libsteam_api.so")]
			internal static extern void SteamAPI_ISteamClient_SetWarningMessageHook(
				IntPtr ISteamClient,
				IntPtr pFunction);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamClient_BShutdownIfAllPipesClosed(
				IntPtr ISteamClient);

			[DllImport("libsteam_api.so")]
			internal static extern IntPtr SteamAPI_ISteamClient_GetISteamHTTP(
				IntPtr ISteamClient,
				int hSteamuser,
				int hSteamPipe,
				string pchVersion);

			[DllImport("libsteam_api.so")]
			internal static extern IntPtr SteamAPI_ISteamClient_GetISteamUnifiedMessages(
				IntPtr ISteamClient,
				int hSteamuser,
				int hSteamPipe,
				string pchVersion);

			[DllImport("libsteam_api.so")]
			internal static extern IntPtr SteamAPI_ISteamClient_GetISteamController(
				IntPtr ISteamClient,
				int hSteamUser,
				int hSteamPipe,
				string pchVersion);

			[DllImport("libsteam_api.so")]
			internal static extern IntPtr SteamAPI_ISteamClient_GetISteamUGC(
				IntPtr ISteamClient,
				int hSteamUser,
				int hSteamPipe,
				string pchVersion);

			[DllImport("libsteam_api.so")]
			internal static extern IntPtr SteamAPI_ISteamClient_GetISteamAppList(
				IntPtr ISteamClient,
				int hSteamUser,
				int hSteamPipe,
				string pchVersion);

			[DllImport("libsteam_api.so")]
			internal static extern IntPtr SteamAPI_ISteamClient_GetISteamMusic(
				IntPtr ISteamClient,
				int hSteamuser,
				int hSteamPipe,
				string pchVersion);

			[DllImport("libsteam_api.so")]
			internal static extern IntPtr SteamAPI_ISteamClient_GetISteamMusicRemote(
				IntPtr ISteamClient,
				int hSteamuser,
				int hSteamPipe,
				string pchVersion);

			[DllImport("libsteam_api.so")]
			internal static extern IntPtr SteamAPI_ISteamClient_GetISteamHTMLSurface(
				IntPtr ISteamClient,
				int hSteamuser,
				int hSteamPipe,
				string pchVersion);

			[DllImport("libsteam_api.so")]
			internal static extern IntPtr SteamAPI_ISteamClient_GetISteamInventory(
				IntPtr ISteamClient,
				int hSteamuser,
				int hSteamPipe,
				string pchVersion);

			[DllImport("libsteam_api.so")]
			internal static extern IntPtr SteamAPI_ISteamClient_GetISteamVideo(
				IntPtr ISteamClient,
				int hSteamuser,
				int hSteamPipe,
				string pchVersion);

			[DllImport("libsteam_api.so")]
			internal static extern HSteamUser SteamAPI_ISteamUser_GetHSteamUser(IntPtr ISteamUser);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamUser_BLoggedOn(IntPtr ISteamUser);

			[DllImport("libsteam_api.so")]
			internal static extern CSteamID SteamAPI_ISteamUser_GetSteamID(IntPtr ISteamUser);

			[DllImport("libsteam_api.so")]
			internal static extern int SteamAPI_ISteamUser_InitiateGameConnection(
				IntPtr ISteamUser,
				IntPtr pAuthBlob,
				int cbMaxAuthBlob,
				ulong steamIDGameServer,
				uint unIPServer,
				ushort usPortServer,
				[MarshalAs(UnmanagedType.U1)] bool bSecure);

			[DllImport("libsteam_api.so")]
			internal static extern void SteamAPI_ISteamUser_TerminateGameConnection(
				IntPtr ISteamUser,
				uint unIPServer,
				ushort usPortServer);

			[DllImport("libsteam_api.so")]
			internal static extern void SteamAPI_ISteamUser_TrackAppUsageEvent(
				IntPtr ISteamUser,
				ulong gameID,
				int eAppUsageEvent,
				string pchExtraInfo);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamUser_GetUserDataFolder(
				IntPtr ISteamUser,
				StringBuilder pchBuffer,
				int cubBuffer);

			[DllImport("libsteam_api.so")]
			internal static extern void SteamAPI_ISteamUser_StartVoiceRecording(IntPtr ISteamUser);

			[DllImport("libsteam_api.so")]
			internal static extern void SteamAPI_ISteamUser_StopVoiceRecording(IntPtr ISteamUser);

			[DllImport("libsteam_api.so")]
			internal static extern VoiceResult SteamAPI_ISteamUser_GetAvailableVoice(
				IntPtr ISteamUser,
				out uint pcbCompressed,
				out uint pcbUncompressed_Deprecated,
				uint nUncompressedVoiceDesiredSampleRate_Deprecated);

			[DllImport("libsteam_api.so")]
			internal static extern VoiceResult SteamAPI_ISteamUser_GetVoice(
				IntPtr ISteamUser,
				[MarshalAs(UnmanagedType.U1)] bool bWantCompressed,
				IntPtr pDestBuffer,
				uint cbDestBufferSize,
				out uint nBytesWritten,
				[MarshalAs(UnmanagedType.U1)] bool bWantUncompressed_Deprecated,
				IntPtr pUncompressedDestBuffer_Deprecated,
				uint cbUncompressedDestBufferSize_Deprecated,
				out uint nUncompressBytesWritten_Deprecated,
				uint nUncompressedVoiceDesiredSampleRate_Deprecated);

			[DllImport("libsteam_api.so")]
			internal static extern VoiceResult SteamAPI_ISteamUser_DecompressVoice(
				IntPtr ISteamUser,
				IntPtr pCompressed,
				uint cbCompressed,
				IntPtr pDestBuffer,
				uint cbDestBufferSize,
				out uint nBytesWritten,
				uint nDesiredSampleRate);

			[DllImport("libsteam_api.so")]
			internal static extern uint SteamAPI_ISteamUser_GetVoiceOptimalSampleRate(IntPtr ISteamUser);

			[DllImport("libsteam_api.so")]
			internal static extern HAuthTicket SteamAPI_ISteamUser_GetAuthSessionTicket(
				IntPtr ISteamUser,
				IntPtr pTicket,
				int cbMaxTicket,
				out uint pcbTicket);

			[DllImport("libsteam_api.so")]
			internal static extern BeginAuthSessionResult SteamAPI_ISteamUser_BeginAuthSession(
				IntPtr ISteamUser,
				IntPtr pAuthTicket,
				int cbAuthTicket,
				ulong steamID);

			[DllImport("libsteam_api.so")]
			internal static extern void SteamAPI_ISteamUser_EndAuthSession(
				IntPtr ISteamUser,
				ulong steamID);

			[DllImport("libsteam_api.so")]
			internal static extern void SteamAPI_ISteamUser_CancelAuthTicket(
				IntPtr ISteamUser,
				uint hAuthTicket);

			[DllImport("libsteam_api.so")]
			internal static extern UserHasLicenseForAppResult SteamAPI_ISteamUser_UserHasLicenseForApp(
				IntPtr ISteamUser,
				ulong steamID,
				uint appID);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamUser_BIsBehindNAT(IntPtr ISteamUser);

			[DllImport("libsteam_api.so")]
			internal static extern void SteamAPI_ISteamUser_AdvertiseGame(
				IntPtr ISteamUser,
				ulong steamIDGameServer,
				uint unIPServer,
				ushort usPortServer);

			[DllImport("libsteam_api.so")]
			internal static extern SteamAPICall_t SteamAPI_ISteamUser_RequestEncryptedAppTicket(
				IntPtr ISteamUser,
				IntPtr pDataToInclude,
				int cbDataToInclude);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamUser_GetEncryptedAppTicket(
				IntPtr ISteamUser,
				IntPtr pTicket,
				int cbMaxTicket,
				out uint pcbTicket);

			[DllImport("libsteam_api.so")]
			internal static extern int SteamAPI_ISteamUser_GetGameBadgeLevel(
				IntPtr ISteamUser,
				int nSeries,
				[MarshalAs(UnmanagedType.U1)] bool bFoil);

			[DllImport("libsteam_api.so")]
			internal static extern int SteamAPI_ISteamUser_GetPlayerSteamLevel(IntPtr ISteamUser);

			[DllImport("libsteam_api.so")]
			internal static extern SteamAPICall_t SteamAPI_ISteamUser_RequestStoreAuthURL(
				IntPtr ISteamUser,
				string pchRedirectURL);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamUser_BIsPhoneVerified(IntPtr ISteamUser);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamUser_BIsTwoFactorEnabled(IntPtr ISteamUser);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamUser_BIsPhoneIdentifying(IntPtr ISteamUser);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamUser_BIsPhoneRequiringVerification(
				IntPtr ISteamUser);

			[DllImport("libsteam_api.so")]
			internal static extern IntPtr SteamAPI_ISteamFriends_GetPersonaName(IntPtr ISteamFriends);

			[DllImport("libsteam_api.so")]
			internal static extern SteamAPICall_t SteamAPI_ISteamFriends_SetPersonaName(
				IntPtr ISteamFriends,
				string pchPersonaName);

			[DllImport("libsteam_api.so")]
			internal static extern PersonaState SteamAPI_ISteamFriends_GetPersonaState(
				IntPtr ISteamFriends);

			[DllImport("libsteam_api.so")]
			internal static extern int SteamAPI_ISteamFriends_GetFriendCount(
				IntPtr ISteamFriends,
				int iFriendFlags);

			[DllImport("libsteam_api.so")]
			internal static extern CSteamID SteamAPI_ISteamFriends_GetFriendByIndex(
				IntPtr ISteamFriends,
				int iFriend,
				int iFriendFlags);

			[DllImport("libsteam_api.so")]
			internal static extern FriendRelationship SteamAPI_ISteamFriends_GetFriendRelationship(
				IntPtr ISteamFriends,
				ulong steamIDFriend);

			[DllImport("libsteam_api.so")]
			internal static extern PersonaState SteamAPI_ISteamFriends_GetFriendPersonaState(
				IntPtr ISteamFriends,
				ulong steamIDFriend);

			[DllImport("libsteam_api.so")]
			internal static extern IntPtr SteamAPI_ISteamFriends_GetFriendPersonaName(
				IntPtr ISteamFriends,
				ulong steamIDFriend);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamFriends_GetFriendGamePlayed(
				IntPtr ISteamFriends,
				ulong steamIDFriend,
				ref FriendGameInfo_t.PackSmall pFriendGameInfo);

			[DllImport("libsteam_api.so")]
			internal static extern IntPtr SteamAPI_ISteamFriends_GetFriendPersonaNameHistory(
				IntPtr ISteamFriends,
				ulong steamIDFriend,
				int iPersonaName);

			[DllImport("libsteam_api.so")]
			internal static extern int SteamAPI_ISteamFriends_GetFriendSteamLevel(
				IntPtr ISteamFriends,
				ulong steamIDFriend);

			[DllImport("libsteam_api.so")]
			internal static extern IntPtr SteamAPI_ISteamFriends_GetPlayerNickname(
				IntPtr ISteamFriends,
				ulong steamIDPlayer);

			[DllImport("libsteam_api.so")]
			internal static extern int SteamAPI_ISteamFriends_GetFriendsGroupCount(IntPtr ISteamFriends);

			[DllImport("libsteam_api.so")]
			internal static extern FriendsGroupID_t SteamAPI_ISteamFriends_GetFriendsGroupIDByIndex(
				IntPtr ISteamFriends,
				int iFG);

			[DllImport("libsteam_api.so")]
			internal static extern IntPtr SteamAPI_ISteamFriends_GetFriendsGroupName(
				IntPtr ISteamFriends,
				short friendsGroupID);

			[DllImport("libsteam_api.so")]
			internal static extern int SteamAPI_ISteamFriends_GetFriendsGroupMembersCount(
				IntPtr ISteamFriends,
				short friendsGroupID);

			[DllImport("libsteam_api.so")]
			internal static extern void SteamAPI_ISteamFriends_GetFriendsGroupMembersList(
				IntPtr ISteamFriends,
				short friendsGroupID,
				IntPtr pOutSteamIDMembers,
				int nMembersCount);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamFriends_HasFriend(
				IntPtr ISteamFriends,
				ulong steamIDFriend,
				int iFriendFlags);

			[DllImport("libsteam_api.so")]
			internal static extern int SteamAPI_ISteamFriends_GetClanCount(IntPtr ISteamFriends);

			[DllImport("libsteam_api.so")]
			internal static extern CSteamID SteamAPI_ISteamFriends_GetClanByIndex(
				IntPtr ISteamFriends,
				int iClan);

			[DllImport("libsteam_api.so")]
			internal static extern IntPtr SteamAPI_ISteamFriends_GetClanName(
				IntPtr ISteamFriends,
				ulong steamIDClan);

			[DllImport("libsteam_api.so")]
			internal static extern IntPtr SteamAPI_ISteamFriends_GetClanTag(
				IntPtr ISteamFriends,
				ulong steamIDClan);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamFriends_GetClanActivityCounts(
				IntPtr ISteamFriends,
				ulong steamIDClan,
				out int pnOnline,
				out int pnInGame,
				out int pnChatting);

			[DllImport("libsteam_api.so")]
			internal static extern SteamAPICall_t SteamAPI_ISteamFriends_DownloadClanActivityCounts(
				IntPtr ISteamFriends,
				IntPtr psteamIDClans,
				int cClansToRequest);

			[DllImport("libsteam_api.so")]
			internal static extern int SteamAPI_ISteamFriends_GetFriendCountFromSource(
				IntPtr ISteamFriends,
				ulong steamIDSource);

			[DllImport("libsteam_api.so")]
			internal static extern CSteamID SteamAPI_ISteamFriends_GetFriendFromSourceByIndex(
				IntPtr ISteamFriends,
				ulong steamIDSource,
				int iFriend);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamFriends_IsUserInSource(
				IntPtr ISteamFriends,
				ulong steamIDUser,
				ulong steamIDSource);

			[DllImport("libsteam_api.so")]
			internal static extern void SteamAPI_ISteamFriends_SetInGameVoiceSpeaking(
				IntPtr ISteamFriends,
				ulong steamIDUser,
				[MarshalAs(UnmanagedType.U1)] bool bSpeaking);

			[DllImport("libsteam_api.so")]
			internal static extern void SteamAPI_ISteamFriends_ActivateGameOverlay(
				IntPtr ISteamFriends,
				string pchDialog);

			[DllImport("libsteam_api.so")]
			internal static extern void SteamAPI_ISteamFriends_ActivateGameOverlayToUser(
				IntPtr ISteamFriends,
				string pchDialog,
				ulong steamID);

			[DllImport("libsteam_api.so")]
			internal static extern void SteamAPI_ISteamFriends_ActivateGameOverlayToWebPage(
				IntPtr ISteamFriends,
				string pchURL);

			[DllImport("libsteam_api.so")]
			internal static extern void SteamAPI_ISteamFriends_ActivateGameOverlayToStore(
				IntPtr ISteamFriends,
				uint nAppID,
				OverlayToStoreFlag eFlag);

			[DllImport("libsteam_api.so")]
			internal static extern void SteamAPI_ISteamFriends_SetPlayedWith(
				IntPtr ISteamFriends,
				ulong steamIDUserPlayedWith);

			[DllImport("libsteam_api.so")]
			internal static extern void SteamAPI_ISteamFriends_ActivateGameOverlayInviteDialog(
				IntPtr ISteamFriends,
				ulong steamIDLobby);

			[DllImport("libsteam_api.so")]
			internal static extern int SteamAPI_ISteamFriends_GetSmallFriendAvatar(
				IntPtr ISteamFriends,
				ulong steamIDFriend);

			[DllImport("libsteam_api.so")]
			internal static extern int SteamAPI_ISteamFriends_GetMediumFriendAvatar(
				IntPtr ISteamFriends,
				ulong steamIDFriend);

			[DllImport("libsteam_api.so")]
			internal static extern int SteamAPI_ISteamFriends_GetLargeFriendAvatar(
				IntPtr ISteamFriends,
				ulong steamIDFriend);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamFriends_RequestUserInformation(
				IntPtr ISteamFriends,
				ulong steamIDUser,
				[MarshalAs(UnmanagedType.U1)] bool bRequireNameOnly);

			[DllImport("libsteam_api.so")]
			internal static extern SteamAPICall_t SteamAPI_ISteamFriends_RequestClanOfficerList(
				IntPtr ISteamFriends,
				ulong steamIDClan);

			[DllImport("libsteam_api.so")]
			internal static extern CSteamID SteamAPI_ISteamFriends_GetClanOwner(
				IntPtr ISteamFriends,
				ulong steamIDClan);

			[DllImport("libsteam_api.so")]
			internal static extern int SteamAPI_ISteamFriends_GetClanOfficerCount(
				IntPtr ISteamFriends,
				ulong steamIDClan);

			[DllImport("libsteam_api.so")]
			internal static extern CSteamID SteamAPI_ISteamFriends_GetClanOfficerByIndex(
				IntPtr ISteamFriends,
				ulong steamIDClan,
				int iOfficer);

			[DllImport("libsteam_api.so")]
			internal static extern uint SteamAPI_ISteamFriends_GetUserRestrictions(IntPtr ISteamFriends);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamFriends_SetRichPresence(
				IntPtr ISteamFriends,
				string pchKey,
				string pchValue);

			[DllImport("libsteam_api.so")]
			internal static extern void SteamAPI_ISteamFriends_ClearRichPresence(IntPtr ISteamFriends);

			[DllImport("libsteam_api.so")]
			internal static extern IntPtr SteamAPI_ISteamFriends_GetFriendRichPresence(
				IntPtr ISteamFriends,
				ulong steamIDFriend,
				string pchKey);

			[DllImport("libsteam_api.so")]
			internal static extern int SteamAPI_ISteamFriends_GetFriendRichPresenceKeyCount(
				IntPtr ISteamFriends,
				ulong steamIDFriend);

			[DllImport("libsteam_api.so")]
			internal static extern IntPtr SteamAPI_ISteamFriends_GetFriendRichPresenceKeyByIndex(
				IntPtr ISteamFriends,
				ulong steamIDFriend,
				int iKey);

			[DllImport("libsteam_api.so")]
			internal static extern void SteamAPI_ISteamFriends_RequestFriendRichPresence(
				IntPtr ISteamFriends,
				ulong steamIDFriend);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamFriends_InviteUserToGame(
				IntPtr ISteamFriends,
				ulong steamIDFriend,
				string pchConnectString);

			[DllImport("libsteam_api.so")]
			internal static extern int SteamAPI_ISteamFriends_GetCoplayFriendCount(IntPtr ISteamFriends);

			[DllImport("libsteam_api.so")]
			internal static extern CSteamID SteamAPI_ISteamFriends_GetCoplayFriend(
				IntPtr ISteamFriends,
				int iCoplayFriend);

			[DllImport("libsteam_api.so")]
			internal static extern int SteamAPI_ISteamFriends_GetFriendCoplayTime(
				IntPtr ISteamFriends,
				ulong steamIDFriend);

			[DllImport("libsteam_api.so")]
			internal static extern AppId_t SteamAPI_ISteamFriends_GetFriendCoplayGame(
				IntPtr ISteamFriends,
				ulong steamIDFriend);

			[DllImport("libsteam_api.so")]
			internal static extern SteamAPICall_t SteamAPI_ISteamFriends_JoinClanChatRoom(
				IntPtr ISteamFriends,
				ulong steamIDClan);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamFriends_LeaveClanChatRoom(
				IntPtr ISteamFriends,
				ulong steamIDClan);

			[DllImport("libsteam_api.so")]
			internal static extern int SteamAPI_ISteamFriends_GetClanChatMemberCount(
				IntPtr ISteamFriends,
				ulong steamIDClan);

			[DllImport("libsteam_api.so")]
			internal static extern CSteamID SteamAPI_ISteamFriends_GetChatMemberByIndex(
				IntPtr ISteamFriends,
				ulong steamIDClan,
				int iUser);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamFriends_SendClanChatMessage(
				IntPtr ISteamFriends,
				ulong steamIDClanChat,
				string pchText);

			[DllImport("libsteam_api.so")]
			internal static extern int SteamAPI_ISteamFriends_GetClanChatMessage(
				IntPtr ISteamFriends,
				ulong steamIDClanChat,
				int iMessage,
				IntPtr prgchText,
				int cchTextMax,
				out ChatEntryType peChatEntryType,
				out ulong psteamidChatter);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamFriends_IsClanChatAdmin(
				IntPtr ISteamFriends,
				ulong steamIDClanChat,
				ulong steamIDUser);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamFriends_IsClanChatWindowOpenInSteam(
				IntPtr ISteamFriends,
				ulong steamIDClanChat);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamFriends_OpenClanChatWindowInSteam(
				IntPtr ISteamFriends,
				ulong steamIDClanChat);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamFriends_CloseClanChatWindowInSteam(
				IntPtr ISteamFriends,
				ulong steamIDClanChat);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamFriends_SetListenForFriendsMessages(
				IntPtr ISteamFriends,
				[MarshalAs(UnmanagedType.U1)] bool bInterceptEnabled);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamFriends_ReplyToFriendMessage(
				IntPtr ISteamFriends,
				ulong steamIDFriend,
				string pchMsgToSend);

			[DllImport("libsteam_api.so")]
			internal static extern int SteamAPI_ISteamFriends_GetFriendMessage(
				IntPtr ISteamFriends,
				ulong steamIDFriend,
				int iMessageID,
				IntPtr pvData,
				int cubData,
				out ChatEntryType peChatEntryType);

			[DllImport("libsteam_api.so")]
			internal static extern SteamAPICall_t SteamAPI_ISteamFriends_GetFollowerCount(
				IntPtr ISteamFriends,
				ulong steamID);

			[DllImport("libsteam_api.so")]
			internal static extern SteamAPICall_t SteamAPI_ISteamFriends_IsFollowing(
				IntPtr ISteamFriends,
				ulong steamID);

			[DllImport("libsteam_api.so")]
			internal static extern SteamAPICall_t SteamAPI_ISteamFriends_EnumerateFollowingList(
				IntPtr ISteamFriends,
				uint unStartIndex);

			[DllImport("libsteam_api.so")]
			internal static extern uint SteamAPI_ISteamUtils_GetSecondsSinceAppActive(IntPtr ISteamUtils);

			[DllImport("libsteam_api.so")]
			internal static extern uint SteamAPI_ISteamUtils_GetSecondsSinceComputerActive(
				IntPtr ISteamUtils);

			[DllImport("libsteam_api.so")]
			internal static extern Universe SteamAPI_ISteamUtils_GetConnectedUniverse(IntPtr ISteamUtils);

			[DllImport("libsteam_api.so")]
			internal static extern uint SteamAPI_ISteamUtils_GetServerRealTime(IntPtr ISteamUtils);

			[DllImport("libsteam_api.so")]
			internal static extern IntPtr SteamAPI_ISteamUtils_GetIPCountry(IntPtr ISteamUtils);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamUtils_GetImageSize(
				IntPtr ISteamUtils,
				int iImage,
				out uint pnWidth,
				out uint pnHeight);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamUtils_GetImageRGBA(
				IntPtr ISteamUtils,
				int iImage,
				IntPtr pubDest,
				int nDestBufferSize);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamUtils_GetCSERIPPort(
				IntPtr ISteamUtils,
				out uint unIP,
				out ushort usPort);

			[DllImport("libsteam_api.so")]
			internal static extern byte SteamAPI_ISteamUtils_GetCurrentBatteryPower(IntPtr ISteamUtils);

			[DllImport("libsteam_api.so")]
			internal static extern uint SteamAPI_ISteamUtils_GetAppID(IntPtr ISteamUtils);

			[DllImport("libsteam_api.so")]
			internal static extern void SteamAPI_ISteamUtils_SetOverlayNotificationPosition(
				IntPtr ISteamUtils,
				NotificationPosition eNotificationPosition);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamUtils_IsAPICallCompleted(
				IntPtr ISteamUtils,
				ulong hSteamAPICall,
				[MarshalAs(UnmanagedType.U1)] ref bool pbFailed);

			[DllImport("libsteam_api.so")]
			internal static extern SteamAPICallFailure SteamAPI_ISteamUtils_GetAPICallFailureReason(
				IntPtr ISteamUtils,
				ulong hSteamAPICall);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamUtils_GetAPICallResult(
				IntPtr ISteamUtils,
				ulong hSteamAPICall,
				IntPtr pCallback,
				int cubCallback,
				int iCallbackExpected,
				[MarshalAs(UnmanagedType.U1)] ref bool pbFailed);

			[DllImport("libsteam_api.so")]
			internal static extern uint SteamAPI_ISteamUtils_GetIPCCallCount(IntPtr ISteamUtils);

			[DllImport("libsteam_api.so")]
			internal static extern void SteamAPI_ISteamUtils_SetWarningMessageHook(
				IntPtr ISteamUtils,
				IntPtr pFunction);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamUtils_IsOverlayEnabled(IntPtr ISteamUtils);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamUtils_BOverlayNeedsPresent(IntPtr ISteamUtils);

			[DllImport("libsteam_api.so")]
			internal static extern SteamAPICall_t SteamAPI_ISteamUtils_CheckFileSignature(
				IntPtr ISteamUtils,
				string szFileName);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamUtils_ShowGamepadTextInput(
				IntPtr ISteamUtils,
				GamepadTextInputMode eInputMode,
				GamepadTextInputLineMode eLineInputMode,
				string pchDescription,
				uint unCharMax,
				string pchExistingText);

			[DllImport("libsteam_api.so")]
			internal static extern uint SteamAPI_ISteamUtils_GetEnteredGamepadTextLength(
				IntPtr ISteamUtils);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamUtils_GetEnteredGamepadTextInput(
				IntPtr ISteamUtils,
				StringBuilder pchText,
				uint cchText);

			[DllImport("libsteam_api.so")]
			internal static extern IntPtr SteamAPI_ISteamUtils_GetSteamUILanguage(IntPtr ISteamUtils);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamUtils_IsSteamRunningInVR(IntPtr ISteamUtils);

			[DllImport("libsteam_api.so")]
			internal static extern void SteamAPI_ISteamUtils_SetOverlayNotificationInset(
				IntPtr ISteamUtils,
				int nHorizontalInset,
				int nVerticalInset);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamUtils_IsSteamInBigPictureMode(IntPtr ISteamUtils);

			[DllImport("libsteam_api.so")]
			internal static extern void SteamAPI_ISteamUtils_StartVRDashboard(IntPtr ISteamUtils);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamUtils_IsVRHeadsetStreamingEnabled(
				IntPtr ISteamUtils);

			[DllImport("libsteam_api.so")]
			internal static extern void SteamAPI_ISteamUtils_SetVRHeadsetStreamingEnabled(
				IntPtr ISteamUtils,
				[MarshalAs(UnmanagedType.U1)] bool bEnabled);

			[DllImport("libsteam_api.so")]
			internal static extern int SteamAPI_ISteamMatchmaking_GetFavoriteGameCount(
				IntPtr ISteamMatchmaking);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamMatchmaking_GetFavoriteGame(
				IntPtr ISteamMatchmaking,
				int iGame,
				ref uint pnAppID,
				out uint pnIP,
				out ushort pnConnPort,
				out ushort pnQueryPort,
				out uint punFlags,
				out uint pRTime32LastPlayedOnServer);

			[DllImport("libsteam_api.so")]
			internal static extern int SteamAPI_ISteamMatchmaking_AddFavoriteGame(
				IntPtr ISteamMatchmaking,
				uint nAppID,
				uint nIP,
				ushort nConnPort,
				ushort nQueryPort,
				uint unFlags,
				uint rTime32LastPlayedOnServer);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamMatchmaking_RemoveFavoriteGame(
				IntPtr ISteamMatchmaking,
				uint nAppID,
				uint nIP,
				ushort nConnPort,
				ushort nQueryPort,
				uint unFlags);

			[DllImport("libsteam_api.so")]
			internal static extern SteamAPICall_t SteamAPI_ISteamMatchmaking_RequestLobbyList(
				IntPtr ISteamMatchmaking);

			[DllImport("libsteam_api.so")]
			internal static extern void SteamAPI_ISteamMatchmaking_AddRequestLobbyListStringFilter(
				IntPtr ISteamMatchmaking,
				string pchKeyToMatch,
				string pchValueToMatch,
				LobbyComparison eComparisonType);

			[DllImport("libsteam_api.so")]
			internal static extern void SteamAPI_ISteamMatchmaking_AddRequestLobbyListNumericalFilter(
				IntPtr ISteamMatchmaking,
				string pchKeyToMatch,
				int nValueToMatch,
				LobbyComparison eComparisonType);

			[DllImport("libsteam_api.so")]
			internal static extern void SteamAPI_ISteamMatchmaking_AddRequestLobbyListNearValueFilter(
				IntPtr ISteamMatchmaking,
				string pchKeyToMatch,
				int nValueToBeCloseTo);

			[DllImport("libsteam_api.so")]
			internal static extern void SteamAPI_ISteamMatchmaking_AddRequestLobbyListFilterSlotsAvailable(
				IntPtr ISteamMatchmaking,
				int nSlotsAvailable);

			[DllImport("libsteam_api.so")]
			internal static extern void SteamAPI_ISteamMatchmaking_AddRequestLobbyListDistanceFilter(
				IntPtr ISteamMatchmaking,
				LobbyDistanceFilter eLobbyDistanceFilter);

			[DllImport("libsteam_api.so")]
			internal static extern void SteamAPI_ISteamMatchmaking_AddRequestLobbyListResultCountFilter(
				IntPtr ISteamMatchmaking,
				int cMaxResults);

			[DllImport("libsteam_api.so")]
			internal static extern void SteamAPI_ISteamMatchmaking_AddRequestLobbyListCompatibleMembersFilter(
				IntPtr ISteamMatchmaking,
				ulong steamIDLobby);

			[DllImport("libsteam_api.so")]
			internal static extern CSteamID SteamAPI_ISteamMatchmaking_GetLobbyByIndex(
				IntPtr ISteamMatchmaking,
				int iLobby);

			[DllImport("libsteam_api.so")]
			internal static extern SteamAPICall_t SteamAPI_ISteamMatchmaking_CreateLobby(
				IntPtr ISteamMatchmaking,
				LobbyType eLobbyType,
				int cMaxMembers);

			[DllImport("libsteam_api.so")]
			internal static extern SteamAPICall_t SteamAPI_ISteamMatchmaking_JoinLobby(
				IntPtr ISteamMatchmaking,
				ulong steamIDLobby);

			[DllImport("libsteam_api.so")]
			internal static extern void SteamAPI_ISteamMatchmaking_LeaveLobby(
				IntPtr ISteamMatchmaking,
				ulong steamIDLobby);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamMatchmaking_InviteUserToLobby(
				IntPtr ISteamMatchmaking,
				ulong steamIDLobby,
				ulong steamIDInvitee);

			[DllImport("libsteam_api.so")]
			internal static extern int SteamAPI_ISteamMatchmaking_GetNumLobbyMembers(
				IntPtr ISteamMatchmaking,
				ulong steamIDLobby);

			[DllImport("libsteam_api.so")]
			internal static extern CSteamID SteamAPI_ISteamMatchmaking_GetLobbyMemberByIndex(
				IntPtr ISteamMatchmaking,
				ulong steamIDLobby,
				int iMember);

			[DllImport("libsteam_api.so")]
			internal static extern IntPtr SteamAPI_ISteamMatchmaking_GetLobbyData(
				IntPtr ISteamMatchmaking,
				ulong steamIDLobby,
				string pchKey);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamMatchmaking_SetLobbyData(
				IntPtr ISteamMatchmaking,
				ulong steamIDLobby,
				string pchKey,
				string pchValue);

			[DllImport("libsteam_api.so")]
			internal static extern int SteamAPI_ISteamMatchmaking_GetLobbyDataCount(
				IntPtr ISteamMatchmaking,
				ulong steamIDLobby);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamMatchmaking_GetLobbyDataByIndex(
				IntPtr ISteamMatchmaking,
				ulong steamIDLobby,
				int iLobbyData,
				StringBuilder pchKey,
				int cchKeyBufferSize,
				StringBuilder pchValue,
				int cchValueBufferSize);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamMatchmaking_DeleteLobbyData(
				IntPtr ISteamMatchmaking,
				ulong steamIDLobby,
				string pchKey);

			[DllImport("libsteam_api.so")]
			internal static extern IntPtr SteamAPI_ISteamMatchmaking_GetLobbyMemberData(
				IntPtr ISteamMatchmaking,
				ulong steamIDLobby,
				ulong steamIDUser,
				string pchKey);

			[DllImport("libsteam_api.so")]
			internal static extern void SteamAPI_ISteamMatchmaking_SetLobbyMemberData(
				IntPtr ISteamMatchmaking,
				ulong steamIDLobby,
				string pchKey,
				string pchValue);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamMatchmaking_SendLobbyChatMsg(
				IntPtr ISteamMatchmaking,
				ulong steamIDLobby,
				IntPtr pvMsgBody,
				int cubMsgBody);

			[DllImport("libsteam_api.so")]
			internal static extern int SteamAPI_ISteamMatchmaking_GetLobbyChatEntry(
				IntPtr ISteamMatchmaking,
				ulong steamIDLobby,
				int iChatID,
				out ulong pSteamIDUser,
				IntPtr pvData,
				int cubData,
				out ChatEntryType peChatEntryType);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamMatchmaking_RequestLobbyData(
				IntPtr ISteamMatchmaking,
				ulong steamIDLobby);

			[DllImport("libsteam_api.so")]
			internal static extern void SteamAPI_ISteamMatchmaking_SetLobbyGameServer(
				IntPtr ISteamMatchmaking,
				ulong steamIDLobby,
				uint unGameServerIP,
				ushort unGameServerPort,
				ulong steamIDGameServer);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamMatchmaking_GetLobbyGameServer(
				IntPtr ISteamMatchmaking,
				ulong steamIDLobby,
				out uint punGameServerIP,
				out ushort punGameServerPort,
				out ulong psteamIDGameServer);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamMatchmaking_SetLobbyMemberLimit(
				IntPtr ISteamMatchmaking,
				ulong steamIDLobby,
				int cMaxMembers);

			[DllImport("libsteam_api.so")]
			internal static extern int SteamAPI_ISteamMatchmaking_GetLobbyMemberLimit(
				IntPtr ISteamMatchmaking,
				ulong steamIDLobby);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamMatchmaking_SetLobbyType(
				IntPtr ISteamMatchmaking,
				ulong steamIDLobby,
				LobbyType eLobbyType);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamMatchmaking_SetLobbyJoinable(
				IntPtr ISteamMatchmaking,
				ulong steamIDLobby,
				[MarshalAs(UnmanagedType.U1)] bool bLobbyJoinable);

			[DllImport("libsteam_api.so")]
			internal static extern CSteamID SteamAPI_ISteamMatchmaking_GetLobbyOwner(
				IntPtr ISteamMatchmaking,
				ulong steamIDLobby);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamMatchmaking_SetLobbyOwner(
				IntPtr ISteamMatchmaking,
				ulong steamIDLobby,
				ulong steamIDNewOwner);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamMatchmaking_SetLinkedLobby(
				IntPtr ISteamMatchmaking,
				ulong steamIDLobby,
				ulong steamIDLobbyDependent);

			[DllImport("libsteam_api.so")]
			internal static extern HServerListRequest SteamAPI_ISteamMatchmakingServers_RequestInternetServerList(
				IntPtr ISteamMatchmakingServers,
				uint iApp,
				IntPtr ppchFilters,
				uint nFilters,
				IntPtr pRequestServersResponse);

			[DllImport("libsteam_api.so")]
			internal static extern HServerListRequest SteamAPI_ISteamMatchmakingServers_RequestLANServerList(
				IntPtr ISteamMatchmakingServers,
				uint iApp,
				IntPtr pRequestServersResponse);

			[DllImport("libsteam_api.so")]
			internal static extern HServerListRequest SteamAPI_ISteamMatchmakingServers_RequestFriendsServerList(
				IntPtr ISteamMatchmakingServers,
				uint iApp,
				IntPtr ppchFilters,
				uint nFilters,
				IntPtr pRequestServersResponse);

			[DllImport("libsteam_api.so")]
			internal static extern HServerListRequest SteamAPI_ISteamMatchmakingServers_RequestFavoritesServerList(
				IntPtr ISteamMatchmakingServers,
				uint iApp,
				IntPtr ppchFilters,
				uint nFilters,
				IntPtr pRequestServersResponse);

			[DllImport("libsteam_api.so")]
			internal static extern HServerListRequest SteamAPI_ISteamMatchmakingServers_RequestHistoryServerList(
				IntPtr ISteamMatchmakingServers,
				uint iApp,
				IntPtr ppchFilters,
				uint nFilters,
				IntPtr pRequestServersResponse);

			[DllImport("libsteam_api.so")]
			internal static extern HServerListRequest SteamAPI_ISteamMatchmakingServers_RequestSpectatorServerList(
				IntPtr ISteamMatchmakingServers,
				uint iApp,
				IntPtr ppchFilters,
				uint nFilters,
				IntPtr pRequestServersResponse);

			[DllImport("libsteam_api.so")]
			internal static extern void SteamAPI_ISteamMatchmakingServers_ReleaseRequest(
				IntPtr ISteamMatchmakingServers,
				IntPtr hServerListRequest);

			[DllImport("libsteam_api.so")]
			internal static extern IntPtr SteamAPI_ISteamMatchmakingServers_GetServerDetails(
				IntPtr ISteamMatchmakingServers,
				IntPtr hRequest,
				int iServer);

			[DllImport("libsteam_api.so")]
			internal static extern void SteamAPI_ISteamMatchmakingServers_CancelQuery(
				IntPtr ISteamMatchmakingServers,
				IntPtr hRequest);

			[DllImport("libsteam_api.so")]
			internal static extern void SteamAPI_ISteamMatchmakingServers_RefreshQuery(
				IntPtr ISteamMatchmakingServers,
				IntPtr hRequest);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamMatchmakingServers_IsRefreshing(
				IntPtr ISteamMatchmakingServers,
				IntPtr hRequest);

			[DllImport("libsteam_api.so")]
			internal static extern int SteamAPI_ISteamMatchmakingServers_GetServerCount(
				IntPtr ISteamMatchmakingServers,
				IntPtr hRequest);

			[DllImport("libsteam_api.so")]
			internal static extern void SteamAPI_ISteamMatchmakingServers_RefreshServer(
				IntPtr ISteamMatchmakingServers,
				IntPtr hRequest,
				int iServer);

			[DllImport("libsteam_api.so")]
			internal static extern HServerQuery SteamAPI_ISteamMatchmakingServers_PingServer(
				IntPtr ISteamMatchmakingServers,
				uint unIP,
				ushort usPort,
				IntPtr pRequestServersResponse);

			[DllImport("libsteam_api.so")]
			internal static extern HServerQuery SteamAPI_ISteamMatchmakingServers_PlayerDetails(
				IntPtr ISteamMatchmakingServers,
				uint unIP,
				ushort usPort,
				IntPtr pRequestServersResponse);

			[DllImport("libsteam_api.so")]
			internal static extern HServerQuery SteamAPI_ISteamMatchmakingServers_ServerRules(
				IntPtr ISteamMatchmakingServers,
				uint unIP,
				ushort usPort,
				IntPtr pRequestServersResponse);

			[DllImport("libsteam_api.so")]
			internal static extern void SteamAPI_ISteamMatchmakingServers_CancelServerQuery(
				IntPtr ISteamMatchmakingServers,
				int hServerQuery);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamRemoteStorage_FileWrite(
				IntPtr ISteamRemoteStorage,
				string pchFile,
				IntPtr pvData,
				int cubData);

			[DllImport("libsteam_api.so")]
			internal static extern int SteamAPI_ISteamRemoteStorage_FileRead(
				IntPtr ISteamRemoteStorage,
				string pchFile,
				IntPtr pvData,
				int cubDataToRead);

			[DllImport("libsteam_api.so")]
			internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_FileWriteAsync(
				IntPtr ISteamRemoteStorage,
				string pchFile,
				IntPtr pvData,
				uint cubData);

			[DllImport("libsteam_api.so")]
			internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_FileReadAsync(
				IntPtr ISteamRemoteStorage,
				string pchFile,
				uint nOffset,
				uint cubToRead);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamRemoteStorage_FileReadAsyncComplete(
				IntPtr ISteamRemoteStorage,
				ulong hReadCall,
				IntPtr pvBuffer,
				uint cubToRead);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamRemoteStorage_FileForget(
				IntPtr ISteamRemoteStorage,
				string pchFile);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamRemoteStorage_FileDelete(
				IntPtr ISteamRemoteStorage,
				string pchFile);

			[DllImport("libsteam_api.so")]
			internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_FileShare(
				IntPtr ISteamRemoteStorage,
				string pchFile);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamRemoteStorage_SetSyncPlatforms(
				IntPtr ISteamRemoteStorage,
				string pchFile,
				RemoteStoragePlatform eRemoteStoragePlatform);

			[DllImport("libsteam_api.so")]
			internal static extern UGCFileWriteStreamHandle_t SteamAPI_ISteamRemoteStorage_FileWriteStreamOpen(
				IntPtr ISteamRemoteStorage,
				string pchFile);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamRemoteStorage_FileWriteStreamWriteChunk(
				IntPtr ISteamRemoteStorage,
				ulong writeHandle,
				IntPtr pvData,
				int cubData);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamRemoteStorage_FileWriteStreamClose(
				IntPtr ISteamRemoteStorage,
				ulong writeHandle);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamRemoteStorage_FileWriteStreamCancel(
				IntPtr ISteamRemoteStorage,
				ulong writeHandle);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamRemoteStorage_FileExists(
				IntPtr ISteamRemoteStorage,
				string pchFile);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamRemoteStorage_FilePersisted(
				IntPtr ISteamRemoteStorage,
				string pchFile);

			[DllImport("libsteam_api.so")]
			internal static extern int SteamAPI_ISteamRemoteStorage_GetFileSize(
				IntPtr ISteamRemoteStorage,
				string pchFile);

			[DllImport("libsteam_api.so")]
			internal static extern long SteamAPI_ISteamRemoteStorage_GetFileTimestamp(
				IntPtr ISteamRemoteStorage,
				string pchFile);

			[DllImport("libsteam_api.so")]
			internal static extern RemoteStoragePlatform SteamAPI_ISteamRemoteStorage_GetSyncPlatforms(
				IntPtr ISteamRemoteStorage,
				string pchFile);

			[DllImport("libsteam_api.so")]
			internal static extern int SteamAPI_ISteamRemoteStorage_GetFileCount(
				IntPtr ISteamRemoteStorage);

			[DllImport("libsteam_api.so")]
			internal static extern IntPtr SteamAPI_ISteamRemoteStorage_GetFileNameAndSize(
				IntPtr ISteamRemoteStorage,
				int iFile,
				out int pnFileSizeInBytes);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamRemoteStorage_GetQuota(
				IntPtr ISteamRemoteStorage,
				out ulong pnTotalBytes,
				out ulong puAvailableBytes);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamRemoteStorage_IsCloudEnabledForAccount(
				IntPtr ISteamRemoteStorage);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamRemoteStorage_IsCloudEnabledForApp(
				IntPtr ISteamRemoteStorage);

			[DllImport("libsteam_api.so")]
			internal static extern void SteamAPI_ISteamRemoteStorage_SetCloudEnabledForApp(
				IntPtr ISteamRemoteStorage,
				[MarshalAs(UnmanagedType.U1)] bool bEnabled);

			[DllImport("libsteam_api.so")]
			internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_UGCDownload(
				IntPtr ISteamRemoteStorage,
				ulong hContent,
				uint unPriority);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamRemoteStorage_GetUGCDownloadProgress(
				IntPtr ISteamRemoteStorage,
				ulong hContent,
				out int pnBytesDownloaded,
				out int pnBytesExpected);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamRemoteStorage_GetUGCDetails(
				IntPtr ISteamRemoteStorage,
				ulong hContent,
				ref uint pnAppID,
				StringBuilder ppchName,
				out int pnFileSizeInBytes,
				out ulong pSteamIDOwner);

			[DllImport("libsteam_api.so")]
			internal static extern int SteamAPI_ISteamRemoteStorage_UGCRead(
				IntPtr ISteamRemoteStorage,
				ulong hContent,
				IntPtr pvData,
				int cubDataToRead,
				uint cOffset,
				UGCReadAction eAction);

			[DllImport("libsteam_api.so")]
			internal static extern int SteamAPI_ISteamRemoteStorage_GetCachedUGCCount(
				IntPtr ISteamRemoteStorage);

			[DllImport("libsteam_api.so")]
			internal static extern UGCHandle_t SteamAPI_ISteamRemoteStorage_GetCachedUGCHandle(
				IntPtr ISteamRemoteStorage,
				int iCachedContent);

			[DllImport("libsteam_api.so")]
			internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_PublishWorkshopFile(
				IntPtr ISteamRemoteStorage,
				string pchFile,
				string pchPreviewFile,
				uint nConsumerAppId,
				string pchTitle,
				string pchDescription,
				RemoteStoragePublishedFileVisibility eVisibility,
				ref SteamParamStringArray_t.PackSmall pTags,
				WorkshopFileType eWorkshopFileType);

			[DllImport("libsteam_api.so")]
			internal static extern PublishedFileUpdateHandle_t
				SteamAPI_ISteamRemoteStorage_CreatePublishedFileUpdateRequest(
					IntPtr ISteamRemoteStorage,
					ulong unPublishedFileId);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamRemoteStorage_UpdatePublishedFileFile(
				IntPtr ISteamRemoteStorage,
				ulong updateHandle,
				string pchFile);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamRemoteStorage_UpdatePublishedFilePreviewFile(
				IntPtr ISteamRemoteStorage,
				ulong updateHandle,
				string pchPreviewFile);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamRemoteStorage_UpdatePublishedFileTitle(
				IntPtr ISteamRemoteStorage,
				ulong updateHandle,
				string pchTitle);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamRemoteStorage_UpdatePublishedFileDescription(
				IntPtr ISteamRemoteStorage,
				ulong updateHandle,
				string pchDescription);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamRemoteStorage_UpdatePublishedFileVisibility(
				IntPtr ISteamRemoteStorage,
				ulong updateHandle,
				RemoteStoragePublishedFileVisibility eVisibility);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamRemoteStorage_UpdatePublishedFileTags(
				IntPtr ISteamRemoteStorage,
				ulong updateHandle,
				ref SteamParamStringArray_t.PackSmall pTags);

			[DllImport("libsteam_api.so")]
			internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_CommitPublishedFileUpdate(
				IntPtr ISteamRemoteStorage,
				ulong updateHandle);

			[DllImport("libsteam_api.so")]
			internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_GetPublishedFileDetails(
				IntPtr ISteamRemoteStorage,
				ulong unPublishedFileId,
				uint unMaxSecondsOld);

			[DllImport("libsteam_api.so")]
			internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_DeletePublishedFile(
				IntPtr ISteamRemoteStorage,
				ulong unPublishedFileId);

			[DllImport("libsteam_api.so")]
			internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_EnumerateUserPublishedFiles(
				IntPtr ISteamRemoteStorage,
				uint unStartIndex);

			[DllImport("libsteam_api.so")]
			internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_SubscribePublishedFile(
				IntPtr ISteamRemoteStorage,
				ulong unPublishedFileId);

			[DllImport("libsteam_api.so")]
			internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_EnumerateUserSubscribedFiles(
				IntPtr ISteamRemoteStorage,
				uint unStartIndex);

			[DllImport("libsteam_api.so")]
			internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_UnsubscribePublishedFile(
				IntPtr ISteamRemoteStorage,
				ulong unPublishedFileId);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamRemoteStorage_UpdatePublishedFileSetChangeDescription(
				IntPtr ISteamRemoteStorage,
				ulong updateHandle,
				string pchChangeDescription);

			[DllImport("libsteam_api.so")]
			internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_GetPublishedItemVoteDetails(
				IntPtr ISteamRemoteStorage,
				ulong unPublishedFileId);

			[DllImport("libsteam_api.so")]
			internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_UpdateUserPublishedItemVote(
				IntPtr ISteamRemoteStorage,
				ulong unPublishedFileId,
				[MarshalAs(UnmanagedType.U1)] bool bVoteUp);

			[DllImport("libsteam_api.so")]
			internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_GetUserPublishedItemVoteDetails(
				IntPtr ISteamRemoteStorage,
				ulong unPublishedFileId);

			[DllImport("libsteam_api.so")]
			internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_EnumerateUserSharedWorkshopFiles(
				IntPtr ISteamRemoteStorage,
				ulong steamId,
				uint unStartIndex,
				ref SteamParamStringArray_t.PackSmall pRequiredTags,
				ref SteamParamStringArray_t.PackSmall pExcludedTags);

			[DllImport("libsteam_api.so")]
			internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_PublishVideo(
				IntPtr ISteamRemoteStorage,
				WorkshopVideoProvider eVideoProvider,
				string pchVideoAccount,
				string pchVideoIdentifier,
				string pchPreviewFile,
				uint nConsumerAppId,
				string pchTitle,
				string pchDescription,
				RemoteStoragePublishedFileVisibility eVisibility,
				ref SteamParamStringArray_t.PackSmall pTags);

			[DllImport("libsteam_api.so")]
			internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_SetUserPublishedFileAction(
				IntPtr ISteamRemoteStorage,
				ulong unPublishedFileId,
				WorkshopFileAction eAction);

			[DllImport("libsteam_api.so")]
			internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_EnumeratePublishedFilesByUserAction(
				IntPtr ISteamRemoteStorage,
				WorkshopFileAction eAction,
				uint unStartIndex);

			[DllImport("libsteam_api.so")]
			internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_EnumeratePublishedWorkshopFiles(
				IntPtr ISteamRemoteStorage,
				WorkshopEnumerationType eEnumerationType,
				uint unStartIndex,
				uint unCount,
				uint unDays,
				ref SteamParamStringArray_t.PackSmall pTags,
				ref SteamParamStringArray_t.PackSmall pUserTags);

			[DllImport("libsteam_api.so")]
			internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_UGCDownloadToLocation(
				IntPtr ISteamRemoteStorage,
				ulong hContent,
				string pchLocation,
				uint unPriority);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamUserStats_RequestCurrentStats(
				IntPtr ISteamUserStats);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamUserStats_GetStat(
				IntPtr ISteamUserStats,
				string pchName,
				out int pData);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamUserStats_GetStat0(
				IntPtr ISteamUserStats,
				string pchName,
				out float pData);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamUserStats_SetStat(
				IntPtr ISteamUserStats,
				string pchName,
				int nData);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamUserStats_SetStat0(
				IntPtr ISteamUserStats,
				string pchName,
				float fData);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamUserStats_UpdateAvgRateStat(
				IntPtr ISteamUserStats,
				string pchName,
				float flCountThisSession,
				double dSessionLength);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamUserStats_GetAchievement(
				IntPtr ISteamUserStats,
				string pchName,
				[MarshalAs(UnmanagedType.U1)] ref bool pbAchieved);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamUserStats_SetAchievement(
				IntPtr ISteamUserStats,
				string pchName);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamUserStats_ClearAchievement(
				IntPtr ISteamUserStats,
				string pchName);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamUserStats_GetAchievementAndUnlockTime(
				IntPtr ISteamUserStats,
				string pchName,
				[MarshalAs(UnmanagedType.U1)] ref bool pbAchieved,
				out uint punUnlockTime);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamUserStats_StoreStats(IntPtr ISteamUserStats);

			[DllImport("libsteam_api.so")]
			internal static extern int SteamAPI_ISteamUserStats_GetAchievementIcon(
				IntPtr ISteamUserStats,
				string pchName);

			[DllImport("libsteam_api.so")]
			internal static extern IntPtr SteamAPI_ISteamUserStats_GetAchievementDisplayAttribute(
				IntPtr ISteamUserStats,
				string pchName,
				string pchKey);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamUserStats_IndicateAchievementProgress(
				IntPtr ISteamUserStats,
				string pchName,
				uint nCurProgress,
				uint nMaxProgress);

			[DllImport("libsteam_api.so")]
			internal static extern uint SteamAPI_ISteamUserStats_GetNumAchievements(
				IntPtr ISteamUserStats);

			[DllImport("libsteam_api.so")]
			internal static extern IntPtr SteamAPI_ISteamUserStats_GetAchievementName(
				IntPtr ISteamUserStats,
				uint iAchievement);

			[DllImport("libsteam_api.so")]
			internal static extern SteamAPICall_t SteamAPI_ISteamUserStats_RequestUserStats(
				IntPtr ISteamUserStats,
				ulong steamIDUser);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamUserStats_GetUserStat(
				IntPtr ISteamUserStats,
				ulong steamIDUser,
				string pchName,
				out int pData);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamUserStats_GetUserStat0(
				IntPtr ISteamUserStats,
				ulong steamIDUser,
				string pchName,
				out float pData);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamUserStats_GetUserAchievement(
				IntPtr ISteamUserStats,
				ulong steamIDUser,
				string pchName,
				[MarshalAs(UnmanagedType.U1)] ref bool pbAchieved);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamUserStats_GetUserAchievementAndUnlockTime(
				IntPtr ISteamUserStats,
				ulong steamIDUser,
				string pchName,
				[MarshalAs(UnmanagedType.U1)] ref bool pbAchieved,
				out uint punUnlockTime);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamUserStats_ResetAllStats(
				IntPtr ISteamUserStats,
				[MarshalAs(UnmanagedType.U1)] bool bAchievementsToo);

			[DllImport("libsteam_api.so")]
			internal static extern SteamAPICall_t SteamAPI_ISteamUserStats_FindOrCreateLeaderboard(
				IntPtr ISteamUserStats,
				string pchLeaderboardName,
				LeaderboardSortMethod eLeaderboardSortMethod,
				LeaderboardDisplayType eLeaderboardDisplayType);

			[DllImport("libsteam_api.so")]
			internal static extern SteamAPICall_t SteamAPI_ISteamUserStats_FindLeaderboard(
				IntPtr ISteamUserStats,
				string pchLeaderboardName);

			[DllImport("libsteam_api.so")]
			internal static extern IntPtr SteamAPI_ISteamUserStats_GetLeaderboardName(
				IntPtr ISteamUserStats,
				ulong hSteamLeaderboard);

			[DllImport("libsteam_api.so")]
			internal static extern int SteamAPI_ISteamUserStats_GetLeaderboardEntryCount(
				IntPtr ISteamUserStats,
				ulong hSteamLeaderboard);

			[DllImport("libsteam_api.so")]
			internal static extern LeaderboardSortMethod SteamAPI_ISteamUserStats_GetLeaderboardSortMethod(
				IntPtr ISteamUserStats,
				ulong hSteamLeaderboard);

			[DllImport("libsteam_api.so")]
			internal static extern LeaderboardDisplayType SteamAPI_ISteamUserStats_GetLeaderboardDisplayType(
				IntPtr ISteamUserStats,
				ulong hSteamLeaderboard);

			[DllImport("libsteam_api.so")]
			internal static extern SteamAPICall_t SteamAPI_ISteamUserStats_DownloadLeaderboardEntries(
				IntPtr ISteamUserStats,
				ulong hSteamLeaderboard,
				LeaderboardDataRequest eLeaderboardDataRequest,
				int nRangeStart,
				int nRangeEnd);

			[DllImport("libsteam_api.so")]
			internal static extern SteamAPICall_t SteamAPI_ISteamUserStats_DownloadLeaderboardEntriesForUsers(
				IntPtr ISteamUserStats,
				ulong hSteamLeaderboard,
				IntPtr prgUsers,
				int cUsers);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamUserStats_GetDownloadedLeaderboardEntry(
				IntPtr ISteamUserStats,
				ulong hSteamLeaderboardEntries,
				int index,
				ref LeaderboardEntry_t.PackSmall pLeaderboardEntry,
				IntPtr pDetails,
				int cDetailsMax);

			[DllImport("libsteam_api.so")]
			internal static extern SteamAPICall_t SteamAPI_ISteamUserStats_UploadLeaderboardScore(
				IntPtr ISteamUserStats,
				ulong hSteamLeaderboard,
				LeaderboardUploadScoreMethod eLeaderboardUploadScoreMethod,
				int nScore,
				int[] pScoreDetails,
				int cScoreDetailsCount);

			[DllImport("libsteam_api.so")]
			internal static extern SteamAPICall_t SteamAPI_ISteamUserStats_AttachLeaderboardUGC(
				IntPtr ISteamUserStats,
				ulong hSteamLeaderboard,
				ulong hUGC);

			[DllImport("libsteam_api.so")]
			internal static extern SteamAPICall_t SteamAPI_ISteamUserStats_GetNumberOfCurrentPlayers(
				IntPtr ISteamUserStats);

			[DllImport("libsteam_api.so")]
			internal static extern SteamAPICall_t SteamAPI_ISteamUserStats_RequestGlobalAchievementPercentages(
				IntPtr ISteamUserStats);

			[DllImport("libsteam_api.so")]
			internal static extern int SteamAPI_ISteamUserStats_GetMostAchievedAchievementInfo(
				IntPtr ISteamUserStats,
				StringBuilder pchName,
				uint unNameBufLen,
				out float pflPercent,
				[MarshalAs(UnmanagedType.U1)] ref bool pbAchieved);

			[DllImport("libsteam_api.so")]
			internal static extern int SteamAPI_ISteamUserStats_GetNextMostAchievedAchievementInfo(
				IntPtr ISteamUserStats,
				int iIteratorPrevious,
				StringBuilder pchName,
				uint unNameBufLen,
				out float pflPercent,
				[MarshalAs(UnmanagedType.U1)] ref bool pbAchieved);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamUserStats_GetAchievementAchievedPercent(
				IntPtr ISteamUserStats,
				string pchName,
				out float pflPercent);

			[DllImport("libsteam_api.so")]
			internal static extern SteamAPICall_t SteamAPI_ISteamUserStats_RequestGlobalStats(
				IntPtr ISteamUserStats,
				int nHistoryDays);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamUserStats_GetGlobalStat(
				IntPtr ISteamUserStats,
				string pchStatName,
				out long pData);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamUserStats_GetGlobalStat0(
				IntPtr ISteamUserStats,
				string pchStatName,
				out double pData);

			[DllImport("libsteam_api.so")]
			internal static extern int SteamAPI_ISteamUserStats_GetGlobalStatHistory(
				IntPtr ISteamUserStats,
				string pchStatName,
				out long pData,
				uint cubData);

			[DllImport("libsteam_api.so")]
			internal static extern int SteamAPI_ISteamUserStats_GetGlobalStatHistory0(
				IntPtr ISteamUserStats,
				string pchStatName,
				out double pData,
				uint cubData);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamApps_BIsSubscribed(IntPtr ISteamApps);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamApps_BIsLowViolence(IntPtr ISteamApps);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamApps_BIsCybercafe(IntPtr ISteamApps);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamApps_BIsVACBanned(IntPtr ISteamApps);

			[DllImport("libsteam_api.so")]
			internal static extern IntPtr SteamAPI_ISteamApps_GetCurrentGameLanguage(IntPtr ISteamApps);

			[DllImport("libsteam_api.so")]
			internal static extern IntPtr SteamAPI_ISteamApps_GetAvailableGameLanguages(
				IntPtr ISteamApps);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamApps_BIsSubscribedApp(
				IntPtr ISteamApps,
				uint appID);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamApps_BIsDlcInstalled(
				IntPtr ISteamApps,
				uint appID);

			[DllImport("libsteam_api.so")]
			internal static extern uint SteamAPI_ISteamApps_GetEarliestPurchaseUnixTime(
				IntPtr ISteamApps,
				uint nAppID);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamApps_BIsSubscribedFromFreeWeekend(
				IntPtr ISteamApps);

			[DllImport("libsteam_api.so")]
			internal static extern int SteamAPI_ISteamApps_GetDLCCount(IntPtr ISteamApps);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamApps_BGetDLCDataByIndex(
				IntPtr ISteamApps,
				int iDLC,
				ref uint pAppID,
				[MarshalAs(UnmanagedType.U1)] ref bool pbAvailable,
				StringBuilder pchName,
				int cchNameBufferSize);

			[DllImport("libsteam_api.so")]
			internal static extern void SteamAPI_ISteamApps_InstallDLC(IntPtr ISteamApps, uint nAppID);

			[DllImport("libsteam_api.so")]
			internal static extern void SteamAPI_ISteamApps_UninstallDLC(IntPtr ISteamApps, uint nAppID);

			[DllImport("libsteam_api.so")]
			internal static extern void SteamAPI_ISteamApps_RequestAppProofOfPurchaseKey(
				IntPtr ISteamApps,
				uint nAppID);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamApps_GetCurrentBetaName(
				IntPtr ISteamApps,
				StringBuilder pchName,
				int cchNameBufferSize);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamApps_MarkContentCorrupt(
				IntPtr ISteamApps,
				[MarshalAs(UnmanagedType.U1)] bool bMissingFilesOnly);

			[DllImport("libsteam_api.so")]
			internal static extern uint SteamAPI_ISteamApps_GetInstalledDepots(
				IntPtr ISteamApps,
				uint appID,
				IntPtr pvecDepots,
				uint cMaxDepots);

			[DllImport("libsteam_api.so")]
			internal static extern uint SteamAPI_ISteamApps_GetAppInstallDir(
				IntPtr ISteamApps,
				uint appID,
				StringBuilder pchFolder,
				uint cchFolderBufferSize);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamApps_BIsAppInstalled(
				IntPtr ISteamApps,
				uint appID);

			[DllImport("libsteam_api.so")]
			internal static extern CSteamID SteamAPI_ISteamApps_GetAppOwner(IntPtr ISteamApps);

			[DllImport("libsteam_api.so")]
			internal static extern IntPtr SteamAPI_ISteamApps_GetLaunchQueryParam(
				IntPtr ISteamApps,
				string pchKey);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamApps_GetDlcDownloadProgress(
				IntPtr ISteamApps,
				uint nAppID,
				out ulong punBytesDownloaded,
				out ulong punBytesTotal);

			[DllImport("libsteam_api.so")]
			internal static extern int SteamAPI_ISteamApps_GetAppBuildId(IntPtr ISteamApps);

			[DllImport("libsteam_api.so")]
			internal static extern void SteamAPI_ISteamApps_RequestAllProofOfPurchaseKeys(
				IntPtr ISteamApps);

			[DllImport("libsteam_api.so")]
			internal static extern SteamAPICall_t SteamAPI_ISteamApps_GetFileDetails(
				IntPtr ISteamApps,
				string pszFileName);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamNetworking_SendP2PPacket(
				IntPtr ISteamNetworking,
				ulong steamIDRemote,
				IntPtr pubData,
				uint cubData,
				P2PSend eP2PSendType,
				int nChannel);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamNetworking_IsP2PPacketAvailable(
				IntPtr ISteamNetworking,
				out uint pcubMsgSize,
				int nChannel);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamNetworking_ReadP2PPacket(
				IntPtr ISteamNetworking,
				IntPtr pubDest,
				uint cubDest,
				out uint pcubMsgSize,
				out ulong psteamIDRemote,
				int nChannel);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamNetworking_AcceptP2PSessionWithUser(
				IntPtr ISteamNetworking,
				ulong steamIDRemote);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamNetworking_CloseP2PSessionWithUser(
				IntPtr ISteamNetworking,
				ulong steamIDRemote);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamNetworking_CloseP2PChannelWithUser(
				IntPtr ISteamNetworking,
				ulong steamIDRemote,
				int nChannel);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamNetworking_GetP2PSessionState(
				IntPtr ISteamNetworking,
				ulong steamIDRemote,
				ref P2PSessionState_t.PackSmall pConnectionState);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamNetworking_AllowP2PPacketRelay(
				IntPtr ISteamNetworking,
				[MarshalAs(UnmanagedType.U1)] bool bAllow);

			[DllImport("libsteam_api.so")]
			internal static extern SNetListenSocket_t SteamAPI_ISteamNetworking_CreateListenSocket(
				IntPtr ISteamNetworking,
				int nVirtualP2PPort,
				uint nIP,
				ushort nPort,
				[MarshalAs(UnmanagedType.U1)] bool bAllowUseOfPacketRelay);

			[DllImport("libsteam_api.so")]
			internal static extern SNetSocket_t SteamAPI_ISteamNetworking_CreateP2PConnectionSocket(
				IntPtr ISteamNetworking,
				ulong steamIDTarget,
				int nVirtualPort,
				int nTimeoutSec,
				[MarshalAs(UnmanagedType.U1)] bool bAllowUseOfPacketRelay);

			[DllImport("libsteam_api.so")]
			internal static extern SNetSocket_t SteamAPI_ISteamNetworking_CreateConnectionSocket(
				IntPtr ISteamNetworking,
				uint nIP,
				ushort nPort,
				int nTimeoutSec);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamNetworking_DestroySocket(
				IntPtr ISteamNetworking,
				uint hSocket,
				[MarshalAs(UnmanagedType.U1)] bool bNotifyRemoteEnd);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamNetworking_DestroyListenSocket(
				IntPtr ISteamNetworking,
				uint hSocket,
				[MarshalAs(UnmanagedType.U1)] bool bNotifyRemoteEnd);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamNetworking_SendDataOnSocket(
				IntPtr ISteamNetworking,
				uint hSocket,
				IntPtr pubData,
				uint cubData,
				[MarshalAs(UnmanagedType.U1)] bool bReliable);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamNetworking_IsDataAvailableOnSocket(
				IntPtr ISteamNetworking,
				uint hSocket,
				out uint pcubMsgSize);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamNetworking_RetrieveDataFromSocket(
				IntPtr ISteamNetworking,
				uint hSocket,
				IntPtr pubDest,
				uint cubDest,
				out uint pcubMsgSize);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamNetworking_IsDataAvailable(
				IntPtr ISteamNetworking,
				uint hListenSocket,
				out uint pcubMsgSize,
				ref uint phSocket);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamNetworking_RetrieveData(
				IntPtr ISteamNetworking,
				uint hListenSocket,
				IntPtr pubDest,
				uint cubDest,
				out uint pcubMsgSize,
				ref uint phSocket);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamNetworking_GetSocketInfo(
				IntPtr ISteamNetworking,
				uint hSocket,
				out ulong pSteamIDRemote,
				IntPtr peSocketStatus,
				out uint punIPRemote,
				out ushort punPortRemote);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamNetworking_GetListenSocketInfo(
				IntPtr ISteamNetworking,
				uint hListenSocket,
				out uint pnIP,
				out ushort pnPort);

			[DllImport("libsteam_api.so")]
			internal static extern SNetSocketConnectionType SteamAPI_ISteamNetworking_GetSocketConnectionType(
				IntPtr ISteamNetworking,
				uint hSocket);

			[DllImport("libsteam_api.so")]
			internal static extern int SteamAPI_ISteamNetworking_GetMaxPacketSize(
				IntPtr ISteamNetworking,
				uint hSocket);

			[DllImport("libsteam_api.so")]
			internal static extern ScreenshotHandle SteamAPI_ISteamScreenshots_WriteScreenshot(
				IntPtr ISteamScreenshots,
				IntPtr pubRGB,
				uint cubRGB,
				int nWidth,
				int nHeight);

			[DllImport("libsteam_api.so")]
			internal static extern ScreenshotHandle SteamAPI_ISteamScreenshots_AddScreenshotToLibrary(
				IntPtr ISteamScreenshots,
				string pchFilename,
				string pchThumbnailFilename,
				int nWidth,
				int nHeight);

			[DllImport("libsteam_api.so")]
			internal static extern void SteamAPI_ISteamScreenshots_TriggerScreenshot(
				IntPtr ISteamScreenshots);

			[DllImport("libsteam_api.so")]
			internal static extern void SteamAPI_ISteamScreenshots_HookScreenshots(
				IntPtr ISteamScreenshots,
				[MarshalAs(UnmanagedType.U1)] bool bHook);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamScreenshots_SetLocation(
				IntPtr ISteamScreenshots,
				uint hScreenshot,
				string pchLocation);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamScreenshots_TagUser(
				IntPtr ISteamScreenshots,
				uint hScreenshot,
				ulong steamID);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamScreenshots_TagPublishedFile(
				IntPtr ISteamScreenshots,
				uint hScreenshot,
				ulong unPublishedFileID);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamScreenshots_IsScreenshotsHooked(
				IntPtr ISteamScreenshots);

			[DllImport("libsteam_api.so")]
			internal static extern ScreenshotHandle SteamAPI_ISteamScreenshots_AddVRScreenshotToLibrary(
				IntPtr ISteamScreenshots,
				VRScreenshotType eType,
				string pchFilename,
				string pchVRFilename);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamMusic_BIsEnabled(IntPtr ISteamMusic);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamMusic_BIsPlaying(IntPtr ISteamMusic);

			[DllImport("libsteam_api.so")]
			internal static extern AudioPlayback_Status SteamAPI_ISteamMusic_GetPlaybackStatus(
				IntPtr ISteamMusic);

			[DllImport("libsteam_api.so")]
			internal static extern void SteamAPI_ISteamMusic_Play(IntPtr ISteamMusic);

			[DllImport("libsteam_api.so")]
			internal static extern void SteamAPI_ISteamMusic_Pause(IntPtr ISteamMusic);

			[DllImport("libsteam_api.so")]
			internal static extern void SteamAPI_ISteamMusic_PlayPrevious(IntPtr ISteamMusic);

			[DllImport("libsteam_api.so")]
			internal static extern void SteamAPI_ISteamMusic_PlayNext(IntPtr ISteamMusic);

			[DllImport("libsteam_api.so")]
			internal static extern void SteamAPI_ISteamMusic_SetVolume(
				IntPtr ISteamMusic,
				float flVolume);

			[DllImport("libsteam_api.so")]
			internal static extern float SteamAPI_ISteamMusic_GetVolume(IntPtr ISteamMusic);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamMusicRemote_RegisterSteamMusicRemote(
				IntPtr ISteamMusicRemote,
				string pchName);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamMusicRemote_DeregisterSteamMusicRemote(
				IntPtr ISteamMusicRemote);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamMusicRemote_BIsCurrentMusicRemote(
				IntPtr ISteamMusicRemote);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamMusicRemote_BActivationSuccess(
				IntPtr ISteamMusicRemote,
				[MarshalAs(UnmanagedType.U1)] bool bValue);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamMusicRemote_SetDisplayName(
				IntPtr ISteamMusicRemote,
				string pchDisplayName);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamMusicRemote_SetPNGIcon_64x64(
				IntPtr ISteamMusicRemote,
				IntPtr pvBuffer,
				uint cbBufferLength);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamMusicRemote_EnablePlayPrevious(
				IntPtr ISteamMusicRemote,
				[MarshalAs(UnmanagedType.U1)] bool bValue);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamMusicRemote_EnablePlayNext(
				IntPtr ISteamMusicRemote,
				[MarshalAs(UnmanagedType.U1)] bool bValue);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamMusicRemote_EnableShuffled(
				IntPtr ISteamMusicRemote,
				[MarshalAs(UnmanagedType.U1)] bool bValue);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamMusicRemote_EnableLooped(
				IntPtr ISteamMusicRemote,
				[MarshalAs(UnmanagedType.U1)] bool bValue);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamMusicRemote_EnableQueue(
				IntPtr ISteamMusicRemote,
				[MarshalAs(UnmanagedType.U1)] bool bValue);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamMusicRemote_EnablePlaylists(
				IntPtr ISteamMusicRemote,
				[MarshalAs(UnmanagedType.U1)] bool bValue);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamMusicRemote_UpdatePlaybackStatus(
				IntPtr ISteamMusicRemote,
				AudioPlayback_Status nStatus);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamMusicRemote_UpdateShuffled(
				IntPtr ISteamMusicRemote,
				[MarshalAs(UnmanagedType.U1)] bool bValue);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamMusicRemote_UpdateLooped(
				IntPtr ISteamMusicRemote,
				[MarshalAs(UnmanagedType.U1)] bool bValue);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamMusicRemote_UpdateVolume(
				IntPtr ISteamMusicRemote,
				float flValue);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamMusicRemote_CurrentEntryWillChange(
				IntPtr ISteamMusicRemote);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamMusicRemote_CurrentEntryIsAvailable(
				IntPtr ISteamMusicRemote,
				[MarshalAs(UnmanagedType.U1)] bool bAvailable);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamMusicRemote_UpdateCurrentEntryText(
				IntPtr ISteamMusicRemote,
				string pchText);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamMusicRemote_UpdateCurrentEntryElapsedSeconds(
				IntPtr ISteamMusicRemote,
				int nValue);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamMusicRemote_UpdateCurrentEntryCoverArt(
				IntPtr ISteamMusicRemote,
				IntPtr pvBuffer,
				uint cbBufferLength);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamMusicRemote_CurrentEntryDidChange(
				IntPtr ISteamMusicRemote);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamMusicRemote_QueueWillChange(
				IntPtr ISteamMusicRemote);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamMusicRemote_ResetQueueEntries(
				IntPtr ISteamMusicRemote);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamMusicRemote_SetQueueEntry(
				IntPtr ISteamMusicRemote,
				int nID,
				int nPosition,
				string pchEntryText);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamMusicRemote_SetCurrentQueueEntry(
				IntPtr ISteamMusicRemote,
				int nID);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamMusicRemote_QueueDidChange(
				IntPtr ISteamMusicRemote);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamMusicRemote_PlaylistWillChange(
				IntPtr ISteamMusicRemote);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamMusicRemote_ResetPlaylistEntries(
				IntPtr ISteamMusicRemote);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamMusicRemote_SetPlaylistEntry(
				IntPtr ISteamMusicRemote,
				int nID,
				int nPosition,
				string pchEntryText);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamMusicRemote_SetCurrentPlaylistEntry(
				IntPtr ISteamMusicRemote,
				int nID);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamMusicRemote_PlaylistDidChange(
				IntPtr ISteamMusicRemote);

			[DllImport("libsteam_api.so")]
			internal static extern HTTPRequestHandle SteamAPI_ISteamHTTP_CreateHTTPRequest(
				IntPtr ISteamHTTP,
				HTTPMethod eHTTPRequestMethod,
				string pchAbsoluteURL);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamHTTP_SetHTTPRequestContextValue(
				IntPtr ISteamHTTP,
				uint hRequest,
				ulong ulContextValue);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamHTTP_SetHTTPRequestNetworkActivityTimeout(
				IntPtr ISteamHTTP,
				uint hRequest,
				uint unTimeoutSeconds);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamHTTP_SetHTTPRequestHeaderValue(
				IntPtr ISteamHTTP,
				uint hRequest,
				string pchHeaderName,
				string pchHeaderValue);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamHTTP_SetHTTPRequestGetOrPostParameter(
				IntPtr ISteamHTTP,
				uint hRequest,
				string pchParamName,
				string pchParamValue);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamHTTP_SendHTTPRequest(
				IntPtr ISteamHTTP,
				uint hRequest,
				ref ulong pCallHandle);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamHTTP_SendHTTPRequestAndStreamResponse(
				IntPtr ISteamHTTP,
				uint hRequest,
				ref ulong pCallHandle);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamHTTP_DeferHTTPRequest(
				IntPtr ISteamHTTP,
				uint hRequest);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamHTTP_PrioritizeHTTPRequest(
				IntPtr ISteamHTTP,
				uint hRequest);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamHTTP_GetHTTPResponseHeaderSize(
				IntPtr ISteamHTTP,
				uint hRequest,
				string pchHeaderName,
				out uint unResponseHeaderSize);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamHTTP_GetHTTPResponseHeaderValue(
				IntPtr ISteamHTTP,
				uint hRequest,
				string pchHeaderName,
				out byte pHeaderValueBuffer,
				uint unBufferSize);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamHTTP_GetHTTPResponseBodySize(
				IntPtr ISteamHTTP,
				uint hRequest,
				out uint unBodySize);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamHTTP_GetHTTPResponseBodyData(
				IntPtr ISteamHTTP,
				uint hRequest,
				out byte pBodyDataBuffer,
				uint unBufferSize);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamHTTP_GetHTTPStreamingResponseBodyData(
				IntPtr ISteamHTTP,
				uint hRequest,
				uint cOffset,
				out byte pBodyDataBuffer,
				uint unBufferSize);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamHTTP_ReleaseHTTPRequest(
				IntPtr ISteamHTTP,
				uint hRequest);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamHTTP_GetHTTPDownloadProgressPct(
				IntPtr ISteamHTTP,
				uint hRequest,
				out float pflPercentOut);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamHTTP_SetHTTPRequestRawPostBody(
				IntPtr ISteamHTTP,
				uint hRequest,
				string pchContentType,
				out byte pubBody,
				uint unBodyLen);

			[DllImport("libsteam_api.so")]
			internal static extern HTTPCookieContainerHandle SteamAPI_ISteamHTTP_CreateCookieContainer(
				IntPtr ISteamHTTP,
				[MarshalAs(UnmanagedType.U1)] bool bAllowResponsesToModify);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamHTTP_ReleaseCookieContainer(
				IntPtr ISteamHTTP,
				uint hCookieContainer);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamHTTP_SetCookie(
				IntPtr ISteamHTTP,
				uint hCookieContainer,
				string pchHost,
				string pchUrl,
				string pchCookie);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamHTTP_SetHTTPRequestCookieContainer(
				IntPtr ISteamHTTP,
				uint hRequest,
				uint hCookieContainer);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamHTTP_SetHTTPRequestUserAgentInfo(
				IntPtr ISteamHTTP,
				uint hRequest,
				string pchUserAgentInfo);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamHTTP_SetHTTPRequestRequiresVerifiedCertificate(
				IntPtr ISteamHTTP,
				uint hRequest,
				[MarshalAs(UnmanagedType.U1)] bool bRequireVerifiedCertificate);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamHTTP_SetHTTPRequestAbsoluteTimeoutMS(
				IntPtr ISteamHTTP,
				uint hRequest,
				uint unMilliseconds);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamHTTP_GetHTTPRequestWasTimedOut(
				IntPtr ISteamHTTP,
				uint hRequest,
				[MarshalAs(UnmanagedType.U1)] ref bool pbWasTimedOut);

			[DllImport("libsteam_api.so")]
			internal static extern ClientUnifiedMessageHandle SteamAPI_ISteamUnifiedMessages_SendMethod(
				IntPtr ISteamUnifiedMessages,
				string pchServiceMethod,
				IntPtr pRequestBuffer,
				uint unRequestBufferSize,
				ulong unContext);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamUnifiedMessages_GetMethodResponseInfo(
				IntPtr ISteamUnifiedMessages,
				ulong hHandle,
				out uint punResponseSize,
				out Result peResult);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamUnifiedMessages_GetMethodResponseData(
				IntPtr ISteamUnifiedMessages,
				ulong hHandle,
				IntPtr pResponseBuffer,
				uint unResponseBufferSize,
				[MarshalAs(UnmanagedType.U1)] bool bAutoRelease);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamUnifiedMessages_ReleaseMethod(
				IntPtr ISteamUnifiedMessages,
				ulong hHandle);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamUnifiedMessages_SendNotification(
				IntPtr ISteamUnifiedMessages,
				string pchServiceNotification,
				IntPtr pNotificationBuffer,
				uint unNotificationBufferSize);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamController_Init(IntPtr ISteamController);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamController_Shutdown(IntPtr ISteamController);

			[DllImport("libsteam_api.so")]
			internal static extern void SteamAPI_ISteamController_RunFrame(IntPtr ISteamController);

			[DllImport("libsteam_api.so")]
			internal static extern int SteamAPI_ISteamController_GetConnectedControllers(
				IntPtr ISteamController,
				IntPtr handlesOut);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamController_ShowBindingPanel(
				IntPtr ISteamController,
				ulong controllerHandle);

			[DllImport("libsteam_api.so")]
			internal static extern ControllerActionSetHandle_t SteamAPI_ISteamController_GetActionSetHandle(
				IntPtr ISteamController,
				string pszActionSetName);

			[DllImport("libsteam_api.so")]
			internal static extern void SteamAPI_ISteamController_ActivateActionSet(
				IntPtr ISteamController,
				ulong controllerHandle,
				ulong actionSetHandle);

			[DllImport("libsteam_api.so")]
			internal static extern ControllerActionSetHandle_t SteamAPI_ISteamController_GetCurrentActionSet(
				IntPtr ISteamController,
				ulong controllerHandle);

			[DllImport("libsteam_api.so")]
			internal static extern ControllerDigitalActionHandle_t SteamAPI_ISteamController_GetDigitalActionHandle(
				IntPtr ISteamController,
				string pszActionName);

			[DllImport("libsteam_api.so")]
			internal static extern ControllerDigitalActionData_t SteamAPI_ISteamController_GetDigitalActionData(
				IntPtr ISteamController,
				ulong controllerHandle,
				ulong digitalActionHandle);

			[DllImport("libsteam_api.so")]
			internal static extern int SteamAPI_ISteamController_GetDigitalActionOrigins(
				IntPtr ISteamController,
				ulong controllerHandle,
				ulong actionSetHandle,
				ulong digitalActionHandle,
				out ControllerActionOrigin originsOut);

			[DllImport("libsteam_api.so")]
			internal static extern ControllerAnalogActionHandle_t SteamAPI_ISteamController_GetAnalogActionHandle(
				IntPtr ISteamController,
				string pszActionName);

			[DllImport("libsteam_api.so")]
			internal static extern ControllerAnalogActionData_t SteamAPI_ISteamController_GetAnalogActionData(
				IntPtr ISteamController,
				ulong controllerHandle,
				ulong analogActionHandle);

			[DllImport("libsteam_api.so")]
			internal static extern int SteamAPI_ISteamController_GetAnalogActionOrigins(
				IntPtr ISteamController,
				ulong controllerHandle,
				ulong actionSetHandle,
				ulong analogActionHandle,
				out ControllerActionOrigin originsOut);

			[DllImport("libsteam_api.so")]
			internal static extern void SteamAPI_ISteamController_StopAnalogActionMomentum(
				IntPtr ISteamController,
				ulong controllerHandle,
				ulong eAction);

			[DllImport("libsteam_api.so")]
			internal static extern void SteamAPI_ISteamController_TriggerHapticPulse(
				IntPtr ISteamController,
				ulong controllerHandle,
				SteamControllerPad eTargetPad,
				ushort usDurationMicroSec);

			[DllImport("libsteam_api.so")]
			internal static extern void SteamAPI_ISteamController_TriggerRepeatedHapticPulse(
				IntPtr ISteamController,
				ulong controllerHandle,
				SteamControllerPad eTargetPad,
				ushort usDurationMicroSec,
				ushort usOffMicroSec,
				ushort unRepeat,
				uint nFlags);

			[DllImport("libsteam_api.so")]
			internal static extern void SteamAPI_ISteamController_TriggerVibration(
				IntPtr ISteamController,
				ulong controllerHandle,
				ushort usLeftSpeed,
				ushort usRightSpeed);

			[DllImport("libsteam_api.so")]
			internal static extern void SteamAPI_ISteamController_SetLEDColor(
				IntPtr ISteamController,
				ulong controllerHandle,
				byte nColorR,
				byte nColorG,
				byte nColorB,
				uint nFlags);

			[DllImport("libsteam_api.so")]
			internal static extern int SteamAPI_ISteamController_GetGamepadIndexForController(
				IntPtr ISteamController,
				ulong ulControllerHandle);

			[DllImport("libsteam_api.so")]
			internal static extern ControllerHandle_t SteamAPI_ISteamController_GetControllerForGamepadIndex(
				IntPtr ISteamController,
				int nIndex);

			[DllImport("libsteam_api.so")]
			internal static extern ControllerMotionData_t SteamAPI_ISteamController_GetMotionData(
				IntPtr ISteamController,
				ulong controllerHandle);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamController_ShowDigitalActionOrigins(
				IntPtr ISteamController,
				ulong controllerHandle,
				ulong digitalActionHandle,
				float flScale,
				float flXPosition,
				float flYPosition);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamController_ShowAnalogActionOrigins(
				IntPtr ISteamController,
				ulong controllerHandle,
				ulong analogActionHandle,
				float flScale,
				float flXPosition,
				float flYPosition);

			[DllImport("libsteam_api.so")]
			internal static extern IntPtr SteamAPI_ISteamController_GetStringForActionOrigin(
				IntPtr ISteamController,
				ControllerActionOrigin eOrigin);

			[DllImport("libsteam_api.so")]
			internal static extern IntPtr SteamAPI_ISteamController_GetGlyphForActionOrigin(
				IntPtr ISteamController,
				ControllerActionOrigin eOrigin);

			[DllImport("libsteam_api.so")]
			internal static extern UGCQueryHandle_t SteamAPI_ISteamUGC_CreateQueryUserUGCRequest(
				IntPtr ISteamUGC,
				uint unAccountID,
				UserUGCList eListType,
				UGCMatchingUGCType eMatchingUGCType,
				UserUGCListSortOrder eSortOrder,
				uint nCreatorAppID,
				uint nConsumerAppID,
				uint unPage);

			[DllImport("libsteam_api.so")]
			internal static extern UGCQueryHandle_t SteamAPI_ISteamUGC_CreateQueryAllUGCRequest(
				IntPtr ISteamUGC,
				UGCQuery eQueryType,
				UGCMatchingUGCType eMatchingeMatchingUGCTypeFileType,
				uint nCreatorAppID,
				uint nConsumerAppID,
				uint unPage);

			[DllImport("libsteam_api.so")]
			internal static extern UGCQueryHandle_t SteamAPI_ISteamUGC_CreateQueryUGCDetailsRequest(
				IntPtr ISteamUGC,
				IntPtr pvecPublishedFileID,
				uint unNumPublishedFileIDs);

			[DllImport("libsteam_api.so")]
			internal static extern SteamAPICall_t SteamAPI_ISteamUGC_SendQueryUGCRequest(
				IntPtr ISteamUGC,
				ulong handle);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamUGC_GetQueryUGCResult(
				IntPtr ISteamUGC,
				ulong handle,
				uint index,
				ref SteamUGCDetails_t.PackSmall pDetails);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamUGC_GetQueryUGCPreviewURL(
				IntPtr ISteamUGC,
				ulong handle,
				uint index,
				StringBuilder pchURL,
				uint cchURLSize);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamUGC_GetQueryUGCMetadata(
				IntPtr ISteamUGC,
				ulong handle,
				uint index,
				StringBuilder pchMetadata,
				uint cchMetadatasize);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamUGC_GetQueryUGCChildren(
				IntPtr ISteamUGC,
				ulong handle,
				uint index,
				IntPtr pvecPublishedFileID,
				uint cMaxEntries);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamUGC_GetQueryUGCStatistic(
				IntPtr ISteamUGC,
				ulong handle,
				uint index,
				ItemStatistic eStatType,
				out ulong pStatValue);

			[DllImport("libsteam_api.so")]
			internal static extern uint SteamAPI_ISteamUGC_GetQueryUGCNumAdditionalPreviews(
				IntPtr ISteamUGC,
				ulong handle,
				uint index);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamUGC_GetQueryUGCAdditionalPreview(
				IntPtr ISteamUGC,
				ulong handle,
				uint index,
				uint previewIndex,
				StringBuilder pchURLOrVideoID,
				uint cchURLSize,
				StringBuilder pchOriginalFileName,
				uint cchOriginalFileNameSize,
				out ItemPreviewType pPreviewType);

			[DllImport("libsteam_api.so")]
			internal static extern uint SteamAPI_ISteamUGC_GetQueryUGCNumKeyValueTags(
				IntPtr ISteamUGC,
				ulong handle,
				uint index);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamUGC_GetQueryUGCKeyValueTag(
				IntPtr ISteamUGC,
				ulong handle,
				uint index,
				uint keyValueTagIndex,
				StringBuilder pchKey,
				uint cchKeySize,
				StringBuilder pchValue,
				uint cchValueSize);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamUGC_ReleaseQueryUGCRequest(
				IntPtr ISteamUGC,
				ulong handle);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamUGC_AddRequiredTag(
				IntPtr ISteamUGC,
				ulong handle,
				string pTagName);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamUGC_AddExcludedTag(
				IntPtr ISteamUGC,
				ulong handle,
				string pTagName);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamUGC_SetReturnOnlyIDs(
				IntPtr ISteamUGC,
				ulong handle,
				[MarshalAs(UnmanagedType.U1)] bool bReturnOnlyIDs);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamUGC_SetReturnKeyValueTags(
				IntPtr ISteamUGC,
				ulong handle,
				[MarshalAs(UnmanagedType.U1)] bool bReturnKeyValueTags);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamUGC_SetReturnLongDescription(
				IntPtr ISteamUGC,
				ulong handle,
				[MarshalAs(UnmanagedType.U1)] bool bReturnLongDescription);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamUGC_SetReturnMetadata(
				IntPtr ISteamUGC,
				ulong handle,
				[MarshalAs(UnmanagedType.U1)] bool bReturnMetadata);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamUGC_SetReturnChildren(
				IntPtr ISteamUGC,
				ulong handle,
				[MarshalAs(UnmanagedType.U1)] bool bReturnChildren);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamUGC_SetReturnAdditionalPreviews(
				IntPtr ISteamUGC,
				ulong handle,
				[MarshalAs(UnmanagedType.U1)] bool bReturnAdditionalPreviews);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamUGC_SetReturnTotalOnly(
				IntPtr ISteamUGC,
				ulong handle,
				[MarshalAs(UnmanagedType.U1)] bool bReturnTotalOnly);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamUGC_SetReturnPlaytimeStats(
				IntPtr ISteamUGC,
				ulong handle,
				uint unDays);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamUGC_SetLanguage(
				IntPtr ISteamUGC,
				ulong handle,
				string pchLanguage);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamUGC_SetAllowCachedResponse(
				IntPtr ISteamUGC,
				ulong handle,
				uint unMaxAgeSeconds);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamUGC_SetCloudFileNameFilter(
				IntPtr ISteamUGC,
				ulong handle,
				string pMatchCloudFileName);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamUGC_SetMatchAnyTag(
				IntPtr ISteamUGC,
				ulong handle,
				[MarshalAs(UnmanagedType.U1)] bool bMatchAnyTag);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamUGC_SetSearchText(
				IntPtr ISteamUGC,
				ulong handle,
				string pSearchText);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamUGC_SetRankedByTrendDays(
				IntPtr ISteamUGC,
				ulong handle,
				uint unDays);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamUGC_AddRequiredKeyValueTag(
				IntPtr ISteamUGC,
				ulong handle,
				string pKey,
				string pValue);

			[DllImport("libsteam_api.so")]
			internal static extern SteamAPICall_t SteamAPI_ISteamUGC_RequestUGCDetails(
				IntPtr ISteamUGC,
				ulong nPublishedFileID,
				uint unMaxAgeSeconds);

			[DllImport("libsteam_api.so")]
			internal static extern SteamAPICall_t SteamAPI_ISteamUGC_CreateItem(
				IntPtr ISteamUGC,
				uint nConsumerAppId,
				WorkshopFileType eFileType);

			[DllImport("libsteam_api.so")]
			internal static extern UGCUpdateHandle_t SteamAPI_ISteamUGC_StartItemUpdate(
				IntPtr ISteamUGC,
				uint nConsumerAppId,
				ulong nPublishedFileID);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamUGC_SetItemTitle(
				IntPtr ISteamUGC,
				ulong handle,
				string pchTitle);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamUGC_SetItemDescription(
				IntPtr ISteamUGC,
				ulong handle,
				string pchDescription);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamUGC_SetItemUpdateLanguage(
				IntPtr ISteamUGC,
				ulong handle,
				string pchLanguage);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamUGC_SetItemMetadata(
				IntPtr ISteamUGC,
				ulong handle,
				string pchMetaData);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamUGC_SetItemVisibility(
				IntPtr ISteamUGC,
				ulong handle,
				RemoteStoragePublishedFileVisibility eVisibility);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamUGC_SetItemTags(
				IntPtr ISteamUGC,
				ulong updateHandle,
				ref SteamParamStringArray_t.PackSmall pTags);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamUGC_SetItemContent(
				IntPtr ISteamUGC,
				ulong handle,
				string pszContentFolder);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamUGC_SetItemPreview(
				IntPtr ISteamUGC,
				ulong handle,
				string pszPreviewFile);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamUGC_RemoveItemKeyValueTags(
				IntPtr ISteamUGC,
				ulong handle,
				string pchKey);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamUGC_AddItemKeyValueTag(
				IntPtr ISteamUGC,
				ulong handle,
				string pchKey,
				string pchValue);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamUGC_AddItemPreviewFile(
				IntPtr ISteamUGC,
				ulong handle,
				string pszPreviewFile,
				ItemPreviewType type);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamUGC_AddItemPreviewVideo(
				IntPtr ISteamUGC,
				ulong handle,
				string pszVideoID);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamUGC_UpdateItemPreviewFile(
				IntPtr ISteamUGC,
				ulong handle,
				uint index,
				string pszPreviewFile);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamUGC_UpdateItemPreviewVideo(
				IntPtr ISteamUGC,
				ulong handle,
				uint index,
				string pszVideoID);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamUGC_RemoveItemPreview(
				IntPtr ISteamUGC,
				ulong handle,
				uint index);

			[DllImport("libsteam_api.so")]
			internal static extern SteamAPICall_t SteamAPI_ISteamUGC_SubmitItemUpdate(
				IntPtr ISteamUGC,
				ulong handle,
				string pchChangeNote);

			[DllImport("libsteam_api.so")]
			internal static extern ItemUpdateStatus SteamAPI_ISteamUGC_GetItemUpdateProgress(
				IntPtr ISteamUGC,
				ulong handle,
				out ulong punBytesProcessed,
				out ulong punBytesTotal);

			[DllImport("libsteam_api.so")]
			internal static extern SteamAPICall_t SteamAPI_ISteamUGC_SetUserItemVote(
				IntPtr ISteamUGC,
				ulong nPublishedFileID,
				[MarshalAs(UnmanagedType.U1)] bool bVoteUp);

			[DllImport("libsteam_api.so")]
			internal static extern SteamAPICall_t SteamAPI_ISteamUGC_GetUserItemVote(
				IntPtr ISteamUGC,
				ulong nPublishedFileID);

			[DllImport("libsteam_api.so")]
			internal static extern SteamAPICall_t SteamAPI_ISteamUGC_AddItemToFavorites(
				IntPtr ISteamUGC,
				uint nAppId,
				ulong nPublishedFileID);

			[DllImport("libsteam_api.so")]
			internal static extern SteamAPICall_t SteamAPI_ISteamUGC_RemoveItemFromFavorites(
				IntPtr ISteamUGC,
				uint nAppId,
				ulong nPublishedFileID);

			[DllImport("libsteam_api.so")]
			internal static extern SteamAPICall_t SteamAPI_ISteamUGC_SubscribeItem(
				IntPtr ISteamUGC,
				ulong nPublishedFileID);

			[DllImport("libsteam_api.so")]
			internal static extern SteamAPICall_t SteamAPI_ISteamUGC_UnsubscribeItem(
				IntPtr ISteamUGC,
				ulong nPublishedFileID);

			[DllImport("libsteam_api.so")]
			internal static extern uint SteamAPI_ISteamUGC_GetNumSubscribedItems(IntPtr ISteamUGC);

			[DllImport("libsteam_api.so")]
			internal static extern uint SteamAPI_ISteamUGC_GetSubscribedItems(
				IntPtr ISteamUGC,
				IntPtr pvecPublishedFileID,
				uint cMaxEntries);

			[DllImport("libsteam_api.so")]
			internal static extern uint SteamAPI_ISteamUGC_GetItemState(
				IntPtr ISteamUGC,
				ulong nPublishedFileID);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamUGC_GetItemInstallInfo(
				IntPtr ISteamUGC,
				ulong nPublishedFileID,
				out ulong punSizeOnDisk,
				StringBuilder pchFolder,
				uint cchFolderSize,
				out uint punTimeStamp);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamUGC_GetItemDownloadInfo(
				IntPtr ISteamUGC,
				ulong nPublishedFileID,
				out ulong punBytesDownloaded,
				out ulong punBytesTotal);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamUGC_DownloadItem(
				IntPtr ISteamUGC,
				ulong nPublishedFileID,
				[MarshalAs(UnmanagedType.U1)] bool bHighPriority);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamUGC_BInitWorkshopForGameServer(
				IntPtr ISteamUGC,
				uint unWorkshopDepotID,
				string pszFolder);

			[DllImport("libsteam_api.so")]
			internal static extern void SteamAPI_ISteamUGC_SuspendDownloads(
				IntPtr ISteamUGC,
				[MarshalAs(UnmanagedType.U1)] bool bSuspend);

			[DllImport("libsteam_api.so")]
			internal static extern SteamAPICall_t SteamAPI_ISteamUGC_StartPlaytimeTracking(
				IntPtr ISteamUGC,
				IntPtr pvecPublishedFileID,
				uint unNumPublishedFileIDs);

			[DllImport("libsteam_api.so")]
			internal static extern SteamAPICall_t SteamAPI_ISteamUGC_StopPlaytimeTracking(
				IntPtr ISteamUGC,
				IntPtr pvecPublishedFileID,
				uint unNumPublishedFileIDs);

			[DllImport("libsteam_api.so")]
			internal static extern SteamAPICall_t SteamAPI_ISteamUGC_StopPlaytimeTrackingForAllItems(
				IntPtr ISteamUGC);

			[DllImport("libsteam_api.so")]
			internal static extern SteamAPICall_t SteamAPI_ISteamUGC_AddDependency(
				IntPtr ISteamUGC,
				ulong nParentPublishedFileID,
				ulong nChildPublishedFileID);

			[DllImport("libsteam_api.so")]
			internal static extern SteamAPICall_t SteamAPI_ISteamUGC_RemoveDependency(
				IntPtr ISteamUGC,
				ulong nParentPublishedFileID,
				ulong nChildPublishedFileID);

			[DllImport("libsteam_api.so")]
			internal static extern uint SteamAPI_ISteamAppList_GetNumInstalledApps(IntPtr ISteamAppList);

			[DllImport("libsteam_api.so")]
			internal static extern uint SteamAPI_ISteamAppList_GetInstalledApps(
				IntPtr ISteamAppList,
				IntPtr pvecAppID,
				uint unMaxAppIDs);

			[DllImport("libsteam_api.so")]
			internal static extern int SteamAPI_ISteamAppList_GetAppName(
				IntPtr ISteamAppList,
				uint nAppID,
				StringBuilder pchName,
				int cchNameMax);

			[DllImport("libsteam_api.so")]
			internal static extern int SteamAPI_ISteamAppList_GetAppInstallDir(
				IntPtr ISteamAppList,
				uint nAppID,
				StringBuilder pchDirectory,
				int cchNameMax);

			[DllImport("libsteam_api.so")]
			internal static extern int SteamAPI_ISteamAppList_GetAppBuildId(
				IntPtr ISteamAppList,
				uint nAppID);

			[DllImport("libsteam_api.so")]
			internal static extern void SteamAPI_ISteamHTMLSurface_DestructISteamHTMLSurface(
				IntPtr ISteamHTMLSurface);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamHTMLSurface_Init(IntPtr ISteamHTMLSurface);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamHTMLSurface_Shutdown(IntPtr ISteamHTMLSurface);

			[DllImport("libsteam_api.so")]
			internal static extern SteamAPICall_t SteamAPI_ISteamHTMLSurface_CreateBrowser(
				IntPtr ISteamHTMLSurface,
				string pchUserAgent,
				string pchUserCSS);

			[DllImport("libsteam_api.so")]
			internal static extern void SteamAPI_ISteamHTMLSurface_RemoveBrowser(
				IntPtr ISteamHTMLSurface,
				uint unBrowserHandle);

			[DllImport("libsteam_api.so")]
			internal static extern void SteamAPI_ISteamHTMLSurface_LoadURL(
				IntPtr ISteamHTMLSurface,
				uint unBrowserHandle,
				string pchURL,
				string pchPostData);

			[DllImport("libsteam_api.so")]
			internal static extern void SteamAPI_ISteamHTMLSurface_SetSize(
				IntPtr ISteamHTMLSurface,
				uint unBrowserHandle,
				uint unWidth,
				uint unHeight);

			[DllImport("libsteam_api.so")]
			internal static extern void SteamAPI_ISteamHTMLSurface_StopLoad(
				IntPtr ISteamHTMLSurface,
				uint unBrowserHandle);

			[DllImport("libsteam_api.so")]
			internal static extern void SteamAPI_ISteamHTMLSurface_Reload(
				IntPtr ISteamHTMLSurface,
				uint unBrowserHandle);

			[DllImport("libsteam_api.so")]
			internal static extern void SteamAPI_ISteamHTMLSurface_GoBack(
				IntPtr ISteamHTMLSurface,
				uint unBrowserHandle);

			[DllImport("libsteam_api.so")]
			internal static extern void SteamAPI_ISteamHTMLSurface_GoForward(
				IntPtr ISteamHTMLSurface,
				uint unBrowserHandle);

			[DllImport("libsteam_api.so")]
			internal static extern void SteamAPI_ISteamHTMLSurface_AddHeader(
				IntPtr ISteamHTMLSurface,
				uint unBrowserHandle,
				string pchKey,
				string pchValue);

			[DllImport("libsteam_api.so")]
			internal static extern void SteamAPI_ISteamHTMLSurface_ExecuteJavascript(
				IntPtr ISteamHTMLSurface,
				uint unBrowserHandle,
				string pchScript);

			[DllImport("libsteam_api.so")]
			internal static extern void SteamAPI_ISteamHTMLSurface_MouseUp(
				IntPtr ISteamHTMLSurface,
				uint unBrowserHandle,
				HTMLMouseButton eMouseButton);

			[DllImport("libsteam_api.so")]
			internal static extern void SteamAPI_ISteamHTMLSurface_MouseDown(
				IntPtr ISteamHTMLSurface,
				uint unBrowserHandle,
				HTMLMouseButton eMouseButton);

			[DllImport("libsteam_api.so")]
			internal static extern void SteamAPI_ISteamHTMLSurface_MouseDoubleClick(
				IntPtr ISteamHTMLSurface,
				uint unBrowserHandle,
				HTMLMouseButton eMouseButton);

			[DllImport("libsteam_api.so")]
			internal static extern void SteamAPI_ISteamHTMLSurface_MouseMove(
				IntPtr ISteamHTMLSurface,
				uint unBrowserHandle,
				int x,
				int y);

			[DllImport("libsteam_api.so")]
			internal static extern void SteamAPI_ISteamHTMLSurface_MouseWheel(
				IntPtr ISteamHTMLSurface,
				uint unBrowserHandle,
				int nDelta);

			[DllImport("libsteam_api.so")]
			internal static extern void SteamAPI_ISteamHTMLSurface_KeyDown(
				IntPtr ISteamHTMLSurface,
				uint unBrowserHandle,
				uint nNativeKeyCode,
				HTMLKeyModifiers eHTMLKeyModifiers);

			[DllImport("libsteam_api.so")]
			internal static extern void SteamAPI_ISteamHTMLSurface_KeyUp(
				IntPtr ISteamHTMLSurface,
				uint unBrowserHandle,
				uint nNativeKeyCode,
				HTMLKeyModifiers eHTMLKeyModifiers);

			[DllImport("libsteam_api.so")]
			internal static extern void SteamAPI_ISteamHTMLSurface_KeyChar(
				IntPtr ISteamHTMLSurface,
				uint unBrowserHandle,
				uint cUnicodeChar,
				HTMLKeyModifiers eHTMLKeyModifiers);

			[DllImport("libsteam_api.so")]
			internal static extern void SteamAPI_ISteamHTMLSurface_SetHorizontalScroll(
				IntPtr ISteamHTMLSurface,
				uint unBrowserHandle,
				uint nAbsolutePixelScroll);

			[DllImport("libsteam_api.so")]
			internal static extern void SteamAPI_ISteamHTMLSurface_SetVerticalScroll(
				IntPtr ISteamHTMLSurface,
				uint unBrowserHandle,
				uint nAbsolutePixelScroll);

			[DllImport("libsteam_api.so")]
			internal static extern void SteamAPI_ISteamHTMLSurface_SetKeyFocus(
				IntPtr ISteamHTMLSurface,
				uint unBrowserHandle,
				[MarshalAs(UnmanagedType.U1)] bool bHasKeyFocus);

			[DllImport("libsteam_api.so")]
			internal static extern void SteamAPI_ISteamHTMLSurface_ViewSource(
				IntPtr ISteamHTMLSurface,
				uint unBrowserHandle);

			[DllImport("libsteam_api.so")]
			internal static extern void SteamAPI_ISteamHTMLSurface_CopyToClipboard(
				IntPtr ISteamHTMLSurface,
				uint unBrowserHandle);

			[DllImport("libsteam_api.so")]
			internal static extern void SteamAPI_ISteamHTMLSurface_PasteFromClipboard(
				IntPtr ISteamHTMLSurface,
				uint unBrowserHandle);

			[DllImport("libsteam_api.so")]
			internal static extern void SteamAPI_ISteamHTMLSurface_Find(
				IntPtr ISteamHTMLSurface,
				uint unBrowserHandle,
				string pchSearchStr,
				[MarshalAs(UnmanagedType.U1)] bool bCurrentlyInFind,
				[MarshalAs(UnmanagedType.U1)] bool bReverse);

			[DllImport("libsteam_api.so")]
			internal static extern void SteamAPI_ISteamHTMLSurface_StopFind(
				IntPtr ISteamHTMLSurface,
				uint unBrowserHandle);

			[DllImport("libsteam_api.so")]
			internal static extern void SteamAPI_ISteamHTMLSurface_GetLinkAtPosition(
				IntPtr ISteamHTMLSurface,
				uint unBrowserHandle,
				int x,
				int y);

			[DllImport("libsteam_api.so")]
			internal static extern void SteamAPI_ISteamHTMLSurface_SetCookie(
				IntPtr ISteamHTMLSurface,
				string pchHostname,
				string pchKey,
				string pchValue,
				string pchPath,
				uint nExpires,
				[MarshalAs(UnmanagedType.U1)] bool bSecure,
				[MarshalAs(UnmanagedType.U1)] bool bHTTPOnly);

			[DllImport("libsteam_api.so")]
			internal static extern void SteamAPI_ISteamHTMLSurface_SetPageScaleFactor(
				IntPtr ISteamHTMLSurface,
				uint unBrowserHandle,
				float flZoom,
				int nPointX,
				int nPointY);

			[DllImport("libsteam_api.so")]
			internal static extern void SteamAPI_ISteamHTMLSurface_SetBackgroundMode(
				IntPtr ISteamHTMLSurface,
				uint unBrowserHandle,
				[MarshalAs(UnmanagedType.U1)] bool bBackgroundMode);

			[DllImport("libsteam_api.so")]
			internal static extern void SteamAPI_ISteamHTMLSurface_AllowStartRequest(
				IntPtr ISteamHTMLSurface,
				uint unBrowserHandle,
				[MarshalAs(UnmanagedType.U1)] bool bAllowed);

			[DllImport("libsteam_api.so")]
			internal static extern void SteamAPI_ISteamHTMLSurface_JSDialogResponse(
				IntPtr ISteamHTMLSurface,
				uint unBrowserHandle,
				[MarshalAs(UnmanagedType.U1)] bool bResult);

			[DllImport("libsteam_api.so")]
			internal static extern Result SteamAPI_ISteamInventory_GetResultStatus(
				IntPtr ISteamInventory,
				int resultHandle);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamInventory_GetResultItems(
				IntPtr ISteamInventory,
				int resultHandle,
				IntPtr pOutItemsArray,
				out uint punOutItemsArraySize);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamInventory_GetResultItemProperty(
				IntPtr ISteamInventory,
				int resultHandle,
				uint unItemIndex,
				string pchPropertyName,
				StringBuilder pchValueBuffer,
				out uint punValueBufferSizeOut);

			[DllImport("libsteam_api.so")]
			internal static extern uint SteamAPI_ISteamInventory_GetResultTimestamp(
				IntPtr ISteamInventory,
				int resultHandle);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamInventory_CheckResultSteamID(
				IntPtr ISteamInventory,
				int resultHandle,
				ulong steamIDExpected);

			[DllImport("libsteam_api.so")]
			internal static extern void SteamAPI_ISteamInventory_DestroyResult(
				IntPtr ISteamInventory,
				int resultHandle);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamInventory_GetAllItems(
				IntPtr ISteamInventory,
				ref int pResultHandle);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamInventory_GetItemsByID(
				IntPtr ISteamInventory,
				ref int pResultHandle,
				ulong[] pInstanceIDs,
				uint unCountInstanceIDs);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamInventory_SerializeResult(
				IntPtr ISteamInventory,
				int resultHandle,
				IntPtr pOutBuffer,
				out uint punOutBufferSize);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamInventory_DeserializeResult(
				IntPtr ISteamInventory,
				ref int pOutResultHandle,
				IntPtr pBuffer,
				uint unBufferSize,
				[MarshalAs(UnmanagedType.U1)] bool bRESERVED_MUST_BE_FALSE);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamInventory_GenerateItems(
				IntPtr ISteamInventory,
				ref int pResultHandle,
				int[] pArrayItemDefs,
				uint[] punArrayQuantity,
				uint unArrayLength);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamInventory_GrantPromoItems(
				IntPtr ISteamInventory,
				ref int pResultHandle);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamInventory_AddPromoItem(
				IntPtr ISteamInventory,
				ref int pResultHandle,
				int itemDef);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamInventory_AddPromoItems(
				IntPtr ISteamInventory,
				ref int pResultHandle,
				int[] pArrayItemDefs,
				uint unArrayLength);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamInventory_ConsumeItem(
				IntPtr ISteamInventory,
				ref int pResultHandle,
				ulong itemConsume,
				uint unQuantity);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamInventory_ExchangeItems(
				IntPtr ISteamInventory,
				ref int pResultHandle,
				int[] pArrayGenerate,
				uint[] punArrayGenerateQuantity,
				uint unArrayGenerateLength,
				ulong[] pArrayDestroy,
				uint[] punArrayDestroyQuantity,
				uint unArrayDestroyLength);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamInventory_TransferItemQuantity(
				IntPtr ISteamInventory,
				ref int pResultHandle,
				ulong itemIdSource,
				uint unQuantity,
				ulong itemIdDest);

			[DllImport("libsteam_api.so")]
			internal static extern void SteamAPI_ISteamInventory_SendItemDropHeartbeat(
				IntPtr ISteamInventory);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamInventory_TriggerItemDrop(
				IntPtr ISteamInventory,
				ref int pResultHandle,
				int dropListDefinition);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamInventory_TradeItems(
				IntPtr ISteamInventory,
				ref int pResultHandle,
				ulong steamIDTradePartner,
				ulong[] pArrayGive,
				uint[] pArrayGiveQuantity,
				uint nArrayGiveLength,
				ulong[] pArrayGet,
				uint[] pArrayGetQuantity,
				uint nArrayGetLength);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamInventory_LoadItemDefinitions(
				IntPtr ISteamInventory);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamInventory_GetItemDefinitionIDs(
				IntPtr ISteamInventory,
				IntPtr pItemDefIDs,
				out uint punItemDefIDsArraySize);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamInventory_GetItemDefinitionProperty(
				IntPtr ISteamInventory,
				int iDefinition,
				string pchPropertyName,
				StringBuilder pchValueBuffer,
				out uint punValueBufferSizeOut);

			[DllImport("libsteam_api.so")]
			internal static extern SteamAPICall_t SteamAPI_ISteamInventory_RequestEligiblePromoItemDefinitionsIDs(
				IntPtr ISteamInventory,
				ulong steamID);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamInventory_GetEligiblePromoItemDefinitionIDs(
				IntPtr ISteamInventory,
				ulong steamID,
				IntPtr pItemDefIDs,
				out uint punItemDefIDsArraySize);

			[DllImport("libsteam_api.so")]
			internal static extern void SteamAPI_ISteamVideo_GetVideoURL(
				IntPtr ISteamVideo,
				uint unVideoAppID);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamVideo_IsBroadcasting(
				IntPtr ISteamVideo,
				IntPtr pnNumViewers);

			[DllImport("libsteam_api.so")]
			internal static extern void SteamAPI_ISteamVideo_GetOPFSettings(
				IntPtr ISteamVideo,
				uint unVideoAppID);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamVideo_GetOPFStringForApp(
				IntPtr ISteamVideo,
				uint unVideoAppID,
				StringBuilder pchBuffer,
				out int pnBufferSize);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamGameServer_InitGameServer(
				IntPtr ISteamGameServer,
				uint unIP,
				ushort usGamePort,
				ushort usQueryPort,
				uint unFlags,
				uint nGameAppId,
				string pchVersionString);

			[DllImport("libsteam_api.so")]
			internal static extern void SteamAPI_ISteamGameServer_SetProduct(
				IntPtr ISteamGameServer,
				string pszProduct);

			[DllImport("libsteam_api.so")]
			internal static extern void SteamAPI_ISteamGameServer_SetGameDescription(
				IntPtr ISteamGameServer,
				string pszGameDescription);

			[DllImport("libsteam_api.so")]
			internal static extern void SteamAPI_ISteamGameServer_SetModDir(
				IntPtr ISteamGameServer,
				string pszModDir);

			[DllImport("libsteam_api.so")]
			internal static extern void SteamAPI_ISteamGameServer_SetDedicatedServer(
				IntPtr ISteamGameServer,
				[MarshalAs(UnmanagedType.U1)] bool bDedicated);

			[DllImport("libsteam_api.so")]
			internal static extern void SteamAPI_ISteamGameServer_LogOn(
				IntPtr ISteamGameServer,
				string pszToken);

			[DllImport("libsteam_api.so")]
			internal static extern void SteamAPI_ISteamGameServer_LogOnAnonymous(IntPtr ISteamGameServer);

			[DllImport("libsteam_api.so")]
			internal static extern void SteamAPI_ISteamGameServer_LogOff(IntPtr ISteamGameServer);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamGameServer_BLoggedOn(IntPtr ISteamGameServer);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamGameServer_BSecure(IntPtr ISteamGameServer);

			[DllImport("libsteam_api.so")]
			internal static extern CSteamID SteamAPI_ISteamGameServer_GetSteamID(IntPtr ISteamGameServer);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamGameServer_WasRestartRequested(
				IntPtr ISteamGameServer);

			[DllImport("libsteam_api.so")]
			internal static extern void SteamAPI_ISteamGameServer_SetMaxPlayerCount(
				IntPtr ISteamGameServer,
				int cPlayersMax);

			[DllImport("libsteam_api.so")]
			internal static extern void SteamAPI_ISteamGameServer_SetBotPlayerCount(
				IntPtr ISteamGameServer,
				int cBotplayers);

			[DllImport("libsteam_api.so")]
			internal static extern void SteamAPI_ISteamGameServer_SetServerName(
				IntPtr ISteamGameServer,
				string pszServerName);

			[DllImport("libsteam_api.so")]
			internal static extern void SteamAPI_ISteamGameServer_SetMapName(
				IntPtr ISteamGameServer,
				string pszMapName);

			[DllImport("libsteam_api.so")]
			internal static extern void SteamAPI_ISteamGameServer_SetPasswordProtected(
				IntPtr ISteamGameServer,
				[MarshalAs(UnmanagedType.U1)] bool bPasswordProtected);

			[DllImport("libsteam_api.so")]
			internal static extern void SteamAPI_ISteamGameServer_SetSpectatorPort(
				IntPtr ISteamGameServer,
				ushort unSpectatorPort);

			[DllImport("libsteam_api.so")]
			internal static extern void SteamAPI_ISteamGameServer_SetSpectatorServerName(
				IntPtr ISteamGameServer,
				string pszSpectatorServerName);

			[DllImport("libsteam_api.so")]
			internal static extern void SteamAPI_ISteamGameServer_ClearAllKeyValues(
				IntPtr ISteamGameServer);

			[DllImport("libsteam_api.so")]
			internal static extern void SteamAPI_ISteamGameServer_SetKeyValue(
				IntPtr ISteamGameServer,
				string pKey,
				string pValue);

			[DllImport("libsteam_api.so")]
			internal static extern void SteamAPI_ISteamGameServer_SetGameTags(
				IntPtr ISteamGameServer,
				string pchGameTags);

			[DllImport("libsteam_api.so")]
			internal static extern void SteamAPI_ISteamGameServer_SetGameData(
				IntPtr ISteamGameServer,
				string pchGameData);

			[DllImport("libsteam_api.so")]
			internal static extern void SteamAPI_ISteamGameServer_SetRegion(
				IntPtr ISteamGameServer,
				string pszRegion);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamGameServer_SendUserConnectAndAuthenticate(
				IntPtr ISteamGameServer,
				uint unIPClient,
				IntPtr pvAuthBlob,
				uint cubAuthBlobSize,
				out ulong pSteamIDUser);

			[DllImport("libsteam_api.so")]
			internal static extern CSteamID SteamAPI_ISteamGameServer_CreateUnauthenticatedUserConnection(
				IntPtr ISteamGameServer);

			[DllImport("libsteam_api.so")]
			internal static extern void SteamAPI_ISteamGameServer_SendUserDisconnect(
				IntPtr ISteamGameServer,
				ulong steamIDUser);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamGameServer_BUpdateUserData(
				IntPtr ISteamGameServer,
				ulong steamIDUser,
				string pchPlayerName,
				uint uScore);

			[DllImport("libsteam_api.so")]
			internal static extern HAuthTicket SteamAPI_ISteamGameServer_GetAuthSessionTicket(
				IntPtr ISteamGameServer,
				IntPtr pTicket,
				int cbMaxTicket,
				out uint pcbTicket);

			[DllImport("libsteam_api.so")]
			internal static extern BeginAuthSessionResult SteamAPI_ISteamGameServer_BeginAuthSession(
				IntPtr ISteamGameServer,
				IntPtr pAuthTicket,
				int cbAuthTicket,
				ulong steamID);

			[DllImport("libsteam_api.so")]
			internal static extern void SteamAPI_ISteamGameServer_EndAuthSession(
				IntPtr ISteamGameServer,
				ulong steamID);

			[DllImport("libsteam_api.so")]
			internal static extern void SteamAPI_ISteamGameServer_CancelAuthTicket(
				IntPtr ISteamGameServer,
				uint hAuthTicket);

			[DllImport("libsteam_api.so")]
			internal static extern UserHasLicenseForAppResult SteamAPI_ISteamGameServer_UserHasLicenseForApp(
				IntPtr ISteamGameServer,
				ulong steamID,
				uint appID);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamGameServer_RequestUserGroupStatus(
				IntPtr ISteamGameServer,
				ulong steamIDUser,
				ulong steamIDGroup);

			[DllImport("libsteam_api.so")]
			internal static extern void SteamAPI_ISteamGameServer_GetGameplayStats(
				IntPtr ISteamGameServer);

			[DllImport("libsteam_api.so")]
			internal static extern SteamAPICall_t SteamAPI_ISteamGameServer_GetServerReputation(
				IntPtr ISteamGameServer);

			[DllImport("libsteam_api.so")]
			internal static extern uint SteamAPI_ISteamGameServer_GetPublicIP(IntPtr ISteamGameServer);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamGameServer_HandleIncomingPacket(
				IntPtr ISteamGameServer,
				IntPtr pData,
				int cbData,
				uint srcIP,
				ushort srcPort);

			[DllImport("libsteam_api.so")]
			internal static extern int SteamAPI_ISteamGameServer_GetNextOutgoingPacket(
				IntPtr ISteamGameServer,
				IntPtr pOut,
				int cbMaxOut,
				out uint pNetAdr,
				out ushort pPort);

			[DllImport("libsteam_api.so")]
			internal static extern void SteamAPI_ISteamGameServer_EnableHeartbeats(
				IntPtr ISteamGameServer,
				[MarshalAs(UnmanagedType.U1)] bool bActive);

			[DllImport("libsteam_api.so")]
			internal static extern void SteamAPI_ISteamGameServer_SetHeartbeatInterval(
				IntPtr ISteamGameServer,
				int iHeartbeatInterval);

			[DllImport("libsteam_api.so")]
			internal static extern void SteamAPI_ISteamGameServer_ForceHeartbeat(IntPtr ISteamGameServer);

			[DllImport("libsteam_api.so")]
			internal static extern SteamAPICall_t SteamAPI_ISteamGameServer_AssociateWithClan(
				IntPtr ISteamGameServer,
				ulong steamIDClan);

			[DllImport("libsteam_api.so")]
			internal static extern SteamAPICall_t SteamAPI_ISteamGameServer_ComputeNewPlayerCompatibility(
				IntPtr ISteamGameServer,
				ulong steamIDNewPlayer);

			[DllImport("libsteam_api.so")]
			internal static extern SteamAPICall_t SteamAPI_ISteamGameServerStats_RequestUserStats(
				IntPtr ISteamGameServerStats,
				ulong steamIDUser);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamGameServerStats_GetUserStat(
				IntPtr ISteamGameServerStats,
				ulong steamIDUser,
				string pchName,
				out int pData);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamGameServerStats_GetUserStat0(
				IntPtr ISteamGameServerStats,
				ulong steamIDUser,
				string pchName,
				out float pData);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamGameServerStats_GetUserAchievement(
				IntPtr ISteamGameServerStats,
				ulong steamIDUser,
				string pchName,
				[MarshalAs(UnmanagedType.U1)] ref bool pbAchieved);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamGameServerStats_SetUserStat(
				IntPtr ISteamGameServerStats,
				ulong steamIDUser,
				string pchName,
				int nData);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamGameServerStats_SetUserStat0(
				IntPtr ISteamGameServerStats,
				ulong steamIDUser,
				string pchName,
				float fData);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamGameServerStats_UpdateUserAvgRateStat(
				IntPtr ISteamGameServerStats,
				ulong steamIDUser,
				string pchName,
				float flCountThisSession,
				double dSessionLength);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamGameServerStats_SetUserAchievement(
				IntPtr ISteamGameServerStats,
				ulong steamIDUser,
				string pchName);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_ISteamGameServerStats_ClearUserAchievement(
				IntPtr ISteamGameServerStats,
				ulong steamIDUser,
				string pchName);

			[DllImport("libsteam_api.so")]
			internal static extern SteamAPICall_t SteamAPI_ISteamGameServerStats_StoreUserStats(
				IntPtr ISteamGameServerStats,
				ulong steamIDUser);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_Init();

			[DllImport("libsteam_api.so")]
			internal static extern void SteamAPI_RunCallbacks();

			[DllImport("libsteam_api.so")]
			internal static extern void SteamGameServer_RunCallbacks();

			[DllImport("libsteam_api.so")]
			internal static extern void SteamAPI_RegisterCallback(IntPtr pCallback, int callback);

			[DllImport("libsteam_api.so")]
			internal static extern void SteamAPI_UnregisterCallback(IntPtr pCallback);

			[DllImport("libsteam_api.so")]
			internal static extern void SteamAPI_RegisterCallResult(IntPtr pCallback, ulong callback);

			[DllImport("libsteam_api.so")]
			internal static extern void SteamAPI_UnregisterCallResult(IntPtr pCallback, ulong callback);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamInternal_GameServer_Init(
				uint unIP,
				ushort usPort,
				ushort usGamePort,
				ushort usQueryPort,
				int eServerMode,
				string pchVersionString);

			[DllImport("libsteam_api.so")]
			internal static extern void SteamAPI_Shutdown();

			[DllImport("libsteam_api.so")]
			internal static extern void SteamGameServer_Shutdown();

			[DllImport("libsteam_api.so")]
			internal static extern HSteamUser SteamAPI_GetHSteamUser();

			[DllImport("libsteam_api.so")]
			internal static extern HSteamPipe SteamAPI_GetHSteamPipe();

			[DllImport("libsteam_api.so")]
			internal static extern HSteamUser SteamGameServer_GetHSteamUser();

			[DllImport("libsteam_api.so")]
			internal static extern HSteamPipe SteamGameServer_GetHSteamPipe();

			[DllImport("libsteam_api.so")]
			internal static extern IntPtr SteamInternal_CreateInterface(string version);

			[DllImport("libsteam_api.so")]
			internal static extern bool SteamAPI_RestartAppIfNecessary(uint unOwnAppID);
		}
	}

	internal class Linux64 : Interface, IDisposable {
		internal IntPtr _ptr;

		public bool IsValid => _ptr != IntPtr.Zero;

		internal Linux64(IntPtr pointer) {
			_ptr = pointer;
		}

		public virtual void Dispose() {
			_ptr = IntPtr.Zero;
		}

		public virtual HSteamPipe ISteamClient_CreateSteamPipe() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamClient_CreateSteamPipe(_ptr)
				: throw new Exception("ISteamClient _ptr is null!");
		}

		public virtual bool ISteamClient_BReleaseSteamPipe(int hSteamPipe) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamClient_BReleaseSteamPipe(_ptr, hSteamPipe)
				: throw new Exception("ISteamClient _ptr is null!");
		}

		public virtual HSteamUser ISteamClient_ConnectToGlobalUser(int hSteamPipe) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamClient_ConnectToGlobalUser(_ptr, hSteamPipe)
				: throw new Exception("ISteamClient _ptr is null!");
		}

		public virtual HSteamUser ISteamClient_CreateLocalUser(
			out int phSteamPipe,
			AccountType eAccountType) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamClient_CreateLocalUser(_ptr, out phSteamPipe, eAccountType)
				: throw new Exception("ISteamClient _ptr is null!");
		}

		public virtual void ISteamClient_ReleaseUser(int hSteamPipe, int hUser) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamClient _ptr is null!");
			Native.SteamAPI_ISteamClient_ReleaseUser(_ptr, hSteamPipe, hUser);
		}

		public virtual IntPtr ISteamClient_GetISteamUser(
			int hSteamUser,
			int hSteamPipe,
			string pchVersion) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamClient _ptr is null!");
			return Native.SteamAPI_ISteamClient_GetISteamUser(_ptr, hSteamUser, hSteamPipe, pchVersion);
		}

		public virtual IntPtr ISteamClient_GetISteamGameServer(
			int hSteamUser,
			int hSteamPipe,
			string pchVersion) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamClient _ptr is null!");
			return Native.SteamAPI_ISteamClient_GetISteamGameServer(_ptr, hSteamUser, hSteamPipe, pchVersion);
		}

		public virtual void ISteamClient_SetLocalIPBinding(uint unIP, ushort usPort) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamClient _ptr is null!");
			Native.SteamAPI_ISteamClient_SetLocalIPBinding(_ptr, unIP, usPort);
		}

		public virtual IntPtr ISteamClient_GetISteamFriends(
			int hSteamUser,
			int hSteamPipe,
			string pchVersion) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamClient _ptr is null!");
			return Native.SteamAPI_ISteamClient_GetISteamFriends(_ptr, hSteamUser, hSteamPipe, pchVersion);
		}

		public virtual IntPtr ISteamClient_GetISteamUtils(int hSteamPipe, string pchVersion) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamClient _ptr is null!");
			return Native.SteamAPI_ISteamClient_GetISteamUtils(_ptr, hSteamPipe, pchVersion);
		}

		public virtual IntPtr ISteamClient_GetISteamMatchmaking(
			int hSteamUser,
			int hSteamPipe,
			string pchVersion) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamClient _ptr is null!");
			return Native.SteamAPI_ISteamClient_GetISteamMatchmaking(_ptr, hSteamUser, hSteamPipe, pchVersion);
		}

		public virtual IntPtr ISteamClient_GetISteamMatchmakingServers(
			int hSteamUser,
			int hSteamPipe,
			string pchVersion) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamClient _ptr is null!");
			return Native.SteamAPI_ISteamClient_GetISteamMatchmakingServers(_ptr, hSteamUser, hSteamPipe, pchVersion);
		}

		public virtual IntPtr ISteamClient_GetISteamGenericInterface(
			int hSteamUser,
			int hSteamPipe,
			string pchVersion) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamClient _ptr is null!");
			return Native.SteamAPI_ISteamClient_GetISteamGenericInterface(_ptr, hSteamUser, hSteamPipe, pchVersion);
		}

		public virtual IntPtr ISteamClient_GetISteamUserStats(
			int hSteamUser,
			int hSteamPipe,
			string pchVersion) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamClient _ptr is null!");
			return Native.SteamAPI_ISteamClient_GetISteamUserStats(_ptr, hSteamUser, hSteamPipe, pchVersion);
		}

		public virtual IntPtr ISteamClient_GetISteamGameServerStats(
			int hSteamuser,
			int hSteamPipe,
			string pchVersion) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamClient _ptr is null!");
			return Native.SteamAPI_ISteamClient_GetISteamGameServerStats(_ptr, hSteamuser, hSteamPipe, pchVersion);
		}

		public virtual IntPtr ISteamClient_GetISteamApps(
			int hSteamUser,
			int hSteamPipe,
			string pchVersion) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamClient _ptr is null!");
			return Native.SteamAPI_ISteamClient_GetISteamApps(_ptr, hSteamUser, hSteamPipe, pchVersion);
		}

		public virtual IntPtr ISteamClient_GetISteamNetworking(
			int hSteamUser,
			int hSteamPipe,
			string pchVersion) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamClient _ptr is null!");
			return Native.SteamAPI_ISteamClient_GetISteamNetworking(_ptr, hSteamUser, hSteamPipe, pchVersion);
		}

		public virtual IntPtr ISteamClient_GetISteamRemoteStorage(
			int hSteamuser,
			int hSteamPipe,
			string pchVersion) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamClient _ptr is null!");
			return Native.SteamAPI_ISteamClient_GetISteamRemoteStorage(_ptr, hSteamuser, hSteamPipe, pchVersion);
		}

		public virtual IntPtr ISteamClient_GetISteamScreenshots(
			int hSteamuser,
			int hSteamPipe,
			string pchVersion) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamClient _ptr is null!");
			return Native.SteamAPI_ISteamClient_GetISteamScreenshots(_ptr, hSteamuser, hSteamPipe, pchVersion);
		}

		public virtual uint ISteamClient_GetIPCCallCount() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamClient_GetIPCCallCount(_ptr)
				: throw new Exception("ISteamClient _ptr is null!");
		}

		public virtual void ISteamClient_SetWarningMessageHook(IntPtr pFunction) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamClient _ptr is null!");
			Native.SteamAPI_ISteamClient_SetWarningMessageHook(_ptr, pFunction);
		}

		public virtual bool ISteamClient_BShutdownIfAllPipesClosed() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamClient_BShutdownIfAllPipesClosed(_ptr)
				: throw new Exception("ISteamClient _ptr is null!");
		}

		public virtual IntPtr ISteamClient_GetISteamHTTP(
			int hSteamuser,
			int hSteamPipe,
			string pchVersion) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamClient _ptr is null!");
			return Native.SteamAPI_ISteamClient_GetISteamHTTP(_ptr, hSteamuser, hSteamPipe, pchVersion);
		}

		public virtual IntPtr ISteamClient_GetISteamUnifiedMessages(
			int hSteamuser,
			int hSteamPipe,
			string pchVersion) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamClient _ptr is null!");
			return Native.SteamAPI_ISteamClient_GetISteamUnifiedMessages(_ptr, hSteamuser, hSteamPipe, pchVersion);
		}

		public virtual IntPtr ISteamClient_GetISteamController(
			int hSteamUser,
			int hSteamPipe,
			string pchVersion) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamClient _ptr is null!");
			return Native.SteamAPI_ISteamClient_GetISteamController(_ptr, hSteamUser, hSteamPipe, pchVersion);
		}

		public virtual IntPtr ISteamClient_GetISteamUGC(
			int hSteamUser,
			int hSteamPipe,
			string pchVersion) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamClient _ptr is null!");
			return Native.SteamAPI_ISteamClient_GetISteamUGC(_ptr, hSteamUser, hSteamPipe, pchVersion);
		}

		public virtual IntPtr ISteamClient_GetISteamAppList(
			int hSteamUser,
			int hSteamPipe,
			string pchVersion) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamClient _ptr is null!");
			return Native.SteamAPI_ISteamClient_GetISteamAppList(_ptr, hSteamUser, hSteamPipe, pchVersion);
		}

		public virtual IntPtr ISteamClient_GetISteamMusic(
			int hSteamuser,
			int hSteamPipe,
			string pchVersion) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamClient _ptr is null!");
			return Native.SteamAPI_ISteamClient_GetISteamMusic(_ptr, hSteamuser, hSteamPipe, pchVersion);
		}

		public virtual IntPtr ISteamClient_GetISteamMusicRemote(
			int hSteamuser,
			int hSteamPipe,
			string pchVersion) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamClient _ptr is null!");
			return Native.SteamAPI_ISteamClient_GetISteamMusicRemote(_ptr, hSteamuser, hSteamPipe, pchVersion);
		}

		public virtual IntPtr ISteamClient_GetISteamHTMLSurface(
			int hSteamuser,
			int hSteamPipe,
			string pchVersion) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamClient _ptr is null!");
			return Native.SteamAPI_ISteamClient_GetISteamHTMLSurface(_ptr, hSteamuser, hSteamPipe, pchVersion);
		}

		public virtual IntPtr ISteamClient_GetISteamInventory(
			int hSteamuser,
			int hSteamPipe,
			string pchVersion) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamClient _ptr is null!");
			return Native.SteamAPI_ISteamClient_GetISteamInventory(_ptr, hSteamuser, hSteamPipe, pchVersion);
		}

		public virtual IntPtr ISteamClient_GetISteamVideo(
			int hSteamuser,
			int hSteamPipe,
			string pchVersion) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamClient _ptr is null!");
			return Native.SteamAPI_ISteamClient_GetISteamVideo(_ptr, hSteamuser, hSteamPipe, pchVersion);
		}

		public virtual HSteamUser ISteamUser_GetHSteamUser() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUser_GetHSteamUser(_ptr)
				: throw new Exception("ISteamUser _ptr is null!");
		}

		public virtual bool ISteamUser_BLoggedOn() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUser_BLoggedOn(_ptr)
				: throw new Exception("ISteamUser _ptr is null!");
		}

		public virtual CSteamID ISteamUser_GetSteamID() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUser_GetSteamID(_ptr)
				: throw new Exception("ISteamUser _ptr is null!");
		}

		public virtual int ISteamUser_InitiateGameConnection(
			IntPtr pAuthBlob,
			int cbMaxAuthBlob,
			ulong steamIDGameServer,
			uint unIPServer,
			ushort usPortServer,
			[MarshalAs(UnmanagedType.U1)] bool bSecure) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUser _ptr is null!");
			return Native.SteamAPI_ISteamUser_InitiateGameConnection(_ptr, pAuthBlob, cbMaxAuthBlob, steamIDGameServer,
				unIPServer, usPortServer, bSecure);
		}

		public virtual void ISteamUser_TerminateGameConnection(uint unIPServer, ushort usPortServer) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUser _ptr is null!");
			Native.SteamAPI_ISteamUser_TerminateGameConnection(_ptr, unIPServer, usPortServer);
		}

		public virtual void ISteamUser_TrackAppUsageEvent(
			ulong gameID,
			int eAppUsageEvent,
			string pchExtraInfo) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUser _ptr is null!");
			Native.SteamAPI_ISteamUser_TrackAppUsageEvent(_ptr, gameID, eAppUsageEvent, pchExtraInfo);
		}

		public virtual bool ISteamUser_GetUserDataFolder(StringBuilder pchBuffer, int cubBuffer) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUser _ptr is null!");
			return Native.SteamAPI_ISteamUser_GetUserDataFolder(_ptr, pchBuffer, cubBuffer);
		}

		public virtual void ISteamUser_StartVoiceRecording() {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUser _ptr is null!");
			Native.SteamAPI_ISteamUser_StartVoiceRecording(_ptr);
		}

		public virtual void ISteamUser_StopVoiceRecording() {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUser _ptr is null!");
			Native.SteamAPI_ISteamUser_StopVoiceRecording(_ptr);
		}

		public virtual VoiceResult ISteamUser_GetAvailableVoice(
			out uint pcbCompressed,
			out uint pcbUncompressed_Deprecated,
			uint nUncompressedVoiceDesiredSampleRate_Deprecated) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUser_GetAvailableVoice(_ptr, out pcbCompressed, out pcbUncompressed_Deprecated,
					nUncompressedVoiceDesiredSampleRate_Deprecated)
				: throw new Exception("ISteamUser _ptr is null!");
		}

		public virtual VoiceResult ISteamUser_GetVoice(
			[MarshalAs(UnmanagedType.U1)] bool bWantCompressed,
			IntPtr pDestBuffer,
			uint cbDestBufferSize,
			out uint nBytesWritten,
			[MarshalAs(UnmanagedType.U1)] bool bWantUncompressed_Deprecated,
			IntPtr pUncompressedDestBuffer_Deprecated,
			uint cbUncompressedDestBufferSize_Deprecated,
			out uint nUncompressBytesWritten_Deprecated,
			uint nUncompressedVoiceDesiredSampleRate_Deprecated) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUser _ptr is null!");
			return Native.SteamAPI_ISteamUser_GetVoice(_ptr, bWantCompressed, pDestBuffer, cbDestBufferSize,
				out nBytesWritten, bWantUncompressed_Deprecated, pUncompressedDestBuffer_Deprecated,
				cbUncompressedDestBufferSize_Deprecated, out nUncompressBytesWritten_Deprecated,
				nUncompressedVoiceDesiredSampleRate_Deprecated);
		}

		public virtual VoiceResult ISteamUser_DecompressVoice(
			IntPtr pCompressed,
			uint cbCompressed,
			IntPtr pDestBuffer,
			uint cbDestBufferSize,
			out uint nBytesWritten,
			uint nDesiredSampleRate) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUser _ptr is null!");
			return Native.SteamAPI_ISteamUser_DecompressVoice(_ptr, pCompressed, cbCompressed, pDestBuffer,
				cbDestBufferSize, out nBytesWritten, nDesiredSampleRate);
		}

		public virtual uint ISteamUser_GetVoiceOptimalSampleRate() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUser_GetVoiceOptimalSampleRate(_ptr)
				: throw new Exception("ISteamUser _ptr is null!");
		}

		public virtual HAuthTicket ISteamUser_GetAuthSessionTicket(
			IntPtr pTicket,
			int cbMaxTicket,
			out uint pcbTicket) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUser _ptr is null!");
			return Native.SteamAPI_ISteamUser_GetAuthSessionTicket(_ptr, pTicket, cbMaxTicket, out pcbTicket);
		}

		public virtual BeginAuthSessionResult ISteamUser_BeginAuthSession(
			IntPtr pAuthTicket,
			int cbAuthTicket,
			ulong steamID) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUser _ptr is null!");
			return Native.SteamAPI_ISteamUser_BeginAuthSession(_ptr, pAuthTicket, cbAuthTicket, steamID);
		}

		public virtual void ISteamUser_EndAuthSession(ulong steamID) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUser _ptr is null!");
			Native.SteamAPI_ISteamUser_EndAuthSession(_ptr, steamID);
		}

		public virtual void ISteamUser_CancelAuthTicket(uint hAuthTicket) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUser _ptr is null!");
			Native.SteamAPI_ISteamUser_CancelAuthTicket(_ptr, hAuthTicket);
		}

		public virtual UserHasLicenseForAppResult ISteamUser_UserHasLicenseForApp(
			ulong steamID,
			uint appID) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUser _ptr is null!");
			return Native.SteamAPI_ISteamUser_UserHasLicenseForApp(_ptr, steamID, appID);
		}

		public virtual bool ISteamUser_BIsBehindNAT() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUser_BIsBehindNAT(_ptr)
				: throw new Exception("ISteamUser _ptr is null!");
		}

		public virtual void ISteamUser_AdvertiseGame(
			ulong steamIDGameServer,
			uint unIPServer,
			ushort usPortServer) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUser _ptr is null!");
			Native.SteamAPI_ISteamUser_AdvertiseGame(_ptr, steamIDGameServer, unIPServer, usPortServer);
		}

		public virtual SteamAPICall_t ISteamUser_RequestEncryptedAppTicket(
			IntPtr pDataToInclude,
			int cbDataToInclude) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUser _ptr is null!");
			return Native.SteamAPI_ISteamUser_RequestEncryptedAppTicket(_ptr, pDataToInclude, cbDataToInclude);
		}

		public virtual bool ISteamUser_GetEncryptedAppTicket(
			IntPtr pTicket,
			int cbMaxTicket,
			out uint pcbTicket) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUser _ptr is null!");
			return Native.SteamAPI_ISteamUser_GetEncryptedAppTicket(_ptr, pTicket, cbMaxTicket, out pcbTicket);
		}

		public virtual int ISteamUser_GetGameBadgeLevel(int nSeries, [MarshalAs(UnmanagedType.U1)] bool bFoil) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUser _ptr is null!");
			return Native.SteamAPI_ISteamUser_GetGameBadgeLevel(_ptr, nSeries, bFoil);
		}

		public virtual int ISteamUser_GetPlayerSteamLevel() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUser_GetPlayerSteamLevel(_ptr)
				: throw new Exception("ISteamUser _ptr is null!");
		}

		public virtual SteamAPICall_t ISteamUser_RequestStoreAuthURL(string pchRedirectURL) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUser_RequestStoreAuthURL(_ptr, pchRedirectURL)
				: throw new Exception("ISteamUser _ptr is null!");
		}

		public virtual bool ISteamUser_BIsPhoneVerified() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUser_BIsPhoneVerified(_ptr)
				: throw new Exception("ISteamUser _ptr is null!");
		}

		public virtual bool ISteamUser_BIsTwoFactorEnabled() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUser_BIsTwoFactorEnabled(_ptr)
				: throw new Exception("ISteamUser _ptr is null!");
		}

		public virtual bool ISteamUser_BIsPhoneIdentifying() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUser_BIsPhoneIdentifying(_ptr)
				: throw new Exception("ISteamUser _ptr is null!");
		}

		public virtual bool ISteamUser_BIsPhoneRequiringVerification() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUser_BIsPhoneRequiringVerification(_ptr)
				: throw new Exception("ISteamUser _ptr is null!");
		}

		public virtual IntPtr ISteamFriends_GetPersonaName() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_GetPersonaName(_ptr)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual SteamAPICall_t ISteamFriends_SetPersonaName(string pchPersonaName) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_SetPersonaName(_ptr, pchPersonaName)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual PersonaState ISteamFriends_GetPersonaState() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_GetPersonaState(_ptr)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual int ISteamFriends_GetFriendCount(int iFriendFlags) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_GetFriendCount(_ptr, iFriendFlags)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual CSteamID ISteamFriends_GetFriendByIndex(int iFriend, int iFriendFlags) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamFriends _ptr is null!");
			return Native.SteamAPI_ISteamFriends_GetFriendByIndex(_ptr, iFriend, iFriendFlags);
		}

		public virtual FriendRelationship ISteamFriends_GetFriendRelationship(ulong steamIDFriend) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_GetFriendRelationship(_ptr, steamIDFriend)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual PersonaState ISteamFriends_GetFriendPersonaState(ulong steamIDFriend) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_GetFriendPersonaState(_ptr, steamIDFriend)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual IntPtr ISteamFriends_GetFriendPersonaName(ulong steamIDFriend) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_GetFriendPersonaName(_ptr, steamIDFriend)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual bool ISteamFriends_GetFriendGamePlayed(
			ulong steamIDFriend,
			ref FriendGameInfo_t pFriendGameInfo) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamFriends _ptr is null!");
			var pFriendGameInfo1 = new FriendGameInfo_t.PackSmall();
			var friendGamePlayed =
				Native.SteamAPI_ISteamFriends_GetFriendGamePlayed(_ptr, steamIDFriend, ref pFriendGameInfo1);
			pFriendGameInfo = (FriendGameInfo_t)pFriendGameInfo1;
			return friendGamePlayed;
		}

		public virtual IntPtr ISteamFriends_GetFriendPersonaNameHistory(
			ulong steamIDFriend,
			int iPersonaName) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamFriends _ptr is null!");
			return Native.SteamAPI_ISteamFriends_GetFriendPersonaNameHistory(_ptr, steamIDFriend, iPersonaName);
		}

		public virtual int ISteamFriends_GetFriendSteamLevel(ulong steamIDFriend) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_GetFriendSteamLevel(_ptr, steamIDFriend)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual IntPtr ISteamFriends_GetPlayerNickname(ulong steamIDPlayer) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_GetPlayerNickname(_ptr, steamIDPlayer)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual int ISteamFriends_GetFriendsGroupCount() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_GetFriendsGroupCount(_ptr)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual FriendsGroupID_t ISteamFriends_GetFriendsGroupIDByIndex(int iFG) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_GetFriendsGroupIDByIndex(_ptr, iFG)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual IntPtr ISteamFriends_GetFriendsGroupName(short friendsGroupID) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_GetFriendsGroupName(_ptr, friendsGroupID)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual int ISteamFriends_GetFriendsGroupMembersCount(short friendsGroupID) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_GetFriendsGroupMembersCount(_ptr, friendsGroupID)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual void ISteamFriends_GetFriendsGroupMembersList(
			short friendsGroupID,
			IntPtr pOutSteamIDMembers,
			int nMembersCount) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamFriends _ptr is null!");
			Native.SteamAPI_ISteamFriends_GetFriendsGroupMembersList(_ptr, friendsGroupID, pOutSteamIDMembers,
				nMembersCount);
		}

		public virtual bool ISteamFriends_HasFriend(ulong steamIDFriend, int iFriendFlags) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamFriends _ptr is null!");
			return Native.SteamAPI_ISteamFriends_HasFriend(_ptr, steamIDFriend, iFriendFlags);
		}

		public virtual int ISteamFriends_GetClanCount() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_GetClanCount(_ptr)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual CSteamID ISteamFriends_GetClanByIndex(int iClan) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_GetClanByIndex(_ptr, iClan)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual IntPtr ISteamFriends_GetClanName(ulong steamIDClan) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_GetClanName(_ptr, steamIDClan)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual IntPtr ISteamFriends_GetClanTag(ulong steamIDClan) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_GetClanTag(_ptr, steamIDClan)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual bool ISteamFriends_GetClanActivityCounts(
			ulong steamIDClan,
			out int pnOnline,
			out int pnInGame,
			out int pnChatting) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_GetClanActivityCounts(_ptr, steamIDClan, out pnOnline, out pnInGame,
					out pnChatting)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual SteamAPICall_t ISteamFriends_DownloadClanActivityCounts(
			IntPtr psteamIDClans,
			int cClansToRequest) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamFriends _ptr is null!");
			return Native.SteamAPI_ISteamFriends_DownloadClanActivityCounts(_ptr, psteamIDClans, cClansToRequest);
		}

		public virtual int ISteamFriends_GetFriendCountFromSource(ulong steamIDSource) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_GetFriendCountFromSource(_ptr, steamIDSource)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual CSteamID ISteamFriends_GetFriendFromSourceByIndex(
			ulong steamIDSource,
			int iFriend) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamFriends _ptr is null!");
			return Native.SteamAPI_ISteamFriends_GetFriendFromSourceByIndex(_ptr, steamIDSource, iFriend);
		}

		public virtual bool ISteamFriends_IsUserInSource(ulong steamIDUser, ulong steamIDSource) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamFriends _ptr is null!");
			return Native.SteamAPI_ISteamFriends_IsUserInSource(_ptr, steamIDUser, steamIDSource);
		}

		public virtual void ISteamFriends_SetInGameVoiceSpeaking(ulong steamIDUser,
			[MarshalAs(UnmanagedType.U1)] bool bSpeaking) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamFriends _ptr is null!");
			Native.SteamAPI_ISteamFriends_SetInGameVoiceSpeaking(_ptr, steamIDUser, bSpeaking);
		}

		public virtual void ISteamFriends_ActivateGameOverlay(string pchDialog) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamFriends _ptr is null!");
			Native.SteamAPI_ISteamFriends_ActivateGameOverlay(_ptr, pchDialog);
		}

		public virtual void ISteamFriends_ActivateGameOverlayToUser(string pchDialog, ulong steamID) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamFriends _ptr is null!");
			Native.SteamAPI_ISteamFriends_ActivateGameOverlayToUser(_ptr, pchDialog, steamID);
		}

		public virtual void ISteamFriends_ActivateGameOverlayToWebPage(string pchURL) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamFriends _ptr is null!");
			Native.SteamAPI_ISteamFriends_ActivateGameOverlayToWebPage(_ptr, pchURL);
		}

		public virtual void ISteamFriends_ActivateGameOverlayToStore(
			uint nAppID,
			OverlayToStoreFlag eFlag) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamFriends _ptr is null!");
			Native.SteamAPI_ISteamFriends_ActivateGameOverlayToStore(_ptr, nAppID, eFlag);
		}

		public virtual void ISteamFriends_SetPlayedWith(ulong steamIDUserPlayedWith) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamFriends _ptr is null!");
			Native.SteamAPI_ISteamFriends_SetPlayedWith(_ptr, steamIDUserPlayedWith);
		}

		public virtual void ISteamFriends_ActivateGameOverlayInviteDialog(ulong steamIDLobby) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamFriends _ptr is null!");
			Native.SteamAPI_ISteamFriends_ActivateGameOverlayInviteDialog(_ptr, steamIDLobby);
		}

		public virtual int ISteamFriends_GetSmallFriendAvatar(ulong steamIDFriend) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_GetSmallFriendAvatar(_ptr, steamIDFriend)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual int ISteamFriends_GetMediumFriendAvatar(ulong steamIDFriend) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_GetMediumFriendAvatar(_ptr, steamIDFriend)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual int ISteamFriends_GetLargeFriendAvatar(ulong steamIDFriend) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_GetLargeFriendAvatar(_ptr, steamIDFriend)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual bool ISteamFriends_RequestUserInformation(
			ulong steamIDUser,
			[MarshalAs(UnmanagedType.U1)] bool bRequireNameOnly) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamFriends _ptr is null!");
			return Native.SteamAPI_ISteamFriends_RequestUserInformation(_ptr, steamIDUser, bRequireNameOnly);
		}

		public virtual SteamAPICall_t ISteamFriends_RequestClanOfficerList(ulong steamIDClan) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_RequestClanOfficerList(_ptr, steamIDClan)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual CSteamID ISteamFriends_GetClanOwner(ulong steamIDClan) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_GetClanOwner(_ptr, steamIDClan)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual int ISteamFriends_GetClanOfficerCount(ulong steamIDClan) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_GetClanOfficerCount(_ptr, steamIDClan)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual CSteamID ISteamFriends_GetClanOfficerByIndex(ulong steamIDClan, int iOfficer) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamFriends _ptr is null!");
			return Native.SteamAPI_ISteamFriends_GetClanOfficerByIndex(_ptr, steamIDClan, iOfficer);
		}

		public virtual uint ISteamFriends_GetUserRestrictions() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_GetUserRestrictions(_ptr)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual bool ISteamFriends_SetRichPresence(string pchKey, string pchValue) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamFriends _ptr is null!");
			return Native.SteamAPI_ISteamFriends_SetRichPresence(_ptr, pchKey, pchValue);
		}

		public virtual void ISteamFriends_ClearRichPresence() {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamFriends _ptr is null!");
			Native.SteamAPI_ISteamFriends_ClearRichPresence(_ptr);
		}

		public virtual IntPtr ISteamFriends_GetFriendRichPresence(ulong steamIDFriend, string pchKey) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamFriends _ptr is null!");
			return Native.SteamAPI_ISteamFriends_GetFriendRichPresence(_ptr, steamIDFriend, pchKey);
		}

		public virtual int ISteamFriends_GetFriendRichPresenceKeyCount(ulong steamIDFriend) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_GetFriendRichPresenceKeyCount(_ptr, steamIDFriend)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual IntPtr ISteamFriends_GetFriendRichPresenceKeyByIndex(
			ulong steamIDFriend,
			int iKey) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamFriends _ptr is null!");
			return Native.SteamAPI_ISteamFriends_GetFriendRichPresenceKeyByIndex(_ptr, steamIDFriend, iKey);
		}

		public virtual void ISteamFriends_RequestFriendRichPresence(ulong steamIDFriend) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamFriends _ptr is null!");
			Native.SteamAPI_ISteamFriends_RequestFriendRichPresence(_ptr, steamIDFriend);
		}

		public virtual bool ISteamFriends_InviteUserToGame(
			ulong steamIDFriend,
			string pchConnectString) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamFriends _ptr is null!");
			return Native.SteamAPI_ISteamFriends_InviteUserToGame(_ptr, steamIDFriend, pchConnectString);
		}

		public virtual int ISteamFriends_GetCoplayFriendCount() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_GetCoplayFriendCount(_ptr)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual CSteamID ISteamFriends_GetCoplayFriend(int iCoplayFriend) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_GetCoplayFriend(_ptr, iCoplayFriend)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual int ISteamFriends_GetFriendCoplayTime(ulong steamIDFriend) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_GetFriendCoplayTime(_ptr, steamIDFriend)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual AppId_t ISteamFriends_GetFriendCoplayGame(ulong steamIDFriend) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_GetFriendCoplayGame(_ptr, steamIDFriend)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual SteamAPICall_t ISteamFriends_JoinClanChatRoom(ulong steamIDClan) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_JoinClanChatRoom(_ptr, steamIDClan)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual bool ISteamFriends_LeaveClanChatRoom(ulong steamIDClan) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_LeaveClanChatRoom(_ptr, steamIDClan)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual int ISteamFriends_GetClanChatMemberCount(ulong steamIDClan) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_GetClanChatMemberCount(_ptr, steamIDClan)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual CSteamID ISteamFriends_GetChatMemberByIndex(ulong steamIDClan, int iUser) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamFriends _ptr is null!");
			return Native.SteamAPI_ISteamFriends_GetChatMemberByIndex(_ptr, steamIDClan, iUser);
		}

		public virtual bool ISteamFriends_SendClanChatMessage(ulong steamIDClanChat, string pchText) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamFriends _ptr is null!");
			return Native.SteamAPI_ISteamFriends_SendClanChatMessage(_ptr, steamIDClanChat, pchText);
		}

		public virtual int ISteamFriends_GetClanChatMessage(
			ulong steamIDClanChat,
			int iMessage,
			IntPtr prgchText,
			int cchTextMax,
			out ChatEntryType peChatEntryType,
			out ulong psteamidChatter) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamFriends _ptr is null!");
			return Native.SteamAPI_ISteamFriends_GetClanChatMessage(_ptr, steamIDClanChat, iMessage, prgchText,
				cchTextMax, out peChatEntryType, out psteamidChatter);
		}

		public virtual bool ISteamFriends_IsClanChatAdmin(ulong steamIDClanChat, ulong steamIDUser) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamFriends _ptr is null!");
			return Native.SteamAPI_ISteamFriends_IsClanChatAdmin(_ptr, steamIDClanChat, steamIDUser);
		}

		public virtual bool ISteamFriends_IsClanChatWindowOpenInSteam(ulong steamIDClanChat) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_IsClanChatWindowOpenInSteam(_ptr, steamIDClanChat)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual bool ISteamFriends_OpenClanChatWindowInSteam(ulong steamIDClanChat) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_OpenClanChatWindowInSteam(_ptr, steamIDClanChat)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual bool ISteamFriends_CloseClanChatWindowInSteam(ulong steamIDClanChat) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_CloseClanChatWindowInSteam(_ptr, steamIDClanChat)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual bool ISteamFriends_SetListenForFriendsMessages(
			[MarshalAs(UnmanagedType.U1)] bool bInterceptEnabled) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_SetListenForFriendsMessages(_ptr, bInterceptEnabled)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual bool ISteamFriends_ReplyToFriendMessage(
			ulong steamIDFriend,
			string pchMsgToSend) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamFriends _ptr is null!");
			return Native.SteamAPI_ISteamFriends_ReplyToFriendMessage(_ptr, steamIDFriend, pchMsgToSend);
		}

		public virtual int ISteamFriends_GetFriendMessage(
			ulong steamIDFriend,
			int iMessageID,
			IntPtr pvData,
			int cubData,
			out ChatEntryType peChatEntryType) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamFriends _ptr is null!");
			return Native.SteamAPI_ISteamFriends_GetFriendMessage(_ptr, steamIDFriend, iMessageID, pvData, cubData,
				out peChatEntryType);
		}

		public virtual SteamAPICall_t ISteamFriends_GetFollowerCount(ulong steamID) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_GetFollowerCount(_ptr, steamID)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual SteamAPICall_t ISteamFriends_IsFollowing(ulong steamID) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_IsFollowing(_ptr, steamID)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual SteamAPICall_t ISteamFriends_EnumerateFollowingList(uint unStartIndex) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_EnumerateFollowingList(_ptr, unStartIndex)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual uint ISteamUtils_GetSecondsSinceAppActive() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUtils_GetSecondsSinceAppActive(_ptr)
				: throw new Exception("ISteamUtils _ptr is null!");
		}

		public virtual uint ISteamUtils_GetSecondsSinceComputerActive() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUtils_GetSecondsSinceComputerActive(_ptr)
				: throw new Exception("ISteamUtils _ptr is null!");
		}

		public virtual Universe ISteamUtils_GetConnectedUniverse() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUtils_GetConnectedUniverse(_ptr)
				: throw new Exception("ISteamUtils _ptr is null!");
		}

		public virtual uint ISteamUtils_GetServerRealTime() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUtils_GetServerRealTime(_ptr)
				: throw new Exception("ISteamUtils _ptr is null!");
		}

		public virtual IntPtr ISteamUtils_GetIPCountry() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUtils_GetIPCountry(_ptr)
				: throw new Exception("ISteamUtils _ptr is null!");
		}

		public virtual bool ISteamUtils_GetImageSize(int iImage, out uint pnWidth, out uint pnHeight) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUtils_GetImageSize(_ptr, iImage, out pnWidth, out pnHeight)
				: throw new Exception("ISteamUtils _ptr is null!");
		}

		public virtual bool ISteamUtils_GetImageRGBA(int iImage, IntPtr pubDest, int nDestBufferSize) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUtils _ptr is null!");
			return Native.SteamAPI_ISteamUtils_GetImageRGBA(_ptr, iImage, pubDest, nDestBufferSize);
		}

		public virtual bool ISteamUtils_GetCSERIPPort(out uint unIP, out ushort usPort) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUtils_GetCSERIPPort(_ptr, out unIP, out usPort)
				: throw new Exception("ISteamUtils _ptr is null!");
		}

		public virtual byte ISteamUtils_GetCurrentBatteryPower() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUtils_GetCurrentBatteryPower(_ptr)
				: throw new Exception("ISteamUtils _ptr is null!");
		}

		public virtual uint ISteamUtils_GetAppID() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUtils_GetAppID(_ptr)
				: throw new Exception("ISteamUtils _ptr is null!");
		}

		public virtual void ISteamUtils_SetOverlayNotificationPosition(
			NotificationPosition eNotificationPosition) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUtils _ptr is null!");
			Native.SteamAPI_ISteamUtils_SetOverlayNotificationPosition(_ptr, eNotificationPosition);
		}

		public virtual bool ISteamUtils_IsAPICallCompleted(ulong hSteamAPICall,
			[MarshalAs(UnmanagedType.U1)] ref bool pbFailed) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUtils _ptr is null!");
			return Native.SteamAPI_ISteamUtils_IsAPICallCompleted(_ptr, hSteamAPICall, ref pbFailed);
		}

		public virtual SteamAPICallFailure ISteamUtils_GetAPICallFailureReason(ulong hSteamAPICall) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUtils_GetAPICallFailureReason(_ptr, hSteamAPICall)
				: throw new Exception("ISteamUtils _ptr is null!");
		}

		public virtual bool ISteamUtils_GetAPICallResult(
			ulong hSteamAPICall,
			IntPtr pCallback,
			int cubCallback,
			int iCallbackExpected,
			[MarshalAs(UnmanagedType.U1)] ref bool pbFailed) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUtils _ptr is null!");
			return Native.SteamAPI_ISteamUtils_GetAPICallResult(_ptr, hSteamAPICall, pCallback, cubCallback,
				iCallbackExpected, ref pbFailed);
		}

		public virtual uint ISteamUtils_GetIPCCallCount() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUtils_GetIPCCallCount(_ptr)
				: throw new Exception("ISteamUtils _ptr is null!");
		}

		public virtual void ISteamUtils_SetWarningMessageHook(IntPtr pFunction) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUtils _ptr is null!");
			Native.SteamAPI_ISteamUtils_SetWarningMessageHook(_ptr, pFunction);
		}

		public virtual bool ISteamUtils_IsOverlayEnabled() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUtils_IsOverlayEnabled(_ptr)
				: throw new Exception("ISteamUtils _ptr is null!");
		}

		public virtual bool ISteamUtils_BOverlayNeedsPresent() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUtils_BOverlayNeedsPresent(_ptr)
				: throw new Exception("ISteamUtils _ptr is null!");
		}

		public virtual SteamAPICall_t ISteamUtils_CheckFileSignature(string szFileName) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUtils_CheckFileSignature(_ptr, szFileName)
				: throw new Exception("ISteamUtils _ptr is null!");
		}

		public virtual bool ISteamUtils_ShowGamepadTextInput(
			GamepadTextInputMode eInputMode,
			GamepadTextInputLineMode eLineInputMode,
			string pchDescription,
			uint unCharMax,
			string pchExistingText) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUtils _ptr is null!");
			return Native.SteamAPI_ISteamUtils_ShowGamepadTextInput(_ptr, eInputMode, eLineInputMode, pchDescription,
				unCharMax, pchExistingText);
		}

		public virtual uint ISteamUtils_GetEnteredGamepadTextLength() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUtils_GetEnteredGamepadTextLength(_ptr)
				: throw new Exception("ISteamUtils _ptr is null!");
		}

		public virtual bool ISteamUtils_GetEnteredGamepadTextInput(
			StringBuilder pchText,
			uint cchText) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUtils _ptr is null!");
			return Native.SteamAPI_ISteamUtils_GetEnteredGamepadTextInput(_ptr, pchText, cchText);
		}

		public virtual IntPtr ISteamUtils_GetSteamUILanguage() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUtils_GetSteamUILanguage(_ptr)
				: throw new Exception("ISteamUtils _ptr is null!");
		}

		public virtual bool ISteamUtils_IsSteamRunningInVR() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUtils_IsSteamRunningInVR(_ptr)
				: throw new Exception("ISteamUtils _ptr is null!");
		}

		public virtual void ISteamUtils_SetOverlayNotificationInset(
			int nHorizontalInset,
			int nVerticalInset) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUtils _ptr is null!");
			Native.SteamAPI_ISteamUtils_SetOverlayNotificationInset(_ptr, nHorizontalInset, nVerticalInset);
		}

		public virtual bool ISteamUtils_IsSteamInBigPictureMode() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUtils_IsSteamInBigPictureMode(_ptr)
				: throw new Exception("ISteamUtils _ptr is null!");
		}

		public virtual void ISteamUtils_StartVRDashboard() {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUtils _ptr is null!");
			Native.SteamAPI_ISteamUtils_StartVRDashboard(_ptr);
		}

		public virtual bool ISteamUtils_IsVRHeadsetStreamingEnabled() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUtils_IsVRHeadsetStreamingEnabled(_ptr)
				: throw new Exception("ISteamUtils _ptr is null!");
		}

		public virtual void ISteamUtils_SetVRHeadsetStreamingEnabled([MarshalAs(UnmanagedType.U1)] bool bEnabled) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUtils _ptr is null!");
			Native.SteamAPI_ISteamUtils_SetVRHeadsetStreamingEnabled(_ptr, bEnabled);
		}

		public virtual int ISteamMatchmaking_GetFavoriteGameCount() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMatchmaking_GetFavoriteGameCount(_ptr)
				: throw new Exception("ISteamMatchmaking _ptr is null!");
		}

		public virtual bool ISteamMatchmaking_GetFavoriteGame(
			int iGame,
			ref uint pnAppID,
			out uint pnIP,
			out ushort pnConnPort,
			out ushort pnQueryPort,
			out uint punFlags,
			out uint pRTime32LastPlayedOnServer) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmaking _ptr is null!");
			return Native.SteamAPI_ISteamMatchmaking_GetFavoriteGame(_ptr, iGame, ref pnAppID, out pnIP, out pnConnPort,
				out pnQueryPort, out punFlags, out pRTime32LastPlayedOnServer);
		}

		public virtual int ISteamMatchmaking_AddFavoriteGame(
			uint nAppID,
			uint nIP,
			ushort nConnPort,
			ushort nQueryPort,
			uint unFlags,
			uint rTime32LastPlayedOnServer) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmaking _ptr is null!");
			return Native.SteamAPI_ISteamMatchmaking_AddFavoriteGame(_ptr, nAppID, nIP, nConnPort, nQueryPort, unFlags,
				rTime32LastPlayedOnServer);
		}

		public virtual bool ISteamMatchmaking_RemoveFavoriteGame(
			uint nAppID,
			uint nIP,
			ushort nConnPort,
			ushort nQueryPort,
			uint unFlags) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmaking _ptr is null!");
			return Native.SteamAPI_ISteamMatchmaking_RemoveFavoriteGame(_ptr, nAppID, nIP, nConnPort, nQueryPort,
				unFlags);
		}

		public virtual SteamAPICall_t ISteamMatchmaking_RequestLobbyList() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMatchmaking_RequestLobbyList(_ptr)
				: throw new Exception("ISteamMatchmaking _ptr is null!");
		}

		public virtual void ISteamMatchmaking_AddRequestLobbyListStringFilter(
			string pchKeyToMatch,
			string pchValueToMatch,
			LobbyComparison eComparisonType) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmaking _ptr is null!");
			Native.SteamAPI_ISteamMatchmaking_AddRequestLobbyListStringFilter(_ptr, pchKeyToMatch, pchValueToMatch,
				eComparisonType);
		}

		public virtual void ISteamMatchmaking_AddRequestLobbyListNumericalFilter(
			string pchKeyToMatch,
			int nValueToMatch,
			LobbyComparison eComparisonType) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmaking _ptr is null!");
			Native.SteamAPI_ISteamMatchmaking_AddRequestLobbyListNumericalFilter(_ptr, pchKeyToMatch, nValueToMatch,
				eComparisonType);
		}

		public virtual void ISteamMatchmaking_AddRequestLobbyListNearValueFilter(
			string pchKeyToMatch,
			int nValueToBeCloseTo) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmaking _ptr is null!");
			Native.SteamAPI_ISteamMatchmaking_AddRequestLobbyListNearValueFilter(_ptr, pchKeyToMatch,
				nValueToBeCloseTo);
		}

		public virtual void ISteamMatchmaking_AddRequestLobbyListFilterSlotsAvailable(
			int nSlotsAvailable) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmaking _ptr is null!");
			Native.SteamAPI_ISteamMatchmaking_AddRequestLobbyListFilterSlotsAvailable(_ptr, nSlotsAvailable);
		}

		public virtual void ISteamMatchmaking_AddRequestLobbyListDistanceFilter(
			LobbyDistanceFilter eLobbyDistanceFilter) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmaking _ptr is null!");
			Native.SteamAPI_ISteamMatchmaking_AddRequestLobbyListDistanceFilter(_ptr, eLobbyDistanceFilter);
		}

		public virtual void ISteamMatchmaking_AddRequestLobbyListResultCountFilter(int cMaxResults) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmaking _ptr is null!");
			Native.SteamAPI_ISteamMatchmaking_AddRequestLobbyListResultCountFilter(_ptr, cMaxResults);
		}

		public virtual void ISteamMatchmaking_AddRequestLobbyListCompatibleMembersFilter(
			ulong steamIDLobby) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmaking _ptr is null!");
			Native.SteamAPI_ISteamMatchmaking_AddRequestLobbyListCompatibleMembersFilter(_ptr, steamIDLobby);
		}

		public virtual CSteamID ISteamMatchmaking_GetLobbyByIndex(int iLobby) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMatchmaking_GetLobbyByIndex(_ptr, iLobby)
				: throw new Exception("ISteamMatchmaking _ptr is null!");
		}

		public virtual SteamAPICall_t ISteamMatchmaking_CreateLobby(
			LobbyType eLobbyType,
			int cMaxMembers) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmaking _ptr is null!");
			return Native.SteamAPI_ISteamMatchmaking_CreateLobby(_ptr, eLobbyType, cMaxMembers);
		}

		public virtual SteamAPICall_t ISteamMatchmaking_JoinLobby(ulong steamIDLobby) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMatchmaking_JoinLobby(_ptr, steamIDLobby)
				: throw new Exception("ISteamMatchmaking _ptr is null!");
		}

		public virtual void ISteamMatchmaking_LeaveLobby(ulong steamIDLobby) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmaking _ptr is null!");
			Native.SteamAPI_ISteamMatchmaking_LeaveLobby(_ptr, steamIDLobby);
		}

		public virtual bool ISteamMatchmaking_InviteUserToLobby(
			ulong steamIDLobby,
			ulong steamIDInvitee) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmaking _ptr is null!");
			return Native.SteamAPI_ISteamMatchmaking_InviteUserToLobby(_ptr, steamIDLobby, steamIDInvitee);
		}

		public virtual int ISteamMatchmaking_GetNumLobbyMembers(ulong steamIDLobby) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMatchmaking_GetNumLobbyMembers(_ptr, steamIDLobby)
				: throw new Exception("ISteamMatchmaking _ptr is null!");
		}

		public virtual CSteamID ISteamMatchmaking_GetLobbyMemberByIndex(
			ulong steamIDLobby,
			int iMember) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmaking _ptr is null!");
			return Native.SteamAPI_ISteamMatchmaking_GetLobbyMemberByIndex(_ptr, steamIDLobby, iMember);
		}

		public virtual IntPtr ISteamMatchmaking_GetLobbyData(ulong steamIDLobby, string pchKey) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmaking _ptr is null!");
			return Native.SteamAPI_ISteamMatchmaking_GetLobbyData(_ptr, steamIDLobby, pchKey);
		}

		public virtual bool ISteamMatchmaking_SetLobbyData(
			ulong steamIDLobby,
			string pchKey,
			string pchValue) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmaking _ptr is null!");
			return Native.SteamAPI_ISteamMatchmaking_SetLobbyData(_ptr, steamIDLobby, pchKey, pchValue);
		}

		public virtual int ISteamMatchmaking_GetLobbyDataCount(ulong steamIDLobby) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMatchmaking_GetLobbyDataCount(_ptr, steamIDLobby)
				: throw new Exception("ISteamMatchmaking _ptr is null!");
		}

		public virtual bool ISteamMatchmaking_GetLobbyDataByIndex(
			ulong steamIDLobby,
			int iLobbyData,
			StringBuilder pchKey,
			int cchKeyBufferSize,
			StringBuilder pchValue,
			int cchValueBufferSize) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmaking _ptr is null!");
			return Native.SteamAPI_ISteamMatchmaking_GetLobbyDataByIndex(_ptr, steamIDLobby, iLobbyData, pchKey,
				cchKeyBufferSize, pchValue, cchValueBufferSize);
		}

		public virtual bool ISteamMatchmaking_DeleteLobbyData(ulong steamIDLobby, string pchKey) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmaking _ptr is null!");
			return Native.SteamAPI_ISteamMatchmaking_DeleteLobbyData(_ptr, steamIDLobby, pchKey);
		}

		public virtual IntPtr ISteamMatchmaking_GetLobbyMemberData(
			ulong steamIDLobby,
			ulong steamIDUser,
			string pchKey) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmaking _ptr is null!");
			return Native.SteamAPI_ISteamMatchmaking_GetLobbyMemberData(_ptr, steamIDLobby, steamIDUser, pchKey);
		}

		public virtual void ISteamMatchmaking_SetLobbyMemberData(
			ulong steamIDLobby,
			string pchKey,
			string pchValue) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmaking _ptr is null!");
			Native.SteamAPI_ISteamMatchmaking_SetLobbyMemberData(_ptr, steamIDLobby, pchKey, pchValue);
		}

		public virtual bool ISteamMatchmaking_SendLobbyChatMsg(
			ulong steamIDLobby,
			IntPtr pvMsgBody,
			int cubMsgBody) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmaking _ptr is null!");
			return Native.SteamAPI_ISteamMatchmaking_SendLobbyChatMsg(_ptr, steamIDLobby, pvMsgBody, cubMsgBody);
		}

		public virtual int ISteamMatchmaking_GetLobbyChatEntry(
			ulong steamIDLobby,
			int iChatID,
			out ulong pSteamIDUser,
			IntPtr pvData,
			int cubData,
			out ChatEntryType peChatEntryType) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmaking _ptr is null!");
			return Native.SteamAPI_ISteamMatchmaking_GetLobbyChatEntry(_ptr, steamIDLobby, iChatID, out pSteamIDUser,
				pvData, cubData, out peChatEntryType);
		}

		public virtual bool ISteamMatchmaking_RequestLobbyData(ulong steamIDLobby) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMatchmaking_RequestLobbyData(_ptr, steamIDLobby)
				: throw new Exception("ISteamMatchmaking _ptr is null!");
		}

		public virtual void ISteamMatchmaking_SetLobbyGameServer(
			ulong steamIDLobby,
			uint unGameServerIP,
			ushort unGameServerPort,
			ulong steamIDGameServer) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmaking _ptr is null!");
			Native.SteamAPI_ISteamMatchmaking_SetLobbyGameServer(_ptr, steamIDLobby, unGameServerIP, unGameServerPort,
				steamIDGameServer);
		}

		public virtual bool ISteamMatchmaking_GetLobbyGameServer(
			ulong steamIDLobby,
			out uint punGameServerIP,
			out ushort punGameServerPort,
			out ulong psteamIDGameServer) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMatchmaking_GetLobbyGameServer(_ptr, steamIDLobby, out punGameServerIP,
					out punGameServerPort, out psteamIDGameServer)
				: throw new Exception("ISteamMatchmaking _ptr is null!");
		}

		public virtual bool ISteamMatchmaking_SetLobbyMemberLimit(ulong steamIDLobby, int cMaxMembers) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmaking _ptr is null!");
			return Native.SteamAPI_ISteamMatchmaking_SetLobbyMemberLimit(_ptr, steamIDLobby, cMaxMembers);
		}

		public virtual int ISteamMatchmaking_GetLobbyMemberLimit(ulong steamIDLobby) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMatchmaking_GetLobbyMemberLimit(_ptr, steamIDLobby)
				: throw new Exception("ISteamMatchmaking _ptr is null!");
		}

		public virtual bool ISteamMatchmaking_SetLobbyType(ulong steamIDLobby, LobbyType eLobbyType) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmaking _ptr is null!");
			return Native.SteamAPI_ISteamMatchmaking_SetLobbyType(_ptr, steamIDLobby, eLobbyType);
		}

		public virtual bool ISteamMatchmaking_SetLobbyJoinable(
			ulong steamIDLobby,
			[MarshalAs(UnmanagedType.U1)] bool bLobbyJoinable) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmaking _ptr is null!");
			return Native.SteamAPI_ISteamMatchmaking_SetLobbyJoinable(_ptr, steamIDLobby, bLobbyJoinable);
		}

		public virtual CSteamID ISteamMatchmaking_GetLobbyOwner(ulong steamIDLobby) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMatchmaking_GetLobbyOwner(_ptr, steamIDLobby)
				: throw new Exception("ISteamMatchmaking _ptr is null!");
		}

		public virtual bool ISteamMatchmaking_SetLobbyOwner(ulong steamIDLobby, ulong steamIDNewOwner) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmaking _ptr is null!");
			return Native.SteamAPI_ISteamMatchmaking_SetLobbyOwner(_ptr, steamIDLobby, steamIDNewOwner);
		}

		public virtual bool ISteamMatchmaking_SetLinkedLobby(
			ulong steamIDLobby,
			ulong steamIDLobbyDependent) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmaking _ptr is null!");
			return Native.SteamAPI_ISteamMatchmaking_SetLinkedLobby(_ptr, steamIDLobby, steamIDLobbyDependent);
		}

		public virtual HServerListRequest ISteamMatchmakingServers_RequestInternetServerList(
			uint iApp,
			IntPtr ppchFilters,
			uint nFilters,
			IntPtr pRequestServersResponse) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmakingServers _ptr is null!");
			return Native.SteamAPI_ISteamMatchmakingServers_RequestInternetServerList(_ptr, iApp, ppchFilters, nFilters,
				pRequestServersResponse);
		}

		public virtual HServerListRequest ISteamMatchmakingServers_RequestLANServerList(
			uint iApp,
			IntPtr pRequestServersResponse) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmakingServers _ptr is null!");
			return Native.SteamAPI_ISteamMatchmakingServers_RequestLANServerList(_ptr, iApp, pRequestServersResponse);
		}

		public virtual HServerListRequest ISteamMatchmakingServers_RequestFriendsServerList(
			uint iApp,
			IntPtr ppchFilters,
			uint nFilters,
			IntPtr pRequestServersResponse) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmakingServers _ptr is null!");
			return Native.SteamAPI_ISteamMatchmakingServers_RequestFriendsServerList(_ptr, iApp, ppchFilters, nFilters,
				pRequestServersResponse);
		}

		public virtual HServerListRequest ISteamMatchmakingServers_RequestFavoritesServerList(
			uint iApp,
			IntPtr ppchFilters,
			uint nFilters,
			IntPtr pRequestServersResponse) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmakingServers _ptr is null!");
			return Native.SteamAPI_ISteamMatchmakingServers_RequestFavoritesServerList(_ptr, iApp, ppchFilters,
				nFilters, pRequestServersResponse);
		}

		public virtual HServerListRequest ISteamMatchmakingServers_RequestHistoryServerList(
			uint iApp,
			IntPtr ppchFilters,
			uint nFilters,
			IntPtr pRequestServersResponse) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmakingServers _ptr is null!");
			return Native.SteamAPI_ISteamMatchmakingServers_RequestHistoryServerList(_ptr, iApp, ppchFilters, nFilters,
				pRequestServersResponse);
		}

		public virtual HServerListRequest ISteamMatchmakingServers_RequestSpectatorServerList(
			uint iApp,
			IntPtr ppchFilters,
			uint nFilters,
			IntPtr pRequestServersResponse) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmakingServers _ptr is null!");
			return Native.SteamAPI_ISteamMatchmakingServers_RequestSpectatorServerList(_ptr, iApp, ppchFilters,
				nFilters, pRequestServersResponse);
		}

		public virtual void ISteamMatchmakingServers_ReleaseRequest(IntPtr hServerListRequest) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmakingServers _ptr is null!");
			Native.SteamAPI_ISteamMatchmakingServers_ReleaseRequest(_ptr, hServerListRequest);
		}

		public virtual IntPtr ISteamMatchmakingServers_GetServerDetails(IntPtr hRequest, int iServer) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmakingServers _ptr is null!");
			return Native.SteamAPI_ISteamMatchmakingServers_GetServerDetails(_ptr, hRequest, iServer);
		}

		public virtual void ISteamMatchmakingServers_CancelQuery(IntPtr hRequest) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmakingServers _ptr is null!");
			Native.SteamAPI_ISteamMatchmakingServers_CancelQuery(_ptr, hRequest);
		}

		public virtual void ISteamMatchmakingServers_RefreshQuery(IntPtr hRequest) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmakingServers _ptr is null!");
			Native.SteamAPI_ISteamMatchmakingServers_RefreshQuery(_ptr, hRequest);
		}

		public virtual bool ISteamMatchmakingServers_IsRefreshing(IntPtr hRequest) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMatchmakingServers_IsRefreshing(_ptr, hRequest)
				: throw new Exception("ISteamMatchmakingServers _ptr is null!");
		}

		public virtual int ISteamMatchmakingServers_GetServerCount(IntPtr hRequest) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMatchmakingServers_GetServerCount(_ptr, hRequest)
				: throw new Exception("ISteamMatchmakingServers _ptr is null!");
		}

		public virtual void ISteamMatchmakingServers_RefreshServer(IntPtr hRequest, int iServer) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmakingServers _ptr is null!");
			Native.SteamAPI_ISteamMatchmakingServers_RefreshServer(_ptr, hRequest, iServer);
		}

		public virtual HServerQuery ISteamMatchmakingServers_PingServer(
			uint unIP,
			ushort usPort,
			IntPtr pRequestServersResponse) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmakingServers _ptr is null!");
			return Native.SteamAPI_ISteamMatchmakingServers_PingServer(_ptr, unIP, usPort, pRequestServersResponse);
		}

		public virtual HServerQuery ISteamMatchmakingServers_PlayerDetails(
			uint unIP,
			ushort usPort,
			IntPtr pRequestServersResponse) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmakingServers _ptr is null!");
			return Native.SteamAPI_ISteamMatchmakingServers_PlayerDetails(_ptr, unIP, usPort, pRequestServersResponse);
		}

		public virtual HServerQuery ISteamMatchmakingServers_ServerRules(
			uint unIP,
			ushort usPort,
			IntPtr pRequestServersResponse) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmakingServers _ptr is null!");
			return Native.SteamAPI_ISteamMatchmakingServers_ServerRules(_ptr, unIP, usPort, pRequestServersResponse);
		}

		public virtual void ISteamMatchmakingServers_CancelServerQuery(int hServerQuery) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmakingServers _ptr is null!");
			Native.SteamAPI_ISteamMatchmakingServers_CancelServerQuery(_ptr, hServerQuery);
		}

		public virtual bool ISteamRemoteStorage_FileWrite(string pchFile, IntPtr pvData, int cubData) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamRemoteStorage _ptr is null!");
			return Native.SteamAPI_ISteamRemoteStorage_FileWrite(_ptr, pchFile, pvData, cubData);
		}

		public virtual int ISteamRemoteStorage_FileRead(
			string pchFile,
			IntPtr pvData,
			int cubDataToRead) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamRemoteStorage _ptr is null!");
			return Native.SteamAPI_ISteamRemoteStorage_FileRead(_ptr, pchFile, pvData, cubDataToRead);
		}

		public virtual SteamAPICall_t ISteamRemoteStorage_FileWriteAsync(
			string pchFile,
			IntPtr pvData,
			uint cubData) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamRemoteStorage _ptr is null!");
			return Native.SteamAPI_ISteamRemoteStorage_FileWriteAsync(_ptr, pchFile, pvData, cubData);
		}

		public virtual SteamAPICall_t ISteamRemoteStorage_FileReadAsync(
			string pchFile,
			uint nOffset,
			uint cubToRead) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamRemoteStorage _ptr is null!");
			return Native.SteamAPI_ISteamRemoteStorage_FileReadAsync(_ptr, pchFile, nOffset, cubToRead);
		}

		public virtual bool ISteamRemoteStorage_FileReadAsyncComplete(
			ulong hReadCall,
			IntPtr pvBuffer,
			uint cubToRead) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamRemoteStorage _ptr is null!");
			return Native.SteamAPI_ISteamRemoteStorage_FileReadAsyncComplete(_ptr, hReadCall, pvBuffer, cubToRead);
		}

		public virtual bool ISteamRemoteStorage_FileForget(string pchFile) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamRemoteStorage_FileForget(_ptr, pchFile)
				: throw new Exception("ISteamRemoteStorage _ptr is null!");
		}

		public virtual bool ISteamRemoteStorage_FileDelete(string pchFile) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamRemoteStorage_FileDelete(_ptr, pchFile)
				: throw new Exception("ISteamRemoteStorage _ptr is null!");
		}

		public virtual SteamAPICall_t ISteamRemoteStorage_FileShare(string pchFile) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamRemoteStorage_FileShare(_ptr, pchFile)
				: throw new Exception("ISteamRemoteStorage _ptr is null!");
		}

		public virtual bool ISteamRemoteStorage_SetSyncPlatforms(
			string pchFile,
			RemoteStoragePlatform eRemoteStoragePlatform) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamRemoteStorage _ptr is null!");
			return Native.SteamAPI_ISteamRemoteStorage_SetSyncPlatforms(_ptr, pchFile, eRemoteStoragePlatform);
		}

		public virtual UGCFileWriteStreamHandle_t ISteamRemoteStorage_FileWriteStreamOpen(
			string pchFile) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamRemoteStorage_FileWriteStreamOpen(_ptr, pchFile)
				: throw new Exception("ISteamRemoteStorage _ptr is null!");
		}

		public virtual bool ISteamRemoteStorage_FileWriteStreamWriteChunk(
			ulong writeHandle,
			IntPtr pvData,
			int cubData) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamRemoteStorage _ptr is null!");
			return Native.SteamAPI_ISteamRemoteStorage_FileWriteStreamWriteChunk(_ptr, writeHandle, pvData, cubData);
		}

		public virtual bool ISteamRemoteStorage_FileWriteStreamClose(ulong writeHandle) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamRemoteStorage_FileWriteStreamClose(_ptr, writeHandle)
				: throw new Exception("ISteamRemoteStorage _ptr is null!");
		}

		public virtual bool ISteamRemoteStorage_FileWriteStreamCancel(ulong writeHandle) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamRemoteStorage_FileWriteStreamCancel(_ptr, writeHandle)
				: throw new Exception("ISteamRemoteStorage _ptr is null!");
		}

		public virtual bool ISteamRemoteStorage_FileExists(string pchFile) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamRemoteStorage_FileExists(_ptr, pchFile)
				: throw new Exception("ISteamRemoteStorage _ptr is null!");
		}

		public virtual bool ISteamRemoteStorage_FilePersisted(string pchFile) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamRemoteStorage_FilePersisted(_ptr, pchFile)
				: throw new Exception("ISteamRemoteStorage _ptr is null!");
		}

		public virtual int ISteamRemoteStorage_GetFileSize(string pchFile) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamRemoteStorage_GetFileSize(_ptr, pchFile)
				: throw new Exception("ISteamRemoteStorage _ptr is null!");
		}

		public virtual long ISteamRemoteStorage_GetFileTimestamp(string pchFile) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamRemoteStorage_GetFileTimestamp(_ptr, pchFile)
				: throw new Exception("ISteamRemoteStorage _ptr is null!");
		}

		public virtual RemoteStoragePlatform ISteamRemoteStorage_GetSyncPlatforms(string pchFile) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamRemoteStorage_GetSyncPlatforms(_ptr, pchFile)
				: throw new Exception("ISteamRemoteStorage _ptr is null!");
		}

		public virtual int ISteamRemoteStorage_GetFileCount() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamRemoteStorage_GetFileCount(_ptr)
				: throw new Exception("ISteamRemoteStorage _ptr is null!");
		}

		public virtual IntPtr ISteamRemoteStorage_GetFileNameAndSize(
			int iFile,
			out int pnFileSizeInBytes) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamRemoteStorage_GetFileNameAndSize(_ptr, iFile, out pnFileSizeInBytes)
				: throw new Exception("ISteamRemoteStorage _ptr is null!");
		}

		public virtual bool ISteamRemoteStorage_GetQuota(
			out ulong pnTotalBytes,
			out ulong puAvailableBytes) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamRemoteStorage_GetQuota(_ptr, out pnTotalBytes, out puAvailableBytes)
				: throw new Exception("ISteamRemoteStorage _ptr is null!");
		}

		public virtual bool ISteamRemoteStorage_IsCloudEnabledForAccount() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamRemoteStorage_IsCloudEnabledForAccount(_ptr)
				: throw new Exception("ISteamRemoteStorage _ptr is null!");
		}

		public virtual bool ISteamRemoteStorage_IsCloudEnabledForApp() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamRemoteStorage_IsCloudEnabledForApp(_ptr)
				: throw new Exception("ISteamRemoteStorage _ptr is null!");
		}

		public virtual void ISteamRemoteStorage_SetCloudEnabledForApp([MarshalAs(UnmanagedType.U1)] bool bEnabled) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamRemoteStorage _ptr is null!");
			Native.SteamAPI_ISteamRemoteStorage_SetCloudEnabledForApp(_ptr, bEnabled);
		}

		public virtual SteamAPICall_t ISteamRemoteStorage_UGCDownload(ulong hContent, uint unPriority) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamRemoteStorage _ptr is null!");
			return Native.SteamAPI_ISteamRemoteStorage_UGCDownload(_ptr, hContent, unPriority);
		}

		public virtual bool ISteamRemoteStorage_GetUGCDownloadProgress(
			ulong hContent,
			out int pnBytesDownloaded,
			out int pnBytesExpected) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamRemoteStorage_GetUGCDownloadProgress(_ptr, hContent, out pnBytesDownloaded,
					out pnBytesExpected)
				: throw new Exception("ISteamRemoteStorage _ptr is null!");
		}

		public virtual bool ISteamRemoteStorage_GetUGCDetails(
			ulong hContent,
			ref uint pnAppID,
			StringBuilder ppchName,
			out int pnFileSizeInBytes,
			out ulong pSteamIDOwner) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamRemoteStorage _ptr is null!");
			return Native.SteamAPI_ISteamRemoteStorage_GetUGCDetails(_ptr, hContent, ref pnAppID, ppchName,
				out pnFileSizeInBytes, out pSteamIDOwner);
		}

		public virtual int ISteamRemoteStorage_UGCRead(
			ulong hContent,
			IntPtr pvData,
			int cubDataToRead,
			uint cOffset,
			UGCReadAction eAction) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamRemoteStorage _ptr is null!");
			return Native.SteamAPI_ISteamRemoteStorage_UGCRead(_ptr, hContent, pvData, cubDataToRead, cOffset, eAction);
		}

		public virtual int ISteamRemoteStorage_GetCachedUGCCount() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamRemoteStorage_GetCachedUGCCount(_ptr)
				: throw new Exception("ISteamRemoteStorage _ptr is null!");
		}

		public virtual UGCHandle_t ISteamRemoteStorage_GetCachedUGCHandle(int iCachedContent) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamRemoteStorage_GetCachedUGCHandle(_ptr, iCachedContent)
				: throw new Exception("ISteamRemoteStorage _ptr is null!");
		}

		public virtual SteamAPICall_t ISteamRemoteStorage_PublishWorkshopFile(
			string pchFile,
			string pchPreviewFile,
			uint nConsumerAppId,
			string pchTitle,
			string pchDescription,
			RemoteStoragePublishedFileVisibility eVisibility,
			ref SteamParamStringArray_t pTags,
			WorkshopFileType eWorkshopFileType) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamRemoteStorage _ptr is null!");
			var pTags1 = new SteamParamStringArray_t.PackSmall();
			var steamApiCallT = Native.SteamAPI_ISteamRemoteStorage_PublishWorkshopFile(_ptr, pchFile, pchPreviewFile,
				nConsumerAppId, pchTitle, pchDescription, eVisibility, ref pTags1, eWorkshopFileType);
			pTags = (SteamParamStringArray_t)pTags1;
			return steamApiCallT;
		}

		public virtual PublishedFileUpdateHandle_t ISteamRemoteStorage_CreatePublishedFileUpdateRequest(
			ulong unPublishedFileId) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamRemoteStorage_CreatePublishedFileUpdateRequest(_ptr, unPublishedFileId)
				: throw new Exception("ISteamRemoteStorage _ptr is null!");
		}

		public virtual bool ISteamRemoteStorage_UpdatePublishedFileFile(
			ulong updateHandle,
			string pchFile) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamRemoteStorage _ptr is null!");
			return Native.SteamAPI_ISteamRemoteStorage_UpdatePublishedFileFile(_ptr, updateHandle, pchFile);
		}

		public virtual bool ISteamRemoteStorage_UpdatePublishedFilePreviewFile(
			ulong updateHandle,
			string pchPreviewFile) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamRemoteStorage _ptr is null!");
			return Native.SteamAPI_ISteamRemoteStorage_UpdatePublishedFilePreviewFile(_ptr, updateHandle,
				pchPreviewFile);
		}

		public virtual bool ISteamRemoteStorage_UpdatePublishedFileTitle(
			ulong updateHandle,
			string pchTitle) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamRemoteStorage _ptr is null!");
			return Native.SteamAPI_ISteamRemoteStorage_UpdatePublishedFileTitle(_ptr, updateHandle, pchTitle);
		}

		public virtual bool ISteamRemoteStorage_UpdatePublishedFileDescription(
			ulong updateHandle,
			string pchDescription) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamRemoteStorage _ptr is null!");
			return Native.SteamAPI_ISteamRemoteStorage_UpdatePublishedFileDescription(_ptr, updateHandle,
				pchDescription);
		}

		public virtual bool ISteamRemoteStorage_UpdatePublishedFileVisibility(
			ulong updateHandle,
			RemoteStoragePublishedFileVisibility eVisibility) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamRemoteStorage _ptr is null!");
			return Native.SteamAPI_ISteamRemoteStorage_UpdatePublishedFileVisibility(_ptr, updateHandle, eVisibility);
		}

		public virtual bool ISteamRemoteStorage_UpdatePublishedFileTags(
			ulong updateHandle,
			ref SteamParamStringArray_t pTags) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamRemoteStorage _ptr is null!");
			var pTags1 = new SteamParamStringArray_t.PackSmall();
			var flag = Native.SteamAPI_ISteamRemoteStorage_UpdatePublishedFileTags(_ptr, updateHandle, ref pTags1);
			pTags = (SteamParamStringArray_t)pTags1;
			return flag;
		}

		public virtual SteamAPICall_t ISteamRemoteStorage_CommitPublishedFileUpdate(ulong updateHandle) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamRemoteStorage_CommitPublishedFileUpdate(_ptr, updateHandle)
				: throw new Exception("ISteamRemoteStorage _ptr is null!");
		}

		public virtual SteamAPICall_t ISteamRemoteStorage_GetPublishedFileDetails(
			ulong unPublishedFileId,
			uint unMaxSecondsOld) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamRemoteStorage _ptr is null!");
			return Native.SteamAPI_ISteamRemoteStorage_GetPublishedFileDetails(_ptr, unPublishedFileId,
				unMaxSecondsOld);
		}

		public virtual SteamAPICall_t ISteamRemoteStorage_DeletePublishedFile(ulong unPublishedFileId) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamRemoteStorage_DeletePublishedFile(_ptr, unPublishedFileId)
				: throw new Exception("ISteamRemoteStorage _ptr is null!");
		}

		public virtual SteamAPICall_t ISteamRemoteStorage_EnumerateUserPublishedFiles(
			uint unStartIndex) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamRemoteStorage_EnumerateUserPublishedFiles(_ptr, unStartIndex)
				: throw new Exception("ISteamRemoteStorage _ptr is null!");
		}

		public virtual SteamAPICall_t ISteamRemoteStorage_SubscribePublishedFile(
			ulong unPublishedFileId) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamRemoteStorage_SubscribePublishedFile(_ptr, unPublishedFileId)
				: throw new Exception("ISteamRemoteStorage _ptr is null!");
		}

		public virtual SteamAPICall_t ISteamRemoteStorage_EnumerateUserSubscribedFiles(
			uint unStartIndex) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamRemoteStorage_EnumerateUserSubscribedFiles(_ptr, unStartIndex)
				: throw new Exception("ISteamRemoteStorage _ptr is null!");
		}

		public virtual SteamAPICall_t ISteamRemoteStorage_UnsubscribePublishedFile(
			ulong unPublishedFileId) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamRemoteStorage_UnsubscribePublishedFile(_ptr, unPublishedFileId)
				: throw new Exception("ISteamRemoteStorage _ptr is null!");
		}

		public virtual bool ISteamRemoteStorage_UpdatePublishedFileSetChangeDescription(
			ulong updateHandle,
			string pchChangeDescription) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamRemoteStorage _ptr is null!");
			return Native.SteamAPI_ISteamRemoteStorage_UpdatePublishedFileSetChangeDescription(_ptr, updateHandle,
				pchChangeDescription);
		}

		public virtual SteamAPICall_t ISteamRemoteStorage_GetPublishedItemVoteDetails(
			ulong unPublishedFileId) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamRemoteStorage_GetPublishedItemVoteDetails(_ptr, unPublishedFileId)
				: throw new Exception("ISteamRemoteStorage _ptr is null!");
		}

		public virtual SteamAPICall_t ISteamRemoteStorage_UpdateUserPublishedItemVote(
			ulong unPublishedFileId,
			[MarshalAs(UnmanagedType.U1)] bool bVoteUp) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamRemoteStorage _ptr is null!");
			return Native.SteamAPI_ISteamRemoteStorage_UpdateUserPublishedItemVote(_ptr, unPublishedFileId, bVoteUp);
		}

		public virtual SteamAPICall_t ISteamRemoteStorage_GetUserPublishedItemVoteDetails(
			ulong unPublishedFileId) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamRemoteStorage_GetUserPublishedItemVoteDetails(_ptr, unPublishedFileId)
				: throw new Exception("ISteamRemoteStorage _ptr is null!");
		}

		public virtual SteamAPICall_t ISteamRemoteStorage_EnumerateUserSharedWorkshopFiles(
			ulong steamId,
			uint unStartIndex,
			ref SteamParamStringArray_t pRequiredTags,
			ref SteamParamStringArray_t pExcludedTags) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamRemoteStorage _ptr is null!");
			var pRequiredTags1 = new SteamParamStringArray_t.PackSmall();
			var pExcludedTags1 = new SteamParamStringArray_t.PackSmall();
			var steamApiCallT = Native.SteamAPI_ISteamRemoteStorage_EnumerateUserSharedWorkshopFiles(_ptr, steamId,
				unStartIndex, ref pRequiredTags1, ref pExcludedTags1);
			pRequiredTags = (SteamParamStringArray_t)pRequiredTags1;
			pExcludedTags = (SteamParamStringArray_t)pExcludedTags1;
			return steamApiCallT;
		}

		public virtual SteamAPICall_t ISteamRemoteStorage_PublishVideo(
			WorkshopVideoProvider eVideoProvider,
			string pchVideoAccount,
			string pchVideoIdentifier,
			string pchPreviewFile,
			uint nConsumerAppId,
			string pchTitle,
			string pchDescription,
			RemoteStoragePublishedFileVisibility eVisibility,
			ref SteamParamStringArray_t pTags) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamRemoteStorage _ptr is null!");
			var pTags1 = new SteamParamStringArray_t.PackSmall();
			var steamApiCallT = Native.SteamAPI_ISteamRemoteStorage_PublishVideo(_ptr, eVideoProvider, pchVideoAccount,
				pchVideoIdentifier, pchPreviewFile, nConsumerAppId, pchTitle, pchDescription, eVisibility, ref pTags1);
			pTags = (SteamParamStringArray_t)pTags1;
			return steamApiCallT;
		}

		public virtual SteamAPICall_t ISteamRemoteStorage_SetUserPublishedFileAction(
			ulong unPublishedFileId,
			WorkshopFileAction eAction) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamRemoteStorage _ptr is null!");
			return Native.SteamAPI_ISteamRemoteStorage_SetUserPublishedFileAction(_ptr, unPublishedFileId, eAction);
		}

		public virtual SteamAPICall_t ISteamRemoteStorage_EnumeratePublishedFilesByUserAction(
			WorkshopFileAction eAction,
			uint unStartIndex) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamRemoteStorage _ptr is null!");
			return Native.SteamAPI_ISteamRemoteStorage_EnumeratePublishedFilesByUserAction(_ptr, eAction, unStartIndex);
		}

		public virtual SteamAPICall_t ISteamRemoteStorage_EnumeratePublishedWorkshopFiles(
			WorkshopEnumerationType eEnumerationType,
			uint unStartIndex,
			uint unCount,
			uint unDays,
			ref SteamParamStringArray_t pTags,
			ref SteamParamStringArray_t pUserTags) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamRemoteStorage _ptr is null!");
			var pTags1 = new SteamParamStringArray_t.PackSmall();
			var pUserTags1 = new SteamParamStringArray_t.PackSmall();
			var steamApiCallT = Native.SteamAPI_ISteamRemoteStorage_EnumeratePublishedWorkshopFiles(_ptr,
				eEnumerationType, unStartIndex, unCount, unDays, ref pTags1, ref pUserTags1);
			pTags = (SteamParamStringArray_t)pTags1;
			pUserTags = (SteamParamStringArray_t)pUserTags1;
			return steamApiCallT;
		}

		public virtual SteamAPICall_t ISteamRemoteStorage_UGCDownloadToLocation(
			ulong hContent,
			string pchLocation,
			uint unPriority) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamRemoteStorage _ptr is null!");
			return Native.SteamAPI_ISteamRemoteStorage_UGCDownloadToLocation(_ptr, hContent, pchLocation, unPriority);
		}

		public virtual bool ISteamUserStats_RequestCurrentStats() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUserStats_RequestCurrentStats(_ptr)
				: throw new Exception("ISteamUserStats _ptr is null!");
		}

		public virtual bool ISteamUserStats_GetStat(string pchName, out int pData) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUserStats_GetStat(_ptr, pchName, out pData)
				: throw new Exception("ISteamUserStats _ptr is null!");
		}

		public virtual bool ISteamUserStats_GetStat0(string pchName, out float pData) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUserStats_GetStat0(_ptr, pchName, out pData)
				: throw new Exception("ISteamUserStats _ptr is null!");
		}

		public virtual bool ISteamUserStats_SetStat(string pchName, int nData) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUserStats _ptr is null!");
			return Native.SteamAPI_ISteamUserStats_SetStat(_ptr, pchName, nData);
		}

		public virtual bool ISteamUserStats_SetStat0(string pchName, float fData) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUserStats _ptr is null!");
			return Native.SteamAPI_ISteamUserStats_SetStat0(_ptr, pchName, fData);
		}

		public virtual bool ISteamUserStats_UpdateAvgRateStat(
			string pchName,
			float flCountThisSession,
			double dSessionLength) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUserStats _ptr is null!");
			return Native.SteamAPI_ISteamUserStats_UpdateAvgRateStat(_ptr, pchName, flCountThisSession, dSessionLength);
		}

		public virtual bool ISteamUserStats_GetAchievement(string pchName,
			[MarshalAs(UnmanagedType.U1)] ref bool pbAchieved) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUserStats _ptr is null!");
			return Native.SteamAPI_ISteamUserStats_GetAchievement(_ptr, pchName, ref pbAchieved);
		}

		public virtual bool ISteamUserStats_SetAchievement(string pchName) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUserStats_SetAchievement(_ptr, pchName)
				: throw new Exception("ISteamUserStats _ptr is null!");
		}

		public virtual bool ISteamUserStats_ClearAchievement(string pchName) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUserStats_ClearAchievement(_ptr, pchName)
				: throw new Exception("ISteamUserStats _ptr is null!");
		}

		public virtual bool ISteamUserStats_GetAchievementAndUnlockTime(
			string pchName,
			[MarshalAs(UnmanagedType.U1)] ref bool pbAchieved,
			out uint punUnlockTime) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUserStats _ptr is null!");
			return Native.SteamAPI_ISteamUserStats_GetAchievementAndUnlockTime(_ptr, pchName, ref pbAchieved,
				out punUnlockTime);
		}

		public virtual bool ISteamUserStats_StoreStats() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUserStats_StoreStats(_ptr)
				: throw new Exception("ISteamUserStats _ptr is null!");
		}

		public virtual int ISteamUserStats_GetAchievementIcon(string pchName) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUserStats_GetAchievementIcon(_ptr, pchName)
				: throw new Exception("ISteamUserStats _ptr is null!");
		}

		public virtual IntPtr ISteamUserStats_GetAchievementDisplayAttribute(
			string pchName,
			string pchKey) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUserStats _ptr is null!");
			return Native.SteamAPI_ISteamUserStats_GetAchievementDisplayAttribute(_ptr, pchName, pchKey);
		}

		public virtual bool ISteamUserStats_IndicateAchievementProgress(
			string pchName,
			uint nCurProgress,
			uint nMaxProgress) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUserStats _ptr is null!");
			return Native.SteamAPI_ISteamUserStats_IndicateAchievementProgress(_ptr, pchName, nCurProgress,
				nMaxProgress);
		}

		public virtual uint ISteamUserStats_GetNumAchievements() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUserStats_GetNumAchievements(_ptr)
				: throw new Exception("ISteamUserStats _ptr is null!");
		}

		public virtual IntPtr ISteamUserStats_GetAchievementName(uint iAchievement) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUserStats_GetAchievementName(_ptr, iAchievement)
				: throw new Exception("ISteamUserStats _ptr is null!");
		}

		public virtual SteamAPICall_t ISteamUserStats_RequestUserStats(ulong steamIDUser) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUserStats_RequestUserStats(_ptr, steamIDUser)
				: throw new Exception("ISteamUserStats _ptr is null!");
		}

		public virtual bool ISteamUserStats_GetUserStat(
			ulong steamIDUser,
			string pchName,
			out int pData) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUserStats _ptr is null!");
			return Native.SteamAPI_ISteamUserStats_GetUserStat(_ptr, steamIDUser, pchName, out pData);
		}

		public virtual bool ISteamUserStats_GetUserStat0(
			ulong steamIDUser,
			string pchName,
			out float pData) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUserStats _ptr is null!");
			return Native.SteamAPI_ISteamUserStats_GetUserStat0(_ptr, steamIDUser, pchName, out pData);
		}

		public virtual bool ISteamUserStats_GetUserAchievement(
			ulong steamIDUser,
			string pchName,
			[MarshalAs(UnmanagedType.U1)] ref bool pbAchieved) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUserStats _ptr is null!");
			return Native.SteamAPI_ISteamUserStats_GetUserAchievement(_ptr, steamIDUser, pchName, ref pbAchieved);
		}

		public virtual bool ISteamUserStats_GetUserAchievementAndUnlockTime(
			ulong steamIDUser,
			string pchName,
			[MarshalAs(UnmanagedType.U1)] ref bool pbAchieved,
			out uint punUnlockTime) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUserStats _ptr is null!");
			return Native.SteamAPI_ISteamUserStats_GetUserAchievementAndUnlockTime(_ptr, steamIDUser, pchName,
				ref pbAchieved, out punUnlockTime);
		}

		public virtual bool ISteamUserStats_ResetAllStats([MarshalAs(UnmanagedType.U1)] bool bAchievementsToo) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUserStats_ResetAllStats(_ptr, bAchievementsToo)
				: throw new Exception("ISteamUserStats _ptr is null!");
		}

		public virtual SteamAPICall_t ISteamUserStats_FindOrCreateLeaderboard(
			string pchLeaderboardName,
			LeaderboardSortMethod eLeaderboardSortMethod,
			LeaderboardDisplayType eLeaderboardDisplayType) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUserStats _ptr is null!");
			return Native.SteamAPI_ISteamUserStats_FindOrCreateLeaderboard(_ptr, pchLeaderboardName,
				eLeaderboardSortMethod, eLeaderboardDisplayType);
		}

		public virtual SteamAPICall_t ISteamUserStats_FindLeaderboard(string pchLeaderboardName) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUserStats_FindLeaderboard(_ptr, pchLeaderboardName)
				: throw new Exception("ISteamUserStats _ptr is null!");
		}

		public virtual IntPtr ISteamUserStats_GetLeaderboardName(ulong hSteamLeaderboard) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUserStats_GetLeaderboardName(_ptr, hSteamLeaderboard)
				: throw new Exception("ISteamUserStats _ptr is null!");
		}

		public virtual int ISteamUserStats_GetLeaderboardEntryCount(ulong hSteamLeaderboard) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUserStats_GetLeaderboardEntryCount(_ptr, hSteamLeaderboard)
				: throw new Exception("ISteamUserStats _ptr is null!");
		}

		public virtual LeaderboardSortMethod ISteamUserStats_GetLeaderboardSortMethod(
			ulong hSteamLeaderboard) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUserStats_GetLeaderboardSortMethod(_ptr, hSteamLeaderboard)
				: throw new Exception("ISteamUserStats _ptr is null!");
		}

		public virtual LeaderboardDisplayType ISteamUserStats_GetLeaderboardDisplayType(
			ulong hSteamLeaderboard) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUserStats_GetLeaderboardDisplayType(_ptr, hSteamLeaderboard)
				: throw new Exception("ISteamUserStats _ptr is null!");
		}

		public virtual SteamAPICall_t ISteamUserStats_DownloadLeaderboardEntries(
			ulong hSteamLeaderboard,
			LeaderboardDataRequest eLeaderboardDataRequest,
			int nRangeStart,
			int nRangeEnd) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUserStats _ptr is null!");
			return Native.SteamAPI_ISteamUserStats_DownloadLeaderboardEntries(_ptr, hSteamLeaderboard,
				eLeaderboardDataRequest, nRangeStart, nRangeEnd);
		}

		public virtual SteamAPICall_t ISteamUserStats_DownloadLeaderboardEntriesForUsers(
			ulong hSteamLeaderboard,
			IntPtr prgUsers,
			int cUsers) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUserStats _ptr is null!");
			return Native.SteamAPI_ISteamUserStats_DownloadLeaderboardEntriesForUsers(_ptr, hSteamLeaderboard, prgUsers,
				cUsers);
		}

		public virtual bool ISteamUserStats_GetDownloadedLeaderboardEntry(
			ulong hSteamLeaderboardEntries,
			int index,
			ref LeaderboardEntry_t pLeaderboardEntry,
			IntPtr pDetails,
			int cDetailsMax) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUserStats _ptr is null!");
			var pLeaderboardEntry1 = new LeaderboardEntry_t.PackSmall();
			var leaderboardEntry = Native.SteamAPI_ISteamUserStats_GetDownloadedLeaderboardEntry(_ptr,
				hSteamLeaderboardEntries, index, ref pLeaderboardEntry1, pDetails, cDetailsMax);
			pLeaderboardEntry = (LeaderboardEntry_t)pLeaderboardEntry1;
			return leaderboardEntry;
		}

		public virtual SteamAPICall_t ISteamUserStats_UploadLeaderboardScore(
			ulong hSteamLeaderboard,
			LeaderboardUploadScoreMethod eLeaderboardUploadScoreMethod,
			int nScore,
			int[] pScoreDetails,
			int cScoreDetailsCount) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUserStats _ptr is null!");
			return Native.SteamAPI_ISteamUserStats_UploadLeaderboardScore(_ptr, hSteamLeaderboard,
				eLeaderboardUploadScoreMethod, nScore, pScoreDetails, cScoreDetailsCount);
		}

		public virtual SteamAPICall_t ISteamUserStats_AttachLeaderboardUGC(
			ulong hSteamLeaderboard,
			ulong hUGC) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUserStats _ptr is null!");
			return Native.SteamAPI_ISteamUserStats_AttachLeaderboardUGC(_ptr, hSteamLeaderboard, hUGC);
		}

		public virtual SteamAPICall_t ISteamUserStats_GetNumberOfCurrentPlayers() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUserStats_GetNumberOfCurrentPlayers(_ptr)
				: throw new Exception("ISteamUserStats _ptr is null!");
		}

		public virtual SteamAPICall_t ISteamUserStats_RequestGlobalAchievementPercentages() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUserStats_RequestGlobalAchievementPercentages(_ptr)
				: throw new Exception("ISteamUserStats _ptr is null!");
		}

		public virtual int ISteamUserStats_GetMostAchievedAchievementInfo(
			StringBuilder pchName,
			uint unNameBufLen,
			out float pflPercent,
			[MarshalAs(UnmanagedType.U1)] ref bool pbAchieved) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUserStats _ptr is null!");
			return Native.SteamAPI_ISteamUserStats_GetMostAchievedAchievementInfo(_ptr, pchName, unNameBufLen,
				out pflPercent, ref pbAchieved);
		}

		public virtual int ISteamUserStats_GetNextMostAchievedAchievementInfo(
			int iIteratorPrevious,
			StringBuilder pchName,
			uint unNameBufLen,
			out float pflPercent,
			[MarshalAs(UnmanagedType.U1)] ref bool pbAchieved) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUserStats _ptr is null!");
			return Native.SteamAPI_ISteamUserStats_GetNextMostAchievedAchievementInfo(_ptr, iIteratorPrevious, pchName,
				unNameBufLen, out pflPercent, ref pbAchieved);
		}

		public virtual bool ISteamUserStats_GetAchievementAchievedPercent(
			string pchName,
			out float pflPercent) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUserStats_GetAchievementAchievedPercent(_ptr, pchName, out pflPercent)
				: throw new Exception("ISteamUserStats _ptr is null!");
		}

		public virtual SteamAPICall_t ISteamUserStats_RequestGlobalStats(int nHistoryDays) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUserStats_RequestGlobalStats(_ptr, nHistoryDays)
				: throw new Exception("ISteamUserStats _ptr is null!");
		}

		public virtual bool ISteamUserStats_GetGlobalStat(string pchStatName, out long pData) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUserStats_GetGlobalStat(_ptr, pchStatName, out pData)
				: throw new Exception("ISteamUserStats _ptr is null!");
		}

		public virtual bool ISteamUserStats_GetGlobalStat0(string pchStatName, out double pData) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUserStats_GetGlobalStat0(_ptr, pchStatName, out pData)
				: throw new Exception("ISteamUserStats _ptr is null!");
		}

		public virtual int ISteamUserStats_GetGlobalStatHistory(
			string pchStatName,
			out long pData,
			uint cubData) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUserStats _ptr is null!");
			return Native.SteamAPI_ISteamUserStats_GetGlobalStatHistory(_ptr, pchStatName, out pData, cubData);
		}

		public virtual int ISteamUserStats_GetGlobalStatHistory0(
			string pchStatName,
			out double pData,
			uint cubData) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUserStats _ptr is null!");
			return Native.SteamAPI_ISteamUserStats_GetGlobalStatHistory0(_ptr, pchStatName, out pData, cubData);
		}

		public virtual bool ISteamApps_BIsSubscribed() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamApps_BIsSubscribed(_ptr)
				: throw new Exception("ISteamApps _ptr is null!");
		}

		public virtual bool ISteamApps_BIsLowViolence() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamApps_BIsLowViolence(_ptr)
				: throw new Exception("ISteamApps _ptr is null!");
		}

		public virtual bool ISteamApps_BIsCybercafe() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamApps_BIsCybercafe(_ptr)
				: throw new Exception("ISteamApps _ptr is null!");
		}

		public virtual bool ISteamApps_BIsVACBanned() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamApps_BIsVACBanned(_ptr)
				: throw new Exception("ISteamApps _ptr is null!");
		}

		public virtual IntPtr ISteamApps_GetCurrentGameLanguage() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamApps_GetCurrentGameLanguage(_ptr)
				: throw new Exception("ISteamApps _ptr is null!");
		}

		public virtual IntPtr ISteamApps_GetAvailableGameLanguages() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamApps_GetAvailableGameLanguages(_ptr)
				: throw new Exception("ISteamApps _ptr is null!");
		}

		public virtual bool ISteamApps_BIsSubscribedApp(uint appID) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamApps_BIsSubscribedApp(_ptr, appID)
				: throw new Exception("ISteamApps _ptr is null!");
		}

		public virtual bool ISteamApps_BIsDlcInstalled(uint appID) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamApps_BIsDlcInstalled(_ptr, appID)
				: throw new Exception("ISteamApps _ptr is null!");
		}

		public virtual uint ISteamApps_GetEarliestPurchaseUnixTime(uint nAppID) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamApps_GetEarliestPurchaseUnixTime(_ptr, nAppID)
				: throw new Exception("ISteamApps _ptr is null!");
		}

		public virtual bool ISteamApps_BIsSubscribedFromFreeWeekend() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamApps_BIsSubscribedFromFreeWeekend(_ptr)
				: throw new Exception("ISteamApps _ptr is null!");
		}

		public virtual int ISteamApps_GetDLCCount() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamApps_GetDLCCount(_ptr)
				: throw new Exception("ISteamApps _ptr is null!");
		}

		public virtual bool ISteamApps_BGetDLCDataByIndex(
			int iDLC,
			ref uint pAppID,
			[MarshalAs(UnmanagedType.U1)] ref bool pbAvailable,
			StringBuilder pchName,
			int cchNameBufferSize) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamApps _ptr is null!");
			return Native.SteamAPI_ISteamApps_BGetDLCDataByIndex(_ptr, iDLC, ref pAppID, ref pbAvailable, pchName,
				cchNameBufferSize);
		}

		public virtual void ISteamApps_InstallDLC(uint nAppID) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamApps _ptr is null!");
			Native.SteamAPI_ISteamApps_InstallDLC(_ptr, nAppID);
		}

		public virtual void ISteamApps_UninstallDLC(uint nAppID) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamApps _ptr is null!");
			Native.SteamAPI_ISteamApps_UninstallDLC(_ptr, nAppID);
		}

		public virtual void ISteamApps_RequestAppProofOfPurchaseKey(uint nAppID) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamApps _ptr is null!");
			Native.SteamAPI_ISteamApps_RequestAppProofOfPurchaseKey(_ptr, nAppID);
		}

		public virtual bool ISteamApps_GetCurrentBetaName(
			StringBuilder pchName,
			int cchNameBufferSize) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamApps _ptr is null!");
			return Native.SteamAPI_ISteamApps_GetCurrentBetaName(_ptr, pchName, cchNameBufferSize);
		}

		public virtual bool ISteamApps_MarkContentCorrupt([MarshalAs(UnmanagedType.U1)] bool bMissingFilesOnly) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamApps_MarkContentCorrupt(_ptr, bMissingFilesOnly)
				: throw new Exception("ISteamApps _ptr is null!");
		}

		public virtual uint ISteamApps_GetInstalledDepots(
			uint appID,
			IntPtr pvecDepots,
			uint cMaxDepots) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamApps _ptr is null!");
			return Native.SteamAPI_ISteamApps_GetInstalledDepots(_ptr, appID, pvecDepots, cMaxDepots);
		}

		public virtual uint ISteamApps_GetAppInstallDir(
			uint appID,
			StringBuilder pchFolder,
			uint cchFolderBufferSize) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamApps _ptr is null!");
			return Native.SteamAPI_ISteamApps_GetAppInstallDir(_ptr, appID, pchFolder, cchFolderBufferSize);
		}

		public virtual bool ISteamApps_BIsAppInstalled(uint appID) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamApps_BIsAppInstalled(_ptr, appID)
				: throw new Exception("ISteamApps _ptr is null!");
		}

		public virtual CSteamID ISteamApps_GetAppOwner() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamApps_GetAppOwner(_ptr)
				: throw new Exception("ISteamApps _ptr is null!");
		}

		public virtual IntPtr ISteamApps_GetLaunchQueryParam(string pchKey) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamApps_GetLaunchQueryParam(_ptr, pchKey)
				: throw new Exception("ISteamApps _ptr is null!");
		}

		public virtual bool ISteamApps_GetDlcDownloadProgress(
			uint nAppID,
			out ulong punBytesDownloaded,
			out ulong punBytesTotal) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamApps_GetDlcDownloadProgress(_ptr, nAppID, out punBytesDownloaded,
					out punBytesTotal)
				: throw new Exception("ISteamApps _ptr is null!");
		}

		public virtual int ISteamApps_GetAppBuildId() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamApps_GetAppBuildId(_ptr)
				: throw new Exception("ISteamApps _ptr is null!");
		}

		public virtual void ISteamApps_RequestAllProofOfPurchaseKeys() {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamApps _ptr is null!");
			Native.SteamAPI_ISteamApps_RequestAllProofOfPurchaseKeys(_ptr);
		}

		public virtual SteamAPICall_t ISteamApps_GetFileDetails(string pszFileName) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamApps_GetFileDetails(_ptr, pszFileName)
				: throw new Exception("ISteamApps _ptr is null!");
		}

		public virtual bool ISteamNetworking_SendP2PPacket(
			ulong steamIDRemote,
			IntPtr pubData,
			uint cubData,
			P2PSend eP2PSendType,
			int nChannel) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamNetworking _ptr is null!");
			return Native.SteamAPI_ISteamNetworking_SendP2PPacket(_ptr, steamIDRemote, pubData, cubData, eP2PSendType,
				nChannel);
		}

		public virtual bool ISteamNetworking_IsP2PPacketAvailable(out uint pcubMsgSize, int nChannel) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamNetworking_IsP2PPacketAvailable(_ptr, out pcubMsgSize, nChannel)
				: throw new Exception("ISteamNetworking _ptr is null!");
		}

		public virtual bool ISteamNetworking_ReadP2PPacket(
			IntPtr pubDest,
			uint cubDest,
			out uint pcubMsgSize,
			out ulong psteamIDRemote,
			int nChannel) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamNetworking _ptr is null!");
			return Native.SteamAPI_ISteamNetworking_ReadP2PPacket(_ptr, pubDest, cubDest, out pcubMsgSize,
				out psteamIDRemote, nChannel);
		}

		public virtual bool ISteamNetworking_AcceptP2PSessionWithUser(ulong steamIDRemote) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamNetworking_AcceptP2PSessionWithUser(_ptr, steamIDRemote)
				: throw new Exception("ISteamNetworking _ptr is null!");
		}

		public virtual bool ISteamNetworking_CloseP2PSessionWithUser(ulong steamIDRemote) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamNetworking_CloseP2PSessionWithUser(_ptr, steamIDRemote)
				: throw new Exception("ISteamNetworking _ptr is null!");
		}

		public virtual bool ISteamNetworking_CloseP2PChannelWithUser(
			ulong steamIDRemote,
			int nChannel) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamNetworking _ptr is null!");
			return Native.SteamAPI_ISteamNetworking_CloseP2PChannelWithUser(_ptr, steamIDRemote, nChannel);
		}

		public virtual bool ISteamNetworking_GetP2PSessionState(
			ulong steamIDRemote,
			ref P2PSessionState_t pConnectionState) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamNetworking _ptr is null!");
			var pConnectionState1 = new P2PSessionState_t.PackSmall();
			var p2PsessionState =
				Native.SteamAPI_ISteamNetworking_GetP2PSessionState(_ptr, steamIDRemote, ref pConnectionState1);
			pConnectionState = (P2PSessionState_t)pConnectionState1;
			return p2PsessionState;
		}

		public virtual bool ISteamNetworking_AllowP2PPacketRelay([MarshalAs(UnmanagedType.U1)] bool bAllow) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamNetworking_AllowP2PPacketRelay(_ptr, bAllow)
				: throw new Exception("ISteamNetworking _ptr is null!");
		}

		public virtual SNetListenSocket_t ISteamNetworking_CreateListenSocket(
			int nVirtualP2PPort,
			uint nIP,
			ushort nPort,
			[MarshalAs(UnmanagedType.U1)] bool bAllowUseOfPacketRelay) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamNetworking _ptr is null!");
			return Native.SteamAPI_ISteamNetworking_CreateListenSocket(_ptr, nVirtualP2PPort, nIP, nPort,
				bAllowUseOfPacketRelay);
		}

		public virtual SNetSocket_t ISteamNetworking_CreateP2PConnectionSocket(
			ulong steamIDTarget,
			int nVirtualPort,
			int nTimeoutSec,
			[MarshalAs(UnmanagedType.U1)] bool bAllowUseOfPacketRelay) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamNetworking _ptr is null!");
			return Native.SteamAPI_ISteamNetworking_CreateP2PConnectionSocket(_ptr, steamIDTarget, nVirtualPort,
				nTimeoutSec, bAllowUseOfPacketRelay);
		}

		public virtual SNetSocket_t ISteamNetworking_CreateConnectionSocket(
			uint nIP,
			ushort nPort,
			int nTimeoutSec) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamNetworking _ptr is null!");
			return Native.SteamAPI_ISteamNetworking_CreateConnectionSocket(_ptr, nIP, nPort, nTimeoutSec);
		}

		public virtual bool ISteamNetworking_DestroySocket(uint hSocket,
			[MarshalAs(UnmanagedType.U1)] bool bNotifyRemoteEnd) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamNetworking _ptr is null!");
			return Native.SteamAPI_ISteamNetworking_DestroySocket(_ptr, hSocket, bNotifyRemoteEnd);
		}

		public virtual bool ISteamNetworking_DestroyListenSocket(uint hSocket,
			[MarshalAs(UnmanagedType.U1)] bool bNotifyRemoteEnd) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamNetworking _ptr is null!");
			return Native.SteamAPI_ISteamNetworking_DestroyListenSocket(_ptr, hSocket, bNotifyRemoteEnd);
		}

		public virtual bool ISteamNetworking_SendDataOnSocket(
			uint hSocket,
			IntPtr pubData,
			uint cubData,
			[MarshalAs(UnmanagedType.U1)] bool bReliable) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamNetworking _ptr is null!");
			return Native.SteamAPI_ISteamNetworking_SendDataOnSocket(_ptr, hSocket, pubData, cubData, bReliable);
		}

		public virtual bool ISteamNetworking_IsDataAvailableOnSocket(
			uint hSocket,
			out uint pcubMsgSize) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamNetworking_IsDataAvailableOnSocket(_ptr, hSocket, out pcubMsgSize)
				: throw new Exception("ISteamNetworking _ptr is null!");
		}

		public virtual bool ISteamNetworking_RetrieveDataFromSocket(
			uint hSocket,
			IntPtr pubDest,
			uint cubDest,
			out uint pcubMsgSize) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamNetworking _ptr is null!");
			return Native.SteamAPI_ISteamNetworking_RetrieveDataFromSocket(_ptr, hSocket, pubDest, cubDest,
				out pcubMsgSize);
		}

		public virtual bool ISteamNetworking_IsDataAvailable(
			uint hListenSocket,
			out uint pcubMsgSize,
			ref uint phSocket) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamNetworking _ptr is null!");
			return Native.SteamAPI_ISteamNetworking_IsDataAvailable(_ptr, hListenSocket, out pcubMsgSize, ref phSocket);
		}

		public virtual bool ISteamNetworking_RetrieveData(
			uint hListenSocket,
			IntPtr pubDest,
			uint cubDest,
			out uint pcubMsgSize,
			ref uint phSocket) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamNetworking _ptr is null!");
			return Native.SteamAPI_ISteamNetworking_RetrieveData(_ptr, hListenSocket, pubDest, cubDest, out pcubMsgSize,
				ref phSocket);
		}

		public virtual bool ISteamNetworking_GetSocketInfo(
			uint hSocket,
			out ulong pSteamIDRemote,
			IntPtr peSocketStatus,
			out uint punIPRemote,
			out ushort punPortRemote) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamNetworking _ptr is null!");
			return Native.SteamAPI_ISteamNetworking_GetSocketInfo(_ptr, hSocket, out pSteamIDRemote, peSocketStatus,
				out punIPRemote, out punPortRemote);
		}

		public virtual bool ISteamNetworking_GetListenSocketInfo(
			uint hListenSocket,
			out uint pnIP,
			out ushort pnPort) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamNetworking_GetListenSocketInfo(_ptr, hListenSocket, out pnIP, out pnPort)
				: throw new Exception("ISteamNetworking _ptr is null!");
		}

		public virtual SNetSocketConnectionType ISteamNetworking_GetSocketConnectionType(uint hSocket) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamNetworking_GetSocketConnectionType(_ptr, hSocket)
				: throw new Exception("ISteamNetworking _ptr is null!");
		}

		public virtual int ISteamNetworking_GetMaxPacketSize(uint hSocket) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamNetworking_GetMaxPacketSize(_ptr, hSocket)
				: throw new Exception("ISteamNetworking _ptr is null!");
		}

		public virtual ScreenshotHandle ISteamScreenshots_WriteScreenshot(
			IntPtr pubRGB,
			uint cubRGB,
			int nWidth,
			int nHeight) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamScreenshots _ptr is null!");
			return Native.SteamAPI_ISteamScreenshots_WriteScreenshot(_ptr, pubRGB, cubRGB, nWidth, nHeight);
		}

		public virtual ScreenshotHandle ISteamScreenshots_AddScreenshotToLibrary(
			string pchFilename,
			string pchThumbnailFilename,
			int nWidth,
			int nHeight) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamScreenshots _ptr is null!");
			return Native.SteamAPI_ISteamScreenshots_AddScreenshotToLibrary(_ptr, pchFilename, pchThumbnailFilename,
				nWidth, nHeight);
		}

		public virtual void ISteamScreenshots_TriggerScreenshot() {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamScreenshots _ptr is null!");
			Native.SteamAPI_ISteamScreenshots_TriggerScreenshot(_ptr);
		}

		public virtual void ISteamScreenshots_HookScreenshots([MarshalAs(UnmanagedType.U1)] bool bHook) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamScreenshots _ptr is null!");
			Native.SteamAPI_ISteamScreenshots_HookScreenshots(_ptr, bHook);
		}

		public virtual bool ISteamScreenshots_SetLocation(uint hScreenshot, string pchLocation) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamScreenshots _ptr is null!");
			return Native.SteamAPI_ISteamScreenshots_SetLocation(_ptr, hScreenshot, pchLocation);
		}

		public virtual bool ISteamScreenshots_TagUser(uint hScreenshot, ulong steamID) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamScreenshots _ptr is null!");
			return Native.SteamAPI_ISteamScreenshots_TagUser(_ptr, hScreenshot, steamID);
		}

		public virtual bool ISteamScreenshots_TagPublishedFile(
			uint hScreenshot,
			ulong unPublishedFileID) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamScreenshots _ptr is null!");
			return Native.SteamAPI_ISteamScreenshots_TagPublishedFile(_ptr, hScreenshot, unPublishedFileID);
		}

		public virtual bool ISteamScreenshots_IsScreenshotsHooked() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamScreenshots_IsScreenshotsHooked(_ptr)
				: throw new Exception("ISteamScreenshots _ptr is null!");
		}

		public virtual ScreenshotHandle ISteamScreenshots_AddVRScreenshotToLibrary(
			VRScreenshotType eType,
			string pchFilename,
			string pchVRFilename) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamScreenshots _ptr is null!");
			return Native.SteamAPI_ISteamScreenshots_AddVRScreenshotToLibrary(_ptr, eType, pchFilename, pchVRFilename);
		}

		public virtual bool ISteamMusic_BIsEnabled() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMusic_BIsEnabled(_ptr)
				: throw new Exception("ISteamMusic _ptr is null!");
		}

		public virtual bool ISteamMusic_BIsPlaying() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMusic_BIsPlaying(_ptr)
				: throw new Exception("ISteamMusic _ptr is null!");
		}

		public virtual AudioPlayback_Status ISteamMusic_GetPlaybackStatus() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMusic_GetPlaybackStatus(_ptr)
				: throw new Exception("ISteamMusic _ptr is null!");
		}

		public virtual void ISteamMusic_Play() {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMusic _ptr is null!");
			Native.SteamAPI_ISteamMusic_Play(_ptr);
		}

		public virtual void ISteamMusic_Pause() {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMusic _ptr is null!");
			Native.SteamAPI_ISteamMusic_Pause(_ptr);
		}

		public virtual void ISteamMusic_PlayPrevious() {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMusic _ptr is null!");
			Native.SteamAPI_ISteamMusic_PlayPrevious(_ptr);
		}

		public virtual void ISteamMusic_PlayNext() {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMusic _ptr is null!");
			Native.SteamAPI_ISteamMusic_PlayNext(_ptr);
		}

		public virtual void ISteamMusic_SetVolume(float flVolume) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMusic _ptr is null!");
			Native.SteamAPI_ISteamMusic_SetVolume(_ptr, flVolume);
		}

		public virtual float ISteamMusic_GetVolume() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMusic_GetVolume(_ptr)
				: throw new Exception("ISteamMusic _ptr is null!");
		}

		public virtual bool ISteamMusicRemote_RegisterSteamMusicRemote(string pchName) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMusicRemote_RegisterSteamMusicRemote(_ptr, pchName)
				: throw new Exception("ISteamMusicRemote _ptr is null!");
		}

		public virtual bool ISteamMusicRemote_DeregisterSteamMusicRemote() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMusicRemote_DeregisterSteamMusicRemote(_ptr)
				: throw new Exception("ISteamMusicRemote _ptr is null!");
		}

		public virtual bool ISteamMusicRemote_BIsCurrentMusicRemote() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMusicRemote_BIsCurrentMusicRemote(_ptr)
				: throw new Exception("ISteamMusicRemote _ptr is null!");
		}

		public virtual bool ISteamMusicRemote_BActivationSuccess([MarshalAs(UnmanagedType.U1)] bool bValue) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMusicRemote_BActivationSuccess(_ptr, bValue)
				: throw new Exception("ISteamMusicRemote _ptr is null!");
		}

		public virtual bool ISteamMusicRemote_SetDisplayName(string pchDisplayName) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMusicRemote_SetDisplayName(_ptr, pchDisplayName)
				: throw new Exception("ISteamMusicRemote _ptr is null!");
		}

		public virtual bool ISteamMusicRemote_SetPNGIcon_64x64(IntPtr pvBuffer, uint cbBufferLength) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMusicRemote _ptr is null!");
			return Native.SteamAPI_ISteamMusicRemote_SetPNGIcon_64x64(_ptr, pvBuffer, cbBufferLength);
		}

		public virtual bool ISteamMusicRemote_EnablePlayPrevious([MarshalAs(UnmanagedType.U1)] bool bValue) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMusicRemote_EnablePlayPrevious(_ptr, bValue)
				: throw new Exception("ISteamMusicRemote _ptr is null!");
		}

		public virtual bool ISteamMusicRemote_EnablePlayNext([MarshalAs(UnmanagedType.U1)] bool bValue) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMusicRemote_EnablePlayNext(_ptr, bValue)
				: throw new Exception("ISteamMusicRemote _ptr is null!");
		}

		public virtual bool ISteamMusicRemote_EnableShuffled([MarshalAs(UnmanagedType.U1)] bool bValue) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMusicRemote_EnableShuffled(_ptr, bValue)
				: throw new Exception("ISteamMusicRemote _ptr is null!");
		}

		public virtual bool ISteamMusicRemote_EnableLooped([MarshalAs(UnmanagedType.U1)] bool bValue) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMusicRemote_EnableLooped(_ptr, bValue)
				: throw new Exception("ISteamMusicRemote _ptr is null!");
		}

		public virtual bool ISteamMusicRemote_EnableQueue([MarshalAs(UnmanagedType.U1)] bool bValue) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMusicRemote_EnableQueue(_ptr, bValue)
				: throw new Exception("ISteamMusicRemote _ptr is null!");
		}

		public virtual bool ISteamMusicRemote_EnablePlaylists([MarshalAs(UnmanagedType.U1)] bool bValue) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMusicRemote_EnablePlaylists(_ptr, bValue)
				: throw new Exception("ISteamMusicRemote _ptr is null!");
		}

		public virtual bool ISteamMusicRemote_UpdatePlaybackStatus(AudioPlayback_Status nStatus) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMusicRemote_UpdatePlaybackStatus(_ptr, nStatus)
				: throw new Exception("ISteamMusicRemote _ptr is null!");
		}

		public virtual bool ISteamMusicRemote_UpdateShuffled([MarshalAs(UnmanagedType.U1)] bool bValue) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMusicRemote_UpdateShuffled(_ptr, bValue)
				: throw new Exception("ISteamMusicRemote _ptr is null!");
		}

		public virtual bool ISteamMusicRemote_UpdateLooped([MarshalAs(UnmanagedType.U1)] bool bValue) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMusicRemote_UpdateLooped(_ptr, bValue)
				: throw new Exception("ISteamMusicRemote _ptr is null!");
		}

		public virtual bool ISteamMusicRemote_UpdateVolume(float flValue) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMusicRemote_UpdateVolume(_ptr, flValue)
				: throw new Exception("ISteamMusicRemote _ptr is null!");
		}

		public virtual bool ISteamMusicRemote_CurrentEntryWillChange() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMusicRemote_CurrentEntryWillChange(_ptr)
				: throw new Exception("ISteamMusicRemote _ptr is null!");
		}

		public virtual bool ISteamMusicRemote_CurrentEntryIsAvailable([MarshalAs(UnmanagedType.U1)] bool bAvailable) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMusicRemote_CurrentEntryIsAvailable(_ptr, bAvailable)
				: throw new Exception("ISteamMusicRemote _ptr is null!");
		}

		public virtual bool ISteamMusicRemote_UpdateCurrentEntryText(string pchText) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMusicRemote_UpdateCurrentEntryText(_ptr, pchText)
				: throw new Exception("ISteamMusicRemote _ptr is null!");
		}

		public virtual bool ISteamMusicRemote_UpdateCurrentEntryElapsedSeconds(int nValue) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMusicRemote_UpdateCurrentEntryElapsedSeconds(_ptr, nValue)
				: throw new Exception("ISteamMusicRemote _ptr is null!");
		}

		public virtual bool ISteamMusicRemote_UpdateCurrentEntryCoverArt(
			IntPtr pvBuffer,
			uint cbBufferLength) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMusicRemote _ptr is null!");
			return Native.SteamAPI_ISteamMusicRemote_UpdateCurrentEntryCoverArt(_ptr, pvBuffer, cbBufferLength);
		}

		public virtual bool ISteamMusicRemote_CurrentEntryDidChange() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMusicRemote_CurrentEntryDidChange(_ptr)
				: throw new Exception("ISteamMusicRemote _ptr is null!");
		}

		public virtual bool ISteamMusicRemote_QueueWillChange() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMusicRemote_QueueWillChange(_ptr)
				: throw new Exception("ISteamMusicRemote _ptr is null!");
		}

		public virtual bool ISteamMusicRemote_ResetQueueEntries() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMusicRemote_ResetQueueEntries(_ptr)
				: throw new Exception("ISteamMusicRemote _ptr is null!");
		}

		public virtual bool ISteamMusicRemote_SetQueueEntry(
			int nID,
			int nPosition,
			string pchEntryText) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMusicRemote _ptr is null!");
			return Native.SteamAPI_ISteamMusicRemote_SetQueueEntry(_ptr, nID, nPosition, pchEntryText);
		}

		public virtual bool ISteamMusicRemote_SetCurrentQueueEntry(int nID) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMusicRemote_SetCurrentQueueEntry(_ptr, nID)
				: throw new Exception("ISteamMusicRemote _ptr is null!");
		}

		public virtual bool ISteamMusicRemote_QueueDidChange() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMusicRemote_QueueDidChange(_ptr)
				: throw new Exception("ISteamMusicRemote _ptr is null!");
		}

		public virtual bool ISteamMusicRemote_PlaylistWillChange() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMusicRemote_PlaylistWillChange(_ptr)
				: throw new Exception("ISteamMusicRemote _ptr is null!");
		}

		public virtual bool ISteamMusicRemote_ResetPlaylistEntries() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMusicRemote_ResetPlaylistEntries(_ptr)
				: throw new Exception("ISteamMusicRemote _ptr is null!");
		}

		public virtual bool ISteamMusicRemote_SetPlaylistEntry(
			int nID,
			int nPosition,
			string pchEntryText) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMusicRemote _ptr is null!");
			return Native.SteamAPI_ISteamMusicRemote_SetPlaylistEntry(_ptr, nID, nPosition, pchEntryText);
		}

		public virtual bool ISteamMusicRemote_SetCurrentPlaylistEntry(int nID) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMusicRemote_SetCurrentPlaylistEntry(_ptr, nID)
				: throw new Exception("ISteamMusicRemote _ptr is null!");
		}

		public virtual bool ISteamMusicRemote_PlaylistDidChange() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMusicRemote_PlaylistDidChange(_ptr)
				: throw new Exception("ISteamMusicRemote _ptr is null!");
		}

		public virtual HTTPRequestHandle ISteamHTTP_CreateHTTPRequest(
			HTTPMethod eHTTPRequestMethod,
			string pchAbsoluteURL) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTTP _ptr is null!");
			return Native.SteamAPI_ISteamHTTP_CreateHTTPRequest(_ptr, eHTTPRequestMethod, pchAbsoluteURL);
		}

		public virtual bool ISteamHTTP_SetHTTPRequestContextValue(uint hRequest, ulong ulContextValue) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTTP _ptr is null!");
			return Native.SteamAPI_ISteamHTTP_SetHTTPRequestContextValue(_ptr, hRequest, ulContextValue);
		}

		public virtual bool ISteamHTTP_SetHTTPRequestNetworkActivityTimeout(
			uint hRequest,
			uint unTimeoutSeconds) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTTP _ptr is null!");
			return Native.SteamAPI_ISteamHTTP_SetHTTPRequestNetworkActivityTimeout(_ptr, hRequest, unTimeoutSeconds);
		}

		public virtual bool ISteamHTTP_SetHTTPRequestHeaderValue(
			uint hRequest,
			string pchHeaderName,
			string pchHeaderValue) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTTP _ptr is null!");
			return Native.SteamAPI_ISteamHTTP_SetHTTPRequestHeaderValue(_ptr, hRequest, pchHeaderName, pchHeaderValue);
		}

		public virtual bool ISteamHTTP_SetHTTPRequestGetOrPostParameter(
			uint hRequest,
			string pchParamName,
			string pchParamValue) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTTP _ptr is null!");
			return Native.SteamAPI_ISteamHTTP_SetHTTPRequestGetOrPostParameter(_ptr, hRequest, pchParamName,
				pchParamValue);
		}

		public virtual bool ISteamHTTP_SendHTTPRequest(uint hRequest, ref ulong pCallHandle) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTTP _ptr is null!");
			return Native.SteamAPI_ISteamHTTP_SendHTTPRequest(_ptr, hRequest, ref pCallHandle);
		}

		public virtual bool ISteamHTTP_SendHTTPRequestAndStreamResponse(
			uint hRequest,
			ref ulong pCallHandle) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTTP _ptr is null!");
			return Native.SteamAPI_ISteamHTTP_SendHTTPRequestAndStreamResponse(_ptr, hRequest, ref pCallHandle);
		}

		public virtual bool ISteamHTTP_DeferHTTPRequest(uint hRequest) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamHTTP_DeferHTTPRequest(_ptr, hRequest)
				: throw new Exception("ISteamHTTP _ptr is null!");
		}

		public virtual bool ISteamHTTP_PrioritizeHTTPRequest(uint hRequest) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamHTTP_PrioritizeHTTPRequest(_ptr, hRequest)
				: throw new Exception("ISteamHTTP _ptr is null!");
		}

		public virtual bool ISteamHTTP_GetHTTPResponseHeaderSize(
			uint hRequest,
			string pchHeaderName,
			out uint unResponseHeaderSize) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTTP _ptr is null!");
			return Native.SteamAPI_ISteamHTTP_GetHTTPResponseHeaderSize(_ptr, hRequest, pchHeaderName,
				out unResponseHeaderSize);
		}

		public virtual bool ISteamHTTP_GetHTTPResponseHeaderValue(
			uint hRequest,
			string pchHeaderName,
			out byte pHeaderValueBuffer,
			uint unBufferSize) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTTP _ptr is null!");
			return Native.SteamAPI_ISteamHTTP_GetHTTPResponseHeaderValue(_ptr, hRequest, pchHeaderName,
				out pHeaderValueBuffer, unBufferSize);
		}

		public virtual bool ISteamHTTP_GetHTTPResponseBodySize(uint hRequest, out uint unBodySize) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamHTTP_GetHTTPResponseBodySize(_ptr, hRequest, out unBodySize)
				: throw new Exception("ISteamHTTP _ptr is null!");
		}

		public virtual bool ISteamHTTP_GetHTTPResponseBodyData(
			uint hRequest,
			out byte pBodyDataBuffer,
			uint unBufferSize) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTTP _ptr is null!");
			return Native.SteamAPI_ISteamHTTP_GetHTTPResponseBodyData(_ptr, hRequest, out pBodyDataBuffer,
				unBufferSize);
		}

		public virtual bool ISteamHTTP_GetHTTPStreamingResponseBodyData(
			uint hRequest,
			uint cOffset,
			out byte pBodyDataBuffer,
			uint unBufferSize) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTTP _ptr is null!");
			return Native.SteamAPI_ISteamHTTP_GetHTTPStreamingResponseBodyData(_ptr, hRequest, cOffset,
				out pBodyDataBuffer, unBufferSize);
		}

		public virtual bool ISteamHTTP_ReleaseHTTPRequest(uint hRequest) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamHTTP_ReleaseHTTPRequest(_ptr, hRequest)
				: throw new Exception("ISteamHTTP _ptr is null!");
		}

		public virtual bool ISteamHTTP_GetHTTPDownloadProgressPct(
			uint hRequest,
			out float pflPercentOut) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamHTTP_GetHTTPDownloadProgressPct(_ptr, hRequest, out pflPercentOut)
				: throw new Exception("ISteamHTTP _ptr is null!");
		}

		public virtual bool ISteamHTTP_SetHTTPRequestRawPostBody(
			uint hRequest,
			string pchContentType,
			out byte pubBody,
			uint unBodyLen) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTTP _ptr is null!");
			return Native.SteamAPI_ISteamHTTP_SetHTTPRequestRawPostBody(_ptr, hRequest, pchContentType, out pubBody,
				unBodyLen);
		}

		public virtual HTTPCookieContainerHandle ISteamHTTP_CreateCookieContainer(
			[MarshalAs(UnmanagedType.U1)] bool bAllowResponsesToModify) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamHTTP_CreateCookieContainer(_ptr, bAllowResponsesToModify)
				: throw new Exception("ISteamHTTP _ptr is null!");
		}

		public virtual bool ISteamHTTP_ReleaseCookieContainer(uint hCookieContainer) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamHTTP_ReleaseCookieContainer(_ptr, hCookieContainer)
				: throw new Exception("ISteamHTTP _ptr is null!");
		}

		public virtual bool ISteamHTTP_SetCookie(
			uint hCookieContainer,
			string pchHost,
			string pchUrl,
			string pchCookie) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTTP _ptr is null!");
			return Native.SteamAPI_ISteamHTTP_SetCookie(_ptr, hCookieContainer, pchHost, pchUrl, pchCookie);
		}

		public virtual bool ISteamHTTP_SetHTTPRequestCookieContainer(
			uint hRequest,
			uint hCookieContainer) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTTP _ptr is null!");
			return Native.SteamAPI_ISteamHTTP_SetHTTPRequestCookieContainer(_ptr, hRequest, hCookieContainer);
		}

		public virtual bool ISteamHTTP_SetHTTPRequestUserAgentInfo(
			uint hRequest,
			string pchUserAgentInfo) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTTP _ptr is null!");
			return Native.SteamAPI_ISteamHTTP_SetHTTPRequestUserAgentInfo(_ptr, hRequest, pchUserAgentInfo);
		}

		public virtual bool ISteamHTTP_SetHTTPRequestRequiresVerifiedCertificate(
			uint hRequest,
			[MarshalAs(UnmanagedType.U1)] bool bRequireVerifiedCertificate) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTTP _ptr is null!");
			return Native.SteamAPI_ISteamHTTP_SetHTTPRequestRequiresVerifiedCertificate(_ptr, hRequest,
				bRequireVerifiedCertificate);
		}

		public virtual bool ISteamHTTP_SetHTTPRequestAbsoluteTimeoutMS(
			uint hRequest,
			uint unMilliseconds) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTTP _ptr is null!");
			return Native.SteamAPI_ISteamHTTP_SetHTTPRequestAbsoluteTimeoutMS(_ptr, hRequest, unMilliseconds);
		}

		public virtual bool ISteamHTTP_GetHTTPRequestWasTimedOut(
			uint hRequest,
			[MarshalAs(UnmanagedType.U1)] ref bool pbWasTimedOut) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTTP _ptr is null!");
			return Native.SteamAPI_ISteamHTTP_GetHTTPRequestWasTimedOut(_ptr, hRequest, ref pbWasTimedOut);
		}

		public virtual ClientUnifiedMessageHandle ISteamUnifiedMessages_SendMethod(
			string pchServiceMethod,
			IntPtr pRequestBuffer,
			uint unRequestBufferSize,
			ulong unContext) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUnifiedMessages _ptr is null!");
			return Native.SteamAPI_ISteamUnifiedMessages_SendMethod(_ptr, pchServiceMethod, pRequestBuffer,
				unRequestBufferSize, unContext);
		}

		public virtual bool ISteamUnifiedMessages_GetMethodResponseInfo(
			ulong hHandle,
			out uint punResponseSize,
			out Result peResult) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUnifiedMessages_GetMethodResponseInfo(_ptr, hHandle, out punResponseSize,
					out peResult)
				: throw new Exception("ISteamUnifiedMessages _ptr is null!");
		}

		public virtual bool ISteamUnifiedMessages_GetMethodResponseData(
			ulong hHandle,
			IntPtr pResponseBuffer,
			uint unResponseBufferSize,
			[MarshalAs(UnmanagedType.U1)] bool bAutoRelease) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUnifiedMessages _ptr is null!");
			return Native.SteamAPI_ISteamUnifiedMessages_GetMethodResponseData(_ptr, hHandle, pResponseBuffer,
				unResponseBufferSize, bAutoRelease);
		}

		public virtual bool ISteamUnifiedMessages_ReleaseMethod(ulong hHandle) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUnifiedMessages_ReleaseMethod(_ptr, hHandle)
				: throw new Exception("ISteamUnifiedMessages _ptr is null!");
		}

		public virtual bool ISteamUnifiedMessages_SendNotification(
			string pchServiceNotification,
			IntPtr pNotificationBuffer,
			uint unNotificationBufferSize) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUnifiedMessages _ptr is null!");
			return Native.SteamAPI_ISteamUnifiedMessages_SendNotification(_ptr, pchServiceNotification,
				pNotificationBuffer, unNotificationBufferSize);
		}

		public virtual bool ISteamController_Init() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamController_Init(_ptr)
				: throw new Exception("ISteamController _ptr is null!");
		}

		public virtual bool ISteamController_Shutdown() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamController_Shutdown(_ptr)
				: throw new Exception("ISteamController _ptr is null!");
		}

		public virtual void ISteamController_RunFrame() {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamController _ptr is null!");
			Native.SteamAPI_ISteamController_RunFrame(_ptr);
		}

		public virtual int ISteamController_GetConnectedControllers(IntPtr handlesOut) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamController_GetConnectedControllers(_ptr, handlesOut)
				: throw new Exception("ISteamController _ptr is null!");
		}

		public virtual bool ISteamController_ShowBindingPanel(ulong controllerHandle) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamController_ShowBindingPanel(_ptr, controllerHandle)
				: throw new Exception("ISteamController _ptr is null!");
		}

		public virtual ControllerActionSetHandle_t ISteamController_GetActionSetHandle(
			string pszActionSetName) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamController_GetActionSetHandle(_ptr, pszActionSetName)
				: throw new Exception("ISteamController _ptr is null!");
		}

		public virtual void ISteamController_ActivateActionSet(
			ulong controllerHandle,
			ulong actionSetHandle) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamController _ptr is null!");
			Native.SteamAPI_ISteamController_ActivateActionSet(_ptr, controllerHandle, actionSetHandle);
		}

		public virtual ControllerActionSetHandle_t ISteamController_GetCurrentActionSet(
			ulong controllerHandle) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamController_GetCurrentActionSet(_ptr, controllerHandle)
				: throw new Exception("ISteamController _ptr is null!");
		}

		public virtual ControllerDigitalActionHandle_t ISteamController_GetDigitalActionHandle(
			string pszActionName) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamController_GetDigitalActionHandle(_ptr, pszActionName)
				: throw new Exception("ISteamController _ptr is null!");
		}

		public virtual ControllerDigitalActionData_t ISteamController_GetDigitalActionData(
			ulong controllerHandle,
			ulong digitalActionHandle) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamController _ptr is null!");
			return Native.SteamAPI_ISteamController_GetDigitalActionData(_ptr, controllerHandle, digitalActionHandle);
		}

		public virtual int ISteamController_GetDigitalActionOrigins(
			ulong controllerHandle,
			ulong actionSetHandle,
			ulong digitalActionHandle,
			out ControllerActionOrigin originsOut) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamController _ptr is null!");
			return Native.SteamAPI_ISteamController_GetDigitalActionOrigins(_ptr, controllerHandle, actionSetHandle,
				digitalActionHandle, out originsOut);
		}

		public virtual ControllerAnalogActionHandle_t ISteamController_GetAnalogActionHandle(
			string pszActionName) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamController_GetAnalogActionHandle(_ptr, pszActionName)
				: throw new Exception("ISteamController _ptr is null!");
		}

		public virtual ControllerAnalogActionData_t ISteamController_GetAnalogActionData(
			ulong controllerHandle,
			ulong analogActionHandle) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamController _ptr is null!");
			return Native.SteamAPI_ISteamController_GetAnalogActionData(_ptr, controllerHandle, analogActionHandle);
		}

		public virtual int ISteamController_GetAnalogActionOrigins(
			ulong controllerHandle,
			ulong actionSetHandle,
			ulong analogActionHandle,
			out ControllerActionOrigin originsOut) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamController _ptr is null!");
			return Native.SteamAPI_ISteamController_GetAnalogActionOrigins(_ptr, controllerHandle, actionSetHandle,
				analogActionHandle, out originsOut);
		}

		public virtual void ISteamController_StopAnalogActionMomentum(
			ulong controllerHandle,
			ulong eAction) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamController _ptr is null!");
			Native.SteamAPI_ISteamController_StopAnalogActionMomentum(_ptr, controllerHandle, eAction);
		}

		public virtual void ISteamController_TriggerHapticPulse(
			ulong controllerHandle,
			SteamControllerPad eTargetPad,
			ushort usDurationMicroSec) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamController _ptr is null!");
			Native.SteamAPI_ISteamController_TriggerHapticPulse(_ptr, controllerHandle, eTargetPad, usDurationMicroSec);
		}

		public virtual void ISteamController_TriggerRepeatedHapticPulse(
			ulong controllerHandle,
			SteamControllerPad eTargetPad,
			ushort usDurationMicroSec,
			ushort usOffMicroSec,
			ushort unRepeat,
			uint nFlags) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamController _ptr is null!");
			Native.SteamAPI_ISteamController_TriggerRepeatedHapticPulse(_ptr, controllerHandle, eTargetPad,
				usDurationMicroSec, usOffMicroSec, unRepeat, nFlags);
		}

		public virtual void ISteamController_TriggerVibration(
			ulong controllerHandle,
			ushort usLeftSpeed,
			ushort usRightSpeed) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamController _ptr is null!");
			Native.SteamAPI_ISteamController_TriggerVibration(_ptr, controllerHandle, usLeftSpeed, usRightSpeed);
		}

		public virtual void ISteamController_SetLEDColor(
			ulong controllerHandle,
			byte nColorR,
			byte nColorG,
			byte nColorB,
			uint nFlags) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamController _ptr is null!");
			Native.SteamAPI_ISteamController_SetLEDColor(_ptr, controllerHandle, nColorR, nColorG, nColorB, nFlags);
		}

		public virtual int ISteamController_GetGamepadIndexForController(ulong ulControllerHandle) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamController_GetGamepadIndexForController(_ptr, ulControllerHandle)
				: throw new Exception("ISteamController _ptr is null!");
		}

		public virtual ControllerHandle_t ISteamController_GetControllerForGamepadIndex(int nIndex) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamController_GetControllerForGamepadIndex(_ptr, nIndex)
				: throw new Exception("ISteamController _ptr is null!");
		}

		public virtual ControllerMotionData_t ISteamController_GetMotionData(ulong controllerHandle) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamController_GetMotionData(_ptr, controllerHandle)
				: throw new Exception("ISteamController _ptr is null!");
		}

		public virtual bool ISteamController_ShowDigitalActionOrigins(
			ulong controllerHandle,
			ulong digitalActionHandle,
			float flScale,
			float flXPosition,
			float flYPosition) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamController _ptr is null!");
			return Native.SteamAPI_ISteamController_ShowDigitalActionOrigins(_ptr, controllerHandle,
				digitalActionHandle, flScale, flXPosition, flYPosition);
		}

		public virtual bool ISteamController_ShowAnalogActionOrigins(
			ulong controllerHandle,
			ulong analogActionHandle,
			float flScale,
			float flXPosition,
			float flYPosition) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamController _ptr is null!");
			return Native.SteamAPI_ISteamController_ShowAnalogActionOrigins(_ptr, controllerHandle, analogActionHandle,
				flScale, flXPosition, flYPosition);
		}

		public virtual IntPtr ISteamController_GetStringForActionOrigin(ControllerActionOrigin eOrigin) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamController_GetStringForActionOrigin(_ptr, eOrigin)
				: throw new Exception("ISteamController _ptr is null!");
		}

		public virtual IntPtr ISteamController_GetGlyphForActionOrigin(ControllerActionOrigin eOrigin) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamController_GetGlyphForActionOrigin(_ptr, eOrigin)
				: throw new Exception("ISteamController _ptr is null!");
		}

		public virtual UGCQueryHandle_t ISteamUGC_CreateQueryUserUGCRequest(
			uint unAccountID,
			UserUGCList eListType,
			UGCMatchingUGCType eMatchingUGCType,
			UserUGCListSortOrder eSortOrder,
			uint nCreatorAppID,
			uint nConsumerAppID,
			uint unPage) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_CreateQueryUserUGCRequest(_ptr, unAccountID, eListType, eMatchingUGCType,
				eSortOrder, nCreatorAppID, nConsumerAppID, unPage);
		}

		public virtual UGCQueryHandle_t ISteamUGC_CreateQueryAllUGCRequest(
			UGCQuery eQueryType,
			UGCMatchingUGCType eMatchingeMatchingUGCTypeFileType,
			uint nCreatorAppID,
			uint nConsumerAppID,
			uint unPage) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_CreateQueryAllUGCRequest(_ptr, eQueryType,
				eMatchingeMatchingUGCTypeFileType, nCreatorAppID, nConsumerAppID, unPage);
		}

		public virtual UGCQueryHandle_t ISteamUGC_CreateQueryUGCDetailsRequest(
			IntPtr pvecPublishedFileID,
			uint unNumPublishedFileIDs) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_CreateQueryUGCDetailsRequest(_ptr, pvecPublishedFileID,
				unNumPublishedFileIDs);
		}

		public virtual SteamAPICall_t ISteamUGC_SendQueryUGCRequest(ulong handle) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUGC_SendQueryUGCRequest(_ptr, handle)
				: throw new Exception("ISteamUGC _ptr is null!");
		}

		public virtual bool ISteamUGC_GetQueryUGCResult(
			ulong handle,
			uint index,
			ref SteamUGCDetails_t pDetails) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			var pDetails1 = new SteamUGCDetails_t.PackSmall();
			var queryUgcResult = Native.SteamAPI_ISteamUGC_GetQueryUGCResult(_ptr, handle, index, ref pDetails1);
			pDetails = (SteamUGCDetails_t)pDetails1;
			return queryUgcResult;
		}

		public virtual bool ISteamUGC_GetQueryUGCPreviewURL(
			ulong handle,
			uint index,
			StringBuilder pchURL,
			uint cchURLSize) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_GetQueryUGCPreviewURL(_ptr, handle, index, pchURL, cchURLSize);
		}

		public virtual bool ISteamUGC_GetQueryUGCMetadata(
			ulong handle,
			uint index,
			StringBuilder pchMetadata,
			uint cchMetadatasize) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_GetQueryUGCMetadata(_ptr, handle, index, pchMetadata, cchMetadatasize);
		}

		public virtual bool ISteamUGC_GetQueryUGCChildren(
			ulong handle,
			uint index,
			IntPtr pvecPublishedFileID,
			uint cMaxEntries) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_GetQueryUGCChildren(_ptr, handle, index, pvecPublishedFileID, cMaxEntries);
		}

		public virtual bool ISteamUGC_GetQueryUGCStatistic(
			ulong handle,
			uint index,
			ItemStatistic eStatType,
			out ulong pStatValue) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_GetQueryUGCStatistic(_ptr, handle, index, eStatType, out pStatValue);
		}

		public virtual uint ISteamUGC_GetQueryUGCNumAdditionalPreviews(ulong handle, uint index) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_GetQueryUGCNumAdditionalPreviews(_ptr, handle, index);
		}

		public virtual bool ISteamUGC_GetQueryUGCAdditionalPreview(
			ulong handle,
			uint index,
			uint previewIndex,
			StringBuilder pchURLOrVideoID,
			uint cchURLSize,
			StringBuilder pchOriginalFileName,
			uint cchOriginalFileNameSize,
			out ItemPreviewType pPreviewType) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_GetQueryUGCAdditionalPreview(_ptr, handle, index, previewIndex,
				pchURLOrVideoID, cchURLSize, pchOriginalFileName, cchOriginalFileNameSize, out pPreviewType);
		}

		public virtual uint ISteamUGC_GetQueryUGCNumKeyValueTags(ulong handle, uint index) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_GetQueryUGCNumKeyValueTags(_ptr, handle, index);
		}

		public virtual bool ISteamUGC_GetQueryUGCKeyValueTag(
			ulong handle,
			uint index,
			uint keyValueTagIndex,
			StringBuilder pchKey,
			uint cchKeySize,
			StringBuilder pchValue,
			uint cchValueSize) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_GetQueryUGCKeyValueTag(_ptr, handle, index, keyValueTagIndex, pchKey,
				cchKeySize, pchValue, cchValueSize);
		}

		public virtual bool ISteamUGC_ReleaseQueryUGCRequest(ulong handle) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUGC_ReleaseQueryUGCRequest(_ptr, handle)
				: throw new Exception("ISteamUGC _ptr is null!");
		}

		public virtual bool ISteamUGC_AddRequiredTag(ulong handle, string pTagName) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_AddRequiredTag(_ptr, handle, pTagName);
		}

		public virtual bool ISteamUGC_AddExcludedTag(ulong handle, string pTagName) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_AddExcludedTag(_ptr, handle, pTagName);
		}

		public virtual bool
			ISteamUGC_SetReturnOnlyIDs(ulong handle, [MarshalAs(UnmanagedType.U1)] bool bReturnOnlyIDs) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_SetReturnOnlyIDs(_ptr, handle, bReturnOnlyIDs);
		}

		public virtual bool ISteamUGC_SetReturnKeyValueTags(ulong handle,
			[MarshalAs(UnmanagedType.U1)] bool bReturnKeyValueTags) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_SetReturnKeyValueTags(_ptr, handle, bReturnKeyValueTags);
		}

		public virtual bool ISteamUGC_SetReturnLongDescription(
			ulong handle,
			[MarshalAs(UnmanagedType.U1)] bool bReturnLongDescription) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_SetReturnLongDescription(_ptr, handle, bReturnLongDescription);
		}

		public virtual bool ISteamUGC_SetReturnMetadata(ulong handle,
			[MarshalAs(UnmanagedType.U1)] bool bReturnMetadata) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_SetReturnMetadata(_ptr, handle, bReturnMetadata);
		}

		public virtual bool ISteamUGC_SetReturnChildren(ulong handle,
			[MarshalAs(UnmanagedType.U1)] bool bReturnChildren) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_SetReturnChildren(_ptr, handle, bReturnChildren);
		}

		public virtual bool ISteamUGC_SetReturnAdditionalPreviews(
			ulong handle,
			[MarshalAs(UnmanagedType.U1)] bool bReturnAdditionalPreviews) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_SetReturnAdditionalPreviews(_ptr, handle, bReturnAdditionalPreviews);
		}

		public virtual bool ISteamUGC_SetReturnTotalOnly(ulong handle,
			[MarshalAs(UnmanagedType.U1)] bool bReturnTotalOnly) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_SetReturnTotalOnly(_ptr, handle, bReturnTotalOnly);
		}

		public virtual bool ISteamUGC_SetReturnPlaytimeStats(ulong handle, uint unDays) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_SetReturnPlaytimeStats(_ptr, handle, unDays);
		}

		public virtual bool ISteamUGC_SetLanguage(ulong handle, string pchLanguage) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_SetLanguage(_ptr, handle, pchLanguage);
		}

		public virtual bool ISteamUGC_SetAllowCachedResponse(ulong handle, uint unMaxAgeSeconds) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_SetAllowCachedResponse(_ptr, handle, unMaxAgeSeconds);
		}

		public virtual bool ISteamUGC_SetCloudFileNameFilter(ulong handle, string pMatchCloudFileName) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_SetCloudFileNameFilter(_ptr, handle, pMatchCloudFileName);
		}

		public virtual bool ISteamUGC_SetMatchAnyTag(ulong handle, [MarshalAs(UnmanagedType.U1)] bool bMatchAnyTag) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_SetMatchAnyTag(_ptr, handle, bMatchAnyTag);
		}

		public virtual bool ISteamUGC_SetSearchText(ulong handle, string pSearchText) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_SetSearchText(_ptr, handle, pSearchText);
		}

		public virtual bool ISteamUGC_SetRankedByTrendDays(ulong handle, uint unDays) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_SetRankedByTrendDays(_ptr, handle, unDays);
		}

		public virtual bool ISteamUGC_AddRequiredKeyValueTag(
			ulong handle,
			string pKey,
			string pValue) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_AddRequiredKeyValueTag(_ptr, handle, pKey, pValue);
		}

		public virtual SteamAPICall_t ISteamUGC_RequestUGCDetails(
			ulong nPublishedFileID,
			uint unMaxAgeSeconds) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_RequestUGCDetails(_ptr, nPublishedFileID, unMaxAgeSeconds);
		}

		public virtual SteamAPICall_t ISteamUGC_CreateItem(
			uint nConsumerAppId,
			WorkshopFileType eFileType) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_CreateItem(_ptr, nConsumerAppId, eFileType);
		}

		public virtual UGCUpdateHandle_t ISteamUGC_StartItemUpdate(
			uint nConsumerAppId,
			ulong nPublishedFileID) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_StartItemUpdate(_ptr, nConsumerAppId, nPublishedFileID);
		}

		public virtual bool ISteamUGC_SetItemTitle(ulong handle, string pchTitle) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_SetItemTitle(_ptr, handle, pchTitle);
		}

		public virtual bool ISteamUGC_SetItemDescription(ulong handle, string pchDescription) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_SetItemDescription(_ptr, handle, pchDescription);
		}

		public virtual bool ISteamUGC_SetItemUpdateLanguage(ulong handle, string pchLanguage) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_SetItemUpdateLanguage(_ptr, handle, pchLanguage);
		}

		public virtual bool ISteamUGC_SetItemMetadata(ulong handle, string pchMetaData) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_SetItemMetadata(_ptr, handle, pchMetaData);
		}

		public virtual bool ISteamUGC_SetItemVisibility(
			ulong handle,
			RemoteStoragePublishedFileVisibility eVisibility) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_SetItemVisibility(_ptr, handle, eVisibility);
		}

		public virtual bool ISteamUGC_SetItemTags(
			ulong updateHandle,
			ref SteamParamStringArray_t pTags) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			var pTags1 = new SteamParamStringArray_t.PackSmall();
			var flag = Native.SteamAPI_ISteamUGC_SetItemTags(_ptr, updateHandle, ref pTags1);
			pTags = (SteamParamStringArray_t)pTags1;
			return flag;
		}

		public virtual bool ISteamUGC_SetItemContent(ulong handle, string pszContentFolder) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_SetItemContent(_ptr, handle, pszContentFolder);
		}

		public virtual bool ISteamUGC_SetItemPreview(ulong handle, string pszPreviewFile) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_SetItemPreview(_ptr, handle, pszPreviewFile);
		}

		public virtual bool ISteamUGC_RemoveItemKeyValueTags(ulong handle, string pchKey) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_RemoveItemKeyValueTags(_ptr, handle, pchKey);
		}

		public virtual bool ISteamUGC_AddItemKeyValueTag(
			ulong handle,
			string pchKey,
			string pchValue) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_AddItemKeyValueTag(_ptr, handle, pchKey, pchValue);
		}

		public virtual bool ISteamUGC_AddItemPreviewFile(
			ulong handle,
			string pszPreviewFile,
			ItemPreviewType type) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_AddItemPreviewFile(_ptr, handle, pszPreviewFile, type);
		}

		public virtual bool ISteamUGC_AddItemPreviewVideo(ulong handle, string pszVideoID) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_AddItemPreviewVideo(_ptr, handle, pszVideoID);
		}

		public virtual bool ISteamUGC_UpdateItemPreviewFile(
			ulong handle,
			uint index,
			string pszPreviewFile) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_UpdateItemPreviewFile(_ptr, handle, index, pszPreviewFile);
		}

		public virtual bool ISteamUGC_UpdateItemPreviewVideo(
			ulong handle,
			uint index,
			string pszVideoID) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_UpdateItemPreviewVideo(_ptr, handle, index, pszVideoID);
		}

		public virtual bool ISteamUGC_RemoveItemPreview(ulong handle, uint index) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_RemoveItemPreview(_ptr, handle, index);
		}

		public virtual SteamAPICall_t ISteamUGC_SubmitItemUpdate(ulong handle, string pchChangeNote) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_SubmitItemUpdate(_ptr, handle, pchChangeNote);
		}

		public virtual ItemUpdateStatus ISteamUGC_GetItemUpdateProgress(
			ulong handle,
			out ulong punBytesProcessed,
			out ulong punBytesTotal) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUGC_GetItemUpdateProgress(_ptr, handle, out punBytesProcessed,
					out punBytesTotal)
				: throw new Exception("ISteamUGC _ptr is null!");
		}

		public virtual SteamAPICall_t ISteamUGC_SetUserItemVote(ulong nPublishedFileID,
			[MarshalAs(UnmanagedType.U1)] bool bVoteUp) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_SetUserItemVote(_ptr, nPublishedFileID, bVoteUp);
		}

		public virtual SteamAPICall_t ISteamUGC_GetUserItemVote(ulong nPublishedFileID) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUGC_GetUserItemVote(_ptr, nPublishedFileID)
				: throw new Exception("ISteamUGC _ptr is null!");
		}

		public virtual SteamAPICall_t ISteamUGC_AddItemToFavorites(
			uint nAppId,
			ulong nPublishedFileID) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_AddItemToFavorites(_ptr, nAppId, nPublishedFileID);
		}

		public virtual SteamAPICall_t ISteamUGC_RemoveItemFromFavorites(
			uint nAppId,
			ulong nPublishedFileID) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_RemoveItemFromFavorites(_ptr, nAppId, nPublishedFileID);
		}

		public virtual SteamAPICall_t ISteamUGC_SubscribeItem(ulong nPublishedFileID) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUGC_SubscribeItem(_ptr, nPublishedFileID)
				: throw new Exception("ISteamUGC _ptr is null!");
		}

		public virtual SteamAPICall_t ISteamUGC_UnsubscribeItem(ulong nPublishedFileID) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUGC_UnsubscribeItem(_ptr, nPublishedFileID)
				: throw new Exception("ISteamUGC _ptr is null!");
		}

		public virtual uint ISteamUGC_GetNumSubscribedItems() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUGC_GetNumSubscribedItems(_ptr)
				: throw new Exception("ISteamUGC _ptr is null!");
		}

		public virtual uint ISteamUGC_GetSubscribedItems(IntPtr pvecPublishedFileID, uint cMaxEntries) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_GetSubscribedItems(_ptr, pvecPublishedFileID, cMaxEntries);
		}

		public virtual uint ISteamUGC_GetItemState(ulong nPublishedFileID) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUGC_GetItemState(_ptr, nPublishedFileID)
				: throw new Exception("ISteamUGC _ptr is null!");
		}

		public virtual bool ISteamUGC_GetItemInstallInfo(
			ulong nPublishedFileID,
			out ulong punSizeOnDisk,
			StringBuilder pchFolder,
			uint cchFolderSize,
			out uint punTimeStamp) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_GetItemInstallInfo(_ptr, nPublishedFileID, out punSizeOnDisk, pchFolder,
				cchFolderSize, out punTimeStamp);
		}

		public virtual bool ISteamUGC_GetItemDownloadInfo(
			ulong nPublishedFileID,
			out ulong punBytesDownloaded,
			out ulong punBytesTotal) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUGC_GetItemDownloadInfo(_ptr, nPublishedFileID, out punBytesDownloaded,
					out punBytesTotal)
				: throw new Exception("ISteamUGC _ptr is null!");
		}

		public virtual bool ISteamUGC_DownloadItem(ulong nPublishedFileID,
			[MarshalAs(UnmanagedType.U1)] bool bHighPriority) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_DownloadItem(_ptr, nPublishedFileID, bHighPriority);
		}

		public virtual bool ISteamUGC_BInitWorkshopForGameServer(
			uint unWorkshopDepotID,
			string pszFolder) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_BInitWorkshopForGameServer(_ptr, unWorkshopDepotID, pszFolder);
		}

		public virtual void ISteamUGC_SuspendDownloads([MarshalAs(UnmanagedType.U1)] bool bSuspend) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			Native.SteamAPI_ISteamUGC_SuspendDownloads(_ptr, bSuspend);
		}

		public virtual SteamAPICall_t ISteamUGC_StartPlaytimeTracking(
			IntPtr pvecPublishedFileID,
			uint unNumPublishedFileIDs) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_StartPlaytimeTracking(_ptr, pvecPublishedFileID, unNumPublishedFileIDs);
		}

		public virtual SteamAPICall_t ISteamUGC_StopPlaytimeTracking(
			IntPtr pvecPublishedFileID,
			uint unNumPublishedFileIDs) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_StopPlaytimeTracking(_ptr, pvecPublishedFileID, unNumPublishedFileIDs);
		}

		public virtual SteamAPICall_t ISteamUGC_StopPlaytimeTrackingForAllItems() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUGC_StopPlaytimeTrackingForAllItems(_ptr)
				: throw new Exception("ISteamUGC _ptr is null!");
		}

		public virtual SteamAPICall_t ISteamUGC_AddDependency(
			ulong nParentPublishedFileID,
			ulong nChildPublishedFileID) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_AddDependency(_ptr, nParentPublishedFileID, nChildPublishedFileID);
		}

		public virtual SteamAPICall_t ISteamUGC_RemoveDependency(
			ulong nParentPublishedFileID,
			ulong nChildPublishedFileID) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_RemoveDependency(_ptr, nParentPublishedFileID, nChildPublishedFileID);
		}

		public virtual uint ISteamAppList_GetNumInstalledApps() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamAppList_GetNumInstalledApps(_ptr)
				: throw new Exception("ISteamAppList _ptr is null!");
		}

		public virtual uint ISteamAppList_GetInstalledApps(IntPtr pvecAppID, uint unMaxAppIDs) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamAppList _ptr is null!");
			return Native.SteamAPI_ISteamAppList_GetInstalledApps(_ptr, pvecAppID, unMaxAppIDs);
		}

		public virtual int ISteamAppList_GetAppName(
			uint nAppID,
			StringBuilder pchName,
			int cchNameMax) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamAppList _ptr is null!");
			return Native.SteamAPI_ISteamAppList_GetAppName(_ptr, nAppID, pchName, cchNameMax);
		}

		public virtual int ISteamAppList_GetAppInstallDir(
			uint nAppID,
			StringBuilder pchDirectory,
			int cchNameMax) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamAppList _ptr is null!");
			return Native.SteamAPI_ISteamAppList_GetAppInstallDir(_ptr, nAppID, pchDirectory, cchNameMax);
		}

		public virtual int ISteamAppList_GetAppBuildId(uint nAppID) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamAppList_GetAppBuildId(_ptr, nAppID)
				: throw new Exception("ISteamAppList _ptr is null!");
		}

		public virtual void ISteamHTMLSurface_DestructISteamHTMLSurface() {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTMLSurface _ptr is null!");
			Native.SteamAPI_ISteamHTMLSurface_DestructISteamHTMLSurface(_ptr);
		}

		public virtual bool ISteamHTMLSurface_Init() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamHTMLSurface_Init(_ptr)
				: throw new Exception("ISteamHTMLSurface _ptr is null!");
		}

		public virtual bool ISteamHTMLSurface_Shutdown() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamHTMLSurface_Shutdown(_ptr)
				: throw new Exception("ISteamHTMLSurface _ptr is null!");
		}

		public virtual SteamAPICall_t ISteamHTMLSurface_CreateBrowser(
			string pchUserAgent,
			string pchUserCSS) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTMLSurface _ptr is null!");
			return Native.SteamAPI_ISteamHTMLSurface_CreateBrowser(_ptr, pchUserAgent, pchUserCSS);
		}

		public virtual void ISteamHTMLSurface_RemoveBrowser(uint unBrowserHandle) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTMLSurface _ptr is null!");
			Native.SteamAPI_ISteamHTMLSurface_RemoveBrowser(_ptr, unBrowserHandle);
		}

		public virtual void ISteamHTMLSurface_LoadURL(
			uint unBrowserHandle,
			string pchURL,
			string pchPostData) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTMLSurface _ptr is null!");
			Native.SteamAPI_ISteamHTMLSurface_LoadURL(_ptr, unBrowserHandle, pchURL, pchPostData);
		}

		public virtual void ISteamHTMLSurface_SetSize(
			uint unBrowserHandle,
			uint unWidth,
			uint unHeight) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTMLSurface _ptr is null!");
			Native.SteamAPI_ISteamHTMLSurface_SetSize(_ptr, unBrowserHandle, unWidth, unHeight);
		}

		public virtual void ISteamHTMLSurface_StopLoad(uint unBrowserHandle) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTMLSurface _ptr is null!");
			Native.SteamAPI_ISteamHTMLSurface_StopLoad(_ptr, unBrowserHandle);
		}

		public virtual void ISteamHTMLSurface_Reload(uint unBrowserHandle) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTMLSurface _ptr is null!");
			Native.SteamAPI_ISteamHTMLSurface_Reload(_ptr, unBrowserHandle);
		}

		public virtual void ISteamHTMLSurface_GoBack(uint unBrowserHandle) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTMLSurface _ptr is null!");
			Native.SteamAPI_ISteamHTMLSurface_GoBack(_ptr, unBrowserHandle);
		}

		public virtual void ISteamHTMLSurface_GoForward(uint unBrowserHandle) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTMLSurface _ptr is null!");
			Native.SteamAPI_ISteamHTMLSurface_GoForward(_ptr, unBrowserHandle);
		}

		public virtual void ISteamHTMLSurface_AddHeader(
			uint unBrowserHandle,
			string pchKey,
			string pchValue) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTMLSurface _ptr is null!");
			Native.SteamAPI_ISteamHTMLSurface_AddHeader(_ptr, unBrowserHandle, pchKey, pchValue);
		}

		public virtual void ISteamHTMLSurface_ExecuteJavascript(
			uint unBrowserHandle,
			string pchScript) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTMLSurface _ptr is null!");
			Native.SteamAPI_ISteamHTMLSurface_ExecuteJavascript(_ptr, unBrowserHandle, pchScript);
		}

		public virtual void ISteamHTMLSurface_MouseUp(
			uint unBrowserHandle,
			HTMLMouseButton eMouseButton) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTMLSurface _ptr is null!");
			Native.SteamAPI_ISteamHTMLSurface_MouseUp(_ptr, unBrowserHandle, eMouseButton);
		}

		public virtual void ISteamHTMLSurface_MouseDown(
			uint unBrowserHandle,
			HTMLMouseButton eMouseButton) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTMLSurface _ptr is null!");
			Native.SteamAPI_ISteamHTMLSurface_MouseDown(_ptr, unBrowserHandle, eMouseButton);
		}

		public virtual void ISteamHTMLSurface_MouseDoubleClick(
			uint unBrowserHandle,
			HTMLMouseButton eMouseButton) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTMLSurface _ptr is null!");
			Native.SteamAPI_ISteamHTMLSurface_MouseDoubleClick(_ptr, unBrowserHandle, eMouseButton);
		}

		public virtual void ISteamHTMLSurface_MouseMove(uint unBrowserHandle, int x, int y) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTMLSurface _ptr is null!");
			Native.SteamAPI_ISteamHTMLSurface_MouseMove(_ptr, unBrowserHandle, x, y);
		}

		public virtual void ISteamHTMLSurface_MouseWheel(uint unBrowserHandle, int nDelta) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTMLSurface _ptr is null!");
			Native.SteamAPI_ISteamHTMLSurface_MouseWheel(_ptr, unBrowserHandle, nDelta);
		}

		public virtual void ISteamHTMLSurface_KeyDown(
			uint unBrowserHandle,
			uint nNativeKeyCode,
			HTMLKeyModifiers eHTMLKeyModifiers) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTMLSurface _ptr is null!");
			Native.SteamAPI_ISteamHTMLSurface_KeyDown(_ptr, unBrowserHandle, nNativeKeyCode, eHTMLKeyModifiers);
		}

		public virtual void ISteamHTMLSurface_KeyUp(
			uint unBrowserHandle,
			uint nNativeKeyCode,
			HTMLKeyModifiers eHTMLKeyModifiers) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTMLSurface _ptr is null!");
			Native.SteamAPI_ISteamHTMLSurface_KeyUp(_ptr, unBrowserHandle, nNativeKeyCode, eHTMLKeyModifiers);
		}

		public virtual void ISteamHTMLSurface_KeyChar(
			uint unBrowserHandle,
			uint cUnicodeChar,
			HTMLKeyModifiers eHTMLKeyModifiers) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTMLSurface _ptr is null!");
			Native.SteamAPI_ISteamHTMLSurface_KeyChar(_ptr, unBrowserHandle, cUnicodeChar, eHTMLKeyModifiers);
		}

		public virtual void ISteamHTMLSurface_SetHorizontalScroll(
			uint unBrowserHandle,
			uint nAbsolutePixelScroll) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTMLSurface _ptr is null!");
			Native.SteamAPI_ISteamHTMLSurface_SetHorizontalScroll(_ptr, unBrowserHandle, nAbsolutePixelScroll);
		}

		public virtual void ISteamHTMLSurface_SetVerticalScroll(
			uint unBrowserHandle,
			uint nAbsolutePixelScroll) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTMLSurface _ptr is null!");
			Native.SteamAPI_ISteamHTMLSurface_SetVerticalScroll(_ptr, unBrowserHandle, nAbsolutePixelScroll);
		}

		public virtual void ISteamHTMLSurface_SetKeyFocus(uint unBrowserHandle,
			[MarshalAs(UnmanagedType.U1)] bool bHasKeyFocus) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTMLSurface _ptr is null!");
			Native.SteamAPI_ISteamHTMLSurface_SetKeyFocus(_ptr, unBrowserHandle, bHasKeyFocus);
		}

		public virtual void ISteamHTMLSurface_ViewSource(uint unBrowserHandle) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTMLSurface _ptr is null!");
			Native.SteamAPI_ISteamHTMLSurface_ViewSource(_ptr, unBrowserHandle);
		}

		public virtual void ISteamHTMLSurface_CopyToClipboard(uint unBrowserHandle) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTMLSurface _ptr is null!");
			Native.SteamAPI_ISteamHTMLSurface_CopyToClipboard(_ptr, unBrowserHandle);
		}

		public virtual void ISteamHTMLSurface_PasteFromClipboard(uint unBrowserHandle) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTMLSurface _ptr is null!");
			Native.SteamAPI_ISteamHTMLSurface_PasteFromClipboard(_ptr, unBrowserHandle);
		}

		public virtual void ISteamHTMLSurface_Find(
			uint unBrowserHandle,
			string pchSearchStr,
			[MarshalAs(UnmanagedType.U1)] bool bCurrentlyInFind,
			[MarshalAs(UnmanagedType.U1)] bool bReverse) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTMLSurface _ptr is null!");
			Native.SteamAPI_ISteamHTMLSurface_Find(_ptr, unBrowserHandle, pchSearchStr, bCurrentlyInFind, bReverse);
		}

		public virtual void ISteamHTMLSurface_StopFind(uint unBrowserHandle) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTMLSurface _ptr is null!");
			Native.SteamAPI_ISteamHTMLSurface_StopFind(_ptr, unBrowserHandle);
		}

		public virtual void ISteamHTMLSurface_GetLinkAtPosition(uint unBrowserHandle, int x, int y) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTMLSurface _ptr is null!");
			Native.SteamAPI_ISteamHTMLSurface_GetLinkAtPosition(_ptr, unBrowserHandle, x, y);
		}

		public virtual void ISteamHTMLSurface_SetCookie(
			string pchHostname,
			string pchKey,
			string pchValue,
			string pchPath,
			uint nExpires,
			[MarshalAs(UnmanagedType.U1)] bool bSecure,
			[MarshalAs(UnmanagedType.U1)] bool bHTTPOnly) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTMLSurface _ptr is null!");
			Native.SteamAPI_ISteamHTMLSurface_SetCookie(_ptr, pchHostname, pchKey, pchValue, pchPath, nExpires, bSecure,
				bHTTPOnly);
		}

		public virtual void ISteamHTMLSurface_SetPageScaleFactor(
			uint unBrowserHandle,
			float flZoom,
			int nPointX,
			int nPointY) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTMLSurface _ptr is null!");
			Native.SteamAPI_ISteamHTMLSurface_SetPageScaleFactor(_ptr, unBrowserHandle, flZoom, nPointX, nPointY);
		}

		public virtual void ISteamHTMLSurface_SetBackgroundMode(
			uint unBrowserHandle,
			[MarshalAs(UnmanagedType.U1)] bool bBackgroundMode) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTMLSurface _ptr is null!");
			Native.SteamAPI_ISteamHTMLSurface_SetBackgroundMode(_ptr, unBrowserHandle, bBackgroundMode);
		}

		public virtual void ISteamHTMLSurface_AllowStartRequest(uint unBrowserHandle,
			[MarshalAs(UnmanagedType.U1)] bool bAllowed) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTMLSurface _ptr is null!");
			Native.SteamAPI_ISteamHTMLSurface_AllowStartRequest(_ptr, unBrowserHandle, bAllowed);
		}

		public virtual void ISteamHTMLSurface_JSDialogResponse(uint unBrowserHandle,
			[MarshalAs(UnmanagedType.U1)] bool bResult) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTMLSurface _ptr is null!");
			Native.SteamAPI_ISteamHTMLSurface_JSDialogResponse(_ptr, unBrowserHandle, bResult);
		}

		public virtual Result ISteamInventory_GetResultStatus(int resultHandle) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamInventory_GetResultStatus(_ptr, resultHandle)
				: throw new Exception("ISteamInventory _ptr is null!");
		}

		public virtual bool ISteamInventory_GetResultItems(
			int resultHandle,
			IntPtr pOutItemsArray,
			out uint punOutItemsArraySize) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamInventory _ptr is null!");
			return Native.SteamAPI_ISteamInventory_GetResultItems(_ptr, resultHandle, pOutItemsArray,
				out punOutItemsArraySize);
		}

		public virtual bool ISteamInventory_GetResultItemProperty(
			int resultHandle,
			uint unItemIndex,
			string pchPropertyName,
			StringBuilder pchValueBuffer,
			out uint punValueBufferSizeOut) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamInventory _ptr is null!");
			return Native.SteamAPI_ISteamInventory_GetResultItemProperty(_ptr, resultHandle, unItemIndex,
				pchPropertyName, pchValueBuffer, out punValueBufferSizeOut);
		}

		public virtual uint ISteamInventory_GetResultTimestamp(int resultHandle) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamInventory_GetResultTimestamp(_ptr, resultHandle)
				: throw new Exception("ISteamInventory _ptr is null!");
		}

		public virtual bool ISteamInventory_CheckResultSteamID(
			int resultHandle,
			ulong steamIDExpected) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamInventory _ptr is null!");
			return Native.SteamAPI_ISteamInventory_CheckResultSteamID(_ptr, resultHandle, steamIDExpected);
		}

		public virtual void ISteamInventory_DestroyResult(int resultHandle) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamInventory _ptr is null!");
			Native.SteamAPI_ISteamInventory_DestroyResult(_ptr, resultHandle);
		}

		public virtual bool ISteamInventory_GetAllItems(ref int pResultHandle) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamInventory_GetAllItems(_ptr, ref pResultHandle)
				: throw new Exception("ISteamInventory _ptr is null!");
		}

		public virtual bool ISteamInventory_GetItemsByID(
			ref int pResultHandle,
			ulong[] pInstanceIDs,
			uint unCountInstanceIDs) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamInventory _ptr is null!");
			return Native.SteamAPI_ISteamInventory_GetItemsByID(_ptr, ref pResultHandle, pInstanceIDs,
				unCountInstanceIDs);
		}

		public virtual bool ISteamInventory_SerializeResult(
			int resultHandle,
			IntPtr pOutBuffer,
			out uint punOutBufferSize) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamInventory _ptr is null!");
			return Native.SteamAPI_ISteamInventory_SerializeResult(_ptr, resultHandle, pOutBuffer,
				out punOutBufferSize);
		}

		public virtual bool ISteamInventory_DeserializeResult(
			ref int pOutResultHandle,
			IntPtr pBuffer,
			uint unBufferSize,
			[MarshalAs(UnmanagedType.U1)] bool bRESERVED_MUST_BE_FALSE) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamInventory _ptr is null!");
			return Native.SteamAPI_ISteamInventory_DeserializeResult(_ptr, ref pOutResultHandle, pBuffer, unBufferSize,
				bRESERVED_MUST_BE_FALSE);
		}

		public virtual bool ISteamInventory_GenerateItems(
			ref int pResultHandle,
			int[] pArrayItemDefs,
			uint[] punArrayQuantity,
			uint unArrayLength) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamInventory _ptr is null!");
			return Native.SteamAPI_ISteamInventory_GenerateItems(_ptr, ref pResultHandle, pArrayItemDefs,
				punArrayQuantity, unArrayLength);
		}

		public virtual bool ISteamInventory_GrantPromoItems(ref int pResultHandle) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamInventory_GrantPromoItems(_ptr, ref pResultHandle)
				: throw new Exception("ISteamInventory _ptr is null!");
		}

		public virtual bool ISteamInventory_AddPromoItem(ref int pResultHandle, int itemDef) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamInventory _ptr is null!");
			return Native.SteamAPI_ISteamInventory_AddPromoItem(_ptr, ref pResultHandle, itemDef);
		}

		public virtual bool ISteamInventory_AddPromoItems(
			ref int pResultHandle,
			int[] pArrayItemDefs,
			uint unArrayLength) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamInventory _ptr is null!");
			return Native.SteamAPI_ISteamInventory_AddPromoItems(_ptr, ref pResultHandle, pArrayItemDefs,
				unArrayLength);
		}

		public virtual bool ISteamInventory_ConsumeItem(
			ref int pResultHandle,
			ulong itemConsume,
			uint unQuantity) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamInventory _ptr is null!");
			return Native.SteamAPI_ISteamInventory_ConsumeItem(_ptr, ref pResultHandle, itemConsume, unQuantity);
		}

		public virtual bool ISteamInventory_ExchangeItems(
			ref int pResultHandle,
			int[] pArrayGenerate,
			uint[] punArrayGenerateQuantity,
			uint unArrayGenerateLength,
			ulong[] pArrayDestroy,
			uint[] punArrayDestroyQuantity,
			uint unArrayDestroyLength) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamInventory _ptr is null!");
			return Native.SteamAPI_ISteamInventory_ExchangeItems(_ptr, ref pResultHandle, pArrayGenerate,
				punArrayGenerateQuantity, unArrayGenerateLength, pArrayDestroy, punArrayDestroyQuantity,
				unArrayDestroyLength);
		}

		public virtual bool ISteamInventory_TransferItemQuantity(
			ref int pResultHandle,
			ulong itemIdSource,
			uint unQuantity,
			ulong itemIdDest) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamInventory _ptr is null!");
			return Native.SteamAPI_ISteamInventory_TransferItemQuantity(_ptr, ref pResultHandle, itemIdSource,
				unQuantity, itemIdDest);
		}

		public virtual void ISteamInventory_SendItemDropHeartbeat() {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamInventory _ptr is null!");
			Native.SteamAPI_ISteamInventory_SendItemDropHeartbeat(_ptr);
		}

		public virtual bool ISteamInventory_TriggerItemDrop(
			ref int pResultHandle,
			int dropListDefinition) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamInventory _ptr is null!");
			return Native.SteamAPI_ISteamInventory_TriggerItemDrop(_ptr, ref pResultHandle, dropListDefinition);
		}

		public virtual bool ISteamInventory_TradeItems(
			ref int pResultHandle,
			ulong steamIDTradePartner,
			ulong[] pArrayGive,
			uint[] pArrayGiveQuantity,
			uint nArrayGiveLength,
			ulong[] pArrayGet,
			uint[] pArrayGetQuantity,
			uint nArrayGetLength) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamInventory _ptr is null!");
			return Native.SteamAPI_ISteamInventory_TradeItems(_ptr, ref pResultHandle, steamIDTradePartner, pArrayGive,
				pArrayGiveQuantity, nArrayGiveLength, pArrayGet, pArrayGetQuantity, nArrayGetLength);
		}

		public virtual bool ISteamInventory_LoadItemDefinitions() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamInventory_LoadItemDefinitions(_ptr)
				: throw new Exception("ISteamInventory _ptr is null!");
		}

		public virtual bool ISteamInventory_GetItemDefinitionIDs(
			IntPtr pItemDefIDs,
			out uint punItemDefIDsArraySize) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamInventory_GetItemDefinitionIDs(_ptr, pItemDefIDs, out punItemDefIDsArraySize)
				: throw new Exception("ISteamInventory _ptr is null!");
		}

		public virtual bool ISteamInventory_GetItemDefinitionProperty(
			int iDefinition,
			string pchPropertyName,
			StringBuilder pchValueBuffer,
			out uint punValueBufferSizeOut) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamInventory _ptr is null!");
			return Native.SteamAPI_ISteamInventory_GetItemDefinitionProperty(_ptr, iDefinition, pchPropertyName,
				pchValueBuffer, out punValueBufferSizeOut);
		}

		public virtual SteamAPICall_t ISteamInventory_RequestEligiblePromoItemDefinitionsIDs(
			ulong steamID) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamInventory_RequestEligiblePromoItemDefinitionsIDs(_ptr, steamID)
				: throw new Exception("ISteamInventory _ptr is null!");
		}

		public virtual bool ISteamInventory_GetEligiblePromoItemDefinitionIDs(
			ulong steamID,
			IntPtr pItemDefIDs,
			out uint punItemDefIDsArraySize) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamInventory _ptr is null!");
			return Native.SteamAPI_ISteamInventory_GetEligiblePromoItemDefinitionIDs(_ptr, steamID, pItemDefIDs,
				out punItemDefIDsArraySize);
		}

		public virtual void ISteamVideo_GetVideoURL(uint unVideoAppID) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamVideo _ptr is null!");
			Native.SteamAPI_ISteamVideo_GetVideoURL(_ptr, unVideoAppID);
		}

		public virtual bool ISteamVideo_IsBroadcasting(IntPtr pnNumViewers) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamVideo_IsBroadcasting(_ptr, pnNumViewers)
				: throw new Exception("ISteamVideo _ptr is null!");
		}

		public virtual void ISteamVideo_GetOPFSettings(uint unVideoAppID) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamVideo _ptr is null!");
			Native.SteamAPI_ISteamVideo_GetOPFSettings(_ptr, unVideoAppID);
		}

		public virtual bool ISteamVideo_GetOPFStringForApp(
			uint unVideoAppID,
			StringBuilder pchBuffer,
			out int pnBufferSize) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamVideo _ptr is null!");
			return Native.SteamAPI_ISteamVideo_GetOPFStringForApp(_ptr, unVideoAppID, pchBuffer, out pnBufferSize);
		}

		public virtual bool ISteamGameServer_InitGameServer(
			uint unIP,
			ushort usGamePort,
			ushort usQueryPort,
			uint unFlags,
			uint nGameAppId,
			string pchVersionString) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServer _ptr is null!");
			return Native.SteamAPI_ISteamGameServer_InitGameServer(_ptr, unIP, usGamePort, usQueryPort, unFlags,
				nGameAppId, pchVersionString);
		}

		public virtual void ISteamGameServer_SetProduct(string pszProduct) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServer _ptr is null!");
			Native.SteamAPI_ISteamGameServer_SetProduct(_ptr, pszProduct);
		}

		public virtual void ISteamGameServer_SetGameDescription(string pszGameDescription) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServer _ptr is null!");
			Native.SteamAPI_ISteamGameServer_SetGameDescription(_ptr, pszGameDescription);
		}

		public virtual void ISteamGameServer_SetModDir(string pszModDir) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServer _ptr is null!");
			Native.SteamAPI_ISteamGameServer_SetModDir(_ptr, pszModDir);
		}

		public virtual void ISteamGameServer_SetDedicatedServer([MarshalAs(UnmanagedType.U1)] bool bDedicated) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServer _ptr is null!");
			Native.SteamAPI_ISteamGameServer_SetDedicatedServer(_ptr, bDedicated);
		}

		public virtual void ISteamGameServer_LogOn(string pszToken) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServer _ptr is null!");
			Native.SteamAPI_ISteamGameServer_LogOn(_ptr, pszToken);
		}

		public virtual void ISteamGameServer_LogOnAnonymous() {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServer _ptr is null!");
			Native.SteamAPI_ISteamGameServer_LogOnAnonymous(_ptr);
		}

		public virtual void ISteamGameServer_LogOff() {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServer _ptr is null!");
			Native.SteamAPI_ISteamGameServer_LogOff(_ptr);
		}

		public virtual bool ISteamGameServer_BLoggedOn() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamGameServer_BLoggedOn(_ptr)
				: throw new Exception("ISteamGameServer _ptr is null!");
		}

		public virtual bool ISteamGameServer_BSecure() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamGameServer_BSecure(_ptr)
				: throw new Exception("ISteamGameServer _ptr is null!");
		}

		public virtual CSteamID ISteamGameServer_GetSteamID() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamGameServer_GetSteamID(_ptr)
				: throw new Exception("ISteamGameServer _ptr is null!");
		}

		public virtual bool ISteamGameServer_WasRestartRequested() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamGameServer_WasRestartRequested(_ptr)
				: throw new Exception("ISteamGameServer _ptr is null!");
		}

		public virtual void ISteamGameServer_SetMaxPlayerCount(int cPlayersMax) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServer _ptr is null!");
			Native.SteamAPI_ISteamGameServer_SetMaxPlayerCount(_ptr, cPlayersMax);
		}

		public virtual void ISteamGameServer_SetBotPlayerCount(int cBotplayers) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServer _ptr is null!");
			Native.SteamAPI_ISteamGameServer_SetBotPlayerCount(_ptr, cBotplayers);
		}

		public virtual void ISteamGameServer_SetServerName(string pszServerName) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServer _ptr is null!");
			Native.SteamAPI_ISteamGameServer_SetServerName(_ptr, pszServerName);
		}

		public virtual void ISteamGameServer_SetMapName(string pszMapName) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServer _ptr is null!");
			Native.SteamAPI_ISteamGameServer_SetMapName(_ptr, pszMapName);
		}

		public virtual void
			ISteamGameServer_SetPasswordProtected([MarshalAs(UnmanagedType.U1)] bool bPasswordProtected) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServer _ptr is null!");
			Native.SteamAPI_ISteamGameServer_SetPasswordProtected(_ptr, bPasswordProtected);
		}

		public virtual void ISteamGameServer_SetSpectatorPort(ushort unSpectatorPort) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServer _ptr is null!");
			Native.SteamAPI_ISteamGameServer_SetSpectatorPort(_ptr, unSpectatorPort);
		}

		public virtual void ISteamGameServer_SetSpectatorServerName(string pszSpectatorServerName) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServer _ptr is null!");
			Native.SteamAPI_ISteamGameServer_SetSpectatorServerName(_ptr, pszSpectatorServerName);
		}

		public virtual void ISteamGameServer_ClearAllKeyValues() {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServer _ptr is null!");
			Native.SteamAPI_ISteamGameServer_ClearAllKeyValues(_ptr);
		}

		public virtual void ISteamGameServer_SetKeyValue(string pKey, string pValue) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServer _ptr is null!");
			Native.SteamAPI_ISteamGameServer_SetKeyValue(_ptr, pKey, pValue);
		}

		public virtual void ISteamGameServer_SetGameTags(string pchGameTags) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServer _ptr is null!");
			Native.SteamAPI_ISteamGameServer_SetGameTags(_ptr, pchGameTags);
		}

		public virtual void ISteamGameServer_SetGameData(string pchGameData) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServer _ptr is null!");
			Native.SteamAPI_ISteamGameServer_SetGameData(_ptr, pchGameData);
		}

		public virtual void ISteamGameServer_SetRegion(string pszRegion) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServer _ptr is null!");
			Native.SteamAPI_ISteamGameServer_SetRegion(_ptr, pszRegion);
		}

		public virtual bool ISteamGameServer_SendUserConnectAndAuthenticate(
			uint unIPClient,
			IntPtr pvAuthBlob,
			uint cubAuthBlobSize,
			out ulong pSteamIDUser) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServer _ptr is null!");
			return Native.SteamAPI_ISteamGameServer_SendUserConnectAndAuthenticate(_ptr, unIPClient, pvAuthBlob,
				cubAuthBlobSize, out pSteamIDUser);
		}

		public virtual CSteamID ISteamGameServer_CreateUnauthenticatedUserConnection() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamGameServer_CreateUnauthenticatedUserConnection(_ptr)
				: throw new Exception("ISteamGameServer _ptr is null!");
		}

		public virtual void ISteamGameServer_SendUserDisconnect(ulong steamIDUser) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServer _ptr is null!");
			Native.SteamAPI_ISteamGameServer_SendUserDisconnect(_ptr, steamIDUser);
		}

		public virtual bool ISteamGameServer_BUpdateUserData(
			ulong steamIDUser,
			string pchPlayerName,
			uint uScore) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServer _ptr is null!");
			return Native.SteamAPI_ISteamGameServer_BUpdateUserData(_ptr, steamIDUser, pchPlayerName, uScore);
		}

		public virtual HAuthTicket ISteamGameServer_GetAuthSessionTicket(
			IntPtr pTicket,
			int cbMaxTicket,
			out uint pcbTicket) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServer _ptr is null!");
			return Native.SteamAPI_ISteamGameServer_GetAuthSessionTicket(_ptr, pTicket, cbMaxTicket, out pcbTicket);
		}

		public virtual BeginAuthSessionResult ISteamGameServer_BeginAuthSession(
			IntPtr pAuthTicket,
			int cbAuthTicket,
			ulong steamID) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServer _ptr is null!");
			return Native.SteamAPI_ISteamGameServer_BeginAuthSession(_ptr, pAuthTicket, cbAuthTicket, steamID);
		}

		public virtual void ISteamGameServer_EndAuthSession(ulong steamID) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServer _ptr is null!");
			Native.SteamAPI_ISteamGameServer_EndAuthSession(_ptr, steamID);
		}

		public virtual void ISteamGameServer_CancelAuthTicket(uint hAuthTicket) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServer _ptr is null!");
			Native.SteamAPI_ISteamGameServer_CancelAuthTicket(_ptr, hAuthTicket);
		}

		public virtual UserHasLicenseForAppResult ISteamGameServer_UserHasLicenseForApp(
			ulong steamID,
			uint appID) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServer _ptr is null!");
			return Native.SteamAPI_ISteamGameServer_UserHasLicenseForApp(_ptr, steamID, appID);
		}

		public virtual bool ISteamGameServer_RequestUserGroupStatus(
			ulong steamIDUser,
			ulong steamIDGroup) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServer _ptr is null!");
			return Native.SteamAPI_ISteamGameServer_RequestUserGroupStatus(_ptr, steamIDUser, steamIDGroup);
		}

		public virtual void ISteamGameServer_GetGameplayStats() {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServer _ptr is null!");
			Native.SteamAPI_ISteamGameServer_GetGameplayStats(_ptr);
		}

		public virtual SteamAPICall_t ISteamGameServer_GetServerReputation() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamGameServer_GetServerReputation(_ptr)
				: throw new Exception("ISteamGameServer _ptr is null!");
		}

		public virtual uint ISteamGameServer_GetPublicIP() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamGameServer_GetPublicIP(_ptr)
				: throw new Exception("ISteamGameServer _ptr is null!");
		}

		public virtual bool ISteamGameServer_HandleIncomingPacket(
			IntPtr pData,
			int cbData,
			uint srcIP,
			ushort srcPort) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServer _ptr is null!");
			return Native.SteamAPI_ISteamGameServer_HandleIncomingPacket(_ptr, pData, cbData, srcIP, srcPort);
		}

		public virtual int ISteamGameServer_GetNextOutgoingPacket(
			IntPtr pOut,
			int cbMaxOut,
			out uint pNetAdr,
			out ushort pPort) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServer _ptr is null!");
			return Native.SteamAPI_ISteamGameServer_GetNextOutgoingPacket(_ptr, pOut, cbMaxOut, out pNetAdr, out pPort);
		}

		public virtual void ISteamGameServer_EnableHeartbeats([MarshalAs(UnmanagedType.U1)] bool bActive) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServer _ptr is null!");
			Native.SteamAPI_ISteamGameServer_EnableHeartbeats(_ptr, bActive);
		}

		public virtual void ISteamGameServer_SetHeartbeatInterval(int iHeartbeatInterval) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServer _ptr is null!");
			Native.SteamAPI_ISteamGameServer_SetHeartbeatInterval(_ptr, iHeartbeatInterval);
		}

		public virtual void ISteamGameServer_ForceHeartbeat() {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServer _ptr is null!");
			Native.SteamAPI_ISteamGameServer_ForceHeartbeat(_ptr);
		}

		public virtual SteamAPICall_t ISteamGameServer_AssociateWithClan(ulong steamIDClan) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamGameServer_AssociateWithClan(_ptr, steamIDClan)
				: throw new Exception("ISteamGameServer _ptr is null!");
		}

		public virtual SteamAPICall_t ISteamGameServer_ComputeNewPlayerCompatibility(
			ulong steamIDNewPlayer) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamGameServer_ComputeNewPlayerCompatibility(_ptr, steamIDNewPlayer)
				: throw new Exception("ISteamGameServer _ptr is null!");
		}

		public virtual SteamAPICall_t ISteamGameServerStats_RequestUserStats(ulong steamIDUser) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamGameServerStats_RequestUserStats(_ptr, steamIDUser)
				: throw new Exception("ISteamGameServerStats _ptr is null!");
		}

		public virtual bool ISteamGameServerStats_GetUserStat(
			ulong steamIDUser,
			string pchName,
			out int pData) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServerStats _ptr is null!");
			return Native.SteamAPI_ISteamGameServerStats_GetUserStat(_ptr, steamIDUser, pchName, out pData);
		}

		public virtual bool ISteamGameServerStats_GetUserStat0(
			ulong steamIDUser,
			string pchName,
			out float pData) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServerStats _ptr is null!");
			return Native.SteamAPI_ISteamGameServerStats_GetUserStat0(_ptr, steamIDUser, pchName, out pData);
		}

		public virtual bool ISteamGameServerStats_GetUserAchievement(
			ulong steamIDUser,
			string pchName,
			[MarshalAs(UnmanagedType.U1)] ref bool pbAchieved) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServerStats _ptr is null!");
			return Native.SteamAPI_ISteamGameServerStats_GetUserAchievement(_ptr, steamIDUser, pchName, ref pbAchieved);
		}

		public virtual bool ISteamGameServerStats_SetUserStat(
			ulong steamIDUser,
			string pchName,
			int nData) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServerStats _ptr is null!");
			return Native.SteamAPI_ISteamGameServerStats_SetUserStat(_ptr, steamIDUser, pchName, nData);
		}

		public virtual bool ISteamGameServerStats_SetUserStat0(
			ulong steamIDUser,
			string pchName,
			float fData) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServerStats _ptr is null!");
			return Native.SteamAPI_ISteamGameServerStats_SetUserStat0(_ptr, steamIDUser, pchName, fData);
		}

		public virtual bool ISteamGameServerStats_UpdateUserAvgRateStat(
			ulong steamIDUser,
			string pchName,
			float flCountThisSession,
			double dSessionLength) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServerStats _ptr is null!");
			return Native.SteamAPI_ISteamGameServerStats_UpdateUserAvgRateStat(_ptr, steamIDUser, pchName,
				flCountThisSession, dSessionLength);
		}

		public virtual bool ISteamGameServerStats_SetUserAchievement(
			ulong steamIDUser,
			string pchName) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServerStats _ptr is null!");
			return Native.SteamAPI_ISteamGameServerStats_SetUserAchievement(_ptr, steamIDUser, pchName);
		}

		public virtual bool ISteamGameServerStats_ClearUserAchievement(
			ulong steamIDUser,
			string pchName) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServerStats _ptr is null!");
			return Native.SteamAPI_ISteamGameServerStats_ClearUserAchievement(_ptr, steamIDUser, pchName);
		}

		public virtual SteamAPICall_t ISteamGameServerStats_StoreUserStats(ulong steamIDUser) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamGameServerStats_StoreUserStats(_ptr, steamIDUser)
				: throw new Exception("ISteamGameServerStats _ptr is null!");
		}

		public virtual bool SteamApi_SteamAPI_Init() {
			return Native.SteamAPI_Init();
		}

		public virtual void SteamApi_SteamAPI_RunCallbacks() {
			Native.SteamAPI_RunCallbacks();
		}

		public virtual void SteamApi_SteamGameServer_RunCallbacks() {
			Native.SteamGameServer_RunCallbacks();
		}

		public virtual void SteamApi_SteamAPI_RegisterCallback(IntPtr pCallback, int callback) {
			Native.SteamAPI_RegisterCallback(pCallback, callback);
		}

		public virtual void SteamApi_SteamAPI_UnregisterCallback(IntPtr pCallback) {
			Native.SteamAPI_UnregisterCallback(pCallback);
		}

		public virtual void SteamApi_SteamAPI_RegisterCallResult(IntPtr pCallback, ulong callback) {
			Native.SteamAPI_RegisterCallResult(pCallback, callback);
		}

		public virtual void SteamApi_SteamAPI_UnregisterCallResult(IntPtr pCallback, ulong callback) {
			Native.SteamAPI_UnregisterCallResult(pCallback, callback);
		}

		public virtual bool SteamApi_SteamInternal_GameServer_Init(
			uint unIP,
			ushort usPort,
			ushort usGamePort,
			ushort usQueryPort,
			int eServerMode,
			string pchVersionString) {
			return Native.SteamInternal_GameServer_Init(unIP, usPort, usGamePort, usQueryPort, eServerMode,
				pchVersionString);
		}

		public virtual void SteamApi_SteamAPI_Shutdown() {
			Native.SteamAPI_Shutdown();
		}

		public virtual void SteamApi_SteamGameServer_Shutdown() {
			Native.SteamGameServer_Shutdown();
		}

		public virtual HSteamUser SteamApi_SteamAPI_GetHSteamUser() {
			return Native.SteamAPI_GetHSteamUser();
		}

		public virtual HSteamPipe SteamApi_SteamAPI_GetHSteamPipe() {
			return Native.SteamAPI_GetHSteamPipe();
		}

		public virtual HSteamUser SteamApi_SteamGameServer_GetHSteamUser() {
			return Native.SteamGameServer_GetHSteamUser();
		}

		public virtual HSteamPipe SteamApi_SteamGameServer_GetHSteamPipe() {
			return Native.SteamGameServer_GetHSteamPipe();
		}

		public virtual IntPtr SteamApi_SteamInternal_CreateInterface(string version) {
			return Native.SteamInternal_CreateInterface(version);
		}

		public virtual bool SteamApi_SteamAPI_RestartAppIfNecessary(uint unOwnAppID) {
			return Native.SteamAPI_RestartAppIfNecessary(unOwnAppID);
		}

		internal static class Native {
			[DllImport("libsteam_api64.so")]
			internal static extern HSteamPipe SteamAPI_ISteamClient_CreateSteamPipe(IntPtr ISteamClient);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamClient_BReleaseSteamPipe(
				IntPtr ISteamClient,
				int hSteamPipe);

			[DllImport("libsteam_api64.so")]
			internal static extern HSteamUser SteamAPI_ISteamClient_ConnectToGlobalUser(
				IntPtr ISteamClient,
				int hSteamPipe);

			[DllImport("libsteam_api64.so")]
			internal static extern HSteamUser SteamAPI_ISteamClient_CreateLocalUser(
				IntPtr ISteamClient,
				out int phSteamPipe,
				AccountType eAccountType);

			[DllImport("libsteam_api64.so")]
			internal static extern void SteamAPI_ISteamClient_ReleaseUser(
				IntPtr ISteamClient,
				int hSteamPipe,
				int hUser);

			[DllImport("libsteam_api64.so")]
			internal static extern IntPtr SteamAPI_ISteamClient_GetISteamUser(
				IntPtr ISteamClient,
				int hSteamUser,
				int hSteamPipe,
				string pchVersion);

			[DllImport("libsteam_api64.so")]
			internal static extern IntPtr SteamAPI_ISteamClient_GetISteamGameServer(
				IntPtr ISteamClient,
				int hSteamUser,
				int hSteamPipe,
				string pchVersion);

			[DllImport("libsteam_api64.so")]
			internal static extern void SteamAPI_ISteamClient_SetLocalIPBinding(
				IntPtr ISteamClient,
				uint unIP,
				ushort usPort);

			[DllImport("libsteam_api64.so")]
			internal static extern IntPtr SteamAPI_ISteamClient_GetISteamFriends(
				IntPtr ISteamClient,
				int hSteamUser,
				int hSteamPipe,
				string pchVersion);

			[DllImport("libsteam_api64.so")]
			internal static extern IntPtr SteamAPI_ISteamClient_GetISteamUtils(
				IntPtr ISteamClient,
				int hSteamPipe,
				string pchVersion);

			[DllImport("libsteam_api64.so")]
			internal static extern IntPtr SteamAPI_ISteamClient_GetISteamMatchmaking(
				IntPtr ISteamClient,
				int hSteamUser,
				int hSteamPipe,
				string pchVersion);

			[DllImport("libsteam_api64.so")]
			internal static extern IntPtr SteamAPI_ISteamClient_GetISteamMatchmakingServers(
				IntPtr ISteamClient,
				int hSteamUser,
				int hSteamPipe,
				string pchVersion);

			[DllImport("libsteam_api64.so")]
			internal static extern IntPtr SteamAPI_ISteamClient_GetISteamGenericInterface(
				IntPtr ISteamClient,
				int hSteamUser,
				int hSteamPipe,
				string pchVersion);

			[DllImport("libsteam_api64.so")]
			internal static extern IntPtr SteamAPI_ISteamClient_GetISteamUserStats(
				IntPtr ISteamClient,
				int hSteamUser,
				int hSteamPipe,
				string pchVersion);

			[DllImport("libsteam_api64.so")]
			internal static extern IntPtr SteamAPI_ISteamClient_GetISteamGameServerStats(
				IntPtr ISteamClient,
				int hSteamuser,
				int hSteamPipe,
				string pchVersion);

			[DllImport("libsteam_api64.so")]
			internal static extern IntPtr SteamAPI_ISteamClient_GetISteamApps(
				IntPtr ISteamClient,
				int hSteamUser,
				int hSteamPipe,
				string pchVersion);

			[DllImport("libsteam_api64.so")]
			internal static extern IntPtr SteamAPI_ISteamClient_GetISteamNetworking(
				IntPtr ISteamClient,
				int hSteamUser,
				int hSteamPipe,
				string pchVersion);

			[DllImport("libsteam_api64.so")]
			internal static extern IntPtr SteamAPI_ISteamClient_GetISteamRemoteStorage(
				IntPtr ISteamClient,
				int hSteamuser,
				int hSteamPipe,
				string pchVersion);

			[DllImport("libsteam_api64.so")]
			internal static extern IntPtr SteamAPI_ISteamClient_GetISteamScreenshots(
				IntPtr ISteamClient,
				int hSteamuser,
				int hSteamPipe,
				string pchVersion);

			[DllImport("libsteam_api64.so")]
			internal static extern uint SteamAPI_ISteamClient_GetIPCCallCount(IntPtr ISteamClient);

			[DllImport("libsteam_api64.so")]
			internal static extern void SteamAPI_ISteamClient_SetWarningMessageHook(
				IntPtr ISteamClient,
				IntPtr pFunction);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamClient_BShutdownIfAllPipesClosed(
				IntPtr ISteamClient);

			[DllImport("libsteam_api64.so")]
			internal static extern IntPtr SteamAPI_ISteamClient_GetISteamHTTP(
				IntPtr ISteamClient,
				int hSteamuser,
				int hSteamPipe,
				string pchVersion);

			[DllImport("libsteam_api64.so")]
			internal static extern IntPtr SteamAPI_ISteamClient_GetISteamUnifiedMessages(
				IntPtr ISteamClient,
				int hSteamuser,
				int hSteamPipe,
				string pchVersion);

			[DllImport("libsteam_api64.so")]
			internal static extern IntPtr SteamAPI_ISteamClient_GetISteamController(
				IntPtr ISteamClient,
				int hSteamUser,
				int hSteamPipe,
				string pchVersion);

			[DllImport("libsteam_api64.so")]
			internal static extern IntPtr SteamAPI_ISteamClient_GetISteamUGC(
				IntPtr ISteamClient,
				int hSteamUser,
				int hSteamPipe,
				string pchVersion);

			[DllImport("libsteam_api64.so")]
			internal static extern IntPtr SteamAPI_ISteamClient_GetISteamAppList(
				IntPtr ISteamClient,
				int hSteamUser,
				int hSteamPipe,
				string pchVersion);

			[DllImport("libsteam_api64.so")]
			internal static extern IntPtr SteamAPI_ISteamClient_GetISteamMusic(
				IntPtr ISteamClient,
				int hSteamuser,
				int hSteamPipe,
				string pchVersion);

			[DllImport("libsteam_api64.so")]
			internal static extern IntPtr SteamAPI_ISteamClient_GetISteamMusicRemote(
				IntPtr ISteamClient,
				int hSteamuser,
				int hSteamPipe,
				string pchVersion);

			[DllImport("libsteam_api64.so")]
			internal static extern IntPtr SteamAPI_ISteamClient_GetISteamHTMLSurface(
				IntPtr ISteamClient,
				int hSteamuser,
				int hSteamPipe,
				string pchVersion);

			[DllImport("libsteam_api64.so")]
			internal static extern IntPtr SteamAPI_ISteamClient_GetISteamInventory(
				IntPtr ISteamClient,
				int hSteamuser,
				int hSteamPipe,
				string pchVersion);

			[DllImport("libsteam_api64.so")]
			internal static extern IntPtr SteamAPI_ISteamClient_GetISteamVideo(
				IntPtr ISteamClient,
				int hSteamuser,
				int hSteamPipe,
				string pchVersion);

			[DllImport("libsteam_api64.so")]
			internal static extern HSteamUser SteamAPI_ISteamUser_GetHSteamUser(IntPtr ISteamUser);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamUser_BLoggedOn(IntPtr ISteamUser);

			[DllImport("libsteam_api64.so")]
			internal static extern CSteamID SteamAPI_ISteamUser_GetSteamID(IntPtr ISteamUser);

			[DllImport("libsteam_api64.so")]
			internal static extern int SteamAPI_ISteamUser_InitiateGameConnection(
				IntPtr ISteamUser,
				IntPtr pAuthBlob,
				int cbMaxAuthBlob,
				ulong steamIDGameServer,
				uint unIPServer,
				ushort usPortServer,
				[MarshalAs(UnmanagedType.U1)] bool bSecure);

			[DllImport("libsteam_api64.so")]
			internal static extern void SteamAPI_ISteamUser_TerminateGameConnection(
				IntPtr ISteamUser,
				uint unIPServer,
				ushort usPortServer);

			[DllImport("libsteam_api64.so")]
			internal static extern void SteamAPI_ISteamUser_TrackAppUsageEvent(
				IntPtr ISteamUser,
				ulong gameID,
				int eAppUsageEvent,
				string pchExtraInfo);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamUser_GetUserDataFolder(
				IntPtr ISteamUser,
				StringBuilder pchBuffer,
				int cubBuffer);

			[DllImport("libsteam_api64.so")]
			internal static extern void SteamAPI_ISteamUser_StartVoiceRecording(IntPtr ISteamUser);

			[DllImport("libsteam_api64.so")]
			internal static extern void SteamAPI_ISteamUser_StopVoiceRecording(IntPtr ISteamUser);

			[DllImport("libsteam_api64.so")]
			internal static extern VoiceResult SteamAPI_ISteamUser_GetAvailableVoice(
				IntPtr ISteamUser,
				out uint pcbCompressed,
				out uint pcbUncompressed_Deprecated,
				uint nUncompressedVoiceDesiredSampleRate_Deprecated);

			[DllImport("libsteam_api64.so")]
			internal static extern VoiceResult SteamAPI_ISteamUser_GetVoice(
				IntPtr ISteamUser,
				[MarshalAs(UnmanagedType.U1)] bool bWantCompressed,
				IntPtr pDestBuffer,
				uint cbDestBufferSize,
				out uint nBytesWritten,
				[MarshalAs(UnmanagedType.U1)] bool bWantUncompressed_Deprecated,
				IntPtr pUncompressedDestBuffer_Deprecated,
				uint cbUncompressedDestBufferSize_Deprecated,
				out uint nUncompressBytesWritten_Deprecated,
				uint nUncompressedVoiceDesiredSampleRate_Deprecated);

			[DllImport("libsteam_api64.so")]
			internal static extern VoiceResult SteamAPI_ISteamUser_DecompressVoice(
				IntPtr ISteamUser,
				IntPtr pCompressed,
				uint cbCompressed,
				IntPtr pDestBuffer,
				uint cbDestBufferSize,
				out uint nBytesWritten,
				uint nDesiredSampleRate);

			[DllImport("libsteam_api64.so")]
			internal static extern uint SteamAPI_ISteamUser_GetVoiceOptimalSampleRate(IntPtr ISteamUser);

			[DllImport("libsteam_api64.so")]
			internal static extern HAuthTicket SteamAPI_ISteamUser_GetAuthSessionTicket(
				IntPtr ISteamUser,
				IntPtr pTicket,
				int cbMaxTicket,
				out uint pcbTicket);

			[DllImport("libsteam_api64.so")]
			internal static extern BeginAuthSessionResult SteamAPI_ISteamUser_BeginAuthSession(
				IntPtr ISteamUser,
				IntPtr pAuthTicket,
				int cbAuthTicket,
				ulong steamID);

			[DllImport("libsteam_api64.so")]
			internal static extern void SteamAPI_ISteamUser_EndAuthSession(
				IntPtr ISteamUser,
				ulong steamID);

			[DllImport("libsteam_api64.so")]
			internal static extern void SteamAPI_ISteamUser_CancelAuthTicket(
				IntPtr ISteamUser,
				uint hAuthTicket);

			[DllImport("libsteam_api64.so")]
			internal static extern UserHasLicenseForAppResult SteamAPI_ISteamUser_UserHasLicenseForApp(
				IntPtr ISteamUser,
				ulong steamID,
				uint appID);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamUser_BIsBehindNAT(IntPtr ISteamUser);

			[DllImport("libsteam_api64.so")]
			internal static extern void SteamAPI_ISteamUser_AdvertiseGame(
				IntPtr ISteamUser,
				ulong steamIDGameServer,
				uint unIPServer,
				ushort usPortServer);

			[DllImport("libsteam_api64.so")]
			internal static extern SteamAPICall_t SteamAPI_ISteamUser_RequestEncryptedAppTicket(
				IntPtr ISteamUser,
				IntPtr pDataToInclude,
				int cbDataToInclude);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamUser_GetEncryptedAppTicket(
				IntPtr ISteamUser,
				IntPtr pTicket,
				int cbMaxTicket,
				out uint pcbTicket);

			[DllImport("libsteam_api64.so")]
			internal static extern int SteamAPI_ISteamUser_GetGameBadgeLevel(
				IntPtr ISteamUser,
				int nSeries,
				[MarshalAs(UnmanagedType.U1)] bool bFoil);

			[DllImport("libsteam_api64.so")]
			internal static extern int SteamAPI_ISteamUser_GetPlayerSteamLevel(IntPtr ISteamUser);

			[DllImport("libsteam_api64.so")]
			internal static extern SteamAPICall_t SteamAPI_ISteamUser_RequestStoreAuthURL(
				IntPtr ISteamUser,
				string pchRedirectURL);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamUser_BIsPhoneVerified(IntPtr ISteamUser);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamUser_BIsTwoFactorEnabled(IntPtr ISteamUser);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamUser_BIsPhoneIdentifying(IntPtr ISteamUser);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamUser_BIsPhoneRequiringVerification(
				IntPtr ISteamUser);

			[DllImport("libsteam_api64.so")]
			internal static extern IntPtr SteamAPI_ISteamFriends_GetPersonaName(IntPtr ISteamFriends);

			[DllImport("libsteam_api64.so")]
			internal static extern SteamAPICall_t SteamAPI_ISteamFriends_SetPersonaName(
				IntPtr ISteamFriends,
				string pchPersonaName);

			[DllImport("libsteam_api64.so")]
			internal static extern PersonaState SteamAPI_ISteamFriends_GetPersonaState(
				IntPtr ISteamFriends);

			[DllImport("libsteam_api64.so")]
			internal static extern int SteamAPI_ISteamFriends_GetFriendCount(
				IntPtr ISteamFriends,
				int iFriendFlags);

			[DllImport("libsteam_api64.so")]
			internal static extern CSteamID SteamAPI_ISteamFriends_GetFriendByIndex(
				IntPtr ISteamFriends,
				int iFriend,
				int iFriendFlags);

			[DllImport("libsteam_api64.so")]
			internal static extern FriendRelationship SteamAPI_ISteamFriends_GetFriendRelationship(
				IntPtr ISteamFriends,
				ulong steamIDFriend);

			[DllImport("libsteam_api64.so")]
			internal static extern PersonaState SteamAPI_ISteamFriends_GetFriendPersonaState(
				IntPtr ISteamFriends,
				ulong steamIDFriend);

			[DllImport("libsteam_api64.so")]
			internal static extern IntPtr SteamAPI_ISteamFriends_GetFriendPersonaName(
				IntPtr ISteamFriends,
				ulong steamIDFriend);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamFriends_GetFriendGamePlayed(
				IntPtr ISteamFriends,
				ulong steamIDFriend,
				ref FriendGameInfo_t.PackSmall pFriendGameInfo);

			[DllImport("libsteam_api64.so")]
			internal static extern IntPtr SteamAPI_ISteamFriends_GetFriendPersonaNameHistory(
				IntPtr ISteamFriends,
				ulong steamIDFriend,
				int iPersonaName);

			[DllImport("libsteam_api64.so")]
			internal static extern int SteamAPI_ISteamFriends_GetFriendSteamLevel(
				IntPtr ISteamFriends,
				ulong steamIDFriend);

			[DllImport("libsteam_api64.so")]
			internal static extern IntPtr SteamAPI_ISteamFriends_GetPlayerNickname(
				IntPtr ISteamFriends,
				ulong steamIDPlayer);

			[DllImport("libsteam_api64.so")]
			internal static extern int SteamAPI_ISteamFriends_GetFriendsGroupCount(IntPtr ISteamFriends);

			[DllImport("libsteam_api64.so")]
			internal static extern FriendsGroupID_t SteamAPI_ISteamFriends_GetFriendsGroupIDByIndex(
				IntPtr ISteamFriends,
				int iFG);

			[DllImport("libsteam_api64.so")]
			internal static extern IntPtr SteamAPI_ISteamFriends_GetFriendsGroupName(
				IntPtr ISteamFriends,
				short friendsGroupID);

			[DllImport("libsteam_api64.so")]
			internal static extern int SteamAPI_ISteamFriends_GetFriendsGroupMembersCount(
				IntPtr ISteamFriends,
				short friendsGroupID);

			[DllImport("libsteam_api64.so")]
			internal static extern void SteamAPI_ISteamFriends_GetFriendsGroupMembersList(
				IntPtr ISteamFriends,
				short friendsGroupID,
				IntPtr pOutSteamIDMembers,
				int nMembersCount);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamFriends_HasFriend(
				IntPtr ISteamFriends,
				ulong steamIDFriend,
				int iFriendFlags);

			[DllImport("libsteam_api64.so")]
			internal static extern int SteamAPI_ISteamFriends_GetClanCount(IntPtr ISteamFriends);

			[DllImport("libsteam_api64.so")]
			internal static extern CSteamID SteamAPI_ISteamFriends_GetClanByIndex(
				IntPtr ISteamFriends,
				int iClan);

			[DllImport("libsteam_api64.so")]
			internal static extern IntPtr SteamAPI_ISteamFriends_GetClanName(
				IntPtr ISteamFriends,
				ulong steamIDClan);

			[DllImport("libsteam_api64.so")]
			internal static extern IntPtr SteamAPI_ISteamFriends_GetClanTag(
				IntPtr ISteamFriends,
				ulong steamIDClan);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamFriends_GetClanActivityCounts(
				IntPtr ISteamFriends,
				ulong steamIDClan,
				out int pnOnline,
				out int pnInGame,
				out int pnChatting);

			[DllImport("libsteam_api64.so")]
			internal static extern SteamAPICall_t SteamAPI_ISteamFriends_DownloadClanActivityCounts(
				IntPtr ISteamFriends,
				IntPtr psteamIDClans,
				int cClansToRequest);

			[DllImport("libsteam_api64.so")]
			internal static extern int SteamAPI_ISteamFriends_GetFriendCountFromSource(
				IntPtr ISteamFriends,
				ulong steamIDSource);

			[DllImport("libsteam_api64.so")]
			internal static extern CSteamID SteamAPI_ISteamFriends_GetFriendFromSourceByIndex(
				IntPtr ISteamFriends,
				ulong steamIDSource,
				int iFriend);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamFriends_IsUserInSource(
				IntPtr ISteamFriends,
				ulong steamIDUser,
				ulong steamIDSource);

			[DllImport("libsteam_api64.so")]
			internal static extern void SteamAPI_ISteamFriends_SetInGameVoiceSpeaking(
				IntPtr ISteamFriends,
				ulong steamIDUser,
				[MarshalAs(UnmanagedType.U1)] bool bSpeaking);

			[DllImport("libsteam_api64.so")]
			internal static extern void SteamAPI_ISteamFriends_ActivateGameOverlay(
				IntPtr ISteamFriends,
				string pchDialog);

			[DllImport("libsteam_api64.so")]
			internal static extern void SteamAPI_ISteamFriends_ActivateGameOverlayToUser(
				IntPtr ISteamFriends,
				string pchDialog,
				ulong steamID);

			[DllImport("libsteam_api64.so")]
			internal static extern void SteamAPI_ISteamFriends_ActivateGameOverlayToWebPage(
				IntPtr ISteamFriends,
				string pchURL);

			[DllImport("libsteam_api64.so")]
			internal static extern void SteamAPI_ISteamFriends_ActivateGameOverlayToStore(
				IntPtr ISteamFriends,
				uint nAppID,
				OverlayToStoreFlag eFlag);

			[DllImport("libsteam_api64.so")]
			internal static extern void SteamAPI_ISteamFriends_SetPlayedWith(
				IntPtr ISteamFriends,
				ulong steamIDUserPlayedWith);

			[DllImport("libsteam_api64.so")]
			internal static extern void SteamAPI_ISteamFriends_ActivateGameOverlayInviteDialog(
				IntPtr ISteamFriends,
				ulong steamIDLobby);

			[DllImport("libsteam_api64.so")]
			internal static extern int SteamAPI_ISteamFriends_GetSmallFriendAvatar(
				IntPtr ISteamFriends,
				ulong steamIDFriend);

			[DllImport("libsteam_api64.so")]
			internal static extern int SteamAPI_ISteamFriends_GetMediumFriendAvatar(
				IntPtr ISteamFriends,
				ulong steamIDFriend);

			[DllImport("libsteam_api64.so")]
			internal static extern int SteamAPI_ISteamFriends_GetLargeFriendAvatar(
				IntPtr ISteamFriends,
				ulong steamIDFriend);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamFriends_RequestUserInformation(
				IntPtr ISteamFriends,
				ulong steamIDUser,
				[MarshalAs(UnmanagedType.U1)] bool bRequireNameOnly);

			[DllImport("libsteam_api64.so")]
			internal static extern SteamAPICall_t SteamAPI_ISteamFriends_RequestClanOfficerList(
				IntPtr ISteamFriends,
				ulong steamIDClan);

			[DllImport("libsteam_api64.so")]
			internal static extern CSteamID SteamAPI_ISteamFriends_GetClanOwner(
				IntPtr ISteamFriends,
				ulong steamIDClan);

			[DllImport("libsteam_api64.so")]
			internal static extern int SteamAPI_ISteamFriends_GetClanOfficerCount(
				IntPtr ISteamFriends,
				ulong steamIDClan);

			[DllImport("libsteam_api64.so")]
			internal static extern CSteamID SteamAPI_ISteamFriends_GetClanOfficerByIndex(
				IntPtr ISteamFriends,
				ulong steamIDClan,
				int iOfficer);

			[DllImport("libsteam_api64.so")]
			internal static extern uint SteamAPI_ISteamFriends_GetUserRestrictions(IntPtr ISteamFriends);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamFriends_SetRichPresence(
				IntPtr ISteamFriends,
				string pchKey,
				string pchValue);

			[DllImport("libsteam_api64.so")]
			internal static extern void SteamAPI_ISteamFriends_ClearRichPresence(IntPtr ISteamFriends);

			[DllImport("libsteam_api64.so")]
			internal static extern IntPtr SteamAPI_ISteamFriends_GetFriendRichPresence(
				IntPtr ISteamFriends,
				ulong steamIDFriend,
				string pchKey);

			[DllImport("libsteam_api64.so")]
			internal static extern int SteamAPI_ISteamFriends_GetFriendRichPresenceKeyCount(
				IntPtr ISteamFriends,
				ulong steamIDFriend);

			[DllImport("libsteam_api64.so")]
			internal static extern IntPtr SteamAPI_ISteamFriends_GetFriendRichPresenceKeyByIndex(
				IntPtr ISteamFriends,
				ulong steamIDFriend,
				int iKey);

			[DllImport("libsteam_api64.so")]
			internal static extern void SteamAPI_ISteamFriends_RequestFriendRichPresence(
				IntPtr ISteamFriends,
				ulong steamIDFriend);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamFriends_InviteUserToGame(
				IntPtr ISteamFriends,
				ulong steamIDFriend,
				string pchConnectString);

			[DllImport("libsteam_api64.so")]
			internal static extern int SteamAPI_ISteamFriends_GetCoplayFriendCount(IntPtr ISteamFriends);

			[DllImport("libsteam_api64.so")]
			internal static extern CSteamID SteamAPI_ISteamFriends_GetCoplayFriend(
				IntPtr ISteamFriends,
				int iCoplayFriend);

			[DllImport("libsteam_api64.so")]
			internal static extern int SteamAPI_ISteamFriends_GetFriendCoplayTime(
				IntPtr ISteamFriends,
				ulong steamIDFriend);

			[DllImport("libsteam_api64.so")]
			internal static extern AppId_t SteamAPI_ISteamFriends_GetFriendCoplayGame(
				IntPtr ISteamFriends,
				ulong steamIDFriend);

			[DllImport("libsteam_api64.so")]
			internal static extern SteamAPICall_t SteamAPI_ISteamFriends_JoinClanChatRoom(
				IntPtr ISteamFriends,
				ulong steamIDClan);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamFriends_LeaveClanChatRoom(
				IntPtr ISteamFriends,
				ulong steamIDClan);

			[DllImport("libsteam_api64.so")]
			internal static extern int SteamAPI_ISteamFriends_GetClanChatMemberCount(
				IntPtr ISteamFriends,
				ulong steamIDClan);

			[DllImport("libsteam_api64.so")]
			internal static extern CSteamID SteamAPI_ISteamFriends_GetChatMemberByIndex(
				IntPtr ISteamFriends,
				ulong steamIDClan,
				int iUser);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamFriends_SendClanChatMessage(
				IntPtr ISteamFriends,
				ulong steamIDClanChat,
				string pchText);

			[DllImport("libsteam_api64.so")]
			internal static extern int SteamAPI_ISteamFriends_GetClanChatMessage(
				IntPtr ISteamFriends,
				ulong steamIDClanChat,
				int iMessage,
				IntPtr prgchText,
				int cchTextMax,
				out ChatEntryType peChatEntryType,
				out ulong psteamidChatter);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamFriends_IsClanChatAdmin(
				IntPtr ISteamFriends,
				ulong steamIDClanChat,
				ulong steamIDUser);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamFriends_IsClanChatWindowOpenInSteam(
				IntPtr ISteamFriends,
				ulong steamIDClanChat);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamFriends_OpenClanChatWindowInSteam(
				IntPtr ISteamFriends,
				ulong steamIDClanChat);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamFriends_CloseClanChatWindowInSteam(
				IntPtr ISteamFriends,
				ulong steamIDClanChat);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamFriends_SetListenForFriendsMessages(
				IntPtr ISteamFriends,
				[MarshalAs(UnmanagedType.U1)] bool bInterceptEnabled);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamFriends_ReplyToFriendMessage(
				IntPtr ISteamFriends,
				ulong steamIDFriend,
				string pchMsgToSend);

			[DllImport("libsteam_api64.so")]
			internal static extern int SteamAPI_ISteamFriends_GetFriendMessage(
				IntPtr ISteamFriends,
				ulong steamIDFriend,
				int iMessageID,
				IntPtr pvData,
				int cubData,
				out ChatEntryType peChatEntryType);

			[DllImport("libsteam_api64.so")]
			internal static extern SteamAPICall_t SteamAPI_ISteamFriends_GetFollowerCount(
				IntPtr ISteamFriends,
				ulong steamID);

			[DllImport("libsteam_api64.so")]
			internal static extern SteamAPICall_t SteamAPI_ISteamFriends_IsFollowing(
				IntPtr ISteamFriends,
				ulong steamID);

			[DllImport("libsteam_api64.so")]
			internal static extern SteamAPICall_t SteamAPI_ISteamFriends_EnumerateFollowingList(
				IntPtr ISteamFriends,
				uint unStartIndex);

			[DllImport("libsteam_api64.so")]
			internal static extern uint SteamAPI_ISteamUtils_GetSecondsSinceAppActive(IntPtr ISteamUtils);

			[DllImport("libsteam_api64.so")]
			internal static extern uint SteamAPI_ISteamUtils_GetSecondsSinceComputerActive(
				IntPtr ISteamUtils);

			[DllImport("libsteam_api64.so")]
			internal static extern Universe SteamAPI_ISteamUtils_GetConnectedUniverse(IntPtr ISteamUtils);

			[DllImport("libsteam_api64.so")]
			internal static extern uint SteamAPI_ISteamUtils_GetServerRealTime(IntPtr ISteamUtils);

			[DllImport("libsteam_api64.so")]
			internal static extern IntPtr SteamAPI_ISteamUtils_GetIPCountry(IntPtr ISteamUtils);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamUtils_GetImageSize(
				IntPtr ISteamUtils,
				int iImage,
				out uint pnWidth,
				out uint pnHeight);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamUtils_GetImageRGBA(
				IntPtr ISteamUtils,
				int iImage,
				IntPtr pubDest,
				int nDestBufferSize);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamUtils_GetCSERIPPort(
				IntPtr ISteamUtils,
				out uint unIP,
				out ushort usPort);

			[DllImport("libsteam_api64.so")]
			internal static extern byte SteamAPI_ISteamUtils_GetCurrentBatteryPower(IntPtr ISteamUtils);

			[DllImport("libsteam_api64.so")]
			internal static extern uint SteamAPI_ISteamUtils_GetAppID(IntPtr ISteamUtils);

			[DllImport("libsteam_api64.so")]
			internal static extern void SteamAPI_ISteamUtils_SetOverlayNotificationPosition(
				IntPtr ISteamUtils,
				NotificationPosition eNotificationPosition);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamUtils_IsAPICallCompleted(
				IntPtr ISteamUtils,
				ulong hSteamAPICall,
				[MarshalAs(UnmanagedType.U1)] ref bool pbFailed);

			[DllImport("libsteam_api64.so")]
			internal static extern SteamAPICallFailure SteamAPI_ISteamUtils_GetAPICallFailureReason(
				IntPtr ISteamUtils,
				ulong hSteamAPICall);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamUtils_GetAPICallResult(
				IntPtr ISteamUtils,
				ulong hSteamAPICall,
				IntPtr pCallback,
				int cubCallback,
				int iCallbackExpected,
				[MarshalAs(UnmanagedType.U1)] ref bool pbFailed);

			[DllImport("libsteam_api64.so")]
			internal static extern uint SteamAPI_ISteamUtils_GetIPCCallCount(IntPtr ISteamUtils);

			[DllImport("libsteam_api64.so")]
			internal static extern void SteamAPI_ISteamUtils_SetWarningMessageHook(
				IntPtr ISteamUtils,
				IntPtr pFunction);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamUtils_IsOverlayEnabled(IntPtr ISteamUtils);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamUtils_BOverlayNeedsPresent(IntPtr ISteamUtils);

			[DllImport("libsteam_api64.so")]
			internal static extern SteamAPICall_t SteamAPI_ISteamUtils_CheckFileSignature(
				IntPtr ISteamUtils,
				string szFileName);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamUtils_ShowGamepadTextInput(
				IntPtr ISteamUtils,
				GamepadTextInputMode eInputMode,
				GamepadTextInputLineMode eLineInputMode,
				string pchDescription,
				uint unCharMax,
				string pchExistingText);

			[DllImport("libsteam_api64.so")]
			internal static extern uint SteamAPI_ISteamUtils_GetEnteredGamepadTextLength(
				IntPtr ISteamUtils);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamUtils_GetEnteredGamepadTextInput(
				IntPtr ISteamUtils,
				StringBuilder pchText,
				uint cchText);

			[DllImport("libsteam_api64.so")]
			internal static extern IntPtr SteamAPI_ISteamUtils_GetSteamUILanguage(IntPtr ISteamUtils);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamUtils_IsSteamRunningInVR(IntPtr ISteamUtils);

			[DllImport("libsteam_api64.so")]
			internal static extern void SteamAPI_ISteamUtils_SetOverlayNotificationInset(
				IntPtr ISteamUtils,
				int nHorizontalInset,
				int nVerticalInset);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamUtils_IsSteamInBigPictureMode(IntPtr ISteamUtils);

			[DllImport("libsteam_api64.so")]
			internal static extern void SteamAPI_ISteamUtils_StartVRDashboard(IntPtr ISteamUtils);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamUtils_IsVRHeadsetStreamingEnabled(
				IntPtr ISteamUtils);

			[DllImport("libsteam_api64.so")]
			internal static extern void SteamAPI_ISteamUtils_SetVRHeadsetStreamingEnabled(
				IntPtr ISteamUtils,
				[MarshalAs(UnmanagedType.U1)] bool bEnabled);

			[DllImport("libsteam_api64.so")]
			internal static extern int SteamAPI_ISteamMatchmaking_GetFavoriteGameCount(
				IntPtr ISteamMatchmaking);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamMatchmaking_GetFavoriteGame(
				IntPtr ISteamMatchmaking,
				int iGame,
				ref uint pnAppID,
				out uint pnIP,
				out ushort pnConnPort,
				out ushort pnQueryPort,
				out uint punFlags,
				out uint pRTime32LastPlayedOnServer);

			[DllImport("libsteam_api64.so")]
			internal static extern int SteamAPI_ISteamMatchmaking_AddFavoriteGame(
				IntPtr ISteamMatchmaking,
				uint nAppID,
				uint nIP,
				ushort nConnPort,
				ushort nQueryPort,
				uint unFlags,
				uint rTime32LastPlayedOnServer);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamMatchmaking_RemoveFavoriteGame(
				IntPtr ISteamMatchmaking,
				uint nAppID,
				uint nIP,
				ushort nConnPort,
				ushort nQueryPort,
				uint unFlags);

			[DllImport("libsteam_api64.so")]
			internal static extern SteamAPICall_t SteamAPI_ISteamMatchmaking_RequestLobbyList(
				IntPtr ISteamMatchmaking);

			[DllImport("libsteam_api64.so")]
			internal static extern void SteamAPI_ISteamMatchmaking_AddRequestLobbyListStringFilter(
				IntPtr ISteamMatchmaking,
				string pchKeyToMatch,
				string pchValueToMatch,
				LobbyComparison eComparisonType);

			[DllImport("libsteam_api64.so")]
			internal static extern void SteamAPI_ISteamMatchmaking_AddRequestLobbyListNumericalFilter(
				IntPtr ISteamMatchmaking,
				string pchKeyToMatch,
				int nValueToMatch,
				LobbyComparison eComparisonType);

			[DllImport("libsteam_api64.so")]
			internal static extern void SteamAPI_ISteamMatchmaking_AddRequestLobbyListNearValueFilter(
				IntPtr ISteamMatchmaking,
				string pchKeyToMatch,
				int nValueToBeCloseTo);

			[DllImport("libsteam_api64.so")]
			internal static extern void SteamAPI_ISteamMatchmaking_AddRequestLobbyListFilterSlotsAvailable(
				IntPtr ISteamMatchmaking,
				int nSlotsAvailable);

			[DllImport("libsteam_api64.so")]
			internal static extern void SteamAPI_ISteamMatchmaking_AddRequestLobbyListDistanceFilter(
				IntPtr ISteamMatchmaking,
				LobbyDistanceFilter eLobbyDistanceFilter);

			[DllImport("libsteam_api64.so")]
			internal static extern void SteamAPI_ISteamMatchmaking_AddRequestLobbyListResultCountFilter(
				IntPtr ISteamMatchmaking,
				int cMaxResults);

			[DllImport("libsteam_api64.so")]
			internal static extern void SteamAPI_ISteamMatchmaking_AddRequestLobbyListCompatibleMembersFilter(
				IntPtr ISteamMatchmaking,
				ulong steamIDLobby);

			[DllImport("libsteam_api64.so")]
			internal static extern CSteamID SteamAPI_ISteamMatchmaking_GetLobbyByIndex(
				IntPtr ISteamMatchmaking,
				int iLobby);

			[DllImport("libsteam_api64.so")]
			internal static extern SteamAPICall_t SteamAPI_ISteamMatchmaking_CreateLobby(
				IntPtr ISteamMatchmaking,
				LobbyType eLobbyType,
				int cMaxMembers);

			[DllImport("libsteam_api64.so")]
			internal static extern SteamAPICall_t SteamAPI_ISteamMatchmaking_JoinLobby(
				IntPtr ISteamMatchmaking,
				ulong steamIDLobby);

			[DllImport("libsteam_api64.so")]
			internal static extern void SteamAPI_ISteamMatchmaking_LeaveLobby(
				IntPtr ISteamMatchmaking,
				ulong steamIDLobby);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamMatchmaking_InviteUserToLobby(
				IntPtr ISteamMatchmaking,
				ulong steamIDLobby,
				ulong steamIDInvitee);

			[DllImport("libsteam_api64.so")]
			internal static extern int SteamAPI_ISteamMatchmaking_GetNumLobbyMembers(
				IntPtr ISteamMatchmaking,
				ulong steamIDLobby);

			[DllImport("libsteam_api64.so")]
			internal static extern CSteamID SteamAPI_ISteamMatchmaking_GetLobbyMemberByIndex(
				IntPtr ISteamMatchmaking,
				ulong steamIDLobby,
				int iMember);

			[DllImport("libsteam_api64.so")]
			internal static extern IntPtr SteamAPI_ISteamMatchmaking_GetLobbyData(
				IntPtr ISteamMatchmaking,
				ulong steamIDLobby,
				string pchKey);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamMatchmaking_SetLobbyData(
				IntPtr ISteamMatchmaking,
				ulong steamIDLobby,
				string pchKey,
				string pchValue);

			[DllImport("libsteam_api64.so")]
			internal static extern int SteamAPI_ISteamMatchmaking_GetLobbyDataCount(
				IntPtr ISteamMatchmaking,
				ulong steamIDLobby);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamMatchmaking_GetLobbyDataByIndex(
				IntPtr ISteamMatchmaking,
				ulong steamIDLobby,
				int iLobbyData,
				StringBuilder pchKey,
				int cchKeyBufferSize,
				StringBuilder pchValue,
				int cchValueBufferSize);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamMatchmaking_DeleteLobbyData(
				IntPtr ISteamMatchmaking,
				ulong steamIDLobby,
				string pchKey);

			[DllImport("libsteam_api64.so")]
			internal static extern IntPtr SteamAPI_ISteamMatchmaking_GetLobbyMemberData(
				IntPtr ISteamMatchmaking,
				ulong steamIDLobby,
				ulong steamIDUser,
				string pchKey);

			[DllImport("libsteam_api64.so")]
			internal static extern void SteamAPI_ISteamMatchmaking_SetLobbyMemberData(
				IntPtr ISteamMatchmaking,
				ulong steamIDLobby,
				string pchKey,
				string pchValue);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamMatchmaking_SendLobbyChatMsg(
				IntPtr ISteamMatchmaking,
				ulong steamIDLobby,
				IntPtr pvMsgBody,
				int cubMsgBody);

			[DllImport("libsteam_api64.so")]
			internal static extern int SteamAPI_ISteamMatchmaking_GetLobbyChatEntry(
				IntPtr ISteamMatchmaking,
				ulong steamIDLobby,
				int iChatID,
				out ulong pSteamIDUser,
				IntPtr pvData,
				int cubData,
				out ChatEntryType peChatEntryType);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamMatchmaking_RequestLobbyData(
				IntPtr ISteamMatchmaking,
				ulong steamIDLobby);

			[DllImport("libsteam_api64.so")]
			internal static extern void SteamAPI_ISteamMatchmaking_SetLobbyGameServer(
				IntPtr ISteamMatchmaking,
				ulong steamIDLobby,
				uint unGameServerIP,
				ushort unGameServerPort,
				ulong steamIDGameServer);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamMatchmaking_GetLobbyGameServer(
				IntPtr ISteamMatchmaking,
				ulong steamIDLobby,
				out uint punGameServerIP,
				out ushort punGameServerPort,
				out ulong psteamIDGameServer);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamMatchmaking_SetLobbyMemberLimit(
				IntPtr ISteamMatchmaking,
				ulong steamIDLobby,
				int cMaxMembers);

			[DllImport("libsteam_api64.so")]
			internal static extern int SteamAPI_ISteamMatchmaking_GetLobbyMemberLimit(
				IntPtr ISteamMatchmaking,
				ulong steamIDLobby);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamMatchmaking_SetLobbyType(
				IntPtr ISteamMatchmaking,
				ulong steamIDLobby,
				LobbyType eLobbyType);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamMatchmaking_SetLobbyJoinable(
				IntPtr ISteamMatchmaking,
				ulong steamIDLobby,
				[MarshalAs(UnmanagedType.U1)] bool bLobbyJoinable);

			[DllImport("libsteam_api64.so")]
			internal static extern CSteamID SteamAPI_ISteamMatchmaking_GetLobbyOwner(
				IntPtr ISteamMatchmaking,
				ulong steamIDLobby);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamMatchmaking_SetLobbyOwner(
				IntPtr ISteamMatchmaking,
				ulong steamIDLobby,
				ulong steamIDNewOwner);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamMatchmaking_SetLinkedLobby(
				IntPtr ISteamMatchmaking,
				ulong steamIDLobby,
				ulong steamIDLobbyDependent);

			[DllImport("libsteam_api64.so")]
			internal static extern HServerListRequest SteamAPI_ISteamMatchmakingServers_RequestInternetServerList(
				IntPtr ISteamMatchmakingServers,
				uint iApp,
				IntPtr ppchFilters,
				uint nFilters,
				IntPtr pRequestServersResponse);

			[DllImport("libsteam_api64.so")]
			internal static extern HServerListRequest SteamAPI_ISteamMatchmakingServers_RequestLANServerList(
				IntPtr ISteamMatchmakingServers,
				uint iApp,
				IntPtr pRequestServersResponse);

			[DllImport("libsteam_api64.so")]
			internal static extern HServerListRequest SteamAPI_ISteamMatchmakingServers_RequestFriendsServerList(
				IntPtr ISteamMatchmakingServers,
				uint iApp,
				IntPtr ppchFilters,
				uint nFilters,
				IntPtr pRequestServersResponse);

			[DllImport("libsteam_api64.so")]
			internal static extern HServerListRequest SteamAPI_ISteamMatchmakingServers_RequestFavoritesServerList(
				IntPtr ISteamMatchmakingServers,
				uint iApp,
				IntPtr ppchFilters,
				uint nFilters,
				IntPtr pRequestServersResponse);

			[DllImport("libsteam_api64.so")]
			internal static extern HServerListRequest SteamAPI_ISteamMatchmakingServers_RequestHistoryServerList(
				IntPtr ISteamMatchmakingServers,
				uint iApp,
				IntPtr ppchFilters,
				uint nFilters,
				IntPtr pRequestServersResponse);

			[DllImport("libsteam_api64.so")]
			internal static extern HServerListRequest SteamAPI_ISteamMatchmakingServers_RequestSpectatorServerList(
				IntPtr ISteamMatchmakingServers,
				uint iApp,
				IntPtr ppchFilters,
				uint nFilters,
				IntPtr pRequestServersResponse);

			[DllImport("libsteam_api64.so")]
			internal static extern void SteamAPI_ISteamMatchmakingServers_ReleaseRequest(
				IntPtr ISteamMatchmakingServers,
				IntPtr hServerListRequest);

			[DllImport("libsteam_api64.so")]
			internal static extern IntPtr SteamAPI_ISteamMatchmakingServers_GetServerDetails(
				IntPtr ISteamMatchmakingServers,
				IntPtr hRequest,
				int iServer);

			[DllImport("libsteam_api64.so")]
			internal static extern void SteamAPI_ISteamMatchmakingServers_CancelQuery(
				IntPtr ISteamMatchmakingServers,
				IntPtr hRequest);

			[DllImport("libsteam_api64.so")]
			internal static extern void SteamAPI_ISteamMatchmakingServers_RefreshQuery(
				IntPtr ISteamMatchmakingServers,
				IntPtr hRequest);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamMatchmakingServers_IsRefreshing(
				IntPtr ISteamMatchmakingServers,
				IntPtr hRequest);

			[DllImport("libsteam_api64.so")]
			internal static extern int SteamAPI_ISteamMatchmakingServers_GetServerCount(
				IntPtr ISteamMatchmakingServers,
				IntPtr hRequest);

			[DllImport("libsteam_api64.so")]
			internal static extern void SteamAPI_ISteamMatchmakingServers_RefreshServer(
				IntPtr ISteamMatchmakingServers,
				IntPtr hRequest,
				int iServer);

			[DllImport("libsteam_api64.so")]
			internal static extern HServerQuery SteamAPI_ISteamMatchmakingServers_PingServer(
				IntPtr ISteamMatchmakingServers,
				uint unIP,
				ushort usPort,
				IntPtr pRequestServersResponse);

			[DllImport("libsteam_api64.so")]
			internal static extern HServerQuery SteamAPI_ISteamMatchmakingServers_PlayerDetails(
				IntPtr ISteamMatchmakingServers,
				uint unIP,
				ushort usPort,
				IntPtr pRequestServersResponse);

			[DllImport("libsteam_api64.so")]
			internal static extern HServerQuery SteamAPI_ISteamMatchmakingServers_ServerRules(
				IntPtr ISteamMatchmakingServers,
				uint unIP,
				ushort usPort,
				IntPtr pRequestServersResponse);

			[DllImport("libsteam_api64.so")]
			internal static extern void SteamAPI_ISteamMatchmakingServers_CancelServerQuery(
				IntPtr ISteamMatchmakingServers,
				int hServerQuery);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamRemoteStorage_FileWrite(
				IntPtr ISteamRemoteStorage,
				string pchFile,
				IntPtr pvData,
				int cubData);

			[DllImport("libsteam_api64.so")]
			internal static extern int SteamAPI_ISteamRemoteStorage_FileRead(
				IntPtr ISteamRemoteStorage,
				string pchFile,
				IntPtr pvData,
				int cubDataToRead);

			[DllImport("libsteam_api64.so")]
			internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_FileWriteAsync(
				IntPtr ISteamRemoteStorage,
				string pchFile,
				IntPtr pvData,
				uint cubData);

			[DllImport("libsteam_api64.so")]
			internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_FileReadAsync(
				IntPtr ISteamRemoteStorage,
				string pchFile,
				uint nOffset,
				uint cubToRead);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamRemoteStorage_FileReadAsyncComplete(
				IntPtr ISteamRemoteStorage,
				ulong hReadCall,
				IntPtr pvBuffer,
				uint cubToRead);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamRemoteStorage_FileForget(
				IntPtr ISteamRemoteStorage,
				string pchFile);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamRemoteStorage_FileDelete(
				IntPtr ISteamRemoteStorage,
				string pchFile);

			[DllImport("libsteam_api64.so")]
			internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_FileShare(
				IntPtr ISteamRemoteStorage,
				string pchFile);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamRemoteStorage_SetSyncPlatforms(
				IntPtr ISteamRemoteStorage,
				string pchFile,
				RemoteStoragePlatform eRemoteStoragePlatform);

			[DllImport("libsteam_api64.so")]
			internal static extern UGCFileWriteStreamHandle_t SteamAPI_ISteamRemoteStorage_FileWriteStreamOpen(
				IntPtr ISteamRemoteStorage,
				string pchFile);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamRemoteStorage_FileWriteStreamWriteChunk(
				IntPtr ISteamRemoteStorage,
				ulong writeHandle,
				IntPtr pvData,
				int cubData);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamRemoteStorage_FileWriteStreamClose(
				IntPtr ISteamRemoteStorage,
				ulong writeHandle);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamRemoteStorage_FileWriteStreamCancel(
				IntPtr ISteamRemoteStorage,
				ulong writeHandle);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamRemoteStorage_FileExists(
				IntPtr ISteamRemoteStorage,
				string pchFile);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamRemoteStorage_FilePersisted(
				IntPtr ISteamRemoteStorage,
				string pchFile);

			[DllImport("libsteam_api64.so")]
			internal static extern int SteamAPI_ISteamRemoteStorage_GetFileSize(
				IntPtr ISteamRemoteStorage,
				string pchFile);

			[DllImport("libsteam_api64.so")]
			internal static extern long SteamAPI_ISteamRemoteStorage_GetFileTimestamp(
				IntPtr ISteamRemoteStorage,
				string pchFile);

			[DllImport("libsteam_api64.so")]
			internal static extern RemoteStoragePlatform SteamAPI_ISteamRemoteStorage_GetSyncPlatforms(
				IntPtr ISteamRemoteStorage,
				string pchFile);

			[DllImport("libsteam_api64.so")]
			internal static extern int SteamAPI_ISteamRemoteStorage_GetFileCount(
				IntPtr ISteamRemoteStorage);

			[DllImport("libsteam_api64.so")]
			internal static extern IntPtr SteamAPI_ISteamRemoteStorage_GetFileNameAndSize(
				IntPtr ISteamRemoteStorage,
				int iFile,
				out int pnFileSizeInBytes);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamRemoteStorage_GetQuota(
				IntPtr ISteamRemoteStorage,
				out ulong pnTotalBytes,
				out ulong puAvailableBytes);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamRemoteStorage_IsCloudEnabledForAccount(
				IntPtr ISteamRemoteStorage);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamRemoteStorage_IsCloudEnabledForApp(
				IntPtr ISteamRemoteStorage);

			[DllImport("libsteam_api64.so")]
			internal static extern void SteamAPI_ISteamRemoteStorage_SetCloudEnabledForApp(
				IntPtr ISteamRemoteStorage,
				[MarshalAs(UnmanagedType.U1)] bool bEnabled);

			[DllImport("libsteam_api64.so")]
			internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_UGCDownload(
				IntPtr ISteamRemoteStorage,
				ulong hContent,
				uint unPriority);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamRemoteStorage_GetUGCDownloadProgress(
				IntPtr ISteamRemoteStorage,
				ulong hContent,
				out int pnBytesDownloaded,
				out int pnBytesExpected);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamRemoteStorage_GetUGCDetails(
				IntPtr ISteamRemoteStorage,
				ulong hContent,
				ref uint pnAppID,
				StringBuilder ppchName,
				out int pnFileSizeInBytes,
				out ulong pSteamIDOwner);

			[DllImport("libsteam_api64.so")]
			internal static extern int SteamAPI_ISteamRemoteStorage_UGCRead(
				IntPtr ISteamRemoteStorage,
				ulong hContent,
				IntPtr pvData,
				int cubDataToRead,
				uint cOffset,
				UGCReadAction eAction);

			[DllImport("libsteam_api64.so")]
			internal static extern int SteamAPI_ISteamRemoteStorage_GetCachedUGCCount(
				IntPtr ISteamRemoteStorage);

			[DllImport("libsteam_api64.so")]
			internal static extern UGCHandle_t SteamAPI_ISteamRemoteStorage_GetCachedUGCHandle(
				IntPtr ISteamRemoteStorage,
				int iCachedContent);

			[DllImport("libsteam_api64.so")]
			internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_PublishWorkshopFile(
				IntPtr ISteamRemoteStorage,
				string pchFile,
				string pchPreviewFile,
				uint nConsumerAppId,
				string pchTitle,
				string pchDescription,
				RemoteStoragePublishedFileVisibility eVisibility,
				ref SteamParamStringArray_t.PackSmall pTags,
				WorkshopFileType eWorkshopFileType);

			[DllImport("libsteam_api64.so")]
			internal static extern PublishedFileUpdateHandle_t
				SteamAPI_ISteamRemoteStorage_CreatePublishedFileUpdateRequest(
					IntPtr ISteamRemoteStorage,
					ulong unPublishedFileId);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamRemoteStorage_UpdatePublishedFileFile(
				IntPtr ISteamRemoteStorage,
				ulong updateHandle,
				string pchFile);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamRemoteStorage_UpdatePublishedFilePreviewFile(
				IntPtr ISteamRemoteStorage,
				ulong updateHandle,
				string pchPreviewFile);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamRemoteStorage_UpdatePublishedFileTitle(
				IntPtr ISteamRemoteStorage,
				ulong updateHandle,
				string pchTitle);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamRemoteStorage_UpdatePublishedFileDescription(
				IntPtr ISteamRemoteStorage,
				ulong updateHandle,
				string pchDescription);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamRemoteStorage_UpdatePublishedFileVisibility(
				IntPtr ISteamRemoteStorage,
				ulong updateHandle,
				RemoteStoragePublishedFileVisibility eVisibility);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamRemoteStorage_UpdatePublishedFileTags(
				IntPtr ISteamRemoteStorage,
				ulong updateHandle,
				ref SteamParamStringArray_t.PackSmall pTags);

			[DllImport("libsteam_api64.so")]
			internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_CommitPublishedFileUpdate(
				IntPtr ISteamRemoteStorage,
				ulong updateHandle);

			[DllImport("libsteam_api64.so")]
			internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_GetPublishedFileDetails(
				IntPtr ISteamRemoteStorage,
				ulong unPublishedFileId,
				uint unMaxSecondsOld);

			[DllImport("libsteam_api64.so")]
			internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_DeletePublishedFile(
				IntPtr ISteamRemoteStorage,
				ulong unPublishedFileId);

			[DllImport("libsteam_api64.so")]
			internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_EnumerateUserPublishedFiles(
				IntPtr ISteamRemoteStorage,
				uint unStartIndex);

			[DllImport("libsteam_api64.so")]
			internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_SubscribePublishedFile(
				IntPtr ISteamRemoteStorage,
				ulong unPublishedFileId);

			[DllImport("libsteam_api64.so")]
			internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_EnumerateUserSubscribedFiles(
				IntPtr ISteamRemoteStorage,
				uint unStartIndex);

			[DllImport("libsteam_api64.so")]
			internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_UnsubscribePublishedFile(
				IntPtr ISteamRemoteStorage,
				ulong unPublishedFileId);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamRemoteStorage_UpdatePublishedFileSetChangeDescription(
				IntPtr ISteamRemoteStorage,
				ulong updateHandle,
				string pchChangeDescription);

			[DllImport("libsteam_api64.so")]
			internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_GetPublishedItemVoteDetails(
				IntPtr ISteamRemoteStorage,
				ulong unPublishedFileId);

			[DllImport("libsteam_api64.so")]
			internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_UpdateUserPublishedItemVote(
				IntPtr ISteamRemoteStorage,
				ulong unPublishedFileId,
				[MarshalAs(UnmanagedType.U1)] bool bVoteUp);

			[DllImport("libsteam_api64.so")]
			internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_GetUserPublishedItemVoteDetails(
				IntPtr ISteamRemoteStorage,
				ulong unPublishedFileId);

			[DllImport("libsteam_api64.so")]
			internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_EnumerateUserSharedWorkshopFiles(
				IntPtr ISteamRemoteStorage,
				ulong steamId,
				uint unStartIndex,
				ref SteamParamStringArray_t.PackSmall pRequiredTags,
				ref SteamParamStringArray_t.PackSmall pExcludedTags);

			[DllImport("libsteam_api64.so")]
			internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_PublishVideo(
				IntPtr ISteamRemoteStorage,
				WorkshopVideoProvider eVideoProvider,
				string pchVideoAccount,
				string pchVideoIdentifier,
				string pchPreviewFile,
				uint nConsumerAppId,
				string pchTitle,
				string pchDescription,
				RemoteStoragePublishedFileVisibility eVisibility,
				ref SteamParamStringArray_t.PackSmall pTags);

			[DllImport("libsteam_api64.so")]
			internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_SetUserPublishedFileAction(
				IntPtr ISteamRemoteStorage,
				ulong unPublishedFileId,
				WorkshopFileAction eAction);

			[DllImport("libsteam_api64.so")]
			internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_EnumeratePublishedFilesByUserAction(
				IntPtr ISteamRemoteStorage,
				WorkshopFileAction eAction,
				uint unStartIndex);

			[DllImport("libsteam_api64.so")]
			internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_EnumeratePublishedWorkshopFiles(
				IntPtr ISteamRemoteStorage,
				WorkshopEnumerationType eEnumerationType,
				uint unStartIndex,
				uint unCount,
				uint unDays,
				ref SteamParamStringArray_t.PackSmall pTags,
				ref SteamParamStringArray_t.PackSmall pUserTags);

			[DllImport("libsteam_api64.so")]
			internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_UGCDownloadToLocation(
				IntPtr ISteamRemoteStorage,
				ulong hContent,
				string pchLocation,
				uint unPriority);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamUserStats_RequestCurrentStats(
				IntPtr ISteamUserStats);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamUserStats_GetStat(
				IntPtr ISteamUserStats,
				string pchName,
				out int pData);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamUserStats_GetStat0(
				IntPtr ISteamUserStats,
				string pchName,
				out float pData);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamUserStats_SetStat(
				IntPtr ISteamUserStats,
				string pchName,
				int nData);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamUserStats_SetStat0(
				IntPtr ISteamUserStats,
				string pchName,
				float fData);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamUserStats_UpdateAvgRateStat(
				IntPtr ISteamUserStats,
				string pchName,
				float flCountThisSession,
				double dSessionLength);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamUserStats_GetAchievement(
				IntPtr ISteamUserStats,
				string pchName,
				[MarshalAs(UnmanagedType.U1)] ref bool pbAchieved);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamUserStats_SetAchievement(
				IntPtr ISteamUserStats,
				string pchName);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamUserStats_ClearAchievement(
				IntPtr ISteamUserStats,
				string pchName);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamUserStats_GetAchievementAndUnlockTime(
				IntPtr ISteamUserStats,
				string pchName,
				[MarshalAs(UnmanagedType.U1)] ref bool pbAchieved,
				out uint punUnlockTime);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamUserStats_StoreStats(IntPtr ISteamUserStats);

			[DllImport("libsteam_api64.so")]
			internal static extern int SteamAPI_ISteamUserStats_GetAchievementIcon(
				IntPtr ISteamUserStats,
				string pchName);

			[DllImport("libsteam_api64.so")]
			internal static extern IntPtr SteamAPI_ISteamUserStats_GetAchievementDisplayAttribute(
				IntPtr ISteamUserStats,
				string pchName,
				string pchKey);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamUserStats_IndicateAchievementProgress(
				IntPtr ISteamUserStats,
				string pchName,
				uint nCurProgress,
				uint nMaxProgress);

			[DllImport("libsteam_api64.so")]
			internal static extern uint SteamAPI_ISteamUserStats_GetNumAchievements(
				IntPtr ISteamUserStats);

			[DllImport("libsteam_api64.so")]
			internal static extern IntPtr SteamAPI_ISteamUserStats_GetAchievementName(
				IntPtr ISteamUserStats,
				uint iAchievement);

			[DllImport("libsteam_api64.so")]
			internal static extern SteamAPICall_t SteamAPI_ISteamUserStats_RequestUserStats(
				IntPtr ISteamUserStats,
				ulong steamIDUser);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamUserStats_GetUserStat(
				IntPtr ISteamUserStats,
				ulong steamIDUser,
				string pchName,
				out int pData);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamUserStats_GetUserStat0(
				IntPtr ISteamUserStats,
				ulong steamIDUser,
				string pchName,
				out float pData);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamUserStats_GetUserAchievement(
				IntPtr ISteamUserStats,
				ulong steamIDUser,
				string pchName,
				[MarshalAs(UnmanagedType.U1)] ref bool pbAchieved);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamUserStats_GetUserAchievementAndUnlockTime(
				IntPtr ISteamUserStats,
				ulong steamIDUser,
				string pchName,
				[MarshalAs(UnmanagedType.U1)] ref bool pbAchieved,
				out uint punUnlockTime);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamUserStats_ResetAllStats(
				IntPtr ISteamUserStats,
				[MarshalAs(UnmanagedType.U1)] bool bAchievementsToo);

			[DllImport("libsteam_api64.so")]
			internal static extern SteamAPICall_t SteamAPI_ISteamUserStats_FindOrCreateLeaderboard(
				IntPtr ISteamUserStats,
				string pchLeaderboardName,
				LeaderboardSortMethod eLeaderboardSortMethod,
				LeaderboardDisplayType eLeaderboardDisplayType);

			[DllImport("libsteam_api64.so")]
			internal static extern SteamAPICall_t SteamAPI_ISteamUserStats_FindLeaderboard(
				IntPtr ISteamUserStats,
				string pchLeaderboardName);

			[DllImport("libsteam_api64.so")]
			internal static extern IntPtr SteamAPI_ISteamUserStats_GetLeaderboardName(
				IntPtr ISteamUserStats,
				ulong hSteamLeaderboard);

			[DllImport("libsteam_api64.so")]
			internal static extern int SteamAPI_ISteamUserStats_GetLeaderboardEntryCount(
				IntPtr ISteamUserStats,
				ulong hSteamLeaderboard);

			[DllImport("libsteam_api64.so")]
			internal static extern LeaderboardSortMethod SteamAPI_ISteamUserStats_GetLeaderboardSortMethod(
				IntPtr ISteamUserStats,
				ulong hSteamLeaderboard);

			[DllImport("libsteam_api64.so")]
			internal static extern LeaderboardDisplayType SteamAPI_ISteamUserStats_GetLeaderboardDisplayType(
				IntPtr ISteamUserStats,
				ulong hSteamLeaderboard);

			[DllImport("libsteam_api64.so")]
			internal static extern SteamAPICall_t SteamAPI_ISteamUserStats_DownloadLeaderboardEntries(
				IntPtr ISteamUserStats,
				ulong hSteamLeaderboard,
				LeaderboardDataRequest eLeaderboardDataRequest,
				int nRangeStart,
				int nRangeEnd);

			[DllImport("libsteam_api64.so")]
			internal static extern SteamAPICall_t SteamAPI_ISteamUserStats_DownloadLeaderboardEntriesForUsers(
				IntPtr ISteamUserStats,
				ulong hSteamLeaderboard,
				IntPtr prgUsers,
				int cUsers);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamUserStats_GetDownloadedLeaderboardEntry(
				IntPtr ISteamUserStats,
				ulong hSteamLeaderboardEntries,
				int index,
				ref LeaderboardEntry_t.PackSmall pLeaderboardEntry,
				IntPtr pDetails,
				int cDetailsMax);

			[DllImport("libsteam_api64.so")]
			internal static extern SteamAPICall_t SteamAPI_ISteamUserStats_UploadLeaderboardScore(
				IntPtr ISteamUserStats,
				ulong hSteamLeaderboard,
				LeaderboardUploadScoreMethod eLeaderboardUploadScoreMethod,
				int nScore,
				int[] pScoreDetails,
				int cScoreDetailsCount);

			[DllImport("libsteam_api64.so")]
			internal static extern SteamAPICall_t SteamAPI_ISteamUserStats_AttachLeaderboardUGC(
				IntPtr ISteamUserStats,
				ulong hSteamLeaderboard,
				ulong hUGC);

			[DllImport("libsteam_api64.so")]
			internal static extern SteamAPICall_t SteamAPI_ISteamUserStats_GetNumberOfCurrentPlayers(
				IntPtr ISteamUserStats);

			[DllImport("libsteam_api64.so")]
			internal static extern SteamAPICall_t SteamAPI_ISteamUserStats_RequestGlobalAchievementPercentages(
				IntPtr ISteamUserStats);

			[DllImport("libsteam_api64.so")]
			internal static extern int SteamAPI_ISteamUserStats_GetMostAchievedAchievementInfo(
				IntPtr ISteamUserStats,
				StringBuilder pchName,
				uint unNameBufLen,
				out float pflPercent,
				[MarshalAs(UnmanagedType.U1)] ref bool pbAchieved);

			[DllImport("libsteam_api64.so")]
			internal static extern int SteamAPI_ISteamUserStats_GetNextMostAchievedAchievementInfo(
				IntPtr ISteamUserStats,
				int iIteratorPrevious,
				StringBuilder pchName,
				uint unNameBufLen,
				out float pflPercent,
				[MarshalAs(UnmanagedType.U1)] ref bool pbAchieved);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamUserStats_GetAchievementAchievedPercent(
				IntPtr ISteamUserStats,
				string pchName,
				out float pflPercent);

			[DllImport("libsteam_api64.so")]
			internal static extern SteamAPICall_t SteamAPI_ISteamUserStats_RequestGlobalStats(
				IntPtr ISteamUserStats,
				int nHistoryDays);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamUserStats_GetGlobalStat(
				IntPtr ISteamUserStats,
				string pchStatName,
				out long pData);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamUserStats_GetGlobalStat0(
				IntPtr ISteamUserStats,
				string pchStatName,
				out double pData);

			[DllImport("libsteam_api64.so")]
			internal static extern int SteamAPI_ISteamUserStats_GetGlobalStatHistory(
				IntPtr ISteamUserStats,
				string pchStatName,
				out long pData,
				uint cubData);

			[DllImport("libsteam_api64.so")]
			internal static extern int SteamAPI_ISteamUserStats_GetGlobalStatHistory0(
				IntPtr ISteamUserStats,
				string pchStatName,
				out double pData,
				uint cubData);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamApps_BIsSubscribed(IntPtr ISteamApps);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamApps_BIsLowViolence(IntPtr ISteamApps);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamApps_BIsCybercafe(IntPtr ISteamApps);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamApps_BIsVACBanned(IntPtr ISteamApps);

			[DllImport("libsteam_api64.so")]
			internal static extern IntPtr SteamAPI_ISteamApps_GetCurrentGameLanguage(IntPtr ISteamApps);

			[DllImport("libsteam_api64.so")]
			internal static extern IntPtr SteamAPI_ISteamApps_GetAvailableGameLanguages(
				IntPtr ISteamApps);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamApps_BIsSubscribedApp(
				IntPtr ISteamApps,
				uint appID);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamApps_BIsDlcInstalled(
				IntPtr ISteamApps,
				uint appID);

			[DllImport("libsteam_api64.so")]
			internal static extern uint SteamAPI_ISteamApps_GetEarliestPurchaseUnixTime(
				IntPtr ISteamApps,
				uint nAppID);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamApps_BIsSubscribedFromFreeWeekend(
				IntPtr ISteamApps);

			[DllImport("libsteam_api64.so")]
			internal static extern int SteamAPI_ISteamApps_GetDLCCount(IntPtr ISteamApps);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamApps_BGetDLCDataByIndex(
				IntPtr ISteamApps,
				int iDLC,
				ref uint pAppID,
				[MarshalAs(UnmanagedType.U1)] ref bool pbAvailable,
				StringBuilder pchName,
				int cchNameBufferSize);

			[DllImport("libsteam_api64.so")]
			internal static extern void SteamAPI_ISteamApps_InstallDLC(IntPtr ISteamApps, uint nAppID);

			[DllImport("libsteam_api64.so")]
			internal static extern void SteamAPI_ISteamApps_UninstallDLC(IntPtr ISteamApps, uint nAppID);

			[DllImport("libsteam_api64.so")]
			internal static extern void SteamAPI_ISteamApps_RequestAppProofOfPurchaseKey(
				IntPtr ISteamApps,
				uint nAppID);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamApps_GetCurrentBetaName(
				IntPtr ISteamApps,
				StringBuilder pchName,
				int cchNameBufferSize);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamApps_MarkContentCorrupt(
				IntPtr ISteamApps,
				[MarshalAs(UnmanagedType.U1)] bool bMissingFilesOnly);

			[DllImport("libsteam_api64.so")]
			internal static extern uint SteamAPI_ISteamApps_GetInstalledDepots(
				IntPtr ISteamApps,
				uint appID,
				IntPtr pvecDepots,
				uint cMaxDepots);

			[DllImport("libsteam_api64.so")]
			internal static extern uint SteamAPI_ISteamApps_GetAppInstallDir(
				IntPtr ISteamApps,
				uint appID,
				StringBuilder pchFolder,
				uint cchFolderBufferSize);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamApps_BIsAppInstalled(
				IntPtr ISteamApps,
				uint appID);

			[DllImport("libsteam_api64.so")]
			internal static extern CSteamID SteamAPI_ISteamApps_GetAppOwner(IntPtr ISteamApps);

			[DllImport("libsteam_api64.so")]
			internal static extern IntPtr SteamAPI_ISteamApps_GetLaunchQueryParam(
				IntPtr ISteamApps,
				string pchKey);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamApps_GetDlcDownloadProgress(
				IntPtr ISteamApps,
				uint nAppID,
				out ulong punBytesDownloaded,
				out ulong punBytesTotal);

			[DllImport("libsteam_api64.so")]
			internal static extern int SteamAPI_ISteamApps_GetAppBuildId(IntPtr ISteamApps);

			[DllImport("libsteam_api64.so")]
			internal static extern void SteamAPI_ISteamApps_RequestAllProofOfPurchaseKeys(
				IntPtr ISteamApps);

			[DllImport("libsteam_api64.so")]
			internal static extern SteamAPICall_t SteamAPI_ISteamApps_GetFileDetails(
				IntPtr ISteamApps,
				string pszFileName);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamNetworking_SendP2PPacket(
				IntPtr ISteamNetworking,
				ulong steamIDRemote,
				IntPtr pubData,
				uint cubData,
				P2PSend eP2PSendType,
				int nChannel);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamNetworking_IsP2PPacketAvailable(
				IntPtr ISteamNetworking,
				out uint pcubMsgSize,
				int nChannel);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamNetworking_ReadP2PPacket(
				IntPtr ISteamNetworking,
				IntPtr pubDest,
				uint cubDest,
				out uint pcubMsgSize,
				out ulong psteamIDRemote,
				int nChannel);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamNetworking_AcceptP2PSessionWithUser(
				IntPtr ISteamNetworking,
				ulong steamIDRemote);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamNetworking_CloseP2PSessionWithUser(
				IntPtr ISteamNetworking,
				ulong steamIDRemote);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamNetworking_CloseP2PChannelWithUser(
				IntPtr ISteamNetworking,
				ulong steamIDRemote,
				int nChannel);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamNetworking_GetP2PSessionState(
				IntPtr ISteamNetworking,
				ulong steamIDRemote,
				ref P2PSessionState_t.PackSmall pConnectionState);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamNetworking_AllowP2PPacketRelay(
				IntPtr ISteamNetworking,
				[MarshalAs(UnmanagedType.U1)] bool bAllow);

			[DllImport("libsteam_api64.so")]
			internal static extern SNetListenSocket_t SteamAPI_ISteamNetworking_CreateListenSocket(
				IntPtr ISteamNetworking,
				int nVirtualP2PPort,
				uint nIP,
				ushort nPort,
				[MarshalAs(UnmanagedType.U1)] bool bAllowUseOfPacketRelay);

			[DllImport("libsteam_api64.so")]
			internal static extern SNetSocket_t SteamAPI_ISteamNetworking_CreateP2PConnectionSocket(
				IntPtr ISteamNetworking,
				ulong steamIDTarget,
				int nVirtualPort,
				int nTimeoutSec,
				[MarshalAs(UnmanagedType.U1)] bool bAllowUseOfPacketRelay);

			[DllImport("libsteam_api64.so")]
			internal static extern SNetSocket_t SteamAPI_ISteamNetworking_CreateConnectionSocket(
				IntPtr ISteamNetworking,
				uint nIP,
				ushort nPort,
				int nTimeoutSec);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamNetworking_DestroySocket(
				IntPtr ISteamNetworking,
				uint hSocket,
				[MarshalAs(UnmanagedType.U1)] bool bNotifyRemoteEnd);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamNetworking_DestroyListenSocket(
				IntPtr ISteamNetworking,
				uint hSocket,
				[MarshalAs(UnmanagedType.U1)] bool bNotifyRemoteEnd);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamNetworking_SendDataOnSocket(
				IntPtr ISteamNetworking,
				uint hSocket,
				IntPtr pubData,
				uint cubData,
				[MarshalAs(UnmanagedType.U1)] bool bReliable);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamNetworking_IsDataAvailableOnSocket(
				IntPtr ISteamNetworking,
				uint hSocket,
				out uint pcubMsgSize);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamNetworking_RetrieveDataFromSocket(
				IntPtr ISteamNetworking,
				uint hSocket,
				IntPtr pubDest,
				uint cubDest,
				out uint pcubMsgSize);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamNetworking_IsDataAvailable(
				IntPtr ISteamNetworking,
				uint hListenSocket,
				out uint pcubMsgSize,
				ref uint phSocket);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamNetworking_RetrieveData(
				IntPtr ISteamNetworking,
				uint hListenSocket,
				IntPtr pubDest,
				uint cubDest,
				out uint pcubMsgSize,
				ref uint phSocket);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamNetworking_GetSocketInfo(
				IntPtr ISteamNetworking,
				uint hSocket,
				out ulong pSteamIDRemote,
				IntPtr peSocketStatus,
				out uint punIPRemote,
				out ushort punPortRemote);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamNetworking_GetListenSocketInfo(
				IntPtr ISteamNetworking,
				uint hListenSocket,
				out uint pnIP,
				out ushort pnPort);

			[DllImport("libsteam_api64.so")]
			internal static extern SNetSocketConnectionType SteamAPI_ISteamNetworking_GetSocketConnectionType(
				IntPtr ISteamNetworking,
				uint hSocket);

			[DllImport("libsteam_api64.so")]
			internal static extern int SteamAPI_ISteamNetworking_GetMaxPacketSize(
				IntPtr ISteamNetworking,
				uint hSocket);

			[DllImport("libsteam_api64.so")]
			internal static extern ScreenshotHandle SteamAPI_ISteamScreenshots_WriteScreenshot(
				IntPtr ISteamScreenshots,
				IntPtr pubRGB,
				uint cubRGB,
				int nWidth,
				int nHeight);

			[DllImport("libsteam_api64.so")]
			internal static extern ScreenshotHandle SteamAPI_ISteamScreenshots_AddScreenshotToLibrary(
				IntPtr ISteamScreenshots,
				string pchFilename,
				string pchThumbnailFilename,
				int nWidth,
				int nHeight);

			[DllImport("libsteam_api64.so")]
			internal static extern void SteamAPI_ISteamScreenshots_TriggerScreenshot(
				IntPtr ISteamScreenshots);

			[DllImport("libsteam_api64.so")]
			internal static extern void SteamAPI_ISteamScreenshots_HookScreenshots(
				IntPtr ISteamScreenshots,
				[MarshalAs(UnmanagedType.U1)] bool bHook);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamScreenshots_SetLocation(
				IntPtr ISteamScreenshots,
				uint hScreenshot,
				string pchLocation);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamScreenshots_TagUser(
				IntPtr ISteamScreenshots,
				uint hScreenshot,
				ulong steamID);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamScreenshots_TagPublishedFile(
				IntPtr ISteamScreenshots,
				uint hScreenshot,
				ulong unPublishedFileID);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamScreenshots_IsScreenshotsHooked(
				IntPtr ISteamScreenshots);

			[DllImport("libsteam_api64.so")]
			internal static extern ScreenshotHandle SteamAPI_ISteamScreenshots_AddVRScreenshotToLibrary(
				IntPtr ISteamScreenshots,
				VRScreenshotType eType,
				string pchFilename,
				string pchVRFilename);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamMusic_BIsEnabled(IntPtr ISteamMusic);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamMusic_BIsPlaying(IntPtr ISteamMusic);

			[DllImport("libsteam_api64.so")]
			internal static extern AudioPlayback_Status SteamAPI_ISteamMusic_GetPlaybackStatus(
				IntPtr ISteamMusic);

			[DllImport("libsteam_api64.so")]
			internal static extern void SteamAPI_ISteamMusic_Play(IntPtr ISteamMusic);

			[DllImport("libsteam_api64.so")]
			internal static extern void SteamAPI_ISteamMusic_Pause(IntPtr ISteamMusic);

			[DllImport("libsteam_api64.so")]
			internal static extern void SteamAPI_ISteamMusic_PlayPrevious(IntPtr ISteamMusic);

			[DllImport("libsteam_api64.so")]
			internal static extern void SteamAPI_ISteamMusic_PlayNext(IntPtr ISteamMusic);

			[DllImport("libsteam_api64.so")]
			internal static extern void SteamAPI_ISteamMusic_SetVolume(
				IntPtr ISteamMusic,
				float flVolume);

			[DllImport("libsteam_api64.so")]
			internal static extern float SteamAPI_ISteamMusic_GetVolume(IntPtr ISteamMusic);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamMusicRemote_RegisterSteamMusicRemote(
				IntPtr ISteamMusicRemote,
				string pchName);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamMusicRemote_DeregisterSteamMusicRemote(
				IntPtr ISteamMusicRemote);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamMusicRemote_BIsCurrentMusicRemote(
				IntPtr ISteamMusicRemote);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamMusicRemote_BActivationSuccess(
				IntPtr ISteamMusicRemote,
				[MarshalAs(UnmanagedType.U1)] bool bValue);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamMusicRemote_SetDisplayName(
				IntPtr ISteamMusicRemote,
				string pchDisplayName);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamMusicRemote_SetPNGIcon_64x64(
				IntPtr ISteamMusicRemote,
				IntPtr pvBuffer,
				uint cbBufferLength);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamMusicRemote_EnablePlayPrevious(
				IntPtr ISteamMusicRemote,
				[MarshalAs(UnmanagedType.U1)] bool bValue);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamMusicRemote_EnablePlayNext(
				IntPtr ISteamMusicRemote,
				[MarshalAs(UnmanagedType.U1)] bool bValue);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamMusicRemote_EnableShuffled(
				IntPtr ISteamMusicRemote,
				[MarshalAs(UnmanagedType.U1)] bool bValue);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamMusicRemote_EnableLooped(
				IntPtr ISteamMusicRemote,
				[MarshalAs(UnmanagedType.U1)] bool bValue);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamMusicRemote_EnableQueue(
				IntPtr ISteamMusicRemote,
				[MarshalAs(UnmanagedType.U1)] bool bValue);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamMusicRemote_EnablePlaylists(
				IntPtr ISteamMusicRemote,
				[MarshalAs(UnmanagedType.U1)] bool bValue);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamMusicRemote_UpdatePlaybackStatus(
				IntPtr ISteamMusicRemote,
				AudioPlayback_Status nStatus);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamMusicRemote_UpdateShuffled(
				IntPtr ISteamMusicRemote,
				[MarshalAs(UnmanagedType.U1)] bool bValue);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamMusicRemote_UpdateLooped(
				IntPtr ISteamMusicRemote,
				[MarshalAs(UnmanagedType.U1)] bool bValue);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamMusicRemote_UpdateVolume(
				IntPtr ISteamMusicRemote,
				float flValue);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamMusicRemote_CurrentEntryWillChange(
				IntPtr ISteamMusicRemote);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamMusicRemote_CurrentEntryIsAvailable(
				IntPtr ISteamMusicRemote,
				[MarshalAs(UnmanagedType.U1)] bool bAvailable);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamMusicRemote_UpdateCurrentEntryText(
				IntPtr ISteamMusicRemote,
				string pchText);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamMusicRemote_UpdateCurrentEntryElapsedSeconds(
				IntPtr ISteamMusicRemote,
				int nValue);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamMusicRemote_UpdateCurrentEntryCoverArt(
				IntPtr ISteamMusicRemote,
				IntPtr pvBuffer,
				uint cbBufferLength);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamMusicRemote_CurrentEntryDidChange(
				IntPtr ISteamMusicRemote);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamMusicRemote_QueueWillChange(
				IntPtr ISteamMusicRemote);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamMusicRemote_ResetQueueEntries(
				IntPtr ISteamMusicRemote);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamMusicRemote_SetQueueEntry(
				IntPtr ISteamMusicRemote,
				int nID,
				int nPosition,
				string pchEntryText);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamMusicRemote_SetCurrentQueueEntry(
				IntPtr ISteamMusicRemote,
				int nID);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamMusicRemote_QueueDidChange(
				IntPtr ISteamMusicRemote);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamMusicRemote_PlaylistWillChange(
				IntPtr ISteamMusicRemote);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamMusicRemote_ResetPlaylistEntries(
				IntPtr ISteamMusicRemote);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamMusicRemote_SetPlaylistEntry(
				IntPtr ISteamMusicRemote,
				int nID,
				int nPosition,
				string pchEntryText);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamMusicRemote_SetCurrentPlaylistEntry(
				IntPtr ISteamMusicRemote,
				int nID);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamMusicRemote_PlaylistDidChange(
				IntPtr ISteamMusicRemote);

			[DllImport("libsteam_api64.so")]
			internal static extern HTTPRequestHandle SteamAPI_ISteamHTTP_CreateHTTPRequest(
				IntPtr ISteamHTTP,
				HTTPMethod eHTTPRequestMethod,
				string pchAbsoluteURL);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamHTTP_SetHTTPRequestContextValue(
				IntPtr ISteamHTTP,
				uint hRequest,
				ulong ulContextValue);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamHTTP_SetHTTPRequestNetworkActivityTimeout(
				IntPtr ISteamHTTP,
				uint hRequest,
				uint unTimeoutSeconds);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamHTTP_SetHTTPRequestHeaderValue(
				IntPtr ISteamHTTP,
				uint hRequest,
				string pchHeaderName,
				string pchHeaderValue);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamHTTP_SetHTTPRequestGetOrPostParameter(
				IntPtr ISteamHTTP,
				uint hRequest,
				string pchParamName,
				string pchParamValue);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamHTTP_SendHTTPRequest(
				IntPtr ISteamHTTP,
				uint hRequest,
				ref ulong pCallHandle);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamHTTP_SendHTTPRequestAndStreamResponse(
				IntPtr ISteamHTTP,
				uint hRequest,
				ref ulong pCallHandle);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamHTTP_DeferHTTPRequest(
				IntPtr ISteamHTTP,
				uint hRequest);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamHTTP_PrioritizeHTTPRequest(
				IntPtr ISteamHTTP,
				uint hRequest);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamHTTP_GetHTTPResponseHeaderSize(
				IntPtr ISteamHTTP,
				uint hRequest,
				string pchHeaderName,
				out uint unResponseHeaderSize);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamHTTP_GetHTTPResponseHeaderValue(
				IntPtr ISteamHTTP,
				uint hRequest,
				string pchHeaderName,
				out byte pHeaderValueBuffer,
				uint unBufferSize);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamHTTP_GetHTTPResponseBodySize(
				IntPtr ISteamHTTP,
				uint hRequest,
				out uint unBodySize);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamHTTP_GetHTTPResponseBodyData(
				IntPtr ISteamHTTP,
				uint hRequest,
				out byte pBodyDataBuffer,
				uint unBufferSize);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamHTTP_GetHTTPStreamingResponseBodyData(
				IntPtr ISteamHTTP,
				uint hRequest,
				uint cOffset,
				out byte pBodyDataBuffer,
				uint unBufferSize);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamHTTP_ReleaseHTTPRequest(
				IntPtr ISteamHTTP,
				uint hRequest);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamHTTP_GetHTTPDownloadProgressPct(
				IntPtr ISteamHTTP,
				uint hRequest,
				out float pflPercentOut);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamHTTP_SetHTTPRequestRawPostBody(
				IntPtr ISteamHTTP,
				uint hRequest,
				string pchContentType,
				out byte pubBody,
				uint unBodyLen);

			[DllImport("libsteam_api64.so")]
			internal static extern HTTPCookieContainerHandle SteamAPI_ISteamHTTP_CreateCookieContainer(
				IntPtr ISteamHTTP,
				[MarshalAs(UnmanagedType.U1)] bool bAllowResponsesToModify);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamHTTP_ReleaseCookieContainer(
				IntPtr ISteamHTTP,
				uint hCookieContainer);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamHTTP_SetCookie(
				IntPtr ISteamHTTP,
				uint hCookieContainer,
				string pchHost,
				string pchUrl,
				string pchCookie);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamHTTP_SetHTTPRequestCookieContainer(
				IntPtr ISteamHTTP,
				uint hRequest,
				uint hCookieContainer);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamHTTP_SetHTTPRequestUserAgentInfo(
				IntPtr ISteamHTTP,
				uint hRequest,
				string pchUserAgentInfo);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamHTTP_SetHTTPRequestRequiresVerifiedCertificate(
				IntPtr ISteamHTTP,
				uint hRequest,
				[MarshalAs(UnmanagedType.U1)] bool bRequireVerifiedCertificate);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamHTTP_SetHTTPRequestAbsoluteTimeoutMS(
				IntPtr ISteamHTTP,
				uint hRequest,
				uint unMilliseconds);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamHTTP_GetHTTPRequestWasTimedOut(
				IntPtr ISteamHTTP,
				uint hRequest,
				[MarshalAs(UnmanagedType.U1)] ref bool pbWasTimedOut);

			[DllImport("libsteam_api64.so")]
			internal static extern ClientUnifiedMessageHandle SteamAPI_ISteamUnifiedMessages_SendMethod(
				IntPtr ISteamUnifiedMessages,
				string pchServiceMethod,
				IntPtr pRequestBuffer,
				uint unRequestBufferSize,
				ulong unContext);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamUnifiedMessages_GetMethodResponseInfo(
				IntPtr ISteamUnifiedMessages,
				ulong hHandle,
				out uint punResponseSize,
				out Result peResult);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamUnifiedMessages_GetMethodResponseData(
				IntPtr ISteamUnifiedMessages,
				ulong hHandle,
				IntPtr pResponseBuffer,
				uint unResponseBufferSize,
				[MarshalAs(UnmanagedType.U1)] bool bAutoRelease);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamUnifiedMessages_ReleaseMethod(
				IntPtr ISteamUnifiedMessages,
				ulong hHandle);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamUnifiedMessages_SendNotification(
				IntPtr ISteamUnifiedMessages,
				string pchServiceNotification,
				IntPtr pNotificationBuffer,
				uint unNotificationBufferSize);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamController_Init(IntPtr ISteamController);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamController_Shutdown(IntPtr ISteamController);

			[DllImport("libsteam_api64.so")]
			internal static extern void SteamAPI_ISteamController_RunFrame(IntPtr ISteamController);

			[DllImport("libsteam_api64.so")]
			internal static extern int SteamAPI_ISteamController_GetConnectedControllers(
				IntPtr ISteamController,
				IntPtr handlesOut);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamController_ShowBindingPanel(
				IntPtr ISteamController,
				ulong controllerHandle);

			[DllImport("libsteam_api64.so")]
			internal static extern ControllerActionSetHandle_t SteamAPI_ISteamController_GetActionSetHandle(
				IntPtr ISteamController,
				string pszActionSetName);

			[DllImport("libsteam_api64.so")]
			internal static extern void SteamAPI_ISteamController_ActivateActionSet(
				IntPtr ISteamController,
				ulong controllerHandle,
				ulong actionSetHandle);

			[DllImport("libsteam_api64.so")]
			internal static extern ControllerActionSetHandle_t SteamAPI_ISteamController_GetCurrentActionSet(
				IntPtr ISteamController,
				ulong controllerHandle);

			[DllImport("libsteam_api64.so")]
			internal static extern ControllerDigitalActionHandle_t SteamAPI_ISteamController_GetDigitalActionHandle(
				IntPtr ISteamController,
				string pszActionName);

			[DllImport("libsteam_api64.so")]
			internal static extern ControllerDigitalActionData_t SteamAPI_ISteamController_GetDigitalActionData(
				IntPtr ISteamController,
				ulong controllerHandle,
				ulong digitalActionHandle);

			[DllImport("libsteam_api64.so")]
			internal static extern int SteamAPI_ISteamController_GetDigitalActionOrigins(
				IntPtr ISteamController,
				ulong controllerHandle,
				ulong actionSetHandle,
				ulong digitalActionHandle,
				out ControllerActionOrigin originsOut);

			[DllImport("libsteam_api64.so")]
			internal static extern ControllerAnalogActionHandle_t SteamAPI_ISteamController_GetAnalogActionHandle(
				IntPtr ISteamController,
				string pszActionName);

			[DllImport("libsteam_api64.so")]
			internal static extern ControllerAnalogActionData_t SteamAPI_ISteamController_GetAnalogActionData(
				IntPtr ISteamController,
				ulong controllerHandle,
				ulong analogActionHandle);

			[DllImport("libsteam_api64.so")]
			internal static extern int SteamAPI_ISteamController_GetAnalogActionOrigins(
				IntPtr ISteamController,
				ulong controllerHandle,
				ulong actionSetHandle,
				ulong analogActionHandle,
				out ControllerActionOrigin originsOut);

			[DllImport("libsteam_api64.so")]
			internal static extern void SteamAPI_ISteamController_StopAnalogActionMomentum(
				IntPtr ISteamController,
				ulong controllerHandle,
				ulong eAction);

			[DllImport("libsteam_api64.so")]
			internal static extern void SteamAPI_ISteamController_TriggerHapticPulse(
				IntPtr ISteamController,
				ulong controllerHandle,
				SteamControllerPad eTargetPad,
				ushort usDurationMicroSec);

			[DllImport("libsteam_api64.so")]
			internal static extern void SteamAPI_ISteamController_TriggerRepeatedHapticPulse(
				IntPtr ISteamController,
				ulong controllerHandle,
				SteamControllerPad eTargetPad,
				ushort usDurationMicroSec,
				ushort usOffMicroSec,
				ushort unRepeat,
				uint nFlags);

			[DllImport("libsteam_api64.so")]
			internal static extern void SteamAPI_ISteamController_TriggerVibration(
				IntPtr ISteamController,
				ulong controllerHandle,
				ushort usLeftSpeed,
				ushort usRightSpeed);

			[DllImport("libsteam_api64.so")]
			internal static extern void SteamAPI_ISteamController_SetLEDColor(
				IntPtr ISteamController,
				ulong controllerHandle,
				byte nColorR,
				byte nColorG,
				byte nColorB,
				uint nFlags);

			[DllImport("libsteam_api64.so")]
			internal static extern int SteamAPI_ISteamController_GetGamepadIndexForController(
				IntPtr ISteamController,
				ulong ulControllerHandle);

			[DllImport("libsteam_api64.so")]
			internal static extern ControllerHandle_t SteamAPI_ISteamController_GetControllerForGamepadIndex(
				IntPtr ISteamController,
				int nIndex);

			[DllImport("libsteam_api64.so")]
			internal static extern ControllerMotionData_t SteamAPI_ISteamController_GetMotionData(
				IntPtr ISteamController,
				ulong controllerHandle);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamController_ShowDigitalActionOrigins(
				IntPtr ISteamController,
				ulong controllerHandle,
				ulong digitalActionHandle,
				float flScale,
				float flXPosition,
				float flYPosition);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamController_ShowAnalogActionOrigins(
				IntPtr ISteamController,
				ulong controllerHandle,
				ulong analogActionHandle,
				float flScale,
				float flXPosition,
				float flYPosition);

			[DllImport("libsteam_api64.so")]
			internal static extern IntPtr SteamAPI_ISteamController_GetStringForActionOrigin(
				IntPtr ISteamController,
				ControllerActionOrigin eOrigin);

			[DllImport("libsteam_api64.so")]
			internal static extern IntPtr SteamAPI_ISteamController_GetGlyphForActionOrigin(
				IntPtr ISteamController,
				ControllerActionOrigin eOrigin);

			[DllImport("libsteam_api64.so")]
			internal static extern UGCQueryHandle_t SteamAPI_ISteamUGC_CreateQueryUserUGCRequest(
				IntPtr ISteamUGC,
				uint unAccountID,
				UserUGCList eListType,
				UGCMatchingUGCType eMatchingUGCType,
				UserUGCListSortOrder eSortOrder,
				uint nCreatorAppID,
				uint nConsumerAppID,
				uint unPage);

			[DllImport("libsteam_api64.so")]
			internal static extern UGCQueryHandle_t SteamAPI_ISteamUGC_CreateQueryAllUGCRequest(
				IntPtr ISteamUGC,
				UGCQuery eQueryType,
				UGCMatchingUGCType eMatchingeMatchingUGCTypeFileType,
				uint nCreatorAppID,
				uint nConsumerAppID,
				uint unPage);

			[DllImport("libsteam_api64.so")]
			internal static extern UGCQueryHandle_t SteamAPI_ISteamUGC_CreateQueryUGCDetailsRequest(
				IntPtr ISteamUGC,
				IntPtr pvecPublishedFileID,
				uint unNumPublishedFileIDs);

			[DllImport("libsteam_api64.so")]
			internal static extern SteamAPICall_t SteamAPI_ISteamUGC_SendQueryUGCRequest(
				IntPtr ISteamUGC,
				ulong handle);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamUGC_GetQueryUGCResult(
				IntPtr ISteamUGC,
				ulong handle,
				uint index,
				ref SteamUGCDetails_t.PackSmall pDetails);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamUGC_GetQueryUGCPreviewURL(
				IntPtr ISteamUGC,
				ulong handle,
				uint index,
				StringBuilder pchURL,
				uint cchURLSize);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamUGC_GetQueryUGCMetadata(
				IntPtr ISteamUGC,
				ulong handle,
				uint index,
				StringBuilder pchMetadata,
				uint cchMetadatasize);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamUGC_GetQueryUGCChildren(
				IntPtr ISteamUGC,
				ulong handle,
				uint index,
				IntPtr pvecPublishedFileID,
				uint cMaxEntries);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamUGC_GetQueryUGCStatistic(
				IntPtr ISteamUGC,
				ulong handle,
				uint index,
				ItemStatistic eStatType,
				out ulong pStatValue);

			[DllImport("libsteam_api64.so")]
			internal static extern uint SteamAPI_ISteamUGC_GetQueryUGCNumAdditionalPreviews(
				IntPtr ISteamUGC,
				ulong handle,
				uint index);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamUGC_GetQueryUGCAdditionalPreview(
				IntPtr ISteamUGC,
				ulong handle,
				uint index,
				uint previewIndex,
				StringBuilder pchURLOrVideoID,
				uint cchURLSize,
				StringBuilder pchOriginalFileName,
				uint cchOriginalFileNameSize,
				out ItemPreviewType pPreviewType);

			[DllImport("libsteam_api64.so")]
			internal static extern uint SteamAPI_ISteamUGC_GetQueryUGCNumKeyValueTags(
				IntPtr ISteamUGC,
				ulong handle,
				uint index);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamUGC_GetQueryUGCKeyValueTag(
				IntPtr ISteamUGC,
				ulong handle,
				uint index,
				uint keyValueTagIndex,
				StringBuilder pchKey,
				uint cchKeySize,
				StringBuilder pchValue,
				uint cchValueSize);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamUGC_ReleaseQueryUGCRequest(
				IntPtr ISteamUGC,
				ulong handle);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamUGC_AddRequiredTag(
				IntPtr ISteamUGC,
				ulong handle,
				string pTagName);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamUGC_AddExcludedTag(
				IntPtr ISteamUGC,
				ulong handle,
				string pTagName);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamUGC_SetReturnOnlyIDs(
				IntPtr ISteamUGC,
				ulong handle,
				[MarshalAs(UnmanagedType.U1)] bool bReturnOnlyIDs);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamUGC_SetReturnKeyValueTags(
				IntPtr ISteamUGC,
				ulong handle,
				[MarshalAs(UnmanagedType.U1)] bool bReturnKeyValueTags);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamUGC_SetReturnLongDescription(
				IntPtr ISteamUGC,
				ulong handle,
				[MarshalAs(UnmanagedType.U1)] bool bReturnLongDescription);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamUGC_SetReturnMetadata(
				IntPtr ISteamUGC,
				ulong handle,
				[MarshalAs(UnmanagedType.U1)] bool bReturnMetadata);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamUGC_SetReturnChildren(
				IntPtr ISteamUGC,
				ulong handle,
				[MarshalAs(UnmanagedType.U1)] bool bReturnChildren);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamUGC_SetReturnAdditionalPreviews(
				IntPtr ISteamUGC,
				ulong handle,
				[MarshalAs(UnmanagedType.U1)] bool bReturnAdditionalPreviews);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamUGC_SetReturnTotalOnly(
				IntPtr ISteamUGC,
				ulong handle,
				[MarshalAs(UnmanagedType.U1)] bool bReturnTotalOnly);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamUGC_SetReturnPlaytimeStats(
				IntPtr ISteamUGC,
				ulong handle,
				uint unDays);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamUGC_SetLanguage(
				IntPtr ISteamUGC,
				ulong handle,
				string pchLanguage);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamUGC_SetAllowCachedResponse(
				IntPtr ISteamUGC,
				ulong handle,
				uint unMaxAgeSeconds);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamUGC_SetCloudFileNameFilter(
				IntPtr ISteamUGC,
				ulong handle,
				string pMatchCloudFileName);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamUGC_SetMatchAnyTag(
				IntPtr ISteamUGC,
				ulong handle,
				[MarshalAs(UnmanagedType.U1)] bool bMatchAnyTag);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamUGC_SetSearchText(
				IntPtr ISteamUGC,
				ulong handle,
				string pSearchText);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamUGC_SetRankedByTrendDays(
				IntPtr ISteamUGC,
				ulong handle,
				uint unDays);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamUGC_AddRequiredKeyValueTag(
				IntPtr ISteamUGC,
				ulong handle,
				string pKey,
				string pValue);

			[DllImport("libsteam_api64.so")]
			internal static extern SteamAPICall_t SteamAPI_ISteamUGC_RequestUGCDetails(
				IntPtr ISteamUGC,
				ulong nPublishedFileID,
				uint unMaxAgeSeconds);

			[DllImport("libsteam_api64.so")]
			internal static extern SteamAPICall_t SteamAPI_ISteamUGC_CreateItem(
				IntPtr ISteamUGC,
				uint nConsumerAppId,
				WorkshopFileType eFileType);

			[DllImport("libsteam_api64.so")]
			internal static extern UGCUpdateHandle_t SteamAPI_ISteamUGC_StartItemUpdate(
				IntPtr ISteamUGC,
				uint nConsumerAppId,
				ulong nPublishedFileID);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamUGC_SetItemTitle(
				IntPtr ISteamUGC,
				ulong handle,
				string pchTitle);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamUGC_SetItemDescription(
				IntPtr ISteamUGC,
				ulong handle,
				string pchDescription);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamUGC_SetItemUpdateLanguage(
				IntPtr ISteamUGC,
				ulong handle,
				string pchLanguage);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamUGC_SetItemMetadata(
				IntPtr ISteamUGC,
				ulong handle,
				string pchMetaData);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamUGC_SetItemVisibility(
				IntPtr ISteamUGC,
				ulong handle,
				RemoteStoragePublishedFileVisibility eVisibility);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamUGC_SetItemTags(
				IntPtr ISteamUGC,
				ulong updateHandle,
				ref SteamParamStringArray_t.PackSmall pTags);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamUGC_SetItemContent(
				IntPtr ISteamUGC,
				ulong handle,
				string pszContentFolder);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamUGC_SetItemPreview(
				IntPtr ISteamUGC,
				ulong handle,
				string pszPreviewFile);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamUGC_RemoveItemKeyValueTags(
				IntPtr ISteamUGC,
				ulong handle,
				string pchKey);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamUGC_AddItemKeyValueTag(
				IntPtr ISteamUGC,
				ulong handle,
				string pchKey,
				string pchValue);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamUGC_AddItemPreviewFile(
				IntPtr ISteamUGC,
				ulong handle,
				string pszPreviewFile,
				ItemPreviewType type);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamUGC_AddItemPreviewVideo(
				IntPtr ISteamUGC,
				ulong handle,
				string pszVideoID);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamUGC_UpdateItemPreviewFile(
				IntPtr ISteamUGC,
				ulong handle,
				uint index,
				string pszPreviewFile);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamUGC_UpdateItemPreviewVideo(
				IntPtr ISteamUGC,
				ulong handle,
				uint index,
				string pszVideoID);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamUGC_RemoveItemPreview(
				IntPtr ISteamUGC,
				ulong handle,
				uint index);

			[DllImport("libsteam_api64.so")]
			internal static extern SteamAPICall_t SteamAPI_ISteamUGC_SubmitItemUpdate(
				IntPtr ISteamUGC,
				ulong handle,
				string pchChangeNote);

			[DllImport("libsteam_api64.so")]
			internal static extern ItemUpdateStatus SteamAPI_ISteamUGC_GetItemUpdateProgress(
				IntPtr ISteamUGC,
				ulong handle,
				out ulong punBytesProcessed,
				out ulong punBytesTotal);

			[DllImport("libsteam_api64.so")]
			internal static extern SteamAPICall_t SteamAPI_ISteamUGC_SetUserItemVote(
				IntPtr ISteamUGC,
				ulong nPublishedFileID,
				[MarshalAs(UnmanagedType.U1)] bool bVoteUp);

			[DllImport("libsteam_api64.so")]
			internal static extern SteamAPICall_t SteamAPI_ISteamUGC_GetUserItemVote(
				IntPtr ISteamUGC,
				ulong nPublishedFileID);

			[DllImport("libsteam_api64.so")]
			internal static extern SteamAPICall_t SteamAPI_ISteamUGC_AddItemToFavorites(
				IntPtr ISteamUGC,
				uint nAppId,
				ulong nPublishedFileID);

			[DllImport("libsteam_api64.so")]
			internal static extern SteamAPICall_t SteamAPI_ISteamUGC_RemoveItemFromFavorites(
				IntPtr ISteamUGC,
				uint nAppId,
				ulong nPublishedFileID);

			[DllImport("libsteam_api64.so")]
			internal static extern SteamAPICall_t SteamAPI_ISteamUGC_SubscribeItem(
				IntPtr ISteamUGC,
				ulong nPublishedFileID);

			[DllImport("libsteam_api64.so")]
			internal static extern SteamAPICall_t SteamAPI_ISteamUGC_UnsubscribeItem(
				IntPtr ISteamUGC,
				ulong nPublishedFileID);

			[DllImport("libsteam_api64.so")]
			internal static extern uint SteamAPI_ISteamUGC_GetNumSubscribedItems(IntPtr ISteamUGC);

			[DllImport("libsteam_api64.so")]
			internal static extern uint SteamAPI_ISteamUGC_GetSubscribedItems(
				IntPtr ISteamUGC,
				IntPtr pvecPublishedFileID,
				uint cMaxEntries);

			[DllImport("libsteam_api64.so")]
			internal static extern uint SteamAPI_ISteamUGC_GetItemState(
				IntPtr ISteamUGC,
				ulong nPublishedFileID);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamUGC_GetItemInstallInfo(
				IntPtr ISteamUGC,
				ulong nPublishedFileID,
				out ulong punSizeOnDisk,
				StringBuilder pchFolder,
				uint cchFolderSize,
				out uint punTimeStamp);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamUGC_GetItemDownloadInfo(
				IntPtr ISteamUGC,
				ulong nPublishedFileID,
				out ulong punBytesDownloaded,
				out ulong punBytesTotal);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamUGC_DownloadItem(
				IntPtr ISteamUGC,
				ulong nPublishedFileID,
				[MarshalAs(UnmanagedType.U1)] bool bHighPriority);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamUGC_BInitWorkshopForGameServer(
				IntPtr ISteamUGC,
				uint unWorkshopDepotID,
				string pszFolder);

			[DllImport("libsteam_api64.so")]
			internal static extern void SteamAPI_ISteamUGC_SuspendDownloads(
				IntPtr ISteamUGC,
				[MarshalAs(UnmanagedType.U1)] bool bSuspend);

			[DllImport("libsteam_api64.so")]
			internal static extern SteamAPICall_t SteamAPI_ISteamUGC_StartPlaytimeTracking(
				IntPtr ISteamUGC,
				IntPtr pvecPublishedFileID,
				uint unNumPublishedFileIDs);

			[DllImport("libsteam_api64.so")]
			internal static extern SteamAPICall_t SteamAPI_ISteamUGC_StopPlaytimeTracking(
				IntPtr ISteamUGC,
				IntPtr pvecPublishedFileID,
				uint unNumPublishedFileIDs);

			[DllImport("libsteam_api64.so")]
			internal static extern SteamAPICall_t SteamAPI_ISteamUGC_StopPlaytimeTrackingForAllItems(
				IntPtr ISteamUGC);

			[DllImport("libsteam_api64.so")]
			internal static extern SteamAPICall_t SteamAPI_ISteamUGC_AddDependency(
				IntPtr ISteamUGC,
				ulong nParentPublishedFileID,
				ulong nChildPublishedFileID);

			[DllImport("libsteam_api64.so")]
			internal static extern SteamAPICall_t SteamAPI_ISteamUGC_RemoveDependency(
				IntPtr ISteamUGC,
				ulong nParentPublishedFileID,
				ulong nChildPublishedFileID);

			[DllImport("libsteam_api64.so")]
			internal static extern uint SteamAPI_ISteamAppList_GetNumInstalledApps(IntPtr ISteamAppList);

			[DllImport("libsteam_api64.so")]
			internal static extern uint SteamAPI_ISteamAppList_GetInstalledApps(
				IntPtr ISteamAppList,
				IntPtr pvecAppID,
				uint unMaxAppIDs);

			[DllImport("libsteam_api64.so")]
			internal static extern int SteamAPI_ISteamAppList_GetAppName(
				IntPtr ISteamAppList,
				uint nAppID,
				StringBuilder pchName,
				int cchNameMax);

			[DllImport("libsteam_api64.so")]
			internal static extern int SteamAPI_ISteamAppList_GetAppInstallDir(
				IntPtr ISteamAppList,
				uint nAppID,
				StringBuilder pchDirectory,
				int cchNameMax);

			[DllImport("libsteam_api64.so")]
			internal static extern int SteamAPI_ISteamAppList_GetAppBuildId(
				IntPtr ISteamAppList,
				uint nAppID);

			[DllImport("libsteam_api64.so")]
			internal static extern void SteamAPI_ISteamHTMLSurface_DestructISteamHTMLSurface(
				IntPtr ISteamHTMLSurface);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamHTMLSurface_Init(IntPtr ISteamHTMLSurface);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamHTMLSurface_Shutdown(IntPtr ISteamHTMLSurface);

			[DllImport("libsteam_api64.so")]
			internal static extern SteamAPICall_t SteamAPI_ISteamHTMLSurface_CreateBrowser(
				IntPtr ISteamHTMLSurface,
				string pchUserAgent,
				string pchUserCSS);

			[DllImport("libsteam_api64.so")]
			internal static extern void SteamAPI_ISteamHTMLSurface_RemoveBrowser(
				IntPtr ISteamHTMLSurface,
				uint unBrowserHandle);

			[DllImport("libsteam_api64.so")]
			internal static extern void SteamAPI_ISteamHTMLSurface_LoadURL(
				IntPtr ISteamHTMLSurface,
				uint unBrowserHandle,
				string pchURL,
				string pchPostData);

			[DllImport("libsteam_api64.so")]
			internal static extern void SteamAPI_ISteamHTMLSurface_SetSize(
				IntPtr ISteamHTMLSurface,
				uint unBrowserHandle,
				uint unWidth,
				uint unHeight);

			[DllImport("libsteam_api64.so")]
			internal static extern void SteamAPI_ISteamHTMLSurface_StopLoad(
				IntPtr ISteamHTMLSurface,
				uint unBrowserHandle);

			[DllImport("libsteam_api64.so")]
			internal static extern void SteamAPI_ISteamHTMLSurface_Reload(
				IntPtr ISteamHTMLSurface,
				uint unBrowserHandle);

			[DllImport("libsteam_api64.so")]
			internal static extern void SteamAPI_ISteamHTMLSurface_GoBack(
				IntPtr ISteamHTMLSurface,
				uint unBrowserHandle);

			[DllImport("libsteam_api64.so")]
			internal static extern void SteamAPI_ISteamHTMLSurface_GoForward(
				IntPtr ISteamHTMLSurface,
				uint unBrowserHandle);

			[DllImport("libsteam_api64.so")]
			internal static extern void SteamAPI_ISteamHTMLSurface_AddHeader(
				IntPtr ISteamHTMLSurface,
				uint unBrowserHandle,
				string pchKey,
				string pchValue);

			[DllImport("libsteam_api64.so")]
			internal static extern void SteamAPI_ISteamHTMLSurface_ExecuteJavascript(
				IntPtr ISteamHTMLSurface,
				uint unBrowserHandle,
				string pchScript);

			[DllImport("libsteam_api64.so")]
			internal static extern void SteamAPI_ISteamHTMLSurface_MouseUp(
				IntPtr ISteamHTMLSurface,
				uint unBrowserHandle,
				HTMLMouseButton eMouseButton);

			[DllImport("libsteam_api64.so")]
			internal static extern void SteamAPI_ISteamHTMLSurface_MouseDown(
				IntPtr ISteamHTMLSurface,
				uint unBrowserHandle,
				HTMLMouseButton eMouseButton);

			[DllImport("libsteam_api64.so")]
			internal static extern void SteamAPI_ISteamHTMLSurface_MouseDoubleClick(
				IntPtr ISteamHTMLSurface,
				uint unBrowserHandle,
				HTMLMouseButton eMouseButton);

			[DllImport("libsteam_api64.so")]
			internal static extern void SteamAPI_ISteamHTMLSurface_MouseMove(
				IntPtr ISteamHTMLSurface,
				uint unBrowserHandle,
				int x,
				int y);

			[DllImport("libsteam_api64.so")]
			internal static extern void SteamAPI_ISteamHTMLSurface_MouseWheel(
				IntPtr ISteamHTMLSurface,
				uint unBrowserHandle,
				int nDelta);

			[DllImport("libsteam_api64.so")]
			internal static extern void SteamAPI_ISteamHTMLSurface_KeyDown(
				IntPtr ISteamHTMLSurface,
				uint unBrowserHandle,
				uint nNativeKeyCode,
				HTMLKeyModifiers eHTMLKeyModifiers);

			[DllImport("libsteam_api64.so")]
			internal static extern void SteamAPI_ISteamHTMLSurface_KeyUp(
				IntPtr ISteamHTMLSurface,
				uint unBrowserHandle,
				uint nNativeKeyCode,
				HTMLKeyModifiers eHTMLKeyModifiers);

			[DllImport("libsteam_api64.so")]
			internal static extern void SteamAPI_ISteamHTMLSurface_KeyChar(
				IntPtr ISteamHTMLSurface,
				uint unBrowserHandle,
				uint cUnicodeChar,
				HTMLKeyModifiers eHTMLKeyModifiers);

			[DllImport("libsteam_api64.so")]
			internal static extern void SteamAPI_ISteamHTMLSurface_SetHorizontalScroll(
				IntPtr ISteamHTMLSurface,
				uint unBrowserHandle,
				uint nAbsolutePixelScroll);

			[DllImport("libsteam_api64.so")]
			internal static extern void SteamAPI_ISteamHTMLSurface_SetVerticalScroll(
				IntPtr ISteamHTMLSurface,
				uint unBrowserHandle,
				uint nAbsolutePixelScroll);

			[DllImport("libsteam_api64.so")]
			internal static extern void SteamAPI_ISteamHTMLSurface_SetKeyFocus(
				IntPtr ISteamHTMLSurface,
				uint unBrowserHandle,
				[MarshalAs(UnmanagedType.U1)] bool bHasKeyFocus);

			[DllImport("libsteam_api64.so")]
			internal static extern void SteamAPI_ISteamHTMLSurface_ViewSource(
				IntPtr ISteamHTMLSurface,
				uint unBrowserHandle);

			[DllImport("libsteam_api64.so")]
			internal static extern void SteamAPI_ISteamHTMLSurface_CopyToClipboard(
				IntPtr ISteamHTMLSurface,
				uint unBrowserHandle);

			[DllImport("libsteam_api64.so")]
			internal static extern void SteamAPI_ISteamHTMLSurface_PasteFromClipboard(
				IntPtr ISteamHTMLSurface,
				uint unBrowserHandle);

			[DllImport("libsteam_api64.so")]
			internal static extern void SteamAPI_ISteamHTMLSurface_Find(
				IntPtr ISteamHTMLSurface,
				uint unBrowserHandle,
				string pchSearchStr,
				[MarshalAs(UnmanagedType.U1)] bool bCurrentlyInFind,
				[MarshalAs(UnmanagedType.U1)] bool bReverse);

			[DllImport("libsteam_api64.so")]
			internal static extern void SteamAPI_ISteamHTMLSurface_StopFind(
				IntPtr ISteamHTMLSurface,
				uint unBrowserHandle);

			[DllImport("libsteam_api64.so")]
			internal static extern void SteamAPI_ISteamHTMLSurface_GetLinkAtPosition(
				IntPtr ISteamHTMLSurface,
				uint unBrowserHandle,
				int x,
				int y);

			[DllImport("libsteam_api64.so")]
			internal static extern void SteamAPI_ISteamHTMLSurface_SetCookie(
				IntPtr ISteamHTMLSurface,
				string pchHostname,
				string pchKey,
				string pchValue,
				string pchPath,
				uint nExpires,
				[MarshalAs(UnmanagedType.U1)] bool bSecure,
				[MarshalAs(UnmanagedType.U1)] bool bHTTPOnly);

			[DllImport("libsteam_api64.so")]
			internal static extern void SteamAPI_ISteamHTMLSurface_SetPageScaleFactor(
				IntPtr ISteamHTMLSurface,
				uint unBrowserHandle,
				float flZoom,
				int nPointX,
				int nPointY);

			[DllImport("libsteam_api64.so")]
			internal static extern void SteamAPI_ISteamHTMLSurface_SetBackgroundMode(
				IntPtr ISteamHTMLSurface,
				uint unBrowserHandle,
				[MarshalAs(UnmanagedType.U1)] bool bBackgroundMode);

			[DllImport("libsteam_api64.so")]
			internal static extern void SteamAPI_ISteamHTMLSurface_AllowStartRequest(
				IntPtr ISteamHTMLSurface,
				uint unBrowserHandle,
				[MarshalAs(UnmanagedType.U1)] bool bAllowed);

			[DllImport("libsteam_api64.so")]
			internal static extern void SteamAPI_ISteamHTMLSurface_JSDialogResponse(
				IntPtr ISteamHTMLSurface,
				uint unBrowserHandle,
				[MarshalAs(UnmanagedType.U1)] bool bResult);

			[DllImport("libsteam_api64.so")]
			internal static extern Result SteamAPI_ISteamInventory_GetResultStatus(
				IntPtr ISteamInventory,
				int resultHandle);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamInventory_GetResultItems(
				IntPtr ISteamInventory,
				int resultHandle,
				IntPtr pOutItemsArray,
				out uint punOutItemsArraySize);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamInventory_GetResultItemProperty(
				IntPtr ISteamInventory,
				int resultHandle,
				uint unItemIndex,
				string pchPropertyName,
				StringBuilder pchValueBuffer,
				out uint punValueBufferSizeOut);

			[DllImport("libsteam_api64.so")]
			internal static extern uint SteamAPI_ISteamInventory_GetResultTimestamp(
				IntPtr ISteamInventory,
				int resultHandle);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamInventory_CheckResultSteamID(
				IntPtr ISteamInventory,
				int resultHandle,
				ulong steamIDExpected);

			[DllImport("libsteam_api64.so")]
			internal static extern void SteamAPI_ISteamInventory_DestroyResult(
				IntPtr ISteamInventory,
				int resultHandle);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamInventory_GetAllItems(
				IntPtr ISteamInventory,
				ref int pResultHandle);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamInventory_GetItemsByID(
				IntPtr ISteamInventory,
				ref int pResultHandle,
				ulong[] pInstanceIDs,
				uint unCountInstanceIDs);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamInventory_SerializeResult(
				IntPtr ISteamInventory,
				int resultHandle,
				IntPtr pOutBuffer,
				out uint punOutBufferSize);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamInventory_DeserializeResult(
				IntPtr ISteamInventory,
				ref int pOutResultHandle,
				IntPtr pBuffer,
				uint unBufferSize,
				[MarshalAs(UnmanagedType.U1)] bool bRESERVED_MUST_BE_FALSE);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamInventory_GenerateItems(
				IntPtr ISteamInventory,
				ref int pResultHandle,
				int[] pArrayItemDefs,
				uint[] punArrayQuantity,
				uint unArrayLength);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamInventory_GrantPromoItems(
				IntPtr ISteamInventory,
				ref int pResultHandle);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamInventory_AddPromoItem(
				IntPtr ISteamInventory,
				ref int pResultHandle,
				int itemDef);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamInventory_AddPromoItems(
				IntPtr ISteamInventory,
				ref int pResultHandle,
				int[] pArrayItemDefs,
				uint unArrayLength);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamInventory_ConsumeItem(
				IntPtr ISteamInventory,
				ref int pResultHandle,
				ulong itemConsume,
				uint unQuantity);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamInventory_ExchangeItems(
				IntPtr ISteamInventory,
				ref int pResultHandle,
				int[] pArrayGenerate,
				uint[] punArrayGenerateQuantity,
				uint unArrayGenerateLength,
				ulong[] pArrayDestroy,
				uint[] punArrayDestroyQuantity,
				uint unArrayDestroyLength);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamInventory_TransferItemQuantity(
				IntPtr ISteamInventory,
				ref int pResultHandle,
				ulong itemIdSource,
				uint unQuantity,
				ulong itemIdDest);

			[DllImport("libsteam_api64.so")]
			internal static extern void SteamAPI_ISteamInventory_SendItemDropHeartbeat(
				IntPtr ISteamInventory);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamInventory_TriggerItemDrop(
				IntPtr ISteamInventory,
				ref int pResultHandle,
				int dropListDefinition);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamInventory_TradeItems(
				IntPtr ISteamInventory,
				ref int pResultHandle,
				ulong steamIDTradePartner,
				ulong[] pArrayGive,
				uint[] pArrayGiveQuantity,
				uint nArrayGiveLength,
				ulong[] pArrayGet,
				uint[] pArrayGetQuantity,
				uint nArrayGetLength);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamInventory_LoadItemDefinitions(
				IntPtr ISteamInventory);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamInventory_GetItemDefinitionIDs(
				IntPtr ISteamInventory,
				IntPtr pItemDefIDs,
				out uint punItemDefIDsArraySize);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamInventory_GetItemDefinitionProperty(
				IntPtr ISteamInventory,
				int iDefinition,
				string pchPropertyName,
				StringBuilder pchValueBuffer,
				out uint punValueBufferSizeOut);

			[DllImport("libsteam_api64.so")]
			internal static extern SteamAPICall_t SteamAPI_ISteamInventory_RequestEligiblePromoItemDefinitionsIDs(
				IntPtr ISteamInventory,
				ulong steamID);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamInventory_GetEligiblePromoItemDefinitionIDs(
				IntPtr ISteamInventory,
				ulong steamID,
				IntPtr pItemDefIDs,
				out uint punItemDefIDsArraySize);

			[DllImport("libsteam_api64.so")]
			internal static extern void SteamAPI_ISteamVideo_GetVideoURL(
				IntPtr ISteamVideo,
				uint unVideoAppID);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamVideo_IsBroadcasting(
				IntPtr ISteamVideo,
				IntPtr pnNumViewers);

			[DllImport("libsteam_api64.so")]
			internal static extern void SteamAPI_ISteamVideo_GetOPFSettings(
				IntPtr ISteamVideo,
				uint unVideoAppID);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamVideo_GetOPFStringForApp(
				IntPtr ISteamVideo,
				uint unVideoAppID,
				StringBuilder pchBuffer,
				out int pnBufferSize);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamGameServer_InitGameServer(
				IntPtr ISteamGameServer,
				uint unIP,
				ushort usGamePort,
				ushort usQueryPort,
				uint unFlags,
				uint nGameAppId,
				string pchVersionString);

			[DllImport("libsteam_api64.so")]
			internal static extern void SteamAPI_ISteamGameServer_SetProduct(
				IntPtr ISteamGameServer,
				string pszProduct);

			[DllImport("libsteam_api64.so")]
			internal static extern void SteamAPI_ISteamGameServer_SetGameDescription(
				IntPtr ISteamGameServer,
				string pszGameDescription);

			[DllImport("libsteam_api64.so")]
			internal static extern void SteamAPI_ISteamGameServer_SetModDir(
				IntPtr ISteamGameServer,
				string pszModDir);

			[DllImport("libsteam_api64.so")]
			internal static extern void SteamAPI_ISteamGameServer_SetDedicatedServer(
				IntPtr ISteamGameServer,
				[MarshalAs(UnmanagedType.U1)] bool bDedicated);

			[DllImport("libsteam_api64.so")]
			internal static extern void SteamAPI_ISteamGameServer_LogOn(
				IntPtr ISteamGameServer,
				string pszToken);

			[DllImport("libsteam_api64.so")]
			internal static extern void SteamAPI_ISteamGameServer_LogOnAnonymous(IntPtr ISteamGameServer);

			[DllImport("libsteam_api64.so")]
			internal static extern void SteamAPI_ISteamGameServer_LogOff(IntPtr ISteamGameServer);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamGameServer_BLoggedOn(IntPtr ISteamGameServer);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamGameServer_BSecure(IntPtr ISteamGameServer);

			[DllImport("libsteam_api64.so")]
			internal static extern CSteamID SteamAPI_ISteamGameServer_GetSteamID(IntPtr ISteamGameServer);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamGameServer_WasRestartRequested(
				IntPtr ISteamGameServer);

			[DllImport("libsteam_api64.so")]
			internal static extern void SteamAPI_ISteamGameServer_SetMaxPlayerCount(
				IntPtr ISteamGameServer,
				int cPlayersMax);

			[DllImport("libsteam_api64.so")]
			internal static extern void SteamAPI_ISteamGameServer_SetBotPlayerCount(
				IntPtr ISteamGameServer,
				int cBotplayers);

			[DllImport("libsteam_api64.so")]
			internal static extern void SteamAPI_ISteamGameServer_SetServerName(
				IntPtr ISteamGameServer,
				string pszServerName);

			[DllImport("libsteam_api64.so")]
			internal static extern void SteamAPI_ISteamGameServer_SetMapName(
				IntPtr ISteamGameServer,
				string pszMapName);

			[DllImport("libsteam_api64.so")]
			internal static extern void SteamAPI_ISteamGameServer_SetPasswordProtected(
				IntPtr ISteamGameServer,
				[MarshalAs(UnmanagedType.U1)] bool bPasswordProtected);

			[DllImport("libsteam_api64.so")]
			internal static extern void SteamAPI_ISteamGameServer_SetSpectatorPort(
				IntPtr ISteamGameServer,
				ushort unSpectatorPort);

			[DllImport("libsteam_api64.so")]
			internal static extern void SteamAPI_ISteamGameServer_SetSpectatorServerName(
				IntPtr ISteamGameServer,
				string pszSpectatorServerName);

			[DllImport("libsteam_api64.so")]
			internal static extern void SteamAPI_ISteamGameServer_ClearAllKeyValues(
				IntPtr ISteamGameServer);

			[DllImport("libsteam_api64.so")]
			internal static extern void SteamAPI_ISteamGameServer_SetKeyValue(
				IntPtr ISteamGameServer,
				string pKey,
				string pValue);

			[DllImport("libsteam_api64.so")]
			internal static extern void SteamAPI_ISteamGameServer_SetGameTags(
				IntPtr ISteamGameServer,
				string pchGameTags);

			[DllImport("libsteam_api64.so")]
			internal static extern void SteamAPI_ISteamGameServer_SetGameData(
				IntPtr ISteamGameServer,
				string pchGameData);

			[DllImport("libsteam_api64.so")]
			internal static extern void SteamAPI_ISteamGameServer_SetRegion(
				IntPtr ISteamGameServer,
				string pszRegion);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamGameServer_SendUserConnectAndAuthenticate(
				IntPtr ISteamGameServer,
				uint unIPClient,
				IntPtr pvAuthBlob,
				uint cubAuthBlobSize,
				out ulong pSteamIDUser);

			[DllImport("libsteam_api64.so")]
			internal static extern CSteamID SteamAPI_ISteamGameServer_CreateUnauthenticatedUserConnection(
				IntPtr ISteamGameServer);

			[DllImport("libsteam_api64.so")]
			internal static extern void SteamAPI_ISteamGameServer_SendUserDisconnect(
				IntPtr ISteamGameServer,
				ulong steamIDUser);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamGameServer_BUpdateUserData(
				IntPtr ISteamGameServer,
				ulong steamIDUser,
				string pchPlayerName,
				uint uScore);

			[DllImport("libsteam_api64.so")]
			internal static extern HAuthTicket SteamAPI_ISteamGameServer_GetAuthSessionTicket(
				IntPtr ISteamGameServer,
				IntPtr pTicket,
				int cbMaxTicket,
				out uint pcbTicket);

			[DllImport("libsteam_api64.so")]
			internal static extern BeginAuthSessionResult SteamAPI_ISteamGameServer_BeginAuthSession(
				IntPtr ISteamGameServer,
				IntPtr pAuthTicket,
				int cbAuthTicket,
				ulong steamID);

			[DllImport("libsteam_api64.so")]
			internal static extern void SteamAPI_ISteamGameServer_EndAuthSession(
				IntPtr ISteamGameServer,
				ulong steamID);

			[DllImport("libsteam_api64.so")]
			internal static extern void SteamAPI_ISteamGameServer_CancelAuthTicket(
				IntPtr ISteamGameServer,
				uint hAuthTicket);

			[DllImport("libsteam_api64.so")]
			internal static extern UserHasLicenseForAppResult SteamAPI_ISteamGameServer_UserHasLicenseForApp(
				IntPtr ISteamGameServer,
				ulong steamID,
				uint appID);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamGameServer_RequestUserGroupStatus(
				IntPtr ISteamGameServer,
				ulong steamIDUser,
				ulong steamIDGroup);

			[DllImport("libsteam_api64.so")]
			internal static extern void SteamAPI_ISteamGameServer_GetGameplayStats(
				IntPtr ISteamGameServer);

			[DllImport("libsteam_api64.so")]
			internal static extern SteamAPICall_t SteamAPI_ISteamGameServer_GetServerReputation(
				IntPtr ISteamGameServer);

			[DllImport("libsteam_api64.so")]
			internal static extern uint SteamAPI_ISteamGameServer_GetPublicIP(IntPtr ISteamGameServer);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamGameServer_HandleIncomingPacket(
				IntPtr ISteamGameServer,
				IntPtr pData,
				int cbData,
				uint srcIP,
				ushort srcPort);

			[DllImport("libsteam_api64.so")]
			internal static extern int SteamAPI_ISteamGameServer_GetNextOutgoingPacket(
				IntPtr ISteamGameServer,
				IntPtr pOut,
				int cbMaxOut,
				out uint pNetAdr,
				out ushort pPort);

			[DllImport("libsteam_api64.so")]
			internal static extern void SteamAPI_ISteamGameServer_EnableHeartbeats(
				IntPtr ISteamGameServer,
				[MarshalAs(UnmanagedType.U1)] bool bActive);

			[DllImport("libsteam_api64.so")]
			internal static extern void SteamAPI_ISteamGameServer_SetHeartbeatInterval(
				IntPtr ISteamGameServer,
				int iHeartbeatInterval);

			[DllImport("libsteam_api64.so")]
			internal static extern void SteamAPI_ISteamGameServer_ForceHeartbeat(IntPtr ISteamGameServer);

			[DllImport("libsteam_api64.so")]
			internal static extern SteamAPICall_t SteamAPI_ISteamGameServer_AssociateWithClan(
				IntPtr ISteamGameServer,
				ulong steamIDClan);

			[DllImport("libsteam_api64.so")]
			internal static extern SteamAPICall_t SteamAPI_ISteamGameServer_ComputeNewPlayerCompatibility(
				IntPtr ISteamGameServer,
				ulong steamIDNewPlayer);

			[DllImport("libsteam_api64.so")]
			internal static extern SteamAPICall_t SteamAPI_ISteamGameServerStats_RequestUserStats(
				IntPtr ISteamGameServerStats,
				ulong steamIDUser);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamGameServerStats_GetUserStat(
				IntPtr ISteamGameServerStats,
				ulong steamIDUser,
				string pchName,
				out int pData);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamGameServerStats_GetUserStat0(
				IntPtr ISteamGameServerStats,
				ulong steamIDUser,
				string pchName,
				out float pData);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamGameServerStats_GetUserAchievement(
				IntPtr ISteamGameServerStats,
				ulong steamIDUser,
				string pchName,
				[MarshalAs(UnmanagedType.U1)] ref bool pbAchieved);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamGameServerStats_SetUserStat(
				IntPtr ISteamGameServerStats,
				ulong steamIDUser,
				string pchName,
				int nData);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamGameServerStats_SetUserStat0(
				IntPtr ISteamGameServerStats,
				ulong steamIDUser,
				string pchName,
				float fData);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamGameServerStats_UpdateUserAvgRateStat(
				IntPtr ISteamGameServerStats,
				ulong steamIDUser,
				string pchName,
				float flCountThisSession,
				double dSessionLength);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamGameServerStats_SetUserAchievement(
				IntPtr ISteamGameServerStats,
				ulong steamIDUser,
				string pchName);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_ISteamGameServerStats_ClearUserAchievement(
				IntPtr ISteamGameServerStats,
				ulong steamIDUser,
				string pchName);

			[DllImport("libsteam_api64.so")]
			internal static extern SteamAPICall_t SteamAPI_ISteamGameServerStats_StoreUserStats(
				IntPtr ISteamGameServerStats,
				ulong steamIDUser);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_Init();

			[DllImport("libsteam_api64.so")]
			internal static extern void SteamAPI_RunCallbacks();

			[DllImport("libsteam_api64.so")]
			internal static extern void SteamGameServer_RunCallbacks();

			[DllImport("libsteam_api64.so")]
			internal static extern void SteamAPI_RegisterCallback(IntPtr pCallback, int callback);

			[DllImport("libsteam_api64.so")]
			internal static extern void SteamAPI_UnregisterCallback(IntPtr pCallback);

			[DllImport("libsteam_api64.so")]
			internal static extern void SteamAPI_RegisterCallResult(IntPtr pCallback, ulong callback);

			[DllImport("libsteam_api64.so")]
			internal static extern void SteamAPI_UnregisterCallResult(IntPtr pCallback, ulong callback);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamInternal_GameServer_Init(
				uint unIP,
				ushort usPort,
				ushort usGamePort,
				ushort usQueryPort,
				int eServerMode,
				string pchVersionString);

			[DllImport("libsteam_api64.so")]
			internal static extern void SteamAPI_Shutdown();

			[DllImport("libsteam_api64.so")]
			internal static extern void SteamGameServer_Shutdown();

			[DllImport("libsteam_api64.so")]
			internal static extern HSteamUser SteamAPI_GetHSteamUser();

			[DllImport("libsteam_api64.so")]
			internal static extern HSteamPipe SteamAPI_GetHSteamPipe();

			[DllImport("libsteam_api64.so")]
			internal static extern HSteamUser SteamGameServer_GetHSteamUser();

			[DllImport("libsteam_api64.so")]
			internal static extern HSteamPipe SteamGameServer_GetHSteamPipe();

			[DllImport("libsteam_api64.so")]
			internal static extern IntPtr SteamInternal_CreateInterface(string version);

			[DllImport("libsteam_api64.so")]
			internal static extern bool SteamAPI_RestartAppIfNecessary(uint unOwnAppID);
		}
	}

	internal class Mac : Interface, IDisposable {
		internal IntPtr _ptr;

		public bool IsValid => _ptr != IntPtr.Zero;

		internal Mac(IntPtr pointer) {
			_ptr = pointer;
		}

		public virtual void Dispose() {
			_ptr = IntPtr.Zero;
		}

		public virtual HSteamPipe ISteamClient_CreateSteamPipe() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamClient_CreateSteamPipe(_ptr)
				: throw new Exception("ISteamClient _ptr is null!");
		}

		public virtual bool ISteamClient_BReleaseSteamPipe(int hSteamPipe) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamClient_BReleaseSteamPipe(_ptr, hSteamPipe)
				: throw new Exception("ISteamClient _ptr is null!");
		}

		public virtual HSteamUser ISteamClient_ConnectToGlobalUser(int hSteamPipe) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamClient_ConnectToGlobalUser(_ptr, hSteamPipe)
				: throw new Exception("ISteamClient _ptr is null!");
		}

		public virtual HSteamUser ISteamClient_CreateLocalUser(
			out int phSteamPipe,
			AccountType eAccountType) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamClient_CreateLocalUser(_ptr, out phSteamPipe, eAccountType)
				: throw new Exception("ISteamClient _ptr is null!");
		}

		public virtual void ISteamClient_ReleaseUser(int hSteamPipe, int hUser) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamClient _ptr is null!");
			Native.SteamAPI_ISteamClient_ReleaseUser(_ptr, hSteamPipe, hUser);
		}

		public virtual IntPtr ISteamClient_GetISteamUser(
			int hSteamUser,
			int hSteamPipe,
			string pchVersion) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamClient _ptr is null!");
			return Native.SteamAPI_ISteamClient_GetISteamUser(_ptr, hSteamUser, hSteamPipe, pchVersion);
		}

		public virtual IntPtr ISteamClient_GetISteamGameServer(
			int hSteamUser,
			int hSteamPipe,
			string pchVersion) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamClient _ptr is null!");
			return Native.SteamAPI_ISteamClient_GetISteamGameServer(_ptr, hSteamUser, hSteamPipe, pchVersion);
		}

		public virtual void ISteamClient_SetLocalIPBinding(uint unIP, ushort usPort) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamClient _ptr is null!");
			Native.SteamAPI_ISteamClient_SetLocalIPBinding(_ptr, unIP, usPort);
		}

		public virtual IntPtr ISteamClient_GetISteamFriends(
			int hSteamUser,
			int hSteamPipe,
			string pchVersion) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamClient _ptr is null!");
			return Native.SteamAPI_ISteamClient_GetISteamFriends(_ptr, hSteamUser, hSteamPipe, pchVersion);
		}

		public virtual IntPtr ISteamClient_GetISteamUtils(int hSteamPipe, string pchVersion) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamClient _ptr is null!");
			return Native.SteamAPI_ISteamClient_GetISteamUtils(_ptr, hSteamPipe, pchVersion);
		}

		public virtual IntPtr ISteamClient_GetISteamMatchmaking(
			int hSteamUser,
			int hSteamPipe,
			string pchVersion) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamClient _ptr is null!");
			return Native.SteamAPI_ISteamClient_GetISteamMatchmaking(_ptr, hSteamUser, hSteamPipe, pchVersion);
		}

		public virtual IntPtr ISteamClient_GetISteamMatchmakingServers(
			int hSteamUser,
			int hSteamPipe,
			string pchVersion) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamClient _ptr is null!");
			return Native.SteamAPI_ISteamClient_GetISteamMatchmakingServers(_ptr, hSteamUser, hSteamPipe, pchVersion);
		}

		public virtual IntPtr ISteamClient_GetISteamGenericInterface(
			int hSteamUser,
			int hSteamPipe,
			string pchVersion) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamClient _ptr is null!");
			return Native.SteamAPI_ISteamClient_GetISteamGenericInterface(_ptr, hSteamUser, hSteamPipe, pchVersion);
		}

		public virtual IntPtr ISteamClient_GetISteamUserStats(
			int hSteamUser,
			int hSteamPipe,
			string pchVersion) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamClient _ptr is null!");
			return Native.SteamAPI_ISteamClient_GetISteamUserStats(_ptr, hSteamUser, hSteamPipe, pchVersion);
		}

		public virtual IntPtr ISteamClient_GetISteamGameServerStats(
			int hSteamuser,
			int hSteamPipe,
			string pchVersion) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamClient _ptr is null!");
			return Native.SteamAPI_ISteamClient_GetISteamGameServerStats(_ptr, hSteamuser, hSteamPipe, pchVersion);
		}

		public virtual IntPtr ISteamClient_GetISteamApps(
			int hSteamUser,
			int hSteamPipe,
			string pchVersion) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamClient _ptr is null!");
			return Native.SteamAPI_ISteamClient_GetISteamApps(_ptr, hSteamUser, hSteamPipe, pchVersion);
		}

		public virtual IntPtr ISteamClient_GetISteamNetworking(
			int hSteamUser,
			int hSteamPipe,
			string pchVersion) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamClient _ptr is null!");
			return Native.SteamAPI_ISteamClient_GetISteamNetworking(_ptr, hSteamUser, hSteamPipe, pchVersion);
		}

		public virtual IntPtr ISteamClient_GetISteamRemoteStorage(
			int hSteamuser,
			int hSteamPipe,
			string pchVersion) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamClient _ptr is null!");
			return Native.SteamAPI_ISteamClient_GetISteamRemoteStorage(_ptr, hSteamuser, hSteamPipe, pchVersion);
		}

		public virtual IntPtr ISteamClient_GetISteamScreenshots(
			int hSteamuser,
			int hSteamPipe,
			string pchVersion) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamClient _ptr is null!");
			return Native.SteamAPI_ISteamClient_GetISteamScreenshots(_ptr, hSteamuser, hSteamPipe, pchVersion);
		}

		public virtual uint ISteamClient_GetIPCCallCount() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamClient_GetIPCCallCount(_ptr)
				: throw new Exception("ISteamClient _ptr is null!");
		}

		public virtual void ISteamClient_SetWarningMessageHook(IntPtr pFunction) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamClient _ptr is null!");
			Native.SteamAPI_ISteamClient_SetWarningMessageHook(_ptr, pFunction);
		}

		public virtual bool ISteamClient_BShutdownIfAllPipesClosed() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamClient_BShutdownIfAllPipesClosed(_ptr)
				: throw new Exception("ISteamClient _ptr is null!");
		}

		public virtual IntPtr ISteamClient_GetISteamHTTP(
			int hSteamuser,
			int hSteamPipe,
			string pchVersion) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamClient _ptr is null!");
			return Native.SteamAPI_ISteamClient_GetISteamHTTP(_ptr, hSteamuser, hSteamPipe, pchVersion);
		}

		public virtual IntPtr ISteamClient_GetISteamUnifiedMessages(
			int hSteamuser,
			int hSteamPipe,
			string pchVersion) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamClient _ptr is null!");
			return Native.SteamAPI_ISteamClient_GetISteamUnifiedMessages(_ptr, hSteamuser, hSteamPipe, pchVersion);
		}

		public virtual IntPtr ISteamClient_GetISteamController(
			int hSteamUser,
			int hSteamPipe,
			string pchVersion) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamClient _ptr is null!");
			return Native.SteamAPI_ISteamClient_GetISteamController(_ptr, hSteamUser, hSteamPipe, pchVersion);
		}

		public virtual IntPtr ISteamClient_GetISteamUGC(
			int hSteamUser,
			int hSteamPipe,
			string pchVersion) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamClient _ptr is null!");
			return Native.SteamAPI_ISteamClient_GetISteamUGC(_ptr, hSteamUser, hSteamPipe, pchVersion);
		}

		public virtual IntPtr ISteamClient_GetISteamAppList(
			int hSteamUser,
			int hSteamPipe,
			string pchVersion) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamClient _ptr is null!");
			return Native.SteamAPI_ISteamClient_GetISteamAppList(_ptr, hSteamUser, hSteamPipe, pchVersion);
		}

		public virtual IntPtr ISteamClient_GetISteamMusic(
			int hSteamuser,
			int hSteamPipe,
			string pchVersion) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamClient _ptr is null!");
			return Native.SteamAPI_ISteamClient_GetISteamMusic(_ptr, hSteamuser, hSteamPipe, pchVersion);
		}

		public virtual IntPtr ISteamClient_GetISteamMusicRemote(
			int hSteamuser,
			int hSteamPipe,
			string pchVersion) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamClient _ptr is null!");
			return Native.SteamAPI_ISteamClient_GetISteamMusicRemote(_ptr, hSteamuser, hSteamPipe, pchVersion);
		}

		public virtual IntPtr ISteamClient_GetISteamHTMLSurface(
			int hSteamuser,
			int hSteamPipe,
			string pchVersion) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamClient _ptr is null!");
			return Native.SteamAPI_ISteamClient_GetISteamHTMLSurface(_ptr, hSteamuser, hSteamPipe, pchVersion);
		}

		public virtual IntPtr ISteamClient_GetISteamInventory(
			int hSteamuser,
			int hSteamPipe,
			string pchVersion) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamClient _ptr is null!");
			return Native.SteamAPI_ISteamClient_GetISteamInventory(_ptr, hSteamuser, hSteamPipe, pchVersion);
		}

		public virtual IntPtr ISteamClient_GetISteamVideo(
			int hSteamuser,
			int hSteamPipe,
			string pchVersion) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamClient _ptr is null!");
			return Native.SteamAPI_ISteamClient_GetISteamVideo(_ptr, hSteamuser, hSteamPipe, pchVersion);
		}

		public virtual HSteamUser ISteamUser_GetHSteamUser() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUser_GetHSteamUser(_ptr)
				: throw new Exception("ISteamUser _ptr is null!");
		}

		public virtual bool ISteamUser_BLoggedOn() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUser_BLoggedOn(_ptr)
				: throw new Exception("ISteamUser _ptr is null!");
		}

		public virtual CSteamID ISteamUser_GetSteamID() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUser_GetSteamID(_ptr)
				: throw new Exception("ISteamUser _ptr is null!");
		}

		public virtual int ISteamUser_InitiateGameConnection(
			IntPtr pAuthBlob,
			int cbMaxAuthBlob,
			ulong steamIDGameServer,
			uint unIPServer,
			ushort usPortServer,
			[MarshalAs(UnmanagedType.U1)] bool bSecure) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUser _ptr is null!");
			return Native.SteamAPI_ISteamUser_InitiateGameConnection(_ptr, pAuthBlob, cbMaxAuthBlob, steamIDGameServer,
				unIPServer, usPortServer, bSecure);
		}

		public virtual void ISteamUser_TerminateGameConnection(uint unIPServer, ushort usPortServer) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUser _ptr is null!");
			Native.SteamAPI_ISteamUser_TerminateGameConnection(_ptr, unIPServer, usPortServer);
		}

		public virtual void ISteamUser_TrackAppUsageEvent(
			ulong gameID,
			int eAppUsageEvent,
			string pchExtraInfo) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUser _ptr is null!");
			Native.SteamAPI_ISteamUser_TrackAppUsageEvent(_ptr, gameID, eAppUsageEvent, pchExtraInfo);
		}

		public virtual bool ISteamUser_GetUserDataFolder(StringBuilder pchBuffer, int cubBuffer) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUser _ptr is null!");
			return Native.SteamAPI_ISteamUser_GetUserDataFolder(_ptr, pchBuffer, cubBuffer);
		}

		public virtual void ISteamUser_StartVoiceRecording() {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUser _ptr is null!");
			Native.SteamAPI_ISteamUser_StartVoiceRecording(_ptr);
		}

		public virtual void ISteamUser_StopVoiceRecording() {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUser _ptr is null!");
			Native.SteamAPI_ISteamUser_StopVoiceRecording(_ptr);
		}

		public virtual VoiceResult ISteamUser_GetAvailableVoice(
			out uint pcbCompressed,
			out uint pcbUncompressed_Deprecated,
			uint nUncompressedVoiceDesiredSampleRate_Deprecated) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUser_GetAvailableVoice(_ptr, out pcbCompressed, out pcbUncompressed_Deprecated,
					nUncompressedVoiceDesiredSampleRate_Deprecated)
				: throw new Exception("ISteamUser _ptr is null!");
		}

		public virtual VoiceResult ISteamUser_GetVoice(
			[MarshalAs(UnmanagedType.U1)] bool bWantCompressed,
			IntPtr pDestBuffer,
			uint cbDestBufferSize,
			out uint nBytesWritten,
			[MarshalAs(UnmanagedType.U1)] bool bWantUncompressed_Deprecated,
			IntPtr pUncompressedDestBuffer_Deprecated,
			uint cbUncompressedDestBufferSize_Deprecated,
			out uint nUncompressBytesWritten_Deprecated,
			uint nUncompressedVoiceDesiredSampleRate_Deprecated) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUser _ptr is null!");
			return Native.SteamAPI_ISteamUser_GetVoice(_ptr, bWantCompressed, pDestBuffer, cbDestBufferSize,
				out nBytesWritten, bWantUncompressed_Deprecated, pUncompressedDestBuffer_Deprecated,
				cbUncompressedDestBufferSize_Deprecated, out nUncompressBytesWritten_Deprecated,
				nUncompressedVoiceDesiredSampleRate_Deprecated);
		}

		public virtual VoiceResult ISteamUser_DecompressVoice(
			IntPtr pCompressed,
			uint cbCompressed,
			IntPtr pDestBuffer,
			uint cbDestBufferSize,
			out uint nBytesWritten,
			uint nDesiredSampleRate) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUser _ptr is null!");
			return Native.SteamAPI_ISteamUser_DecompressVoice(_ptr, pCompressed, cbCompressed, pDestBuffer,
				cbDestBufferSize, out nBytesWritten, nDesiredSampleRate);
		}

		public virtual uint ISteamUser_GetVoiceOptimalSampleRate() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUser_GetVoiceOptimalSampleRate(_ptr)
				: throw new Exception("ISteamUser _ptr is null!");
		}

		public virtual HAuthTicket ISteamUser_GetAuthSessionTicket(
			IntPtr pTicket,
			int cbMaxTicket,
			out uint pcbTicket) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUser _ptr is null!");
			return Native.SteamAPI_ISteamUser_GetAuthSessionTicket(_ptr, pTicket, cbMaxTicket, out pcbTicket);
		}

		public virtual BeginAuthSessionResult ISteamUser_BeginAuthSession(
			IntPtr pAuthTicket,
			int cbAuthTicket,
			ulong steamID) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUser _ptr is null!");
			return Native.SteamAPI_ISteamUser_BeginAuthSession(_ptr, pAuthTicket, cbAuthTicket, steamID);
		}

		public virtual void ISteamUser_EndAuthSession(ulong steamID) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUser _ptr is null!");
			Native.SteamAPI_ISteamUser_EndAuthSession(_ptr, steamID);
		}

		public virtual void ISteamUser_CancelAuthTicket(uint hAuthTicket) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUser _ptr is null!");
			Native.SteamAPI_ISteamUser_CancelAuthTicket(_ptr, hAuthTicket);
		}

		public virtual UserHasLicenseForAppResult ISteamUser_UserHasLicenseForApp(
			ulong steamID,
			uint appID) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUser _ptr is null!");
			return Native.SteamAPI_ISteamUser_UserHasLicenseForApp(_ptr, steamID, appID);
		}

		public virtual bool ISteamUser_BIsBehindNAT() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUser_BIsBehindNAT(_ptr)
				: throw new Exception("ISteamUser _ptr is null!");
		}

		public virtual void ISteamUser_AdvertiseGame(
			ulong steamIDGameServer,
			uint unIPServer,
			ushort usPortServer) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUser _ptr is null!");
			Native.SteamAPI_ISteamUser_AdvertiseGame(_ptr, steamIDGameServer, unIPServer, usPortServer);
		}

		public virtual SteamAPICall_t ISteamUser_RequestEncryptedAppTicket(
			IntPtr pDataToInclude,
			int cbDataToInclude) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUser _ptr is null!");
			return Native.SteamAPI_ISteamUser_RequestEncryptedAppTicket(_ptr, pDataToInclude, cbDataToInclude);
		}

		public virtual bool ISteamUser_GetEncryptedAppTicket(
			IntPtr pTicket,
			int cbMaxTicket,
			out uint pcbTicket) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUser _ptr is null!");
			return Native.SteamAPI_ISteamUser_GetEncryptedAppTicket(_ptr, pTicket, cbMaxTicket, out pcbTicket);
		}

		public virtual int ISteamUser_GetGameBadgeLevel(int nSeries, [MarshalAs(UnmanagedType.U1)] bool bFoil) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUser _ptr is null!");
			return Native.SteamAPI_ISteamUser_GetGameBadgeLevel(_ptr, nSeries, bFoil);
		}

		public virtual int ISteamUser_GetPlayerSteamLevel() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUser_GetPlayerSteamLevel(_ptr)
				: throw new Exception("ISteamUser _ptr is null!");
		}

		public virtual SteamAPICall_t ISteamUser_RequestStoreAuthURL(string pchRedirectURL) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUser_RequestStoreAuthURL(_ptr, pchRedirectURL)
				: throw new Exception("ISteamUser _ptr is null!");
		}

		public virtual bool ISteamUser_BIsPhoneVerified() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUser_BIsPhoneVerified(_ptr)
				: throw new Exception("ISteamUser _ptr is null!");
		}

		public virtual bool ISteamUser_BIsTwoFactorEnabled() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUser_BIsTwoFactorEnabled(_ptr)
				: throw new Exception("ISteamUser _ptr is null!");
		}

		public virtual bool ISteamUser_BIsPhoneIdentifying() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUser_BIsPhoneIdentifying(_ptr)
				: throw new Exception("ISteamUser _ptr is null!");
		}

		public virtual bool ISteamUser_BIsPhoneRequiringVerification() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUser_BIsPhoneRequiringVerification(_ptr)
				: throw new Exception("ISteamUser _ptr is null!");
		}

		public virtual IntPtr ISteamFriends_GetPersonaName() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_GetPersonaName(_ptr)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual SteamAPICall_t ISteamFriends_SetPersonaName(string pchPersonaName) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_SetPersonaName(_ptr, pchPersonaName)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual PersonaState ISteamFriends_GetPersonaState() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_GetPersonaState(_ptr)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual int ISteamFriends_GetFriendCount(int iFriendFlags) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_GetFriendCount(_ptr, iFriendFlags)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual CSteamID ISteamFriends_GetFriendByIndex(int iFriend, int iFriendFlags) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamFriends _ptr is null!");
			return Native.SteamAPI_ISteamFriends_GetFriendByIndex(_ptr, iFriend, iFriendFlags);
		}

		public virtual FriendRelationship ISteamFriends_GetFriendRelationship(ulong steamIDFriend) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_GetFriendRelationship(_ptr, steamIDFriend)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual PersonaState ISteamFriends_GetFriendPersonaState(ulong steamIDFriend) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_GetFriendPersonaState(_ptr, steamIDFriend)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual IntPtr ISteamFriends_GetFriendPersonaName(ulong steamIDFriend) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_GetFriendPersonaName(_ptr, steamIDFriend)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual bool ISteamFriends_GetFriendGamePlayed(
			ulong steamIDFriend,
			ref FriendGameInfo_t pFriendGameInfo) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamFriends _ptr is null!");
			var pFriendGameInfo1 = new FriendGameInfo_t.PackSmall();
			var friendGamePlayed =
				Native.SteamAPI_ISteamFriends_GetFriendGamePlayed(_ptr, steamIDFriend, ref pFriendGameInfo1);
			pFriendGameInfo = (FriendGameInfo_t)pFriendGameInfo1;
			return friendGamePlayed;
		}

		public virtual IntPtr ISteamFriends_GetFriendPersonaNameHistory(
			ulong steamIDFriend,
			int iPersonaName) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamFriends _ptr is null!");
			return Native.SteamAPI_ISteamFriends_GetFriendPersonaNameHistory(_ptr, steamIDFriend, iPersonaName);
		}

		public virtual int ISteamFriends_GetFriendSteamLevel(ulong steamIDFriend) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_GetFriendSteamLevel(_ptr, steamIDFriend)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual IntPtr ISteamFriends_GetPlayerNickname(ulong steamIDPlayer) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_GetPlayerNickname(_ptr, steamIDPlayer)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual int ISteamFriends_GetFriendsGroupCount() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_GetFriendsGroupCount(_ptr)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual FriendsGroupID_t ISteamFriends_GetFriendsGroupIDByIndex(int iFG) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_GetFriendsGroupIDByIndex(_ptr, iFG)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual IntPtr ISteamFriends_GetFriendsGroupName(short friendsGroupID) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_GetFriendsGroupName(_ptr, friendsGroupID)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual int ISteamFriends_GetFriendsGroupMembersCount(short friendsGroupID) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_GetFriendsGroupMembersCount(_ptr, friendsGroupID)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual void ISteamFriends_GetFriendsGroupMembersList(
			short friendsGroupID,
			IntPtr pOutSteamIDMembers,
			int nMembersCount) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamFriends _ptr is null!");
			Native.SteamAPI_ISteamFriends_GetFriendsGroupMembersList(_ptr, friendsGroupID, pOutSteamIDMembers,
				nMembersCount);
		}

		public virtual bool ISteamFriends_HasFriend(ulong steamIDFriend, int iFriendFlags) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamFriends _ptr is null!");
			return Native.SteamAPI_ISteamFriends_HasFriend(_ptr, steamIDFriend, iFriendFlags);
		}

		public virtual int ISteamFriends_GetClanCount() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_GetClanCount(_ptr)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual CSteamID ISteamFriends_GetClanByIndex(int iClan) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_GetClanByIndex(_ptr, iClan)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual IntPtr ISteamFriends_GetClanName(ulong steamIDClan) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_GetClanName(_ptr, steamIDClan)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual IntPtr ISteamFriends_GetClanTag(ulong steamIDClan) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_GetClanTag(_ptr, steamIDClan)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual bool ISteamFriends_GetClanActivityCounts(
			ulong steamIDClan,
			out int pnOnline,
			out int pnInGame,
			out int pnChatting) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_GetClanActivityCounts(_ptr, steamIDClan, out pnOnline, out pnInGame,
					out pnChatting)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual SteamAPICall_t ISteamFriends_DownloadClanActivityCounts(
			IntPtr psteamIDClans,
			int cClansToRequest) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamFriends _ptr is null!");
			return Native.SteamAPI_ISteamFriends_DownloadClanActivityCounts(_ptr, psteamIDClans, cClansToRequest);
		}

		public virtual int ISteamFriends_GetFriendCountFromSource(ulong steamIDSource) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_GetFriendCountFromSource(_ptr, steamIDSource)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual CSteamID ISteamFriends_GetFriendFromSourceByIndex(
			ulong steamIDSource,
			int iFriend) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamFriends _ptr is null!");
			return Native.SteamAPI_ISteamFriends_GetFriendFromSourceByIndex(_ptr, steamIDSource, iFriend);
		}

		public virtual bool ISteamFriends_IsUserInSource(ulong steamIDUser, ulong steamIDSource) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamFriends _ptr is null!");
			return Native.SteamAPI_ISteamFriends_IsUserInSource(_ptr, steamIDUser, steamIDSource);
		}

		public virtual void ISteamFriends_SetInGameVoiceSpeaking(ulong steamIDUser,
			[MarshalAs(UnmanagedType.U1)] bool bSpeaking) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamFriends _ptr is null!");
			Native.SteamAPI_ISteamFriends_SetInGameVoiceSpeaking(_ptr, steamIDUser, bSpeaking);
		}

		public virtual void ISteamFriends_ActivateGameOverlay(string pchDialog) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamFriends _ptr is null!");
			Native.SteamAPI_ISteamFriends_ActivateGameOverlay(_ptr, pchDialog);
		}

		public virtual void ISteamFriends_ActivateGameOverlayToUser(string pchDialog, ulong steamID) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamFriends _ptr is null!");
			Native.SteamAPI_ISteamFriends_ActivateGameOverlayToUser(_ptr, pchDialog, steamID);
		}

		public virtual void ISteamFriends_ActivateGameOverlayToWebPage(string pchURL) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamFriends _ptr is null!");
			Native.SteamAPI_ISteamFriends_ActivateGameOverlayToWebPage(_ptr, pchURL);
		}

		public virtual void ISteamFriends_ActivateGameOverlayToStore(
			uint nAppID,
			OverlayToStoreFlag eFlag) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamFriends _ptr is null!");
			Native.SteamAPI_ISteamFriends_ActivateGameOverlayToStore(_ptr, nAppID, eFlag);
		}

		public virtual void ISteamFriends_SetPlayedWith(ulong steamIDUserPlayedWith) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamFriends _ptr is null!");
			Native.SteamAPI_ISteamFriends_SetPlayedWith(_ptr, steamIDUserPlayedWith);
		}

		public virtual void ISteamFriends_ActivateGameOverlayInviteDialog(ulong steamIDLobby) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamFriends _ptr is null!");
			Native.SteamAPI_ISteamFriends_ActivateGameOverlayInviteDialog(_ptr, steamIDLobby);
		}

		public virtual int ISteamFriends_GetSmallFriendAvatar(ulong steamIDFriend) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_GetSmallFriendAvatar(_ptr, steamIDFriend)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual int ISteamFriends_GetMediumFriendAvatar(ulong steamIDFriend) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_GetMediumFriendAvatar(_ptr, steamIDFriend)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual int ISteamFriends_GetLargeFriendAvatar(ulong steamIDFriend) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_GetLargeFriendAvatar(_ptr, steamIDFriend)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual bool ISteamFriends_RequestUserInformation(
			ulong steamIDUser,
			[MarshalAs(UnmanagedType.U1)] bool bRequireNameOnly) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamFriends _ptr is null!");
			return Native.SteamAPI_ISteamFriends_RequestUserInformation(_ptr, steamIDUser, bRequireNameOnly);
		}

		public virtual SteamAPICall_t ISteamFriends_RequestClanOfficerList(ulong steamIDClan) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_RequestClanOfficerList(_ptr, steamIDClan)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual CSteamID ISteamFriends_GetClanOwner(ulong steamIDClan) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_GetClanOwner(_ptr, steamIDClan)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual int ISteamFriends_GetClanOfficerCount(ulong steamIDClan) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_GetClanOfficerCount(_ptr, steamIDClan)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual CSteamID ISteamFriends_GetClanOfficerByIndex(ulong steamIDClan, int iOfficer) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamFriends _ptr is null!");
			return Native.SteamAPI_ISteamFriends_GetClanOfficerByIndex(_ptr, steamIDClan, iOfficer);
		}

		public virtual uint ISteamFriends_GetUserRestrictions() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_GetUserRestrictions(_ptr)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual bool ISteamFriends_SetRichPresence(string pchKey, string pchValue) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamFriends _ptr is null!");
			return Native.SteamAPI_ISteamFriends_SetRichPresence(_ptr, pchKey, pchValue);
		}

		public virtual void ISteamFriends_ClearRichPresence() {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamFriends _ptr is null!");
			Native.SteamAPI_ISteamFriends_ClearRichPresence(_ptr);
		}

		public virtual IntPtr ISteamFriends_GetFriendRichPresence(ulong steamIDFriend, string pchKey) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamFriends _ptr is null!");
			return Native.SteamAPI_ISteamFriends_GetFriendRichPresence(_ptr, steamIDFriend, pchKey);
		}

		public virtual int ISteamFriends_GetFriendRichPresenceKeyCount(ulong steamIDFriend) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_GetFriendRichPresenceKeyCount(_ptr, steamIDFriend)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual IntPtr ISteamFriends_GetFriendRichPresenceKeyByIndex(
			ulong steamIDFriend,
			int iKey) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamFriends _ptr is null!");
			return Native.SteamAPI_ISteamFriends_GetFriendRichPresenceKeyByIndex(_ptr, steamIDFriend, iKey);
		}

		public virtual void ISteamFriends_RequestFriendRichPresence(ulong steamIDFriend) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamFriends _ptr is null!");
			Native.SteamAPI_ISteamFriends_RequestFriendRichPresence(_ptr, steamIDFriend);
		}

		public virtual bool ISteamFriends_InviteUserToGame(
			ulong steamIDFriend,
			string pchConnectString) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamFriends _ptr is null!");
			return Native.SteamAPI_ISteamFriends_InviteUserToGame(_ptr, steamIDFriend, pchConnectString);
		}

		public virtual int ISteamFriends_GetCoplayFriendCount() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_GetCoplayFriendCount(_ptr)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual CSteamID ISteamFriends_GetCoplayFriend(int iCoplayFriend) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_GetCoplayFriend(_ptr, iCoplayFriend)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual int ISteamFriends_GetFriendCoplayTime(ulong steamIDFriend) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_GetFriendCoplayTime(_ptr, steamIDFriend)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual AppId_t ISteamFriends_GetFriendCoplayGame(ulong steamIDFriend) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_GetFriendCoplayGame(_ptr, steamIDFriend)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual SteamAPICall_t ISteamFriends_JoinClanChatRoom(ulong steamIDClan) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_JoinClanChatRoom(_ptr, steamIDClan)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual bool ISteamFriends_LeaveClanChatRoom(ulong steamIDClan) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_LeaveClanChatRoom(_ptr, steamIDClan)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual int ISteamFriends_GetClanChatMemberCount(ulong steamIDClan) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_GetClanChatMemberCount(_ptr, steamIDClan)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual CSteamID ISteamFriends_GetChatMemberByIndex(ulong steamIDClan, int iUser) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamFriends _ptr is null!");
			return Native.SteamAPI_ISteamFriends_GetChatMemberByIndex(_ptr, steamIDClan, iUser);
		}

		public virtual bool ISteamFriends_SendClanChatMessage(ulong steamIDClanChat, string pchText) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamFriends _ptr is null!");
			return Native.SteamAPI_ISteamFriends_SendClanChatMessage(_ptr, steamIDClanChat, pchText);
		}

		public virtual int ISteamFriends_GetClanChatMessage(
			ulong steamIDClanChat,
			int iMessage,
			IntPtr prgchText,
			int cchTextMax,
			out ChatEntryType peChatEntryType,
			out ulong psteamidChatter) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamFriends _ptr is null!");
			return Native.SteamAPI_ISteamFriends_GetClanChatMessage(_ptr, steamIDClanChat, iMessage, prgchText,
				cchTextMax, out peChatEntryType, out psteamidChatter);
		}

		public virtual bool ISteamFriends_IsClanChatAdmin(ulong steamIDClanChat, ulong steamIDUser) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamFriends _ptr is null!");
			return Native.SteamAPI_ISteamFriends_IsClanChatAdmin(_ptr, steamIDClanChat, steamIDUser);
		}

		public virtual bool ISteamFriends_IsClanChatWindowOpenInSteam(ulong steamIDClanChat) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_IsClanChatWindowOpenInSteam(_ptr, steamIDClanChat)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual bool ISteamFriends_OpenClanChatWindowInSteam(ulong steamIDClanChat) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_OpenClanChatWindowInSteam(_ptr, steamIDClanChat)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual bool ISteamFriends_CloseClanChatWindowInSteam(ulong steamIDClanChat) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_CloseClanChatWindowInSteam(_ptr, steamIDClanChat)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual bool ISteamFriends_SetListenForFriendsMessages(
			[MarshalAs(UnmanagedType.U1)] bool bInterceptEnabled) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_SetListenForFriendsMessages(_ptr, bInterceptEnabled)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual bool ISteamFriends_ReplyToFriendMessage(
			ulong steamIDFriend,
			string pchMsgToSend) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamFriends _ptr is null!");
			return Native.SteamAPI_ISteamFriends_ReplyToFriendMessage(_ptr, steamIDFriend, pchMsgToSend);
		}

		public virtual int ISteamFriends_GetFriendMessage(
			ulong steamIDFriend,
			int iMessageID,
			IntPtr pvData,
			int cubData,
			out ChatEntryType peChatEntryType) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamFriends _ptr is null!");
			return Native.SteamAPI_ISteamFriends_GetFriendMessage(_ptr, steamIDFriend, iMessageID, pvData, cubData,
				out peChatEntryType);
		}

		public virtual SteamAPICall_t ISteamFriends_GetFollowerCount(ulong steamID) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_GetFollowerCount(_ptr, steamID)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual SteamAPICall_t ISteamFriends_IsFollowing(ulong steamID) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_IsFollowing(_ptr, steamID)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual SteamAPICall_t ISteamFriends_EnumerateFollowingList(uint unStartIndex) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_EnumerateFollowingList(_ptr, unStartIndex)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual uint ISteamUtils_GetSecondsSinceAppActive() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUtils_GetSecondsSinceAppActive(_ptr)
				: throw new Exception("ISteamUtils _ptr is null!");
		}

		public virtual uint ISteamUtils_GetSecondsSinceComputerActive() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUtils_GetSecondsSinceComputerActive(_ptr)
				: throw new Exception("ISteamUtils _ptr is null!");
		}

		public virtual Universe ISteamUtils_GetConnectedUniverse() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUtils_GetConnectedUniverse(_ptr)
				: throw new Exception("ISteamUtils _ptr is null!");
		}

		public virtual uint ISteamUtils_GetServerRealTime() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUtils_GetServerRealTime(_ptr)
				: throw new Exception("ISteamUtils _ptr is null!");
		}

		public virtual IntPtr ISteamUtils_GetIPCountry() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUtils_GetIPCountry(_ptr)
				: throw new Exception("ISteamUtils _ptr is null!");
		}

		public virtual bool ISteamUtils_GetImageSize(int iImage, out uint pnWidth, out uint pnHeight) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUtils_GetImageSize(_ptr, iImage, out pnWidth, out pnHeight)
				: throw new Exception("ISteamUtils _ptr is null!");
		}

		public virtual bool ISteamUtils_GetImageRGBA(int iImage, IntPtr pubDest, int nDestBufferSize) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUtils _ptr is null!");
			return Native.SteamAPI_ISteamUtils_GetImageRGBA(_ptr, iImage, pubDest, nDestBufferSize);
		}

		public virtual bool ISteamUtils_GetCSERIPPort(out uint unIP, out ushort usPort) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUtils_GetCSERIPPort(_ptr, out unIP, out usPort)
				: throw new Exception("ISteamUtils _ptr is null!");
		}

		public virtual byte ISteamUtils_GetCurrentBatteryPower() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUtils_GetCurrentBatteryPower(_ptr)
				: throw new Exception("ISteamUtils _ptr is null!");
		}

		public virtual uint ISteamUtils_GetAppID() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUtils_GetAppID(_ptr)
				: throw new Exception("ISteamUtils _ptr is null!");
		}

		public virtual void ISteamUtils_SetOverlayNotificationPosition(
			NotificationPosition eNotificationPosition) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUtils _ptr is null!");
			Native.SteamAPI_ISteamUtils_SetOverlayNotificationPosition(_ptr, eNotificationPosition);
		}

		public virtual bool ISteamUtils_IsAPICallCompleted(ulong hSteamAPICall,
			[MarshalAs(UnmanagedType.U1)] ref bool pbFailed) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUtils _ptr is null!");
			return Native.SteamAPI_ISteamUtils_IsAPICallCompleted(_ptr, hSteamAPICall, ref pbFailed);
		}

		public virtual SteamAPICallFailure ISteamUtils_GetAPICallFailureReason(ulong hSteamAPICall) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUtils_GetAPICallFailureReason(_ptr, hSteamAPICall)
				: throw new Exception("ISteamUtils _ptr is null!");
		}

		public virtual bool ISteamUtils_GetAPICallResult(
			ulong hSteamAPICall,
			IntPtr pCallback,
			int cubCallback,
			int iCallbackExpected,
			[MarshalAs(UnmanagedType.U1)] ref bool pbFailed) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUtils _ptr is null!");
			return Native.SteamAPI_ISteamUtils_GetAPICallResult(_ptr, hSteamAPICall, pCallback, cubCallback,
				iCallbackExpected, ref pbFailed);
		}

		public virtual uint ISteamUtils_GetIPCCallCount() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUtils_GetIPCCallCount(_ptr)
				: throw new Exception("ISteamUtils _ptr is null!");
		}

		public virtual void ISteamUtils_SetWarningMessageHook(IntPtr pFunction) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUtils _ptr is null!");
			Native.SteamAPI_ISteamUtils_SetWarningMessageHook(_ptr, pFunction);
		}

		public virtual bool ISteamUtils_IsOverlayEnabled() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUtils_IsOverlayEnabled(_ptr)
				: throw new Exception("ISteamUtils _ptr is null!");
		}

		public virtual bool ISteamUtils_BOverlayNeedsPresent() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUtils_BOverlayNeedsPresent(_ptr)
				: throw new Exception("ISteamUtils _ptr is null!");
		}

		public virtual SteamAPICall_t ISteamUtils_CheckFileSignature(string szFileName) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUtils_CheckFileSignature(_ptr, szFileName)
				: throw new Exception("ISteamUtils _ptr is null!");
		}

		public virtual bool ISteamUtils_ShowGamepadTextInput(
			GamepadTextInputMode eInputMode,
			GamepadTextInputLineMode eLineInputMode,
			string pchDescription,
			uint unCharMax,
			string pchExistingText) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUtils _ptr is null!");
			return Native.SteamAPI_ISteamUtils_ShowGamepadTextInput(_ptr, eInputMode, eLineInputMode, pchDescription,
				unCharMax, pchExistingText);
		}

		public virtual uint ISteamUtils_GetEnteredGamepadTextLength() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUtils_GetEnteredGamepadTextLength(_ptr)
				: throw new Exception("ISteamUtils _ptr is null!");
		}

		public virtual bool ISteamUtils_GetEnteredGamepadTextInput(
			StringBuilder pchText,
			uint cchText) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUtils _ptr is null!");
			return Native.SteamAPI_ISteamUtils_GetEnteredGamepadTextInput(_ptr, pchText, cchText);
		}

		public virtual IntPtr ISteamUtils_GetSteamUILanguage() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUtils_GetSteamUILanguage(_ptr)
				: throw new Exception("ISteamUtils _ptr is null!");
		}

		public virtual bool ISteamUtils_IsSteamRunningInVR() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUtils_IsSteamRunningInVR(_ptr)
				: throw new Exception("ISteamUtils _ptr is null!");
		}

		public virtual void ISteamUtils_SetOverlayNotificationInset(
			int nHorizontalInset,
			int nVerticalInset) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUtils _ptr is null!");
			Native.SteamAPI_ISteamUtils_SetOverlayNotificationInset(_ptr, nHorizontalInset, nVerticalInset);
		}

		public virtual bool ISteamUtils_IsSteamInBigPictureMode() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUtils_IsSteamInBigPictureMode(_ptr)
				: throw new Exception("ISteamUtils _ptr is null!");
		}

		public virtual void ISteamUtils_StartVRDashboard() {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUtils _ptr is null!");
			Native.SteamAPI_ISteamUtils_StartVRDashboard(_ptr);
		}

		public virtual bool ISteamUtils_IsVRHeadsetStreamingEnabled() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUtils_IsVRHeadsetStreamingEnabled(_ptr)
				: throw new Exception("ISteamUtils _ptr is null!");
		}

		public virtual void ISteamUtils_SetVRHeadsetStreamingEnabled([MarshalAs(UnmanagedType.U1)] bool bEnabled) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUtils _ptr is null!");
			Native.SteamAPI_ISteamUtils_SetVRHeadsetStreamingEnabled(_ptr, bEnabled);
		}

		public virtual int ISteamMatchmaking_GetFavoriteGameCount() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMatchmaking_GetFavoriteGameCount(_ptr)
				: throw new Exception("ISteamMatchmaking _ptr is null!");
		}

		public virtual bool ISteamMatchmaking_GetFavoriteGame(
			int iGame,
			ref uint pnAppID,
			out uint pnIP,
			out ushort pnConnPort,
			out ushort pnQueryPort,
			out uint punFlags,
			out uint pRTime32LastPlayedOnServer) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmaking _ptr is null!");
			return Native.SteamAPI_ISteamMatchmaking_GetFavoriteGame(_ptr, iGame, ref pnAppID, out pnIP, out pnConnPort,
				out pnQueryPort, out punFlags, out pRTime32LastPlayedOnServer);
		}

		public virtual int ISteamMatchmaking_AddFavoriteGame(
			uint nAppID,
			uint nIP,
			ushort nConnPort,
			ushort nQueryPort,
			uint unFlags,
			uint rTime32LastPlayedOnServer) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmaking _ptr is null!");
			return Native.SteamAPI_ISteamMatchmaking_AddFavoriteGame(_ptr, nAppID, nIP, nConnPort, nQueryPort, unFlags,
				rTime32LastPlayedOnServer);
		}

		public virtual bool ISteamMatchmaking_RemoveFavoriteGame(
			uint nAppID,
			uint nIP,
			ushort nConnPort,
			ushort nQueryPort,
			uint unFlags) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmaking _ptr is null!");
			return Native.SteamAPI_ISteamMatchmaking_RemoveFavoriteGame(_ptr, nAppID, nIP, nConnPort, nQueryPort,
				unFlags);
		}

		public virtual SteamAPICall_t ISteamMatchmaking_RequestLobbyList() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMatchmaking_RequestLobbyList(_ptr)
				: throw new Exception("ISteamMatchmaking _ptr is null!");
		}

		public virtual void ISteamMatchmaking_AddRequestLobbyListStringFilter(
			string pchKeyToMatch,
			string pchValueToMatch,
			LobbyComparison eComparisonType) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmaking _ptr is null!");
			Native.SteamAPI_ISteamMatchmaking_AddRequestLobbyListStringFilter(_ptr, pchKeyToMatch, pchValueToMatch,
				eComparisonType);
		}

		public virtual void ISteamMatchmaking_AddRequestLobbyListNumericalFilter(
			string pchKeyToMatch,
			int nValueToMatch,
			LobbyComparison eComparisonType) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmaking _ptr is null!");
			Native.SteamAPI_ISteamMatchmaking_AddRequestLobbyListNumericalFilter(_ptr, pchKeyToMatch, nValueToMatch,
				eComparisonType);
		}

		public virtual void ISteamMatchmaking_AddRequestLobbyListNearValueFilter(
			string pchKeyToMatch,
			int nValueToBeCloseTo) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmaking _ptr is null!");
			Native.SteamAPI_ISteamMatchmaking_AddRequestLobbyListNearValueFilter(_ptr, pchKeyToMatch,
				nValueToBeCloseTo);
		}

		public virtual void ISteamMatchmaking_AddRequestLobbyListFilterSlotsAvailable(
			int nSlotsAvailable) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmaking _ptr is null!");
			Native.SteamAPI_ISteamMatchmaking_AddRequestLobbyListFilterSlotsAvailable(_ptr, nSlotsAvailable);
		}

		public virtual void ISteamMatchmaking_AddRequestLobbyListDistanceFilter(
			LobbyDistanceFilter eLobbyDistanceFilter) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmaking _ptr is null!");
			Native.SteamAPI_ISteamMatchmaking_AddRequestLobbyListDistanceFilter(_ptr, eLobbyDistanceFilter);
		}

		public virtual void ISteamMatchmaking_AddRequestLobbyListResultCountFilter(int cMaxResults) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmaking _ptr is null!");
			Native.SteamAPI_ISteamMatchmaking_AddRequestLobbyListResultCountFilter(_ptr, cMaxResults);
		}

		public virtual void ISteamMatchmaking_AddRequestLobbyListCompatibleMembersFilter(
			ulong steamIDLobby) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmaking _ptr is null!");
			Native.SteamAPI_ISteamMatchmaking_AddRequestLobbyListCompatibleMembersFilter(_ptr, steamIDLobby);
		}

		public virtual CSteamID ISteamMatchmaking_GetLobbyByIndex(int iLobby) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMatchmaking_GetLobbyByIndex(_ptr, iLobby)
				: throw new Exception("ISteamMatchmaking _ptr is null!");
		}

		public virtual SteamAPICall_t ISteamMatchmaking_CreateLobby(
			LobbyType eLobbyType,
			int cMaxMembers) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmaking _ptr is null!");
			return Native.SteamAPI_ISteamMatchmaking_CreateLobby(_ptr, eLobbyType, cMaxMembers);
		}

		public virtual SteamAPICall_t ISteamMatchmaking_JoinLobby(ulong steamIDLobby) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMatchmaking_JoinLobby(_ptr, steamIDLobby)
				: throw new Exception("ISteamMatchmaking _ptr is null!");
		}

		public virtual void ISteamMatchmaking_LeaveLobby(ulong steamIDLobby) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmaking _ptr is null!");
			Native.SteamAPI_ISteamMatchmaking_LeaveLobby(_ptr, steamIDLobby);
		}

		public virtual bool ISteamMatchmaking_InviteUserToLobby(
			ulong steamIDLobby,
			ulong steamIDInvitee) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmaking _ptr is null!");
			return Native.SteamAPI_ISteamMatchmaking_InviteUserToLobby(_ptr, steamIDLobby, steamIDInvitee);
		}

		public virtual int ISteamMatchmaking_GetNumLobbyMembers(ulong steamIDLobby) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMatchmaking_GetNumLobbyMembers(_ptr, steamIDLobby)
				: throw new Exception("ISteamMatchmaking _ptr is null!");
		}

		public virtual CSteamID ISteamMatchmaking_GetLobbyMemberByIndex(
			ulong steamIDLobby,
			int iMember) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmaking _ptr is null!");
			return Native.SteamAPI_ISteamMatchmaking_GetLobbyMemberByIndex(_ptr, steamIDLobby, iMember);
		}

		public virtual IntPtr ISteamMatchmaking_GetLobbyData(ulong steamIDLobby, string pchKey) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmaking _ptr is null!");
			return Native.SteamAPI_ISteamMatchmaking_GetLobbyData(_ptr, steamIDLobby, pchKey);
		}

		public virtual bool ISteamMatchmaking_SetLobbyData(
			ulong steamIDLobby,
			string pchKey,
			string pchValue) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmaking _ptr is null!");
			return Native.SteamAPI_ISteamMatchmaking_SetLobbyData(_ptr, steamIDLobby, pchKey, pchValue);
		}

		public virtual int ISteamMatchmaking_GetLobbyDataCount(ulong steamIDLobby) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMatchmaking_GetLobbyDataCount(_ptr, steamIDLobby)
				: throw new Exception("ISteamMatchmaking _ptr is null!");
		}

		public virtual bool ISteamMatchmaking_GetLobbyDataByIndex(
			ulong steamIDLobby,
			int iLobbyData,
			StringBuilder pchKey,
			int cchKeyBufferSize,
			StringBuilder pchValue,
			int cchValueBufferSize) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmaking _ptr is null!");
			return Native.SteamAPI_ISteamMatchmaking_GetLobbyDataByIndex(_ptr, steamIDLobby, iLobbyData, pchKey,
				cchKeyBufferSize, pchValue, cchValueBufferSize);
		}

		public virtual bool ISteamMatchmaking_DeleteLobbyData(ulong steamIDLobby, string pchKey) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmaking _ptr is null!");
			return Native.SteamAPI_ISteamMatchmaking_DeleteLobbyData(_ptr, steamIDLobby, pchKey);
		}

		public virtual IntPtr ISteamMatchmaking_GetLobbyMemberData(
			ulong steamIDLobby,
			ulong steamIDUser,
			string pchKey) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmaking _ptr is null!");
			return Native.SteamAPI_ISteamMatchmaking_GetLobbyMemberData(_ptr, steamIDLobby, steamIDUser, pchKey);
		}

		public virtual void ISteamMatchmaking_SetLobbyMemberData(
			ulong steamIDLobby,
			string pchKey,
			string pchValue) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmaking _ptr is null!");
			Native.SteamAPI_ISteamMatchmaking_SetLobbyMemberData(_ptr, steamIDLobby, pchKey, pchValue);
		}

		public virtual bool ISteamMatchmaking_SendLobbyChatMsg(
			ulong steamIDLobby,
			IntPtr pvMsgBody,
			int cubMsgBody) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmaking _ptr is null!");
			return Native.SteamAPI_ISteamMatchmaking_SendLobbyChatMsg(_ptr, steamIDLobby, pvMsgBody, cubMsgBody);
		}

		public virtual int ISteamMatchmaking_GetLobbyChatEntry(
			ulong steamIDLobby,
			int iChatID,
			out ulong pSteamIDUser,
			IntPtr pvData,
			int cubData,
			out ChatEntryType peChatEntryType) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmaking _ptr is null!");
			return Native.SteamAPI_ISteamMatchmaking_GetLobbyChatEntry(_ptr, steamIDLobby, iChatID, out pSteamIDUser,
				pvData, cubData, out peChatEntryType);
		}

		public virtual bool ISteamMatchmaking_RequestLobbyData(ulong steamIDLobby) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMatchmaking_RequestLobbyData(_ptr, steamIDLobby)
				: throw new Exception("ISteamMatchmaking _ptr is null!");
		}

		public virtual void ISteamMatchmaking_SetLobbyGameServer(
			ulong steamIDLobby,
			uint unGameServerIP,
			ushort unGameServerPort,
			ulong steamIDGameServer) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmaking _ptr is null!");
			Native.SteamAPI_ISteamMatchmaking_SetLobbyGameServer(_ptr, steamIDLobby, unGameServerIP, unGameServerPort,
				steamIDGameServer);
		}

		public virtual bool ISteamMatchmaking_GetLobbyGameServer(
			ulong steamIDLobby,
			out uint punGameServerIP,
			out ushort punGameServerPort,
			out ulong psteamIDGameServer) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMatchmaking_GetLobbyGameServer(_ptr, steamIDLobby, out punGameServerIP,
					out punGameServerPort, out psteamIDGameServer)
				: throw new Exception("ISteamMatchmaking _ptr is null!");
		}

		public virtual bool ISteamMatchmaking_SetLobbyMemberLimit(ulong steamIDLobby, int cMaxMembers) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmaking _ptr is null!");
			return Native.SteamAPI_ISteamMatchmaking_SetLobbyMemberLimit(_ptr, steamIDLobby, cMaxMembers);
		}

		public virtual int ISteamMatchmaking_GetLobbyMemberLimit(ulong steamIDLobby) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMatchmaking_GetLobbyMemberLimit(_ptr, steamIDLobby)
				: throw new Exception("ISteamMatchmaking _ptr is null!");
		}

		public virtual bool ISteamMatchmaking_SetLobbyType(ulong steamIDLobby, LobbyType eLobbyType) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmaking _ptr is null!");
			return Native.SteamAPI_ISteamMatchmaking_SetLobbyType(_ptr, steamIDLobby, eLobbyType);
		}

		public virtual bool ISteamMatchmaking_SetLobbyJoinable(
			ulong steamIDLobby,
			[MarshalAs(UnmanagedType.U1)] bool bLobbyJoinable) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmaking _ptr is null!");
			return Native.SteamAPI_ISteamMatchmaking_SetLobbyJoinable(_ptr, steamIDLobby, bLobbyJoinable);
		}

		public virtual CSteamID ISteamMatchmaking_GetLobbyOwner(ulong steamIDLobby) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMatchmaking_GetLobbyOwner(_ptr, steamIDLobby)
				: throw new Exception("ISteamMatchmaking _ptr is null!");
		}

		public virtual bool ISteamMatchmaking_SetLobbyOwner(ulong steamIDLobby, ulong steamIDNewOwner) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmaking _ptr is null!");
			return Native.SteamAPI_ISteamMatchmaking_SetLobbyOwner(_ptr, steamIDLobby, steamIDNewOwner);
		}

		public virtual bool ISteamMatchmaking_SetLinkedLobby(
			ulong steamIDLobby,
			ulong steamIDLobbyDependent) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmaking _ptr is null!");
			return Native.SteamAPI_ISteamMatchmaking_SetLinkedLobby(_ptr, steamIDLobby, steamIDLobbyDependent);
		}

		public virtual HServerListRequest ISteamMatchmakingServers_RequestInternetServerList(
			uint iApp,
			IntPtr ppchFilters,
			uint nFilters,
			IntPtr pRequestServersResponse) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmakingServers _ptr is null!");
			return Native.SteamAPI_ISteamMatchmakingServers_RequestInternetServerList(_ptr, iApp, ppchFilters, nFilters,
				pRequestServersResponse);
		}

		public virtual HServerListRequest ISteamMatchmakingServers_RequestLANServerList(
			uint iApp,
			IntPtr pRequestServersResponse) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmakingServers _ptr is null!");
			return Native.SteamAPI_ISteamMatchmakingServers_RequestLANServerList(_ptr, iApp, pRequestServersResponse);
		}

		public virtual HServerListRequest ISteamMatchmakingServers_RequestFriendsServerList(
			uint iApp,
			IntPtr ppchFilters,
			uint nFilters,
			IntPtr pRequestServersResponse) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmakingServers _ptr is null!");
			return Native.SteamAPI_ISteamMatchmakingServers_RequestFriendsServerList(_ptr, iApp, ppchFilters, nFilters,
				pRequestServersResponse);
		}

		public virtual HServerListRequest ISteamMatchmakingServers_RequestFavoritesServerList(
			uint iApp,
			IntPtr ppchFilters,
			uint nFilters,
			IntPtr pRequestServersResponse) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmakingServers _ptr is null!");
			return Native.SteamAPI_ISteamMatchmakingServers_RequestFavoritesServerList(_ptr, iApp, ppchFilters,
				nFilters, pRequestServersResponse);
		}

		public virtual HServerListRequest ISteamMatchmakingServers_RequestHistoryServerList(
			uint iApp,
			IntPtr ppchFilters,
			uint nFilters,
			IntPtr pRequestServersResponse) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmakingServers _ptr is null!");
			return Native.SteamAPI_ISteamMatchmakingServers_RequestHistoryServerList(_ptr, iApp, ppchFilters, nFilters,
				pRequestServersResponse);
		}

		public virtual HServerListRequest ISteamMatchmakingServers_RequestSpectatorServerList(
			uint iApp,
			IntPtr ppchFilters,
			uint nFilters,
			IntPtr pRequestServersResponse) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmakingServers _ptr is null!");
			return Native.SteamAPI_ISteamMatchmakingServers_RequestSpectatorServerList(_ptr, iApp, ppchFilters,
				nFilters, pRequestServersResponse);
		}

		public virtual void ISteamMatchmakingServers_ReleaseRequest(IntPtr hServerListRequest) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmakingServers _ptr is null!");
			Native.SteamAPI_ISteamMatchmakingServers_ReleaseRequest(_ptr, hServerListRequest);
		}

		public virtual IntPtr ISteamMatchmakingServers_GetServerDetails(IntPtr hRequest, int iServer) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmakingServers _ptr is null!");
			return Native.SteamAPI_ISteamMatchmakingServers_GetServerDetails(_ptr, hRequest, iServer);
		}

		public virtual void ISteamMatchmakingServers_CancelQuery(IntPtr hRequest) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmakingServers _ptr is null!");
			Native.SteamAPI_ISteamMatchmakingServers_CancelQuery(_ptr, hRequest);
		}

		public virtual void ISteamMatchmakingServers_RefreshQuery(IntPtr hRequest) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmakingServers _ptr is null!");
			Native.SteamAPI_ISteamMatchmakingServers_RefreshQuery(_ptr, hRequest);
		}

		public virtual bool ISteamMatchmakingServers_IsRefreshing(IntPtr hRequest) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMatchmakingServers_IsRefreshing(_ptr, hRequest)
				: throw new Exception("ISteamMatchmakingServers _ptr is null!");
		}

		public virtual int ISteamMatchmakingServers_GetServerCount(IntPtr hRequest) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMatchmakingServers_GetServerCount(_ptr, hRequest)
				: throw new Exception("ISteamMatchmakingServers _ptr is null!");
		}

		public virtual void ISteamMatchmakingServers_RefreshServer(IntPtr hRequest, int iServer) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmakingServers _ptr is null!");
			Native.SteamAPI_ISteamMatchmakingServers_RefreshServer(_ptr, hRequest, iServer);
		}

		public virtual HServerQuery ISteamMatchmakingServers_PingServer(
			uint unIP,
			ushort usPort,
			IntPtr pRequestServersResponse) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmakingServers _ptr is null!");
			return Native.SteamAPI_ISteamMatchmakingServers_PingServer(_ptr, unIP, usPort, pRequestServersResponse);
		}

		public virtual HServerQuery ISteamMatchmakingServers_PlayerDetails(
			uint unIP,
			ushort usPort,
			IntPtr pRequestServersResponse) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmakingServers _ptr is null!");
			return Native.SteamAPI_ISteamMatchmakingServers_PlayerDetails(_ptr, unIP, usPort, pRequestServersResponse);
		}

		public virtual HServerQuery ISteamMatchmakingServers_ServerRules(
			uint unIP,
			ushort usPort,
			IntPtr pRequestServersResponse) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmakingServers _ptr is null!");
			return Native.SteamAPI_ISteamMatchmakingServers_ServerRules(_ptr, unIP, usPort, pRequestServersResponse);
		}

		public virtual void ISteamMatchmakingServers_CancelServerQuery(int hServerQuery) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmakingServers _ptr is null!");
			Native.SteamAPI_ISteamMatchmakingServers_CancelServerQuery(_ptr, hServerQuery);
		}

		public virtual bool ISteamRemoteStorage_FileWrite(string pchFile, IntPtr pvData, int cubData) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamRemoteStorage _ptr is null!");
			return Native.SteamAPI_ISteamRemoteStorage_FileWrite(_ptr, pchFile, pvData, cubData);
		}

		public virtual int ISteamRemoteStorage_FileRead(
			string pchFile,
			IntPtr pvData,
			int cubDataToRead) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamRemoteStorage _ptr is null!");
			return Native.SteamAPI_ISteamRemoteStorage_FileRead(_ptr, pchFile, pvData, cubDataToRead);
		}

		public virtual SteamAPICall_t ISteamRemoteStorage_FileWriteAsync(
			string pchFile,
			IntPtr pvData,
			uint cubData) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamRemoteStorage _ptr is null!");
			return Native.SteamAPI_ISteamRemoteStorage_FileWriteAsync(_ptr, pchFile, pvData, cubData);
		}

		public virtual SteamAPICall_t ISteamRemoteStorage_FileReadAsync(
			string pchFile,
			uint nOffset,
			uint cubToRead) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamRemoteStorage _ptr is null!");
			return Native.SteamAPI_ISteamRemoteStorage_FileReadAsync(_ptr, pchFile, nOffset, cubToRead);
		}

		public virtual bool ISteamRemoteStorage_FileReadAsyncComplete(
			ulong hReadCall,
			IntPtr pvBuffer,
			uint cubToRead) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamRemoteStorage _ptr is null!");
			return Native.SteamAPI_ISteamRemoteStorage_FileReadAsyncComplete(_ptr, hReadCall, pvBuffer, cubToRead);
		}

		public virtual bool ISteamRemoteStorage_FileForget(string pchFile) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamRemoteStorage_FileForget(_ptr, pchFile)
				: throw new Exception("ISteamRemoteStorage _ptr is null!");
		}

		public virtual bool ISteamRemoteStorage_FileDelete(string pchFile) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamRemoteStorage_FileDelete(_ptr, pchFile)
				: throw new Exception("ISteamRemoteStorage _ptr is null!");
		}

		public virtual SteamAPICall_t ISteamRemoteStorage_FileShare(string pchFile) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamRemoteStorage_FileShare(_ptr, pchFile)
				: throw new Exception("ISteamRemoteStorage _ptr is null!");
		}

		public virtual bool ISteamRemoteStorage_SetSyncPlatforms(
			string pchFile,
			RemoteStoragePlatform eRemoteStoragePlatform) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamRemoteStorage _ptr is null!");
			return Native.SteamAPI_ISteamRemoteStorage_SetSyncPlatforms(_ptr, pchFile, eRemoteStoragePlatform);
		}

		public virtual UGCFileWriteStreamHandle_t ISteamRemoteStorage_FileWriteStreamOpen(
			string pchFile) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamRemoteStorage_FileWriteStreamOpen(_ptr, pchFile)
				: throw new Exception("ISteamRemoteStorage _ptr is null!");
		}

		public virtual bool ISteamRemoteStorage_FileWriteStreamWriteChunk(
			ulong writeHandle,
			IntPtr pvData,
			int cubData) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamRemoteStorage _ptr is null!");
			return Native.SteamAPI_ISteamRemoteStorage_FileWriteStreamWriteChunk(_ptr, writeHandle, pvData, cubData);
		}

		public virtual bool ISteamRemoteStorage_FileWriteStreamClose(ulong writeHandle) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamRemoteStorage_FileWriteStreamClose(_ptr, writeHandle)
				: throw new Exception("ISteamRemoteStorage _ptr is null!");
		}

		public virtual bool ISteamRemoteStorage_FileWriteStreamCancel(ulong writeHandle) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamRemoteStorage_FileWriteStreamCancel(_ptr, writeHandle)
				: throw new Exception("ISteamRemoteStorage _ptr is null!");
		}

		public virtual bool ISteamRemoteStorage_FileExists(string pchFile) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamRemoteStorage_FileExists(_ptr, pchFile)
				: throw new Exception("ISteamRemoteStorage _ptr is null!");
		}

		public virtual bool ISteamRemoteStorage_FilePersisted(string pchFile) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamRemoteStorage_FilePersisted(_ptr, pchFile)
				: throw new Exception("ISteamRemoteStorage _ptr is null!");
		}

		public virtual int ISteamRemoteStorage_GetFileSize(string pchFile) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamRemoteStorage_GetFileSize(_ptr, pchFile)
				: throw new Exception("ISteamRemoteStorage _ptr is null!");
		}

		public virtual long ISteamRemoteStorage_GetFileTimestamp(string pchFile) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamRemoteStorage_GetFileTimestamp(_ptr, pchFile)
				: throw new Exception("ISteamRemoteStorage _ptr is null!");
		}

		public virtual RemoteStoragePlatform ISteamRemoteStorage_GetSyncPlatforms(string pchFile) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamRemoteStorage_GetSyncPlatforms(_ptr, pchFile)
				: throw new Exception("ISteamRemoteStorage _ptr is null!");
		}

		public virtual int ISteamRemoteStorage_GetFileCount() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamRemoteStorage_GetFileCount(_ptr)
				: throw new Exception("ISteamRemoteStorage _ptr is null!");
		}

		public virtual IntPtr ISteamRemoteStorage_GetFileNameAndSize(
			int iFile,
			out int pnFileSizeInBytes) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamRemoteStorage_GetFileNameAndSize(_ptr, iFile, out pnFileSizeInBytes)
				: throw new Exception("ISteamRemoteStorage _ptr is null!");
		}

		public virtual bool ISteamRemoteStorage_GetQuota(
			out ulong pnTotalBytes,
			out ulong puAvailableBytes) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamRemoteStorage_GetQuota(_ptr, out pnTotalBytes, out puAvailableBytes)
				: throw new Exception("ISteamRemoteStorage _ptr is null!");
		}

		public virtual bool ISteamRemoteStorage_IsCloudEnabledForAccount() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamRemoteStorage_IsCloudEnabledForAccount(_ptr)
				: throw new Exception("ISteamRemoteStorage _ptr is null!");
		}

		public virtual bool ISteamRemoteStorage_IsCloudEnabledForApp() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamRemoteStorage_IsCloudEnabledForApp(_ptr)
				: throw new Exception("ISteamRemoteStorage _ptr is null!");
		}

		public virtual void ISteamRemoteStorage_SetCloudEnabledForApp([MarshalAs(UnmanagedType.U1)] bool bEnabled) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamRemoteStorage _ptr is null!");
			Native.SteamAPI_ISteamRemoteStorage_SetCloudEnabledForApp(_ptr, bEnabled);
		}

		public virtual SteamAPICall_t ISteamRemoteStorage_UGCDownload(ulong hContent, uint unPriority) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamRemoteStorage _ptr is null!");
			return Native.SteamAPI_ISteamRemoteStorage_UGCDownload(_ptr, hContent, unPriority);
		}

		public virtual bool ISteamRemoteStorage_GetUGCDownloadProgress(
			ulong hContent,
			out int pnBytesDownloaded,
			out int pnBytesExpected) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamRemoteStorage_GetUGCDownloadProgress(_ptr, hContent, out pnBytesDownloaded,
					out pnBytesExpected)
				: throw new Exception("ISteamRemoteStorage _ptr is null!");
		}

		public virtual bool ISteamRemoteStorage_GetUGCDetails(
			ulong hContent,
			ref uint pnAppID,
			StringBuilder ppchName,
			out int pnFileSizeInBytes,
			out ulong pSteamIDOwner) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamRemoteStorage _ptr is null!");
			return Native.SteamAPI_ISteamRemoteStorage_GetUGCDetails(_ptr, hContent, ref pnAppID, ppchName,
				out pnFileSizeInBytes, out pSteamIDOwner);
		}

		public virtual int ISteamRemoteStorage_UGCRead(
			ulong hContent,
			IntPtr pvData,
			int cubDataToRead,
			uint cOffset,
			UGCReadAction eAction) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamRemoteStorage _ptr is null!");
			return Native.SteamAPI_ISteamRemoteStorage_UGCRead(_ptr, hContent, pvData, cubDataToRead, cOffset, eAction);
		}

		public virtual int ISteamRemoteStorage_GetCachedUGCCount() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamRemoteStorage_GetCachedUGCCount(_ptr)
				: throw new Exception("ISteamRemoteStorage _ptr is null!");
		}

		public virtual UGCHandle_t ISteamRemoteStorage_GetCachedUGCHandle(int iCachedContent) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamRemoteStorage_GetCachedUGCHandle(_ptr, iCachedContent)
				: throw new Exception("ISteamRemoteStorage _ptr is null!");
		}

		public virtual SteamAPICall_t ISteamRemoteStorage_PublishWorkshopFile(
			string pchFile,
			string pchPreviewFile,
			uint nConsumerAppId,
			string pchTitle,
			string pchDescription,
			RemoteStoragePublishedFileVisibility eVisibility,
			ref SteamParamStringArray_t pTags,
			WorkshopFileType eWorkshopFileType) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamRemoteStorage _ptr is null!");
			var pTags1 = new SteamParamStringArray_t.PackSmall();
			var steamApiCallT = Native.SteamAPI_ISteamRemoteStorage_PublishWorkshopFile(_ptr, pchFile, pchPreviewFile,
				nConsumerAppId, pchTitle, pchDescription, eVisibility, ref pTags1, eWorkshopFileType);
			pTags = (SteamParamStringArray_t)pTags1;
			return steamApiCallT;
		}

		public virtual PublishedFileUpdateHandle_t ISteamRemoteStorage_CreatePublishedFileUpdateRequest(
			ulong unPublishedFileId) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamRemoteStorage_CreatePublishedFileUpdateRequest(_ptr, unPublishedFileId)
				: throw new Exception("ISteamRemoteStorage _ptr is null!");
		}

		public virtual bool ISteamRemoteStorage_UpdatePublishedFileFile(
			ulong updateHandle,
			string pchFile) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamRemoteStorage _ptr is null!");
			return Native.SteamAPI_ISteamRemoteStorage_UpdatePublishedFileFile(_ptr, updateHandle, pchFile);
		}

		public virtual bool ISteamRemoteStorage_UpdatePublishedFilePreviewFile(
			ulong updateHandle,
			string pchPreviewFile) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamRemoteStorage _ptr is null!");
			return Native.SteamAPI_ISteamRemoteStorage_UpdatePublishedFilePreviewFile(_ptr, updateHandle,
				pchPreviewFile);
		}

		public virtual bool ISteamRemoteStorage_UpdatePublishedFileTitle(
			ulong updateHandle,
			string pchTitle) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamRemoteStorage _ptr is null!");
			return Native.SteamAPI_ISteamRemoteStorage_UpdatePublishedFileTitle(_ptr, updateHandle, pchTitle);
		}

		public virtual bool ISteamRemoteStorage_UpdatePublishedFileDescription(
			ulong updateHandle,
			string pchDescription) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamRemoteStorage _ptr is null!");
			return Native.SteamAPI_ISteamRemoteStorage_UpdatePublishedFileDescription(_ptr, updateHandle,
				pchDescription);
		}

		public virtual bool ISteamRemoteStorage_UpdatePublishedFileVisibility(
			ulong updateHandle,
			RemoteStoragePublishedFileVisibility eVisibility) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamRemoteStorage _ptr is null!");
			return Native.SteamAPI_ISteamRemoteStorage_UpdatePublishedFileVisibility(_ptr, updateHandle, eVisibility);
		}

		public virtual bool ISteamRemoteStorage_UpdatePublishedFileTags(
			ulong updateHandle,
			ref SteamParamStringArray_t pTags) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamRemoteStorage _ptr is null!");
			var pTags1 = new SteamParamStringArray_t.PackSmall();
			var flag = Native.SteamAPI_ISteamRemoteStorage_UpdatePublishedFileTags(_ptr, updateHandle, ref pTags1);
			pTags = (SteamParamStringArray_t)pTags1;
			return flag;
		}

		public virtual SteamAPICall_t ISteamRemoteStorage_CommitPublishedFileUpdate(ulong updateHandle) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamRemoteStorage_CommitPublishedFileUpdate(_ptr, updateHandle)
				: throw new Exception("ISteamRemoteStorage _ptr is null!");
		}

		public virtual SteamAPICall_t ISteamRemoteStorage_GetPublishedFileDetails(
			ulong unPublishedFileId,
			uint unMaxSecondsOld) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamRemoteStorage _ptr is null!");
			return Native.SteamAPI_ISteamRemoteStorage_GetPublishedFileDetails(_ptr, unPublishedFileId,
				unMaxSecondsOld);
		}

		public virtual SteamAPICall_t ISteamRemoteStorage_DeletePublishedFile(ulong unPublishedFileId) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamRemoteStorage_DeletePublishedFile(_ptr, unPublishedFileId)
				: throw new Exception("ISteamRemoteStorage _ptr is null!");
		}

		public virtual SteamAPICall_t ISteamRemoteStorage_EnumerateUserPublishedFiles(
			uint unStartIndex) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamRemoteStorage_EnumerateUserPublishedFiles(_ptr, unStartIndex)
				: throw new Exception("ISteamRemoteStorage _ptr is null!");
		}

		public virtual SteamAPICall_t ISteamRemoteStorage_SubscribePublishedFile(
			ulong unPublishedFileId) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamRemoteStorage_SubscribePublishedFile(_ptr, unPublishedFileId)
				: throw new Exception("ISteamRemoteStorage _ptr is null!");
		}

		public virtual SteamAPICall_t ISteamRemoteStorage_EnumerateUserSubscribedFiles(
			uint unStartIndex) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamRemoteStorage_EnumerateUserSubscribedFiles(_ptr, unStartIndex)
				: throw new Exception("ISteamRemoteStorage _ptr is null!");
		}

		public virtual SteamAPICall_t ISteamRemoteStorage_UnsubscribePublishedFile(
			ulong unPublishedFileId) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamRemoteStorage_UnsubscribePublishedFile(_ptr, unPublishedFileId)
				: throw new Exception("ISteamRemoteStorage _ptr is null!");
		}

		public virtual bool ISteamRemoteStorage_UpdatePublishedFileSetChangeDescription(
			ulong updateHandle,
			string pchChangeDescription) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamRemoteStorage _ptr is null!");
			return Native.SteamAPI_ISteamRemoteStorage_UpdatePublishedFileSetChangeDescription(_ptr, updateHandle,
				pchChangeDescription);
		}

		public virtual SteamAPICall_t ISteamRemoteStorage_GetPublishedItemVoteDetails(
			ulong unPublishedFileId) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamRemoteStorage_GetPublishedItemVoteDetails(_ptr, unPublishedFileId)
				: throw new Exception("ISteamRemoteStorage _ptr is null!");
		}

		public virtual SteamAPICall_t ISteamRemoteStorage_UpdateUserPublishedItemVote(
			ulong unPublishedFileId,
			[MarshalAs(UnmanagedType.U1)] bool bVoteUp) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamRemoteStorage _ptr is null!");
			return Native.SteamAPI_ISteamRemoteStorage_UpdateUserPublishedItemVote(_ptr, unPublishedFileId, bVoteUp);
		}

		public virtual SteamAPICall_t ISteamRemoteStorage_GetUserPublishedItemVoteDetails(
			ulong unPublishedFileId) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamRemoteStorage_GetUserPublishedItemVoteDetails(_ptr, unPublishedFileId)
				: throw new Exception("ISteamRemoteStorage _ptr is null!");
		}

		public virtual SteamAPICall_t ISteamRemoteStorage_EnumerateUserSharedWorkshopFiles(
			ulong steamId,
			uint unStartIndex,
			ref SteamParamStringArray_t pRequiredTags,
			ref SteamParamStringArray_t pExcludedTags) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamRemoteStorage _ptr is null!");
			var pRequiredTags1 = new SteamParamStringArray_t.PackSmall();
			var pExcludedTags1 = new SteamParamStringArray_t.PackSmall();
			var steamApiCallT = Native.SteamAPI_ISteamRemoteStorage_EnumerateUserSharedWorkshopFiles(_ptr, steamId,
				unStartIndex, ref pRequiredTags1, ref pExcludedTags1);
			pRequiredTags = (SteamParamStringArray_t)pRequiredTags1;
			pExcludedTags = (SteamParamStringArray_t)pExcludedTags1;
			return steamApiCallT;
		}

		public virtual SteamAPICall_t ISteamRemoteStorage_PublishVideo(
			WorkshopVideoProvider eVideoProvider,
			string pchVideoAccount,
			string pchVideoIdentifier,
			string pchPreviewFile,
			uint nConsumerAppId,
			string pchTitle,
			string pchDescription,
			RemoteStoragePublishedFileVisibility eVisibility,
			ref SteamParamStringArray_t pTags) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamRemoteStorage _ptr is null!");
			var pTags1 = new SteamParamStringArray_t.PackSmall();
			var steamApiCallT = Native.SteamAPI_ISteamRemoteStorage_PublishVideo(_ptr, eVideoProvider, pchVideoAccount,
				pchVideoIdentifier, pchPreviewFile, nConsumerAppId, pchTitle, pchDescription, eVisibility, ref pTags1);
			pTags = (SteamParamStringArray_t)pTags1;
			return steamApiCallT;
		}

		public virtual SteamAPICall_t ISteamRemoteStorage_SetUserPublishedFileAction(
			ulong unPublishedFileId,
			WorkshopFileAction eAction) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamRemoteStorage _ptr is null!");
			return Native.SteamAPI_ISteamRemoteStorage_SetUserPublishedFileAction(_ptr, unPublishedFileId, eAction);
		}

		public virtual SteamAPICall_t ISteamRemoteStorage_EnumeratePublishedFilesByUserAction(
			WorkshopFileAction eAction,
			uint unStartIndex) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamRemoteStorage _ptr is null!");
			return Native.SteamAPI_ISteamRemoteStorage_EnumeratePublishedFilesByUserAction(_ptr, eAction, unStartIndex);
		}

		public virtual SteamAPICall_t ISteamRemoteStorage_EnumeratePublishedWorkshopFiles(
			WorkshopEnumerationType eEnumerationType,
			uint unStartIndex,
			uint unCount,
			uint unDays,
			ref SteamParamStringArray_t pTags,
			ref SteamParamStringArray_t pUserTags) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamRemoteStorage _ptr is null!");
			var pTags1 = new SteamParamStringArray_t.PackSmall();
			var pUserTags1 = new SteamParamStringArray_t.PackSmall();
			var steamApiCallT = Native.SteamAPI_ISteamRemoteStorage_EnumeratePublishedWorkshopFiles(_ptr,
				eEnumerationType, unStartIndex, unCount, unDays, ref pTags1, ref pUserTags1);
			pTags = (SteamParamStringArray_t)pTags1;
			pUserTags = (SteamParamStringArray_t)pUserTags1;
			return steamApiCallT;
		}

		public virtual SteamAPICall_t ISteamRemoteStorage_UGCDownloadToLocation(
			ulong hContent,
			string pchLocation,
			uint unPriority) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamRemoteStorage _ptr is null!");
			return Native.SteamAPI_ISteamRemoteStorage_UGCDownloadToLocation(_ptr, hContent, pchLocation, unPriority);
		}

		public virtual bool ISteamUserStats_RequestCurrentStats() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUserStats_RequestCurrentStats(_ptr)
				: throw new Exception("ISteamUserStats _ptr is null!");
		}

		public virtual bool ISteamUserStats_GetStat(string pchName, out int pData) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUserStats_GetStat(_ptr, pchName, out pData)
				: throw new Exception("ISteamUserStats _ptr is null!");
		}

		public virtual bool ISteamUserStats_GetStat0(string pchName, out float pData) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUserStats_GetStat0(_ptr, pchName, out pData)
				: throw new Exception("ISteamUserStats _ptr is null!");
		}

		public virtual bool ISteamUserStats_SetStat(string pchName, int nData) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUserStats _ptr is null!");
			return Native.SteamAPI_ISteamUserStats_SetStat(_ptr, pchName, nData);
		}

		public virtual bool ISteamUserStats_SetStat0(string pchName, float fData) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUserStats _ptr is null!");
			return Native.SteamAPI_ISteamUserStats_SetStat0(_ptr, pchName, fData);
		}

		public virtual bool ISteamUserStats_UpdateAvgRateStat(
			string pchName,
			float flCountThisSession,
			double dSessionLength) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUserStats _ptr is null!");
			return Native.SteamAPI_ISteamUserStats_UpdateAvgRateStat(_ptr, pchName, flCountThisSession, dSessionLength);
		}

		public virtual bool ISteamUserStats_GetAchievement(string pchName,
			[MarshalAs(UnmanagedType.U1)] ref bool pbAchieved) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUserStats _ptr is null!");
			return Native.SteamAPI_ISteamUserStats_GetAchievement(_ptr, pchName, ref pbAchieved);
		}

		public virtual bool ISteamUserStats_SetAchievement(string pchName) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUserStats_SetAchievement(_ptr, pchName)
				: throw new Exception("ISteamUserStats _ptr is null!");
		}

		public virtual bool ISteamUserStats_ClearAchievement(string pchName) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUserStats_ClearAchievement(_ptr, pchName)
				: throw new Exception("ISteamUserStats _ptr is null!");
		}

		public virtual bool ISteamUserStats_GetAchievementAndUnlockTime(
			string pchName,
			[MarshalAs(UnmanagedType.U1)] ref bool pbAchieved,
			out uint punUnlockTime) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUserStats _ptr is null!");
			return Native.SteamAPI_ISteamUserStats_GetAchievementAndUnlockTime(_ptr, pchName, ref pbAchieved,
				out punUnlockTime);
		}

		public virtual bool ISteamUserStats_StoreStats() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUserStats_StoreStats(_ptr)
				: throw new Exception("ISteamUserStats _ptr is null!");
		}

		public virtual int ISteamUserStats_GetAchievementIcon(string pchName) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUserStats_GetAchievementIcon(_ptr, pchName)
				: throw new Exception("ISteamUserStats _ptr is null!");
		}

		public virtual IntPtr ISteamUserStats_GetAchievementDisplayAttribute(
			string pchName,
			string pchKey) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUserStats _ptr is null!");
			return Native.SteamAPI_ISteamUserStats_GetAchievementDisplayAttribute(_ptr, pchName, pchKey);
		}

		public virtual bool ISteamUserStats_IndicateAchievementProgress(
			string pchName,
			uint nCurProgress,
			uint nMaxProgress) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUserStats _ptr is null!");
			return Native.SteamAPI_ISteamUserStats_IndicateAchievementProgress(_ptr, pchName, nCurProgress,
				nMaxProgress);
		}

		public virtual uint ISteamUserStats_GetNumAchievements() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUserStats_GetNumAchievements(_ptr)
				: throw new Exception("ISteamUserStats _ptr is null!");
		}

		public virtual IntPtr ISteamUserStats_GetAchievementName(uint iAchievement) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUserStats_GetAchievementName(_ptr, iAchievement)
				: throw new Exception("ISteamUserStats _ptr is null!");
		}

		public virtual SteamAPICall_t ISteamUserStats_RequestUserStats(ulong steamIDUser) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUserStats_RequestUserStats(_ptr, steamIDUser)
				: throw new Exception("ISteamUserStats _ptr is null!");
		}

		public virtual bool ISteamUserStats_GetUserStat(
			ulong steamIDUser,
			string pchName,
			out int pData) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUserStats _ptr is null!");
			return Native.SteamAPI_ISteamUserStats_GetUserStat(_ptr, steamIDUser, pchName, out pData);
		}

		public virtual bool ISteamUserStats_GetUserStat0(
			ulong steamIDUser,
			string pchName,
			out float pData) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUserStats _ptr is null!");
			return Native.SteamAPI_ISteamUserStats_GetUserStat0(_ptr, steamIDUser, pchName, out pData);
		}

		public virtual bool ISteamUserStats_GetUserAchievement(
			ulong steamIDUser,
			string pchName,
			[MarshalAs(UnmanagedType.U1)] ref bool pbAchieved) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUserStats _ptr is null!");
			return Native.SteamAPI_ISteamUserStats_GetUserAchievement(_ptr, steamIDUser, pchName, ref pbAchieved);
		}

		public virtual bool ISteamUserStats_GetUserAchievementAndUnlockTime(
			ulong steamIDUser,
			string pchName,
			[MarshalAs(UnmanagedType.U1)] ref bool pbAchieved,
			out uint punUnlockTime) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUserStats _ptr is null!");
			return Native.SteamAPI_ISteamUserStats_GetUserAchievementAndUnlockTime(_ptr, steamIDUser, pchName,
				ref pbAchieved, out punUnlockTime);
		}

		public virtual bool ISteamUserStats_ResetAllStats([MarshalAs(UnmanagedType.U1)] bool bAchievementsToo) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUserStats_ResetAllStats(_ptr, bAchievementsToo)
				: throw new Exception("ISteamUserStats _ptr is null!");
		}

		public virtual SteamAPICall_t ISteamUserStats_FindOrCreateLeaderboard(
			string pchLeaderboardName,
			LeaderboardSortMethod eLeaderboardSortMethod,
			LeaderboardDisplayType eLeaderboardDisplayType) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUserStats _ptr is null!");
			return Native.SteamAPI_ISteamUserStats_FindOrCreateLeaderboard(_ptr, pchLeaderboardName,
				eLeaderboardSortMethod, eLeaderboardDisplayType);
		}

		public virtual SteamAPICall_t ISteamUserStats_FindLeaderboard(string pchLeaderboardName) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUserStats_FindLeaderboard(_ptr, pchLeaderboardName)
				: throw new Exception("ISteamUserStats _ptr is null!");
		}

		public virtual IntPtr ISteamUserStats_GetLeaderboardName(ulong hSteamLeaderboard) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUserStats_GetLeaderboardName(_ptr, hSteamLeaderboard)
				: throw new Exception("ISteamUserStats _ptr is null!");
		}

		public virtual int ISteamUserStats_GetLeaderboardEntryCount(ulong hSteamLeaderboard) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUserStats_GetLeaderboardEntryCount(_ptr, hSteamLeaderboard)
				: throw new Exception("ISteamUserStats _ptr is null!");
		}

		public virtual LeaderboardSortMethod ISteamUserStats_GetLeaderboardSortMethod(
			ulong hSteamLeaderboard) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUserStats_GetLeaderboardSortMethod(_ptr, hSteamLeaderboard)
				: throw new Exception("ISteamUserStats _ptr is null!");
		}

		public virtual LeaderboardDisplayType ISteamUserStats_GetLeaderboardDisplayType(
			ulong hSteamLeaderboard) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUserStats_GetLeaderboardDisplayType(_ptr, hSteamLeaderboard)
				: throw new Exception("ISteamUserStats _ptr is null!");
		}

		public virtual SteamAPICall_t ISteamUserStats_DownloadLeaderboardEntries(
			ulong hSteamLeaderboard,
			LeaderboardDataRequest eLeaderboardDataRequest,
			int nRangeStart,
			int nRangeEnd) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUserStats _ptr is null!");
			return Native.SteamAPI_ISteamUserStats_DownloadLeaderboardEntries(_ptr, hSteamLeaderboard,
				eLeaderboardDataRequest, nRangeStart, nRangeEnd);
		}

		public virtual SteamAPICall_t ISteamUserStats_DownloadLeaderboardEntriesForUsers(
			ulong hSteamLeaderboard,
			IntPtr prgUsers,
			int cUsers) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUserStats _ptr is null!");
			return Native.SteamAPI_ISteamUserStats_DownloadLeaderboardEntriesForUsers(_ptr, hSteamLeaderboard, prgUsers,
				cUsers);
		}

		public virtual bool ISteamUserStats_GetDownloadedLeaderboardEntry(
			ulong hSteamLeaderboardEntries,
			int index,
			ref LeaderboardEntry_t pLeaderboardEntry,
			IntPtr pDetails,
			int cDetailsMax) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUserStats _ptr is null!");
			var pLeaderboardEntry1 = new LeaderboardEntry_t.PackSmall();
			var leaderboardEntry = Native.SteamAPI_ISteamUserStats_GetDownloadedLeaderboardEntry(_ptr,
				hSteamLeaderboardEntries, index, ref pLeaderboardEntry1, pDetails, cDetailsMax);
			pLeaderboardEntry = (LeaderboardEntry_t)pLeaderboardEntry1;
			return leaderboardEntry;
		}

		public virtual SteamAPICall_t ISteamUserStats_UploadLeaderboardScore(
			ulong hSteamLeaderboard,
			LeaderboardUploadScoreMethod eLeaderboardUploadScoreMethod,
			int nScore,
			int[] pScoreDetails,
			int cScoreDetailsCount) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUserStats _ptr is null!");
			return Native.SteamAPI_ISteamUserStats_UploadLeaderboardScore(_ptr, hSteamLeaderboard,
				eLeaderboardUploadScoreMethod, nScore, pScoreDetails, cScoreDetailsCount);
		}

		public virtual SteamAPICall_t ISteamUserStats_AttachLeaderboardUGC(
			ulong hSteamLeaderboard,
			ulong hUGC) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUserStats _ptr is null!");
			return Native.SteamAPI_ISteamUserStats_AttachLeaderboardUGC(_ptr, hSteamLeaderboard, hUGC);
		}

		public virtual SteamAPICall_t ISteamUserStats_GetNumberOfCurrentPlayers() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUserStats_GetNumberOfCurrentPlayers(_ptr)
				: throw new Exception("ISteamUserStats _ptr is null!");
		}

		public virtual SteamAPICall_t ISteamUserStats_RequestGlobalAchievementPercentages() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUserStats_RequestGlobalAchievementPercentages(_ptr)
				: throw new Exception("ISteamUserStats _ptr is null!");
		}

		public virtual int ISteamUserStats_GetMostAchievedAchievementInfo(
			StringBuilder pchName,
			uint unNameBufLen,
			out float pflPercent,
			[MarshalAs(UnmanagedType.U1)] ref bool pbAchieved) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUserStats _ptr is null!");
			return Native.SteamAPI_ISteamUserStats_GetMostAchievedAchievementInfo(_ptr, pchName, unNameBufLen,
				out pflPercent, ref pbAchieved);
		}

		public virtual int ISteamUserStats_GetNextMostAchievedAchievementInfo(
			int iIteratorPrevious,
			StringBuilder pchName,
			uint unNameBufLen,
			out float pflPercent,
			[MarshalAs(UnmanagedType.U1)] ref bool pbAchieved) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUserStats _ptr is null!");
			return Native.SteamAPI_ISteamUserStats_GetNextMostAchievedAchievementInfo(_ptr, iIteratorPrevious, pchName,
				unNameBufLen, out pflPercent, ref pbAchieved);
		}

		public virtual bool ISteamUserStats_GetAchievementAchievedPercent(
			string pchName,
			out float pflPercent) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUserStats_GetAchievementAchievedPercent(_ptr, pchName, out pflPercent)
				: throw new Exception("ISteamUserStats _ptr is null!");
		}

		public virtual SteamAPICall_t ISteamUserStats_RequestGlobalStats(int nHistoryDays) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUserStats_RequestGlobalStats(_ptr, nHistoryDays)
				: throw new Exception("ISteamUserStats _ptr is null!");
		}

		public virtual bool ISteamUserStats_GetGlobalStat(string pchStatName, out long pData) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUserStats_GetGlobalStat(_ptr, pchStatName, out pData)
				: throw new Exception("ISteamUserStats _ptr is null!");
		}

		public virtual bool ISteamUserStats_GetGlobalStat0(string pchStatName, out double pData) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUserStats_GetGlobalStat0(_ptr, pchStatName, out pData)
				: throw new Exception("ISteamUserStats _ptr is null!");
		}

		public virtual int ISteamUserStats_GetGlobalStatHistory(
			string pchStatName,
			out long pData,
			uint cubData) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUserStats _ptr is null!");
			return Native.SteamAPI_ISteamUserStats_GetGlobalStatHistory(_ptr, pchStatName, out pData, cubData);
		}

		public virtual int ISteamUserStats_GetGlobalStatHistory0(
			string pchStatName,
			out double pData,
			uint cubData) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUserStats _ptr is null!");
			return Native.SteamAPI_ISteamUserStats_GetGlobalStatHistory0(_ptr, pchStatName, out pData, cubData);
		}

		public virtual bool ISteamApps_BIsSubscribed() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamApps_BIsSubscribed(_ptr)
				: throw new Exception("ISteamApps _ptr is null!");
		}

		public virtual bool ISteamApps_BIsLowViolence() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamApps_BIsLowViolence(_ptr)
				: throw new Exception("ISteamApps _ptr is null!");
		}

		public virtual bool ISteamApps_BIsCybercafe() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamApps_BIsCybercafe(_ptr)
				: throw new Exception("ISteamApps _ptr is null!");
		}

		public virtual bool ISteamApps_BIsVACBanned() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamApps_BIsVACBanned(_ptr)
				: throw new Exception("ISteamApps _ptr is null!");
		}

		public virtual IntPtr ISteamApps_GetCurrentGameLanguage() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamApps_GetCurrentGameLanguage(_ptr)
				: throw new Exception("ISteamApps _ptr is null!");
		}

		public virtual IntPtr ISteamApps_GetAvailableGameLanguages() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamApps_GetAvailableGameLanguages(_ptr)
				: throw new Exception("ISteamApps _ptr is null!");
		}

		public virtual bool ISteamApps_BIsSubscribedApp(uint appID) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamApps_BIsSubscribedApp(_ptr, appID)
				: throw new Exception("ISteamApps _ptr is null!");
		}

		public virtual bool ISteamApps_BIsDlcInstalled(uint appID) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamApps_BIsDlcInstalled(_ptr, appID)
				: throw new Exception("ISteamApps _ptr is null!");
		}

		public virtual uint ISteamApps_GetEarliestPurchaseUnixTime(uint nAppID) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamApps_GetEarliestPurchaseUnixTime(_ptr, nAppID)
				: throw new Exception("ISteamApps _ptr is null!");
		}

		public virtual bool ISteamApps_BIsSubscribedFromFreeWeekend() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamApps_BIsSubscribedFromFreeWeekend(_ptr)
				: throw new Exception("ISteamApps _ptr is null!");
		}

		public virtual int ISteamApps_GetDLCCount() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamApps_GetDLCCount(_ptr)
				: throw new Exception("ISteamApps _ptr is null!");
		}

		public virtual bool ISteamApps_BGetDLCDataByIndex(
			int iDLC,
			ref uint pAppID,
			[MarshalAs(UnmanagedType.U1)] ref bool pbAvailable,
			StringBuilder pchName,
			int cchNameBufferSize) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamApps _ptr is null!");
			return Native.SteamAPI_ISteamApps_BGetDLCDataByIndex(_ptr, iDLC, ref pAppID, ref pbAvailable, pchName,
				cchNameBufferSize);
		}

		public virtual void ISteamApps_InstallDLC(uint nAppID) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamApps _ptr is null!");
			Native.SteamAPI_ISteamApps_InstallDLC(_ptr, nAppID);
		}

		public virtual void ISteamApps_UninstallDLC(uint nAppID) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamApps _ptr is null!");
			Native.SteamAPI_ISteamApps_UninstallDLC(_ptr, nAppID);
		}

		public virtual void ISteamApps_RequestAppProofOfPurchaseKey(uint nAppID) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamApps _ptr is null!");
			Native.SteamAPI_ISteamApps_RequestAppProofOfPurchaseKey(_ptr, nAppID);
		}

		public virtual bool ISteamApps_GetCurrentBetaName(
			StringBuilder pchName,
			int cchNameBufferSize) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamApps _ptr is null!");
			return Native.SteamAPI_ISteamApps_GetCurrentBetaName(_ptr, pchName, cchNameBufferSize);
		}

		public virtual bool ISteamApps_MarkContentCorrupt([MarshalAs(UnmanagedType.U1)] bool bMissingFilesOnly) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamApps_MarkContentCorrupt(_ptr, bMissingFilesOnly)
				: throw new Exception("ISteamApps _ptr is null!");
		}

		public virtual uint ISteamApps_GetInstalledDepots(
			uint appID,
			IntPtr pvecDepots,
			uint cMaxDepots) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamApps _ptr is null!");
			return Native.SteamAPI_ISteamApps_GetInstalledDepots(_ptr, appID, pvecDepots, cMaxDepots);
		}

		public virtual uint ISteamApps_GetAppInstallDir(
			uint appID,
			StringBuilder pchFolder,
			uint cchFolderBufferSize) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamApps _ptr is null!");
			return Native.SteamAPI_ISteamApps_GetAppInstallDir(_ptr, appID, pchFolder, cchFolderBufferSize);
		}

		public virtual bool ISteamApps_BIsAppInstalled(uint appID) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamApps_BIsAppInstalled(_ptr, appID)
				: throw new Exception("ISteamApps _ptr is null!");
		}

		public virtual CSteamID ISteamApps_GetAppOwner() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamApps_GetAppOwner(_ptr)
				: throw new Exception("ISteamApps _ptr is null!");
		}

		public virtual IntPtr ISteamApps_GetLaunchQueryParam(string pchKey) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamApps_GetLaunchQueryParam(_ptr, pchKey)
				: throw new Exception("ISteamApps _ptr is null!");
		}

		public virtual bool ISteamApps_GetDlcDownloadProgress(
			uint nAppID,
			out ulong punBytesDownloaded,
			out ulong punBytesTotal) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamApps_GetDlcDownloadProgress(_ptr, nAppID, out punBytesDownloaded,
					out punBytesTotal)
				: throw new Exception("ISteamApps _ptr is null!");
		}

		public virtual int ISteamApps_GetAppBuildId() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamApps_GetAppBuildId(_ptr)
				: throw new Exception("ISteamApps _ptr is null!");
		}

		public virtual void ISteamApps_RequestAllProofOfPurchaseKeys() {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamApps _ptr is null!");
			Native.SteamAPI_ISteamApps_RequestAllProofOfPurchaseKeys(_ptr);
		}

		public virtual SteamAPICall_t ISteamApps_GetFileDetails(string pszFileName) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamApps_GetFileDetails(_ptr, pszFileName)
				: throw new Exception("ISteamApps _ptr is null!");
		}

		public virtual bool ISteamNetworking_SendP2PPacket(
			ulong steamIDRemote,
			IntPtr pubData,
			uint cubData,
			P2PSend eP2PSendType,
			int nChannel) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamNetworking _ptr is null!");
			return Native.SteamAPI_ISteamNetworking_SendP2PPacket(_ptr, steamIDRemote, pubData, cubData, eP2PSendType,
				nChannel);
		}

		public virtual bool ISteamNetworking_IsP2PPacketAvailable(out uint pcubMsgSize, int nChannel) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamNetworking_IsP2PPacketAvailable(_ptr, out pcubMsgSize, nChannel)
				: throw new Exception("ISteamNetworking _ptr is null!");
		}

		public virtual bool ISteamNetworking_ReadP2PPacket(
			IntPtr pubDest,
			uint cubDest,
			out uint pcubMsgSize,
			out ulong psteamIDRemote,
			int nChannel) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamNetworking _ptr is null!");
			return Native.SteamAPI_ISteamNetworking_ReadP2PPacket(_ptr, pubDest, cubDest, out pcubMsgSize,
				out psteamIDRemote, nChannel);
		}

		public virtual bool ISteamNetworking_AcceptP2PSessionWithUser(ulong steamIDRemote) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamNetworking_AcceptP2PSessionWithUser(_ptr, steamIDRemote)
				: throw new Exception("ISteamNetworking _ptr is null!");
		}

		public virtual bool ISteamNetworking_CloseP2PSessionWithUser(ulong steamIDRemote) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamNetworking_CloseP2PSessionWithUser(_ptr, steamIDRemote)
				: throw new Exception("ISteamNetworking _ptr is null!");
		}

		public virtual bool ISteamNetworking_CloseP2PChannelWithUser(
			ulong steamIDRemote,
			int nChannel) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamNetworking _ptr is null!");
			return Native.SteamAPI_ISteamNetworking_CloseP2PChannelWithUser(_ptr, steamIDRemote, nChannel);
		}

		public virtual bool ISteamNetworking_GetP2PSessionState(
			ulong steamIDRemote,
			ref P2PSessionState_t pConnectionState) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamNetworking _ptr is null!");
			var pConnectionState1 = new P2PSessionState_t.PackSmall();
			var p2PsessionState =
				Native.SteamAPI_ISteamNetworking_GetP2PSessionState(_ptr, steamIDRemote, ref pConnectionState1);
			pConnectionState = (P2PSessionState_t)pConnectionState1;
			return p2PsessionState;
		}

		public virtual bool ISteamNetworking_AllowP2PPacketRelay([MarshalAs(UnmanagedType.U1)] bool bAllow) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamNetworking_AllowP2PPacketRelay(_ptr, bAllow)
				: throw new Exception("ISteamNetworking _ptr is null!");
		}

		public virtual SNetListenSocket_t ISteamNetworking_CreateListenSocket(
			int nVirtualP2PPort,
			uint nIP,
			ushort nPort,
			[MarshalAs(UnmanagedType.U1)] bool bAllowUseOfPacketRelay) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamNetworking _ptr is null!");
			return Native.SteamAPI_ISteamNetworking_CreateListenSocket(_ptr, nVirtualP2PPort, nIP, nPort,
				bAllowUseOfPacketRelay);
		}

		public virtual SNetSocket_t ISteamNetworking_CreateP2PConnectionSocket(
			ulong steamIDTarget,
			int nVirtualPort,
			int nTimeoutSec,
			[MarshalAs(UnmanagedType.U1)] bool bAllowUseOfPacketRelay) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamNetworking _ptr is null!");
			return Native.SteamAPI_ISteamNetworking_CreateP2PConnectionSocket(_ptr, steamIDTarget, nVirtualPort,
				nTimeoutSec, bAllowUseOfPacketRelay);
		}

		public virtual SNetSocket_t ISteamNetworking_CreateConnectionSocket(
			uint nIP,
			ushort nPort,
			int nTimeoutSec) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamNetworking _ptr is null!");
			return Native.SteamAPI_ISteamNetworking_CreateConnectionSocket(_ptr, nIP, nPort, nTimeoutSec);
		}

		public virtual bool ISteamNetworking_DestroySocket(uint hSocket,
			[MarshalAs(UnmanagedType.U1)] bool bNotifyRemoteEnd) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamNetworking _ptr is null!");
			return Native.SteamAPI_ISteamNetworking_DestroySocket(_ptr, hSocket, bNotifyRemoteEnd);
		}

		public virtual bool ISteamNetworking_DestroyListenSocket(uint hSocket,
			[MarshalAs(UnmanagedType.U1)] bool bNotifyRemoteEnd) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamNetworking _ptr is null!");
			return Native.SteamAPI_ISteamNetworking_DestroyListenSocket(_ptr, hSocket, bNotifyRemoteEnd);
		}

		public virtual bool ISteamNetworking_SendDataOnSocket(
			uint hSocket,
			IntPtr pubData,
			uint cubData,
			[MarshalAs(UnmanagedType.U1)] bool bReliable) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamNetworking _ptr is null!");
			return Native.SteamAPI_ISteamNetworking_SendDataOnSocket(_ptr, hSocket, pubData, cubData, bReliable);
		}

		public virtual bool ISteamNetworking_IsDataAvailableOnSocket(
			uint hSocket,
			out uint pcubMsgSize) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamNetworking_IsDataAvailableOnSocket(_ptr, hSocket, out pcubMsgSize)
				: throw new Exception("ISteamNetworking _ptr is null!");
		}

		public virtual bool ISteamNetworking_RetrieveDataFromSocket(
			uint hSocket,
			IntPtr pubDest,
			uint cubDest,
			out uint pcubMsgSize) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamNetworking _ptr is null!");
			return Native.SteamAPI_ISteamNetworking_RetrieveDataFromSocket(_ptr, hSocket, pubDest, cubDest,
				out pcubMsgSize);
		}

		public virtual bool ISteamNetworking_IsDataAvailable(
			uint hListenSocket,
			out uint pcubMsgSize,
			ref uint phSocket) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamNetworking _ptr is null!");
			return Native.SteamAPI_ISteamNetworking_IsDataAvailable(_ptr, hListenSocket, out pcubMsgSize, ref phSocket);
		}

		public virtual bool ISteamNetworking_RetrieveData(
			uint hListenSocket,
			IntPtr pubDest,
			uint cubDest,
			out uint pcubMsgSize,
			ref uint phSocket) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamNetworking _ptr is null!");
			return Native.SteamAPI_ISteamNetworking_RetrieveData(_ptr, hListenSocket, pubDest, cubDest, out pcubMsgSize,
				ref phSocket);
		}

		public virtual bool ISteamNetworking_GetSocketInfo(
			uint hSocket,
			out ulong pSteamIDRemote,
			IntPtr peSocketStatus,
			out uint punIPRemote,
			out ushort punPortRemote) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamNetworking _ptr is null!");
			return Native.SteamAPI_ISteamNetworking_GetSocketInfo(_ptr, hSocket, out pSteamIDRemote, peSocketStatus,
				out punIPRemote, out punPortRemote);
		}

		public virtual bool ISteamNetworking_GetListenSocketInfo(
			uint hListenSocket,
			out uint pnIP,
			out ushort pnPort) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamNetworking_GetListenSocketInfo(_ptr, hListenSocket, out pnIP, out pnPort)
				: throw new Exception("ISteamNetworking _ptr is null!");
		}

		public virtual SNetSocketConnectionType ISteamNetworking_GetSocketConnectionType(uint hSocket) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamNetworking_GetSocketConnectionType(_ptr, hSocket)
				: throw new Exception("ISteamNetworking _ptr is null!");
		}

		public virtual int ISteamNetworking_GetMaxPacketSize(uint hSocket) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamNetworking_GetMaxPacketSize(_ptr, hSocket)
				: throw new Exception("ISteamNetworking _ptr is null!");
		}

		public virtual ScreenshotHandle ISteamScreenshots_WriteScreenshot(
			IntPtr pubRGB,
			uint cubRGB,
			int nWidth,
			int nHeight) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamScreenshots _ptr is null!");
			return Native.SteamAPI_ISteamScreenshots_WriteScreenshot(_ptr, pubRGB, cubRGB, nWidth, nHeight);
		}

		public virtual ScreenshotHandle ISteamScreenshots_AddScreenshotToLibrary(
			string pchFilename,
			string pchThumbnailFilename,
			int nWidth,
			int nHeight) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamScreenshots _ptr is null!");
			return Native.SteamAPI_ISteamScreenshots_AddScreenshotToLibrary(_ptr, pchFilename, pchThumbnailFilename,
				nWidth, nHeight);
		}

		public virtual void ISteamScreenshots_TriggerScreenshot() {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamScreenshots _ptr is null!");
			Native.SteamAPI_ISteamScreenshots_TriggerScreenshot(_ptr);
		}

		public virtual void ISteamScreenshots_HookScreenshots([MarshalAs(UnmanagedType.U1)] bool bHook) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamScreenshots _ptr is null!");
			Native.SteamAPI_ISteamScreenshots_HookScreenshots(_ptr, bHook);
		}

		public virtual bool ISteamScreenshots_SetLocation(uint hScreenshot, string pchLocation) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamScreenshots _ptr is null!");
			return Native.SteamAPI_ISteamScreenshots_SetLocation(_ptr, hScreenshot, pchLocation);
		}

		public virtual bool ISteamScreenshots_TagUser(uint hScreenshot, ulong steamID) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamScreenshots _ptr is null!");
			return Native.SteamAPI_ISteamScreenshots_TagUser(_ptr, hScreenshot, steamID);
		}

		public virtual bool ISteamScreenshots_TagPublishedFile(
			uint hScreenshot,
			ulong unPublishedFileID) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamScreenshots _ptr is null!");
			return Native.SteamAPI_ISteamScreenshots_TagPublishedFile(_ptr, hScreenshot, unPublishedFileID);
		}

		public virtual bool ISteamScreenshots_IsScreenshotsHooked() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamScreenshots_IsScreenshotsHooked(_ptr)
				: throw new Exception("ISteamScreenshots _ptr is null!");
		}

		public virtual ScreenshotHandle ISteamScreenshots_AddVRScreenshotToLibrary(
			VRScreenshotType eType,
			string pchFilename,
			string pchVRFilename) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamScreenshots _ptr is null!");
			return Native.SteamAPI_ISteamScreenshots_AddVRScreenshotToLibrary(_ptr, eType, pchFilename, pchVRFilename);
		}

		public virtual bool ISteamMusic_BIsEnabled() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMusic_BIsEnabled(_ptr)
				: throw new Exception("ISteamMusic _ptr is null!");
		}

		public virtual bool ISteamMusic_BIsPlaying() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMusic_BIsPlaying(_ptr)
				: throw new Exception("ISteamMusic _ptr is null!");
		}

		public virtual AudioPlayback_Status ISteamMusic_GetPlaybackStatus() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMusic_GetPlaybackStatus(_ptr)
				: throw new Exception("ISteamMusic _ptr is null!");
		}

		public virtual void ISteamMusic_Play() {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMusic _ptr is null!");
			Native.SteamAPI_ISteamMusic_Play(_ptr);
		}

		public virtual void ISteamMusic_Pause() {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMusic _ptr is null!");
			Native.SteamAPI_ISteamMusic_Pause(_ptr);
		}

		public virtual void ISteamMusic_PlayPrevious() {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMusic _ptr is null!");
			Native.SteamAPI_ISteamMusic_PlayPrevious(_ptr);
		}

		public virtual void ISteamMusic_PlayNext() {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMusic _ptr is null!");
			Native.SteamAPI_ISteamMusic_PlayNext(_ptr);
		}

		public virtual void ISteamMusic_SetVolume(float flVolume) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMusic _ptr is null!");
			Native.SteamAPI_ISteamMusic_SetVolume(_ptr, flVolume);
		}

		public virtual float ISteamMusic_GetVolume() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMusic_GetVolume(_ptr)
				: throw new Exception("ISteamMusic _ptr is null!");
		}

		public virtual bool ISteamMusicRemote_RegisterSteamMusicRemote(string pchName) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMusicRemote_RegisterSteamMusicRemote(_ptr, pchName)
				: throw new Exception("ISteamMusicRemote _ptr is null!");
		}

		public virtual bool ISteamMusicRemote_DeregisterSteamMusicRemote() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMusicRemote_DeregisterSteamMusicRemote(_ptr)
				: throw new Exception("ISteamMusicRemote _ptr is null!");
		}

		public virtual bool ISteamMusicRemote_BIsCurrentMusicRemote() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMusicRemote_BIsCurrentMusicRemote(_ptr)
				: throw new Exception("ISteamMusicRemote _ptr is null!");
		}

		public virtual bool ISteamMusicRemote_BActivationSuccess([MarshalAs(UnmanagedType.U1)] bool bValue) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMusicRemote_BActivationSuccess(_ptr, bValue)
				: throw new Exception("ISteamMusicRemote _ptr is null!");
		}

		public virtual bool ISteamMusicRemote_SetDisplayName(string pchDisplayName) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMusicRemote_SetDisplayName(_ptr, pchDisplayName)
				: throw new Exception("ISteamMusicRemote _ptr is null!");
		}

		public virtual bool ISteamMusicRemote_SetPNGIcon_64x64(IntPtr pvBuffer, uint cbBufferLength) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMusicRemote _ptr is null!");
			return Native.SteamAPI_ISteamMusicRemote_SetPNGIcon_64x64(_ptr, pvBuffer, cbBufferLength);
		}

		public virtual bool ISteamMusicRemote_EnablePlayPrevious([MarshalAs(UnmanagedType.U1)] bool bValue) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMusicRemote_EnablePlayPrevious(_ptr, bValue)
				: throw new Exception("ISteamMusicRemote _ptr is null!");
		}

		public virtual bool ISteamMusicRemote_EnablePlayNext([MarshalAs(UnmanagedType.U1)] bool bValue) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMusicRemote_EnablePlayNext(_ptr, bValue)
				: throw new Exception("ISteamMusicRemote _ptr is null!");
		}

		public virtual bool ISteamMusicRemote_EnableShuffled([MarshalAs(UnmanagedType.U1)] bool bValue) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMusicRemote_EnableShuffled(_ptr, bValue)
				: throw new Exception("ISteamMusicRemote _ptr is null!");
		}

		public virtual bool ISteamMusicRemote_EnableLooped([MarshalAs(UnmanagedType.U1)] bool bValue) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMusicRemote_EnableLooped(_ptr, bValue)
				: throw new Exception("ISteamMusicRemote _ptr is null!");
		}

		public virtual bool ISteamMusicRemote_EnableQueue([MarshalAs(UnmanagedType.U1)] bool bValue) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMusicRemote_EnableQueue(_ptr, bValue)
				: throw new Exception("ISteamMusicRemote _ptr is null!");
		}

		public virtual bool ISteamMusicRemote_EnablePlaylists([MarshalAs(UnmanagedType.U1)] bool bValue) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMusicRemote_EnablePlaylists(_ptr, bValue)
				: throw new Exception("ISteamMusicRemote _ptr is null!");
		}

		public virtual bool ISteamMusicRemote_UpdatePlaybackStatus(AudioPlayback_Status nStatus) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMusicRemote_UpdatePlaybackStatus(_ptr, nStatus)
				: throw new Exception("ISteamMusicRemote _ptr is null!");
		}

		public virtual bool ISteamMusicRemote_UpdateShuffled([MarshalAs(UnmanagedType.U1)] bool bValue) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMusicRemote_UpdateShuffled(_ptr, bValue)
				: throw new Exception("ISteamMusicRemote _ptr is null!");
		}

		public virtual bool ISteamMusicRemote_UpdateLooped([MarshalAs(UnmanagedType.U1)] bool bValue) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMusicRemote_UpdateLooped(_ptr, bValue)
				: throw new Exception("ISteamMusicRemote _ptr is null!");
		}

		public virtual bool ISteamMusicRemote_UpdateVolume(float flValue) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMusicRemote_UpdateVolume(_ptr, flValue)
				: throw new Exception("ISteamMusicRemote _ptr is null!");
		}

		public virtual bool ISteamMusicRemote_CurrentEntryWillChange() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMusicRemote_CurrentEntryWillChange(_ptr)
				: throw new Exception("ISteamMusicRemote _ptr is null!");
		}

		public virtual bool ISteamMusicRemote_CurrentEntryIsAvailable([MarshalAs(UnmanagedType.U1)] bool bAvailable) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMusicRemote_CurrentEntryIsAvailable(_ptr, bAvailable)
				: throw new Exception("ISteamMusicRemote _ptr is null!");
		}

		public virtual bool ISteamMusicRemote_UpdateCurrentEntryText(string pchText) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMusicRemote_UpdateCurrentEntryText(_ptr, pchText)
				: throw new Exception("ISteamMusicRemote _ptr is null!");
		}

		public virtual bool ISteamMusicRemote_UpdateCurrentEntryElapsedSeconds(int nValue) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMusicRemote_UpdateCurrentEntryElapsedSeconds(_ptr, nValue)
				: throw new Exception("ISteamMusicRemote _ptr is null!");
		}

		public virtual bool ISteamMusicRemote_UpdateCurrentEntryCoverArt(
			IntPtr pvBuffer,
			uint cbBufferLength) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMusicRemote _ptr is null!");
			return Native.SteamAPI_ISteamMusicRemote_UpdateCurrentEntryCoverArt(_ptr, pvBuffer, cbBufferLength);
		}

		public virtual bool ISteamMusicRemote_CurrentEntryDidChange() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMusicRemote_CurrentEntryDidChange(_ptr)
				: throw new Exception("ISteamMusicRemote _ptr is null!");
		}

		public virtual bool ISteamMusicRemote_QueueWillChange() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMusicRemote_QueueWillChange(_ptr)
				: throw new Exception("ISteamMusicRemote _ptr is null!");
		}

		public virtual bool ISteamMusicRemote_ResetQueueEntries() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMusicRemote_ResetQueueEntries(_ptr)
				: throw new Exception("ISteamMusicRemote _ptr is null!");
		}

		public virtual bool ISteamMusicRemote_SetQueueEntry(
			int nID,
			int nPosition,
			string pchEntryText) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMusicRemote _ptr is null!");
			return Native.SteamAPI_ISteamMusicRemote_SetQueueEntry(_ptr, nID, nPosition, pchEntryText);
		}

		public virtual bool ISteamMusicRemote_SetCurrentQueueEntry(int nID) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMusicRemote_SetCurrentQueueEntry(_ptr, nID)
				: throw new Exception("ISteamMusicRemote _ptr is null!");
		}

		public virtual bool ISteamMusicRemote_QueueDidChange() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMusicRemote_QueueDidChange(_ptr)
				: throw new Exception("ISteamMusicRemote _ptr is null!");
		}

		public virtual bool ISteamMusicRemote_PlaylistWillChange() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMusicRemote_PlaylistWillChange(_ptr)
				: throw new Exception("ISteamMusicRemote _ptr is null!");
		}

		public virtual bool ISteamMusicRemote_ResetPlaylistEntries() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMusicRemote_ResetPlaylistEntries(_ptr)
				: throw new Exception("ISteamMusicRemote _ptr is null!");
		}

		public virtual bool ISteamMusicRemote_SetPlaylistEntry(
			int nID,
			int nPosition,
			string pchEntryText) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMusicRemote _ptr is null!");
			return Native.SteamAPI_ISteamMusicRemote_SetPlaylistEntry(_ptr, nID, nPosition, pchEntryText);
		}

		public virtual bool ISteamMusicRemote_SetCurrentPlaylistEntry(int nID) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMusicRemote_SetCurrentPlaylistEntry(_ptr, nID)
				: throw new Exception("ISteamMusicRemote _ptr is null!");
		}

		public virtual bool ISteamMusicRemote_PlaylistDidChange() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMusicRemote_PlaylistDidChange(_ptr)
				: throw new Exception("ISteamMusicRemote _ptr is null!");
		}

		public virtual HTTPRequestHandle ISteamHTTP_CreateHTTPRequest(
			HTTPMethod eHTTPRequestMethod,
			string pchAbsoluteURL) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTTP _ptr is null!");
			return Native.SteamAPI_ISteamHTTP_CreateHTTPRequest(_ptr, eHTTPRequestMethod, pchAbsoluteURL);
		}

		public virtual bool ISteamHTTP_SetHTTPRequestContextValue(uint hRequest, ulong ulContextValue) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTTP _ptr is null!");
			return Native.SteamAPI_ISteamHTTP_SetHTTPRequestContextValue(_ptr, hRequest, ulContextValue);
		}

		public virtual bool ISteamHTTP_SetHTTPRequestNetworkActivityTimeout(
			uint hRequest,
			uint unTimeoutSeconds) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTTP _ptr is null!");
			return Native.SteamAPI_ISteamHTTP_SetHTTPRequestNetworkActivityTimeout(_ptr, hRequest, unTimeoutSeconds);
		}

		public virtual bool ISteamHTTP_SetHTTPRequestHeaderValue(
			uint hRequest,
			string pchHeaderName,
			string pchHeaderValue) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTTP _ptr is null!");
			return Native.SteamAPI_ISteamHTTP_SetHTTPRequestHeaderValue(_ptr, hRequest, pchHeaderName, pchHeaderValue);
		}

		public virtual bool ISteamHTTP_SetHTTPRequestGetOrPostParameter(
			uint hRequest,
			string pchParamName,
			string pchParamValue) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTTP _ptr is null!");
			return Native.SteamAPI_ISteamHTTP_SetHTTPRequestGetOrPostParameter(_ptr, hRequest, pchParamName,
				pchParamValue);
		}

		public virtual bool ISteamHTTP_SendHTTPRequest(uint hRequest, ref ulong pCallHandle) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTTP _ptr is null!");
			return Native.SteamAPI_ISteamHTTP_SendHTTPRequest(_ptr, hRequest, ref pCallHandle);
		}

		public virtual bool ISteamHTTP_SendHTTPRequestAndStreamResponse(
			uint hRequest,
			ref ulong pCallHandle) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTTP _ptr is null!");
			return Native.SteamAPI_ISteamHTTP_SendHTTPRequestAndStreamResponse(_ptr, hRequest, ref pCallHandle);
		}

		public virtual bool ISteamHTTP_DeferHTTPRequest(uint hRequest) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamHTTP_DeferHTTPRequest(_ptr, hRequest)
				: throw new Exception("ISteamHTTP _ptr is null!");
		}

		public virtual bool ISteamHTTP_PrioritizeHTTPRequest(uint hRequest) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamHTTP_PrioritizeHTTPRequest(_ptr, hRequest)
				: throw new Exception("ISteamHTTP _ptr is null!");
		}

		public virtual bool ISteamHTTP_GetHTTPResponseHeaderSize(
			uint hRequest,
			string pchHeaderName,
			out uint unResponseHeaderSize) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTTP _ptr is null!");
			return Native.SteamAPI_ISteamHTTP_GetHTTPResponseHeaderSize(_ptr, hRequest, pchHeaderName,
				out unResponseHeaderSize);
		}

		public virtual bool ISteamHTTP_GetHTTPResponseHeaderValue(
			uint hRequest,
			string pchHeaderName,
			out byte pHeaderValueBuffer,
			uint unBufferSize) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTTP _ptr is null!");
			return Native.SteamAPI_ISteamHTTP_GetHTTPResponseHeaderValue(_ptr, hRequest, pchHeaderName,
				out pHeaderValueBuffer, unBufferSize);
		}

		public virtual bool ISteamHTTP_GetHTTPResponseBodySize(uint hRequest, out uint unBodySize) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamHTTP_GetHTTPResponseBodySize(_ptr, hRequest, out unBodySize)
				: throw new Exception("ISteamHTTP _ptr is null!");
		}

		public virtual bool ISteamHTTP_GetHTTPResponseBodyData(
			uint hRequest,
			out byte pBodyDataBuffer,
			uint unBufferSize) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTTP _ptr is null!");
			return Native.SteamAPI_ISteamHTTP_GetHTTPResponseBodyData(_ptr, hRequest, out pBodyDataBuffer,
				unBufferSize);
		}

		public virtual bool ISteamHTTP_GetHTTPStreamingResponseBodyData(
			uint hRequest,
			uint cOffset,
			out byte pBodyDataBuffer,
			uint unBufferSize) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTTP _ptr is null!");
			return Native.SteamAPI_ISteamHTTP_GetHTTPStreamingResponseBodyData(_ptr, hRequest, cOffset,
				out pBodyDataBuffer, unBufferSize);
		}

		public virtual bool ISteamHTTP_ReleaseHTTPRequest(uint hRequest) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamHTTP_ReleaseHTTPRequest(_ptr, hRequest)
				: throw new Exception("ISteamHTTP _ptr is null!");
		}

		public virtual bool ISteamHTTP_GetHTTPDownloadProgressPct(
			uint hRequest,
			out float pflPercentOut) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamHTTP_GetHTTPDownloadProgressPct(_ptr, hRequest, out pflPercentOut)
				: throw new Exception("ISteamHTTP _ptr is null!");
		}

		public virtual bool ISteamHTTP_SetHTTPRequestRawPostBody(
			uint hRequest,
			string pchContentType,
			out byte pubBody,
			uint unBodyLen) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTTP _ptr is null!");
			return Native.SteamAPI_ISteamHTTP_SetHTTPRequestRawPostBody(_ptr, hRequest, pchContentType, out pubBody,
				unBodyLen);
		}

		public virtual HTTPCookieContainerHandle ISteamHTTP_CreateCookieContainer(
			[MarshalAs(UnmanagedType.U1)] bool bAllowResponsesToModify) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamHTTP_CreateCookieContainer(_ptr, bAllowResponsesToModify)
				: throw new Exception("ISteamHTTP _ptr is null!");
		}

		public virtual bool ISteamHTTP_ReleaseCookieContainer(uint hCookieContainer) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamHTTP_ReleaseCookieContainer(_ptr, hCookieContainer)
				: throw new Exception("ISteamHTTP _ptr is null!");
		}

		public virtual bool ISteamHTTP_SetCookie(
			uint hCookieContainer,
			string pchHost,
			string pchUrl,
			string pchCookie) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTTP _ptr is null!");
			return Native.SteamAPI_ISteamHTTP_SetCookie(_ptr, hCookieContainer, pchHost, pchUrl, pchCookie);
		}

		public virtual bool ISteamHTTP_SetHTTPRequestCookieContainer(
			uint hRequest,
			uint hCookieContainer) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTTP _ptr is null!");
			return Native.SteamAPI_ISteamHTTP_SetHTTPRequestCookieContainer(_ptr, hRequest, hCookieContainer);
		}

		public virtual bool ISteamHTTP_SetHTTPRequestUserAgentInfo(
			uint hRequest,
			string pchUserAgentInfo) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTTP _ptr is null!");
			return Native.SteamAPI_ISteamHTTP_SetHTTPRequestUserAgentInfo(_ptr, hRequest, pchUserAgentInfo);
		}

		public virtual bool ISteamHTTP_SetHTTPRequestRequiresVerifiedCertificate(
			uint hRequest,
			[MarshalAs(UnmanagedType.U1)] bool bRequireVerifiedCertificate) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTTP _ptr is null!");
			return Native.SteamAPI_ISteamHTTP_SetHTTPRequestRequiresVerifiedCertificate(_ptr, hRequest,
				bRequireVerifiedCertificate);
		}

		public virtual bool ISteamHTTP_SetHTTPRequestAbsoluteTimeoutMS(
			uint hRequest,
			uint unMilliseconds) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTTP _ptr is null!");
			return Native.SteamAPI_ISteamHTTP_SetHTTPRequestAbsoluteTimeoutMS(_ptr, hRequest, unMilliseconds);
		}

		public virtual bool ISteamHTTP_GetHTTPRequestWasTimedOut(
			uint hRequest,
			[MarshalAs(UnmanagedType.U1)] ref bool pbWasTimedOut) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTTP _ptr is null!");
			return Native.SteamAPI_ISteamHTTP_GetHTTPRequestWasTimedOut(_ptr, hRequest, ref pbWasTimedOut);
		}

		public virtual ClientUnifiedMessageHandle ISteamUnifiedMessages_SendMethod(
			string pchServiceMethod,
			IntPtr pRequestBuffer,
			uint unRequestBufferSize,
			ulong unContext) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUnifiedMessages _ptr is null!");
			return Native.SteamAPI_ISteamUnifiedMessages_SendMethod(_ptr, pchServiceMethod, pRequestBuffer,
				unRequestBufferSize, unContext);
		}

		public virtual bool ISteamUnifiedMessages_GetMethodResponseInfo(
			ulong hHandle,
			out uint punResponseSize,
			out Result peResult) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUnifiedMessages_GetMethodResponseInfo(_ptr, hHandle, out punResponseSize,
					out peResult)
				: throw new Exception("ISteamUnifiedMessages _ptr is null!");
		}

		public virtual bool ISteamUnifiedMessages_GetMethodResponseData(
			ulong hHandle,
			IntPtr pResponseBuffer,
			uint unResponseBufferSize,
			[MarshalAs(UnmanagedType.U1)] bool bAutoRelease) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUnifiedMessages _ptr is null!");
			return Native.SteamAPI_ISteamUnifiedMessages_GetMethodResponseData(_ptr, hHandle, pResponseBuffer,
				unResponseBufferSize, bAutoRelease);
		}

		public virtual bool ISteamUnifiedMessages_ReleaseMethod(ulong hHandle) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUnifiedMessages_ReleaseMethod(_ptr, hHandle)
				: throw new Exception("ISteamUnifiedMessages _ptr is null!");
		}

		public virtual bool ISteamUnifiedMessages_SendNotification(
			string pchServiceNotification,
			IntPtr pNotificationBuffer,
			uint unNotificationBufferSize) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUnifiedMessages _ptr is null!");
			return Native.SteamAPI_ISteamUnifiedMessages_SendNotification(_ptr, pchServiceNotification,
				pNotificationBuffer, unNotificationBufferSize);
		}

		public virtual bool ISteamController_Init() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamController_Init(_ptr)
				: throw new Exception("ISteamController _ptr is null!");
		}

		public virtual bool ISteamController_Shutdown() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamController_Shutdown(_ptr)
				: throw new Exception("ISteamController _ptr is null!");
		}

		public virtual void ISteamController_RunFrame() {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamController _ptr is null!");
			Native.SteamAPI_ISteamController_RunFrame(_ptr);
		}

		public virtual int ISteamController_GetConnectedControllers(IntPtr handlesOut) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamController_GetConnectedControllers(_ptr, handlesOut)
				: throw new Exception("ISteamController _ptr is null!");
		}

		public virtual bool ISteamController_ShowBindingPanel(ulong controllerHandle) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamController_ShowBindingPanel(_ptr, controllerHandle)
				: throw new Exception("ISteamController _ptr is null!");
		}

		public virtual ControllerActionSetHandle_t ISteamController_GetActionSetHandle(
			string pszActionSetName) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamController_GetActionSetHandle(_ptr, pszActionSetName)
				: throw new Exception("ISteamController _ptr is null!");
		}

		public virtual void ISteamController_ActivateActionSet(
			ulong controllerHandle,
			ulong actionSetHandle) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamController _ptr is null!");
			Native.SteamAPI_ISteamController_ActivateActionSet(_ptr, controllerHandle, actionSetHandle);
		}

		public virtual ControllerActionSetHandle_t ISteamController_GetCurrentActionSet(
			ulong controllerHandle) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamController_GetCurrentActionSet(_ptr, controllerHandle)
				: throw new Exception("ISteamController _ptr is null!");
		}

		public virtual ControllerDigitalActionHandle_t ISteamController_GetDigitalActionHandle(
			string pszActionName) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamController_GetDigitalActionHandle(_ptr, pszActionName)
				: throw new Exception("ISteamController _ptr is null!");
		}

		public virtual ControllerDigitalActionData_t ISteamController_GetDigitalActionData(
			ulong controllerHandle,
			ulong digitalActionHandle) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamController _ptr is null!");
			return Native.SteamAPI_ISteamController_GetDigitalActionData(_ptr, controllerHandle, digitalActionHandle);
		}

		public virtual int ISteamController_GetDigitalActionOrigins(
			ulong controllerHandle,
			ulong actionSetHandle,
			ulong digitalActionHandle,
			out ControllerActionOrigin originsOut) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamController _ptr is null!");
			return Native.SteamAPI_ISteamController_GetDigitalActionOrigins(_ptr, controllerHandle, actionSetHandle,
				digitalActionHandle, out originsOut);
		}

		public virtual ControllerAnalogActionHandle_t ISteamController_GetAnalogActionHandle(
			string pszActionName) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamController_GetAnalogActionHandle(_ptr, pszActionName)
				: throw new Exception("ISteamController _ptr is null!");
		}

		public virtual ControllerAnalogActionData_t ISteamController_GetAnalogActionData(
			ulong controllerHandle,
			ulong analogActionHandle) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamController _ptr is null!");
			return Native.SteamAPI_ISteamController_GetAnalogActionData(_ptr, controllerHandle, analogActionHandle);
		}

		public virtual int ISteamController_GetAnalogActionOrigins(
			ulong controllerHandle,
			ulong actionSetHandle,
			ulong analogActionHandle,
			out ControllerActionOrigin originsOut) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamController _ptr is null!");
			return Native.SteamAPI_ISteamController_GetAnalogActionOrigins(_ptr, controllerHandle, actionSetHandle,
				analogActionHandle, out originsOut);
		}

		public virtual void ISteamController_StopAnalogActionMomentum(
			ulong controllerHandle,
			ulong eAction) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamController _ptr is null!");
			Native.SteamAPI_ISteamController_StopAnalogActionMomentum(_ptr, controllerHandle, eAction);
		}

		public virtual void ISteamController_TriggerHapticPulse(
			ulong controllerHandle,
			SteamControllerPad eTargetPad,
			ushort usDurationMicroSec) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamController _ptr is null!");
			Native.SteamAPI_ISteamController_TriggerHapticPulse(_ptr, controllerHandle, eTargetPad, usDurationMicroSec);
		}

		public virtual void ISteamController_TriggerRepeatedHapticPulse(
			ulong controllerHandle,
			SteamControllerPad eTargetPad,
			ushort usDurationMicroSec,
			ushort usOffMicroSec,
			ushort unRepeat,
			uint nFlags) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamController _ptr is null!");
			Native.SteamAPI_ISteamController_TriggerRepeatedHapticPulse(_ptr, controllerHandle, eTargetPad,
				usDurationMicroSec, usOffMicroSec, unRepeat, nFlags);
		}

		public virtual void ISteamController_TriggerVibration(
			ulong controllerHandle,
			ushort usLeftSpeed,
			ushort usRightSpeed) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamController _ptr is null!");
			Native.SteamAPI_ISteamController_TriggerVibration(_ptr, controllerHandle, usLeftSpeed, usRightSpeed);
		}

		public virtual void ISteamController_SetLEDColor(
			ulong controllerHandle,
			byte nColorR,
			byte nColorG,
			byte nColorB,
			uint nFlags) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamController _ptr is null!");
			Native.SteamAPI_ISteamController_SetLEDColor(_ptr, controllerHandle, nColorR, nColorG, nColorB, nFlags);
		}

		public virtual int ISteamController_GetGamepadIndexForController(ulong ulControllerHandle) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamController_GetGamepadIndexForController(_ptr, ulControllerHandle)
				: throw new Exception("ISteamController _ptr is null!");
		}

		public virtual ControllerHandle_t ISteamController_GetControllerForGamepadIndex(int nIndex) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamController_GetControllerForGamepadIndex(_ptr, nIndex)
				: throw new Exception("ISteamController _ptr is null!");
		}

		public virtual ControllerMotionData_t ISteamController_GetMotionData(ulong controllerHandle) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamController_GetMotionData(_ptr, controllerHandle)
				: throw new Exception("ISteamController _ptr is null!");
		}

		public virtual bool ISteamController_ShowDigitalActionOrigins(
			ulong controllerHandle,
			ulong digitalActionHandle,
			float flScale,
			float flXPosition,
			float flYPosition) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamController _ptr is null!");
			return Native.SteamAPI_ISteamController_ShowDigitalActionOrigins(_ptr, controllerHandle,
				digitalActionHandle, flScale, flXPosition, flYPosition);
		}

		public virtual bool ISteamController_ShowAnalogActionOrigins(
			ulong controllerHandle,
			ulong analogActionHandle,
			float flScale,
			float flXPosition,
			float flYPosition) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamController _ptr is null!");
			return Native.SteamAPI_ISteamController_ShowAnalogActionOrigins(_ptr, controllerHandle, analogActionHandle,
				flScale, flXPosition, flYPosition);
		}

		public virtual IntPtr ISteamController_GetStringForActionOrigin(ControllerActionOrigin eOrigin) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamController_GetStringForActionOrigin(_ptr, eOrigin)
				: throw new Exception("ISteamController _ptr is null!");
		}

		public virtual IntPtr ISteamController_GetGlyphForActionOrigin(ControllerActionOrigin eOrigin) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamController_GetGlyphForActionOrigin(_ptr, eOrigin)
				: throw new Exception("ISteamController _ptr is null!");
		}

		public virtual UGCQueryHandle_t ISteamUGC_CreateQueryUserUGCRequest(
			uint unAccountID,
			UserUGCList eListType,
			UGCMatchingUGCType eMatchingUGCType,
			UserUGCListSortOrder eSortOrder,
			uint nCreatorAppID,
			uint nConsumerAppID,
			uint unPage) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_CreateQueryUserUGCRequest(_ptr, unAccountID, eListType, eMatchingUGCType,
				eSortOrder, nCreatorAppID, nConsumerAppID, unPage);
		}

		public virtual UGCQueryHandle_t ISteamUGC_CreateQueryAllUGCRequest(
			UGCQuery eQueryType,
			UGCMatchingUGCType eMatchingeMatchingUGCTypeFileType,
			uint nCreatorAppID,
			uint nConsumerAppID,
			uint unPage) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_CreateQueryAllUGCRequest(_ptr, eQueryType,
				eMatchingeMatchingUGCTypeFileType, nCreatorAppID, nConsumerAppID, unPage);
		}

		public virtual UGCQueryHandle_t ISteamUGC_CreateQueryUGCDetailsRequest(
			IntPtr pvecPublishedFileID,
			uint unNumPublishedFileIDs) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_CreateQueryUGCDetailsRequest(_ptr, pvecPublishedFileID,
				unNumPublishedFileIDs);
		}

		public virtual SteamAPICall_t ISteamUGC_SendQueryUGCRequest(ulong handle) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUGC_SendQueryUGCRequest(_ptr, handle)
				: throw new Exception("ISteamUGC _ptr is null!");
		}

		public virtual bool ISteamUGC_GetQueryUGCResult(
			ulong handle,
			uint index,
			ref SteamUGCDetails_t pDetails) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			var pDetails1 = new SteamUGCDetails_t.PackSmall();
			var queryUgcResult = Native.SteamAPI_ISteamUGC_GetQueryUGCResult(_ptr, handle, index, ref pDetails1);
			pDetails = (SteamUGCDetails_t)pDetails1;
			return queryUgcResult;
		}

		public virtual bool ISteamUGC_GetQueryUGCPreviewURL(
			ulong handle,
			uint index,
			StringBuilder pchURL,
			uint cchURLSize) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_GetQueryUGCPreviewURL(_ptr, handle, index, pchURL, cchURLSize);
		}

		public virtual bool ISteamUGC_GetQueryUGCMetadata(
			ulong handle,
			uint index,
			StringBuilder pchMetadata,
			uint cchMetadatasize) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_GetQueryUGCMetadata(_ptr, handle, index, pchMetadata, cchMetadatasize);
		}

		public virtual bool ISteamUGC_GetQueryUGCChildren(
			ulong handle,
			uint index,
			IntPtr pvecPublishedFileID,
			uint cMaxEntries) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_GetQueryUGCChildren(_ptr, handle, index, pvecPublishedFileID, cMaxEntries);
		}

		public virtual bool ISteamUGC_GetQueryUGCStatistic(
			ulong handle,
			uint index,
			ItemStatistic eStatType,
			out ulong pStatValue) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_GetQueryUGCStatistic(_ptr, handle, index, eStatType, out pStatValue);
		}

		public virtual uint ISteamUGC_GetQueryUGCNumAdditionalPreviews(ulong handle, uint index) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_GetQueryUGCNumAdditionalPreviews(_ptr, handle, index);
		}

		public virtual bool ISteamUGC_GetQueryUGCAdditionalPreview(
			ulong handle,
			uint index,
			uint previewIndex,
			StringBuilder pchURLOrVideoID,
			uint cchURLSize,
			StringBuilder pchOriginalFileName,
			uint cchOriginalFileNameSize,
			out ItemPreviewType pPreviewType) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_GetQueryUGCAdditionalPreview(_ptr, handle, index, previewIndex,
				pchURLOrVideoID, cchURLSize, pchOriginalFileName, cchOriginalFileNameSize, out pPreviewType);
		}

		public virtual uint ISteamUGC_GetQueryUGCNumKeyValueTags(ulong handle, uint index) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_GetQueryUGCNumKeyValueTags(_ptr, handle, index);
		}

		public virtual bool ISteamUGC_GetQueryUGCKeyValueTag(
			ulong handle,
			uint index,
			uint keyValueTagIndex,
			StringBuilder pchKey,
			uint cchKeySize,
			StringBuilder pchValue,
			uint cchValueSize) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_GetQueryUGCKeyValueTag(_ptr, handle, index, keyValueTagIndex, pchKey,
				cchKeySize, pchValue, cchValueSize);
		}

		public virtual bool ISteamUGC_ReleaseQueryUGCRequest(ulong handle) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUGC_ReleaseQueryUGCRequest(_ptr, handle)
				: throw new Exception("ISteamUGC _ptr is null!");
		}

		public virtual bool ISteamUGC_AddRequiredTag(ulong handle, string pTagName) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_AddRequiredTag(_ptr, handle, pTagName);
		}

		public virtual bool ISteamUGC_AddExcludedTag(ulong handle, string pTagName) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_AddExcludedTag(_ptr, handle, pTagName);
		}

		public virtual bool
			ISteamUGC_SetReturnOnlyIDs(ulong handle, [MarshalAs(UnmanagedType.U1)] bool bReturnOnlyIDs) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_SetReturnOnlyIDs(_ptr, handle, bReturnOnlyIDs);
		}

		public virtual bool ISteamUGC_SetReturnKeyValueTags(ulong handle,
			[MarshalAs(UnmanagedType.U1)] bool bReturnKeyValueTags) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_SetReturnKeyValueTags(_ptr, handle, bReturnKeyValueTags);
		}

		public virtual bool ISteamUGC_SetReturnLongDescription(
			ulong handle,
			[MarshalAs(UnmanagedType.U1)] bool bReturnLongDescription) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_SetReturnLongDescription(_ptr, handle, bReturnLongDescription);
		}

		public virtual bool ISteamUGC_SetReturnMetadata(ulong handle,
			[MarshalAs(UnmanagedType.U1)] bool bReturnMetadata) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_SetReturnMetadata(_ptr, handle, bReturnMetadata);
		}

		public virtual bool ISteamUGC_SetReturnChildren(ulong handle,
			[MarshalAs(UnmanagedType.U1)] bool bReturnChildren) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_SetReturnChildren(_ptr, handle, bReturnChildren);
		}

		public virtual bool ISteamUGC_SetReturnAdditionalPreviews(
			ulong handle,
			[MarshalAs(UnmanagedType.U1)] bool bReturnAdditionalPreviews) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_SetReturnAdditionalPreviews(_ptr, handle, bReturnAdditionalPreviews);
		}

		public virtual bool ISteamUGC_SetReturnTotalOnly(ulong handle,
			[MarshalAs(UnmanagedType.U1)] bool bReturnTotalOnly) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_SetReturnTotalOnly(_ptr, handle, bReturnTotalOnly);
		}

		public virtual bool ISteamUGC_SetReturnPlaytimeStats(ulong handle, uint unDays) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_SetReturnPlaytimeStats(_ptr, handle, unDays);
		}

		public virtual bool ISteamUGC_SetLanguage(ulong handle, string pchLanguage) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_SetLanguage(_ptr, handle, pchLanguage);
		}

		public virtual bool ISteamUGC_SetAllowCachedResponse(ulong handle, uint unMaxAgeSeconds) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_SetAllowCachedResponse(_ptr, handle, unMaxAgeSeconds);
		}

		public virtual bool ISteamUGC_SetCloudFileNameFilter(ulong handle, string pMatchCloudFileName) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_SetCloudFileNameFilter(_ptr, handle, pMatchCloudFileName);
		}

		public virtual bool ISteamUGC_SetMatchAnyTag(ulong handle, [MarshalAs(UnmanagedType.U1)] bool bMatchAnyTag) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_SetMatchAnyTag(_ptr, handle, bMatchAnyTag);
		}

		public virtual bool ISteamUGC_SetSearchText(ulong handle, string pSearchText) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_SetSearchText(_ptr, handle, pSearchText);
		}

		public virtual bool ISteamUGC_SetRankedByTrendDays(ulong handle, uint unDays) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_SetRankedByTrendDays(_ptr, handle, unDays);
		}

		public virtual bool ISteamUGC_AddRequiredKeyValueTag(
			ulong handle,
			string pKey,
			string pValue) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_AddRequiredKeyValueTag(_ptr, handle, pKey, pValue);
		}

		public virtual SteamAPICall_t ISteamUGC_RequestUGCDetails(
			ulong nPublishedFileID,
			uint unMaxAgeSeconds) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_RequestUGCDetails(_ptr, nPublishedFileID, unMaxAgeSeconds);
		}

		public virtual SteamAPICall_t ISteamUGC_CreateItem(
			uint nConsumerAppId,
			WorkshopFileType eFileType) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_CreateItem(_ptr, nConsumerAppId, eFileType);
		}

		public virtual UGCUpdateHandle_t ISteamUGC_StartItemUpdate(
			uint nConsumerAppId,
			ulong nPublishedFileID) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_StartItemUpdate(_ptr, nConsumerAppId, nPublishedFileID);
		}

		public virtual bool ISteamUGC_SetItemTitle(ulong handle, string pchTitle) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_SetItemTitle(_ptr, handle, pchTitle);
		}

		public virtual bool ISteamUGC_SetItemDescription(ulong handle, string pchDescription) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_SetItemDescription(_ptr, handle, pchDescription);
		}

		public virtual bool ISteamUGC_SetItemUpdateLanguage(ulong handle, string pchLanguage) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_SetItemUpdateLanguage(_ptr, handle, pchLanguage);
		}

		public virtual bool ISteamUGC_SetItemMetadata(ulong handle, string pchMetaData) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_SetItemMetadata(_ptr, handle, pchMetaData);
		}

		public virtual bool ISteamUGC_SetItemVisibility(
			ulong handle,
			RemoteStoragePublishedFileVisibility eVisibility) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_SetItemVisibility(_ptr, handle, eVisibility);
		}

		public virtual bool ISteamUGC_SetItemTags(
			ulong updateHandle,
			ref SteamParamStringArray_t pTags) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			var pTags1 = new SteamParamStringArray_t.PackSmall();
			var flag = Native.SteamAPI_ISteamUGC_SetItemTags(_ptr, updateHandle, ref pTags1);
			pTags = (SteamParamStringArray_t)pTags1;
			return flag;
		}

		public virtual bool ISteamUGC_SetItemContent(ulong handle, string pszContentFolder) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_SetItemContent(_ptr, handle, pszContentFolder);
		}

		public virtual bool ISteamUGC_SetItemPreview(ulong handle, string pszPreviewFile) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_SetItemPreview(_ptr, handle, pszPreviewFile);
		}

		public virtual bool ISteamUGC_RemoveItemKeyValueTags(ulong handle, string pchKey) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_RemoveItemKeyValueTags(_ptr, handle, pchKey);
		}

		public virtual bool ISteamUGC_AddItemKeyValueTag(
			ulong handle,
			string pchKey,
			string pchValue) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_AddItemKeyValueTag(_ptr, handle, pchKey, pchValue);
		}

		public virtual bool ISteamUGC_AddItemPreviewFile(
			ulong handle,
			string pszPreviewFile,
			ItemPreviewType type) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_AddItemPreviewFile(_ptr, handle, pszPreviewFile, type);
		}

		public virtual bool ISteamUGC_AddItemPreviewVideo(ulong handle, string pszVideoID) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_AddItemPreviewVideo(_ptr, handle, pszVideoID);
		}

		public virtual bool ISteamUGC_UpdateItemPreviewFile(
			ulong handle,
			uint index,
			string pszPreviewFile) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_UpdateItemPreviewFile(_ptr, handle, index, pszPreviewFile);
		}

		public virtual bool ISteamUGC_UpdateItemPreviewVideo(
			ulong handle,
			uint index,
			string pszVideoID) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_UpdateItemPreviewVideo(_ptr, handle, index, pszVideoID);
		}

		public virtual bool ISteamUGC_RemoveItemPreview(ulong handle, uint index) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_RemoveItemPreview(_ptr, handle, index);
		}

		public virtual SteamAPICall_t ISteamUGC_SubmitItemUpdate(ulong handle, string pchChangeNote) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_SubmitItemUpdate(_ptr, handle, pchChangeNote);
		}

		public virtual ItemUpdateStatus ISteamUGC_GetItemUpdateProgress(
			ulong handle,
			out ulong punBytesProcessed,
			out ulong punBytesTotal) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUGC_GetItemUpdateProgress(_ptr, handle, out punBytesProcessed,
					out punBytesTotal)
				: throw new Exception("ISteamUGC _ptr is null!");
		}

		public virtual SteamAPICall_t ISteamUGC_SetUserItemVote(ulong nPublishedFileID,
			[MarshalAs(UnmanagedType.U1)] bool bVoteUp) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_SetUserItemVote(_ptr, nPublishedFileID, bVoteUp);
		}

		public virtual SteamAPICall_t ISteamUGC_GetUserItemVote(ulong nPublishedFileID) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUGC_GetUserItemVote(_ptr, nPublishedFileID)
				: throw new Exception("ISteamUGC _ptr is null!");
		}

		public virtual SteamAPICall_t ISteamUGC_AddItemToFavorites(
			uint nAppId,
			ulong nPublishedFileID) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_AddItemToFavorites(_ptr, nAppId, nPublishedFileID);
		}

		public virtual SteamAPICall_t ISteamUGC_RemoveItemFromFavorites(
			uint nAppId,
			ulong nPublishedFileID) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_RemoveItemFromFavorites(_ptr, nAppId, nPublishedFileID);
		}

		public virtual SteamAPICall_t ISteamUGC_SubscribeItem(ulong nPublishedFileID) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUGC_SubscribeItem(_ptr, nPublishedFileID)
				: throw new Exception("ISteamUGC _ptr is null!");
		}

		public virtual SteamAPICall_t ISteamUGC_UnsubscribeItem(ulong nPublishedFileID) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUGC_UnsubscribeItem(_ptr, nPublishedFileID)
				: throw new Exception("ISteamUGC _ptr is null!");
		}

		public virtual uint ISteamUGC_GetNumSubscribedItems() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUGC_GetNumSubscribedItems(_ptr)
				: throw new Exception("ISteamUGC _ptr is null!");
		}

		public virtual uint ISteamUGC_GetSubscribedItems(IntPtr pvecPublishedFileID, uint cMaxEntries) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_GetSubscribedItems(_ptr, pvecPublishedFileID, cMaxEntries);
		}

		public virtual uint ISteamUGC_GetItemState(ulong nPublishedFileID) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUGC_GetItemState(_ptr, nPublishedFileID)
				: throw new Exception("ISteamUGC _ptr is null!");
		}

		public virtual bool ISteamUGC_GetItemInstallInfo(
			ulong nPublishedFileID,
			out ulong punSizeOnDisk,
			StringBuilder pchFolder,
			uint cchFolderSize,
			out uint punTimeStamp) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_GetItemInstallInfo(_ptr, nPublishedFileID, out punSizeOnDisk, pchFolder,
				cchFolderSize, out punTimeStamp);
		}

		public virtual bool ISteamUGC_GetItemDownloadInfo(
			ulong nPublishedFileID,
			out ulong punBytesDownloaded,
			out ulong punBytesTotal) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUGC_GetItemDownloadInfo(_ptr, nPublishedFileID, out punBytesDownloaded,
					out punBytesTotal)
				: throw new Exception("ISteamUGC _ptr is null!");
		}

		public virtual bool ISteamUGC_DownloadItem(ulong nPublishedFileID,
			[MarshalAs(UnmanagedType.U1)] bool bHighPriority) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_DownloadItem(_ptr, nPublishedFileID, bHighPriority);
		}

		public virtual bool ISteamUGC_BInitWorkshopForGameServer(
			uint unWorkshopDepotID,
			string pszFolder) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_BInitWorkshopForGameServer(_ptr, unWorkshopDepotID, pszFolder);
		}

		public virtual void ISteamUGC_SuspendDownloads([MarshalAs(UnmanagedType.U1)] bool bSuspend) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			Native.SteamAPI_ISteamUGC_SuspendDownloads(_ptr, bSuspend);
		}

		public virtual SteamAPICall_t ISteamUGC_StartPlaytimeTracking(
			IntPtr pvecPublishedFileID,
			uint unNumPublishedFileIDs) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_StartPlaytimeTracking(_ptr, pvecPublishedFileID, unNumPublishedFileIDs);
		}

		public virtual SteamAPICall_t ISteamUGC_StopPlaytimeTracking(
			IntPtr pvecPublishedFileID,
			uint unNumPublishedFileIDs) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_StopPlaytimeTracking(_ptr, pvecPublishedFileID, unNumPublishedFileIDs);
		}

		public virtual SteamAPICall_t ISteamUGC_StopPlaytimeTrackingForAllItems() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUGC_StopPlaytimeTrackingForAllItems(_ptr)
				: throw new Exception("ISteamUGC _ptr is null!");
		}

		public virtual SteamAPICall_t ISteamUGC_AddDependency(
			ulong nParentPublishedFileID,
			ulong nChildPublishedFileID) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_AddDependency(_ptr, nParentPublishedFileID, nChildPublishedFileID);
		}

		public virtual SteamAPICall_t ISteamUGC_RemoveDependency(
			ulong nParentPublishedFileID,
			ulong nChildPublishedFileID) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_RemoveDependency(_ptr, nParentPublishedFileID, nChildPublishedFileID);
		}

		public virtual uint ISteamAppList_GetNumInstalledApps() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamAppList_GetNumInstalledApps(_ptr)
				: throw new Exception("ISteamAppList _ptr is null!");
		}

		public virtual uint ISteamAppList_GetInstalledApps(IntPtr pvecAppID, uint unMaxAppIDs) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamAppList _ptr is null!");
			return Native.SteamAPI_ISteamAppList_GetInstalledApps(_ptr, pvecAppID, unMaxAppIDs);
		}

		public virtual int ISteamAppList_GetAppName(
			uint nAppID,
			StringBuilder pchName,
			int cchNameMax) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamAppList _ptr is null!");
			return Native.SteamAPI_ISteamAppList_GetAppName(_ptr, nAppID, pchName, cchNameMax);
		}

		public virtual int ISteamAppList_GetAppInstallDir(
			uint nAppID,
			StringBuilder pchDirectory,
			int cchNameMax) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamAppList _ptr is null!");
			return Native.SteamAPI_ISteamAppList_GetAppInstallDir(_ptr, nAppID, pchDirectory, cchNameMax);
		}

		public virtual int ISteamAppList_GetAppBuildId(uint nAppID) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamAppList_GetAppBuildId(_ptr, nAppID)
				: throw new Exception("ISteamAppList _ptr is null!");
		}

		public virtual void ISteamHTMLSurface_DestructISteamHTMLSurface() {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTMLSurface _ptr is null!");
			Native.SteamAPI_ISteamHTMLSurface_DestructISteamHTMLSurface(_ptr);
		}

		public virtual bool ISteamHTMLSurface_Init() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamHTMLSurface_Init(_ptr)
				: throw new Exception("ISteamHTMLSurface _ptr is null!");
		}

		public virtual bool ISteamHTMLSurface_Shutdown() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamHTMLSurface_Shutdown(_ptr)
				: throw new Exception("ISteamHTMLSurface _ptr is null!");
		}

		public virtual SteamAPICall_t ISteamHTMLSurface_CreateBrowser(
			string pchUserAgent,
			string pchUserCSS) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTMLSurface _ptr is null!");
			return Native.SteamAPI_ISteamHTMLSurface_CreateBrowser(_ptr, pchUserAgent, pchUserCSS);
		}

		public virtual void ISteamHTMLSurface_RemoveBrowser(uint unBrowserHandle) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTMLSurface _ptr is null!");
			Native.SteamAPI_ISteamHTMLSurface_RemoveBrowser(_ptr, unBrowserHandle);
		}

		public virtual void ISteamHTMLSurface_LoadURL(
			uint unBrowserHandle,
			string pchURL,
			string pchPostData) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTMLSurface _ptr is null!");
			Native.SteamAPI_ISteamHTMLSurface_LoadURL(_ptr, unBrowserHandle, pchURL, pchPostData);
		}

		public virtual void ISteamHTMLSurface_SetSize(
			uint unBrowserHandle,
			uint unWidth,
			uint unHeight) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTMLSurface _ptr is null!");
			Native.SteamAPI_ISteamHTMLSurface_SetSize(_ptr, unBrowserHandle, unWidth, unHeight);
		}

		public virtual void ISteamHTMLSurface_StopLoad(uint unBrowserHandle) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTMLSurface _ptr is null!");
			Native.SteamAPI_ISteamHTMLSurface_StopLoad(_ptr, unBrowserHandle);
		}

		public virtual void ISteamHTMLSurface_Reload(uint unBrowserHandle) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTMLSurface _ptr is null!");
			Native.SteamAPI_ISteamHTMLSurface_Reload(_ptr, unBrowserHandle);
		}

		public virtual void ISteamHTMLSurface_GoBack(uint unBrowserHandle) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTMLSurface _ptr is null!");
			Native.SteamAPI_ISteamHTMLSurface_GoBack(_ptr, unBrowserHandle);
		}

		public virtual void ISteamHTMLSurface_GoForward(uint unBrowserHandle) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTMLSurface _ptr is null!");
			Native.SteamAPI_ISteamHTMLSurface_GoForward(_ptr, unBrowserHandle);
		}

		public virtual void ISteamHTMLSurface_AddHeader(
			uint unBrowserHandle,
			string pchKey,
			string pchValue) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTMLSurface _ptr is null!");
			Native.SteamAPI_ISteamHTMLSurface_AddHeader(_ptr, unBrowserHandle, pchKey, pchValue);
		}

		public virtual void ISteamHTMLSurface_ExecuteJavascript(
			uint unBrowserHandle,
			string pchScript) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTMLSurface _ptr is null!");
			Native.SteamAPI_ISteamHTMLSurface_ExecuteJavascript(_ptr, unBrowserHandle, pchScript);
		}

		public virtual void ISteamHTMLSurface_MouseUp(
			uint unBrowserHandle,
			HTMLMouseButton eMouseButton) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTMLSurface _ptr is null!");
			Native.SteamAPI_ISteamHTMLSurface_MouseUp(_ptr, unBrowserHandle, eMouseButton);
		}

		public virtual void ISteamHTMLSurface_MouseDown(
			uint unBrowserHandle,
			HTMLMouseButton eMouseButton) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTMLSurface _ptr is null!");
			Native.SteamAPI_ISteamHTMLSurface_MouseDown(_ptr, unBrowserHandle, eMouseButton);
		}

		public virtual void ISteamHTMLSurface_MouseDoubleClick(
			uint unBrowserHandle,
			HTMLMouseButton eMouseButton) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTMLSurface _ptr is null!");
			Native.SteamAPI_ISteamHTMLSurface_MouseDoubleClick(_ptr, unBrowserHandle, eMouseButton);
		}

		public virtual void ISteamHTMLSurface_MouseMove(uint unBrowserHandle, int x, int y) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTMLSurface _ptr is null!");
			Native.SteamAPI_ISteamHTMLSurface_MouseMove(_ptr, unBrowserHandle, x, y);
		}

		public virtual void ISteamHTMLSurface_MouseWheel(uint unBrowserHandle, int nDelta) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTMLSurface _ptr is null!");
			Native.SteamAPI_ISteamHTMLSurface_MouseWheel(_ptr, unBrowserHandle, nDelta);
		}

		public virtual void ISteamHTMLSurface_KeyDown(
			uint unBrowserHandle,
			uint nNativeKeyCode,
			HTMLKeyModifiers eHTMLKeyModifiers) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTMLSurface _ptr is null!");
			Native.SteamAPI_ISteamHTMLSurface_KeyDown(_ptr, unBrowserHandle, nNativeKeyCode, eHTMLKeyModifiers);
		}

		public virtual void ISteamHTMLSurface_KeyUp(
			uint unBrowserHandle,
			uint nNativeKeyCode,
			HTMLKeyModifiers eHTMLKeyModifiers) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTMLSurface _ptr is null!");
			Native.SteamAPI_ISteamHTMLSurface_KeyUp(_ptr, unBrowserHandle, nNativeKeyCode, eHTMLKeyModifiers);
		}

		public virtual void ISteamHTMLSurface_KeyChar(
			uint unBrowserHandle,
			uint cUnicodeChar,
			HTMLKeyModifiers eHTMLKeyModifiers) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTMLSurface _ptr is null!");
			Native.SteamAPI_ISteamHTMLSurface_KeyChar(_ptr, unBrowserHandle, cUnicodeChar, eHTMLKeyModifiers);
		}

		public virtual void ISteamHTMLSurface_SetHorizontalScroll(
			uint unBrowserHandle,
			uint nAbsolutePixelScroll) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTMLSurface _ptr is null!");
			Native.SteamAPI_ISteamHTMLSurface_SetHorizontalScroll(_ptr, unBrowserHandle, nAbsolutePixelScroll);
		}

		public virtual void ISteamHTMLSurface_SetVerticalScroll(
			uint unBrowserHandle,
			uint nAbsolutePixelScroll) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTMLSurface _ptr is null!");
			Native.SteamAPI_ISteamHTMLSurface_SetVerticalScroll(_ptr, unBrowserHandle, nAbsolutePixelScroll);
		}

		public virtual void ISteamHTMLSurface_SetKeyFocus(uint unBrowserHandle,
			[MarshalAs(UnmanagedType.U1)] bool bHasKeyFocus) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTMLSurface _ptr is null!");
			Native.SteamAPI_ISteamHTMLSurface_SetKeyFocus(_ptr, unBrowserHandle, bHasKeyFocus);
		}

		public virtual void ISteamHTMLSurface_ViewSource(uint unBrowserHandle) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTMLSurface _ptr is null!");
			Native.SteamAPI_ISteamHTMLSurface_ViewSource(_ptr, unBrowserHandle);
		}

		public virtual void ISteamHTMLSurface_CopyToClipboard(uint unBrowserHandle) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTMLSurface _ptr is null!");
			Native.SteamAPI_ISteamHTMLSurface_CopyToClipboard(_ptr, unBrowserHandle);
		}

		public virtual void ISteamHTMLSurface_PasteFromClipboard(uint unBrowserHandle) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTMLSurface _ptr is null!");
			Native.SteamAPI_ISteamHTMLSurface_PasteFromClipboard(_ptr, unBrowserHandle);
		}

		public virtual void ISteamHTMLSurface_Find(
			uint unBrowserHandle,
			string pchSearchStr,
			[MarshalAs(UnmanagedType.U1)] bool bCurrentlyInFind,
			[MarshalAs(UnmanagedType.U1)] bool bReverse) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTMLSurface _ptr is null!");
			Native.SteamAPI_ISteamHTMLSurface_Find(_ptr, unBrowserHandle, pchSearchStr, bCurrentlyInFind, bReverse);
		}

		public virtual void ISteamHTMLSurface_StopFind(uint unBrowserHandle) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTMLSurface _ptr is null!");
			Native.SteamAPI_ISteamHTMLSurface_StopFind(_ptr, unBrowserHandle);
		}

		public virtual void ISteamHTMLSurface_GetLinkAtPosition(uint unBrowserHandle, int x, int y) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTMLSurface _ptr is null!");
			Native.SteamAPI_ISteamHTMLSurface_GetLinkAtPosition(_ptr, unBrowserHandle, x, y);
		}

		public virtual void ISteamHTMLSurface_SetCookie(
			string pchHostname,
			string pchKey,
			string pchValue,
			string pchPath,
			uint nExpires,
			[MarshalAs(UnmanagedType.U1)] bool bSecure,
			[MarshalAs(UnmanagedType.U1)] bool bHTTPOnly) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTMLSurface _ptr is null!");
			Native.SteamAPI_ISteamHTMLSurface_SetCookie(_ptr, pchHostname, pchKey, pchValue, pchPath, nExpires, bSecure,
				bHTTPOnly);
		}

		public virtual void ISteamHTMLSurface_SetPageScaleFactor(
			uint unBrowserHandle,
			float flZoom,
			int nPointX,
			int nPointY) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTMLSurface _ptr is null!");
			Native.SteamAPI_ISteamHTMLSurface_SetPageScaleFactor(_ptr, unBrowserHandle, flZoom, nPointX, nPointY);
		}

		public virtual void ISteamHTMLSurface_SetBackgroundMode(
			uint unBrowserHandle,
			[MarshalAs(UnmanagedType.U1)] bool bBackgroundMode) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTMLSurface _ptr is null!");
			Native.SteamAPI_ISteamHTMLSurface_SetBackgroundMode(_ptr, unBrowserHandle, bBackgroundMode);
		}

		public virtual void ISteamHTMLSurface_AllowStartRequest(uint unBrowserHandle,
			[MarshalAs(UnmanagedType.U1)] bool bAllowed) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTMLSurface _ptr is null!");
			Native.SteamAPI_ISteamHTMLSurface_AllowStartRequest(_ptr, unBrowserHandle, bAllowed);
		}

		public virtual void ISteamHTMLSurface_JSDialogResponse(uint unBrowserHandle,
			[MarshalAs(UnmanagedType.U1)] bool bResult) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTMLSurface _ptr is null!");
			Native.SteamAPI_ISteamHTMLSurface_JSDialogResponse(_ptr, unBrowserHandle, bResult);
		}

		public virtual Result ISteamInventory_GetResultStatus(int resultHandle) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamInventory_GetResultStatus(_ptr, resultHandle)
				: throw new Exception("ISteamInventory _ptr is null!");
		}

		public virtual bool ISteamInventory_GetResultItems(
			int resultHandle,
			IntPtr pOutItemsArray,
			out uint punOutItemsArraySize) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamInventory _ptr is null!");
			return Native.SteamAPI_ISteamInventory_GetResultItems(_ptr, resultHandle, pOutItemsArray,
				out punOutItemsArraySize);
		}

		public virtual bool ISteamInventory_GetResultItemProperty(
			int resultHandle,
			uint unItemIndex,
			string pchPropertyName,
			StringBuilder pchValueBuffer,
			out uint punValueBufferSizeOut) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamInventory _ptr is null!");
			return Native.SteamAPI_ISteamInventory_GetResultItemProperty(_ptr, resultHandle, unItemIndex,
				pchPropertyName, pchValueBuffer, out punValueBufferSizeOut);
		}

		public virtual uint ISteamInventory_GetResultTimestamp(int resultHandle) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamInventory_GetResultTimestamp(_ptr, resultHandle)
				: throw new Exception("ISteamInventory _ptr is null!");
		}

		public virtual bool ISteamInventory_CheckResultSteamID(
			int resultHandle,
			ulong steamIDExpected) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamInventory _ptr is null!");
			return Native.SteamAPI_ISteamInventory_CheckResultSteamID(_ptr, resultHandle, steamIDExpected);
		}

		public virtual void ISteamInventory_DestroyResult(int resultHandle) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamInventory _ptr is null!");
			Native.SteamAPI_ISteamInventory_DestroyResult(_ptr, resultHandle);
		}

		public virtual bool ISteamInventory_GetAllItems(ref int pResultHandle) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamInventory_GetAllItems(_ptr, ref pResultHandle)
				: throw new Exception("ISteamInventory _ptr is null!");
		}

		public virtual bool ISteamInventory_GetItemsByID(
			ref int pResultHandle,
			ulong[] pInstanceIDs,
			uint unCountInstanceIDs) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamInventory _ptr is null!");
			return Native.SteamAPI_ISteamInventory_GetItemsByID(_ptr, ref pResultHandle, pInstanceIDs,
				unCountInstanceIDs);
		}

		public virtual bool ISteamInventory_SerializeResult(
			int resultHandle,
			IntPtr pOutBuffer,
			out uint punOutBufferSize) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamInventory _ptr is null!");
			return Native.SteamAPI_ISteamInventory_SerializeResult(_ptr, resultHandle, pOutBuffer,
				out punOutBufferSize);
		}

		public virtual bool ISteamInventory_DeserializeResult(
			ref int pOutResultHandle,
			IntPtr pBuffer,
			uint unBufferSize,
			[MarshalAs(UnmanagedType.U1)] bool bRESERVED_MUST_BE_FALSE) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamInventory _ptr is null!");
			return Native.SteamAPI_ISteamInventory_DeserializeResult(_ptr, ref pOutResultHandle, pBuffer, unBufferSize,
				bRESERVED_MUST_BE_FALSE);
		}

		public virtual bool ISteamInventory_GenerateItems(
			ref int pResultHandle,
			int[] pArrayItemDefs,
			uint[] punArrayQuantity,
			uint unArrayLength) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamInventory _ptr is null!");
			return Native.SteamAPI_ISteamInventory_GenerateItems(_ptr, ref pResultHandle, pArrayItemDefs,
				punArrayQuantity, unArrayLength);
		}

		public virtual bool ISteamInventory_GrantPromoItems(ref int pResultHandle) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamInventory_GrantPromoItems(_ptr, ref pResultHandle)
				: throw new Exception("ISteamInventory _ptr is null!");
		}

		public virtual bool ISteamInventory_AddPromoItem(ref int pResultHandle, int itemDef) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamInventory _ptr is null!");
			return Native.SteamAPI_ISteamInventory_AddPromoItem(_ptr, ref pResultHandle, itemDef);
		}

		public virtual bool ISteamInventory_AddPromoItems(
			ref int pResultHandle,
			int[] pArrayItemDefs,
			uint unArrayLength) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamInventory _ptr is null!");
			return Native.SteamAPI_ISteamInventory_AddPromoItems(_ptr, ref pResultHandle, pArrayItemDefs,
				unArrayLength);
		}

		public virtual bool ISteamInventory_ConsumeItem(
			ref int pResultHandle,
			ulong itemConsume,
			uint unQuantity) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamInventory _ptr is null!");
			return Native.SteamAPI_ISteamInventory_ConsumeItem(_ptr, ref pResultHandle, itemConsume, unQuantity);
		}

		public virtual bool ISteamInventory_ExchangeItems(
			ref int pResultHandle,
			int[] pArrayGenerate,
			uint[] punArrayGenerateQuantity,
			uint unArrayGenerateLength,
			ulong[] pArrayDestroy,
			uint[] punArrayDestroyQuantity,
			uint unArrayDestroyLength) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamInventory _ptr is null!");
			return Native.SteamAPI_ISteamInventory_ExchangeItems(_ptr, ref pResultHandle, pArrayGenerate,
				punArrayGenerateQuantity, unArrayGenerateLength, pArrayDestroy, punArrayDestroyQuantity,
				unArrayDestroyLength);
		}

		public virtual bool ISteamInventory_TransferItemQuantity(
			ref int pResultHandle,
			ulong itemIdSource,
			uint unQuantity,
			ulong itemIdDest) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamInventory _ptr is null!");
			return Native.SteamAPI_ISteamInventory_TransferItemQuantity(_ptr, ref pResultHandle, itemIdSource,
				unQuantity, itemIdDest);
		}

		public virtual void ISteamInventory_SendItemDropHeartbeat() {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamInventory _ptr is null!");
			Native.SteamAPI_ISteamInventory_SendItemDropHeartbeat(_ptr);
		}

		public virtual bool ISteamInventory_TriggerItemDrop(
			ref int pResultHandle,
			int dropListDefinition) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamInventory _ptr is null!");
			return Native.SteamAPI_ISteamInventory_TriggerItemDrop(_ptr, ref pResultHandle, dropListDefinition);
		}

		public virtual bool ISteamInventory_TradeItems(
			ref int pResultHandle,
			ulong steamIDTradePartner,
			ulong[] pArrayGive,
			uint[] pArrayGiveQuantity,
			uint nArrayGiveLength,
			ulong[] pArrayGet,
			uint[] pArrayGetQuantity,
			uint nArrayGetLength) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamInventory _ptr is null!");
			return Native.SteamAPI_ISteamInventory_TradeItems(_ptr, ref pResultHandle, steamIDTradePartner, pArrayGive,
				pArrayGiveQuantity, nArrayGiveLength, pArrayGet, pArrayGetQuantity, nArrayGetLength);
		}

		public virtual bool ISteamInventory_LoadItemDefinitions() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamInventory_LoadItemDefinitions(_ptr)
				: throw new Exception("ISteamInventory _ptr is null!");
		}

		public virtual bool ISteamInventory_GetItemDefinitionIDs(
			IntPtr pItemDefIDs,
			out uint punItemDefIDsArraySize) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamInventory_GetItemDefinitionIDs(_ptr, pItemDefIDs, out punItemDefIDsArraySize)
				: throw new Exception("ISteamInventory _ptr is null!");
		}

		public virtual bool ISteamInventory_GetItemDefinitionProperty(
			int iDefinition,
			string pchPropertyName,
			StringBuilder pchValueBuffer,
			out uint punValueBufferSizeOut) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamInventory _ptr is null!");
			return Native.SteamAPI_ISteamInventory_GetItemDefinitionProperty(_ptr, iDefinition, pchPropertyName,
				pchValueBuffer, out punValueBufferSizeOut);
		}

		public virtual SteamAPICall_t ISteamInventory_RequestEligiblePromoItemDefinitionsIDs(
			ulong steamID) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamInventory_RequestEligiblePromoItemDefinitionsIDs(_ptr, steamID)
				: throw new Exception("ISteamInventory _ptr is null!");
		}

		public virtual bool ISteamInventory_GetEligiblePromoItemDefinitionIDs(
			ulong steamID,
			IntPtr pItemDefIDs,
			out uint punItemDefIDsArraySize) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamInventory _ptr is null!");
			return Native.SteamAPI_ISteamInventory_GetEligiblePromoItemDefinitionIDs(_ptr, steamID, pItemDefIDs,
				out punItemDefIDsArraySize);
		}

		public virtual void ISteamVideo_GetVideoURL(uint unVideoAppID) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamVideo _ptr is null!");
			Native.SteamAPI_ISteamVideo_GetVideoURL(_ptr, unVideoAppID);
		}

		public virtual bool ISteamVideo_IsBroadcasting(IntPtr pnNumViewers) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamVideo_IsBroadcasting(_ptr, pnNumViewers)
				: throw new Exception("ISteamVideo _ptr is null!");
		}

		public virtual void ISteamVideo_GetOPFSettings(uint unVideoAppID) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamVideo _ptr is null!");
			Native.SteamAPI_ISteamVideo_GetOPFSettings(_ptr, unVideoAppID);
		}

		public virtual bool ISteamVideo_GetOPFStringForApp(
			uint unVideoAppID,
			StringBuilder pchBuffer,
			out int pnBufferSize) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamVideo _ptr is null!");
			return Native.SteamAPI_ISteamVideo_GetOPFStringForApp(_ptr, unVideoAppID, pchBuffer, out pnBufferSize);
		}

		public virtual bool ISteamGameServer_InitGameServer(
			uint unIP,
			ushort usGamePort,
			ushort usQueryPort,
			uint unFlags,
			uint nGameAppId,
			string pchVersionString) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServer _ptr is null!");
			return Native.SteamAPI_ISteamGameServer_InitGameServer(_ptr, unIP, usGamePort, usQueryPort, unFlags,
				nGameAppId, pchVersionString);
		}

		public virtual void ISteamGameServer_SetProduct(string pszProduct) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServer _ptr is null!");
			Native.SteamAPI_ISteamGameServer_SetProduct(_ptr, pszProduct);
		}

		public virtual void ISteamGameServer_SetGameDescription(string pszGameDescription) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServer _ptr is null!");
			Native.SteamAPI_ISteamGameServer_SetGameDescription(_ptr, pszGameDescription);
		}

		public virtual void ISteamGameServer_SetModDir(string pszModDir) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServer _ptr is null!");
			Native.SteamAPI_ISteamGameServer_SetModDir(_ptr, pszModDir);
		}

		public virtual void ISteamGameServer_SetDedicatedServer([MarshalAs(UnmanagedType.U1)] bool bDedicated) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServer _ptr is null!");
			Native.SteamAPI_ISteamGameServer_SetDedicatedServer(_ptr, bDedicated);
		}

		public virtual void ISteamGameServer_LogOn(string pszToken) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServer _ptr is null!");
			Native.SteamAPI_ISteamGameServer_LogOn(_ptr, pszToken);
		}

		public virtual void ISteamGameServer_LogOnAnonymous() {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServer _ptr is null!");
			Native.SteamAPI_ISteamGameServer_LogOnAnonymous(_ptr);
		}

		public virtual void ISteamGameServer_LogOff() {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServer _ptr is null!");
			Native.SteamAPI_ISteamGameServer_LogOff(_ptr);
		}

		public virtual bool ISteamGameServer_BLoggedOn() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamGameServer_BLoggedOn(_ptr)
				: throw new Exception("ISteamGameServer _ptr is null!");
		}

		public virtual bool ISteamGameServer_BSecure() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamGameServer_BSecure(_ptr)
				: throw new Exception("ISteamGameServer _ptr is null!");
		}

		public virtual CSteamID ISteamGameServer_GetSteamID() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamGameServer_GetSteamID(_ptr)
				: throw new Exception("ISteamGameServer _ptr is null!");
		}

		public virtual bool ISteamGameServer_WasRestartRequested() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamGameServer_WasRestartRequested(_ptr)
				: throw new Exception("ISteamGameServer _ptr is null!");
		}

		public virtual void ISteamGameServer_SetMaxPlayerCount(int cPlayersMax) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServer _ptr is null!");
			Native.SteamAPI_ISteamGameServer_SetMaxPlayerCount(_ptr, cPlayersMax);
		}

		public virtual void ISteamGameServer_SetBotPlayerCount(int cBotplayers) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServer _ptr is null!");
			Native.SteamAPI_ISteamGameServer_SetBotPlayerCount(_ptr, cBotplayers);
		}

		public virtual void ISteamGameServer_SetServerName(string pszServerName) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServer _ptr is null!");
			Native.SteamAPI_ISteamGameServer_SetServerName(_ptr, pszServerName);
		}

		public virtual void ISteamGameServer_SetMapName(string pszMapName) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServer _ptr is null!");
			Native.SteamAPI_ISteamGameServer_SetMapName(_ptr, pszMapName);
		}

		public virtual void
			ISteamGameServer_SetPasswordProtected([MarshalAs(UnmanagedType.U1)] bool bPasswordProtected) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServer _ptr is null!");
			Native.SteamAPI_ISteamGameServer_SetPasswordProtected(_ptr, bPasswordProtected);
		}

		public virtual void ISteamGameServer_SetSpectatorPort(ushort unSpectatorPort) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServer _ptr is null!");
			Native.SteamAPI_ISteamGameServer_SetSpectatorPort(_ptr, unSpectatorPort);
		}

		public virtual void ISteamGameServer_SetSpectatorServerName(string pszSpectatorServerName) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServer _ptr is null!");
			Native.SteamAPI_ISteamGameServer_SetSpectatorServerName(_ptr, pszSpectatorServerName);
		}

		public virtual void ISteamGameServer_ClearAllKeyValues() {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServer _ptr is null!");
			Native.SteamAPI_ISteamGameServer_ClearAllKeyValues(_ptr);
		}

		public virtual void ISteamGameServer_SetKeyValue(string pKey, string pValue) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServer _ptr is null!");
			Native.SteamAPI_ISteamGameServer_SetKeyValue(_ptr, pKey, pValue);
		}

		public virtual void ISteamGameServer_SetGameTags(string pchGameTags) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServer _ptr is null!");
			Native.SteamAPI_ISteamGameServer_SetGameTags(_ptr, pchGameTags);
		}

		public virtual void ISteamGameServer_SetGameData(string pchGameData) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServer _ptr is null!");
			Native.SteamAPI_ISteamGameServer_SetGameData(_ptr, pchGameData);
		}

		public virtual void ISteamGameServer_SetRegion(string pszRegion) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServer _ptr is null!");
			Native.SteamAPI_ISteamGameServer_SetRegion(_ptr, pszRegion);
		}

		public virtual bool ISteamGameServer_SendUserConnectAndAuthenticate(
			uint unIPClient,
			IntPtr pvAuthBlob,
			uint cubAuthBlobSize,
			out ulong pSteamIDUser) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServer _ptr is null!");
			return Native.SteamAPI_ISteamGameServer_SendUserConnectAndAuthenticate(_ptr, unIPClient, pvAuthBlob,
				cubAuthBlobSize, out pSteamIDUser);
		}

		public virtual CSteamID ISteamGameServer_CreateUnauthenticatedUserConnection() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamGameServer_CreateUnauthenticatedUserConnection(_ptr)
				: throw new Exception("ISteamGameServer _ptr is null!");
		}

		public virtual void ISteamGameServer_SendUserDisconnect(ulong steamIDUser) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServer _ptr is null!");
			Native.SteamAPI_ISteamGameServer_SendUserDisconnect(_ptr, steamIDUser);
		}

		public virtual bool ISteamGameServer_BUpdateUserData(
			ulong steamIDUser,
			string pchPlayerName,
			uint uScore) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServer _ptr is null!");
			return Native.SteamAPI_ISteamGameServer_BUpdateUserData(_ptr, steamIDUser, pchPlayerName, uScore);
		}

		public virtual HAuthTicket ISteamGameServer_GetAuthSessionTicket(
			IntPtr pTicket,
			int cbMaxTicket,
			out uint pcbTicket) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServer _ptr is null!");
			return Native.SteamAPI_ISteamGameServer_GetAuthSessionTicket(_ptr, pTicket, cbMaxTicket, out pcbTicket);
		}

		public virtual BeginAuthSessionResult ISteamGameServer_BeginAuthSession(
			IntPtr pAuthTicket,
			int cbAuthTicket,
			ulong steamID) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServer _ptr is null!");
			return Native.SteamAPI_ISteamGameServer_BeginAuthSession(_ptr, pAuthTicket, cbAuthTicket, steamID);
		}

		public virtual void ISteamGameServer_EndAuthSession(ulong steamID) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServer _ptr is null!");
			Native.SteamAPI_ISteamGameServer_EndAuthSession(_ptr, steamID);
		}

		public virtual void ISteamGameServer_CancelAuthTicket(uint hAuthTicket) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServer _ptr is null!");
			Native.SteamAPI_ISteamGameServer_CancelAuthTicket(_ptr, hAuthTicket);
		}

		public virtual UserHasLicenseForAppResult ISteamGameServer_UserHasLicenseForApp(
			ulong steamID,
			uint appID) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServer _ptr is null!");
			return Native.SteamAPI_ISteamGameServer_UserHasLicenseForApp(_ptr, steamID, appID);
		}

		public virtual bool ISteamGameServer_RequestUserGroupStatus(
			ulong steamIDUser,
			ulong steamIDGroup) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServer _ptr is null!");
			return Native.SteamAPI_ISteamGameServer_RequestUserGroupStatus(_ptr, steamIDUser, steamIDGroup);
		}

		public virtual void ISteamGameServer_GetGameplayStats() {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServer _ptr is null!");
			Native.SteamAPI_ISteamGameServer_GetGameplayStats(_ptr);
		}

		public virtual SteamAPICall_t ISteamGameServer_GetServerReputation() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamGameServer_GetServerReputation(_ptr)
				: throw new Exception("ISteamGameServer _ptr is null!");
		}

		public virtual uint ISteamGameServer_GetPublicIP() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamGameServer_GetPublicIP(_ptr)
				: throw new Exception("ISteamGameServer _ptr is null!");
		}

		public virtual bool ISteamGameServer_HandleIncomingPacket(
			IntPtr pData,
			int cbData,
			uint srcIP,
			ushort srcPort) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServer _ptr is null!");
			return Native.SteamAPI_ISteamGameServer_HandleIncomingPacket(_ptr, pData, cbData, srcIP, srcPort);
		}

		public virtual int ISteamGameServer_GetNextOutgoingPacket(
			IntPtr pOut,
			int cbMaxOut,
			out uint pNetAdr,
			out ushort pPort) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServer _ptr is null!");
			return Native.SteamAPI_ISteamGameServer_GetNextOutgoingPacket(_ptr, pOut, cbMaxOut, out pNetAdr, out pPort);
		}

		public virtual void ISteamGameServer_EnableHeartbeats([MarshalAs(UnmanagedType.U1)] bool bActive) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServer _ptr is null!");
			Native.SteamAPI_ISteamGameServer_EnableHeartbeats(_ptr, bActive);
		}

		public virtual void ISteamGameServer_SetHeartbeatInterval(int iHeartbeatInterval) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServer _ptr is null!");
			Native.SteamAPI_ISteamGameServer_SetHeartbeatInterval(_ptr, iHeartbeatInterval);
		}

		public virtual void ISteamGameServer_ForceHeartbeat() {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServer _ptr is null!");
			Native.SteamAPI_ISteamGameServer_ForceHeartbeat(_ptr);
		}

		public virtual SteamAPICall_t ISteamGameServer_AssociateWithClan(ulong steamIDClan) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamGameServer_AssociateWithClan(_ptr, steamIDClan)
				: throw new Exception("ISteamGameServer _ptr is null!");
		}

		public virtual SteamAPICall_t ISteamGameServer_ComputeNewPlayerCompatibility(
			ulong steamIDNewPlayer) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamGameServer_ComputeNewPlayerCompatibility(_ptr, steamIDNewPlayer)
				: throw new Exception("ISteamGameServer _ptr is null!");
		}

		public virtual SteamAPICall_t ISteamGameServerStats_RequestUserStats(ulong steamIDUser) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamGameServerStats_RequestUserStats(_ptr, steamIDUser)
				: throw new Exception("ISteamGameServerStats _ptr is null!");
		}

		public virtual bool ISteamGameServerStats_GetUserStat(
			ulong steamIDUser,
			string pchName,
			out int pData) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServerStats _ptr is null!");
			return Native.SteamAPI_ISteamGameServerStats_GetUserStat(_ptr, steamIDUser, pchName, out pData);
		}

		public virtual bool ISteamGameServerStats_GetUserStat0(
			ulong steamIDUser,
			string pchName,
			out float pData) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServerStats _ptr is null!");
			return Native.SteamAPI_ISteamGameServerStats_GetUserStat0(_ptr, steamIDUser, pchName, out pData);
		}

		public virtual bool ISteamGameServerStats_GetUserAchievement(
			ulong steamIDUser,
			string pchName,
			[MarshalAs(UnmanagedType.U1)] ref bool pbAchieved) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServerStats _ptr is null!");
			return Native.SteamAPI_ISteamGameServerStats_GetUserAchievement(_ptr, steamIDUser, pchName, ref pbAchieved);
		}

		public virtual bool ISteamGameServerStats_SetUserStat(
			ulong steamIDUser,
			string pchName,
			int nData) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServerStats _ptr is null!");
			return Native.SteamAPI_ISteamGameServerStats_SetUserStat(_ptr, steamIDUser, pchName, nData);
		}

		public virtual bool ISteamGameServerStats_SetUserStat0(
			ulong steamIDUser,
			string pchName,
			float fData) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServerStats _ptr is null!");
			return Native.SteamAPI_ISteamGameServerStats_SetUserStat0(_ptr, steamIDUser, pchName, fData);
		}

		public virtual bool ISteamGameServerStats_UpdateUserAvgRateStat(
			ulong steamIDUser,
			string pchName,
			float flCountThisSession,
			double dSessionLength) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServerStats _ptr is null!");
			return Native.SteamAPI_ISteamGameServerStats_UpdateUserAvgRateStat(_ptr, steamIDUser, pchName,
				flCountThisSession, dSessionLength);
		}

		public virtual bool ISteamGameServerStats_SetUserAchievement(
			ulong steamIDUser,
			string pchName) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServerStats _ptr is null!");
			return Native.SteamAPI_ISteamGameServerStats_SetUserAchievement(_ptr, steamIDUser, pchName);
		}

		public virtual bool ISteamGameServerStats_ClearUserAchievement(
			ulong steamIDUser,
			string pchName) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServerStats _ptr is null!");
			return Native.SteamAPI_ISteamGameServerStats_ClearUserAchievement(_ptr, steamIDUser, pchName);
		}

		public virtual SteamAPICall_t ISteamGameServerStats_StoreUserStats(ulong steamIDUser) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamGameServerStats_StoreUserStats(_ptr, steamIDUser)
				: throw new Exception("ISteamGameServerStats _ptr is null!");
		}

		public virtual bool SteamApi_SteamAPI_Init() {
			return Native.SteamAPI_Init();
		}

		public virtual void SteamApi_SteamAPI_RunCallbacks() {
			Native.SteamAPI_RunCallbacks();
		}

		public virtual void SteamApi_SteamGameServer_RunCallbacks() {
			Native.SteamGameServer_RunCallbacks();
		}

		public virtual void SteamApi_SteamAPI_RegisterCallback(IntPtr pCallback, int callback) {
			Native.SteamAPI_RegisterCallback(pCallback, callback);
		}

		public virtual void SteamApi_SteamAPI_UnregisterCallback(IntPtr pCallback) {
			Native.SteamAPI_UnregisterCallback(pCallback);
		}

		public virtual void SteamApi_SteamAPI_RegisterCallResult(IntPtr pCallback, ulong callback) {
			Native.SteamAPI_RegisterCallResult(pCallback, callback);
		}

		public virtual void SteamApi_SteamAPI_UnregisterCallResult(IntPtr pCallback, ulong callback) {
			Native.SteamAPI_UnregisterCallResult(pCallback, callback);
		}

		public virtual bool SteamApi_SteamInternal_GameServer_Init(
			uint unIP,
			ushort usPort,
			ushort usGamePort,
			ushort usQueryPort,
			int eServerMode,
			string pchVersionString) {
			return Native.SteamInternal_GameServer_Init(unIP, usPort, usGamePort, usQueryPort, eServerMode,
				pchVersionString);
		}

		public virtual void SteamApi_SteamAPI_Shutdown() {
			Native.SteamAPI_Shutdown();
		}

		public virtual void SteamApi_SteamGameServer_Shutdown() {
			Native.SteamGameServer_Shutdown();
		}

		public virtual HSteamUser SteamApi_SteamAPI_GetHSteamUser() {
			return Native.SteamAPI_GetHSteamUser();
		}

		public virtual HSteamPipe SteamApi_SteamAPI_GetHSteamPipe() {
			return Native.SteamAPI_GetHSteamPipe();
		}

		public virtual HSteamUser SteamApi_SteamGameServer_GetHSteamUser() {
			return Native.SteamGameServer_GetHSteamUser();
		}

		public virtual HSteamPipe SteamApi_SteamGameServer_GetHSteamPipe() {
			return Native.SteamGameServer_GetHSteamPipe();
		}

		public virtual IntPtr SteamApi_SteamInternal_CreateInterface(string version) {
			return Native.SteamInternal_CreateInterface(version);
		}

		public virtual bool SteamApi_SteamAPI_RestartAppIfNecessary(uint unOwnAppID) {
			return Native.SteamAPI_RestartAppIfNecessary(unOwnAppID);
		}

		internal static class Native {
			[DllImport("libsteam_api.dylib")]
			internal static extern HSteamPipe SteamAPI_ISteamClient_CreateSteamPipe(IntPtr ISteamClient);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamClient_BReleaseSteamPipe(
				IntPtr ISteamClient,
				int hSteamPipe);

			[DllImport("libsteam_api.dylib")]
			internal static extern HSteamUser SteamAPI_ISteamClient_ConnectToGlobalUser(
				IntPtr ISteamClient,
				int hSteamPipe);

			[DllImport("libsteam_api.dylib")]
			internal static extern HSteamUser SteamAPI_ISteamClient_CreateLocalUser(
				IntPtr ISteamClient,
				out int phSteamPipe,
				AccountType eAccountType);

			[DllImport("libsteam_api.dylib")]
			internal static extern void SteamAPI_ISteamClient_ReleaseUser(
				IntPtr ISteamClient,
				int hSteamPipe,
				int hUser);

			[DllImport("libsteam_api.dylib")]
			internal static extern IntPtr SteamAPI_ISteamClient_GetISteamUser(
				IntPtr ISteamClient,
				int hSteamUser,
				int hSteamPipe,
				string pchVersion);

			[DllImport("libsteam_api.dylib")]
			internal static extern IntPtr SteamAPI_ISteamClient_GetISteamGameServer(
				IntPtr ISteamClient,
				int hSteamUser,
				int hSteamPipe,
				string pchVersion);

			[DllImport("libsteam_api.dylib")]
			internal static extern void SteamAPI_ISteamClient_SetLocalIPBinding(
				IntPtr ISteamClient,
				uint unIP,
				ushort usPort);

			[DllImport("libsteam_api.dylib")]
			internal static extern IntPtr SteamAPI_ISteamClient_GetISteamFriends(
				IntPtr ISteamClient,
				int hSteamUser,
				int hSteamPipe,
				string pchVersion);

			[DllImport("libsteam_api.dylib")]
			internal static extern IntPtr SteamAPI_ISteamClient_GetISteamUtils(
				IntPtr ISteamClient,
				int hSteamPipe,
				string pchVersion);

			[DllImport("libsteam_api.dylib")]
			internal static extern IntPtr SteamAPI_ISteamClient_GetISteamMatchmaking(
				IntPtr ISteamClient,
				int hSteamUser,
				int hSteamPipe,
				string pchVersion);

			[DllImport("libsteam_api.dylib")]
			internal static extern IntPtr SteamAPI_ISteamClient_GetISteamMatchmakingServers(
				IntPtr ISteamClient,
				int hSteamUser,
				int hSteamPipe,
				string pchVersion);

			[DllImport("libsteam_api.dylib")]
			internal static extern IntPtr SteamAPI_ISteamClient_GetISteamGenericInterface(
				IntPtr ISteamClient,
				int hSteamUser,
				int hSteamPipe,
				string pchVersion);

			[DllImport("libsteam_api.dylib")]
			internal static extern IntPtr SteamAPI_ISteamClient_GetISteamUserStats(
				IntPtr ISteamClient,
				int hSteamUser,
				int hSteamPipe,
				string pchVersion);

			[DllImport("libsteam_api.dylib")]
			internal static extern IntPtr SteamAPI_ISteamClient_GetISteamGameServerStats(
				IntPtr ISteamClient,
				int hSteamuser,
				int hSteamPipe,
				string pchVersion);

			[DllImport("libsteam_api.dylib")]
			internal static extern IntPtr SteamAPI_ISteamClient_GetISteamApps(
				IntPtr ISteamClient,
				int hSteamUser,
				int hSteamPipe,
				string pchVersion);

			[DllImport("libsteam_api.dylib")]
			internal static extern IntPtr SteamAPI_ISteamClient_GetISteamNetworking(
				IntPtr ISteamClient,
				int hSteamUser,
				int hSteamPipe,
				string pchVersion);

			[DllImport("libsteam_api.dylib")]
			internal static extern IntPtr SteamAPI_ISteamClient_GetISteamRemoteStorage(
				IntPtr ISteamClient,
				int hSteamuser,
				int hSteamPipe,
				string pchVersion);

			[DllImport("libsteam_api.dylib")]
			internal static extern IntPtr SteamAPI_ISteamClient_GetISteamScreenshots(
				IntPtr ISteamClient,
				int hSteamuser,
				int hSteamPipe,
				string pchVersion);

			[DllImport("libsteam_api.dylib")]
			internal static extern uint SteamAPI_ISteamClient_GetIPCCallCount(IntPtr ISteamClient);

			[DllImport("libsteam_api.dylib")]
			internal static extern void SteamAPI_ISteamClient_SetWarningMessageHook(
				IntPtr ISteamClient,
				IntPtr pFunction);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamClient_BShutdownIfAllPipesClosed(
				IntPtr ISteamClient);

			[DllImport("libsteam_api.dylib")]
			internal static extern IntPtr SteamAPI_ISteamClient_GetISteamHTTP(
				IntPtr ISteamClient,
				int hSteamuser,
				int hSteamPipe,
				string pchVersion);

			[DllImport("libsteam_api.dylib")]
			internal static extern IntPtr SteamAPI_ISteamClient_GetISteamUnifiedMessages(
				IntPtr ISteamClient,
				int hSteamuser,
				int hSteamPipe,
				string pchVersion);

			[DllImport("libsteam_api.dylib")]
			internal static extern IntPtr SteamAPI_ISteamClient_GetISteamController(
				IntPtr ISteamClient,
				int hSteamUser,
				int hSteamPipe,
				string pchVersion);

			[DllImport("libsteam_api.dylib")]
			internal static extern IntPtr SteamAPI_ISteamClient_GetISteamUGC(
				IntPtr ISteamClient,
				int hSteamUser,
				int hSteamPipe,
				string pchVersion);

			[DllImport("libsteam_api.dylib")]
			internal static extern IntPtr SteamAPI_ISteamClient_GetISteamAppList(
				IntPtr ISteamClient,
				int hSteamUser,
				int hSteamPipe,
				string pchVersion);

			[DllImport("libsteam_api.dylib")]
			internal static extern IntPtr SteamAPI_ISteamClient_GetISteamMusic(
				IntPtr ISteamClient,
				int hSteamuser,
				int hSteamPipe,
				string pchVersion);

			[DllImport("libsteam_api.dylib")]
			internal static extern IntPtr SteamAPI_ISteamClient_GetISteamMusicRemote(
				IntPtr ISteamClient,
				int hSteamuser,
				int hSteamPipe,
				string pchVersion);

			[DllImport("libsteam_api.dylib")]
			internal static extern IntPtr SteamAPI_ISteamClient_GetISteamHTMLSurface(
				IntPtr ISteamClient,
				int hSteamuser,
				int hSteamPipe,
				string pchVersion);

			[DllImport("libsteam_api.dylib")]
			internal static extern IntPtr SteamAPI_ISteamClient_GetISteamInventory(
				IntPtr ISteamClient,
				int hSteamuser,
				int hSteamPipe,
				string pchVersion);

			[DllImport("libsteam_api.dylib")]
			internal static extern IntPtr SteamAPI_ISteamClient_GetISteamVideo(
				IntPtr ISteamClient,
				int hSteamuser,
				int hSteamPipe,
				string pchVersion);

			[DllImport("libsteam_api.dylib")]
			internal static extern HSteamUser SteamAPI_ISteamUser_GetHSteamUser(IntPtr ISteamUser);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamUser_BLoggedOn(IntPtr ISteamUser);

			[DllImport("libsteam_api.dylib")]
			internal static extern CSteamID SteamAPI_ISteamUser_GetSteamID(IntPtr ISteamUser);

			[DllImport("libsteam_api.dylib")]
			internal static extern int SteamAPI_ISteamUser_InitiateGameConnection(
				IntPtr ISteamUser,
				IntPtr pAuthBlob,
				int cbMaxAuthBlob,
				ulong steamIDGameServer,
				uint unIPServer,
				ushort usPortServer,
				[MarshalAs(UnmanagedType.U1)] bool bSecure);

			[DllImport("libsteam_api.dylib")]
			internal static extern void SteamAPI_ISteamUser_TerminateGameConnection(
				IntPtr ISteamUser,
				uint unIPServer,
				ushort usPortServer);

			[DllImport("libsteam_api.dylib")]
			internal static extern void SteamAPI_ISteamUser_TrackAppUsageEvent(
				IntPtr ISteamUser,
				ulong gameID,
				int eAppUsageEvent,
				string pchExtraInfo);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamUser_GetUserDataFolder(
				IntPtr ISteamUser,
				StringBuilder pchBuffer,
				int cubBuffer);

			[DllImport("libsteam_api.dylib")]
			internal static extern void SteamAPI_ISteamUser_StartVoiceRecording(IntPtr ISteamUser);

			[DllImport("libsteam_api.dylib")]
			internal static extern void SteamAPI_ISteamUser_StopVoiceRecording(IntPtr ISteamUser);

			[DllImport("libsteam_api.dylib")]
			internal static extern VoiceResult SteamAPI_ISteamUser_GetAvailableVoice(
				IntPtr ISteamUser,
				out uint pcbCompressed,
				out uint pcbUncompressed_Deprecated,
				uint nUncompressedVoiceDesiredSampleRate_Deprecated);

			[DllImport("libsteam_api.dylib")]
			internal static extern VoiceResult SteamAPI_ISteamUser_GetVoice(
				IntPtr ISteamUser,
				[MarshalAs(UnmanagedType.U1)] bool bWantCompressed,
				IntPtr pDestBuffer,
				uint cbDestBufferSize,
				out uint nBytesWritten,
				[MarshalAs(UnmanagedType.U1)] bool bWantUncompressed_Deprecated,
				IntPtr pUncompressedDestBuffer_Deprecated,
				uint cbUncompressedDestBufferSize_Deprecated,
				out uint nUncompressBytesWritten_Deprecated,
				uint nUncompressedVoiceDesiredSampleRate_Deprecated);

			[DllImport("libsteam_api.dylib")]
			internal static extern VoiceResult SteamAPI_ISteamUser_DecompressVoice(
				IntPtr ISteamUser,
				IntPtr pCompressed,
				uint cbCompressed,
				IntPtr pDestBuffer,
				uint cbDestBufferSize,
				out uint nBytesWritten,
				uint nDesiredSampleRate);

			[DllImport("libsteam_api.dylib")]
			internal static extern uint SteamAPI_ISteamUser_GetVoiceOptimalSampleRate(IntPtr ISteamUser);

			[DllImport("libsteam_api.dylib")]
			internal static extern HAuthTicket SteamAPI_ISteamUser_GetAuthSessionTicket(
				IntPtr ISteamUser,
				IntPtr pTicket,
				int cbMaxTicket,
				out uint pcbTicket);

			[DllImport("libsteam_api.dylib")]
			internal static extern BeginAuthSessionResult SteamAPI_ISteamUser_BeginAuthSession(
				IntPtr ISteamUser,
				IntPtr pAuthTicket,
				int cbAuthTicket,
				ulong steamID);

			[DllImport("libsteam_api.dylib")]
			internal static extern void SteamAPI_ISteamUser_EndAuthSession(
				IntPtr ISteamUser,
				ulong steamID);

			[DllImport("libsteam_api.dylib")]
			internal static extern void SteamAPI_ISteamUser_CancelAuthTicket(
				IntPtr ISteamUser,
				uint hAuthTicket);

			[DllImport("libsteam_api.dylib")]
			internal static extern UserHasLicenseForAppResult SteamAPI_ISteamUser_UserHasLicenseForApp(
				IntPtr ISteamUser,
				ulong steamID,
				uint appID);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamUser_BIsBehindNAT(IntPtr ISteamUser);

			[DllImport("libsteam_api.dylib")]
			internal static extern void SteamAPI_ISteamUser_AdvertiseGame(
				IntPtr ISteamUser,
				ulong steamIDGameServer,
				uint unIPServer,
				ushort usPortServer);

			[DllImport("libsteam_api.dylib")]
			internal static extern SteamAPICall_t SteamAPI_ISteamUser_RequestEncryptedAppTicket(
				IntPtr ISteamUser,
				IntPtr pDataToInclude,
				int cbDataToInclude);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamUser_GetEncryptedAppTicket(
				IntPtr ISteamUser,
				IntPtr pTicket,
				int cbMaxTicket,
				out uint pcbTicket);

			[DllImport("libsteam_api.dylib")]
			internal static extern int SteamAPI_ISteamUser_GetGameBadgeLevel(
				IntPtr ISteamUser,
				int nSeries,
				[MarshalAs(UnmanagedType.U1)] bool bFoil);

			[DllImport("libsteam_api.dylib")]
			internal static extern int SteamAPI_ISteamUser_GetPlayerSteamLevel(IntPtr ISteamUser);

			[DllImport("libsteam_api.dylib")]
			internal static extern SteamAPICall_t SteamAPI_ISteamUser_RequestStoreAuthURL(
				IntPtr ISteamUser,
				string pchRedirectURL);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamUser_BIsPhoneVerified(IntPtr ISteamUser);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamUser_BIsTwoFactorEnabled(IntPtr ISteamUser);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamUser_BIsPhoneIdentifying(IntPtr ISteamUser);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamUser_BIsPhoneRequiringVerification(
				IntPtr ISteamUser);

			[DllImport("libsteam_api.dylib")]
			internal static extern IntPtr SteamAPI_ISteamFriends_GetPersonaName(IntPtr ISteamFriends);

			[DllImport("libsteam_api.dylib")]
			internal static extern SteamAPICall_t SteamAPI_ISteamFriends_SetPersonaName(
				IntPtr ISteamFriends,
				string pchPersonaName);

			[DllImport("libsteam_api.dylib")]
			internal static extern PersonaState SteamAPI_ISteamFriends_GetPersonaState(
				IntPtr ISteamFriends);

			[DllImport("libsteam_api.dylib")]
			internal static extern int SteamAPI_ISteamFriends_GetFriendCount(
				IntPtr ISteamFriends,
				int iFriendFlags);

			[DllImport("libsteam_api.dylib")]
			internal static extern CSteamID SteamAPI_ISteamFriends_GetFriendByIndex(
				IntPtr ISteamFriends,
				int iFriend,
				int iFriendFlags);

			[DllImport("libsteam_api.dylib")]
			internal static extern FriendRelationship SteamAPI_ISteamFriends_GetFriendRelationship(
				IntPtr ISteamFriends,
				ulong steamIDFriend);

			[DllImport("libsteam_api.dylib")]
			internal static extern PersonaState SteamAPI_ISteamFriends_GetFriendPersonaState(
				IntPtr ISteamFriends,
				ulong steamIDFriend);

			[DllImport("libsteam_api.dylib")]
			internal static extern IntPtr SteamAPI_ISteamFriends_GetFriendPersonaName(
				IntPtr ISteamFriends,
				ulong steamIDFriend);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamFriends_GetFriendGamePlayed(
				IntPtr ISteamFriends,
				ulong steamIDFriend,
				ref FriendGameInfo_t.PackSmall pFriendGameInfo);

			[DllImport("libsteam_api.dylib")]
			internal static extern IntPtr SteamAPI_ISteamFriends_GetFriendPersonaNameHistory(
				IntPtr ISteamFriends,
				ulong steamIDFriend,
				int iPersonaName);

			[DllImport("libsteam_api.dylib")]
			internal static extern int SteamAPI_ISteamFriends_GetFriendSteamLevel(
				IntPtr ISteamFriends,
				ulong steamIDFriend);

			[DllImport("libsteam_api.dylib")]
			internal static extern IntPtr SteamAPI_ISteamFriends_GetPlayerNickname(
				IntPtr ISteamFriends,
				ulong steamIDPlayer);

			[DllImport("libsteam_api.dylib")]
			internal static extern int SteamAPI_ISteamFriends_GetFriendsGroupCount(IntPtr ISteamFriends);

			[DllImport("libsteam_api.dylib")]
			internal static extern FriendsGroupID_t SteamAPI_ISteamFriends_GetFriendsGroupIDByIndex(
				IntPtr ISteamFriends,
				int iFG);

			[DllImport("libsteam_api.dylib")]
			internal static extern IntPtr SteamAPI_ISteamFriends_GetFriendsGroupName(
				IntPtr ISteamFriends,
				short friendsGroupID);

			[DllImport("libsteam_api.dylib")]
			internal static extern int SteamAPI_ISteamFriends_GetFriendsGroupMembersCount(
				IntPtr ISteamFriends,
				short friendsGroupID);

			[DllImport("libsteam_api.dylib")]
			internal static extern void SteamAPI_ISteamFriends_GetFriendsGroupMembersList(
				IntPtr ISteamFriends,
				short friendsGroupID,
				IntPtr pOutSteamIDMembers,
				int nMembersCount);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamFriends_HasFriend(
				IntPtr ISteamFriends,
				ulong steamIDFriend,
				int iFriendFlags);

			[DllImport("libsteam_api.dylib")]
			internal static extern int SteamAPI_ISteamFriends_GetClanCount(IntPtr ISteamFriends);

			[DllImport("libsteam_api.dylib")]
			internal static extern CSteamID SteamAPI_ISteamFriends_GetClanByIndex(
				IntPtr ISteamFriends,
				int iClan);

			[DllImport("libsteam_api.dylib")]
			internal static extern IntPtr SteamAPI_ISteamFriends_GetClanName(
				IntPtr ISteamFriends,
				ulong steamIDClan);

			[DllImport("libsteam_api.dylib")]
			internal static extern IntPtr SteamAPI_ISteamFriends_GetClanTag(
				IntPtr ISteamFriends,
				ulong steamIDClan);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamFriends_GetClanActivityCounts(
				IntPtr ISteamFriends,
				ulong steamIDClan,
				out int pnOnline,
				out int pnInGame,
				out int pnChatting);

			[DllImport("libsteam_api.dylib")]
			internal static extern SteamAPICall_t SteamAPI_ISteamFriends_DownloadClanActivityCounts(
				IntPtr ISteamFriends,
				IntPtr psteamIDClans,
				int cClansToRequest);

			[DllImport("libsteam_api.dylib")]
			internal static extern int SteamAPI_ISteamFriends_GetFriendCountFromSource(
				IntPtr ISteamFriends,
				ulong steamIDSource);

			[DllImport("libsteam_api.dylib")]
			internal static extern CSteamID SteamAPI_ISteamFriends_GetFriendFromSourceByIndex(
				IntPtr ISteamFriends,
				ulong steamIDSource,
				int iFriend);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamFriends_IsUserInSource(
				IntPtr ISteamFriends,
				ulong steamIDUser,
				ulong steamIDSource);

			[DllImport("libsteam_api.dylib")]
			internal static extern void SteamAPI_ISteamFriends_SetInGameVoiceSpeaking(
				IntPtr ISteamFriends,
				ulong steamIDUser,
				[MarshalAs(UnmanagedType.U1)] bool bSpeaking);

			[DllImport("libsteam_api.dylib")]
			internal static extern void SteamAPI_ISteamFriends_ActivateGameOverlay(
				IntPtr ISteamFriends,
				string pchDialog);

			[DllImport("libsteam_api.dylib")]
			internal static extern void SteamAPI_ISteamFriends_ActivateGameOverlayToUser(
				IntPtr ISteamFriends,
				string pchDialog,
				ulong steamID);

			[DllImport("libsteam_api.dylib")]
			internal static extern void SteamAPI_ISteamFriends_ActivateGameOverlayToWebPage(
				IntPtr ISteamFriends,
				string pchURL);

			[DllImport("libsteam_api.dylib")]
			internal static extern void SteamAPI_ISteamFriends_ActivateGameOverlayToStore(
				IntPtr ISteamFriends,
				uint nAppID,
				OverlayToStoreFlag eFlag);

			[DllImport("libsteam_api.dylib")]
			internal static extern void SteamAPI_ISteamFriends_SetPlayedWith(
				IntPtr ISteamFriends,
				ulong steamIDUserPlayedWith);

			[DllImport("libsteam_api.dylib")]
			internal static extern void SteamAPI_ISteamFriends_ActivateGameOverlayInviteDialog(
				IntPtr ISteamFriends,
				ulong steamIDLobby);

			[DllImport("libsteam_api.dylib")]
			internal static extern int SteamAPI_ISteamFriends_GetSmallFriendAvatar(
				IntPtr ISteamFriends,
				ulong steamIDFriend);

			[DllImport("libsteam_api.dylib")]
			internal static extern int SteamAPI_ISteamFriends_GetMediumFriendAvatar(
				IntPtr ISteamFriends,
				ulong steamIDFriend);

			[DllImport("libsteam_api.dylib")]
			internal static extern int SteamAPI_ISteamFriends_GetLargeFriendAvatar(
				IntPtr ISteamFriends,
				ulong steamIDFriend);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamFriends_RequestUserInformation(
				IntPtr ISteamFriends,
				ulong steamIDUser,
				[MarshalAs(UnmanagedType.U1)] bool bRequireNameOnly);

			[DllImport("libsteam_api.dylib")]
			internal static extern SteamAPICall_t SteamAPI_ISteamFriends_RequestClanOfficerList(
				IntPtr ISteamFriends,
				ulong steamIDClan);

			[DllImport("libsteam_api.dylib")]
			internal static extern CSteamID SteamAPI_ISteamFriends_GetClanOwner(
				IntPtr ISteamFriends,
				ulong steamIDClan);

			[DllImport("libsteam_api.dylib")]
			internal static extern int SteamAPI_ISteamFriends_GetClanOfficerCount(
				IntPtr ISteamFriends,
				ulong steamIDClan);

			[DllImport("libsteam_api.dylib")]
			internal static extern CSteamID SteamAPI_ISteamFriends_GetClanOfficerByIndex(
				IntPtr ISteamFriends,
				ulong steamIDClan,
				int iOfficer);

			[DllImport("libsteam_api.dylib")]
			internal static extern uint SteamAPI_ISteamFriends_GetUserRestrictions(IntPtr ISteamFriends);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamFriends_SetRichPresence(
				IntPtr ISteamFriends,
				string pchKey,
				string pchValue);

			[DllImport("libsteam_api.dylib")]
			internal static extern void SteamAPI_ISteamFriends_ClearRichPresence(IntPtr ISteamFriends);

			[DllImport("libsteam_api.dylib")]
			internal static extern IntPtr SteamAPI_ISteamFriends_GetFriendRichPresence(
				IntPtr ISteamFriends,
				ulong steamIDFriend,
				string pchKey);

			[DllImport("libsteam_api.dylib")]
			internal static extern int SteamAPI_ISteamFriends_GetFriendRichPresenceKeyCount(
				IntPtr ISteamFriends,
				ulong steamIDFriend);

			[DllImport("libsteam_api.dylib")]
			internal static extern IntPtr SteamAPI_ISteamFriends_GetFriendRichPresenceKeyByIndex(
				IntPtr ISteamFriends,
				ulong steamIDFriend,
				int iKey);

			[DllImport("libsteam_api.dylib")]
			internal static extern void SteamAPI_ISteamFriends_RequestFriendRichPresence(
				IntPtr ISteamFriends,
				ulong steamIDFriend);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamFriends_InviteUserToGame(
				IntPtr ISteamFriends,
				ulong steamIDFriend,
				string pchConnectString);

			[DllImport("libsteam_api.dylib")]
			internal static extern int SteamAPI_ISteamFriends_GetCoplayFriendCount(IntPtr ISteamFriends);

			[DllImport("libsteam_api.dylib")]
			internal static extern CSteamID SteamAPI_ISteamFriends_GetCoplayFriend(
				IntPtr ISteamFriends,
				int iCoplayFriend);

			[DllImport("libsteam_api.dylib")]
			internal static extern int SteamAPI_ISteamFriends_GetFriendCoplayTime(
				IntPtr ISteamFriends,
				ulong steamIDFriend);

			[DllImport("libsteam_api.dylib")]
			internal static extern AppId_t SteamAPI_ISteamFriends_GetFriendCoplayGame(
				IntPtr ISteamFriends,
				ulong steamIDFriend);

			[DllImport("libsteam_api.dylib")]
			internal static extern SteamAPICall_t SteamAPI_ISteamFriends_JoinClanChatRoom(
				IntPtr ISteamFriends,
				ulong steamIDClan);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamFriends_LeaveClanChatRoom(
				IntPtr ISteamFriends,
				ulong steamIDClan);

			[DllImport("libsteam_api.dylib")]
			internal static extern int SteamAPI_ISteamFriends_GetClanChatMemberCount(
				IntPtr ISteamFriends,
				ulong steamIDClan);

			[DllImport("libsteam_api.dylib")]
			internal static extern CSteamID SteamAPI_ISteamFriends_GetChatMemberByIndex(
				IntPtr ISteamFriends,
				ulong steamIDClan,
				int iUser);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamFriends_SendClanChatMessage(
				IntPtr ISteamFriends,
				ulong steamIDClanChat,
				string pchText);

			[DllImport("libsteam_api.dylib")]
			internal static extern int SteamAPI_ISteamFriends_GetClanChatMessage(
				IntPtr ISteamFriends,
				ulong steamIDClanChat,
				int iMessage,
				IntPtr prgchText,
				int cchTextMax,
				out ChatEntryType peChatEntryType,
				out ulong psteamidChatter);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamFriends_IsClanChatAdmin(
				IntPtr ISteamFriends,
				ulong steamIDClanChat,
				ulong steamIDUser);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamFriends_IsClanChatWindowOpenInSteam(
				IntPtr ISteamFriends,
				ulong steamIDClanChat);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamFriends_OpenClanChatWindowInSteam(
				IntPtr ISteamFriends,
				ulong steamIDClanChat);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamFriends_CloseClanChatWindowInSteam(
				IntPtr ISteamFriends,
				ulong steamIDClanChat);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamFriends_SetListenForFriendsMessages(
				IntPtr ISteamFriends,
				[MarshalAs(UnmanagedType.U1)] bool bInterceptEnabled);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamFriends_ReplyToFriendMessage(
				IntPtr ISteamFriends,
				ulong steamIDFriend,
				string pchMsgToSend);

			[DllImport("libsteam_api.dylib")]
			internal static extern int SteamAPI_ISteamFriends_GetFriendMessage(
				IntPtr ISteamFriends,
				ulong steamIDFriend,
				int iMessageID,
				IntPtr pvData,
				int cubData,
				out ChatEntryType peChatEntryType);

			[DllImport("libsteam_api.dylib")]
			internal static extern SteamAPICall_t SteamAPI_ISteamFriends_GetFollowerCount(
				IntPtr ISteamFriends,
				ulong steamID);

			[DllImport("libsteam_api.dylib")]
			internal static extern SteamAPICall_t SteamAPI_ISteamFriends_IsFollowing(
				IntPtr ISteamFriends,
				ulong steamID);

			[DllImport("libsteam_api.dylib")]
			internal static extern SteamAPICall_t SteamAPI_ISteamFriends_EnumerateFollowingList(
				IntPtr ISteamFriends,
				uint unStartIndex);

			[DllImport("libsteam_api.dylib")]
			internal static extern uint SteamAPI_ISteamUtils_GetSecondsSinceAppActive(IntPtr ISteamUtils);

			[DllImport("libsteam_api.dylib")]
			internal static extern uint SteamAPI_ISteamUtils_GetSecondsSinceComputerActive(
				IntPtr ISteamUtils);

			[DllImport("libsteam_api.dylib")]
			internal static extern Universe SteamAPI_ISteamUtils_GetConnectedUniverse(IntPtr ISteamUtils);

			[DllImport("libsteam_api.dylib")]
			internal static extern uint SteamAPI_ISteamUtils_GetServerRealTime(IntPtr ISteamUtils);

			[DllImport("libsteam_api.dylib")]
			internal static extern IntPtr SteamAPI_ISteamUtils_GetIPCountry(IntPtr ISteamUtils);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamUtils_GetImageSize(
				IntPtr ISteamUtils,
				int iImage,
				out uint pnWidth,
				out uint pnHeight);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamUtils_GetImageRGBA(
				IntPtr ISteamUtils,
				int iImage,
				IntPtr pubDest,
				int nDestBufferSize);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamUtils_GetCSERIPPort(
				IntPtr ISteamUtils,
				out uint unIP,
				out ushort usPort);

			[DllImport("libsteam_api.dylib")]
			internal static extern byte SteamAPI_ISteamUtils_GetCurrentBatteryPower(IntPtr ISteamUtils);

			[DllImport("libsteam_api.dylib")]
			internal static extern uint SteamAPI_ISteamUtils_GetAppID(IntPtr ISteamUtils);

			[DllImport("libsteam_api.dylib")]
			internal static extern void SteamAPI_ISteamUtils_SetOverlayNotificationPosition(
				IntPtr ISteamUtils,
				NotificationPosition eNotificationPosition);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamUtils_IsAPICallCompleted(
				IntPtr ISteamUtils,
				ulong hSteamAPICall,
				[MarshalAs(UnmanagedType.U1)] ref bool pbFailed);

			[DllImport("libsteam_api.dylib")]
			internal static extern SteamAPICallFailure SteamAPI_ISteamUtils_GetAPICallFailureReason(
				IntPtr ISteamUtils,
				ulong hSteamAPICall);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamUtils_GetAPICallResult(
				IntPtr ISteamUtils,
				ulong hSteamAPICall,
				IntPtr pCallback,
				int cubCallback,
				int iCallbackExpected,
				[MarshalAs(UnmanagedType.U1)] ref bool pbFailed);

			[DllImport("libsteam_api.dylib")]
			internal static extern uint SteamAPI_ISteamUtils_GetIPCCallCount(IntPtr ISteamUtils);

			[DllImport("libsteam_api.dylib")]
			internal static extern void SteamAPI_ISteamUtils_SetWarningMessageHook(
				IntPtr ISteamUtils,
				IntPtr pFunction);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamUtils_IsOverlayEnabled(IntPtr ISteamUtils);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamUtils_BOverlayNeedsPresent(IntPtr ISteamUtils);

			[DllImport("libsteam_api.dylib")]
			internal static extern SteamAPICall_t SteamAPI_ISteamUtils_CheckFileSignature(
				IntPtr ISteamUtils,
				string szFileName);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamUtils_ShowGamepadTextInput(
				IntPtr ISteamUtils,
				GamepadTextInputMode eInputMode,
				GamepadTextInputLineMode eLineInputMode,
				string pchDescription,
				uint unCharMax,
				string pchExistingText);

			[DllImport("libsteam_api.dylib")]
			internal static extern uint SteamAPI_ISteamUtils_GetEnteredGamepadTextLength(
				IntPtr ISteamUtils);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamUtils_GetEnteredGamepadTextInput(
				IntPtr ISteamUtils,
				StringBuilder pchText,
				uint cchText);

			[DllImport("libsteam_api.dylib")]
			internal static extern IntPtr SteamAPI_ISteamUtils_GetSteamUILanguage(IntPtr ISteamUtils);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamUtils_IsSteamRunningInVR(IntPtr ISteamUtils);

			[DllImport("libsteam_api.dylib")]
			internal static extern void SteamAPI_ISteamUtils_SetOverlayNotificationInset(
				IntPtr ISteamUtils,
				int nHorizontalInset,
				int nVerticalInset);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamUtils_IsSteamInBigPictureMode(IntPtr ISteamUtils);

			[DllImport("libsteam_api.dylib")]
			internal static extern void SteamAPI_ISteamUtils_StartVRDashboard(IntPtr ISteamUtils);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamUtils_IsVRHeadsetStreamingEnabled(
				IntPtr ISteamUtils);

			[DllImport("libsteam_api.dylib")]
			internal static extern void SteamAPI_ISteamUtils_SetVRHeadsetStreamingEnabled(
				IntPtr ISteamUtils,
				[MarshalAs(UnmanagedType.U1)] bool bEnabled);

			[DllImport("libsteam_api.dylib")]
			internal static extern int SteamAPI_ISteamMatchmaking_GetFavoriteGameCount(
				IntPtr ISteamMatchmaking);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamMatchmaking_GetFavoriteGame(
				IntPtr ISteamMatchmaking,
				int iGame,
				ref uint pnAppID,
				out uint pnIP,
				out ushort pnConnPort,
				out ushort pnQueryPort,
				out uint punFlags,
				out uint pRTime32LastPlayedOnServer);

			[DllImport("libsteam_api.dylib")]
			internal static extern int SteamAPI_ISteamMatchmaking_AddFavoriteGame(
				IntPtr ISteamMatchmaking,
				uint nAppID,
				uint nIP,
				ushort nConnPort,
				ushort nQueryPort,
				uint unFlags,
				uint rTime32LastPlayedOnServer);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamMatchmaking_RemoveFavoriteGame(
				IntPtr ISteamMatchmaking,
				uint nAppID,
				uint nIP,
				ushort nConnPort,
				ushort nQueryPort,
				uint unFlags);

			[DllImport("libsteam_api.dylib")]
			internal static extern SteamAPICall_t SteamAPI_ISteamMatchmaking_RequestLobbyList(
				IntPtr ISteamMatchmaking);

			[DllImport("libsteam_api.dylib")]
			internal static extern void SteamAPI_ISteamMatchmaking_AddRequestLobbyListStringFilter(
				IntPtr ISteamMatchmaking,
				string pchKeyToMatch,
				string pchValueToMatch,
				LobbyComparison eComparisonType);

			[DllImport("libsteam_api.dylib")]
			internal static extern void SteamAPI_ISteamMatchmaking_AddRequestLobbyListNumericalFilter(
				IntPtr ISteamMatchmaking,
				string pchKeyToMatch,
				int nValueToMatch,
				LobbyComparison eComparisonType);

			[DllImport("libsteam_api.dylib")]
			internal static extern void SteamAPI_ISteamMatchmaking_AddRequestLobbyListNearValueFilter(
				IntPtr ISteamMatchmaking,
				string pchKeyToMatch,
				int nValueToBeCloseTo);

			[DllImport("libsteam_api.dylib")]
			internal static extern void SteamAPI_ISteamMatchmaking_AddRequestLobbyListFilterSlotsAvailable(
				IntPtr ISteamMatchmaking,
				int nSlotsAvailable);

			[DllImport("libsteam_api.dylib")]
			internal static extern void SteamAPI_ISteamMatchmaking_AddRequestLobbyListDistanceFilter(
				IntPtr ISteamMatchmaking,
				LobbyDistanceFilter eLobbyDistanceFilter);

			[DllImport("libsteam_api.dylib")]
			internal static extern void SteamAPI_ISteamMatchmaking_AddRequestLobbyListResultCountFilter(
				IntPtr ISteamMatchmaking,
				int cMaxResults);

			[DllImport("libsteam_api.dylib")]
			internal static extern void SteamAPI_ISteamMatchmaking_AddRequestLobbyListCompatibleMembersFilter(
				IntPtr ISteamMatchmaking,
				ulong steamIDLobby);

			[DllImport("libsteam_api.dylib")]
			internal static extern CSteamID SteamAPI_ISteamMatchmaking_GetLobbyByIndex(
				IntPtr ISteamMatchmaking,
				int iLobby);

			[DllImport("libsteam_api.dylib")]
			internal static extern SteamAPICall_t SteamAPI_ISteamMatchmaking_CreateLobby(
				IntPtr ISteamMatchmaking,
				LobbyType eLobbyType,
				int cMaxMembers);

			[DllImport("libsteam_api.dylib")]
			internal static extern SteamAPICall_t SteamAPI_ISteamMatchmaking_JoinLobby(
				IntPtr ISteamMatchmaking,
				ulong steamIDLobby);

			[DllImport("libsteam_api.dylib")]
			internal static extern void SteamAPI_ISteamMatchmaking_LeaveLobby(
				IntPtr ISteamMatchmaking,
				ulong steamIDLobby);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamMatchmaking_InviteUserToLobby(
				IntPtr ISteamMatchmaking,
				ulong steamIDLobby,
				ulong steamIDInvitee);

			[DllImport("libsteam_api.dylib")]
			internal static extern int SteamAPI_ISteamMatchmaking_GetNumLobbyMembers(
				IntPtr ISteamMatchmaking,
				ulong steamIDLobby);

			[DllImport("libsteam_api.dylib")]
			internal static extern CSteamID SteamAPI_ISteamMatchmaking_GetLobbyMemberByIndex(
				IntPtr ISteamMatchmaking,
				ulong steamIDLobby,
				int iMember);

			[DllImport("libsteam_api.dylib")]
			internal static extern IntPtr SteamAPI_ISteamMatchmaking_GetLobbyData(
				IntPtr ISteamMatchmaking,
				ulong steamIDLobby,
				string pchKey);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamMatchmaking_SetLobbyData(
				IntPtr ISteamMatchmaking,
				ulong steamIDLobby,
				string pchKey,
				string pchValue);

			[DllImport("libsteam_api.dylib")]
			internal static extern int SteamAPI_ISteamMatchmaking_GetLobbyDataCount(
				IntPtr ISteamMatchmaking,
				ulong steamIDLobby);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamMatchmaking_GetLobbyDataByIndex(
				IntPtr ISteamMatchmaking,
				ulong steamIDLobby,
				int iLobbyData,
				StringBuilder pchKey,
				int cchKeyBufferSize,
				StringBuilder pchValue,
				int cchValueBufferSize);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamMatchmaking_DeleteLobbyData(
				IntPtr ISteamMatchmaking,
				ulong steamIDLobby,
				string pchKey);

			[DllImport("libsteam_api.dylib")]
			internal static extern IntPtr SteamAPI_ISteamMatchmaking_GetLobbyMemberData(
				IntPtr ISteamMatchmaking,
				ulong steamIDLobby,
				ulong steamIDUser,
				string pchKey);

			[DllImport("libsteam_api.dylib")]
			internal static extern void SteamAPI_ISteamMatchmaking_SetLobbyMemberData(
				IntPtr ISteamMatchmaking,
				ulong steamIDLobby,
				string pchKey,
				string pchValue);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamMatchmaking_SendLobbyChatMsg(
				IntPtr ISteamMatchmaking,
				ulong steamIDLobby,
				IntPtr pvMsgBody,
				int cubMsgBody);

			[DllImport("libsteam_api.dylib")]
			internal static extern int SteamAPI_ISteamMatchmaking_GetLobbyChatEntry(
				IntPtr ISteamMatchmaking,
				ulong steamIDLobby,
				int iChatID,
				out ulong pSteamIDUser,
				IntPtr pvData,
				int cubData,
				out ChatEntryType peChatEntryType);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamMatchmaking_RequestLobbyData(
				IntPtr ISteamMatchmaking,
				ulong steamIDLobby);

			[DllImport("libsteam_api.dylib")]
			internal static extern void SteamAPI_ISteamMatchmaking_SetLobbyGameServer(
				IntPtr ISteamMatchmaking,
				ulong steamIDLobby,
				uint unGameServerIP,
				ushort unGameServerPort,
				ulong steamIDGameServer);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamMatchmaking_GetLobbyGameServer(
				IntPtr ISteamMatchmaking,
				ulong steamIDLobby,
				out uint punGameServerIP,
				out ushort punGameServerPort,
				out ulong psteamIDGameServer);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamMatchmaking_SetLobbyMemberLimit(
				IntPtr ISteamMatchmaking,
				ulong steamIDLobby,
				int cMaxMembers);

			[DllImport("libsteam_api.dylib")]
			internal static extern int SteamAPI_ISteamMatchmaking_GetLobbyMemberLimit(
				IntPtr ISteamMatchmaking,
				ulong steamIDLobby);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamMatchmaking_SetLobbyType(
				IntPtr ISteamMatchmaking,
				ulong steamIDLobby,
				LobbyType eLobbyType);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamMatchmaking_SetLobbyJoinable(
				IntPtr ISteamMatchmaking,
				ulong steamIDLobby,
				[MarshalAs(UnmanagedType.U1)] bool bLobbyJoinable);

			[DllImport("libsteam_api.dylib")]
			internal static extern CSteamID SteamAPI_ISteamMatchmaking_GetLobbyOwner(
				IntPtr ISteamMatchmaking,
				ulong steamIDLobby);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamMatchmaking_SetLobbyOwner(
				IntPtr ISteamMatchmaking,
				ulong steamIDLobby,
				ulong steamIDNewOwner);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamMatchmaking_SetLinkedLobby(
				IntPtr ISteamMatchmaking,
				ulong steamIDLobby,
				ulong steamIDLobbyDependent);

			[DllImport("libsteam_api.dylib")]
			internal static extern HServerListRequest SteamAPI_ISteamMatchmakingServers_RequestInternetServerList(
				IntPtr ISteamMatchmakingServers,
				uint iApp,
				IntPtr ppchFilters,
				uint nFilters,
				IntPtr pRequestServersResponse);

			[DllImport("libsteam_api.dylib")]
			internal static extern HServerListRequest SteamAPI_ISteamMatchmakingServers_RequestLANServerList(
				IntPtr ISteamMatchmakingServers,
				uint iApp,
				IntPtr pRequestServersResponse);

			[DllImport("libsteam_api.dylib")]
			internal static extern HServerListRequest SteamAPI_ISteamMatchmakingServers_RequestFriendsServerList(
				IntPtr ISteamMatchmakingServers,
				uint iApp,
				IntPtr ppchFilters,
				uint nFilters,
				IntPtr pRequestServersResponse);

			[DllImport("libsteam_api.dylib")]
			internal static extern HServerListRequest SteamAPI_ISteamMatchmakingServers_RequestFavoritesServerList(
				IntPtr ISteamMatchmakingServers,
				uint iApp,
				IntPtr ppchFilters,
				uint nFilters,
				IntPtr pRequestServersResponse);

			[DllImport("libsteam_api.dylib")]
			internal static extern HServerListRequest SteamAPI_ISteamMatchmakingServers_RequestHistoryServerList(
				IntPtr ISteamMatchmakingServers,
				uint iApp,
				IntPtr ppchFilters,
				uint nFilters,
				IntPtr pRequestServersResponse);

			[DllImport("libsteam_api.dylib")]
			internal static extern HServerListRequest SteamAPI_ISteamMatchmakingServers_RequestSpectatorServerList(
				IntPtr ISteamMatchmakingServers,
				uint iApp,
				IntPtr ppchFilters,
				uint nFilters,
				IntPtr pRequestServersResponse);

			[DllImport("libsteam_api.dylib")]
			internal static extern void SteamAPI_ISteamMatchmakingServers_ReleaseRequest(
				IntPtr ISteamMatchmakingServers,
				IntPtr hServerListRequest);

			[DllImport("libsteam_api.dylib")]
			internal static extern IntPtr SteamAPI_ISteamMatchmakingServers_GetServerDetails(
				IntPtr ISteamMatchmakingServers,
				IntPtr hRequest,
				int iServer);

			[DllImport("libsteam_api.dylib")]
			internal static extern void SteamAPI_ISteamMatchmakingServers_CancelQuery(
				IntPtr ISteamMatchmakingServers,
				IntPtr hRequest);

			[DllImport("libsteam_api.dylib")]
			internal static extern void SteamAPI_ISteamMatchmakingServers_RefreshQuery(
				IntPtr ISteamMatchmakingServers,
				IntPtr hRequest);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamMatchmakingServers_IsRefreshing(
				IntPtr ISteamMatchmakingServers,
				IntPtr hRequest);

			[DllImport("libsteam_api.dylib")]
			internal static extern int SteamAPI_ISteamMatchmakingServers_GetServerCount(
				IntPtr ISteamMatchmakingServers,
				IntPtr hRequest);

			[DllImport("libsteam_api.dylib")]
			internal static extern void SteamAPI_ISteamMatchmakingServers_RefreshServer(
				IntPtr ISteamMatchmakingServers,
				IntPtr hRequest,
				int iServer);

			[DllImport("libsteam_api.dylib")]
			internal static extern HServerQuery SteamAPI_ISteamMatchmakingServers_PingServer(
				IntPtr ISteamMatchmakingServers,
				uint unIP,
				ushort usPort,
				IntPtr pRequestServersResponse);

			[DllImport("libsteam_api.dylib")]
			internal static extern HServerQuery SteamAPI_ISteamMatchmakingServers_PlayerDetails(
				IntPtr ISteamMatchmakingServers,
				uint unIP,
				ushort usPort,
				IntPtr pRequestServersResponse);

			[DllImport("libsteam_api.dylib")]
			internal static extern HServerQuery SteamAPI_ISteamMatchmakingServers_ServerRules(
				IntPtr ISteamMatchmakingServers,
				uint unIP,
				ushort usPort,
				IntPtr pRequestServersResponse);

			[DllImport("libsteam_api.dylib")]
			internal static extern void SteamAPI_ISteamMatchmakingServers_CancelServerQuery(
				IntPtr ISteamMatchmakingServers,
				int hServerQuery);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamRemoteStorage_FileWrite(
				IntPtr ISteamRemoteStorage,
				string pchFile,
				IntPtr pvData,
				int cubData);

			[DllImport("libsteam_api.dylib")]
			internal static extern int SteamAPI_ISteamRemoteStorage_FileRead(
				IntPtr ISteamRemoteStorage,
				string pchFile,
				IntPtr pvData,
				int cubDataToRead);

			[DllImport("libsteam_api.dylib")]
			internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_FileWriteAsync(
				IntPtr ISteamRemoteStorage,
				string pchFile,
				IntPtr pvData,
				uint cubData);

			[DllImport("libsteam_api.dylib")]
			internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_FileReadAsync(
				IntPtr ISteamRemoteStorage,
				string pchFile,
				uint nOffset,
				uint cubToRead);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamRemoteStorage_FileReadAsyncComplete(
				IntPtr ISteamRemoteStorage,
				ulong hReadCall,
				IntPtr pvBuffer,
				uint cubToRead);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamRemoteStorage_FileForget(
				IntPtr ISteamRemoteStorage,
				string pchFile);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamRemoteStorage_FileDelete(
				IntPtr ISteamRemoteStorage,
				string pchFile);

			[DllImport("libsteam_api.dylib")]
			internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_FileShare(
				IntPtr ISteamRemoteStorage,
				string pchFile);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamRemoteStorage_SetSyncPlatforms(
				IntPtr ISteamRemoteStorage,
				string pchFile,
				RemoteStoragePlatform eRemoteStoragePlatform);

			[DllImport("libsteam_api.dylib")]
			internal static extern UGCFileWriteStreamHandle_t SteamAPI_ISteamRemoteStorage_FileWriteStreamOpen(
				IntPtr ISteamRemoteStorage,
				string pchFile);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamRemoteStorage_FileWriteStreamWriteChunk(
				IntPtr ISteamRemoteStorage,
				ulong writeHandle,
				IntPtr pvData,
				int cubData);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamRemoteStorage_FileWriteStreamClose(
				IntPtr ISteamRemoteStorage,
				ulong writeHandle);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamRemoteStorage_FileWriteStreamCancel(
				IntPtr ISteamRemoteStorage,
				ulong writeHandle);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamRemoteStorage_FileExists(
				IntPtr ISteamRemoteStorage,
				string pchFile);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamRemoteStorage_FilePersisted(
				IntPtr ISteamRemoteStorage,
				string pchFile);

			[DllImport("libsteam_api.dylib")]
			internal static extern int SteamAPI_ISteamRemoteStorage_GetFileSize(
				IntPtr ISteamRemoteStorage,
				string pchFile);

			[DllImport("libsteam_api.dylib")]
			internal static extern long SteamAPI_ISteamRemoteStorage_GetFileTimestamp(
				IntPtr ISteamRemoteStorage,
				string pchFile);

			[DllImport("libsteam_api.dylib")]
			internal static extern RemoteStoragePlatform SteamAPI_ISteamRemoteStorage_GetSyncPlatforms(
				IntPtr ISteamRemoteStorage,
				string pchFile);

			[DllImport("libsteam_api.dylib")]
			internal static extern int SteamAPI_ISteamRemoteStorage_GetFileCount(
				IntPtr ISteamRemoteStorage);

			[DllImport("libsteam_api.dylib")]
			internal static extern IntPtr SteamAPI_ISteamRemoteStorage_GetFileNameAndSize(
				IntPtr ISteamRemoteStorage,
				int iFile,
				out int pnFileSizeInBytes);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamRemoteStorage_GetQuota(
				IntPtr ISteamRemoteStorage,
				out ulong pnTotalBytes,
				out ulong puAvailableBytes);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamRemoteStorage_IsCloudEnabledForAccount(
				IntPtr ISteamRemoteStorage);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamRemoteStorage_IsCloudEnabledForApp(
				IntPtr ISteamRemoteStorage);

			[DllImport("libsteam_api.dylib")]
			internal static extern void SteamAPI_ISteamRemoteStorage_SetCloudEnabledForApp(
				IntPtr ISteamRemoteStorage,
				[MarshalAs(UnmanagedType.U1)] bool bEnabled);

			[DllImport("libsteam_api.dylib")]
			internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_UGCDownload(
				IntPtr ISteamRemoteStorage,
				ulong hContent,
				uint unPriority);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamRemoteStorage_GetUGCDownloadProgress(
				IntPtr ISteamRemoteStorage,
				ulong hContent,
				out int pnBytesDownloaded,
				out int pnBytesExpected);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamRemoteStorage_GetUGCDetails(
				IntPtr ISteamRemoteStorage,
				ulong hContent,
				ref uint pnAppID,
				StringBuilder ppchName,
				out int pnFileSizeInBytes,
				out ulong pSteamIDOwner);

			[DllImport("libsteam_api.dylib")]
			internal static extern int SteamAPI_ISteamRemoteStorage_UGCRead(
				IntPtr ISteamRemoteStorage,
				ulong hContent,
				IntPtr pvData,
				int cubDataToRead,
				uint cOffset,
				UGCReadAction eAction);

			[DllImport("libsteam_api.dylib")]
			internal static extern int SteamAPI_ISteamRemoteStorage_GetCachedUGCCount(
				IntPtr ISteamRemoteStorage);

			[DllImport("libsteam_api.dylib")]
			internal static extern UGCHandle_t SteamAPI_ISteamRemoteStorage_GetCachedUGCHandle(
				IntPtr ISteamRemoteStorage,
				int iCachedContent);

			[DllImport("libsteam_api.dylib")]
			internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_PublishWorkshopFile(
				IntPtr ISteamRemoteStorage,
				string pchFile,
				string pchPreviewFile,
				uint nConsumerAppId,
				string pchTitle,
				string pchDescription,
				RemoteStoragePublishedFileVisibility eVisibility,
				ref SteamParamStringArray_t.PackSmall pTags,
				WorkshopFileType eWorkshopFileType);

			[DllImport("libsteam_api.dylib")]
			internal static extern PublishedFileUpdateHandle_t
				SteamAPI_ISteamRemoteStorage_CreatePublishedFileUpdateRequest(
					IntPtr ISteamRemoteStorage,
					ulong unPublishedFileId);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamRemoteStorage_UpdatePublishedFileFile(
				IntPtr ISteamRemoteStorage,
				ulong updateHandle,
				string pchFile);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamRemoteStorage_UpdatePublishedFilePreviewFile(
				IntPtr ISteamRemoteStorage,
				ulong updateHandle,
				string pchPreviewFile);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamRemoteStorage_UpdatePublishedFileTitle(
				IntPtr ISteamRemoteStorage,
				ulong updateHandle,
				string pchTitle);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamRemoteStorage_UpdatePublishedFileDescription(
				IntPtr ISteamRemoteStorage,
				ulong updateHandle,
				string pchDescription);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamRemoteStorage_UpdatePublishedFileVisibility(
				IntPtr ISteamRemoteStorage,
				ulong updateHandle,
				RemoteStoragePublishedFileVisibility eVisibility);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamRemoteStorage_UpdatePublishedFileTags(
				IntPtr ISteamRemoteStorage,
				ulong updateHandle,
				ref SteamParamStringArray_t.PackSmall pTags);

			[DllImport("libsteam_api.dylib")]
			internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_CommitPublishedFileUpdate(
				IntPtr ISteamRemoteStorage,
				ulong updateHandle);

			[DllImport("libsteam_api.dylib")]
			internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_GetPublishedFileDetails(
				IntPtr ISteamRemoteStorage,
				ulong unPublishedFileId,
				uint unMaxSecondsOld);

			[DllImport("libsteam_api.dylib")]
			internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_DeletePublishedFile(
				IntPtr ISteamRemoteStorage,
				ulong unPublishedFileId);

			[DllImport("libsteam_api.dylib")]
			internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_EnumerateUserPublishedFiles(
				IntPtr ISteamRemoteStorage,
				uint unStartIndex);

			[DllImport("libsteam_api.dylib")]
			internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_SubscribePublishedFile(
				IntPtr ISteamRemoteStorage,
				ulong unPublishedFileId);

			[DllImport("libsteam_api.dylib")]
			internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_EnumerateUserSubscribedFiles(
				IntPtr ISteamRemoteStorage,
				uint unStartIndex);

			[DllImport("libsteam_api.dylib")]
			internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_UnsubscribePublishedFile(
				IntPtr ISteamRemoteStorage,
				ulong unPublishedFileId);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamRemoteStorage_UpdatePublishedFileSetChangeDescription(
				IntPtr ISteamRemoteStorage,
				ulong updateHandle,
				string pchChangeDescription);

			[DllImport("libsteam_api.dylib")]
			internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_GetPublishedItemVoteDetails(
				IntPtr ISteamRemoteStorage,
				ulong unPublishedFileId);

			[DllImport("libsteam_api.dylib")]
			internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_UpdateUserPublishedItemVote(
				IntPtr ISteamRemoteStorage,
				ulong unPublishedFileId,
				[MarshalAs(UnmanagedType.U1)] bool bVoteUp);

			[DllImport("libsteam_api.dylib")]
			internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_GetUserPublishedItemVoteDetails(
				IntPtr ISteamRemoteStorage,
				ulong unPublishedFileId);

			[DllImport("libsteam_api.dylib")]
			internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_EnumerateUserSharedWorkshopFiles(
				IntPtr ISteamRemoteStorage,
				ulong steamId,
				uint unStartIndex,
				ref SteamParamStringArray_t.PackSmall pRequiredTags,
				ref SteamParamStringArray_t.PackSmall pExcludedTags);

			[DllImport("libsteam_api.dylib")]
			internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_PublishVideo(
				IntPtr ISteamRemoteStorage,
				WorkshopVideoProvider eVideoProvider,
				string pchVideoAccount,
				string pchVideoIdentifier,
				string pchPreviewFile,
				uint nConsumerAppId,
				string pchTitle,
				string pchDescription,
				RemoteStoragePublishedFileVisibility eVisibility,
				ref SteamParamStringArray_t.PackSmall pTags);

			[DllImport("libsteam_api.dylib")]
			internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_SetUserPublishedFileAction(
				IntPtr ISteamRemoteStorage,
				ulong unPublishedFileId,
				WorkshopFileAction eAction);

			[DllImport("libsteam_api.dylib")]
			internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_EnumeratePublishedFilesByUserAction(
				IntPtr ISteamRemoteStorage,
				WorkshopFileAction eAction,
				uint unStartIndex);

			[DllImport("libsteam_api.dylib")]
			internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_EnumeratePublishedWorkshopFiles(
				IntPtr ISteamRemoteStorage,
				WorkshopEnumerationType eEnumerationType,
				uint unStartIndex,
				uint unCount,
				uint unDays,
				ref SteamParamStringArray_t.PackSmall pTags,
				ref SteamParamStringArray_t.PackSmall pUserTags);

			[DllImport("libsteam_api.dylib")]
			internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_UGCDownloadToLocation(
				IntPtr ISteamRemoteStorage,
				ulong hContent,
				string pchLocation,
				uint unPriority);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamUserStats_RequestCurrentStats(
				IntPtr ISteamUserStats);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamUserStats_GetStat(
				IntPtr ISteamUserStats,
				string pchName,
				out int pData);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamUserStats_GetStat0(
				IntPtr ISteamUserStats,
				string pchName,
				out float pData);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamUserStats_SetStat(
				IntPtr ISteamUserStats,
				string pchName,
				int nData);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamUserStats_SetStat0(
				IntPtr ISteamUserStats,
				string pchName,
				float fData);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamUserStats_UpdateAvgRateStat(
				IntPtr ISteamUserStats,
				string pchName,
				float flCountThisSession,
				double dSessionLength);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamUserStats_GetAchievement(
				IntPtr ISteamUserStats,
				string pchName,
				[MarshalAs(UnmanagedType.U1)] ref bool pbAchieved);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamUserStats_SetAchievement(
				IntPtr ISteamUserStats,
				string pchName);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamUserStats_ClearAchievement(
				IntPtr ISteamUserStats,
				string pchName);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamUserStats_GetAchievementAndUnlockTime(
				IntPtr ISteamUserStats,
				string pchName,
				[MarshalAs(UnmanagedType.U1)] ref bool pbAchieved,
				out uint punUnlockTime);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamUserStats_StoreStats(IntPtr ISteamUserStats);

			[DllImport("libsteam_api.dylib")]
			internal static extern int SteamAPI_ISteamUserStats_GetAchievementIcon(
				IntPtr ISteamUserStats,
				string pchName);

			[DllImport("libsteam_api.dylib")]
			internal static extern IntPtr SteamAPI_ISteamUserStats_GetAchievementDisplayAttribute(
				IntPtr ISteamUserStats,
				string pchName,
				string pchKey);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamUserStats_IndicateAchievementProgress(
				IntPtr ISteamUserStats,
				string pchName,
				uint nCurProgress,
				uint nMaxProgress);

			[DllImport("libsteam_api.dylib")]
			internal static extern uint SteamAPI_ISteamUserStats_GetNumAchievements(
				IntPtr ISteamUserStats);

			[DllImport("libsteam_api.dylib")]
			internal static extern IntPtr SteamAPI_ISteamUserStats_GetAchievementName(
				IntPtr ISteamUserStats,
				uint iAchievement);

			[DllImport("libsteam_api.dylib")]
			internal static extern SteamAPICall_t SteamAPI_ISteamUserStats_RequestUserStats(
				IntPtr ISteamUserStats,
				ulong steamIDUser);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamUserStats_GetUserStat(
				IntPtr ISteamUserStats,
				ulong steamIDUser,
				string pchName,
				out int pData);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamUserStats_GetUserStat0(
				IntPtr ISteamUserStats,
				ulong steamIDUser,
				string pchName,
				out float pData);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamUserStats_GetUserAchievement(
				IntPtr ISteamUserStats,
				ulong steamIDUser,
				string pchName,
				[MarshalAs(UnmanagedType.U1)] ref bool pbAchieved);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamUserStats_GetUserAchievementAndUnlockTime(
				IntPtr ISteamUserStats,
				ulong steamIDUser,
				string pchName,
				[MarshalAs(UnmanagedType.U1)] ref bool pbAchieved,
				out uint punUnlockTime);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamUserStats_ResetAllStats(
				IntPtr ISteamUserStats,
				[MarshalAs(UnmanagedType.U1)] bool bAchievementsToo);

			[DllImport("libsteam_api.dylib")]
			internal static extern SteamAPICall_t SteamAPI_ISteamUserStats_FindOrCreateLeaderboard(
				IntPtr ISteamUserStats,
				string pchLeaderboardName,
				LeaderboardSortMethod eLeaderboardSortMethod,
				LeaderboardDisplayType eLeaderboardDisplayType);

			[DllImport("libsteam_api.dylib")]
			internal static extern SteamAPICall_t SteamAPI_ISteamUserStats_FindLeaderboard(
				IntPtr ISteamUserStats,
				string pchLeaderboardName);

			[DllImport("libsteam_api.dylib")]
			internal static extern IntPtr SteamAPI_ISteamUserStats_GetLeaderboardName(
				IntPtr ISteamUserStats,
				ulong hSteamLeaderboard);

			[DllImport("libsteam_api.dylib")]
			internal static extern int SteamAPI_ISteamUserStats_GetLeaderboardEntryCount(
				IntPtr ISteamUserStats,
				ulong hSteamLeaderboard);

			[DllImport("libsteam_api.dylib")]
			internal static extern LeaderboardSortMethod SteamAPI_ISteamUserStats_GetLeaderboardSortMethod(
				IntPtr ISteamUserStats,
				ulong hSteamLeaderboard);

			[DllImport("libsteam_api.dylib")]
			internal static extern LeaderboardDisplayType SteamAPI_ISteamUserStats_GetLeaderboardDisplayType(
				IntPtr ISteamUserStats,
				ulong hSteamLeaderboard);

			[DllImport("libsteam_api.dylib")]
			internal static extern SteamAPICall_t SteamAPI_ISteamUserStats_DownloadLeaderboardEntries(
				IntPtr ISteamUserStats,
				ulong hSteamLeaderboard,
				LeaderboardDataRequest eLeaderboardDataRequest,
				int nRangeStart,
				int nRangeEnd);

			[DllImport("libsteam_api.dylib")]
			internal static extern SteamAPICall_t SteamAPI_ISteamUserStats_DownloadLeaderboardEntriesForUsers(
				IntPtr ISteamUserStats,
				ulong hSteamLeaderboard,
				IntPtr prgUsers,
				int cUsers);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamUserStats_GetDownloadedLeaderboardEntry(
				IntPtr ISteamUserStats,
				ulong hSteamLeaderboardEntries,
				int index,
				ref LeaderboardEntry_t.PackSmall pLeaderboardEntry,
				IntPtr pDetails,
				int cDetailsMax);

			[DllImport("libsteam_api.dylib")]
			internal static extern SteamAPICall_t SteamAPI_ISteamUserStats_UploadLeaderboardScore(
				IntPtr ISteamUserStats,
				ulong hSteamLeaderboard,
				LeaderboardUploadScoreMethod eLeaderboardUploadScoreMethod,
				int nScore,
				int[] pScoreDetails,
				int cScoreDetailsCount);

			[DllImport("libsteam_api.dylib")]
			internal static extern SteamAPICall_t SteamAPI_ISteamUserStats_AttachLeaderboardUGC(
				IntPtr ISteamUserStats,
				ulong hSteamLeaderboard,
				ulong hUGC);

			[DllImport("libsteam_api.dylib")]
			internal static extern SteamAPICall_t SteamAPI_ISteamUserStats_GetNumberOfCurrentPlayers(
				IntPtr ISteamUserStats);

			[DllImport("libsteam_api.dylib")]
			internal static extern SteamAPICall_t SteamAPI_ISteamUserStats_RequestGlobalAchievementPercentages(
				IntPtr ISteamUserStats);

			[DllImport("libsteam_api.dylib")]
			internal static extern int SteamAPI_ISteamUserStats_GetMostAchievedAchievementInfo(
				IntPtr ISteamUserStats,
				StringBuilder pchName,
				uint unNameBufLen,
				out float pflPercent,
				[MarshalAs(UnmanagedType.U1)] ref bool pbAchieved);

			[DllImport("libsteam_api.dylib")]
			internal static extern int SteamAPI_ISteamUserStats_GetNextMostAchievedAchievementInfo(
				IntPtr ISteamUserStats,
				int iIteratorPrevious,
				StringBuilder pchName,
				uint unNameBufLen,
				out float pflPercent,
				[MarshalAs(UnmanagedType.U1)] ref bool pbAchieved);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamUserStats_GetAchievementAchievedPercent(
				IntPtr ISteamUserStats,
				string pchName,
				out float pflPercent);

			[DllImport("libsteam_api.dylib")]
			internal static extern SteamAPICall_t SteamAPI_ISteamUserStats_RequestGlobalStats(
				IntPtr ISteamUserStats,
				int nHistoryDays);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamUserStats_GetGlobalStat(
				IntPtr ISteamUserStats,
				string pchStatName,
				out long pData);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamUserStats_GetGlobalStat0(
				IntPtr ISteamUserStats,
				string pchStatName,
				out double pData);

			[DllImport("libsteam_api.dylib")]
			internal static extern int SteamAPI_ISteamUserStats_GetGlobalStatHistory(
				IntPtr ISteamUserStats,
				string pchStatName,
				out long pData,
				uint cubData);

			[DllImport("libsteam_api.dylib")]
			internal static extern int SteamAPI_ISteamUserStats_GetGlobalStatHistory0(
				IntPtr ISteamUserStats,
				string pchStatName,
				out double pData,
				uint cubData);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamApps_BIsSubscribed(IntPtr ISteamApps);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamApps_BIsLowViolence(IntPtr ISteamApps);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamApps_BIsCybercafe(IntPtr ISteamApps);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamApps_BIsVACBanned(IntPtr ISteamApps);

			[DllImport("libsteam_api.dylib")]
			internal static extern IntPtr SteamAPI_ISteamApps_GetCurrentGameLanguage(IntPtr ISteamApps);

			[DllImport("libsteam_api.dylib")]
			internal static extern IntPtr SteamAPI_ISteamApps_GetAvailableGameLanguages(
				IntPtr ISteamApps);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamApps_BIsSubscribedApp(
				IntPtr ISteamApps,
				uint appID);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamApps_BIsDlcInstalled(
				IntPtr ISteamApps,
				uint appID);

			[DllImport("libsteam_api.dylib")]
			internal static extern uint SteamAPI_ISteamApps_GetEarliestPurchaseUnixTime(
				IntPtr ISteamApps,
				uint nAppID);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamApps_BIsSubscribedFromFreeWeekend(
				IntPtr ISteamApps);

			[DllImport("libsteam_api.dylib")]
			internal static extern int SteamAPI_ISteamApps_GetDLCCount(IntPtr ISteamApps);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamApps_BGetDLCDataByIndex(
				IntPtr ISteamApps,
				int iDLC,
				ref uint pAppID,
				[MarshalAs(UnmanagedType.U1)] ref bool pbAvailable,
				StringBuilder pchName,
				int cchNameBufferSize);

			[DllImport("libsteam_api.dylib")]
			internal static extern void SteamAPI_ISteamApps_InstallDLC(IntPtr ISteamApps, uint nAppID);

			[DllImport("libsteam_api.dylib")]
			internal static extern void SteamAPI_ISteamApps_UninstallDLC(IntPtr ISteamApps, uint nAppID);

			[DllImport("libsteam_api.dylib")]
			internal static extern void SteamAPI_ISteamApps_RequestAppProofOfPurchaseKey(
				IntPtr ISteamApps,
				uint nAppID);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamApps_GetCurrentBetaName(
				IntPtr ISteamApps,
				StringBuilder pchName,
				int cchNameBufferSize);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamApps_MarkContentCorrupt(
				IntPtr ISteamApps,
				[MarshalAs(UnmanagedType.U1)] bool bMissingFilesOnly);

			[DllImport("libsteam_api.dylib")]
			internal static extern uint SteamAPI_ISteamApps_GetInstalledDepots(
				IntPtr ISteamApps,
				uint appID,
				IntPtr pvecDepots,
				uint cMaxDepots);

			[DllImport("libsteam_api.dylib")]
			internal static extern uint SteamAPI_ISteamApps_GetAppInstallDir(
				IntPtr ISteamApps,
				uint appID,
				StringBuilder pchFolder,
				uint cchFolderBufferSize);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamApps_BIsAppInstalled(
				IntPtr ISteamApps,
				uint appID);

			[DllImport("libsteam_api.dylib")]
			internal static extern CSteamID SteamAPI_ISteamApps_GetAppOwner(IntPtr ISteamApps);

			[DllImport("libsteam_api.dylib")]
			internal static extern IntPtr SteamAPI_ISteamApps_GetLaunchQueryParam(
				IntPtr ISteamApps,
				string pchKey);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamApps_GetDlcDownloadProgress(
				IntPtr ISteamApps,
				uint nAppID,
				out ulong punBytesDownloaded,
				out ulong punBytesTotal);

			[DllImport("libsteam_api.dylib")]
			internal static extern int SteamAPI_ISteamApps_GetAppBuildId(IntPtr ISteamApps);

			[DllImport("libsteam_api.dylib")]
			internal static extern void SteamAPI_ISteamApps_RequestAllProofOfPurchaseKeys(
				IntPtr ISteamApps);

			[DllImport("libsteam_api.dylib")]
			internal static extern SteamAPICall_t SteamAPI_ISteamApps_GetFileDetails(
				IntPtr ISteamApps,
				string pszFileName);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamNetworking_SendP2PPacket(
				IntPtr ISteamNetworking,
				ulong steamIDRemote,
				IntPtr pubData,
				uint cubData,
				P2PSend eP2PSendType,
				int nChannel);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamNetworking_IsP2PPacketAvailable(
				IntPtr ISteamNetworking,
				out uint pcubMsgSize,
				int nChannel);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamNetworking_ReadP2PPacket(
				IntPtr ISteamNetworking,
				IntPtr pubDest,
				uint cubDest,
				out uint pcubMsgSize,
				out ulong psteamIDRemote,
				int nChannel);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamNetworking_AcceptP2PSessionWithUser(
				IntPtr ISteamNetworking,
				ulong steamIDRemote);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamNetworking_CloseP2PSessionWithUser(
				IntPtr ISteamNetworking,
				ulong steamIDRemote);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamNetworking_CloseP2PChannelWithUser(
				IntPtr ISteamNetworking,
				ulong steamIDRemote,
				int nChannel);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamNetworking_GetP2PSessionState(
				IntPtr ISteamNetworking,
				ulong steamIDRemote,
				ref P2PSessionState_t.PackSmall pConnectionState);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamNetworking_AllowP2PPacketRelay(
				IntPtr ISteamNetworking,
				[MarshalAs(UnmanagedType.U1)] bool bAllow);

			[DllImport("libsteam_api.dylib")]
			internal static extern SNetListenSocket_t SteamAPI_ISteamNetworking_CreateListenSocket(
				IntPtr ISteamNetworking,
				int nVirtualP2PPort,
				uint nIP,
				ushort nPort,
				[MarshalAs(UnmanagedType.U1)] bool bAllowUseOfPacketRelay);

			[DllImport("libsteam_api.dylib")]
			internal static extern SNetSocket_t SteamAPI_ISteamNetworking_CreateP2PConnectionSocket(
				IntPtr ISteamNetworking,
				ulong steamIDTarget,
				int nVirtualPort,
				int nTimeoutSec,
				[MarshalAs(UnmanagedType.U1)] bool bAllowUseOfPacketRelay);

			[DllImport("libsteam_api.dylib")]
			internal static extern SNetSocket_t SteamAPI_ISteamNetworking_CreateConnectionSocket(
				IntPtr ISteamNetworking,
				uint nIP,
				ushort nPort,
				int nTimeoutSec);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamNetworking_DestroySocket(
				IntPtr ISteamNetworking,
				uint hSocket,
				[MarshalAs(UnmanagedType.U1)] bool bNotifyRemoteEnd);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamNetworking_DestroyListenSocket(
				IntPtr ISteamNetworking,
				uint hSocket,
				[MarshalAs(UnmanagedType.U1)] bool bNotifyRemoteEnd);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamNetworking_SendDataOnSocket(
				IntPtr ISteamNetworking,
				uint hSocket,
				IntPtr pubData,
				uint cubData,
				[MarshalAs(UnmanagedType.U1)] bool bReliable);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamNetworking_IsDataAvailableOnSocket(
				IntPtr ISteamNetworking,
				uint hSocket,
				out uint pcubMsgSize);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamNetworking_RetrieveDataFromSocket(
				IntPtr ISteamNetworking,
				uint hSocket,
				IntPtr pubDest,
				uint cubDest,
				out uint pcubMsgSize);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamNetworking_IsDataAvailable(
				IntPtr ISteamNetworking,
				uint hListenSocket,
				out uint pcubMsgSize,
				ref uint phSocket);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamNetworking_RetrieveData(
				IntPtr ISteamNetworking,
				uint hListenSocket,
				IntPtr pubDest,
				uint cubDest,
				out uint pcubMsgSize,
				ref uint phSocket);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamNetworking_GetSocketInfo(
				IntPtr ISteamNetworking,
				uint hSocket,
				out ulong pSteamIDRemote,
				IntPtr peSocketStatus,
				out uint punIPRemote,
				out ushort punPortRemote);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamNetworking_GetListenSocketInfo(
				IntPtr ISteamNetworking,
				uint hListenSocket,
				out uint pnIP,
				out ushort pnPort);

			[DllImport("libsteam_api.dylib")]
			internal static extern SNetSocketConnectionType SteamAPI_ISteamNetworking_GetSocketConnectionType(
				IntPtr ISteamNetworking,
				uint hSocket);

			[DllImport("libsteam_api.dylib")]
			internal static extern int SteamAPI_ISteamNetworking_GetMaxPacketSize(
				IntPtr ISteamNetworking,
				uint hSocket);

			[DllImport("libsteam_api.dylib")]
			internal static extern ScreenshotHandle SteamAPI_ISteamScreenshots_WriteScreenshot(
				IntPtr ISteamScreenshots,
				IntPtr pubRGB,
				uint cubRGB,
				int nWidth,
				int nHeight);

			[DllImport("libsteam_api.dylib")]
			internal static extern ScreenshotHandle SteamAPI_ISteamScreenshots_AddScreenshotToLibrary(
				IntPtr ISteamScreenshots,
				string pchFilename,
				string pchThumbnailFilename,
				int nWidth,
				int nHeight);

			[DllImport("libsteam_api.dylib")]
			internal static extern void SteamAPI_ISteamScreenshots_TriggerScreenshot(
				IntPtr ISteamScreenshots);

			[DllImport("libsteam_api.dylib")]
			internal static extern void SteamAPI_ISteamScreenshots_HookScreenshots(
				IntPtr ISteamScreenshots,
				[MarshalAs(UnmanagedType.U1)] bool bHook);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamScreenshots_SetLocation(
				IntPtr ISteamScreenshots,
				uint hScreenshot,
				string pchLocation);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamScreenshots_TagUser(
				IntPtr ISteamScreenshots,
				uint hScreenshot,
				ulong steamID);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamScreenshots_TagPublishedFile(
				IntPtr ISteamScreenshots,
				uint hScreenshot,
				ulong unPublishedFileID);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamScreenshots_IsScreenshotsHooked(
				IntPtr ISteamScreenshots);

			[DllImport("libsteam_api.dylib")]
			internal static extern ScreenshotHandle SteamAPI_ISteamScreenshots_AddVRScreenshotToLibrary(
				IntPtr ISteamScreenshots,
				VRScreenshotType eType,
				string pchFilename,
				string pchVRFilename);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamMusic_BIsEnabled(IntPtr ISteamMusic);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamMusic_BIsPlaying(IntPtr ISteamMusic);

			[DllImport("libsteam_api.dylib")]
			internal static extern AudioPlayback_Status SteamAPI_ISteamMusic_GetPlaybackStatus(
				IntPtr ISteamMusic);

			[DllImport("libsteam_api.dylib")]
			internal static extern void SteamAPI_ISteamMusic_Play(IntPtr ISteamMusic);

			[DllImport("libsteam_api.dylib")]
			internal static extern void SteamAPI_ISteamMusic_Pause(IntPtr ISteamMusic);

			[DllImport("libsteam_api.dylib")]
			internal static extern void SteamAPI_ISteamMusic_PlayPrevious(IntPtr ISteamMusic);

			[DllImport("libsteam_api.dylib")]
			internal static extern void SteamAPI_ISteamMusic_PlayNext(IntPtr ISteamMusic);

			[DllImport("libsteam_api.dylib")]
			internal static extern void SteamAPI_ISteamMusic_SetVolume(
				IntPtr ISteamMusic,
				float flVolume);

			[DllImport("libsteam_api.dylib")]
			internal static extern float SteamAPI_ISteamMusic_GetVolume(IntPtr ISteamMusic);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamMusicRemote_RegisterSteamMusicRemote(
				IntPtr ISteamMusicRemote,
				string pchName);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamMusicRemote_DeregisterSteamMusicRemote(
				IntPtr ISteamMusicRemote);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamMusicRemote_BIsCurrentMusicRemote(
				IntPtr ISteamMusicRemote);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamMusicRemote_BActivationSuccess(
				IntPtr ISteamMusicRemote,
				[MarshalAs(UnmanagedType.U1)] bool bValue);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamMusicRemote_SetDisplayName(
				IntPtr ISteamMusicRemote,
				string pchDisplayName);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamMusicRemote_SetPNGIcon_64x64(
				IntPtr ISteamMusicRemote,
				IntPtr pvBuffer,
				uint cbBufferLength);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamMusicRemote_EnablePlayPrevious(
				IntPtr ISteamMusicRemote,
				[MarshalAs(UnmanagedType.U1)] bool bValue);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamMusicRemote_EnablePlayNext(
				IntPtr ISteamMusicRemote,
				[MarshalAs(UnmanagedType.U1)] bool bValue);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamMusicRemote_EnableShuffled(
				IntPtr ISteamMusicRemote,
				[MarshalAs(UnmanagedType.U1)] bool bValue);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamMusicRemote_EnableLooped(
				IntPtr ISteamMusicRemote,
				[MarshalAs(UnmanagedType.U1)] bool bValue);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamMusicRemote_EnableQueue(
				IntPtr ISteamMusicRemote,
				[MarshalAs(UnmanagedType.U1)] bool bValue);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamMusicRemote_EnablePlaylists(
				IntPtr ISteamMusicRemote,
				[MarshalAs(UnmanagedType.U1)] bool bValue);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamMusicRemote_UpdatePlaybackStatus(
				IntPtr ISteamMusicRemote,
				AudioPlayback_Status nStatus);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamMusicRemote_UpdateShuffled(
				IntPtr ISteamMusicRemote,
				[MarshalAs(UnmanagedType.U1)] bool bValue);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamMusicRemote_UpdateLooped(
				IntPtr ISteamMusicRemote,
				[MarshalAs(UnmanagedType.U1)] bool bValue);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamMusicRemote_UpdateVolume(
				IntPtr ISteamMusicRemote,
				float flValue);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamMusicRemote_CurrentEntryWillChange(
				IntPtr ISteamMusicRemote);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamMusicRemote_CurrentEntryIsAvailable(
				IntPtr ISteamMusicRemote,
				[MarshalAs(UnmanagedType.U1)] bool bAvailable);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamMusicRemote_UpdateCurrentEntryText(
				IntPtr ISteamMusicRemote,
				string pchText);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamMusicRemote_UpdateCurrentEntryElapsedSeconds(
				IntPtr ISteamMusicRemote,
				int nValue);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamMusicRemote_UpdateCurrentEntryCoverArt(
				IntPtr ISteamMusicRemote,
				IntPtr pvBuffer,
				uint cbBufferLength);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamMusicRemote_CurrentEntryDidChange(
				IntPtr ISteamMusicRemote);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamMusicRemote_QueueWillChange(
				IntPtr ISteamMusicRemote);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamMusicRemote_ResetQueueEntries(
				IntPtr ISteamMusicRemote);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamMusicRemote_SetQueueEntry(
				IntPtr ISteamMusicRemote,
				int nID,
				int nPosition,
				string pchEntryText);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamMusicRemote_SetCurrentQueueEntry(
				IntPtr ISteamMusicRemote,
				int nID);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamMusicRemote_QueueDidChange(
				IntPtr ISteamMusicRemote);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamMusicRemote_PlaylistWillChange(
				IntPtr ISteamMusicRemote);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamMusicRemote_ResetPlaylistEntries(
				IntPtr ISteamMusicRemote);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamMusicRemote_SetPlaylistEntry(
				IntPtr ISteamMusicRemote,
				int nID,
				int nPosition,
				string pchEntryText);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamMusicRemote_SetCurrentPlaylistEntry(
				IntPtr ISteamMusicRemote,
				int nID);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamMusicRemote_PlaylistDidChange(
				IntPtr ISteamMusicRemote);

			[DllImport("libsteam_api.dylib")]
			internal static extern HTTPRequestHandle SteamAPI_ISteamHTTP_CreateHTTPRequest(
				IntPtr ISteamHTTP,
				HTTPMethod eHTTPRequestMethod,
				string pchAbsoluteURL);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamHTTP_SetHTTPRequestContextValue(
				IntPtr ISteamHTTP,
				uint hRequest,
				ulong ulContextValue);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamHTTP_SetHTTPRequestNetworkActivityTimeout(
				IntPtr ISteamHTTP,
				uint hRequest,
				uint unTimeoutSeconds);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamHTTP_SetHTTPRequestHeaderValue(
				IntPtr ISteamHTTP,
				uint hRequest,
				string pchHeaderName,
				string pchHeaderValue);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamHTTP_SetHTTPRequestGetOrPostParameter(
				IntPtr ISteamHTTP,
				uint hRequest,
				string pchParamName,
				string pchParamValue);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamHTTP_SendHTTPRequest(
				IntPtr ISteamHTTP,
				uint hRequest,
				ref ulong pCallHandle);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamHTTP_SendHTTPRequestAndStreamResponse(
				IntPtr ISteamHTTP,
				uint hRequest,
				ref ulong pCallHandle);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamHTTP_DeferHTTPRequest(
				IntPtr ISteamHTTP,
				uint hRequest);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamHTTP_PrioritizeHTTPRequest(
				IntPtr ISteamHTTP,
				uint hRequest);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamHTTP_GetHTTPResponseHeaderSize(
				IntPtr ISteamHTTP,
				uint hRequest,
				string pchHeaderName,
				out uint unResponseHeaderSize);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamHTTP_GetHTTPResponseHeaderValue(
				IntPtr ISteamHTTP,
				uint hRequest,
				string pchHeaderName,
				out byte pHeaderValueBuffer,
				uint unBufferSize);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamHTTP_GetHTTPResponseBodySize(
				IntPtr ISteamHTTP,
				uint hRequest,
				out uint unBodySize);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamHTTP_GetHTTPResponseBodyData(
				IntPtr ISteamHTTP,
				uint hRequest,
				out byte pBodyDataBuffer,
				uint unBufferSize);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamHTTP_GetHTTPStreamingResponseBodyData(
				IntPtr ISteamHTTP,
				uint hRequest,
				uint cOffset,
				out byte pBodyDataBuffer,
				uint unBufferSize);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamHTTP_ReleaseHTTPRequest(
				IntPtr ISteamHTTP,
				uint hRequest);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamHTTP_GetHTTPDownloadProgressPct(
				IntPtr ISteamHTTP,
				uint hRequest,
				out float pflPercentOut);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamHTTP_SetHTTPRequestRawPostBody(
				IntPtr ISteamHTTP,
				uint hRequest,
				string pchContentType,
				out byte pubBody,
				uint unBodyLen);

			[DllImport("libsteam_api.dylib")]
			internal static extern HTTPCookieContainerHandle SteamAPI_ISteamHTTP_CreateCookieContainer(
				IntPtr ISteamHTTP,
				[MarshalAs(UnmanagedType.U1)] bool bAllowResponsesToModify);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamHTTP_ReleaseCookieContainer(
				IntPtr ISteamHTTP,
				uint hCookieContainer);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamHTTP_SetCookie(
				IntPtr ISteamHTTP,
				uint hCookieContainer,
				string pchHost,
				string pchUrl,
				string pchCookie);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamHTTP_SetHTTPRequestCookieContainer(
				IntPtr ISteamHTTP,
				uint hRequest,
				uint hCookieContainer);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamHTTP_SetHTTPRequestUserAgentInfo(
				IntPtr ISteamHTTP,
				uint hRequest,
				string pchUserAgentInfo);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamHTTP_SetHTTPRequestRequiresVerifiedCertificate(
				IntPtr ISteamHTTP,
				uint hRequest,
				[MarshalAs(UnmanagedType.U1)] bool bRequireVerifiedCertificate);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamHTTP_SetHTTPRequestAbsoluteTimeoutMS(
				IntPtr ISteamHTTP,
				uint hRequest,
				uint unMilliseconds);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamHTTP_GetHTTPRequestWasTimedOut(
				IntPtr ISteamHTTP,
				uint hRequest,
				[MarshalAs(UnmanagedType.U1)] ref bool pbWasTimedOut);

			[DllImport("libsteam_api.dylib")]
			internal static extern ClientUnifiedMessageHandle SteamAPI_ISteamUnifiedMessages_SendMethod(
				IntPtr ISteamUnifiedMessages,
				string pchServiceMethod,
				IntPtr pRequestBuffer,
				uint unRequestBufferSize,
				ulong unContext);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamUnifiedMessages_GetMethodResponseInfo(
				IntPtr ISteamUnifiedMessages,
				ulong hHandle,
				out uint punResponseSize,
				out Result peResult);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamUnifiedMessages_GetMethodResponseData(
				IntPtr ISteamUnifiedMessages,
				ulong hHandle,
				IntPtr pResponseBuffer,
				uint unResponseBufferSize,
				[MarshalAs(UnmanagedType.U1)] bool bAutoRelease);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamUnifiedMessages_ReleaseMethod(
				IntPtr ISteamUnifiedMessages,
				ulong hHandle);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamUnifiedMessages_SendNotification(
				IntPtr ISteamUnifiedMessages,
				string pchServiceNotification,
				IntPtr pNotificationBuffer,
				uint unNotificationBufferSize);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamController_Init(IntPtr ISteamController);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamController_Shutdown(IntPtr ISteamController);

			[DllImport("libsteam_api.dylib")]
			internal static extern void SteamAPI_ISteamController_RunFrame(IntPtr ISteamController);

			[DllImport("libsteam_api.dylib")]
			internal static extern int SteamAPI_ISteamController_GetConnectedControllers(
				IntPtr ISteamController,
				IntPtr handlesOut);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamController_ShowBindingPanel(
				IntPtr ISteamController,
				ulong controllerHandle);

			[DllImport("libsteam_api.dylib")]
			internal static extern ControllerActionSetHandle_t SteamAPI_ISteamController_GetActionSetHandle(
				IntPtr ISteamController,
				string pszActionSetName);

			[DllImport("libsteam_api.dylib")]
			internal static extern void SteamAPI_ISteamController_ActivateActionSet(
				IntPtr ISteamController,
				ulong controllerHandle,
				ulong actionSetHandle);

			[DllImport("libsteam_api.dylib")]
			internal static extern ControllerActionSetHandle_t SteamAPI_ISteamController_GetCurrentActionSet(
				IntPtr ISteamController,
				ulong controllerHandle);

			[DllImport("libsteam_api.dylib")]
			internal static extern ControllerDigitalActionHandle_t SteamAPI_ISteamController_GetDigitalActionHandle(
				IntPtr ISteamController,
				string pszActionName);

			[DllImport("libsteam_api.dylib")]
			internal static extern ControllerDigitalActionData_t SteamAPI_ISteamController_GetDigitalActionData(
				IntPtr ISteamController,
				ulong controllerHandle,
				ulong digitalActionHandle);

			[DllImport("libsteam_api.dylib")]
			internal static extern int SteamAPI_ISteamController_GetDigitalActionOrigins(
				IntPtr ISteamController,
				ulong controllerHandle,
				ulong actionSetHandle,
				ulong digitalActionHandle,
				out ControllerActionOrigin originsOut);

			[DllImport("libsteam_api.dylib")]
			internal static extern ControllerAnalogActionHandle_t SteamAPI_ISteamController_GetAnalogActionHandle(
				IntPtr ISteamController,
				string pszActionName);

			[DllImport("libsteam_api.dylib")]
			internal static extern ControllerAnalogActionData_t SteamAPI_ISteamController_GetAnalogActionData(
				IntPtr ISteamController,
				ulong controllerHandle,
				ulong analogActionHandle);

			[DllImport("libsteam_api.dylib")]
			internal static extern int SteamAPI_ISteamController_GetAnalogActionOrigins(
				IntPtr ISteamController,
				ulong controllerHandle,
				ulong actionSetHandle,
				ulong analogActionHandle,
				out ControllerActionOrigin originsOut);

			[DllImport("libsteam_api.dylib")]
			internal static extern void SteamAPI_ISteamController_StopAnalogActionMomentum(
				IntPtr ISteamController,
				ulong controllerHandle,
				ulong eAction);

			[DllImport("libsteam_api.dylib")]
			internal static extern void SteamAPI_ISteamController_TriggerHapticPulse(
				IntPtr ISteamController,
				ulong controllerHandle,
				SteamControllerPad eTargetPad,
				ushort usDurationMicroSec);

			[DllImport("libsteam_api.dylib")]
			internal static extern void SteamAPI_ISteamController_TriggerRepeatedHapticPulse(
				IntPtr ISteamController,
				ulong controllerHandle,
				SteamControllerPad eTargetPad,
				ushort usDurationMicroSec,
				ushort usOffMicroSec,
				ushort unRepeat,
				uint nFlags);

			[DllImport("libsteam_api.dylib")]
			internal static extern void SteamAPI_ISteamController_TriggerVibration(
				IntPtr ISteamController,
				ulong controllerHandle,
				ushort usLeftSpeed,
				ushort usRightSpeed);

			[DllImport("libsteam_api.dylib")]
			internal static extern void SteamAPI_ISteamController_SetLEDColor(
				IntPtr ISteamController,
				ulong controllerHandle,
				byte nColorR,
				byte nColorG,
				byte nColorB,
				uint nFlags);

			[DllImport("libsteam_api.dylib")]
			internal static extern int SteamAPI_ISteamController_GetGamepadIndexForController(
				IntPtr ISteamController,
				ulong ulControllerHandle);

			[DllImport("libsteam_api.dylib")]
			internal static extern ControllerHandle_t SteamAPI_ISteamController_GetControllerForGamepadIndex(
				IntPtr ISteamController,
				int nIndex);

			[DllImport("libsteam_api.dylib")]
			internal static extern ControllerMotionData_t SteamAPI_ISteamController_GetMotionData(
				IntPtr ISteamController,
				ulong controllerHandle);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamController_ShowDigitalActionOrigins(
				IntPtr ISteamController,
				ulong controllerHandle,
				ulong digitalActionHandle,
				float flScale,
				float flXPosition,
				float flYPosition);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamController_ShowAnalogActionOrigins(
				IntPtr ISteamController,
				ulong controllerHandle,
				ulong analogActionHandle,
				float flScale,
				float flXPosition,
				float flYPosition);

			[DllImport("libsteam_api.dylib")]
			internal static extern IntPtr SteamAPI_ISteamController_GetStringForActionOrigin(
				IntPtr ISteamController,
				ControllerActionOrigin eOrigin);

			[DllImport("libsteam_api.dylib")]
			internal static extern IntPtr SteamAPI_ISteamController_GetGlyphForActionOrigin(
				IntPtr ISteamController,
				ControllerActionOrigin eOrigin);

			[DllImport("libsteam_api.dylib")]
			internal static extern UGCQueryHandle_t SteamAPI_ISteamUGC_CreateQueryUserUGCRequest(
				IntPtr ISteamUGC,
				uint unAccountID,
				UserUGCList eListType,
				UGCMatchingUGCType eMatchingUGCType,
				UserUGCListSortOrder eSortOrder,
				uint nCreatorAppID,
				uint nConsumerAppID,
				uint unPage);

			[DllImport("libsteam_api.dylib")]
			internal static extern UGCQueryHandle_t SteamAPI_ISteamUGC_CreateQueryAllUGCRequest(
				IntPtr ISteamUGC,
				UGCQuery eQueryType,
				UGCMatchingUGCType eMatchingeMatchingUGCTypeFileType,
				uint nCreatorAppID,
				uint nConsumerAppID,
				uint unPage);

			[DllImport("libsteam_api.dylib")]
			internal static extern UGCQueryHandle_t SteamAPI_ISteamUGC_CreateQueryUGCDetailsRequest(
				IntPtr ISteamUGC,
				IntPtr pvecPublishedFileID,
				uint unNumPublishedFileIDs);

			[DllImport("libsteam_api.dylib")]
			internal static extern SteamAPICall_t SteamAPI_ISteamUGC_SendQueryUGCRequest(
				IntPtr ISteamUGC,
				ulong handle);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamUGC_GetQueryUGCResult(
				IntPtr ISteamUGC,
				ulong handle,
				uint index,
				ref SteamUGCDetails_t.PackSmall pDetails);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamUGC_GetQueryUGCPreviewURL(
				IntPtr ISteamUGC,
				ulong handle,
				uint index,
				StringBuilder pchURL,
				uint cchURLSize);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamUGC_GetQueryUGCMetadata(
				IntPtr ISteamUGC,
				ulong handle,
				uint index,
				StringBuilder pchMetadata,
				uint cchMetadatasize);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamUGC_GetQueryUGCChildren(
				IntPtr ISteamUGC,
				ulong handle,
				uint index,
				IntPtr pvecPublishedFileID,
				uint cMaxEntries);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamUGC_GetQueryUGCStatistic(
				IntPtr ISteamUGC,
				ulong handle,
				uint index,
				ItemStatistic eStatType,
				out ulong pStatValue);

			[DllImport("libsteam_api.dylib")]
			internal static extern uint SteamAPI_ISteamUGC_GetQueryUGCNumAdditionalPreviews(
				IntPtr ISteamUGC,
				ulong handle,
				uint index);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamUGC_GetQueryUGCAdditionalPreview(
				IntPtr ISteamUGC,
				ulong handle,
				uint index,
				uint previewIndex,
				StringBuilder pchURLOrVideoID,
				uint cchURLSize,
				StringBuilder pchOriginalFileName,
				uint cchOriginalFileNameSize,
				out ItemPreviewType pPreviewType);

			[DllImport("libsteam_api.dylib")]
			internal static extern uint SteamAPI_ISteamUGC_GetQueryUGCNumKeyValueTags(
				IntPtr ISteamUGC,
				ulong handle,
				uint index);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamUGC_GetQueryUGCKeyValueTag(
				IntPtr ISteamUGC,
				ulong handle,
				uint index,
				uint keyValueTagIndex,
				StringBuilder pchKey,
				uint cchKeySize,
				StringBuilder pchValue,
				uint cchValueSize);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamUGC_ReleaseQueryUGCRequest(
				IntPtr ISteamUGC,
				ulong handle);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamUGC_AddRequiredTag(
				IntPtr ISteamUGC,
				ulong handle,
				string pTagName);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamUGC_AddExcludedTag(
				IntPtr ISteamUGC,
				ulong handle,
				string pTagName);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamUGC_SetReturnOnlyIDs(
				IntPtr ISteamUGC,
				ulong handle,
				[MarshalAs(UnmanagedType.U1)] bool bReturnOnlyIDs);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamUGC_SetReturnKeyValueTags(
				IntPtr ISteamUGC,
				ulong handle,
				[MarshalAs(UnmanagedType.U1)] bool bReturnKeyValueTags);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamUGC_SetReturnLongDescription(
				IntPtr ISteamUGC,
				ulong handle,
				[MarshalAs(UnmanagedType.U1)] bool bReturnLongDescription);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamUGC_SetReturnMetadata(
				IntPtr ISteamUGC,
				ulong handle,
				[MarshalAs(UnmanagedType.U1)] bool bReturnMetadata);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamUGC_SetReturnChildren(
				IntPtr ISteamUGC,
				ulong handle,
				[MarshalAs(UnmanagedType.U1)] bool bReturnChildren);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamUGC_SetReturnAdditionalPreviews(
				IntPtr ISteamUGC,
				ulong handle,
				[MarshalAs(UnmanagedType.U1)] bool bReturnAdditionalPreviews);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamUGC_SetReturnTotalOnly(
				IntPtr ISteamUGC,
				ulong handle,
				[MarshalAs(UnmanagedType.U1)] bool bReturnTotalOnly);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamUGC_SetReturnPlaytimeStats(
				IntPtr ISteamUGC,
				ulong handle,
				uint unDays);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamUGC_SetLanguage(
				IntPtr ISteamUGC,
				ulong handle,
				string pchLanguage);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamUGC_SetAllowCachedResponse(
				IntPtr ISteamUGC,
				ulong handle,
				uint unMaxAgeSeconds);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamUGC_SetCloudFileNameFilter(
				IntPtr ISteamUGC,
				ulong handle,
				string pMatchCloudFileName);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamUGC_SetMatchAnyTag(
				IntPtr ISteamUGC,
				ulong handle,
				[MarshalAs(UnmanagedType.U1)] bool bMatchAnyTag);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamUGC_SetSearchText(
				IntPtr ISteamUGC,
				ulong handle,
				string pSearchText);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamUGC_SetRankedByTrendDays(
				IntPtr ISteamUGC,
				ulong handle,
				uint unDays);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamUGC_AddRequiredKeyValueTag(
				IntPtr ISteamUGC,
				ulong handle,
				string pKey,
				string pValue);

			[DllImport("libsteam_api.dylib")]
			internal static extern SteamAPICall_t SteamAPI_ISteamUGC_RequestUGCDetails(
				IntPtr ISteamUGC,
				ulong nPublishedFileID,
				uint unMaxAgeSeconds);

			[DllImport("libsteam_api.dylib")]
			internal static extern SteamAPICall_t SteamAPI_ISteamUGC_CreateItem(
				IntPtr ISteamUGC,
				uint nConsumerAppId,
				WorkshopFileType eFileType);

			[DllImport("libsteam_api.dylib")]
			internal static extern UGCUpdateHandle_t SteamAPI_ISteamUGC_StartItemUpdate(
				IntPtr ISteamUGC,
				uint nConsumerAppId,
				ulong nPublishedFileID);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamUGC_SetItemTitle(
				IntPtr ISteamUGC,
				ulong handle,
				string pchTitle);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamUGC_SetItemDescription(
				IntPtr ISteamUGC,
				ulong handle,
				string pchDescription);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamUGC_SetItemUpdateLanguage(
				IntPtr ISteamUGC,
				ulong handle,
				string pchLanguage);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamUGC_SetItemMetadata(
				IntPtr ISteamUGC,
				ulong handle,
				string pchMetaData);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamUGC_SetItemVisibility(
				IntPtr ISteamUGC,
				ulong handle,
				RemoteStoragePublishedFileVisibility eVisibility);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamUGC_SetItemTags(
				IntPtr ISteamUGC,
				ulong updateHandle,
				ref SteamParamStringArray_t.PackSmall pTags);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamUGC_SetItemContent(
				IntPtr ISteamUGC,
				ulong handle,
				string pszContentFolder);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamUGC_SetItemPreview(
				IntPtr ISteamUGC,
				ulong handle,
				string pszPreviewFile);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamUGC_RemoveItemKeyValueTags(
				IntPtr ISteamUGC,
				ulong handle,
				string pchKey);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamUGC_AddItemKeyValueTag(
				IntPtr ISteamUGC,
				ulong handle,
				string pchKey,
				string pchValue);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamUGC_AddItemPreviewFile(
				IntPtr ISteamUGC,
				ulong handle,
				string pszPreviewFile,
				ItemPreviewType type);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamUGC_AddItemPreviewVideo(
				IntPtr ISteamUGC,
				ulong handle,
				string pszVideoID);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamUGC_UpdateItemPreviewFile(
				IntPtr ISteamUGC,
				ulong handle,
				uint index,
				string pszPreviewFile);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamUGC_UpdateItemPreviewVideo(
				IntPtr ISteamUGC,
				ulong handle,
				uint index,
				string pszVideoID);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamUGC_RemoveItemPreview(
				IntPtr ISteamUGC,
				ulong handle,
				uint index);

			[DllImport("libsteam_api.dylib")]
			internal static extern SteamAPICall_t SteamAPI_ISteamUGC_SubmitItemUpdate(
				IntPtr ISteamUGC,
				ulong handle,
				string pchChangeNote);

			[DllImport("libsteam_api.dylib")]
			internal static extern ItemUpdateStatus SteamAPI_ISteamUGC_GetItemUpdateProgress(
				IntPtr ISteamUGC,
				ulong handle,
				out ulong punBytesProcessed,
				out ulong punBytesTotal);

			[DllImport("libsteam_api.dylib")]
			internal static extern SteamAPICall_t SteamAPI_ISteamUGC_SetUserItemVote(
				IntPtr ISteamUGC,
				ulong nPublishedFileID,
				[MarshalAs(UnmanagedType.U1)] bool bVoteUp);

			[DllImport("libsteam_api.dylib")]
			internal static extern SteamAPICall_t SteamAPI_ISteamUGC_GetUserItemVote(
				IntPtr ISteamUGC,
				ulong nPublishedFileID);

			[DllImport("libsteam_api.dylib")]
			internal static extern SteamAPICall_t SteamAPI_ISteamUGC_AddItemToFavorites(
				IntPtr ISteamUGC,
				uint nAppId,
				ulong nPublishedFileID);

			[DllImport("libsteam_api.dylib")]
			internal static extern SteamAPICall_t SteamAPI_ISteamUGC_RemoveItemFromFavorites(
				IntPtr ISteamUGC,
				uint nAppId,
				ulong nPublishedFileID);

			[DllImport("libsteam_api.dylib")]
			internal static extern SteamAPICall_t SteamAPI_ISteamUGC_SubscribeItem(
				IntPtr ISteamUGC,
				ulong nPublishedFileID);

			[DllImport("libsteam_api.dylib")]
			internal static extern SteamAPICall_t SteamAPI_ISteamUGC_UnsubscribeItem(
				IntPtr ISteamUGC,
				ulong nPublishedFileID);

			[DllImport("libsteam_api.dylib")]
			internal static extern uint SteamAPI_ISteamUGC_GetNumSubscribedItems(IntPtr ISteamUGC);

			[DllImport("libsteam_api.dylib")]
			internal static extern uint SteamAPI_ISteamUGC_GetSubscribedItems(
				IntPtr ISteamUGC,
				IntPtr pvecPublishedFileID,
				uint cMaxEntries);

			[DllImport("libsteam_api.dylib")]
			internal static extern uint SteamAPI_ISteamUGC_GetItemState(
				IntPtr ISteamUGC,
				ulong nPublishedFileID);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamUGC_GetItemInstallInfo(
				IntPtr ISteamUGC,
				ulong nPublishedFileID,
				out ulong punSizeOnDisk,
				StringBuilder pchFolder,
				uint cchFolderSize,
				out uint punTimeStamp);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamUGC_GetItemDownloadInfo(
				IntPtr ISteamUGC,
				ulong nPublishedFileID,
				out ulong punBytesDownloaded,
				out ulong punBytesTotal);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamUGC_DownloadItem(
				IntPtr ISteamUGC,
				ulong nPublishedFileID,
				[MarshalAs(UnmanagedType.U1)] bool bHighPriority);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamUGC_BInitWorkshopForGameServer(
				IntPtr ISteamUGC,
				uint unWorkshopDepotID,
				string pszFolder);

			[DllImport("libsteam_api.dylib")]
			internal static extern void SteamAPI_ISteamUGC_SuspendDownloads(
				IntPtr ISteamUGC,
				[MarshalAs(UnmanagedType.U1)] bool bSuspend);

			[DllImport("libsteam_api.dylib")]
			internal static extern SteamAPICall_t SteamAPI_ISteamUGC_StartPlaytimeTracking(
				IntPtr ISteamUGC,
				IntPtr pvecPublishedFileID,
				uint unNumPublishedFileIDs);

			[DllImport("libsteam_api.dylib")]
			internal static extern SteamAPICall_t SteamAPI_ISteamUGC_StopPlaytimeTracking(
				IntPtr ISteamUGC,
				IntPtr pvecPublishedFileID,
				uint unNumPublishedFileIDs);

			[DllImport("libsteam_api.dylib")]
			internal static extern SteamAPICall_t SteamAPI_ISteamUGC_StopPlaytimeTrackingForAllItems(
				IntPtr ISteamUGC);

			[DllImport("libsteam_api.dylib")]
			internal static extern SteamAPICall_t SteamAPI_ISteamUGC_AddDependency(
				IntPtr ISteamUGC,
				ulong nParentPublishedFileID,
				ulong nChildPublishedFileID);

			[DllImport("libsteam_api.dylib")]
			internal static extern SteamAPICall_t SteamAPI_ISteamUGC_RemoveDependency(
				IntPtr ISteamUGC,
				ulong nParentPublishedFileID,
				ulong nChildPublishedFileID);

			[DllImport("libsteam_api.dylib")]
			internal static extern uint SteamAPI_ISteamAppList_GetNumInstalledApps(IntPtr ISteamAppList);

			[DllImport("libsteam_api.dylib")]
			internal static extern uint SteamAPI_ISteamAppList_GetInstalledApps(
				IntPtr ISteamAppList,
				IntPtr pvecAppID,
				uint unMaxAppIDs);

			[DllImport("libsteam_api.dylib")]
			internal static extern int SteamAPI_ISteamAppList_GetAppName(
				IntPtr ISteamAppList,
				uint nAppID,
				StringBuilder pchName,
				int cchNameMax);

			[DllImport("libsteam_api.dylib")]
			internal static extern int SteamAPI_ISteamAppList_GetAppInstallDir(
				IntPtr ISteamAppList,
				uint nAppID,
				StringBuilder pchDirectory,
				int cchNameMax);

			[DllImport("libsteam_api.dylib")]
			internal static extern int SteamAPI_ISteamAppList_GetAppBuildId(
				IntPtr ISteamAppList,
				uint nAppID);

			[DllImport("libsteam_api.dylib")]
			internal static extern void SteamAPI_ISteamHTMLSurface_DestructISteamHTMLSurface(
				IntPtr ISteamHTMLSurface);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamHTMLSurface_Init(IntPtr ISteamHTMLSurface);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamHTMLSurface_Shutdown(IntPtr ISteamHTMLSurface);

			[DllImport("libsteam_api.dylib")]
			internal static extern SteamAPICall_t SteamAPI_ISteamHTMLSurface_CreateBrowser(
				IntPtr ISteamHTMLSurface,
				string pchUserAgent,
				string pchUserCSS);

			[DllImport("libsteam_api.dylib")]
			internal static extern void SteamAPI_ISteamHTMLSurface_RemoveBrowser(
				IntPtr ISteamHTMLSurface,
				uint unBrowserHandle);

			[DllImport("libsteam_api.dylib")]
			internal static extern void SteamAPI_ISteamHTMLSurface_LoadURL(
				IntPtr ISteamHTMLSurface,
				uint unBrowserHandle,
				string pchURL,
				string pchPostData);

			[DllImport("libsteam_api.dylib")]
			internal static extern void SteamAPI_ISteamHTMLSurface_SetSize(
				IntPtr ISteamHTMLSurface,
				uint unBrowserHandle,
				uint unWidth,
				uint unHeight);

			[DllImport("libsteam_api.dylib")]
			internal static extern void SteamAPI_ISteamHTMLSurface_StopLoad(
				IntPtr ISteamHTMLSurface,
				uint unBrowserHandle);

			[DllImport("libsteam_api.dylib")]
			internal static extern void SteamAPI_ISteamHTMLSurface_Reload(
				IntPtr ISteamHTMLSurface,
				uint unBrowserHandle);

			[DllImport("libsteam_api.dylib")]
			internal static extern void SteamAPI_ISteamHTMLSurface_GoBack(
				IntPtr ISteamHTMLSurface,
				uint unBrowserHandle);

			[DllImport("libsteam_api.dylib")]
			internal static extern void SteamAPI_ISteamHTMLSurface_GoForward(
				IntPtr ISteamHTMLSurface,
				uint unBrowserHandle);

			[DllImport("libsteam_api.dylib")]
			internal static extern void SteamAPI_ISteamHTMLSurface_AddHeader(
				IntPtr ISteamHTMLSurface,
				uint unBrowserHandle,
				string pchKey,
				string pchValue);

			[DllImport("libsteam_api.dylib")]
			internal static extern void SteamAPI_ISteamHTMLSurface_ExecuteJavascript(
				IntPtr ISteamHTMLSurface,
				uint unBrowserHandle,
				string pchScript);

			[DllImport("libsteam_api.dylib")]
			internal static extern void SteamAPI_ISteamHTMLSurface_MouseUp(
				IntPtr ISteamHTMLSurface,
				uint unBrowserHandle,
				HTMLMouseButton eMouseButton);

			[DllImport("libsteam_api.dylib")]
			internal static extern void SteamAPI_ISteamHTMLSurface_MouseDown(
				IntPtr ISteamHTMLSurface,
				uint unBrowserHandle,
				HTMLMouseButton eMouseButton);

			[DllImport("libsteam_api.dylib")]
			internal static extern void SteamAPI_ISteamHTMLSurface_MouseDoubleClick(
				IntPtr ISteamHTMLSurface,
				uint unBrowserHandle,
				HTMLMouseButton eMouseButton);

			[DllImport("libsteam_api.dylib")]
			internal static extern void SteamAPI_ISteamHTMLSurface_MouseMove(
				IntPtr ISteamHTMLSurface,
				uint unBrowserHandle,
				int x,
				int y);

			[DllImport("libsteam_api.dylib")]
			internal static extern void SteamAPI_ISteamHTMLSurface_MouseWheel(
				IntPtr ISteamHTMLSurface,
				uint unBrowserHandle,
				int nDelta);

			[DllImport("libsteam_api.dylib")]
			internal static extern void SteamAPI_ISteamHTMLSurface_KeyDown(
				IntPtr ISteamHTMLSurface,
				uint unBrowserHandle,
				uint nNativeKeyCode,
				HTMLKeyModifiers eHTMLKeyModifiers);

			[DllImport("libsteam_api.dylib")]
			internal static extern void SteamAPI_ISteamHTMLSurface_KeyUp(
				IntPtr ISteamHTMLSurface,
				uint unBrowserHandle,
				uint nNativeKeyCode,
				HTMLKeyModifiers eHTMLKeyModifiers);

			[DllImport("libsteam_api.dylib")]
			internal static extern void SteamAPI_ISteamHTMLSurface_KeyChar(
				IntPtr ISteamHTMLSurface,
				uint unBrowserHandle,
				uint cUnicodeChar,
				HTMLKeyModifiers eHTMLKeyModifiers);

			[DllImport("libsteam_api.dylib")]
			internal static extern void SteamAPI_ISteamHTMLSurface_SetHorizontalScroll(
				IntPtr ISteamHTMLSurface,
				uint unBrowserHandle,
				uint nAbsolutePixelScroll);

			[DllImport("libsteam_api.dylib")]
			internal static extern void SteamAPI_ISteamHTMLSurface_SetVerticalScroll(
				IntPtr ISteamHTMLSurface,
				uint unBrowserHandle,
				uint nAbsolutePixelScroll);

			[DllImport("libsteam_api.dylib")]
			internal static extern void SteamAPI_ISteamHTMLSurface_SetKeyFocus(
				IntPtr ISteamHTMLSurface,
				uint unBrowserHandle,
				[MarshalAs(UnmanagedType.U1)] bool bHasKeyFocus);

			[DllImport("libsteam_api.dylib")]
			internal static extern void SteamAPI_ISteamHTMLSurface_ViewSource(
				IntPtr ISteamHTMLSurface,
				uint unBrowserHandle);

			[DllImport("libsteam_api.dylib")]
			internal static extern void SteamAPI_ISteamHTMLSurface_CopyToClipboard(
				IntPtr ISteamHTMLSurface,
				uint unBrowserHandle);

			[DllImport("libsteam_api.dylib")]
			internal static extern void SteamAPI_ISteamHTMLSurface_PasteFromClipboard(
				IntPtr ISteamHTMLSurface,
				uint unBrowserHandle);

			[DllImport("libsteam_api.dylib")]
			internal static extern void SteamAPI_ISteamHTMLSurface_Find(
				IntPtr ISteamHTMLSurface,
				uint unBrowserHandle,
				string pchSearchStr,
				[MarshalAs(UnmanagedType.U1)] bool bCurrentlyInFind,
				[MarshalAs(UnmanagedType.U1)] bool bReverse);

			[DllImport("libsteam_api.dylib")]
			internal static extern void SteamAPI_ISteamHTMLSurface_StopFind(
				IntPtr ISteamHTMLSurface,
				uint unBrowserHandle);

			[DllImport("libsteam_api.dylib")]
			internal static extern void SteamAPI_ISteamHTMLSurface_GetLinkAtPosition(
				IntPtr ISteamHTMLSurface,
				uint unBrowserHandle,
				int x,
				int y);

			[DllImport("libsteam_api.dylib")]
			internal static extern void SteamAPI_ISteamHTMLSurface_SetCookie(
				IntPtr ISteamHTMLSurface,
				string pchHostname,
				string pchKey,
				string pchValue,
				string pchPath,
				uint nExpires,
				[MarshalAs(UnmanagedType.U1)] bool bSecure,
				[MarshalAs(UnmanagedType.U1)] bool bHTTPOnly);

			[DllImport("libsteam_api.dylib")]
			internal static extern void SteamAPI_ISteamHTMLSurface_SetPageScaleFactor(
				IntPtr ISteamHTMLSurface,
				uint unBrowserHandle,
				float flZoom,
				int nPointX,
				int nPointY);

			[DllImport("libsteam_api.dylib")]
			internal static extern void SteamAPI_ISteamHTMLSurface_SetBackgroundMode(
				IntPtr ISteamHTMLSurface,
				uint unBrowserHandle,
				[MarshalAs(UnmanagedType.U1)] bool bBackgroundMode);

			[DllImport("libsteam_api.dylib")]
			internal static extern void SteamAPI_ISteamHTMLSurface_AllowStartRequest(
				IntPtr ISteamHTMLSurface,
				uint unBrowserHandle,
				[MarshalAs(UnmanagedType.U1)] bool bAllowed);

			[DllImport("libsteam_api.dylib")]
			internal static extern void SteamAPI_ISteamHTMLSurface_JSDialogResponse(
				IntPtr ISteamHTMLSurface,
				uint unBrowserHandle,
				[MarshalAs(UnmanagedType.U1)] bool bResult);

			[DllImport("libsteam_api.dylib")]
			internal static extern Result SteamAPI_ISteamInventory_GetResultStatus(
				IntPtr ISteamInventory,
				int resultHandle);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamInventory_GetResultItems(
				IntPtr ISteamInventory,
				int resultHandle,
				IntPtr pOutItemsArray,
				out uint punOutItemsArraySize);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamInventory_GetResultItemProperty(
				IntPtr ISteamInventory,
				int resultHandle,
				uint unItemIndex,
				string pchPropertyName,
				StringBuilder pchValueBuffer,
				out uint punValueBufferSizeOut);

			[DllImport("libsteam_api.dylib")]
			internal static extern uint SteamAPI_ISteamInventory_GetResultTimestamp(
				IntPtr ISteamInventory,
				int resultHandle);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamInventory_CheckResultSteamID(
				IntPtr ISteamInventory,
				int resultHandle,
				ulong steamIDExpected);

			[DllImport("libsteam_api.dylib")]
			internal static extern void SteamAPI_ISteamInventory_DestroyResult(
				IntPtr ISteamInventory,
				int resultHandle);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamInventory_GetAllItems(
				IntPtr ISteamInventory,
				ref int pResultHandle);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamInventory_GetItemsByID(
				IntPtr ISteamInventory,
				ref int pResultHandle,
				ulong[] pInstanceIDs,
				uint unCountInstanceIDs);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamInventory_SerializeResult(
				IntPtr ISteamInventory,
				int resultHandle,
				IntPtr pOutBuffer,
				out uint punOutBufferSize);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamInventory_DeserializeResult(
				IntPtr ISteamInventory,
				ref int pOutResultHandle,
				IntPtr pBuffer,
				uint unBufferSize,
				[MarshalAs(UnmanagedType.U1)] bool bRESERVED_MUST_BE_FALSE);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamInventory_GenerateItems(
				IntPtr ISteamInventory,
				ref int pResultHandle,
				int[] pArrayItemDefs,
				uint[] punArrayQuantity,
				uint unArrayLength);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamInventory_GrantPromoItems(
				IntPtr ISteamInventory,
				ref int pResultHandle);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamInventory_AddPromoItem(
				IntPtr ISteamInventory,
				ref int pResultHandle,
				int itemDef);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamInventory_AddPromoItems(
				IntPtr ISteamInventory,
				ref int pResultHandle,
				int[] pArrayItemDefs,
				uint unArrayLength);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamInventory_ConsumeItem(
				IntPtr ISteamInventory,
				ref int pResultHandle,
				ulong itemConsume,
				uint unQuantity);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamInventory_ExchangeItems(
				IntPtr ISteamInventory,
				ref int pResultHandle,
				int[] pArrayGenerate,
				uint[] punArrayGenerateQuantity,
				uint unArrayGenerateLength,
				ulong[] pArrayDestroy,
				uint[] punArrayDestroyQuantity,
				uint unArrayDestroyLength);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamInventory_TransferItemQuantity(
				IntPtr ISteamInventory,
				ref int pResultHandle,
				ulong itemIdSource,
				uint unQuantity,
				ulong itemIdDest);

			[DllImport("libsteam_api.dylib")]
			internal static extern void SteamAPI_ISteamInventory_SendItemDropHeartbeat(
				IntPtr ISteamInventory);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamInventory_TriggerItemDrop(
				IntPtr ISteamInventory,
				ref int pResultHandle,
				int dropListDefinition);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamInventory_TradeItems(
				IntPtr ISteamInventory,
				ref int pResultHandle,
				ulong steamIDTradePartner,
				ulong[] pArrayGive,
				uint[] pArrayGiveQuantity,
				uint nArrayGiveLength,
				ulong[] pArrayGet,
				uint[] pArrayGetQuantity,
				uint nArrayGetLength);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamInventory_LoadItemDefinitions(
				IntPtr ISteamInventory);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamInventory_GetItemDefinitionIDs(
				IntPtr ISteamInventory,
				IntPtr pItemDefIDs,
				out uint punItemDefIDsArraySize);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamInventory_GetItemDefinitionProperty(
				IntPtr ISteamInventory,
				int iDefinition,
				string pchPropertyName,
				StringBuilder pchValueBuffer,
				out uint punValueBufferSizeOut);

			[DllImport("libsteam_api.dylib")]
			internal static extern SteamAPICall_t SteamAPI_ISteamInventory_RequestEligiblePromoItemDefinitionsIDs(
				IntPtr ISteamInventory,
				ulong steamID);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamInventory_GetEligiblePromoItemDefinitionIDs(
				IntPtr ISteamInventory,
				ulong steamID,
				IntPtr pItemDefIDs,
				out uint punItemDefIDsArraySize);

			[DllImport("libsteam_api.dylib")]
			internal static extern void SteamAPI_ISteamVideo_GetVideoURL(
				IntPtr ISteamVideo,
				uint unVideoAppID);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamVideo_IsBroadcasting(
				IntPtr ISteamVideo,
				IntPtr pnNumViewers);

			[DllImport("libsteam_api.dylib")]
			internal static extern void SteamAPI_ISteamVideo_GetOPFSettings(
				IntPtr ISteamVideo,
				uint unVideoAppID);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamVideo_GetOPFStringForApp(
				IntPtr ISteamVideo,
				uint unVideoAppID,
				StringBuilder pchBuffer,
				out int pnBufferSize);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamGameServer_InitGameServer(
				IntPtr ISteamGameServer,
				uint unIP,
				ushort usGamePort,
				ushort usQueryPort,
				uint unFlags,
				uint nGameAppId,
				string pchVersionString);

			[DllImport("libsteam_api.dylib")]
			internal static extern void SteamAPI_ISteamGameServer_SetProduct(
				IntPtr ISteamGameServer,
				string pszProduct);

			[DllImport("libsteam_api.dylib")]
			internal static extern void SteamAPI_ISteamGameServer_SetGameDescription(
				IntPtr ISteamGameServer,
				string pszGameDescription);

			[DllImport("libsteam_api.dylib")]
			internal static extern void SteamAPI_ISteamGameServer_SetModDir(
				IntPtr ISteamGameServer,
				string pszModDir);

			[DllImport("libsteam_api.dylib")]
			internal static extern void SteamAPI_ISteamGameServer_SetDedicatedServer(
				IntPtr ISteamGameServer,
				[MarshalAs(UnmanagedType.U1)] bool bDedicated);

			[DllImport("libsteam_api.dylib")]
			internal static extern void SteamAPI_ISteamGameServer_LogOn(
				IntPtr ISteamGameServer,
				string pszToken);

			[DllImport("libsteam_api.dylib")]
			internal static extern void SteamAPI_ISteamGameServer_LogOnAnonymous(IntPtr ISteamGameServer);

			[DllImport("libsteam_api.dylib")]
			internal static extern void SteamAPI_ISteamGameServer_LogOff(IntPtr ISteamGameServer);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamGameServer_BLoggedOn(IntPtr ISteamGameServer);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamGameServer_BSecure(IntPtr ISteamGameServer);

			[DllImport("libsteam_api.dylib")]
			internal static extern CSteamID SteamAPI_ISteamGameServer_GetSteamID(IntPtr ISteamGameServer);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamGameServer_WasRestartRequested(
				IntPtr ISteamGameServer);

			[DllImport("libsteam_api.dylib")]
			internal static extern void SteamAPI_ISteamGameServer_SetMaxPlayerCount(
				IntPtr ISteamGameServer,
				int cPlayersMax);

			[DllImport("libsteam_api.dylib")]
			internal static extern void SteamAPI_ISteamGameServer_SetBotPlayerCount(
				IntPtr ISteamGameServer,
				int cBotplayers);

			[DllImport("libsteam_api.dylib")]
			internal static extern void SteamAPI_ISteamGameServer_SetServerName(
				IntPtr ISteamGameServer,
				string pszServerName);

			[DllImport("libsteam_api.dylib")]
			internal static extern void SteamAPI_ISteamGameServer_SetMapName(
				IntPtr ISteamGameServer,
				string pszMapName);

			[DllImport("libsteam_api.dylib")]
			internal static extern void SteamAPI_ISteamGameServer_SetPasswordProtected(
				IntPtr ISteamGameServer,
				[MarshalAs(UnmanagedType.U1)] bool bPasswordProtected);

			[DllImport("libsteam_api.dylib")]
			internal static extern void SteamAPI_ISteamGameServer_SetSpectatorPort(
				IntPtr ISteamGameServer,
				ushort unSpectatorPort);

			[DllImport("libsteam_api.dylib")]
			internal static extern void SteamAPI_ISteamGameServer_SetSpectatorServerName(
				IntPtr ISteamGameServer,
				string pszSpectatorServerName);

			[DllImport("libsteam_api.dylib")]
			internal static extern void SteamAPI_ISteamGameServer_ClearAllKeyValues(
				IntPtr ISteamGameServer);

			[DllImport("libsteam_api.dylib")]
			internal static extern void SteamAPI_ISteamGameServer_SetKeyValue(
				IntPtr ISteamGameServer,
				string pKey,
				string pValue);

			[DllImport("libsteam_api.dylib")]
			internal static extern void SteamAPI_ISteamGameServer_SetGameTags(
				IntPtr ISteamGameServer,
				string pchGameTags);

			[DllImport("libsteam_api.dylib")]
			internal static extern void SteamAPI_ISteamGameServer_SetGameData(
				IntPtr ISteamGameServer,
				string pchGameData);

			[DllImport("libsteam_api.dylib")]
			internal static extern void SteamAPI_ISteamGameServer_SetRegion(
				IntPtr ISteamGameServer,
				string pszRegion);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamGameServer_SendUserConnectAndAuthenticate(
				IntPtr ISteamGameServer,
				uint unIPClient,
				IntPtr pvAuthBlob,
				uint cubAuthBlobSize,
				out ulong pSteamIDUser);

			[DllImport("libsteam_api.dylib")]
			internal static extern CSteamID SteamAPI_ISteamGameServer_CreateUnauthenticatedUserConnection(
				IntPtr ISteamGameServer);

			[DllImport("libsteam_api.dylib")]
			internal static extern void SteamAPI_ISteamGameServer_SendUserDisconnect(
				IntPtr ISteamGameServer,
				ulong steamIDUser);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamGameServer_BUpdateUserData(
				IntPtr ISteamGameServer,
				ulong steamIDUser,
				string pchPlayerName,
				uint uScore);

			[DllImport("libsteam_api.dylib")]
			internal static extern HAuthTicket SteamAPI_ISteamGameServer_GetAuthSessionTicket(
				IntPtr ISteamGameServer,
				IntPtr pTicket,
				int cbMaxTicket,
				out uint pcbTicket);

			[DllImport("libsteam_api.dylib")]
			internal static extern BeginAuthSessionResult SteamAPI_ISteamGameServer_BeginAuthSession(
				IntPtr ISteamGameServer,
				IntPtr pAuthTicket,
				int cbAuthTicket,
				ulong steamID);

			[DllImport("libsteam_api.dylib")]
			internal static extern void SteamAPI_ISteamGameServer_EndAuthSession(
				IntPtr ISteamGameServer,
				ulong steamID);

			[DllImport("libsteam_api.dylib")]
			internal static extern void SteamAPI_ISteamGameServer_CancelAuthTicket(
				IntPtr ISteamGameServer,
				uint hAuthTicket);

			[DllImport("libsteam_api.dylib")]
			internal static extern UserHasLicenseForAppResult SteamAPI_ISteamGameServer_UserHasLicenseForApp(
				IntPtr ISteamGameServer,
				ulong steamID,
				uint appID);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamGameServer_RequestUserGroupStatus(
				IntPtr ISteamGameServer,
				ulong steamIDUser,
				ulong steamIDGroup);

			[DllImport("libsteam_api.dylib")]
			internal static extern void SteamAPI_ISteamGameServer_GetGameplayStats(
				IntPtr ISteamGameServer);

			[DllImport("libsteam_api.dylib")]
			internal static extern SteamAPICall_t SteamAPI_ISteamGameServer_GetServerReputation(
				IntPtr ISteamGameServer);

			[DllImport("libsteam_api.dylib")]
			internal static extern uint SteamAPI_ISteamGameServer_GetPublicIP(IntPtr ISteamGameServer);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamGameServer_HandleIncomingPacket(
				IntPtr ISteamGameServer,
				IntPtr pData,
				int cbData,
				uint srcIP,
				ushort srcPort);

			[DllImport("libsteam_api.dylib")]
			internal static extern int SteamAPI_ISteamGameServer_GetNextOutgoingPacket(
				IntPtr ISteamGameServer,
				IntPtr pOut,
				int cbMaxOut,
				out uint pNetAdr,
				out ushort pPort);

			[DllImport("libsteam_api.dylib")]
			internal static extern void SteamAPI_ISteamGameServer_EnableHeartbeats(
				IntPtr ISteamGameServer,
				[MarshalAs(UnmanagedType.U1)] bool bActive);

			[DllImport("libsteam_api.dylib")]
			internal static extern void SteamAPI_ISteamGameServer_SetHeartbeatInterval(
				IntPtr ISteamGameServer,
				int iHeartbeatInterval);

			[DllImport("libsteam_api.dylib")]
			internal static extern void SteamAPI_ISteamGameServer_ForceHeartbeat(IntPtr ISteamGameServer);

			[DllImport("libsteam_api.dylib")]
			internal static extern SteamAPICall_t SteamAPI_ISteamGameServer_AssociateWithClan(
				IntPtr ISteamGameServer,
				ulong steamIDClan);

			[DllImport("libsteam_api.dylib")]
			internal static extern SteamAPICall_t SteamAPI_ISteamGameServer_ComputeNewPlayerCompatibility(
				IntPtr ISteamGameServer,
				ulong steamIDNewPlayer);

			[DllImport("libsteam_api.dylib")]
			internal static extern SteamAPICall_t SteamAPI_ISteamGameServerStats_RequestUserStats(
				IntPtr ISteamGameServerStats,
				ulong steamIDUser);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamGameServerStats_GetUserStat(
				IntPtr ISteamGameServerStats,
				ulong steamIDUser,
				string pchName,
				out int pData);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamGameServerStats_GetUserStat0(
				IntPtr ISteamGameServerStats,
				ulong steamIDUser,
				string pchName,
				out float pData);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamGameServerStats_GetUserAchievement(
				IntPtr ISteamGameServerStats,
				ulong steamIDUser,
				string pchName,
				[MarshalAs(UnmanagedType.U1)] ref bool pbAchieved);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamGameServerStats_SetUserStat(
				IntPtr ISteamGameServerStats,
				ulong steamIDUser,
				string pchName,
				int nData);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamGameServerStats_SetUserStat0(
				IntPtr ISteamGameServerStats,
				ulong steamIDUser,
				string pchName,
				float fData);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamGameServerStats_UpdateUserAvgRateStat(
				IntPtr ISteamGameServerStats,
				ulong steamIDUser,
				string pchName,
				float flCountThisSession,
				double dSessionLength);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamGameServerStats_SetUserAchievement(
				IntPtr ISteamGameServerStats,
				ulong steamIDUser,
				string pchName);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_ISteamGameServerStats_ClearUserAchievement(
				IntPtr ISteamGameServerStats,
				ulong steamIDUser,
				string pchName);

			[DllImport("libsteam_api.dylib")]
			internal static extern SteamAPICall_t SteamAPI_ISteamGameServerStats_StoreUserStats(
				IntPtr ISteamGameServerStats,
				ulong steamIDUser);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_Init();

			[DllImport("libsteam_api.dylib")]
			internal static extern void SteamAPI_RunCallbacks();

			[DllImport("libsteam_api.dylib")]
			internal static extern void SteamGameServer_RunCallbacks();

			[DllImport("libsteam_api.dylib")]
			internal static extern void SteamAPI_RegisterCallback(IntPtr pCallback, int callback);

			[DllImport("libsteam_api.dylib")]
			internal static extern void SteamAPI_UnregisterCallback(IntPtr pCallback);

			[DllImport("libsteam_api.dylib")]
			internal static extern void SteamAPI_RegisterCallResult(IntPtr pCallback, ulong callback);

			[DllImport("libsteam_api.dylib")]
			internal static extern void SteamAPI_UnregisterCallResult(IntPtr pCallback, ulong callback);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamInternal_GameServer_Init(
				uint unIP,
				ushort usPort,
				ushort usGamePort,
				ushort usQueryPort,
				int eServerMode,
				string pchVersionString);

			[DllImport("libsteam_api.dylib")]
			internal static extern void SteamAPI_Shutdown();

			[DllImport("libsteam_api.dylib")]
			internal static extern void SteamGameServer_Shutdown();

			[DllImport("libsteam_api.dylib")]
			internal static extern HSteamUser SteamAPI_GetHSteamUser();

			[DllImport("libsteam_api.dylib")]
			internal static extern HSteamPipe SteamAPI_GetHSteamPipe();

			[DllImport("libsteam_api.dylib")]
			internal static extern HSteamUser SteamGameServer_GetHSteamUser();

			[DllImport("libsteam_api.dylib")]
			internal static extern HSteamPipe SteamGameServer_GetHSteamPipe();

			[DllImport("libsteam_api.dylib")]
			internal static extern IntPtr SteamInternal_CreateInterface(string version);

			[DllImport("libsteam_api.dylib")]
			internal static extern bool SteamAPI_RestartAppIfNecessary(uint unOwnAppID);
		}
	}

	internal class Win32 : Interface, IDisposable {
		internal IntPtr _ptr;

		public bool IsValid => _ptr != IntPtr.Zero;

		internal Win32(IntPtr pointer) {
			_ptr = pointer;
		}

		public virtual void Dispose() {
			_ptr = IntPtr.Zero;
		}

		public virtual HSteamPipe ISteamClient_CreateSteamPipe() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamClient_CreateSteamPipe(_ptr)
				: throw new Exception("ISteamClient _ptr is null!");
		}

		public virtual bool ISteamClient_BReleaseSteamPipe(int hSteamPipe) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamClient_BReleaseSteamPipe(_ptr, hSteamPipe)
				: throw new Exception("ISteamClient _ptr is null!");
		}

		public virtual HSteamUser ISteamClient_ConnectToGlobalUser(int hSteamPipe) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamClient_ConnectToGlobalUser(_ptr, hSteamPipe)
				: throw new Exception("ISteamClient _ptr is null!");
		}

		public virtual HSteamUser ISteamClient_CreateLocalUser(
			out int phSteamPipe,
			AccountType eAccountType) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamClient_CreateLocalUser(_ptr, out phSteamPipe, eAccountType)
				: throw new Exception("ISteamClient _ptr is null!");
		}

		public virtual void ISteamClient_ReleaseUser(int hSteamPipe, int hUser) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamClient _ptr is null!");
			Native.SteamAPI_ISteamClient_ReleaseUser(_ptr, hSteamPipe, hUser);
		}

		public virtual IntPtr ISteamClient_GetISteamUser(
			int hSteamUser,
			int hSteamPipe,
			string pchVersion) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamClient _ptr is null!");
			return Native.SteamAPI_ISteamClient_GetISteamUser(_ptr, hSteamUser, hSteamPipe, pchVersion);
		}

		public virtual IntPtr ISteamClient_GetISteamGameServer(
			int hSteamUser,
			int hSteamPipe,
			string pchVersion) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamClient _ptr is null!");
			return Native.SteamAPI_ISteamClient_GetISteamGameServer(_ptr, hSteamUser, hSteamPipe, pchVersion);
		}

		public virtual void ISteamClient_SetLocalIPBinding(uint unIP, ushort usPort) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamClient _ptr is null!");
			Native.SteamAPI_ISteamClient_SetLocalIPBinding(_ptr, unIP, usPort);
		}

		public virtual IntPtr ISteamClient_GetISteamFriends(
			int hSteamUser,
			int hSteamPipe,
			string pchVersion) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamClient _ptr is null!");
			return Native.SteamAPI_ISteamClient_GetISteamFriends(_ptr, hSteamUser, hSteamPipe, pchVersion);
		}

		public virtual IntPtr ISteamClient_GetISteamUtils(int hSteamPipe, string pchVersion) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamClient _ptr is null!");
			return Native.SteamAPI_ISteamClient_GetISteamUtils(_ptr, hSteamPipe, pchVersion);
		}

		public virtual IntPtr ISteamClient_GetISteamMatchmaking(
			int hSteamUser,
			int hSteamPipe,
			string pchVersion) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamClient _ptr is null!");
			return Native.SteamAPI_ISteamClient_GetISteamMatchmaking(_ptr, hSteamUser, hSteamPipe, pchVersion);
		}

		public virtual IntPtr ISteamClient_GetISteamMatchmakingServers(
			int hSteamUser,
			int hSteamPipe,
			string pchVersion) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamClient _ptr is null!");
			return Native.SteamAPI_ISteamClient_GetISteamMatchmakingServers(_ptr, hSteamUser, hSteamPipe, pchVersion);
		}

		public virtual IntPtr ISteamClient_GetISteamGenericInterface(
			int hSteamUser,
			int hSteamPipe,
			string pchVersion) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamClient _ptr is null!");
			return Native.SteamAPI_ISteamClient_GetISteamGenericInterface(_ptr, hSteamUser, hSteamPipe, pchVersion);
		}

		public virtual IntPtr ISteamClient_GetISteamUserStats(
			int hSteamUser,
			int hSteamPipe,
			string pchVersion) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamClient _ptr is null!");
			return Native.SteamAPI_ISteamClient_GetISteamUserStats(_ptr, hSteamUser, hSteamPipe, pchVersion);
		}

		public virtual IntPtr ISteamClient_GetISteamGameServerStats(
			int hSteamuser,
			int hSteamPipe,
			string pchVersion) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamClient _ptr is null!");
			return Native.SteamAPI_ISteamClient_GetISteamGameServerStats(_ptr, hSteamuser, hSteamPipe, pchVersion);
		}

		public virtual IntPtr ISteamClient_GetISteamApps(
			int hSteamUser,
			int hSteamPipe,
			string pchVersion) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamClient _ptr is null!");
			return Native.SteamAPI_ISteamClient_GetISteamApps(_ptr, hSteamUser, hSteamPipe, pchVersion);
		}

		public virtual IntPtr ISteamClient_GetISteamNetworking(
			int hSteamUser,
			int hSteamPipe,
			string pchVersion) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamClient _ptr is null!");
			return Native.SteamAPI_ISteamClient_GetISteamNetworking(_ptr, hSteamUser, hSteamPipe, pchVersion);
		}

		public virtual IntPtr ISteamClient_GetISteamRemoteStorage(
			int hSteamuser,
			int hSteamPipe,
			string pchVersion) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamClient _ptr is null!");
			return Native.SteamAPI_ISteamClient_GetISteamRemoteStorage(_ptr, hSteamuser, hSteamPipe, pchVersion);
		}

		public virtual IntPtr ISteamClient_GetISteamScreenshots(
			int hSteamuser,
			int hSteamPipe,
			string pchVersion) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamClient _ptr is null!");
			return Native.SteamAPI_ISteamClient_GetISteamScreenshots(_ptr, hSteamuser, hSteamPipe, pchVersion);
		}

		public virtual uint ISteamClient_GetIPCCallCount() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamClient_GetIPCCallCount(_ptr)
				: throw new Exception("ISteamClient _ptr is null!");
		}

		public virtual void ISteamClient_SetWarningMessageHook(IntPtr pFunction) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamClient _ptr is null!");
			Native.SteamAPI_ISteamClient_SetWarningMessageHook(_ptr, pFunction);
		}

		public virtual bool ISteamClient_BShutdownIfAllPipesClosed() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamClient_BShutdownIfAllPipesClosed(_ptr)
				: throw new Exception("ISteamClient _ptr is null!");
		}

		public virtual IntPtr ISteamClient_GetISteamHTTP(
			int hSteamuser,
			int hSteamPipe,
			string pchVersion) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamClient _ptr is null!");
			return Native.SteamAPI_ISteamClient_GetISteamHTTP(_ptr, hSteamuser, hSteamPipe, pchVersion);
		}

		public virtual IntPtr ISteamClient_GetISteamUnifiedMessages(
			int hSteamuser,
			int hSteamPipe,
			string pchVersion) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamClient _ptr is null!");
			return Native.SteamAPI_ISteamClient_GetISteamUnifiedMessages(_ptr, hSteamuser, hSteamPipe, pchVersion);
		}

		public virtual IntPtr ISteamClient_GetISteamController(
			int hSteamUser,
			int hSteamPipe,
			string pchVersion) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamClient _ptr is null!");
			return Native.SteamAPI_ISteamClient_GetISteamController(_ptr, hSteamUser, hSteamPipe, pchVersion);
		}

		public virtual IntPtr ISteamClient_GetISteamUGC(
			int hSteamUser,
			int hSteamPipe,
			string pchVersion) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamClient _ptr is null!");
			return Native.SteamAPI_ISteamClient_GetISteamUGC(_ptr, hSteamUser, hSteamPipe, pchVersion);
		}

		public virtual IntPtr ISteamClient_GetISteamAppList(
			int hSteamUser,
			int hSteamPipe,
			string pchVersion) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamClient _ptr is null!");
			return Native.SteamAPI_ISteamClient_GetISteamAppList(_ptr, hSteamUser, hSteamPipe, pchVersion);
		}

		public virtual IntPtr ISteamClient_GetISteamMusic(
			int hSteamuser,
			int hSteamPipe,
			string pchVersion) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamClient _ptr is null!");
			return Native.SteamAPI_ISteamClient_GetISteamMusic(_ptr, hSteamuser, hSteamPipe, pchVersion);
		}

		public virtual IntPtr ISteamClient_GetISteamMusicRemote(
			int hSteamuser,
			int hSteamPipe,
			string pchVersion) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamClient _ptr is null!");
			return Native.SteamAPI_ISteamClient_GetISteamMusicRemote(_ptr, hSteamuser, hSteamPipe, pchVersion);
		}

		public virtual IntPtr ISteamClient_GetISteamHTMLSurface(
			int hSteamuser,
			int hSteamPipe,
			string pchVersion) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamClient _ptr is null!");
			return Native.SteamAPI_ISteamClient_GetISteamHTMLSurface(_ptr, hSteamuser, hSteamPipe, pchVersion);
		}

		public virtual IntPtr ISteamClient_GetISteamInventory(
			int hSteamuser,
			int hSteamPipe,
			string pchVersion) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamClient _ptr is null!");
			return Native.SteamAPI_ISteamClient_GetISteamInventory(_ptr, hSteamuser, hSteamPipe, pchVersion);
		}

		public virtual IntPtr ISteamClient_GetISteamVideo(
			int hSteamuser,
			int hSteamPipe,
			string pchVersion) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamClient _ptr is null!");
			return Native.SteamAPI_ISteamClient_GetISteamVideo(_ptr, hSteamuser, hSteamPipe, pchVersion);
		}

		public virtual HSteamUser ISteamUser_GetHSteamUser() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUser_GetHSteamUser(_ptr)
				: throw new Exception("ISteamUser _ptr is null!");
		}

		public virtual bool ISteamUser_BLoggedOn() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUser_BLoggedOn(_ptr)
				: throw new Exception("ISteamUser _ptr is null!");
		}

		public virtual CSteamID ISteamUser_GetSteamID() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUser_GetSteamID(_ptr)
				: throw new Exception("ISteamUser _ptr is null!");
		}

		public virtual int ISteamUser_InitiateGameConnection(
			IntPtr pAuthBlob,
			int cbMaxAuthBlob,
			ulong steamIDGameServer,
			uint unIPServer,
			ushort usPortServer,
			[MarshalAs(UnmanagedType.U1)] bool bSecure) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUser _ptr is null!");
			return Native.SteamAPI_ISteamUser_InitiateGameConnection(_ptr, pAuthBlob, cbMaxAuthBlob, steamIDGameServer,
				unIPServer, usPortServer, bSecure);
		}

		public virtual void ISteamUser_TerminateGameConnection(uint unIPServer, ushort usPortServer) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUser _ptr is null!");
			Native.SteamAPI_ISteamUser_TerminateGameConnection(_ptr, unIPServer, usPortServer);
		}

		public virtual void ISteamUser_TrackAppUsageEvent(
			ulong gameID,
			int eAppUsageEvent,
			string pchExtraInfo) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUser _ptr is null!");
			Native.SteamAPI_ISteamUser_TrackAppUsageEvent(_ptr, gameID, eAppUsageEvent, pchExtraInfo);
		}

		public virtual bool ISteamUser_GetUserDataFolder(StringBuilder pchBuffer, int cubBuffer) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUser _ptr is null!");
			return Native.SteamAPI_ISteamUser_GetUserDataFolder(_ptr, pchBuffer, cubBuffer);
		}

		public virtual void ISteamUser_StartVoiceRecording() {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUser _ptr is null!");
			Native.SteamAPI_ISteamUser_StartVoiceRecording(_ptr);
		}

		public virtual void ISteamUser_StopVoiceRecording() {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUser _ptr is null!");
			Native.SteamAPI_ISteamUser_StopVoiceRecording(_ptr);
		}

		public virtual VoiceResult ISteamUser_GetAvailableVoice(
			out uint pcbCompressed,
			out uint pcbUncompressed_Deprecated,
			uint nUncompressedVoiceDesiredSampleRate_Deprecated) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUser_GetAvailableVoice(_ptr, out pcbCompressed, out pcbUncompressed_Deprecated,
					nUncompressedVoiceDesiredSampleRate_Deprecated)
				: throw new Exception("ISteamUser _ptr is null!");
		}

		public virtual VoiceResult ISteamUser_GetVoice(
			[MarshalAs(UnmanagedType.U1)] bool bWantCompressed,
			IntPtr pDestBuffer,
			uint cbDestBufferSize,
			out uint nBytesWritten,
			[MarshalAs(UnmanagedType.U1)] bool bWantUncompressed_Deprecated,
			IntPtr pUncompressedDestBuffer_Deprecated,
			uint cbUncompressedDestBufferSize_Deprecated,
			out uint nUncompressBytesWritten_Deprecated,
			uint nUncompressedVoiceDesiredSampleRate_Deprecated) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUser _ptr is null!");
			return Native.SteamAPI_ISteamUser_GetVoice(_ptr, bWantCompressed, pDestBuffer, cbDestBufferSize,
				out nBytesWritten, bWantUncompressed_Deprecated, pUncompressedDestBuffer_Deprecated,
				cbUncompressedDestBufferSize_Deprecated, out nUncompressBytesWritten_Deprecated,
				nUncompressedVoiceDesiredSampleRate_Deprecated);
		}

		public virtual VoiceResult ISteamUser_DecompressVoice(
			IntPtr pCompressed,
			uint cbCompressed,
			IntPtr pDestBuffer,
			uint cbDestBufferSize,
			out uint nBytesWritten,
			uint nDesiredSampleRate) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUser _ptr is null!");
			return Native.SteamAPI_ISteamUser_DecompressVoice(_ptr, pCompressed, cbCompressed, pDestBuffer,
				cbDestBufferSize, out nBytesWritten, nDesiredSampleRate);
		}

		public virtual uint ISteamUser_GetVoiceOptimalSampleRate() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUser_GetVoiceOptimalSampleRate(_ptr)
				: throw new Exception("ISteamUser _ptr is null!");
		}

		public virtual HAuthTicket ISteamUser_GetAuthSessionTicket(
			IntPtr pTicket,
			int cbMaxTicket,
			out uint pcbTicket) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUser _ptr is null!");
			return Native.SteamAPI_ISteamUser_GetAuthSessionTicket(_ptr, pTicket, cbMaxTicket, out pcbTicket);
		}

		public virtual BeginAuthSessionResult ISteamUser_BeginAuthSession(
			IntPtr pAuthTicket,
			int cbAuthTicket,
			ulong steamID) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUser _ptr is null!");
			return Native.SteamAPI_ISteamUser_BeginAuthSession(_ptr, pAuthTicket, cbAuthTicket, steamID);
		}

		public virtual void ISteamUser_EndAuthSession(ulong steamID) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUser _ptr is null!");
			Native.SteamAPI_ISteamUser_EndAuthSession(_ptr, steamID);
		}

		public virtual void ISteamUser_CancelAuthTicket(uint hAuthTicket) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUser _ptr is null!");
			Native.SteamAPI_ISteamUser_CancelAuthTicket(_ptr, hAuthTicket);
		}

		public virtual UserHasLicenseForAppResult ISteamUser_UserHasLicenseForApp(
			ulong steamID,
			uint appID) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUser _ptr is null!");
			return Native.SteamAPI_ISteamUser_UserHasLicenseForApp(_ptr, steamID, appID);
		}

		public virtual bool ISteamUser_BIsBehindNAT() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUser_BIsBehindNAT(_ptr)
				: throw new Exception("ISteamUser _ptr is null!");
		}

		public virtual void ISteamUser_AdvertiseGame(
			ulong steamIDGameServer,
			uint unIPServer,
			ushort usPortServer) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUser _ptr is null!");
			Native.SteamAPI_ISteamUser_AdvertiseGame(_ptr, steamIDGameServer, unIPServer, usPortServer);
		}

		public virtual SteamAPICall_t ISteamUser_RequestEncryptedAppTicket(
			IntPtr pDataToInclude,
			int cbDataToInclude) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUser _ptr is null!");
			return Native.SteamAPI_ISteamUser_RequestEncryptedAppTicket(_ptr, pDataToInclude, cbDataToInclude);
		}

		public virtual bool ISteamUser_GetEncryptedAppTicket(
			IntPtr pTicket,
			int cbMaxTicket,
			out uint pcbTicket) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUser _ptr is null!");
			return Native.SteamAPI_ISteamUser_GetEncryptedAppTicket(_ptr, pTicket, cbMaxTicket, out pcbTicket);
		}

		public virtual int ISteamUser_GetGameBadgeLevel(int nSeries, [MarshalAs(UnmanagedType.U1)] bool bFoil) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUser _ptr is null!");
			return Native.SteamAPI_ISteamUser_GetGameBadgeLevel(_ptr, nSeries, bFoil);
		}

		public virtual int ISteamUser_GetPlayerSteamLevel() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUser_GetPlayerSteamLevel(_ptr)
				: throw new Exception("ISteamUser _ptr is null!");
		}

		public virtual SteamAPICall_t ISteamUser_RequestStoreAuthURL(string pchRedirectURL) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUser_RequestStoreAuthURL(_ptr, pchRedirectURL)
				: throw new Exception("ISteamUser _ptr is null!");
		}

		public virtual bool ISteamUser_BIsPhoneVerified() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUser_BIsPhoneVerified(_ptr)
				: throw new Exception("ISteamUser _ptr is null!");
		}

		public virtual bool ISteamUser_BIsTwoFactorEnabled() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUser_BIsTwoFactorEnabled(_ptr)
				: throw new Exception("ISteamUser _ptr is null!");
		}

		public virtual bool ISteamUser_BIsPhoneIdentifying() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUser_BIsPhoneIdentifying(_ptr)
				: throw new Exception("ISteamUser _ptr is null!");
		}

		public virtual bool ISteamUser_BIsPhoneRequiringVerification() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUser_BIsPhoneRequiringVerification(_ptr)
				: throw new Exception("ISteamUser _ptr is null!");
		}

		public virtual IntPtr ISteamFriends_GetPersonaName() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_GetPersonaName(_ptr)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual SteamAPICall_t ISteamFriends_SetPersonaName(string pchPersonaName) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_SetPersonaName(_ptr, pchPersonaName)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual PersonaState ISteamFriends_GetPersonaState() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_GetPersonaState(_ptr)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual int ISteamFriends_GetFriendCount(int iFriendFlags) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_GetFriendCount(_ptr, iFriendFlags)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual CSteamID ISteamFriends_GetFriendByIndex(int iFriend, int iFriendFlags) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamFriends _ptr is null!");
			return Native.SteamAPI_ISteamFriends_GetFriendByIndex(_ptr, iFriend, iFriendFlags);
		}

		public virtual FriendRelationship ISteamFriends_GetFriendRelationship(ulong steamIDFriend) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_GetFriendRelationship(_ptr, steamIDFriend)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual PersonaState ISteamFriends_GetFriendPersonaState(ulong steamIDFriend) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_GetFriendPersonaState(_ptr, steamIDFriend)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual IntPtr ISteamFriends_GetFriendPersonaName(ulong steamIDFriend) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_GetFriendPersonaName(_ptr, steamIDFriend)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual bool ISteamFriends_GetFriendGamePlayed(
			ulong steamIDFriend,
			ref FriendGameInfo_t pFriendGameInfo) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamFriends _ptr is null!");
			return Native.SteamAPI_ISteamFriends_GetFriendGamePlayed(_ptr, steamIDFriend, ref pFriendGameInfo);
		}

		public virtual IntPtr ISteamFriends_GetFriendPersonaNameHistory(
			ulong steamIDFriend,
			int iPersonaName) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamFriends _ptr is null!");
			return Native.SteamAPI_ISteamFriends_GetFriendPersonaNameHistory(_ptr, steamIDFriend, iPersonaName);
		}

		public virtual int ISteamFriends_GetFriendSteamLevel(ulong steamIDFriend) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_GetFriendSteamLevel(_ptr, steamIDFriend)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual IntPtr ISteamFriends_GetPlayerNickname(ulong steamIDPlayer) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_GetPlayerNickname(_ptr, steamIDPlayer)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual int ISteamFriends_GetFriendsGroupCount() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_GetFriendsGroupCount(_ptr)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual FriendsGroupID_t ISteamFriends_GetFriendsGroupIDByIndex(int iFG) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_GetFriendsGroupIDByIndex(_ptr, iFG)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual IntPtr ISteamFriends_GetFriendsGroupName(short friendsGroupID) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_GetFriendsGroupName(_ptr, friendsGroupID)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual int ISteamFriends_GetFriendsGroupMembersCount(short friendsGroupID) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_GetFriendsGroupMembersCount(_ptr, friendsGroupID)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual void ISteamFriends_GetFriendsGroupMembersList(
			short friendsGroupID,
			IntPtr pOutSteamIDMembers,
			int nMembersCount) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamFriends _ptr is null!");
			Native.SteamAPI_ISteamFriends_GetFriendsGroupMembersList(_ptr, friendsGroupID, pOutSteamIDMembers,
				nMembersCount);
		}

		public virtual bool ISteamFriends_HasFriend(ulong steamIDFriend, int iFriendFlags) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamFriends _ptr is null!");
			return Native.SteamAPI_ISteamFriends_HasFriend(_ptr, steamIDFriend, iFriendFlags);
		}

		public virtual int ISteamFriends_GetClanCount() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_GetClanCount(_ptr)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual CSteamID ISteamFriends_GetClanByIndex(int iClan) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_GetClanByIndex(_ptr, iClan)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual IntPtr ISteamFriends_GetClanName(ulong steamIDClan) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_GetClanName(_ptr, steamIDClan)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual IntPtr ISteamFriends_GetClanTag(ulong steamIDClan) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_GetClanTag(_ptr, steamIDClan)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual bool ISteamFriends_GetClanActivityCounts(
			ulong steamIDClan,
			out int pnOnline,
			out int pnInGame,
			out int pnChatting) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_GetClanActivityCounts(_ptr, steamIDClan, out pnOnline, out pnInGame,
					out pnChatting)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual SteamAPICall_t ISteamFriends_DownloadClanActivityCounts(
			IntPtr psteamIDClans,
			int cClansToRequest) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamFriends _ptr is null!");
			return Native.SteamAPI_ISteamFriends_DownloadClanActivityCounts(_ptr, psteamIDClans, cClansToRequest);
		}

		public virtual int ISteamFriends_GetFriendCountFromSource(ulong steamIDSource) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_GetFriendCountFromSource(_ptr, steamIDSource)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual CSteamID ISteamFriends_GetFriendFromSourceByIndex(
			ulong steamIDSource,
			int iFriend) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamFriends _ptr is null!");
			return Native.SteamAPI_ISteamFriends_GetFriendFromSourceByIndex(_ptr, steamIDSource, iFriend);
		}

		public virtual bool ISteamFriends_IsUserInSource(ulong steamIDUser, ulong steamIDSource) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamFriends _ptr is null!");
			return Native.SteamAPI_ISteamFriends_IsUserInSource(_ptr, steamIDUser, steamIDSource);
		}

		public virtual void ISteamFriends_SetInGameVoiceSpeaking(ulong steamIDUser,
			[MarshalAs(UnmanagedType.U1)] bool bSpeaking) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamFriends _ptr is null!");
			Native.SteamAPI_ISteamFriends_SetInGameVoiceSpeaking(_ptr, steamIDUser, bSpeaking);
		}

		public virtual void ISteamFriends_ActivateGameOverlay(string pchDialog) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamFriends _ptr is null!");
			Native.SteamAPI_ISteamFriends_ActivateGameOverlay(_ptr, pchDialog);
		}

		public virtual void ISteamFriends_ActivateGameOverlayToUser(string pchDialog, ulong steamID) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamFriends _ptr is null!");
			Native.SteamAPI_ISteamFriends_ActivateGameOverlayToUser(_ptr, pchDialog, steamID);
		}

		public virtual void ISteamFriends_ActivateGameOverlayToWebPage(string pchURL) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamFriends _ptr is null!");
			Native.SteamAPI_ISteamFriends_ActivateGameOverlayToWebPage(_ptr, pchURL);
		}

		public virtual void ISteamFriends_ActivateGameOverlayToStore(
			uint nAppID,
			OverlayToStoreFlag eFlag) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamFriends _ptr is null!");
			Native.SteamAPI_ISteamFriends_ActivateGameOverlayToStore(_ptr, nAppID, eFlag);
		}

		public virtual void ISteamFriends_SetPlayedWith(ulong steamIDUserPlayedWith) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamFriends _ptr is null!");
			Native.SteamAPI_ISteamFriends_SetPlayedWith(_ptr, steamIDUserPlayedWith);
		}

		public virtual void ISteamFriends_ActivateGameOverlayInviteDialog(ulong steamIDLobby) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamFriends _ptr is null!");
			Native.SteamAPI_ISteamFriends_ActivateGameOverlayInviteDialog(_ptr, steamIDLobby);
		}

		public virtual int ISteamFriends_GetSmallFriendAvatar(ulong steamIDFriend) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_GetSmallFriendAvatar(_ptr, steamIDFriend)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual int ISteamFriends_GetMediumFriendAvatar(ulong steamIDFriend) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_GetMediumFriendAvatar(_ptr, steamIDFriend)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual int ISteamFriends_GetLargeFriendAvatar(ulong steamIDFriend) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_GetLargeFriendAvatar(_ptr, steamIDFriend)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual bool ISteamFriends_RequestUserInformation(
			ulong steamIDUser,
			[MarshalAs(UnmanagedType.U1)] bool bRequireNameOnly) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamFriends _ptr is null!");
			return Native.SteamAPI_ISteamFriends_RequestUserInformation(_ptr, steamIDUser, bRequireNameOnly);
		}

		public virtual SteamAPICall_t ISteamFriends_RequestClanOfficerList(ulong steamIDClan) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_RequestClanOfficerList(_ptr, steamIDClan)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual CSteamID ISteamFriends_GetClanOwner(ulong steamIDClan) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_GetClanOwner(_ptr, steamIDClan)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual int ISteamFriends_GetClanOfficerCount(ulong steamIDClan) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_GetClanOfficerCount(_ptr, steamIDClan)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual CSteamID ISteamFriends_GetClanOfficerByIndex(ulong steamIDClan, int iOfficer) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamFriends _ptr is null!");
			return Native.SteamAPI_ISteamFriends_GetClanOfficerByIndex(_ptr, steamIDClan, iOfficer);
		}

		public virtual uint ISteamFriends_GetUserRestrictions() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_GetUserRestrictions(_ptr)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual bool ISteamFriends_SetRichPresence(string pchKey, string pchValue) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamFriends _ptr is null!");
			return Native.SteamAPI_ISteamFriends_SetRichPresence(_ptr, pchKey, pchValue);
		}

		public virtual void ISteamFriends_ClearRichPresence() {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamFriends _ptr is null!");
			Native.SteamAPI_ISteamFriends_ClearRichPresence(_ptr);
		}

		public virtual IntPtr ISteamFriends_GetFriendRichPresence(ulong steamIDFriend, string pchKey) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamFriends _ptr is null!");
			return Native.SteamAPI_ISteamFriends_GetFriendRichPresence(_ptr, steamIDFriend, pchKey);
		}

		public virtual int ISteamFriends_GetFriendRichPresenceKeyCount(ulong steamIDFriend) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_GetFriendRichPresenceKeyCount(_ptr, steamIDFriend)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual IntPtr ISteamFriends_GetFriendRichPresenceKeyByIndex(
			ulong steamIDFriend,
			int iKey) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamFriends _ptr is null!");
			return Native.SteamAPI_ISteamFriends_GetFriendRichPresenceKeyByIndex(_ptr, steamIDFriend, iKey);
		}

		public virtual void ISteamFriends_RequestFriendRichPresence(ulong steamIDFriend) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamFriends _ptr is null!");
			Native.SteamAPI_ISteamFriends_RequestFriendRichPresence(_ptr, steamIDFriend);
		}

		public virtual bool ISteamFriends_InviteUserToGame(
			ulong steamIDFriend,
			string pchConnectString) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamFriends _ptr is null!");
			return Native.SteamAPI_ISteamFriends_InviteUserToGame(_ptr, steamIDFriend, pchConnectString);
		}

		public virtual int ISteamFriends_GetCoplayFriendCount() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_GetCoplayFriendCount(_ptr)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual CSteamID ISteamFriends_GetCoplayFriend(int iCoplayFriend) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_GetCoplayFriend(_ptr, iCoplayFriend)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual int ISteamFriends_GetFriendCoplayTime(ulong steamIDFriend) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_GetFriendCoplayTime(_ptr, steamIDFriend)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual AppId_t ISteamFriends_GetFriendCoplayGame(ulong steamIDFriend) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_GetFriendCoplayGame(_ptr, steamIDFriend)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual SteamAPICall_t ISteamFriends_JoinClanChatRoom(ulong steamIDClan) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_JoinClanChatRoom(_ptr, steamIDClan)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual bool ISteamFriends_LeaveClanChatRoom(ulong steamIDClan) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_LeaveClanChatRoom(_ptr, steamIDClan)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual int ISteamFriends_GetClanChatMemberCount(ulong steamIDClan) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_GetClanChatMemberCount(_ptr, steamIDClan)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual CSteamID ISteamFriends_GetChatMemberByIndex(ulong steamIDClan, int iUser) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamFriends _ptr is null!");
			return Native.SteamAPI_ISteamFriends_GetChatMemberByIndex(_ptr, steamIDClan, iUser);
		}

		public virtual bool ISteamFriends_SendClanChatMessage(ulong steamIDClanChat, string pchText) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamFriends _ptr is null!");
			return Native.SteamAPI_ISteamFriends_SendClanChatMessage(_ptr, steamIDClanChat, pchText);
		}

		public virtual int ISteamFriends_GetClanChatMessage(
			ulong steamIDClanChat,
			int iMessage,
			IntPtr prgchText,
			int cchTextMax,
			out ChatEntryType peChatEntryType,
			out ulong psteamidChatter) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamFriends _ptr is null!");
			return Native.SteamAPI_ISteamFriends_GetClanChatMessage(_ptr, steamIDClanChat, iMessage, prgchText,
				cchTextMax, out peChatEntryType, out psteamidChatter);
		}

		public virtual bool ISteamFriends_IsClanChatAdmin(ulong steamIDClanChat, ulong steamIDUser) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamFriends _ptr is null!");
			return Native.SteamAPI_ISteamFriends_IsClanChatAdmin(_ptr, steamIDClanChat, steamIDUser);
		}

		public virtual bool ISteamFriends_IsClanChatWindowOpenInSteam(ulong steamIDClanChat) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_IsClanChatWindowOpenInSteam(_ptr, steamIDClanChat)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual bool ISteamFriends_OpenClanChatWindowInSteam(ulong steamIDClanChat) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_OpenClanChatWindowInSteam(_ptr, steamIDClanChat)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual bool ISteamFriends_CloseClanChatWindowInSteam(ulong steamIDClanChat) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_CloseClanChatWindowInSteam(_ptr, steamIDClanChat)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual bool ISteamFriends_SetListenForFriendsMessages(
			[MarshalAs(UnmanagedType.U1)] bool bInterceptEnabled) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_SetListenForFriendsMessages(_ptr, bInterceptEnabled)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual bool ISteamFriends_ReplyToFriendMessage(
			ulong steamIDFriend,
			string pchMsgToSend) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamFriends _ptr is null!");
			return Native.SteamAPI_ISteamFriends_ReplyToFriendMessage(_ptr, steamIDFriend, pchMsgToSend);
		}

		public virtual int ISteamFriends_GetFriendMessage(
			ulong steamIDFriend,
			int iMessageID,
			IntPtr pvData,
			int cubData,
			out ChatEntryType peChatEntryType) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamFriends _ptr is null!");
			return Native.SteamAPI_ISteamFriends_GetFriendMessage(_ptr, steamIDFriend, iMessageID, pvData, cubData,
				out peChatEntryType);
		}

		public virtual SteamAPICall_t ISteamFriends_GetFollowerCount(ulong steamID) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_GetFollowerCount(_ptr, steamID)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual SteamAPICall_t ISteamFriends_IsFollowing(ulong steamID) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_IsFollowing(_ptr, steamID)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual SteamAPICall_t ISteamFriends_EnumerateFollowingList(uint unStartIndex) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_EnumerateFollowingList(_ptr, unStartIndex)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual uint ISteamUtils_GetSecondsSinceAppActive() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUtils_GetSecondsSinceAppActive(_ptr)
				: throw new Exception("ISteamUtils _ptr is null!");
		}

		public virtual uint ISteamUtils_GetSecondsSinceComputerActive() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUtils_GetSecondsSinceComputerActive(_ptr)
				: throw new Exception("ISteamUtils _ptr is null!");
		}

		public virtual Universe ISteamUtils_GetConnectedUniverse() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUtils_GetConnectedUniverse(_ptr)
				: throw new Exception("ISteamUtils _ptr is null!");
		}

		public virtual uint ISteamUtils_GetServerRealTime() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUtils_GetServerRealTime(_ptr)
				: throw new Exception("ISteamUtils _ptr is null!");
		}

		public virtual IntPtr ISteamUtils_GetIPCountry() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUtils_GetIPCountry(_ptr)
				: throw new Exception("ISteamUtils _ptr is null!");
		}

		public virtual bool ISteamUtils_GetImageSize(int iImage, out uint pnWidth, out uint pnHeight) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUtils_GetImageSize(_ptr, iImage, out pnWidth, out pnHeight)
				: throw new Exception("ISteamUtils _ptr is null!");
		}

		public virtual bool ISteamUtils_GetImageRGBA(int iImage, IntPtr pubDest, int nDestBufferSize) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUtils _ptr is null!");
			return Native.SteamAPI_ISteamUtils_GetImageRGBA(_ptr, iImage, pubDest, nDestBufferSize);
		}

		public virtual bool ISteamUtils_GetCSERIPPort(out uint unIP, out ushort usPort) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUtils_GetCSERIPPort(_ptr, out unIP, out usPort)
				: throw new Exception("ISteamUtils _ptr is null!");
		}

		public virtual byte ISteamUtils_GetCurrentBatteryPower() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUtils_GetCurrentBatteryPower(_ptr)
				: throw new Exception("ISteamUtils _ptr is null!");
		}

		public virtual uint ISteamUtils_GetAppID() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUtils_GetAppID(_ptr)
				: throw new Exception("ISteamUtils _ptr is null!");
		}

		public virtual void ISteamUtils_SetOverlayNotificationPosition(
			NotificationPosition eNotificationPosition) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUtils _ptr is null!");
			Native.SteamAPI_ISteamUtils_SetOverlayNotificationPosition(_ptr, eNotificationPosition);
		}

		public virtual bool ISteamUtils_IsAPICallCompleted(ulong hSteamAPICall,
			[MarshalAs(UnmanagedType.U1)] ref bool pbFailed) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUtils _ptr is null!");
			return Native.SteamAPI_ISteamUtils_IsAPICallCompleted(_ptr, hSteamAPICall, ref pbFailed);
		}

		public virtual SteamAPICallFailure ISteamUtils_GetAPICallFailureReason(ulong hSteamAPICall) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUtils_GetAPICallFailureReason(_ptr, hSteamAPICall)
				: throw new Exception("ISteamUtils _ptr is null!");
		}

		public virtual bool ISteamUtils_GetAPICallResult(
			ulong hSteamAPICall,
			IntPtr pCallback,
			int cubCallback,
			int iCallbackExpected,
			[MarshalAs(UnmanagedType.U1)] ref bool pbFailed) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUtils _ptr is null!");
			return Native.SteamAPI_ISteamUtils_GetAPICallResult(_ptr, hSteamAPICall, pCallback, cubCallback,
				iCallbackExpected, ref pbFailed);
		}

		public virtual uint ISteamUtils_GetIPCCallCount() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUtils_GetIPCCallCount(_ptr)
				: throw new Exception("ISteamUtils _ptr is null!");
		}

		public virtual void ISteamUtils_SetWarningMessageHook(IntPtr pFunction) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUtils _ptr is null!");
			Native.SteamAPI_ISteamUtils_SetWarningMessageHook(_ptr, pFunction);
		}

		public virtual bool ISteamUtils_IsOverlayEnabled() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUtils_IsOverlayEnabled(_ptr)
				: throw new Exception("ISteamUtils _ptr is null!");
		}

		public virtual bool ISteamUtils_BOverlayNeedsPresent() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUtils_BOverlayNeedsPresent(_ptr)
				: throw new Exception("ISteamUtils _ptr is null!");
		}

		public virtual SteamAPICall_t ISteamUtils_CheckFileSignature(string szFileName) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUtils_CheckFileSignature(_ptr, szFileName)
				: throw new Exception("ISteamUtils _ptr is null!");
		}

		public virtual bool ISteamUtils_ShowGamepadTextInput(
			GamepadTextInputMode eInputMode,
			GamepadTextInputLineMode eLineInputMode,
			string pchDescription,
			uint unCharMax,
			string pchExistingText) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUtils _ptr is null!");
			return Native.SteamAPI_ISteamUtils_ShowGamepadTextInput(_ptr, eInputMode, eLineInputMode, pchDescription,
				unCharMax, pchExistingText);
		}

		public virtual uint ISteamUtils_GetEnteredGamepadTextLength() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUtils_GetEnteredGamepadTextLength(_ptr)
				: throw new Exception("ISteamUtils _ptr is null!");
		}

		public virtual bool ISteamUtils_GetEnteredGamepadTextInput(
			StringBuilder pchText,
			uint cchText) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUtils _ptr is null!");
			return Native.SteamAPI_ISteamUtils_GetEnteredGamepadTextInput(_ptr, pchText, cchText);
		}

		public virtual IntPtr ISteamUtils_GetSteamUILanguage() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUtils_GetSteamUILanguage(_ptr)
				: throw new Exception("ISteamUtils _ptr is null!");
		}

		public virtual bool ISteamUtils_IsSteamRunningInVR() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUtils_IsSteamRunningInVR(_ptr)
				: throw new Exception("ISteamUtils _ptr is null!");
		}

		public virtual void ISteamUtils_SetOverlayNotificationInset(
			int nHorizontalInset,
			int nVerticalInset) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUtils _ptr is null!");
			Native.SteamAPI_ISteamUtils_SetOverlayNotificationInset(_ptr, nHorizontalInset, nVerticalInset);
		}

		public virtual bool ISteamUtils_IsSteamInBigPictureMode() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUtils_IsSteamInBigPictureMode(_ptr)
				: throw new Exception("ISteamUtils _ptr is null!");
		}

		public virtual void ISteamUtils_StartVRDashboard() {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUtils _ptr is null!");
			Native.SteamAPI_ISteamUtils_StartVRDashboard(_ptr);
		}

		public virtual bool ISteamUtils_IsVRHeadsetStreamingEnabled() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUtils_IsVRHeadsetStreamingEnabled(_ptr)
				: throw new Exception("ISteamUtils _ptr is null!");
		}

		public virtual void ISteamUtils_SetVRHeadsetStreamingEnabled([MarshalAs(UnmanagedType.U1)] bool bEnabled) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUtils _ptr is null!");
			Native.SteamAPI_ISteamUtils_SetVRHeadsetStreamingEnabled(_ptr, bEnabled);
		}

		public virtual int ISteamMatchmaking_GetFavoriteGameCount() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMatchmaking_GetFavoriteGameCount(_ptr)
				: throw new Exception("ISteamMatchmaking _ptr is null!");
		}

		public virtual bool ISteamMatchmaking_GetFavoriteGame(
			int iGame,
			ref uint pnAppID,
			out uint pnIP,
			out ushort pnConnPort,
			out ushort pnQueryPort,
			out uint punFlags,
			out uint pRTime32LastPlayedOnServer) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmaking _ptr is null!");
			return Native.SteamAPI_ISteamMatchmaking_GetFavoriteGame(_ptr, iGame, ref pnAppID, out pnIP, out pnConnPort,
				out pnQueryPort, out punFlags, out pRTime32LastPlayedOnServer);
		}

		public virtual int ISteamMatchmaking_AddFavoriteGame(
			uint nAppID,
			uint nIP,
			ushort nConnPort,
			ushort nQueryPort,
			uint unFlags,
			uint rTime32LastPlayedOnServer) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmaking _ptr is null!");
			return Native.SteamAPI_ISteamMatchmaking_AddFavoriteGame(_ptr, nAppID, nIP, nConnPort, nQueryPort, unFlags,
				rTime32LastPlayedOnServer);
		}

		public virtual bool ISteamMatchmaking_RemoveFavoriteGame(
			uint nAppID,
			uint nIP,
			ushort nConnPort,
			ushort nQueryPort,
			uint unFlags) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmaking _ptr is null!");
			return Native.SteamAPI_ISteamMatchmaking_RemoveFavoriteGame(_ptr, nAppID, nIP, nConnPort, nQueryPort,
				unFlags);
		}

		public virtual SteamAPICall_t ISteamMatchmaking_RequestLobbyList() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMatchmaking_RequestLobbyList(_ptr)
				: throw new Exception("ISteamMatchmaking _ptr is null!");
		}

		public virtual void ISteamMatchmaking_AddRequestLobbyListStringFilter(
			string pchKeyToMatch,
			string pchValueToMatch,
			LobbyComparison eComparisonType) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmaking _ptr is null!");
			Native.SteamAPI_ISteamMatchmaking_AddRequestLobbyListStringFilter(_ptr, pchKeyToMatch, pchValueToMatch,
				eComparisonType);
		}

		public virtual void ISteamMatchmaking_AddRequestLobbyListNumericalFilter(
			string pchKeyToMatch,
			int nValueToMatch,
			LobbyComparison eComparisonType) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmaking _ptr is null!");
			Native.SteamAPI_ISteamMatchmaking_AddRequestLobbyListNumericalFilter(_ptr, pchKeyToMatch, nValueToMatch,
				eComparisonType);
		}

		public virtual void ISteamMatchmaking_AddRequestLobbyListNearValueFilter(
			string pchKeyToMatch,
			int nValueToBeCloseTo) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmaking _ptr is null!");
			Native.SteamAPI_ISteamMatchmaking_AddRequestLobbyListNearValueFilter(_ptr, pchKeyToMatch,
				nValueToBeCloseTo);
		}

		public virtual void ISteamMatchmaking_AddRequestLobbyListFilterSlotsAvailable(
			int nSlotsAvailable) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmaking _ptr is null!");
			Native.SteamAPI_ISteamMatchmaking_AddRequestLobbyListFilterSlotsAvailable(_ptr, nSlotsAvailable);
		}

		public virtual void ISteamMatchmaking_AddRequestLobbyListDistanceFilter(
			LobbyDistanceFilter eLobbyDistanceFilter) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmaking _ptr is null!");
			Native.SteamAPI_ISteamMatchmaking_AddRequestLobbyListDistanceFilter(_ptr, eLobbyDistanceFilter);
		}

		public virtual void ISteamMatchmaking_AddRequestLobbyListResultCountFilter(int cMaxResults) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmaking _ptr is null!");
			Native.SteamAPI_ISteamMatchmaking_AddRequestLobbyListResultCountFilter(_ptr, cMaxResults);
		}

		public virtual void ISteamMatchmaking_AddRequestLobbyListCompatibleMembersFilter(
			ulong steamIDLobby) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmaking _ptr is null!");
			Native.SteamAPI_ISteamMatchmaking_AddRequestLobbyListCompatibleMembersFilter(_ptr, steamIDLobby);
		}

		public virtual CSteamID ISteamMatchmaking_GetLobbyByIndex(int iLobby) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMatchmaking_GetLobbyByIndex(_ptr, iLobby)
				: throw new Exception("ISteamMatchmaking _ptr is null!");
		}

		public virtual SteamAPICall_t ISteamMatchmaking_CreateLobby(
			LobbyType eLobbyType,
			int cMaxMembers) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmaking _ptr is null!");
			return Native.SteamAPI_ISteamMatchmaking_CreateLobby(_ptr, eLobbyType, cMaxMembers);
		}

		public virtual SteamAPICall_t ISteamMatchmaking_JoinLobby(ulong steamIDLobby) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMatchmaking_JoinLobby(_ptr, steamIDLobby)
				: throw new Exception("ISteamMatchmaking _ptr is null!");
		}

		public virtual void ISteamMatchmaking_LeaveLobby(ulong steamIDLobby) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmaking _ptr is null!");
			Native.SteamAPI_ISteamMatchmaking_LeaveLobby(_ptr, steamIDLobby);
		}

		public virtual bool ISteamMatchmaking_InviteUserToLobby(
			ulong steamIDLobby,
			ulong steamIDInvitee) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmaking _ptr is null!");
			return Native.SteamAPI_ISteamMatchmaking_InviteUserToLobby(_ptr, steamIDLobby, steamIDInvitee);
		}

		public virtual int ISteamMatchmaking_GetNumLobbyMembers(ulong steamIDLobby) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMatchmaking_GetNumLobbyMembers(_ptr, steamIDLobby)
				: throw new Exception("ISteamMatchmaking _ptr is null!");
		}

		public virtual CSteamID ISteamMatchmaking_GetLobbyMemberByIndex(
			ulong steamIDLobby,
			int iMember) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmaking _ptr is null!");
			return Native.SteamAPI_ISteamMatchmaking_GetLobbyMemberByIndex(_ptr, steamIDLobby, iMember);
		}

		public virtual IntPtr ISteamMatchmaking_GetLobbyData(ulong steamIDLobby, string pchKey) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmaking _ptr is null!");
			return Native.SteamAPI_ISteamMatchmaking_GetLobbyData(_ptr, steamIDLobby, pchKey);
		}

		public virtual bool ISteamMatchmaking_SetLobbyData(
			ulong steamIDLobby,
			string pchKey,
			string pchValue) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmaking _ptr is null!");
			return Native.SteamAPI_ISteamMatchmaking_SetLobbyData(_ptr, steamIDLobby, pchKey, pchValue);
		}

		public virtual int ISteamMatchmaking_GetLobbyDataCount(ulong steamIDLobby) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMatchmaking_GetLobbyDataCount(_ptr, steamIDLobby)
				: throw new Exception("ISteamMatchmaking _ptr is null!");
		}

		public virtual bool ISteamMatchmaking_GetLobbyDataByIndex(
			ulong steamIDLobby,
			int iLobbyData,
			StringBuilder pchKey,
			int cchKeyBufferSize,
			StringBuilder pchValue,
			int cchValueBufferSize) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmaking _ptr is null!");
			return Native.SteamAPI_ISteamMatchmaking_GetLobbyDataByIndex(_ptr, steamIDLobby, iLobbyData, pchKey,
				cchKeyBufferSize, pchValue, cchValueBufferSize);
		}

		public virtual bool ISteamMatchmaking_DeleteLobbyData(ulong steamIDLobby, string pchKey) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmaking _ptr is null!");
			return Native.SteamAPI_ISteamMatchmaking_DeleteLobbyData(_ptr, steamIDLobby, pchKey);
		}

		public virtual IntPtr ISteamMatchmaking_GetLobbyMemberData(
			ulong steamIDLobby,
			ulong steamIDUser,
			string pchKey) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmaking _ptr is null!");
			return Native.SteamAPI_ISteamMatchmaking_GetLobbyMemberData(_ptr, steamIDLobby, steamIDUser, pchKey);
		}

		public virtual void ISteamMatchmaking_SetLobbyMemberData(
			ulong steamIDLobby,
			string pchKey,
			string pchValue) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmaking _ptr is null!");
			Native.SteamAPI_ISteamMatchmaking_SetLobbyMemberData(_ptr, steamIDLobby, pchKey, pchValue);
		}

		public virtual bool ISteamMatchmaking_SendLobbyChatMsg(
			ulong steamIDLobby,
			IntPtr pvMsgBody,
			int cubMsgBody) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmaking _ptr is null!");
			return Native.SteamAPI_ISteamMatchmaking_SendLobbyChatMsg(_ptr, steamIDLobby, pvMsgBody, cubMsgBody);
		}

		public virtual int ISteamMatchmaking_GetLobbyChatEntry(
			ulong steamIDLobby,
			int iChatID,
			out ulong pSteamIDUser,
			IntPtr pvData,
			int cubData,
			out ChatEntryType peChatEntryType) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmaking _ptr is null!");
			return Native.SteamAPI_ISteamMatchmaking_GetLobbyChatEntry(_ptr, steamIDLobby, iChatID, out pSteamIDUser,
				pvData, cubData, out peChatEntryType);
		}

		public virtual bool ISteamMatchmaking_RequestLobbyData(ulong steamIDLobby) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMatchmaking_RequestLobbyData(_ptr, steamIDLobby)
				: throw new Exception("ISteamMatchmaking _ptr is null!");
		}

		public virtual void ISteamMatchmaking_SetLobbyGameServer(
			ulong steamIDLobby,
			uint unGameServerIP,
			ushort unGameServerPort,
			ulong steamIDGameServer) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmaking _ptr is null!");
			Native.SteamAPI_ISteamMatchmaking_SetLobbyGameServer(_ptr, steamIDLobby, unGameServerIP, unGameServerPort,
				steamIDGameServer);
		}

		public virtual bool ISteamMatchmaking_GetLobbyGameServer(
			ulong steamIDLobby,
			out uint punGameServerIP,
			out ushort punGameServerPort,
			out ulong psteamIDGameServer) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMatchmaking_GetLobbyGameServer(_ptr, steamIDLobby, out punGameServerIP,
					out punGameServerPort, out psteamIDGameServer)
				: throw new Exception("ISteamMatchmaking _ptr is null!");
		}

		public virtual bool ISteamMatchmaking_SetLobbyMemberLimit(ulong steamIDLobby, int cMaxMembers) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmaking _ptr is null!");
			return Native.SteamAPI_ISteamMatchmaking_SetLobbyMemberLimit(_ptr, steamIDLobby, cMaxMembers);
		}

		public virtual int ISteamMatchmaking_GetLobbyMemberLimit(ulong steamIDLobby) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMatchmaking_GetLobbyMemberLimit(_ptr, steamIDLobby)
				: throw new Exception("ISteamMatchmaking _ptr is null!");
		}

		public virtual bool ISteamMatchmaking_SetLobbyType(ulong steamIDLobby, LobbyType eLobbyType) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmaking _ptr is null!");
			return Native.SteamAPI_ISteamMatchmaking_SetLobbyType(_ptr, steamIDLobby, eLobbyType);
		}

		public virtual bool ISteamMatchmaking_SetLobbyJoinable(
			ulong steamIDLobby,
			[MarshalAs(UnmanagedType.U1)] bool bLobbyJoinable) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmaking _ptr is null!");
			return Native.SteamAPI_ISteamMatchmaking_SetLobbyJoinable(_ptr, steamIDLobby, bLobbyJoinable);
		}

		public virtual CSteamID ISteamMatchmaking_GetLobbyOwner(ulong steamIDLobby) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMatchmaking_GetLobbyOwner(_ptr, steamIDLobby)
				: throw new Exception("ISteamMatchmaking _ptr is null!");
		}

		public virtual bool ISteamMatchmaking_SetLobbyOwner(ulong steamIDLobby, ulong steamIDNewOwner) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmaking _ptr is null!");
			return Native.SteamAPI_ISteamMatchmaking_SetLobbyOwner(_ptr, steamIDLobby, steamIDNewOwner);
		}

		public virtual bool ISteamMatchmaking_SetLinkedLobby(
			ulong steamIDLobby,
			ulong steamIDLobbyDependent) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmaking _ptr is null!");
			return Native.SteamAPI_ISteamMatchmaking_SetLinkedLobby(_ptr, steamIDLobby, steamIDLobbyDependent);
		}

		public virtual HServerListRequest ISteamMatchmakingServers_RequestInternetServerList(
			uint iApp,
			IntPtr ppchFilters,
			uint nFilters,
			IntPtr pRequestServersResponse) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmakingServers _ptr is null!");
			return Native.SteamAPI_ISteamMatchmakingServers_RequestInternetServerList(_ptr, iApp, ppchFilters, nFilters,
				pRequestServersResponse);
		}

		public virtual HServerListRequest ISteamMatchmakingServers_RequestLANServerList(
			uint iApp,
			IntPtr pRequestServersResponse) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmakingServers _ptr is null!");
			return Native.SteamAPI_ISteamMatchmakingServers_RequestLANServerList(_ptr, iApp, pRequestServersResponse);
		}

		public virtual HServerListRequest ISteamMatchmakingServers_RequestFriendsServerList(
			uint iApp,
			IntPtr ppchFilters,
			uint nFilters,
			IntPtr pRequestServersResponse) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmakingServers _ptr is null!");
			return Native.SteamAPI_ISteamMatchmakingServers_RequestFriendsServerList(_ptr, iApp, ppchFilters, nFilters,
				pRequestServersResponse);
		}

		public virtual HServerListRequest ISteamMatchmakingServers_RequestFavoritesServerList(
			uint iApp,
			IntPtr ppchFilters,
			uint nFilters,
			IntPtr pRequestServersResponse) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmakingServers _ptr is null!");
			return Native.SteamAPI_ISteamMatchmakingServers_RequestFavoritesServerList(_ptr, iApp, ppchFilters,
				nFilters, pRequestServersResponse);
		}

		public virtual HServerListRequest ISteamMatchmakingServers_RequestHistoryServerList(
			uint iApp,
			IntPtr ppchFilters,
			uint nFilters,
			IntPtr pRequestServersResponse) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmakingServers _ptr is null!");
			return Native.SteamAPI_ISteamMatchmakingServers_RequestHistoryServerList(_ptr, iApp, ppchFilters, nFilters,
				pRequestServersResponse);
		}

		public virtual HServerListRequest ISteamMatchmakingServers_RequestSpectatorServerList(
			uint iApp,
			IntPtr ppchFilters,
			uint nFilters,
			IntPtr pRequestServersResponse) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmakingServers _ptr is null!");
			return Native.SteamAPI_ISteamMatchmakingServers_RequestSpectatorServerList(_ptr, iApp, ppchFilters,
				nFilters, pRequestServersResponse);
		}

		public virtual void ISteamMatchmakingServers_ReleaseRequest(IntPtr hServerListRequest) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmakingServers _ptr is null!");
			Native.SteamAPI_ISteamMatchmakingServers_ReleaseRequest(_ptr, hServerListRequest);
		}

		public virtual IntPtr ISteamMatchmakingServers_GetServerDetails(IntPtr hRequest, int iServer) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmakingServers _ptr is null!");
			return Native.SteamAPI_ISteamMatchmakingServers_GetServerDetails(_ptr, hRequest, iServer);
		}

		public virtual void ISteamMatchmakingServers_CancelQuery(IntPtr hRequest) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmakingServers _ptr is null!");
			Native.SteamAPI_ISteamMatchmakingServers_CancelQuery(_ptr, hRequest);
		}

		public virtual void ISteamMatchmakingServers_RefreshQuery(IntPtr hRequest) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmakingServers _ptr is null!");
			Native.SteamAPI_ISteamMatchmakingServers_RefreshQuery(_ptr, hRequest);
		}

		public virtual bool ISteamMatchmakingServers_IsRefreshing(IntPtr hRequest) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMatchmakingServers_IsRefreshing(_ptr, hRequest)
				: throw new Exception("ISteamMatchmakingServers _ptr is null!");
		}

		public virtual int ISteamMatchmakingServers_GetServerCount(IntPtr hRequest) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMatchmakingServers_GetServerCount(_ptr, hRequest)
				: throw new Exception("ISteamMatchmakingServers _ptr is null!");
		}

		public virtual void ISteamMatchmakingServers_RefreshServer(IntPtr hRequest, int iServer) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmakingServers _ptr is null!");
			Native.SteamAPI_ISteamMatchmakingServers_RefreshServer(_ptr, hRequest, iServer);
		}

		public virtual HServerQuery ISteamMatchmakingServers_PingServer(
			uint unIP,
			ushort usPort,
			IntPtr pRequestServersResponse) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmakingServers _ptr is null!");
			return Native.SteamAPI_ISteamMatchmakingServers_PingServer(_ptr, unIP, usPort, pRequestServersResponse);
		}

		public virtual HServerQuery ISteamMatchmakingServers_PlayerDetails(
			uint unIP,
			ushort usPort,
			IntPtr pRequestServersResponse) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmakingServers _ptr is null!");
			return Native.SteamAPI_ISteamMatchmakingServers_PlayerDetails(_ptr, unIP, usPort, pRequestServersResponse);
		}

		public virtual HServerQuery ISteamMatchmakingServers_ServerRules(
			uint unIP,
			ushort usPort,
			IntPtr pRequestServersResponse) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmakingServers _ptr is null!");
			return Native.SteamAPI_ISteamMatchmakingServers_ServerRules(_ptr, unIP, usPort, pRequestServersResponse);
		}

		public virtual void ISteamMatchmakingServers_CancelServerQuery(int hServerQuery) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmakingServers _ptr is null!");
			Native.SteamAPI_ISteamMatchmakingServers_CancelServerQuery(_ptr, hServerQuery);
		}

		public virtual bool ISteamRemoteStorage_FileWrite(string pchFile, IntPtr pvData, int cubData) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamRemoteStorage _ptr is null!");
			return Native.SteamAPI_ISteamRemoteStorage_FileWrite(_ptr, pchFile, pvData, cubData);
		}

		public virtual int ISteamRemoteStorage_FileRead(
			string pchFile,
			IntPtr pvData,
			int cubDataToRead) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamRemoteStorage _ptr is null!");
			return Native.SteamAPI_ISteamRemoteStorage_FileRead(_ptr, pchFile, pvData, cubDataToRead);
		}

		public virtual SteamAPICall_t ISteamRemoteStorage_FileWriteAsync(
			string pchFile,
			IntPtr pvData,
			uint cubData) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamRemoteStorage _ptr is null!");
			return Native.SteamAPI_ISteamRemoteStorage_FileWriteAsync(_ptr, pchFile, pvData, cubData);
		}

		public virtual SteamAPICall_t ISteamRemoteStorage_FileReadAsync(
			string pchFile,
			uint nOffset,
			uint cubToRead) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamRemoteStorage _ptr is null!");
			return Native.SteamAPI_ISteamRemoteStorage_FileReadAsync(_ptr, pchFile, nOffset, cubToRead);
		}

		public virtual bool ISteamRemoteStorage_FileReadAsyncComplete(
			ulong hReadCall,
			IntPtr pvBuffer,
			uint cubToRead) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamRemoteStorage _ptr is null!");
			return Native.SteamAPI_ISteamRemoteStorage_FileReadAsyncComplete(_ptr, hReadCall, pvBuffer, cubToRead);
		}

		public virtual bool ISteamRemoteStorage_FileForget(string pchFile) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamRemoteStorage_FileForget(_ptr, pchFile)
				: throw new Exception("ISteamRemoteStorage _ptr is null!");
		}

		public virtual bool ISteamRemoteStorage_FileDelete(string pchFile) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamRemoteStorage_FileDelete(_ptr, pchFile)
				: throw new Exception("ISteamRemoteStorage _ptr is null!");
		}

		public virtual SteamAPICall_t ISteamRemoteStorage_FileShare(string pchFile) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamRemoteStorage_FileShare(_ptr, pchFile)
				: throw new Exception("ISteamRemoteStorage _ptr is null!");
		}

		public virtual bool ISteamRemoteStorage_SetSyncPlatforms(
			string pchFile,
			RemoteStoragePlatform eRemoteStoragePlatform) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamRemoteStorage _ptr is null!");
			return Native.SteamAPI_ISteamRemoteStorage_SetSyncPlatforms(_ptr, pchFile, eRemoteStoragePlatform);
		}

		public virtual UGCFileWriteStreamHandle_t ISteamRemoteStorage_FileWriteStreamOpen(
			string pchFile) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamRemoteStorage_FileWriteStreamOpen(_ptr, pchFile)
				: throw new Exception("ISteamRemoteStorage _ptr is null!");
		}

		public virtual bool ISteamRemoteStorage_FileWriteStreamWriteChunk(
			ulong writeHandle,
			IntPtr pvData,
			int cubData) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamRemoteStorage _ptr is null!");
			return Native.SteamAPI_ISteamRemoteStorage_FileWriteStreamWriteChunk(_ptr, writeHandle, pvData, cubData);
		}

		public virtual bool ISteamRemoteStorage_FileWriteStreamClose(ulong writeHandle) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamRemoteStorage_FileWriteStreamClose(_ptr, writeHandle)
				: throw new Exception("ISteamRemoteStorage _ptr is null!");
		}

		public virtual bool ISteamRemoteStorage_FileWriteStreamCancel(ulong writeHandle) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamRemoteStorage_FileWriteStreamCancel(_ptr, writeHandle)
				: throw new Exception("ISteamRemoteStorage _ptr is null!");
		}

		public virtual bool ISteamRemoteStorage_FileExists(string pchFile) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamRemoteStorage_FileExists(_ptr, pchFile)
				: throw new Exception("ISteamRemoteStorage _ptr is null!");
		}

		public virtual bool ISteamRemoteStorage_FilePersisted(string pchFile) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamRemoteStorage_FilePersisted(_ptr, pchFile)
				: throw new Exception("ISteamRemoteStorage _ptr is null!");
		}

		public virtual int ISteamRemoteStorage_GetFileSize(string pchFile) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamRemoteStorage_GetFileSize(_ptr, pchFile)
				: throw new Exception("ISteamRemoteStorage _ptr is null!");
		}

		public virtual long ISteamRemoteStorage_GetFileTimestamp(string pchFile) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamRemoteStorage_GetFileTimestamp(_ptr, pchFile)
				: throw new Exception("ISteamRemoteStorage _ptr is null!");
		}

		public virtual RemoteStoragePlatform ISteamRemoteStorage_GetSyncPlatforms(string pchFile) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamRemoteStorage_GetSyncPlatforms(_ptr, pchFile)
				: throw new Exception("ISteamRemoteStorage _ptr is null!");
		}

		public virtual int ISteamRemoteStorage_GetFileCount() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamRemoteStorage_GetFileCount(_ptr)
				: throw new Exception("ISteamRemoteStorage _ptr is null!");
		}

		public virtual IntPtr ISteamRemoteStorage_GetFileNameAndSize(
			int iFile,
			out int pnFileSizeInBytes) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamRemoteStorage_GetFileNameAndSize(_ptr, iFile, out pnFileSizeInBytes)
				: throw new Exception("ISteamRemoteStorage _ptr is null!");
		}

		public virtual bool ISteamRemoteStorage_GetQuota(
			out ulong pnTotalBytes,
			out ulong puAvailableBytes) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamRemoteStorage_GetQuota(_ptr, out pnTotalBytes, out puAvailableBytes)
				: throw new Exception("ISteamRemoteStorage _ptr is null!");
		}

		public virtual bool ISteamRemoteStorage_IsCloudEnabledForAccount() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamRemoteStorage_IsCloudEnabledForAccount(_ptr)
				: throw new Exception("ISteamRemoteStorage _ptr is null!");
		}

		public virtual bool ISteamRemoteStorage_IsCloudEnabledForApp() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamRemoteStorage_IsCloudEnabledForApp(_ptr)
				: throw new Exception("ISteamRemoteStorage _ptr is null!");
		}

		public virtual void ISteamRemoteStorage_SetCloudEnabledForApp([MarshalAs(UnmanagedType.U1)] bool bEnabled) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamRemoteStorage _ptr is null!");
			Native.SteamAPI_ISteamRemoteStorage_SetCloudEnabledForApp(_ptr, bEnabled);
		}

		public virtual SteamAPICall_t ISteamRemoteStorage_UGCDownload(ulong hContent, uint unPriority) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamRemoteStorage _ptr is null!");
			return Native.SteamAPI_ISteamRemoteStorage_UGCDownload(_ptr, hContent, unPriority);
		}

		public virtual bool ISteamRemoteStorage_GetUGCDownloadProgress(
			ulong hContent,
			out int pnBytesDownloaded,
			out int pnBytesExpected) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamRemoteStorage_GetUGCDownloadProgress(_ptr, hContent, out pnBytesDownloaded,
					out pnBytesExpected)
				: throw new Exception("ISteamRemoteStorage _ptr is null!");
		}

		public virtual bool ISteamRemoteStorage_GetUGCDetails(
			ulong hContent,
			ref uint pnAppID,
			StringBuilder ppchName,
			out int pnFileSizeInBytes,
			out ulong pSteamIDOwner) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamRemoteStorage _ptr is null!");
			return Native.SteamAPI_ISteamRemoteStorage_GetUGCDetails(_ptr, hContent, ref pnAppID, ppchName,
				out pnFileSizeInBytes, out pSteamIDOwner);
		}

		public virtual int ISteamRemoteStorage_UGCRead(
			ulong hContent,
			IntPtr pvData,
			int cubDataToRead,
			uint cOffset,
			UGCReadAction eAction) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamRemoteStorage _ptr is null!");
			return Native.SteamAPI_ISteamRemoteStorage_UGCRead(_ptr, hContent, pvData, cubDataToRead, cOffset, eAction);
		}

		public virtual int ISteamRemoteStorage_GetCachedUGCCount() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamRemoteStorage_GetCachedUGCCount(_ptr)
				: throw new Exception("ISteamRemoteStorage _ptr is null!");
		}

		public virtual UGCHandle_t ISteamRemoteStorage_GetCachedUGCHandle(int iCachedContent) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamRemoteStorage_GetCachedUGCHandle(_ptr, iCachedContent)
				: throw new Exception("ISteamRemoteStorage _ptr is null!");
		}

		public virtual SteamAPICall_t ISteamRemoteStorage_PublishWorkshopFile(
			string pchFile,
			string pchPreviewFile,
			uint nConsumerAppId,
			string pchTitle,
			string pchDescription,
			RemoteStoragePublishedFileVisibility eVisibility,
			ref SteamParamStringArray_t pTags,
			WorkshopFileType eWorkshopFileType) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamRemoteStorage _ptr is null!");
			return Native.SteamAPI_ISteamRemoteStorage_PublishWorkshopFile(_ptr, pchFile, pchPreviewFile,
				nConsumerAppId, pchTitle, pchDescription, eVisibility, ref pTags, eWorkshopFileType);
		}

		public virtual PublishedFileUpdateHandle_t ISteamRemoteStorage_CreatePublishedFileUpdateRequest(
			ulong unPublishedFileId) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamRemoteStorage_CreatePublishedFileUpdateRequest(_ptr, unPublishedFileId)
				: throw new Exception("ISteamRemoteStorage _ptr is null!");
		}

		public virtual bool ISteamRemoteStorage_UpdatePublishedFileFile(
			ulong updateHandle,
			string pchFile) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamRemoteStorage _ptr is null!");
			return Native.SteamAPI_ISteamRemoteStorage_UpdatePublishedFileFile(_ptr, updateHandle, pchFile);
		}

		public virtual bool ISteamRemoteStorage_UpdatePublishedFilePreviewFile(
			ulong updateHandle,
			string pchPreviewFile) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamRemoteStorage _ptr is null!");
			return Native.SteamAPI_ISteamRemoteStorage_UpdatePublishedFilePreviewFile(_ptr, updateHandle,
				pchPreviewFile);
		}

		public virtual bool ISteamRemoteStorage_UpdatePublishedFileTitle(
			ulong updateHandle,
			string pchTitle) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamRemoteStorage _ptr is null!");
			return Native.SteamAPI_ISteamRemoteStorage_UpdatePublishedFileTitle(_ptr, updateHandle, pchTitle);
		}

		public virtual bool ISteamRemoteStorage_UpdatePublishedFileDescription(
			ulong updateHandle,
			string pchDescription) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamRemoteStorage _ptr is null!");
			return Native.SteamAPI_ISteamRemoteStorage_UpdatePublishedFileDescription(_ptr, updateHandle,
				pchDescription);
		}

		public virtual bool ISteamRemoteStorage_UpdatePublishedFileVisibility(
			ulong updateHandle,
			RemoteStoragePublishedFileVisibility eVisibility) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamRemoteStorage _ptr is null!");
			return Native.SteamAPI_ISteamRemoteStorage_UpdatePublishedFileVisibility(_ptr, updateHandle, eVisibility);
		}

		public virtual bool ISteamRemoteStorage_UpdatePublishedFileTags(
			ulong updateHandle,
			ref SteamParamStringArray_t pTags) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamRemoteStorage _ptr is null!");
			return Native.SteamAPI_ISteamRemoteStorage_UpdatePublishedFileTags(_ptr, updateHandle, ref pTags);
		}

		public virtual SteamAPICall_t ISteamRemoteStorage_CommitPublishedFileUpdate(ulong updateHandle) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamRemoteStorage_CommitPublishedFileUpdate(_ptr, updateHandle)
				: throw new Exception("ISteamRemoteStorage _ptr is null!");
		}

		public virtual SteamAPICall_t ISteamRemoteStorage_GetPublishedFileDetails(
			ulong unPublishedFileId,
			uint unMaxSecondsOld) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamRemoteStorage _ptr is null!");
			return Native.SteamAPI_ISteamRemoteStorage_GetPublishedFileDetails(_ptr, unPublishedFileId,
				unMaxSecondsOld);
		}

		public virtual SteamAPICall_t ISteamRemoteStorage_DeletePublishedFile(ulong unPublishedFileId) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamRemoteStorage_DeletePublishedFile(_ptr, unPublishedFileId)
				: throw new Exception("ISteamRemoteStorage _ptr is null!");
		}

		public virtual SteamAPICall_t ISteamRemoteStorage_EnumerateUserPublishedFiles(
			uint unStartIndex) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamRemoteStorage_EnumerateUserPublishedFiles(_ptr, unStartIndex)
				: throw new Exception("ISteamRemoteStorage _ptr is null!");
		}

		public virtual SteamAPICall_t ISteamRemoteStorage_SubscribePublishedFile(
			ulong unPublishedFileId) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamRemoteStorage_SubscribePublishedFile(_ptr, unPublishedFileId)
				: throw new Exception("ISteamRemoteStorage _ptr is null!");
		}

		public virtual SteamAPICall_t ISteamRemoteStorage_EnumerateUserSubscribedFiles(
			uint unStartIndex) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamRemoteStorage_EnumerateUserSubscribedFiles(_ptr, unStartIndex)
				: throw new Exception("ISteamRemoteStorage _ptr is null!");
		}

		public virtual SteamAPICall_t ISteamRemoteStorage_UnsubscribePublishedFile(
			ulong unPublishedFileId) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamRemoteStorage_UnsubscribePublishedFile(_ptr, unPublishedFileId)
				: throw new Exception("ISteamRemoteStorage _ptr is null!");
		}

		public virtual bool ISteamRemoteStorage_UpdatePublishedFileSetChangeDescription(
			ulong updateHandle,
			string pchChangeDescription) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamRemoteStorage _ptr is null!");
			return Native.SteamAPI_ISteamRemoteStorage_UpdatePublishedFileSetChangeDescription(_ptr, updateHandle,
				pchChangeDescription);
		}

		public virtual SteamAPICall_t ISteamRemoteStorage_GetPublishedItemVoteDetails(
			ulong unPublishedFileId) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamRemoteStorage_GetPublishedItemVoteDetails(_ptr, unPublishedFileId)
				: throw new Exception("ISteamRemoteStorage _ptr is null!");
		}

		public virtual SteamAPICall_t ISteamRemoteStorage_UpdateUserPublishedItemVote(
			ulong unPublishedFileId,
			[MarshalAs(UnmanagedType.U1)] bool bVoteUp) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamRemoteStorage _ptr is null!");
			return Native.SteamAPI_ISteamRemoteStorage_UpdateUserPublishedItemVote(_ptr, unPublishedFileId, bVoteUp);
		}

		public virtual SteamAPICall_t ISteamRemoteStorage_GetUserPublishedItemVoteDetails(
			ulong unPublishedFileId) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamRemoteStorage_GetUserPublishedItemVoteDetails(_ptr, unPublishedFileId)
				: throw new Exception("ISteamRemoteStorage _ptr is null!");
		}

		public virtual SteamAPICall_t ISteamRemoteStorage_EnumerateUserSharedWorkshopFiles(
			ulong steamId,
			uint unStartIndex,
			ref SteamParamStringArray_t pRequiredTags,
			ref SteamParamStringArray_t pExcludedTags) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamRemoteStorage _ptr is null!");
			return Native.SteamAPI_ISteamRemoteStorage_EnumerateUserSharedWorkshopFiles(_ptr, steamId, unStartIndex,
				ref pRequiredTags, ref pExcludedTags);
		}

		public virtual SteamAPICall_t ISteamRemoteStorage_PublishVideo(
			WorkshopVideoProvider eVideoProvider,
			string pchVideoAccount,
			string pchVideoIdentifier,
			string pchPreviewFile,
			uint nConsumerAppId,
			string pchTitle,
			string pchDescription,
			RemoteStoragePublishedFileVisibility eVisibility,
			ref SteamParamStringArray_t pTags) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamRemoteStorage _ptr is null!");
			return Native.SteamAPI_ISteamRemoteStorage_PublishVideo(_ptr, eVideoProvider, pchVideoAccount,
				pchVideoIdentifier, pchPreviewFile, nConsumerAppId, pchTitle, pchDescription, eVisibility, ref pTags);
		}

		public virtual SteamAPICall_t ISteamRemoteStorage_SetUserPublishedFileAction(
			ulong unPublishedFileId,
			WorkshopFileAction eAction) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamRemoteStorage _ptr is null!");
			return Native.SteamAPI_ISteamRemoteStorage_SetUserPublishedFileAction(_ptr, unPublishedFileId, eAction);
		}

		public virtual SteamAPICall_t ISteamRemoteStorage_EnumeratePublishedFilesByUserAction(
			WorkshopFileAction eAction,
			uint unStartIndex) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamRemoteStorage _ptr is null!");
			return Native.SteamAPI_ISteamRemoteStorage_EnumeratePublishedFilesByUserAction(_ptr, eAction, unStartIndex);
		}

		public virtual SteamAPICall_t ISteamRemoteStorage_EnumeratePublishedWorkshopFiles(
			WorkshopEnumerationType eEnumerationType,
			uint unStartIndex,
			uint unCount,
			uint unDays,
			ref SteamParamStringArray_t pTags,
			ref SteamParamStringArray_t pUserTags) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamRemoteStorage _ptr is null!");
			return Native.SteamAPI_ISteamRemoteStorage_EnumeratePublishedWorkshopFiles(_ptr, eEnumerationType,
				unStartIndex, unCount, unDays, ref pTags, ref pUserTags);
		}

		public virtual SteamAPICall_t ISteamRemoteStorage_UGCDownloadToLocation(
			ulong hContent,
			string pchLocation,
			uint unPriority) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamRemoteStorage _ptr is null!");
			return Native.SteamAPI_ISteamRemoteStorage_UGCDownloadToLocation(_ptr, hContent, pchLocation, unPriority);
		}

		public virtual bool ISteamUserStats_RequestCurrentStats() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUserStats_RequestCurrentStats(_ptr)
				: throw new Exception("ISteamUserStats _ptr is null!");
		}

		public virtual bool ISteamUserStats_GetStat(string pchName, out int pData) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUserStats_GetStat(_ptr, pchName, out pData)
				: throw new Exception("ISteamUserStats _ptr is null!");
		}

		public virtual bool ISteamUserStats_GetStat0(string pchName, out float pData) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUserStats_GetStat0(_ptr, pchName, out pData)
				: throw new Exception("ISteamUserStats _ptr is null!");
		}

		public virtual bool ISteamUserStats_SetStat(string pchName, int nData) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUserStats _ptr is null!");
			return Native.SteamAPI_ISteamUserStats_SetStat(_ptr, pchName, nData);
		}

		public virtual bool ISteamUserStats_SetStat0(string pchName, float fData) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUserStats _ptr is null!");
			return Native.SteamAPI_ISteamUserStats_SetStat0(_ptr, pchName, fData);
		}

		public virtual bool ISteamUserStats_UpdateAvgRateStat(
			string pchName,
			float flCountThisSession,
			double dSessionLength) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUserStats _ptr is null!");
			return Native.SteamAPI_ISteamUserStats_UpdateAvgRateStat(_ptr, pchName, flCountThisSession, dSessionLength);
		}

		public virtual bool ISteamUserStats_GetAchievement(string pchName,
			[MarshalAs(UnmanagedType.U1)] ref bool pbAchieved) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUserStats _ptr is null!");
			return Native.SteamAPI_ISteamUserStats_GetAchievement(_ptr, pchName, ref pbAchieved);
		}

		public virtual bool ISteamUserStats_SetAchievement(string pchName) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUserStats_SetAchievement(_ptr, pchName)
				: throw new Exception("ISteamUserStats _ptr is null!");
		}

		public virtual bool ISteamUserStats_ClearAchievement(string pchName) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUserStats_ClearAchievement(_ptr, pchName)
				: throw new Exception("ISteamUserStats _ptr is null!");
		}

		public virtual bool ISteamUserStats_GetAchievementAndUnlockTime(
			string pchName,
			[MarshalAs(UnmanagedType.U1)] ref bool pbAchieved,
			out uint punUnlockTime) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUserStats _ptr is null!");
			return Native.SteamAPI_ISteamUserStats_GetAchievementAndUnlockTime(_ptr, pchName, ref pbAchieved,
				out punUnlockTime);
		}

		public virtual bool ISteamUserStats_StoreStats() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUserStats_StoreStats(_ptr)
				: throw new Exception("ISteamUserStats _ptr is null!");
		}

		public virtual int ISteamUserStats_GetAchievementIcon(string pchName) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUserStats_GetAchievementIcon(_ptr, pchName)
				: throw new Exception("ISteamUserStats _ptr is null!");
		}

		public virtual IntPtr ISteamUserStats_GetAchievementDisplayAttribute(
			string pchName,
			string pchKey) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUserStats _ptr is null!");
			return Native.SteamAPI_ISteamUserStats_GetAchievementDisplayAttribute(_ptr, pchName, pchKey);
		}

		public virtual bool ISteamUserStats_IndicateAchievementProgress(
			string pchName,
			uint nCurProgress,
			uint nMaxProgress) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUserStats _ptr is null!");
			return Native.SteamAPI_ISteamUserStats_IndicateAchievementProgress(_ptr, pchName, nCurProgress,
				nMaxProgress);
		}

		public virtual uint ISteamUserStats_GetNumAchievements() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUserStats_GetNumAchievements(_ptr)
				: throw new Exception("ISteamUserStats _ptr is null!");
		}

		public virtual IntPtr ISteamUserStats_GetAchievementName(uint iAchievement) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUserStats_GetAchievementName(_ptr, iAchievement)
				: throw new Exception("ISteamUserStats _ptr is null!");
		}

		public virtual SteamAPICall_t ISteamUserStats_RequestUserStats(ulong steamIDUser) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUserStats_RequestUserStats(_ptr, steamIDUser)
				: throw new Exception("ISteamUserStats _ptr is null!");
		}

		public virtual bool ISteamUserStats_GetUserStat(
			ulong steamIDUser,
			string pchName,
			out int pData) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUserStats _ptr is null!");
			return Native.SteamAPI_ISteamUserStats_GetUserStat(_ptr, steamIDUser, pchName, out pData);
		}

		public virtual bool ISteamUserStats_GetUserStat0(
			ulong steamIDUser,
			string pchName,
			out float pData) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUserStats _ptr is null!");
			return Native.SteamAPI_ISteamUserStats_GetUserStat0(_ptr, steamIDUser, pchName, out pData);
		}

		public virtual bool ISteamUserStats_GetUserAchievement(
			ulong steamIDUser,
			string pchName,
			[MarshalAs(UnmanagedType.U1)] ref bool pbAchieved) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUserStats _ptr is null!");
			return Native.SteamAPI_ISteamUserStats_GetUserAchievement(_ptr, steamIDUser, pchName, ref pbAchieved);
		}

		public virtual bool ISteamUserStats_GetUserAchievementAndUnlockTime(
			ulong steamIDUser,
			string pchName,
			[MarshalAs(UnmanagedType.U1)] ref bool pbAchieved,
			out uint punUnlockTime) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUserStats _ptr is null!");
			return Native.SteamAPI_ISteamUserStats_GetUserAchievementAndUnlockTime(_ptr, steamIDUser, pchName,
				ref pbAchieved, out punUnlockTime);
		}

		public virtual bool ISteamUserStats_ResetAllStats([MarshalAs(UnmanagedType.U1)] bool bAchievementsToo) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUserStats_ResetAllStats(_ptr, bAchievementsToo)
				: throw new Exception("ISteamUserStats _ptr is null!");
		}

		public virtual SteamAPICall_t ISteamUserStats_FindOrCreateLeaderboard(
			string pchLeaderboardName,
			LeaderboardSortMethod eLeaderboardSortMethod,
			LeaderboardDisplayType eLeaderboardDisplayType) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUserStats _ptr is null!");
			return Native.SteamAPI_ISteamUserStats_FindOrCreateLeaderboard(_ptr, pchLeaderboardName,
				eLeaderboardSortMethod, eLeaderboardDisplayType);
		}

		public virtual SteamAPICall_t ISteamUserStats_FindLeaderboard(string pchLeaderboardName) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUserStats_FindLeaderboard(_ptr, pchLeaderboardName)
				: throw new Exception("ISteamUserStats _ptr is null!");
		}

		public virtual IntPtr ISteamUserStats_GetLeaderboardName(ulong hSteamLeaderboard) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUserStats_GetLeaderboardName(_ptr, hSteamLeaderboard)
				: throw new Exception("ISteamUserStats _ptr is null!");
		}

		public virtual int ISteamUserStats_GetLeaderboardEntryCount(ulong hSteamLeaderboard) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUserStats_GetLeaderboardEntryCount(_ptr, hSteamLeaderboard)
				: throw new Exception("ISteamUserStats _ptr is null!");
		}

		public virtual LeaderboardSortMethod ISteamUserStats_GetLeaderboardSortMethod(
			ulong hSteamLeaderboard) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUserStats_GetLeaderboardSortMethod(_ptr, hSteamLeaderboard)
				: throw new Exception("ISteamUserStats _ptr is null!");
		}

		public virtual LeaderboardDisplayType ISteamUserStats_GetLeaderboardDisplayType(
			ulong hSteamLeaderboard) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUserStats_GetLeaderboardDisplayType(_ptr, hSteamLeaderboard)
				: throw new Exception("ISteamUserStats _ptr is null!");
		}

		public virtual SteamAPICall_t ISteamUserStats_DownloadLeaderboardEntries(
			ulong hSteamLeaderboard,
			LeaderboardDataRequest eLeaderboardDataRequest,
			int nRangeStart,
			int nRangeEnd) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUserStats _ptr is null!");
			return Native.SteamAPI_ISteamUserStats_DownloadLeaderboardEntries(_ptr, hSteamLeaderboard,
				eLeaderboardDataRequest, nRangeStart, nRangeEnd);
		}

		public virtual SteamAPICall_t ISteamUserStats_DownloadLeaderboardEntriesForUsers(
			ulong hSteamLeaderboard,
			IntPtr prgUsers,
			int cUsers) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUserStats _ptr is null!");
			return Native.SteamAPI_ISteamUserStats_DownloadLeaderboardEntriesForUsers(_ptr, hSteamLeaderboard, prgUsers,
				cUsers);
		}

		public virtual bool ISteamUserStats_GetDownloadedLeaderboardEntry(
			ulong hSteamLeaderboardEntries,
			int index,
			ref LeaderboardEntry_t pLeaderboardEntry,
			IntPtr pDetails,
			int cDetailsMax) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUserStats _ptr is null!");
			return Native.SteamAPI_ISteamUserStats_GetDownloadedLeaderboardEntry(_ptr, hSteamLeaderboardEntries, index,
				ref pLeaderboardEntry, pDetails, cDetailsMax);
		}

		public virtual SteamAPICall_t ISteamUserStats_UploadLeaderboardScore(
			ulong hSteamLeaderboard,
			LeaderboardUploadScoreMethod eLeaderboardUploadScoreMethod,
			int nScore,
			int[] pScoreDetails,
			int cScoreDetailsCount) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUserStats _ptr is null!");
			return Native.SteamAPI_ISteamUserStats_UploadLeaderboardScore(_ptr, hSteamLeaderboard,
				eLeaderboardUploadScoreMethod, nScore, pScoreDetails, cScoreDetailsCount);
		}

		public virtual SteamAPICall_t ISteamUserStats_AttachLeaderboardUGC(
			ulong hSteamLeaderboard,
			ulong hUGC) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUserStats _ptr is null!");
			return Native.SteamAPI_ISteamUserStats_AttachLeaderboardUGC(_ptr, hSteamLeaderboard, hUGC);
		}

		public virtual SteamAPICall_t ISteamUserStats_GetNumberOfCurrentPlayers() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUserStats_GetNumberOfCurrentPlayers(_ptr)
				: throw new Exception("ISteamUserStats _ptr is null!");
		}

		public virtual SteamAPICall_t ISteamUserStats_RequestGlobalAchievementPercentages() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUserStats_RequestGlobalAchievementPercentages(_ptr)
				: throw new Exception("ISteamUserStats _ptr is null!");
		}

		public virtual int ISteamUserStats_GetMostAchievedAchievementInfo(
			StringBuilder pchName,
			uint unNameBufLen,
			out float pflPercent,
			[MarshalAs(UnmanagedType.U1)] ref bool pbAchieved) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUserStats _ptr is null!");
			return Native.SteamAPI_ISteamUserStats_GetMostAchievedAchievementInfo(_ptr, pchName, unNameBufLen,
				out pflPercent, ref pbAchieved);
		}

		public virtual int ISteamUserStats_GetNextMostAchievedAchievementInfo(
			int iIteratorPrevious,
			StringBuilder pchName,
			uint unNameBufLen,
			out float pflPercent,
			[MarshalAs(UnmanagedType.U1)] ref bool pbAchieved) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUserStats _ptr is null!");
			return Native.SteamAPI_ISteamUserStats_GetNextMostAchievedAchievementInfo(_ptr, iIteratorPrevious, pchName,
				unNameBufLen, out pflPercent, ref pbAchieved);
		}

		public virtual bool ISteamUserStats_GetAchievementAchievedPercent(
			string pchName,
			out float pflPercent) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUserStats_GetAchievementAchievedPercent(_ptr, pchName, out pflPercent)
				: throw new Exception("ISteamUserStats _ptr is null!");
		}

		public virtual SteamAPICall_t ISteamUserStats_RequestGlobalStats(int nHistoryDays) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUserStats_RequestGlobalStats(_ptr, nHistoryDays)
				: throw new Exception("ISteamUserStats _ptr is null!");
		}

		public virtual bool ISteamUserStats_GetGlobalStat(string pchStatName, out long pData) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUserStats_GetGlobalStat(_ptr, pchStatName, out pData)
				: throw new Exception("ISteamUserStats _ptr is null!");
		}

		public virtual bool ISteamUserStats_GetGlobalStat0(string pchStatName, out double pData) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUserStats_GetGlobalStat0(_ptr, pchStatName, out pData)
				: throw new Exception("ISteamUserStats _ptr is null!");
		}

		public virtual int ISteamUserStats_GetGlobalStatHistory(
			string pchStatName,
			out long pData,
			uint cubData) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUserStats _ptr is null!");
			return Native.SteamAPI_ISteamUserStats_GetGlobalStatHistory(_ptr, pchStatName, out pData, cubData);
		}

		public virtual int ISteamUserStats_GetGlobalStatHistory0(
			string pchStatName,
			out double pData,
			uint cubData) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUserStats _ptr is null!");
			return Native.SteamAPI_ISteamUserStats_GetGlobalStatHistory0(_ptr, pchStatName, out pData, cubData);
		}

		public virtual bool ISteamApps_BIsSubscribed() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamApps_BIsSubscribed(_ptr)
				: throw new Exception("ISteamApps _ptr is null!");
		}

		public virtual bool ISteamApps_BIsLowViolence() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamApps_BIsLowViolence(_ptr)
				: throw new Exception("ISteamApps _ptr is null!");
		}

		public virtual bool ISteamApps_BIsCybercafe() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamApps_BIsCybercafe(_ptr)
				: throw new Exception("ISteamApps _ptr is null!");
		}

		public virtual bool ISteamApps_BIsVACBanned() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamApps_BIsVACBanned(_ptr)
				: throw new Exception("ISteamApps _ptr is null!");
		}

		public virtual IntPtr ISteamApps_GetCurrentGameLanguage() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamApps_GetCurrentGameLanguage(_ptr)
				: throw new Exception("ISteamApps _ptr is null!");
		}

		public virtual IntPtr ISteamApps_GetAvailableGameLanguages() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamApps_GetAvailableGameLanguages(_ptr)
				: throw new Exception("ISteamApps _ptr is null!");
		}

		public virtual bool ISteamApps_BIsSubscribedApp(uint appID) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamApps_BIsSubscribedApp(_ptr, appID)
				: throw new Exception("ISteamApps _ptr is null!");
		}

		public virtual bool ISteamApps_BIsDlcInstalled(uint appID) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamApps_BIsDlcInstalled(_ptr, appID)
				: throw new Exception("ISteamApps _ptr is null!");
		}

		public virtual uint ISteamApps_GetEarliestPurchaseUnixTime(uint nAppID) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamApps_GetEarliestPurchaseUnixTime(_ptr, nAppID)
				: throw new Exception("ISteamApps _ptr is null!");
		}

		public virtual bool ISteamApps_BIsSubscribedFromFreeWeekend() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamApps_BIsSubscribedFromFreeWeekend(_ptr)
				: throw new Exception("ISteamApps _ptr is null!");
		}

		public virtual int ISteamApps_GetDLCCount() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamApps_GetDLCCount(_ptr)
				: throw new Exception("ISteamApps _ptr is null!");
		}

		public virtual bool ISteamApps_BGetDLCDataByIndex(
			int iDLC,
			ref uint pAppID,
			[MarshalAs(UnmanagedType.U1)] ref bool pbAvailable,
			StringBuilder pchName,
			int cchNameBufferSize) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamApps _ptr is null!");
			return Native.SteamAPI_ISteamApps_BGetDLCDataByIndex(_ptr, iDLC, ref pAppID, ref pbAvailable, pchName,
				cchNameBufferSize);
		}

		public virtual void ISteamApps_InstallDLC(uint nAppID) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamApps _ptr is null!");
			Native.SteamAPI_ISteamApps_InstallDLC(_ptr, nAppID);
		}

		public virtual void ISteamApps_UninstallDLC(uint nAppID) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamApps _ptr is null!");
			Native.SteamAPI_ISteamApps_UninstallDLC(_ptr, nAppID);
		}

		public virtual void ISteamApps_RequestAppProofOfPurchaseKey(uint nAppID) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamApps _ptr is null!");
			Native.SteamAPI_ISteamApps_RequestAppProofOfPurchaseKey(_ptr, nAppID);
		}

		public virtual bool ISteamApps_GetCurrentBetaName(
			StringBuilder pchName,
			int cchNameBufferSize) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamApps _ptr is null!");
			return Native.SteamAPI_ISteamApps_GetCurrentBetaName(_ptr, pchName, cchNameBufferSize);
		}

		public virtual bool ISteamApps_MarkContentCorrupt([MarshalAs(UnmanagedType.U1)] bool bMissingFilesOnly) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamApps_MarkContentCorrupt(_ptr, bMissingFilesOnly)
				: throw new Exception("ISteamApps _ptr is null!");
		}

		public virtual uint ISteamApps_GetInstalledDepots(
			uint appID,
			IntPtr pvecDepots,
			uint cMaxDepots) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamApps _ptr is null!");
			return Native.SteamAPI_ISteamApps_GetInstalledDepots(_ptr, appID, pvecDepots, cMaxDepots);
		}

		public virtual uint ISteamApps_GetAppInstallDir(
			uint appID,
			StringBuilder pchFolder,
			uint cchFolderBufferSize) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamApps _ptr is null!");
			return Native.SteamAPI_ISteamApps_GetAppInstallDir(_ptr, appID, pchFolder, cchFolderBufferSize);
		}

		public virtual bool ISteamApps_BIsAppInstalled(uint appID) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamApps_BIsAppInstalled(_ptr, appID)
				: throw new Exception("ISteamApps _ptr is null!");
		}

		public virtual CSteamID ISteamApps_GetAppOwner() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamApps_GetAppOwner(_ptr)
				: throw new Exception("ISteamApps _ptr is null!");
		}

		public virtual IntPtr ISteamApps_GetLaunchQueryParam(string pchKey) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamApps_GetLaunchQueryParam(_ptr, pchKey)
				: throw new Exception("ISteamApps _ptr is null!");
		}

		public virtual bool ISteamApps_GetDlcDownloadProgress(
			uint nAppID,
			out ulong punBytesDownloaded,
			out ulong punBytesTotal) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamApps_GetDlcDownloadProgress(_ptr, nAppID, out punBytesDownloaded,
					out punBytesTotal)
				: throw new Exception("ISteamApps _ptr is null!");
		}

		public virtual int ISteamApps_GetAppBuildId() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamApps_GetAppBuildId(_ptr)
				: throw new Exception("ISteamApps _ptr is null!");
		}

		public virtual void ISteamApps_RequestAllProofOfPurchaseKeys() {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamApps _ptr is null!");
			Native.SteamAPI_ISteamApps_RequestAllProofOfPurchaseKeys(_ptr);
		}

		public virtual SteamAPICall_t ISteamApps_GetFileDetails(string pszFileName) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamApps_GetFileDetails(_ptr, pszFileName)
				: throw new Exception("ISteamApps _ptr is null!");
		}

		public virtual bool ISteamNetworking_SendP2PPacket(
			ulong steamIDRemote,
			IntPtr pubData,
			uint cubData,
			P2PSend eP2PSendType,
			int nChannel) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamNetworking _ptr is null!");
			return Native.SteamAPI_ISteamNetworking_SendP2PPacket(_ptr, steamIDRemote, pubData, cubData, eP2PSendType,
				nChannel);
		}

		public virtual bool ISteamNetworking_IsP2PPacketAvailable(out uint pcubMsgSize, int nChannel) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamNetworking_IsP2PPacketAvailable(_ptr, out pcubMsgSize, nChannel)
				: throw new Exception("ISteamNetworking _ptr is null!");
		}

		public virtual bool ISteamNetworking_ReadP2PPacket(
			IntPtr pubDest,
			uint cubDest,
			out uint pcubMsgSize,
			out ulong psteamIDRemote,
			int nChannel) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamNetworking _ptr is null!");
			return Native.SteamAPI_ISteamNetworking_ReadP2PPacket(_ptr, pubDest, cubDest, out pcubMsgSize,
				out psteamIDRemote, nChannel);
		}

		public virtual bool ISteamNetworking_AcceptP2PSessionWithUser(ulong steamIDRemote) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamNetworking_AcceptP2PSessionWithUser(_ptr, steamIDRemote)
				: throw new Exception("ISteamNetworking _ptr is null!");
		}

		public virtual bool ISteamNetworking_CloseP2PSessionWithUser(ulong steamIDRemote) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamNetworking_CloseP2PSessionWithUser(_ptr, steamIDRemote)
				: throw new Exception("ISteamNetworking _ptr is null!");
		}

		public virtual bool ISteamNetworking_CloseP2PChannelWithUser(
			ulong steamIDRemote,
			int nChannel) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamNetworking _ptr is null!");
			return Native.SteamAPI_ISteamNetworking_CloseP2PChannelWithUser(_ptr, steamIDRemote, nChannel);
		}

		public virtual bool ISteamNetworking_GetP2PSessionState(
			ulong steamIDRemote,
			ref P2PSessionState_t pConnectionState) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamNetworking _ptr is null!");
			return Native.SteamAPI_ISteamNetworking_GetP2PSessionState(_ptr, steamIDRemote, ref pConnectionState);
		}

		public virtual bool ISteamNetworking_AllowP2PPacketRelay([MarshalAs(UnmanagedType.U1)] bool bAllow) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamNetworking_AllowP2PPacketRelay(_ptr, bAllow)
				: throw new Exception("ISteamNetworking _ptr is null!");
		}

		public virtual SNetListenSocket_t ISteamNetworking_CreateListenSocket(
			int nVirtualP2PPort,
			uint nIP,
			ushort nPort,
			[MarshalAs(UnmanagedType.U1)] bool bAllowUseOfPacketRelay) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamNetworking _ptr is null!");
			return Native.SteamAPI_ISteamNetworking_CreateListenSocket(_ptr, nVirtualP2PPort, nIP, nPort,
				bAllowUseOfPacketRelay);
		}

		public virtual SNetSocket_t ISteamNetworking_CreateP2PConnectionSocket(
			ulong steamIDTarget,
			int nVirtualPort,
			int nTimeoutSec,
			[MarshalAs(UnmanagedType.U1)] bool bAllowUseOfPacketRelay) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamNetworking _ptr is null!");
			return Native.SteamAPI_ISteamNetworking_CreateP2PConnectionSocket(_ptr, steamIDTarget, nVirtualPort,
				nTimeoutSec, bAllowUseOfPacketRelay);
		}

		public virtual SNetSocket_t ISteamNetworking_CreateConnectionSocket(
			uint nIP,
			ushort nPort,
			int nTimeoutSec) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamNetworking _ptr is null!");
			return Native.SteamAPI_ISteamNetworking_CreateConnectionSocket(_ptr, nIP, nPort, nTimeoutSec);
		}

		public virtual bool ISteamNetworking_DestroySocket(uint hSocket,
			[MarshalAs(UnmanagedType.U1)] bool bNotifyRemoteEnd) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamNetworking _ptr is null!");
			return Native.SteamAPI_ISteamNetworking_DestroySocket(_ptr, hSocket, bNotifyRemoteEnd);
		}

		public virtual bool ISteamNetworking_DestroyListenSocket(uint hSocket,
			[MarshalAs(UnmanagedType.U1)] bool bNotifyRemoteEnd) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamNetworking _ptr is null!");
			return Native.SteamAPI_ISteamNetworking_DestroyListenSocket(_ptr, hSocket, bNotifyRemoteEnd);
		}

		public virtual bool ISteamNetworking_SendDataOnSocket(
			uint hSocket,
			IntPtr pubData,
			uint cubData,
			[MarshalAs(UnmanagedType.U1)] bool bReliable) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamNetworking _ptr is null!");
			return Native.SteamAPI_ISteamNetworking_SendDataOnSocket(_ptr, hSocket, pubData, cubData, bReliable);
		}

		public virtual bool ISteamNetworking_IsDataAvailableOnSocket(
			uint hSocket,
			out uint pcubMsgSize) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamNetworking_IsDataAvailableOnSocket(_ptr, hSocket, out pcubMsgSize)
				: throw new Exception("ISteamNetworking _ptr is null!");
		}

		public virtual bool ISteamNetworking_RetrieveDataFromSocket(
			uint hSocket,
			IntPtr pubDest,
			uint cubDest,
			out uint pcubMsgSize) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamNetworking _ptr is null!");
			return Native.SteamAPI_ISteamNetworking_RetrieveDataFromSocket(_ptr, hSocket, pubDest, cubDest,
				out pcubMsgSize);
		}

		public virtual bool ISteamNetworking_IsDataAvailable(
			uint hListenSocket,
			out uint pcubMsgSize,
			ref uint phSocket) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamNetworking _ptr is null!");
			return Native.SteamAPI_ISteamNetworking_IsDataAvailable(_ptr, hListenSocket, out pcubMsgSize, ref phSocket);
		}

		public virtual bool ISteamNetworking_RetrieveData(
			uint hListenSocket,
			IntPtr pubDest,
			uint cubDest,
			out uint pcubMsgSize,
			ref uint phSocket) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamNetworking _ptr is null!");
			return Native.SteamAPI_ISteamNetworking_RetrieveData(_ptr, hListenSocket, pubDest, cubDest, out pcubMsgSize,
				ref phSocket);
		}

		public virtual bool ISteamNetworking_GetSocketInfo(
			uint hSocket,
			out ulong pSteamIDRemote,
			IntPtr peSocketStatus,
			out uint punIPRemote,
			out ushort punPortRemote) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamNetworking _ptr is null!");
			return Native.SteamAPI_ISteamNetworking_GetSocketInfo(_ptr, hSocket, out pSteamIDRemote, peSocketStatus,
				out punIPRemote, out punPortRemote);
		}

		public virtual bool ISteamNetworking_GetListenSocketInfo(
			uint hListenSocket,
			out uint pnIP,
			out ushort pnPort) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamNetworking_GetListenSocketInfo(_ptr, hListenSocket, out pnIP, out pnPort)
				: throw new Exception("ISteamNetworking _ptr is null!");
		}

		public virtual SNetSocketConnectionType ISteamNetworking_GetSocketConnectionType(uint hSocket) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamNetworking_GetSocketConnectionType(_ptr, hSocket)
				: throw new Exception("ISteamNetworking _ptr is null!");
		}

		public virtual int ISteamNetworking_GetMaxPacketSize(uint hSocket) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamNetworking_GetMaxPacketSize(_ptr, hSocket)
				: throw new Exception("ISteamNetworking _ptr is null!");
		}

		public virtual ScreenshotHandle ISteamScreenshots_WriteScreenshot(
			IntPtr pubRGB,
			uint cubRGB,
			int nWidth,
			int nHeight) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamScreenshots _ptr is null!");
			return Native.SteamAPI_ISteamScreenshots_WriteScreenshot(_ptr, pubRGB, cubRGB, nWidth, nHeight);
		}

		public virtual ScreenshotHandle ISteamScreenshots_AddScreenshotToLibrary(
			string pchFilename,
			string pchThumbnailFilename,
			int nWidth,
			int nHeight) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamScreenshots _ptr is null!");
			return Native.SteamAPI_ISteamScreenshots_AddScreenshotToLibrary(_ptr, pchFilename, pchThumbnailFilename,
				nWidth, nHeight);
		}

		public virtual void ISteamScreenshots_TriggerScreenshot() {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamScreenshots _ptr is null!");
			Native.SteamAPI_ISteamScreenshots_TriggerScreenshot(_ptr);
		}

		public virtual void ISteamScreenshots_HookScreenshots([MarshalAs(UnmanagedType.U1)] bool bHook) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamScreenshots _ptr is null!");
			Native.SteamAPI_ISteamScreenshots_HookScreenshots(_ptr, bHook);
		}

		public virtual bool ISteamScreenshots_SetLocation(uint hScreenshot, string pchLocation) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamScreenshots _ptr is null!");
			return Native.SteamAPI_ISteamScreenshots_SetLocation(_ptr, hScreenshot, pchLocation);
		}

		public virtual bool ISteamScreenshots_TagUser(uint hScreenshot, ulong steamID) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamScreenshots _ptr is null!");
			return Native.SteamAPI_ISteamScreenshots_TagUser(_ptr, hScreenshot, steamID);
		}

		public virtual bool ISteamScreenshots_TagPublishedFile(
			uint hScreenshot,
			ulong unPublishedFileID) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamScreenshots _ptr is null!");
			return Native.SteamAPI_ISteamScreenshots_TagPublishedFile(_ptr, hScreenshot, unPublishedFileID);
		}

		public virtual bool ISteamScreenshots_IsScreenshotsHooked() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamScreenshots_IsScreenshotsHooked(_ptr)
				: throw new Exception("ISteamScreenshots _ptr is null!");
		}

		public virtual ScreenshotHandle ISteamScreenshots_AddVRScreenshotToLibrary(
			VRScreenshotType eType,
			string pchFilename,
			string pchVRFilename) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamScreenshots _ptr is null!");
			return Native.SteamAPI_ISteamScreenshots_AddVRScreenshotToLibrary(_ptr, eType, pchFilename, pchVRFilename);
		}

		public virtual bool ISteamMusic_BIsEnabled() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMusic_BIsEnabled(_ptr)
				: throw new Exception("ISteamMusic _ptr is null!");
		}

		public virtual bool ISteamMusic_BIsPlaying() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMusic_BIsPlaying(_ptr)
				: throw new Exception("ISteamMusic _ptr is null!");
		}

		public virtual AudioPlayback_Status ISteamMusic_GetPlaybackStatus() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMusic_GetPlaybackStatus(_ptr)
				: throw new Exception("ISteamMusic _ptr is null!");
		}

		public virtual void ISteamMusic_Play() {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMusic _ptr is null!");
			Native.SteamAPI_ISteamMusic_Play(_ptr);
		}

		public virtual void ISteamMusic_Pause() {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMusic _ptr is null!");
			Native.SteamAPI_ISteamMusic_Pause(_ptr);
		}

		public virtual void ISteamMusic_PlayPrevious() {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMusic _ptr is null!");
			Native.SteamAPI_ISteamMusic_PlayPrevious(_ptr);
		}

		public virtual void ISteamMusic_PlayNext() {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMusic _ptr is null!");
			Native.SteamAPI_ISteamMusic_PlayNext(_ptr);
		}

		public virtual void ISteamMusic_SetVolume(float flVolume) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMusic _ptr is null!");
			Native.SteamAPI_ISteamMusic_SetVolume(_ptr, flVolume);
		}

		public virtual float ISteamMusic_GetVolume() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMusic_GetVolume(_ptr)
				: throw new Exception("ISteamMusic _ptr is null!");
		}

		public virtual bool ISteamMusicRemote_RegisterSteamMusicRemote(string pchName) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMusicRemote_RegisterSteamMusicRemote(_ptr, pchName)
				: throw new Exception("ISteamMusicRemote _ptr is null!");
		}

		public virtual bool ISteamMusicRemote_DeregisterSteamMusicRemote() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMusicRemote_DeregisterSteamMusicRemote(_ptr)
				: throw new Exception("ISteamMusicRemote _ptr is null!");
		}

		public virtual bool ISteamMusicRemote_BIsCurrentMusicRemote() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMusicRemote_BIsCurrentMusicRemote(_ptr)
				: throw new Exception("ISteamMusicRemote _ptr is null!");
		}

		public virtual bool ISteamMusicRemote_BActivationSuccess([MarshalAs(UnmanagedType.U1)] bool bValue) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMusicRemote_BActivationSuccess(_ptr, bValue)
				: throw new Exception("ISteamMusicRemote _ptr is null!");
		}

		public virtual bool ISteamMusicRemote_SetDisplayName(string pchDisplayName) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMusicRemote_SetDisplayName(_ptr, pchDisplayName)
				: throw new Exception("ISteamMusicRemote _ptr is null!");
		}

		public virtual bool ISteamMusicRemote_SetPNGIcon_64x64(IntPtr pvBuffer, uint cbBufferLength) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMusicRemote _ptr is null!");
			return Native.SteamAPI_ISteamMusicRemote_SetPNGIcon_64x64(_ptr, pvBuffer, cbBufferLength);
		}

		public virtual bool ISteamMusicRemote_EnablePlayPrevious([MarshalAs(UnmanagedType.U1)] bool bValue) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMusicRemote_EnablePlayPrevious(_ptr, bValue)
				: throw new Exception("ISteamMusicRemote _ptr is null!");
		}

		public virtual bool ISteamMusicRemote_EnablePlayNext([MarshalAs(UnmanagedType.U1)] bool bValue) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMusicRemote_EnablePlayNext(_ptr, bValue)
				: throw new Exception("ISteamMusicRemote _ptr is null!");
		}

		public virtual bool ISteamMusicRemote_EnableShuffled([MarshalAs(UnmanagedType.U1)] bool bValue) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMusicRemote_EnableShuffled(_ptr, bValue)
				: throw new Exception("ISteamMusicRemote _ptr is null!");
		}

		public virtual bool ISteamMusicRemote_EnableLooped([MarshalAs(UnmanagedType.U1)] bool bValue) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMusicRemote_EnableLooped(_ptr, bValue)
				: throw new Exception("ISteamMusicRemote _ptr is null!");
		}

		public virtual bool ISteamMusicRemote_EnableQueue([MarshalAs(UnmanagedType.U1)] bool bValue) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMusicRemote_EnableQueue(_ptr, bValue)
				: throw new Exception("ISteamMusicRemote _ptr is null!");
		}

		public virtual bool ISteamMusicRemote_EnablePlaylists([MarshalAs(UnmanagedType.U1)] bool bValue) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMusicRemote_EnablePlaylists(_ptr, bValue)
				: throw new Exception("ISteamMusicRemote _ptr is null!");
		}

		public virtual bool ISteamMusicRemote_UpdatePlaybackStatus(AudioPlayback_Status nStatus) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMusicRemote_UpdatePlaybackStatus(_ptr, nStatus)
				: throw new Exception("ISteamMusicRemote _ptr is null!");
		}

		public virtual bool ISteamMusicRemote_UpdateShuffled([MarshalAs(UnmanagedType.U1)] bool bValue) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMusicRemote_UpdateShuffled(_ptr, bValue)
				: throw new Exception("ISteamMusicRemote _ptr is null!");
		}

		public virtual bool ISteamMusicRemote_UpdateLooped([MarshalAs(UnmanagedType.U1)] bool bValue) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMusicRemote_UpdateLooped(_ptr, bValue)
				: throw new Exception("ISteamMusicRemote _ptr is null!");
		}

		public virtual bool ISteamMusicRemote_UpdateVolume(float flValue) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMusicRemote_UpdateVolume(_ptr, flValue)
				: throw new Exception("ISteamMusicRemote _ptr is null!");
		}

		public virtual bool ISteamMusicRemote_CurrentEntryWillChange() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMusicRemote_CurrentEntryWillChange(_ptr)
				: throw new Exception("ISteamMusicRemote _ptr is null!");
		}

		public virtual bool ISteamMusicRemote_CurrentEntryIsAvailable([MarshalAs(UnmanagedType.U1)] bool bAvailable) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMusicRemote_CurrentEntryIsAvailable(_ptr, bAvailable)
				: throw new Exception("ISteamMusicRemote _ptr is null!");
		}

		public virtual bool ISteamMusicRemote_UpdateCurrentEntryText(string pchText) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMusicRemote_UpdateCurrentEntryText(_ptr, pchText)
				: throw new Exception("ISteamMusicRemote _ptr is null!");
		}

		public virtual bool ISteamMusicRemote_UpdateCurrentEntryElapsedSeconds(int nValue) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMusicRemote_UpdateCurrentEntryElapsedSeconds(_ptr, nValue)
				: throw new Exception("ISteamMusicRemote _ptr is null!");
		}

		public virtual bool ISteamMusicRemote_UpdateCurrentEntryCoverArt(
			IntPtr pvBuffer,
			uint cbBufferLength) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMusicRemote _ptr is null!");
			return Native.SteamAPI_ISteamMusicRemote_UpdateCurrentEntryCoverArt(_ptr, pvBuffer, cbBufferLength);
		}

		public virtual bool ISteamMusicRemote_CurrentEntryDidChange() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMusicRemote_CurrentEntryDidChange(_ptr)
				: throw new Exception("ISteamMusicRemote _ptr is null!");
		}

		public virtual bool ISteamMusicRemote_QueueWillChange() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMusicRemote_QueueWillChange(_ptr)
				: throw new Exception("ISteamMusicRemote _ptr is null!");
		}

		public virtual bool ISteamMusicRemote_ResetQueueEntries() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMusicRemote_ResetQueueEntries(_ptr)
				: throw new Exception("ISteamMusicRemote _ptr is null!");
		}

		public virtual bool ISteamMusicRemote_SetQueueEntry(
			int nID,
			int nPosition,
			string pchEntryText) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMusicRemote _ptr is null!");
			return Native.SteamAPI_ISteamMusicRemote_SetQueueEntry(_ptr, nID, nPosition, pchEntryText);
		}

		public virtual bool ISteamMusicRemote_SetCurrentQueueEntry(int nID) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMusicRemote_SetCurrentQueueEntry(_ptr, nID)
				: throw new Exception("ISteamMusicRemote _ptr is null!");
		}

		public virtual bool ISteamMusicRemote_QueueDidChange() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMusicRemote_QueueDidChange(_ptr)
				: throw new Exception("ISteamMusicRemote _ptr is null!");
		}

		public virtual bool ISteamMusicRemote_PlaylistWillChange() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMusicRemote_PlaylistWillChange(_ptr)
				: throw new Exception("ISteamMusicRemote _ptr is null!");
		}

		public virtual bool ISteamMusicRemote_ResetPlaylistEntries() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMusicRemote_ResetPlaylistEntries(_ptr)
				: throw new Exception("ISteamMusicRemote _ptr is null!");
		}

		public virtual bool ISteamMusicRemote_SetPlaylistEntry(
			int nID,
			int nPosition,
			string pchEntryText) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMusicRemote _ptr is null!");
			return Native.SteamAPI_ISteamMusicRemote_SetPlaylistEntry(_ptr, nID, nPosition, pchEntryText);
		}

		public virtual bool ISteamMusicRemote_SetCurrentPlaylistEntry(int nID) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMusicRemote_SetCurrentPlaylistEntry(_ptr, nID)
				: throw new Exception("ISteamMusicRemote _ptr is null!");
		}

		public virtual bool ISteamMusicRemote_PlaylistDidChange() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMusicRemote_PlaylistDidChange(_ptr)
				: throw new Exception("ISteamMusicRemote _ptr is null!");
		}

		public virtual HTTPRequestHandle ISteamHTTP_CreateHTTPRequest(
			HTTPMethod eHTTPRequestMethod,
			string pchAbsoluteURL) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTTP _ptr is null!");
			return Native.SteamAPI_ISteamHTTP_CreateHTTPRequest(_ptr, eHTTPRequestMethod, pchAbsoluteURL);
		}

		public virtual bool ISteamHTTP_SetHTTPRequestContextValue(uint hRequest, ulong ulContextValue) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTTP _ptr is null!");
			return Native.SteamAPI_ISteamHTTP_SetHTTPRequestContextValue(_ptr, hRequest, ulContextValue);
		}

		public virtual bool ISteamHTTP_SetHTTPRequestNetworkActivityTimeout(
			uint hRequest,
			uint unTimeoutSeconds) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTTP _ptr is null!");
			return Native.SteamAPI_ISteamHTTP_SetHTTPRequestNetworkActivityTimeout(_ptr, hRequest, unTimeoutSeconds);
		}

		public virtual bool ISteamHTTP_SetHTTPRequestHeaderValue(
			uint hRequest,
			string pchHeaderName,
			string pchHeaderValue) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTTP _ptr is null!");
			return Native.SteamAPI_ISteamHTTP_SetHTTPRequestHeaderValue(_ptr, hRequest, pchHeaderName, pchHeaderValue);
		}

		public virtual bool ISteamHTTP_SetHTTPRequestGetOrPostParameter(
			uint hRequest,
			string pchParamName,
			string pchParamValue) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTTP _ptr is null!");
			return Native.SteamAPI_ISteamHTTP_SetHTTPRequestGetOrPostParameter(_ptr, hRequest, pchParamName,
				pchParamValue);
		}

		public virtual bool ISteamHTTP_SendHTTPRequest(uint hRequest, ref ulong pCallHandle) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTTP _ptr is null!");
			return Native.SteamAPI_ISteamHTTP_SendHTTPRequest(_ptr, hRequest, ref pCallHandle);
		}

		public virtual bool ISteamHTTP_SendHTTPRequestAndStreamResponse(
			uint hRequest,
			ref ulong pCallHandle) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTTP _ptr is null!");
			return Native.SteamAPI_ISteamHTTP_SendHTTPRequestAndStreamResponse(_ptr, hRequest, ref pCallHandle);
		}

		public virtual bool ISteamHTTP_DeferHTTPRequest(uint hRequest) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamHTTP_DeferHTTPRequest(_ptr, hRequest)
				: throw new Exception("ISteamHTTP _ptr is null!");
		}

		public virtual bool ISteamHTTP_PrioritizeHTTPRequest(uint hRequest) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamHTTP_PrioritizeHTTPRequest(_ptr, hRequest)
				: throw new Exception("ISteamHTTP _ptr is null!");
		}

		public virtual bool ISteamHTTP_GetHTTPResponseHeaderSize(
			uint hRequest,
			string pchHeaderName,
			out uint unResponseHeaderSize) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTTP _ptr is null!");
			return Native.SteamAPI_ISteamHTTP_GetHTTPResponseHeaderSize(_ptr, hRequest, pchHeaderName,
				out unResponseHeaderSize);
		}

		public virtual bool ISteamHTTP_GetHTTPResponseHeaderValue(
			uint hRequest,
			string pchHeaderName,
			out byte pHeaderValueBuffer,
			uint unBufferSize) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTTP _ptr is null!");
			return Native.SteamAPI_ISteamHTTP_GetHTTPResponseHeaderValue(_ptr, hRequest, pchHeaderName,
				out pHeaderValueBuffer, unBufferSize);
		}

		public virtual bool ISteamHTTP_GetHTTPResponseBodySize(uint hRequest, out uint unBodySize) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamHTTP_GetHTTPResponseBodySize(_ptr, hRequest, out unBodySize)
				: throw new Exception("ISteamHTTP _ptr is null!");
		}

		public virtual bool ISteamHTTP_GetHTTPResponseBodyData(
			uint hRequest,
			out byte pBodyDataBuffer,
			uint unBufferSize) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTTP _ptr is null!");
			return Native.SteamAPI_ISteamHTTP_GetHTTPResponseBodyData(_ptr, hRequest, out pBodyDataBuffer,
				unBufferSize);
		}

		public virtual bool ISteamHTTP_GetHTTPStreamingResponseBodyData(
			uint hRequest,
			uint cOffset,
			out byte pBodyDataBuffer,
			uint unBufferSize) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTTP _ptr is null!");
			return Native.SteamAPI_ISteamHTTP_GetHTTPStreamingResponseBodyData(_ptr, hRequest, cOffset,
				out pBodyDataBuffer, unBufferSize);
		}

		public virtual bool ISteamHTTP_ReleaseHTTPRequest(uint hRequest) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamHTTP_ReleaseHTTPRequest(_ptr, hRequest)
				: throw new Exception("ISteamHTTP _ptr is null!");
		}

		public virtual bool ISteamHTTP_GetHTTPDownloadProgressPct(
			uint hRequest,
			out float pflPercentOut) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamHTTP_GetHTTPDownloadProgressPct(_ptr, hRequest, out pflPercentOut)
				: throw new Exception("ISteamHTTP _ptr is null!");
		}

		public virtual bool ISteamHTTP_SetHTTPRequestRawPostBody(
			uint hRequest,
			string pchContentType,
			out byte pubBody,
			uint unBodyLen) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTTP _ptr is null!");
			return Native.SteamAPI_ISteamHTTP_SetHTTPRequestRawPostBody(_ptr, hRequest, pchContentType, out pubBody,
				unBodyLen);
		}

		public virtual HTTPCookieContainerHandle ISteamHTTP_CreateCookieContainer(
			[MarshalAs(UnmanagedType.U1)] bool bAllowResponsesToModify) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamHTTP_CreateCookieContainer(_ptr, bAllowResponsesToModify)
				: throw new Exception("ISteamHTTP _ptr is null!");
		}

		public virtual bool ISteamHTTP_ReleaseCookieContainer(uint hCookieContainer) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamHTTP_ReleaseCookieContainer(_ptr, hCookieContainer)
				: throw new Exception("ISteamHTTP _ptr is null!");
		}

		public virtual bool ISteamHTTP_SetCookie(
			uint hCookieContainer,
			string pchHost,
			string pchUrl,
			string pchCookie) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTTP _ptr is null!");
			return Native.SteamAPI_ISteamHTTP_SetCookie(_ptr, hCookieContainer, pchHost, pchUrl, pchCookie);
		}

		public virtual bool ISteamHTTP_SetHTTPRequestCookieContainer(
			uint hRequest,
			uint hCookieContainer) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTTP _ptr is null!");
			return Native.SteamAPI_ISteamHTTP_SetHTTPRequestCookieContainer(_ptr, hRequest, hCookieContainer);
		}

		public virtual bool ISteamHTTP_SetHTTPRequestUserAgentInfo(
			uint hRequest,
			string pchUserAgentInfo) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTTP _ptr is null!");
			return Native.SteamAPI_ISteamHTTP_SetHTTPRequestUserAgentInfo(_ptr, hRequest, pchUserAgentInfo);
		}

		public virtual bool ISteamHTTP_SetHTTPRequestRequiresVerifiedCertificate(
			uint hRequest,
			[MarshalAs(UnmanagedType.U1)] bool bRequireVerifiedCertificate) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTTP _ptr is null!");
			return Native.SteamAPI_ISteamHTTP_SetHTTPRequestRequiresVerifiedCertificate(_ptr, hRequest,
				bRequireVerifiedCertificate);
		}

		public virtual bool ISteamHTTP_SetHTTPRequestAbsoluteTimeoutMS(
			uint hRequest,
			uint unMilliseconds) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTTP _ptr is null!");
			return Native.SteamAPI_ISteamHTTP_SetHTTPRequestAbsoluteTimeoutMS(_ptr, hRequest, unMilliseconds);
		}

		public virtual bool ISteamHTTP_GetHTTPRequestWasTimedOut(
			uint hRequest,
			[MarshalAs(UnmanagedType.U1)] ref bool pbWasTimedOut) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTTP _ptr is null!");
			return Native.SteamAPI_ISteamHTTP_GetHTTPRequestWasTimedOut(_ptr, hRequest, ref pbWasTimedOut);
		}

		public virtual ClientUnifiedMessageHandle ISteamUnifiedMessages_SendMethod(
			string pchServiceMethod,
			IntPtr pRequestBuffer,
			uint unRequestBufferSize,
			ulong unContext) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUnifiedMessages _ptr is null!");
			return Native.SteamAPI_ISteamUnifiedMessages_SendMethod(_ptr, pchServiceMethod, pRequestBuffer,
				unRequestBufferSize, unContext);
		}

		public virtual bool ISteamUnifiedMessages_GetMethodResponseInfo(
			ulong hHandle,
			out uint punResponseSize,
			out Result peResult) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUnifiedMessages_GetMethodResponseInfo(_ptr, hHandle, out punResponseSize,
					out peResult)
				: throw new Exception("ISteamUnifiedMessages _ptr is null!");
		}

		public virtual bool ISteamUnifiedMessages_GetMethodResponseData(
			ulong hHandle,
			IntPtr pResponseBuffer,
			uint unResponseBufferSize,
			[MarshalAs(UnmanagedType.U1)] bool bAutoRelease) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUnifiedMessages _ptr is null!");
			return Native.SteamAPI_ISteamUnifiedMessages_GetMethodResponseData(_ptr, hHandle, pResponseBuffer,
				unResponseBufferSize, bAutoRelease);
		}

		public virtual bool ISteamUnifiedMessages_ReleaseMethod(ulong hHandle) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUnifiedMessages_ReleaseMethod(_ptr, hHandle)
				: throw new Exception("ISteamUnifiedMessages _ptr is null!");
		}

		public virtual bool ISteamUnifiedMessages_SendNotification(
			string pchServiceNotification,
			IntPtr pNotificationBuffer,
			uint unNotificationBufferSize) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUnifiedMessages _ptr is null!");
			return Native.SteamAPI_ISteamUnifiedMessages_SendNotification(_ptr, pchServiceNotification,
				pNotificationBuffer, unNotificationBufferSize);
		}

		public virtual bool ISteamController_Init() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamController_Init(_ptr)
				: throw new Exception("ISteamController _ptr is null!");
		}

		public virtual bool ISteamController_Shutdown() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamController_Shutdown(_ptr)
				: throw new Exception("ISteamController _ptr is null!");
		}

		public virtual void ISteamController_RunFrame() {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamController _ptr is null!");
			Native.SteamAPI_ISteamController_RunFrame(_ptr);
		}

		public virtual int ISteamController_GetConnectedControllers(IntPtr handlesOut) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamController_GetConnectedControllers(_ptr, handlesOut)
				: throw new Exception("ISteamController _ptr is null!");
		}

		public virtual bool ISteamController_ShowBindingPanel(ulong controllerHandle) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamController_ShowBindingPanel(_ptr, controllerHandle)
				: throw new Exception("ISteamController _ptr is null!");
		}

		public virtual ControllerActionSetHandle_t ISteamController_GetActionSetHandle(
			string pszActionSetName) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamController_GetActionSetHandle(_ptr, pszActionSetName)
				: throw new Exception("ISteamController _ptr is null!");
		}

		public virtual void ISteamController_ActivateActionSet(
			ulong controllerHandle,
			ulong actionSetHandle) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamController _ptr is null!");
			Native.SteamAPI_ISteamController_ActivateActionSet(_ptr, controllerHandle, actionSetHandle);
		}

		public virtual ControllerActionSetHandle_t ISteamController_GetCurrentActionSet(
			ulong controllerHandle) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamController_GetCurrentActionSet(_ptr, controllerHandle)
				: throw new Exception("ISteamController _ptr is null!");
		}

		public virtual ControllerDigitalActionHandle_t ISteamController_GetDigitalActionHandle(
			string pszActionName) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamController_GetDigitalActionHandle(_ptr, pszActionName)
				: throw new Exception("ISteamController _ptr is null!");
		}

		public virtual ControllerDigitalActionData_t ISteamController_GetDigitalActionData(
			ulong controllerHandle,
			ulong digitalActionHandle) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamController _ptr is null!");
			return Native.SteamAPI_ISteamController_GetDigitalActionData(_ptr, controllerHandle, digitalActionHandle);
		}

		public virtual int ISteamController_GetDigitalActionOrigins(
			ulong controllerHandle,
			ulong actionSetHandle,
			ulong digitalActionHandle,
			out ControllerActionOrigin originsOut) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamController _ptr is null!");
			return Native.SteamAPI_ISteamController_GetDigitalActionOrigins(_ptr, controllerHandle, actionSetHandle,
				digitalActionHandle, out originsOut);
		}

		public virtual ControllerAnalogActionHandle_t ISteamController_GetAnalogActionHandle(
			string pszActionName) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamController_GetAnalogActionHandle(_ptr, pszActionName)
				: throw new Exception("ISteamController _ptr is null!");
		}

		public virtual ControllerAnalogActionData_t ISteamController_GetAnalogActionData(
			ulong controllerHandle,
			ulong analogActionHandle) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamController _ptr is null!");
			return Native.SteamAPI_ISteamController_GetAnalogActionData(_ptr, controllerHandle, analogActionHandle);
		}

		public virtual int ISteamController_GetAnalogActionOrigins(
			ulong controllerHandle,
			ulong actionSetHandle,
			ulong analogActionHandle,
			out ControllerActionOrigin originsOut) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamController _ptr is null!");
			return Native.SteamAPI_ISteamController_GetAnalogActionOrigins(_ptr, controllerHandle, actionSetHandle,
				analogActionHandle, out originsOut);
		}

		public virtual void ISteamController_StopAnalogActionMomentum(
			ulong controllerHandle,
			ulong eAction) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamController _ptr is null!");
			Native.SteamAPI_ISteamController_StopAnalogActionMomentum(_ptr, controllerHandle, eAction);
		}

		public virtual void ISteamController_TriggerHapticPulse(
			ulong controllerHandle,
			SteamControllerPad eTargetPad,
			ushort usDurationMicroSec) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamController _ptr is null!");
			Native.SteamAPI_ISteamController_TriggerHapticPulse(_ptr, controllerHandle, eTargetPad, usDurationMicroSec);
		}

		public virtual void ISteamController_TriggerRepeatedHapticPulse(
			ulong controllerHandle,
			SteamControllerPad eTargetPad,
			ushort usDurationMicroSec,
			ushort usOffMicroSec,
			ushort unRepeat,
			uint nFlags) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamController _ptr is null!");
			Native.SteamAPI_ISteamController_TriggerRepeatedHapticPulse(_ptr, controllerHandle, eTargetPad,
				usDurationMicroSec, usOffMicroSec, unRepeat, nFlags);
		}

		public virtual void ISteamController_TriggerVibration(
			ulong controllerHandle,
			ushort usLeftSpeed,
			ushort usRightSpeed) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamController _ptr is null!");
			Native.SteamAPI_ISteamController_TriggerVibration(_ptr, controllerHandle, usLeftSpeed, usRightSpeed);
		}

		public virtual void ISteamController_SetLEDColor(
			ulong controllerHandle,
			byte nColorR,
			byte nColorG,
			byte nColorB,
			uint nFlags) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamController _ptr is null!");
			Native.SteamAPI_ISteamController_SetLEDColor(_ptr, controllerHandle, nColorR, nColorG, nColorB, nFlags);
		}

		public virtual int ISteamController_GetGamepadIndexForController(ulong ulControllerHandle) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamController_GetGamepadIndexForController(_ptr, ulControllerHandle)
				: throw new Exception("ISteamController _ptr is null!");
		}

		public virtual ControllerHandle_t ISteamController_GetControllerForGamepadIndex(int nIndex) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamController_GetControllerForGamepadIndex(_ptr, nIndex)
				: throw new Exception("ISteamController _ptr is null!");
		}

		public virtual ControllerMotionData_t ISteamController_GetMotionData(ulong controllerHandle) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamController_GetMotionData(_ptr, controllerHandle)
				: throw new Exception("ISteamController _ptr is null!");
		}

		public virtual bool ISteamController_ShowDigitalActionOrigins(
			ulong controllerHandle,
			ulong digitalActionHandle,
			float flScale,
			float flXPosition,
			float flYPosition) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamController _ptr is null!");
			return Native.SteamAPI_ISteamController_ShowDigitalActionOrigins(_ptr, controllerHandle,
				digitalActionHandle, flScale, flXPosition, flYPosition);
		}

		public virtual bool ISteamController_ShowAnalogActionOrigins(
			ulong controllerHandle,
			ulong analogActionHandle,
			float flScale,
			float flXPosition,
			float flYPosition) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamController _ptr is null!");
			return Native.SteamAPI_ISteamController_ShowAnalogActionOrigins(_ptr, controllerHandle, analogActionHandle,
				flScale, flXPosition, flYPosition);
		}

		public virtual IntPtr ISteamController_GetStringForActionOrigin(ControllerActionOrigin eOrigin) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamController_GetStringForActionOrigin(_ptr, eOrigin)
				: throw new Exception("ISteamController _ptr is null!");
		}

		public virtual IntPtr ISteamController_GetGlyphForActionOrigin(ControllerActionOrigin eOrigin) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamController_GetGlyphForActionOrigin(_ptr, eOrigin)
				: throw new Exception("ISteamController _ptr is null!");
		}

		public virtual UGCQueryHandle_t ISteamUGC_CreateQueryUserUGCRequest(
			uint unAccountID,
			UserUGCList eListType,
			UGCMatchingUGCType eMatchingUGCType,
			UserUGCListSortOrder eSortOrder,
			uint nCreatorAppID,
			uint nConsumerAppID,
			uint unPage) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_CreateQueryUserUGCRequest(_ptr, unAccountID, eListType, eMatchingUGCType,
				eSortOrder, nCreatorAppID, nConsumerAppID, unPage);
		}

		public virtual UGCQueryHandle_t ISteamUGC_CreateQueryAllUGCRequest(
			UGCQuery eQueryType,
			UGCMatchingUGCType eMatchingeMatchingUGCTypeFileType,
			uint nCreatorAppID,
			uint nConsumerAppID,
			uint unPage) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_CreateQueryAllUGCRequest(_ptr, eQueryType,
				eMatchingeMatchingUGCTypeFileType, nCreatorAppID, nConsumerAppID, unPage);
		}

		public virtual UGCQueryHandle_t ISteamUGC_CreateQueryUGCDetailsRequest(
			IntPtr pvecPublishedFileID,
			uint unNumPublishedFileIDs) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_CreateQueryUGCDetailsRequest(_ptr, pvecPublishedFileID,
				unNumPublishedFileIDs);
		}

		public virtual SteamAPICall_t ISteamUGC_SendQueryUGCRequest(ulong handle) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUGC_SendQueryUGCRequest(_ptr, handle)
				: throw new Exception("ISteamUGC _ptr is null!");
		}

		public virtual bool ISteamUGC_GetQueryUGCResult(
			ulong handle,
			uint index,
			ref SteamUGCDetails_t pDetails) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_GetQueryUGCResult(_ptr, handle, index, ref pDetails);
		}

		public virtual bool ISteamUGC_GetQueryUGCPreviewURL(
			ulong handle,
			uint index,
			StringBuilder pchURL,
			uint cchURLSize) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_GetQueryUGCPreviewURL(_ptr, handle, index, pchURL, cchURLSize);
		}

		public virtual bool ISteamUGC_GetQueryUGCMetadata(
			ulong handle,
			uint index,
			StringBuilder pchMetadata,
			uint cchMetadatasize) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_GetQueryUGCMetadata(_ptr, handle, index, pchMetadata, cchMetadatasize);
		}

		public virtual bool ISteamUGC_GetQueryUGCChildren(
			ulong handle,
			uint index,
			IntPtr pvecPublishedFileID,
			uint cMaxEntries) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_GetQueryUGCChildren(_ptr, handle, index, pvecPublishedFileID, cMaxEntries);
		}

		public virtual bool ISteamUGC_GetQueryUGCStatistic(
			ulong handle,
			uint index,
			ItemStatistic eStatType,
			out ulong pStatValue) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_GetQueryUGCStatistic(_ptr, handle, index, eStatType, out pStatValue);
		}

		public virtual uint ISteamUGC_GetQueryUGCNumAdditionalPreviews(ulong handle, uint index) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_GetQueryUGCNumAdditionalPreviews(_ptr, handle, index);
		}

		public virtual bool ISteamUGC_GetQueryUGCAdditionalPreview(
			ulong handle,
			uint index,
			uint previewIndex,
			StringBuilder pchURLOrVideoID,
			uint cchURLSize,
			StringBuilder pchOriginalFileName,
			uint cchOriginalFileNameSize,
			out ItemPreviewType pPreviewType) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_GetQueryUGCAdditionalPreview(_ptr, handle, index, previewIndex,
				pchURLOrVideoID, cchURLSize, pchOriginalFileName, cchOriginalFileNameSize, out pPreviewType);
		}

		public virtual uint ISteamUGC_GetQueryUGCNumKeyValueTags(ulong handle, uint index) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_GetQueryUGCNumKeyValueTags(_ptr, handle, index);
		}

		public virtual bool ISteamUGC_GetQueryUGCKeyValueTag(
			ulong handle,
			uint index,
			uint keyValueTagIndex,
			StringBuilder pchKey,
			uint cchKeySize,
			StringBuilder pchValue,
			uint cchValueSize) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_GetQueryUGCKeyValueTag(_ptr, handle, index, keyValueTagIndex, pchKey,
				cchKeySize, pchValue, cchValueSize);
		}

		public virtual bool ISteamUGC_ReleaseQueryUGCRequest(ulong handle) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUGC_ReleaseQueryUGCRequest(_ptr, handle)
				: throw new Exception("ISteamUGC _ptr is null!");
		}

		public virtual bool ISteamUGC_AddRequiredTag(ulong handle, string pTagName) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_AddRequiredTag(_ptr, handle, pTagName);
		}

		public virtual bool ISteamUGC_AddExcludedTag(ulong handle, string pTagName) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_AddExcludedTag(_ptr, handle, pTagName);
		}

		public virtual bool
			ISteamUGC_SetReturnOnlyIDs(ulong handle, [MarshalAs(UnmanagedType.U1)] bool bReturnOnlyIDs) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_SetReturnOnlyIDs(_ptr, handle, bReturnOnlyIDs);
		}

		public virtual bool ISteamUGC_SetReturnKeyValueTags(ulong handle,
			[MarshalAs(UnmanagedType.U1)] bool bReturnKeyValueTags) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_SetReturnKeyValueTags(_ptr, handle, bReturnKeyValueTags);
		}

		public virtual bool ISteamUGC_SetReturnLongDescription(
			ulong handle,
			[MarshalAs(UnmanagedType.U1)] bool bReturnLongDescription) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_SetReturnLongDescription(_ptr, handle, bReturnLongDescription);
		}

		public virtual bool ISteamUGC_SetReturnMetadata(ulong handle,
			[MarshalAs(UnmanagedType.U1)] bool bReturnMetadata) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_SetReturnMetadata(_ptr, handle, bReturnMetadata);
		}

		public virtual bool ISteamUGC_SetReturnChildren(ulong handle,
			[MarshalAs(UnmanagedType.U1)] bool bReturnChildren) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_SetReturnChildren(_ptr, handle, bReturnChildren);
		}

		public virtual bool ISteamUGC_SetReturnAdditionalPreviews(
			ulong handle,
			[MarshalAs(UnmanagedType.U1)] bool bReturnAdditionalPreviews) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_SetReturnAdditionalPreviews(_ptr, handle, bReturnAdditionalPreviews);
		}

		public virtual bool ISteamUGC_SetReturnTotalOnly(ulong handle,
			[MarshalAs(UnmanagedType.U1)] bool bReturnTotalOnly) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_SetReturnTotalOnly(_ptr, handle, bReturnTotalOnly);
		}

		public virtual bool ISteamUGC_SetReturnPlaytimeStats(ulong handle, uint unDays) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_SetReturnPlaytimeStats(_ptr, handle, unDays);
		}

		public virtual bool ISteamUGC_SetLanguage(ulong handle, string pchLanguage) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_SetLanguage(_ptr, handle, pchLanguage);
		}

		public virtual bool ISteamUGC_SetAllowCachedResponse(ulong handle, uint unMaxAgeSeconds) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_SetAllowCachedResponse(_ptr, handle, unMaxAgeSeconds);
		}

		public virtual bool ISteamUGC_SetCloudFileNameFilter(ulong handle, string pMatchCloudFileName) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_SetCloudFileNameFilter(_ptr, handle, pMatchCloudFileName);
		}

		public virtual bool ISteamUGC_SetMatchAnyTag(ulong handle, [MarshalAs(UnmanagedType.U1)] bool bMatchAnyTag) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_SetMatchAnyTag(_ptr, handle, bMatchAnyTag);
		}

		public virtual bool ISteamUGC_SetSearchText(ulong handle, string pSearchText) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_SetSearchText(_ptr, handle, pSearchText);
		}

		public virtual bool ISteamUGC_SetRankedByTrendDays(ulong handle, uint unDays) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_SetRankedByTrendDays(_ptr, handle, unDays);
		}

		public virtual bool ISteamUGC_AddRequiredKeyValueTag(
			ulong handle,
			string pKey,
			string pValue) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_AddRequiredKeyValueTag(_ptr, handle, pKey, pValue);
		}

		public virtual SteamAPICall_t ISteamUGC_RequestUGCDetails(
			ulong nPublishedFileID,
			uint unMaxAgeSeconds) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_RequestUGCDetails(_ptr, nPublishedFileID, unMaxAgeSeconds);
		}

		public virtual SteamAPICall_t ISteamUGC_CreateItem(
			uint nConsumerAppId,
			WorkshopFileType eFileType) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_CreateItem(_ptr, nConsumerAppId, eFileType);
		}

		public virtual UGCUpdateHandle_t ISteamUGC_StartItemUpdate(
			uint nConsumerAppId,
			ulong nPublishedFileID) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_StartItemUpdate(_ptr, nConsumerAppId, nPublishedFileID);
		}

		public virtual bool ISteamUGC_SetItemTitle(ulong handle, string pchTitle) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_SetItemTitle(_ptr, handle, pchTitle);
		}

		public virtual bool ISteamUGC_SetItemDescription(ulong handle, string pchDescription) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_SetItemDescription(_ptr, handle, pchDescription);
		}

		public virtual bool ISteamUGC_SetItemUpdateLanguage(ulong handle, string pchLanguage) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_SetItemUpdateLanguage(_ptr, handle, pchLanguage);
		}

		public virtual bool ISteamUGC_SetItemMetadata(ulong handle, string pchMetaData) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_SetItemMetadata(_ptr, handle, pchMetaData);
		}

		public virtual bool ISteamUGC_SetItemVisibility(
			ulong handle,
			RemoteStoragePublishedFileVisibility eVisibility) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_SetItemVisibility(_ptr, handle, eVisibility);
		}

		public virtual bool ISteamUGC_SetItemTags(
			ulong updateHandle,
			ref SteamParamStringArray_t pTags) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_SetItemTags(_ptr, updateHandle, ref pTags);
		}

		public virtual bool ISteamUGC_SetItemContent(ulong handle, string pszContentFolder) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_SetItemContent(_ptr, handle, pszContentFolder);
		}

		public virtual bool ISteamUGC_SetItemPreview(ulong handle, string pszPreviewFile) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_SetItemPreview(_ptr, handle, pszPreviewFile);
		}

		public virtual bool ISteamUGC_RemoveItemKeyValueTags(ulong handle, string pchKey) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_RemoveItemKeyValueTags(_ptr, handle, pchKey);
		}

		public virtual bool ISteamUGC_AddItemKeyValueTag(
			ulong handle,
			string pchKey,
			string pchValue) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_AddItemKeyValueTag(_ptr, handle, pchKey, pchValue);
		}

		public virtual bool ISteamUGC_AddItemPreviewFile(
			ulong handle,
			string pszPreviewFile,
			ItemPreviewType type) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_AddItemPreviewFile(_ptr, handle, pszPreviewFile, type);
		}

		public virtual bool ISteamUGC_AddItemPreviewVideo(ulong handle, string pszVideoID) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_AddItemPreviewVideo(_ptr, handle, pszVideoID);
		}

		public virtual bool ISteamUGC_UpdateItemPreviewFile(
			ulong handle,
			uint index,
			string pszPreviewFile) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_UpdateItemPreviewFile(_ptr, handle, index, pszPreviewFile);
		}

		public virtual bool ISteamUGC_UpdateItemPreviewVideo(
			ulong handle,
			uint index,
			string pszVideoID) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_UpdateItemPreviewVideo(_ptr, handle, index, pszVideoID);
		}

		public virtual bool ISteamUGC_RemoveItemPreview(ulong handle, uint index) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_RemoveItemPreview(_ptr, handle, index);
		}

		public virtual SteamAPICall_t ISteamUGC_SubmitItemUpdate(ulong handle, string pchChangeNote) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_SubmitItemUpdate(_ptr, handle, pchChangeNote);
		}

		public virtual ItemUpdateStatus ISteamUGC_GetItemUpdateProgress(
			ulong handle,
			out ulong punBytesProcessed,
			out ulong punBytesTotal) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUGC_GetItemUpdateProgress(_ptr, handle, out punBytesProcessed,
					out punBytesTotal)
				: throw new Exception("ISteamUGC _ptr is null!");
		}

		public virtual SteamAPICall_t ISteamUGC_SetUserItemVote(ulong nPublishedFileID,
			[MarshalAs(UnmanagedType.U1)] bool bVoteUp) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_SetUserItemVote(_ptr, nPublishedFileID, bVoteUp);
		}

		public virtual SteamAPICall_t ISteamUGC_GetUserItemVote(ulong nPublishedFileID) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUGC_GetUserItemVote(_ptr, nPublishedFileID)
				: throw new Exception("ISteamUGC _ptr is null!");
		}

		public virtual SteamAPICall_t ISteamUGC_AddItemToFavorites(
			uint nAppId,
			ulong nPublishedFileID) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_AddItemToFavorites(_ptr, nAppId, nPublishedFileID);
		}

		public virtual SteamAPICall_t ISteamUGC_RemoveItemFromFavorites(
			uint nAppId,
			ulong nPublishedFileID) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_RemoveItemFromFavorites(_ptr, nAppId, nPublishedFileID);
		}

		public virtual SteamAPICall_t ISteamUGC_SubscribeItem(ulong nPublishedFileID) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUGC_SubscribeItem(_ptr, nPublishedFileID)
				: throw new Exception("ISteamUGC _ptr is null!");
		}

		public virtual SteamAPICall_t ISteamUGC_UnsubscribeItem(ulong nPublishedFileID) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUGC_UnsubscribeItem(_ptr, nPublishedFileID)
				: throw new Exception("ISteamUGC _ptr is null!");
		}

		public virtual uint ISteamUGC_GetNumSubscribedItems() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUGC_GetNumSubscribedItems(_ptr)
				: throw new Exception("ISteamUGC _ptr is null!");
		}

		public virtual uint ISteamUGC_GetSubscribedItems(IntPtr pvecPublishedFileID, uint cMaxEntries) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_GetSubscribedItems(_ptr, pvecPublishedFileID, cMaxEntries);
		}

		public virtual uint ISteamUGC_GetItemState(ulong nPublishedFileID) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUGC_GetItemState(_ptr, nPublishedFileID)
				: throw new Exception("ISteamUGC _ptr is null!");
		}

		public virtual bool ISteamUGC_GetItemInstallInfo(
			ulong nPublishedFileID,
			out ulong punSizeOnDisk,
			StringBuilder pchFolder,
			uint cchFolderSize,
			out uint punTimeStamp) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_GetItemInstallInfo(_ptr, nPublishedFileID, out punSizeOnDisk, pchFolder,
				cchFolderSize, out punTimeStamp);
		}

		public virtual bool ISteamUGC_GetItemDownloadInfo(
			ulong nPublishedFileID,
			out ulong punBytesDownloaded,
			out ulong punBytesTotal) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUGC_GetItemDownloadInfo(_ptr, nPublishedFileID, out punBytesDownloaded,
					out punBytesTotal)
				: throw new Exception("ISteamUGC _ptr is null!");
		}

		public virtual bool ISteamUGC_DownloadItem(ulong nPublishedFileID,
			[MarshalAs(UnmanagedType.U1)] bool bHighPriority) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_DownloadItem(_ptr, nPublishedFileID, bHighPriority);
		}

		public virtual bool ISteamUGC_BInitWorkshopForGameServer(
			uint unWorkshopDepotID,
			string pszFolder) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_BInitWorkshopForGameServer(_ptr, unWorkshopDepotID, pszFolder);
		}

		public virtual void ISteamUGC_SuspendDownloads([MarshalAs(UnmanagedType.U1)] bool bSuspend) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			Native.SteamAPI_ISteamUGC_SuspendDownloads(_ptr, bSuspend);
		}

		public virtual SteamAPICall_t ISteamUGC_StartPlaytimeTracking(
			IntPtr pvecPublishedFileID,
			uint unNumPublishedFileIDs) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_StartPlaytimeTracking(_ptr, pvecPublishedFileID, unNumPublishedFileIDs);
		}

		public virtual SteamAPICall_t ISteamUGC_StopPlaytimeTracking(
			IntPtr pvecPublishedFileID,
			uint unNumPublishedFileIDs) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_StopPlaytimeTracking(_ptr, pvecPublishedFileID, unNumPublishedFileIDs);
		}

		public virtual SteamAPICall_t ISteamUGC_StopPlaytimeTrackingForAllItems() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUGC_StopPlaytimeTrackingForAllItems(_ptr)
				: throw new Exception("ISteamUGC _ptr is null!");
		}

		public virtual SteamAPICall_t ISteamUGC_AddDependency(
			ulong nParentPublishedFileID,
			ulong nChildPublishedFileID) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_AddDependency(_ptr, nParentPublishedFileID, nChildPublishedFileID);
		}

		public virtual SteamAPICall_t ISteamUGC_RemoveDependency(
			ulong nParentPublishedFileID,
			ulong nChildPublishedFileID) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_RemoveDependency(_ptr, nParentPublishedFileID, nChildPublishedFileID);
		}

		public virtual uint ISteamAppList_GetNumInstalledApps() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamAppList_GetNumInstalledApps(_ptr)
				: throw new Exception("ISteamAppList _ptr is null!");
		}

		public virtual uint ISteamAppList_GetInstalledApps(IntPtr pvecAppID, uint unMaxAppIDs) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamAppList _ptr is null!");
			return Native.SteamAPI_ISteamAppList_GetInstalledApps(_ptr, pvecAppID, unMaxAppIDs);
		}

		public virtual int ISteamAppList_GetAppName(
			uint nAppID,
			StringBuilder pchName,
			int cchNameMax) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamAppList _ptr is null!");
			return Native.SteamAPI_ISteamAppList_GetAppName(_ptr, nAppID, pchName, cchNameMax);
		}

		public virtual int ISteamAppList_GetAppInstallDir(
			uint nAppID,
			StringBuilder pchDirectory,
			int cchNameMax) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamAppList _ptr is null!");
			return Native.SteamAPI_ISteamAppList_GetAppInstallDir(_ptr, nAppID, pchDirectory, cchNameMax);
		}

		public virtual int ISteamAppList_GetAppBuildId(uint nAppID) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamAppList_GetAppBuildId(_ptr, nAppID)
				: throw new Exception("ISteamAppList _ptr is null!");
		}

		public virtual void ISteamHTMLSurface_DestructISteamHTMLSurface() {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTMLSurface _ptr is null!");
			Native.SteamAPI_ISteamHTMLSurface_DestructISteamHTMLSurface(_ptr);
		}

		public virtual bool ISteamHTMLSurface_Init() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamHTMLSurface_Init(_ptr)
				: throw new Exception("ISteamHTMLSurface _ptr is null!");
		}

		public virtual bool ISteamHTMLSurface_Shutdown() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamHTMLSurface_Shutdown(_ptr)
				: throw new Exception("ISteamHTMLSurface _ptr is null!");
		}

		public virtual SteamAPICall_t ISteamHTMLSurface_CreateBrowser(
			string pchUserAgent,
			string pchUserCSS) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTMLSurface _ptr is null!");
			return Native.SteamAPI_ISteamHTMLSurface_CreateBrowser(_ptr, pchUserAgent, pchUserCSS);
		}

		public virtual void ISteamHTMLSurface_RemoveBrowser(uint unBrowserHandle) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTMLSurface _ptr is null!");
			Native.SteamAPI_ISteamHTMLSurface_RemoveBrowser(_ptr, unBrowserHandle);
		}

		public virtual void ISteamHTMLSurface_LoadURL(
			uint unBrowserHandle,
			string pchURL,
			string pchPostData) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTMLSurface _ptr is null!");
			Native.SteamAPI_ISteamHTMLSurface_LoadURL(_ptr, unBrowserHandle, pchURL, pchPostData);
		}

		public virtual void ISteamHTMLSurface_SetSize(
			uint unBrowserHandle,
			uint unWidth,
			uint unHeight) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTMLSurface _ptr is null!");
			Native.SteamAPI_ISteamHTMLSurface_SetSize(_ptr, unBrowserHandle, unWidth, unHeight);
		}

		public virtual void ISteamHTMLSurface_StopLoad(uint unBrowserHandle) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTMLSurface _ptr is null!");
			Native.SteamAPI_ISteamHTMLSurface_StopLoad(_ptr, unBrowserHandle);
		}

		public virtual void ISteamHTMLSurface_Reload(uint unBrowserHandle) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTMLSurface _ptr is null!");
			Native.SteamAPI_ISteamHTMLSurface_Reload(_ptr, unBrowserHandle);
		}

		public virtual void ISteamHTMLSurface_GoBack(uint unBrowserHandle) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTMLSurface _ptr is null!");
			Native.SteamAPI_ISteamHTMLSurface_GoBack(_ptr, unBrowserHandle);
		}

		public virtual void ISteamHTMLSurface_GoForward(uint unBrowserHandle) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTMLSurface _ptr is null!");
			Native.SteamAPI_ISteamHTMLSurface_GoForward(_ptr, unBrowserHandle);
		}

		public virtual void ISteamHTMLSurface_AddHeader(
			uint unBrowserHandle,
			string pchKey,
			string pchValue) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTMLSurface _ptr is null!");
			Native.SteamAPI_ISteamHTMLSurface_AddHeader(_ptr, unBrowserHandle, pchKey, pchValue);
		}

		public virtual void ISteamHTMLSurface_ExecuteJavascript(
			uint unBrowserHandle,
			string pchScript) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTMLSurface _ptr is null!");
			Native.SteamAPI_ISteamHTMLSurface_ExecuteJavascript(_ptr, unBrowserHandle, pchScript);
		}

		public virtual void ISteamHTMLSurface_MouseUp(
			uint unBrowserHandle,
			HTMLMouseButton eMouseButton) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTMLSurface _ptr is null!");
			Native.SteamAPI_ISteamHTMLSurface_MouseUp(_ptr, unBrowserHandle, eMouseButton);
		}

		public virtual void ISteamHTMLSurface_MouseDown(
			uint unBrowserHandle,
			HTMLMouseButton eMouseButton) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTMLSurface _ptr is null!");
			Native.SteamAPI_ISteamHTMLSurface_MouseDown(_ptr, unBrowserHandle, eMouseButton);
		}

		public virtual void ISteamHTMLSurface_MouseDoubleClick(
			uint unBrowserHandle,
			HTMLMouseButton eMouseButton) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTMLSurface _ptr is null!");
			Native.SteamAPI_ISteamHTMLSurface_MouseDoubleClick(_ptr, unBrowserHandle, eMouseButton);
		}

		public virtual void ISteamHTMLSurface_MouseMove(uint unBrowserHandle, int x, int y) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTMLSurface _ptr is null!");
			Native.SteamAPI_ISteamHTMLSurface_MouseMove(_ptr, unBrowserHandle, x, y);
		}

		public virtual void ISteamHTMLSurface_MouseWheel(uint unBrowserHandle, int nDelta) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTMLSurface _ptr is null!");
			Native.SteamAPI_ISteamHTMLSurface_MouseWheel(_ptr, unBrowserHandle, nDelta);
		}

		public virtual void ISteamHTMLSurface_KeyDown(
			uint unBrowserHandle,
			uint nNativeKeyCode,
			HTMLKeyModifiers eHTMLKeyModifiers) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTMLSurface _ptr is null!");
			Native.SteamAPI_ISteamHTMLSurface_KeyDown(_ptr, unBrowserHandle, nNativeKeyCode, eHTMLKeyModifiers);
		}

		public virtual void ISteamHTMLSurface_KeyUp(
			uint unBrowserHandle,
			uint nNativeKeyCode,
			HTMLKeyModifiers eHTMLKeyModifiers) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTMLSurface _ptr is null!");
			Native.SteamAPI_ISteamHTMLSurface_KeyUp(_ptr, unBrowserHandle, nNativeKeyCode, eHTMLKeyModifiers);
		}

		public virtual void ISteamHTMLSurface_KeyChar(
			uint unBrowserHandle,
			uint cUnicodeChar,
			HTMLKeyModifiers eHTMLKeyModifiers) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTMLSurface _ptr is null!");
			Native.SteamAPI_ISteamHTMLSurface_KeyChar(_ptr, unBrowserHandle, cUnicodeChar, eHTMLKeyModifiers);
		}

		public virtual void ISteamHTMLSurface_SetHorizontalScroll(
			uint unBrowserHandle,
			uint nAbsolutePixelScroll) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTMLSurface _ptr is null!");
			Native.SteamAPI_ISteamHTMLSurface_SetHorizontalScroll(_ptr, unBrowserHandle, nAbsolutePixelScroll);
		}

		public virtual void ISteamHTMLSurface_SetVerticalScroll(
			uint unBrowserHandle,
			uint nAbsolutePixelScroll) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTMLSurface _ptr is null!");
			Native.SteamAPI_ISteamHTMLSurface_SetVerticalScroll(_ptr, unBrowserHandle, nAbsolutePixelScroll);
		}

		public virtual void ISteamHTMLSurface_SetKeyFocus(uint unBrowserHandle,
			[MarshalAs(UnmanagedType.U1)] bool bHasKeyFocus) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTMLSurface _ptr is null!");
			Native.SteamAPI_ISteamHTMLSurface_SetKeyFocus(_ptr, unBrowserHandle, bHasKeyFocus);
		}

		public virtual void ISteamHTMLSurface_ViewSource(uint unBrowserHandle) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTMLSurface _ptr is null!");
			Native.SteamAPI_ISteamHTMLSurface_ViewSource(_ptr, unBrowserHandle);
		}

		public virtual void ISteamHTMLSurface_CopyToClipboard(uint unBrowserHandle) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTMLSurface _ptr is null!");
			Native.SteamAPI_ISteamHTMLSurface_CopyToClipboard(_ptr, unBrowserHandle);
		}

		public virtual void ISteamHTMLSurface_PasteFromClipboard(uint unBrowserHandle) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTMLSurface _ptr is null!");
			Native.SteamAPI_ISteamHTMLSurface_PasteFromClipboard(_ptr, unBrowserHandle);
		}

		public virtual void ISteamHTMLSurface_Find(
			uint unBrowserHandle,
			string pchSearchStr,
			[MarshalAs(UnmanagedType.U1)] bool bCurrentlyInFind,
			[MarshalAs(UnmanagedType.U1)] bool bReverse) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTMLSurface _ptr is null!");
			Native.SteamAPI_ISteamHTMLSurface_Find(_ptr, unBrowserHandle, pchSearchStr, bCurrentlyInFind, bReverse);
		}

		public virtual void ISteamHTMLSurface_StopFind(uint unBrowserHandle) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTMLSurface _ptr is null!");
			Native.SteamAPI_ISteamHTMLSurface_StopFind(_ptr, unBrowserHandle);
		}

		public virtual void ISteamHTMLSurface_GetLinkAtPosition(uint unBrowserHandle, int x, int y) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTMLSurface _ptr is null!");
			Native.SteamAPI_ISteamHTMLSurface_GetLinkAtPosition(_ptr, unBrowserHandle, x, y);
		}

		public virtual void ISteamHTMLSurface_SetCookie(
			string pchHostname,
			string pchKey,
			string pchValue,
			string pchPath,
			uint nExpires,
			[MarshalAs(UnmanagedType.U1)] bool bSecure,
			[MarshalAs(UnmanagedType.U1)] bool bHTTPOnly) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTMLSurface _ptr is null!");
			Native.SteamAPI_ISteamHTMLSurface_SetCookie(_ptr, pchHostname, pchKey, pchValue, pchPath, nExpires, bSecure,
				bHTTPOnly);
		}

		public virtual void ISteamHTMLSurface_SetPageScaleFactor(
			uint unBrowserHandle,
			float flZoom,
			int nPointX,
			int nPointY) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTMLSurface _ptr is null!");
			Native.SteamAPI_ISteamHTMLSurface_SetPageScaleFactor(_ptr, unBrowserHandle, flZoom, nPointX, nPointY);
		}

		public virtual void ISteamHTMLSurface_SetBackgroundMode(
			uint unBrowserHandle,
			[MarshalAs(UnmanagedType.U1)] bool bBackgroundMode) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTMLSurface _ptr is null!");
			Native.SteamAPI_ISteamHTMLSurface_SetBackgroundMode(_ptr, unBrowserHandle, bBackgroundMode);
		}

		public virtual void ISteamHTMLSurface_AllowStartRequest(uint unBrowserHandle,
			[MarshalAs(UnmanagedType.U1)] bool bAllowed) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTMLSurface _ptr is null!");
			Native.SteamAPI_ISteamHTMLSurface_AllowStartRequest(_ptr, unBrowserHandle, bAllowed);
		}

		public virtual void ISteamHTMLSurface_JSDialogResponse(uint unBrowserHandle,
			[MarshalAs(UnmanagedType.U1)] bool bResult) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTMLSurface _ptr is null!");
			Native.SteamAPI_ISteamHTMLSurface_JSDialogResponse(_ptr, unBrowserHandle, bResult);
		}

		public virtual Result ISteamInventory_GetResultStatus(int resultHandle) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamInventory_GetResultStatus(_ptr, resultHandle)
				: throw new Exception("ISteamInventory _ptr is null!");
		}

		public virtual bool ISteamInventory_GetResultItems(
			int resultHandle,
			IntPtr pOutItemsArray,
			out uint punOutItemsArraySize) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamInventory _ptr is null!");
			return Native.SteamAPI_ISteamInventory_GetResultItems(_ptr, resultHandle, pOutItemsArray,
				out punOutItemsArraySize);
		}

		public virtual bool ISteamInventory_GetResultItemProperty(
			int resultHandle,
			uint unItemIndex,
			string pchPropertyName,
			StringBuilder pchValueBuffer,
			out uint punValueBufferSizeOut) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamInventory _ptr is null!");
			return Native.SteamAPI_ISteamInventory_GetResultItemProperty(_ptr, resultHandle, unItemIndex,
				pchPropertyName, pchValueBuffer, out punValueBufferSizeOut);
		}

		public virtual uint ISteamInventory_GetResultTimestamp(int resultHandle) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamInventory_GetResultTimestamp(_ptr, resultHandle)
				: throw new Exception("ISteamInventory _ptr is null!");
		}

		public virtual bool ISteamInventory_CheckResultSteamID(
			int resultHandle,
			ulong steamIDExpected) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamInventory _ptr is null!");
			return Native.SteamAPI_ISteamInventory_CheckResultSteamID(_ptr, resultHandle, steamIDExpected);
		}

		public virtual void ISteamInventory_DestroyResult(int resultHandle) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamInventory _ptr is null!");
			Native.SteamAPI_ISteamInventory_DestroyResult(_ptr, resultHandle);
		}

		public virtual bool ISteamInventory_GetAllItems(ref int pResultHandle) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamInventory_GetAllItems(_ptr, ref pResultHandle)
				: throw new Exception("ISteamInventory _ptr is null!");
		}

		public virtual bool ISteamInventory_GetItemsByID(
			ref int pResultHandle,
			ulong[] pInstanceIDs,
			uint unCountInstanceIDs) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamInventory _ptr is null!");
			return Native.SteamAPI_ISteamInventory_GetItemsByID(_ptr, ref pResultHandle, pInstanceIDs,
				unCountInstanceIDs);
		}

		public virtual bool ISteamInventory_SerializeResult(
			int resultHandle,
			IntPtr pOutBuffer,
			out uint punOutBufferSize) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamInventory _ptr is null!");
			return Native.SteamAPI_ISteamInventory_SerializeResult(_ptr, resultHandle, pOutBuffer,
				out punOutBufferSize);
		}

		public virtual bool ISteamInventory_DeserializeResult(
			ref int pOutResultHandle,
			IntPtr pBuffer,
			uint unBufferSize,
			[MarshalAs(UnmanagedType.U1)] bool bRESERVED_MUST_BE_FALSE) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamInventory _ptr is null!");
			return Native.SteamAPI_ISteamInventory_DeserializeResult(_ptr, ref pOutResultHandle, pBuffer, unBufferSize,
				bRESERVED_MUST_BE_FALSE);
		}

		public virtual bool ISteamInventory_GenerateItems(
			ref int pResultHandle,
			int[] pArrayItemDefs,
			uint[] punArrayQuantity,
			uint unArrayLength) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamInventory _ptr is null!");
			return Native.SteamAPI_ISteamInventory_GenerateItems(_ptr, ref pResultHandle, pArrayItemDefs,
				punArrayQuantity, unArrayLength);
		}

		public virtual bool ISteamInventory_GrantPromoItems(ref int pResultHandle) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamInventory_GrantPromoItems(_ptr, ref pResultHandle)
				: throw new Exception("ISteamInventory _ptr is null!");
		}

		public virtual bool ISteamInventory_AddPromoItem(ref int pResultHandle, int itemDef) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamInventory _ptr is null!");
			return Native.SteamAPI_ISteamInventory_AddPromoItem(_ptr, ref pResultHandle, itemDef);
		}

		public virtual bool ISteamInventory_AddPromoItems(
			ref int pResultHandle,
			int[] pArrayItemDefs,
			uint unArrayLength) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamInventory _ptr is null!");
			return Native.SteamAPI_ISteamInventory_AddPromoItems(_ptr, ref pResultHandle, pArrayItemDefs,
				unArrayLength);
		}

		public virtual bool ISteamInventory_ConsumeItem(
			ref int pResultHandle,
			ulong itemConsume,
			uint unQuantity) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamInventory _ptr is null!");
			return Native.SteamAPI_ISteamInventory_ConsumeItem(_ptr, ref pResultHandle, itemConsume, unQuantity);
		}

		public virtual bool ISteamInventory_ExchangeItems(
			ref int pResultHandle,
			int[] pArrayGenerate,
			uint[] punArrayGenerateQuantity,
			uint unArrayGenerateLength,
			ulong[] pArrayDestroy,
			uint[] punArrayDestroyQuantity,
			uint unArrayDestroyLength) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamInventory _ptr is null!");
			return Native.SteamAPI_ISteamInventory_ExchangeItems(_ptr, ref pResultHandle, pArrayGenerate,
				punArrayGenerateQuantity, unArrayGenerateLength, pArrayDestroy, punArrayDestroyQuantity,
				unArrayDestroyLength);
		}

		public virtual bool ISteamInventory_TransferItemQuantity(
			ref int pResultHandle,
			ulong itemIdSource,
			uint unQuantity,
			ulong itemIdDest) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamInventory _ptr is null!");
			return Native.SteamAPI_ISteamInventory_TransferItemQuantity(_ptr, ref pResultHandle, itemIdSource,
				unQuantity, itemIdDest);
		}

		public virtual void ISteamInventory_SendItemDropHeartbeat() {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamInventory _ptr is null!");
			Native.SteamAPI_ISteamInventory_SendItemDropHeartbeat(_ptr);
		}

		public virtual bool ISteamInventory_TriggerItemDrop(
			ref int pResultHandle,
			int dropListDefinition) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamInventory _ptr is null!");
			return Native.SteamAPI_ISteamInventory_TriggerItemDrop(_ptr, ref pResultHandle, dropListDefinition);
		}

		public virtual bool ISteamInventory_TradeItems(
			ref int pResultHandle,
			ulong steamIDTradePartner,
			ulong[] pArrayGive,
			uint[] pArrayGiveQuantity,
			uint nArrayGiveLength,
			ulong[] pArrayGet,
			uint[] pArrayGetQuantity,
			uint nArrayGetLength) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamInventory _ptr is null!");
			return Native.SteamAPI_ISteamInventory_TradeItems(_ptr, ref pResultHandle, steamIDTradePartner, pArrayGive,
				pArrayGiveQuantity, nArrayGiveLength, pArrayGet, pArrayGetQuantity, nArrayGetLength);
		}

		public virtual bool ISteamInventory_LoadItemDefinitions() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamInventory_LoadItemDefinitions(_ptr)
				: throw new Exception("ISteamInventory _ptr is null!");
		}

		public virtual bool ISteamInventory_GetItemDefinitionIDs(
			IntPtr pItemDefIDs,
			out uint punItemDefIDsArraySize) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamInventory_GetItemDefinitionIDs(_ptr, pItemDefIDs, out punItemDefIDsArraySize)
				: throw new Exception("ISteamInventory _ptr is null!");
		}

		public virtual bool ISteamInventory_GetItemDefinitionProperty(
			int iDefinition,
			string pchPropertyName,
			StringBuilder pchValueBuffer,
			out uint punValueBufferSizeOut) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamInventory _ptr is null!");
			return Native.SteamAPI_ISteamInventory_GetItemDefinitionProperty(_ptr, iDefinition, pchPropertyName,
				pchValueBuffer, out punValueBufferSizeOut);
		}

		public virtual SteamAPICall_t ISteamInventory_RequestEligiblePromoItemDefinitionsIDs(
			ulong steamID) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamInventory_RequestEligiblePromoItemDefinitionsIDs(_ptr, steamID)
				: throw new Exception("ISteamInventory _ptr is null!");
		}

		public virtual bool ISteamInventory_GetEligiblePromoItemDefinitionIDs(
			ulong steamID,
			IntPtr pItemDefIDs,
			out uint punItemDefIDsArraySize) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamInventory _ptr is null!");
			return Native.SteamAPI_ISteamInventory_GetEligiblePromoItemDefinitionIDs(_ptr, steamID, pItemDefIDs,
				out punItemDefIDsArraySize);
		}

		public virtual void ISteamVideo_GetVideoURL(uint unVideoAppID) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamVideo _ptr is null!");
			Native.SteamAPI_ISteamVideo_GetVideoURL(_ptr, unVideoAppID);
		}

		public virtual bool ISteamVideo_IsBroadcasting(IntPtr pnNumViewers) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamVideo_IsBroadcasting(_ptr, pnNumViewers)
				: throw new Exception("ISteamVideo _ptr is null!");
		}

		public virtual void ISteamVideo_GetOPFSettings(uint unVideoAppID) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamVideo _ptr is null!");
			Native.SteamAPI_ISteamVideo_GetOPFSettings(_ptr, unVideoAppID);
		}

		public virtual bool ISteamVideo_GetOPFStringForApp(
			uint unVideoAppID,
			StringBuilder pchBuffer,
			out int pnBufferSize) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamVideo _ptr is null!");
			return Native.SteamAPI_ISteamVideo_GetOPFStringForApp(_ptr, unVideoAppID, pchBuffer, out pnBufferSize);
		}

		public virtual bool ISteamGameServer_InitGameServer(
			uint unIP,
			ushort usGamePort,
			ushort usQueryPort,
			uint unFlags,
			uint nGameAppId,
			string pchVersionString) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServer _ptr is null!");
			return Native.SteamAPI_ISteamGameServer_InitGameServer(_ptr, unIP, usGamePort, usQueryPort, unFlags,
				nGameAppId, pchVersionString);
		}

		public virtual void ISteamGameServer_SetProduct(string pszProduct) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServer _ptr is null!");
			Native.SteamAPI_ISteamGameServer_SetProduct(_ptr, pszProduct);
		}

		public virtual void ISteamGameServer_SetGameDescription(string pszGameDescription) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServer _ptr is null!");
			Native.SteamAPI_ISteamGameServer_SetGameDescription(_ptr, pszGameDescription);
		}

		public virtual void ISteamGameServer_SetModDir(string pszModDir) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServer _ptr is null!");
			Native.SteamAPI_ISteamGameServer_SetModDir(_ptr, pszModDir);
		}

		public virtual void ISteamGameServer_SetDedicatedServer([MarshalAs(UnmanagedType.U1)] bool bDedicated) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServer _ptr is null!");
			Native.SteamAPI_ISteamGameServer_SetDedicatedServer(_ptr, bDedicated);
		}

		public virtual void ISteamGameServer_LogOn(string pszToken) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServer _ptr is null!");
			Native.SteamAPI_ISteamGameServer_LogOn(_ptr, pszToken);
		}

		public virtual void ISteamGameServer_LogOnAnonymous() {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServer _ptr is null!");
			Native.SteamAPI_ISteamGameServer_LogOnAnonymous(_ptr);
		}

		public virtual void ISteamGameServer_LogOff() {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServer _ptr is null!");
			Native.SteamAPI_ISteamGameServer_LogOff(_ptr);
		}

		public virtual bool ISteamGameServer_BLoggedOn() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamGameServer_BLoggedOn(_ptr)
				: throw new Exception("ISteamGameServer _ptr is null!");
		}

		public virtual bool ISteamGameServer_BSecure() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamGameServer_BSecure(_ptr)
				: throw new Exception("ISteamGameServer _ptr is null!");
		}

		public virtual CSteamID ISteamGameServer_GetSteamID() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamGameServer_GetSteamID(_ptr)
				: throw new Exception("ISteamGameServer _ptr is null!");
		}

		public virtual bool ISteamGameServer_WasRestartRequested() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamGameServer_WasRestartRequested(_ptr)
				: throw new Exception("ISteamGameServer _ptr is null!");
		}

		public virtual void ISteamGameServer_SetMaxPlayerCount(int cPlayersMax) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServer _ptr is null!");
			Native.SteamAPI_ISteamGameServer_SetMaxPlayerCount(_ptr, cPlayersMax);
		}

		public virtual void ISteamGameServer_SetBotPlayerCount(int cBotplayers) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServer _ptr is null!");
			Native.SteamAPI_ISteamGameServer_SetBotPlayerCount(_ptr, cBotplayers);
		}

		public virtual void ISteamGameServer_SetServerName(string pszServerName) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServer _ptr is null!");
			Native.SteamAPI_ISteamGameServer_SetServerName(_ptr, pszServerName);
		}

		public virtual void ISteamGameServer_SetMapName(string pszMapName) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServer _ptr is null!");
			Native.SteamAPI_ISteamGameServer_SetMapName(_ptr, pszMapName);
		}

		public virtual void
			ISteamGameServer_SetPasswordProtected([MarshalAs(UnmanagedType.U1)] bool bPasswordProtected) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServer _ptr is null!");
			Native.SteamAPI_ISteamGameServer_SetPasswordProtected(_ptr, bPasswordProtected);
		}

		public virtual void ISteamGameServer_SetSpectatorPort(ushort unSpectatorPort) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServer _ptr is null!");
			Native.SteamAPI_ISteamGameServer_SetSpectatorPort(_ptr, unSpectatorPort);
		}

		public virtual void ISteamGameServer_SetSpectatorServerName(string pszSpectatorServerName) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServer _ptr is null!");
			Native.SteamAPI_ISteamGameServer_SetSpectatorServerName(_ptr, pszSpectatorServerName);
		}

		public virtual void ISteamGameServer_ClearAllKeyValues() {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServer _ptr is null!");
			Native.SteamAPI_ISteamGameServer_ClearAllKeyValues(_ptr);
		}

		public virtual void ISteamGameServer_SetKeyValue(string pKey, string pValue) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServer _ptr is null!");
			Native.SteamAPI_ISteamGameServer_SetKeyValue(_ptr, pKey, pValue);
		}

		public virtual void ISteamGameServer_SetGameTags(string pchGameTags) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServer _ptr is null!");
			Native.SteamAPI_ISteamGameServer_SetGameTags(_ptr, pchGameTags);
		}

		public virtual void ISteamGameServer_SetGameData(string pchGameData) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServer _ptr is null!");
			Native.SteamAPI_ISteamGameServer_SetGameData(_ptr, pchGameData);
		}

		public virtual void ISteamGameServer_SetRegion(string pszRegion) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServer _ptr is null!");
			Native.SteamAPI_ISteamGameServer_SetRegion(_ptr, pszRegion);
		}

		public virtual bool ISteamGameServer_SendUserConnectAndAuthenticate(
			uint unIPClient,
			IntPtr pvAuthBlob,
			uint cubAuthBlobSize,
			out ulong pSteamIDUser) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServer _ptr is null!");
			return Native.SteamAPI_ISteamGameServer_SendUserConnectAndAuthenticate(_ptr, unIPClient, pvAuthBlob,
				cubAuthBlobSize, out pSteamIDUser);
		}

		public virtual CSteamID ISteamGameServer_CreateUnauthenticatedUserConnection() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamGameServer_CreateUnauthenticatedUserConnection(_ptr)
				: throw new Exception("ISteamGameServer _ptr is null!");
		}

		public virtual void ISteamGameServer_SendUserDisconnect(ulong steamIDUser) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServer _ptr is null!");
			Native.SteamAPI_ISteamGameServer_SendUserDisconnect(_ptr, steamIDUser);
		}

		public virtual bool ISteamGameServer_BUpdateUserData(
			ulong steamIDUser,
			string pchPlayerName,
			uint uScore) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServer _ptr is null!");
			return Native.SteamAPI_ISteamGameServer_BUpdateUserData(_ptr, steamIDUser, pchPlayerName, uScore);
		}

		public virtual HAuthTicket ISteamGameServer_GetAuthSessionTicket(
			IntPtr pTicket,
			int cbMaxTicket,
			out uint pcbTicket) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServer _ptr is null!");
			return Native.SteamAPI_ISteamGameServer_GetAuthSessionTicket(_ptr, pTicket, cbMaxTicket, out pcbTicket);
		}

		public virtual BeginAuthSessionResult ISteamGameServer_BeginAuthSession(
			IntPtr pAuthTicket,
			int cbAuthTicket,
			ulong steamID) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServer _ptr is null!");
			return Native.SteamAPI_ISteamGameServer_BeginAuthSession(_ptr, pAuthTicket, cbAuthTicket, steamID);
		}

		public virtual void ISteamGameServer_EndAuthSession(ulong steamID) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServer _ptr is null!");
			Native.SteamAPI_ISteamGameServer_EndAuthSession(_ptr, steamID);
		}

		public virtual void ISteamGameServer_CancelAuthTicket(uint hAuthTicket) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServer _ptr is null!");
			Native.SteamAPI_ISteamGameServer_CancelAuthTicket(_ptr, hAuthTicket);
		}

		public virtual UserHasLicenseForAppResult ISteamGameServer_UserHasLicenseForApp(
			ulong steamID,
			uint appID) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServer _ptr is null!");
			return Native.SteamAPI_ISteamGameServer_UserHasLicenseForApp(_ptr, steamID, appID);
		}

		public virtual bool ISteamGameServer_RequestUserGroupStatus(
			ulong steamIDUser,
			ulong steamIDGroup) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServer _ptr is null!");
			return Native.SteamAPI_ISteamGameServer_RequestUserGroupStatus(_ptr, steamIDUser, steamIDGroup);
		}

		public virtual void ISteamGameServer_GetGameplayStats() {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServer _ptr is null!");
			Native.SteamAPI_ISteamGameServer_GetGameplayStats(_ptr);
		}

		public virtual SteamAPICall_t ISteamGameServer_GetServerReputation() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamGameServer_GetServerReputation(_ptr)
				: throw new Exception("ISteamGameServer _ptr is null!");
		}

		public virtual uint ISteamGameServer_GetPublicIP() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamGameServer_GetPublicIP(_ptr)
				: throw new Exception("ISteamGameServer _ptr is null!");
		}

		public virtual bool ISteamGameServer_HandleIncomingPacket(
			IntPtr pData,
			int cbData,
			uint srcIP,
			ushort srcPort) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServer _ptr is null!");
			return Native.SteamAPI_ISteamGameServer_HandleIncomingPacket(_ptr, pData, cbData, srcIP, srcPort);
		}

		public virtual int ISteamGameServer_GetNextOutgoingPacket(
			IntPtr pOut,
			int cbMaxOut,
			out uint pNetAdr,
			out ushort pPort) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServer _ptr is null!");
			return Native.SteamAPI_ISteamGameServer_GetNextOutgoingPacket(_ptr, pOut, cbMaxOut, out pNetAdr, out pPort);
		}

		public virtual void ISteamGameServer_EnableHeartbeats([MarshalAs(UnmanagedType.U1)] bool bActive) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServer _ptr is null!");
			Native.SteamAPI_ISteamGameServer_EnableHeartbeats(_ptr, bActive);
		}

		public virtual void ISteamGameServer_SetHeartbeatInterval(int iHeartbeatInterval) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServer _ptr is null!");
			Native.SteamAPI_ISteamGameServer_SetHeartbeatInterval(_ptr, iHeartbeatInterval);
		}

		public virtual void ISteamGameServer_ForceHeartbeat() {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServer _ptr is null!");
			Native.SteamAPI_ISteamGameServer_ForceHeartbeat(_ptr);
		}

		public virtual SteamAPICall_t ISteamGameServer_AssociateWithClan(ulong steamIDClan) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamGameServer_AssociateWithClan(_ptr, steamIDClan)
				: throw new Exception("ISteamGameServer _ptr is null!");
		}

		public virtual SteamAPICall_t ISteamGameServer_ComputeNewPlayerCompatibility(
			ulong steamIDNewPlayer) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamGameServer_ComputeNewPlayerCompatibility(_ptr, steamIDNewPlayer)
				: throw new Exception("ISteamGameServer _ptr is null!");
		}

		public virtual SteamAPICall_t ISteamGameServerStats_RequestUserStats(ulong steamIDUser) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamGameServerStats_RequestUserStats(_ptr, steamIDUser)
				: throw new Exception("ISteamGameServerStats _ptr is null!");
		}

		public virtual bool ISteamGameServerStats_GetUserStat(
			ulong steamIDUser,
			string pchName,
			out int pData) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServerStats _ptr is null!");
			return Native.SteamAPI_ISteamGameServerStats_GetUserStat(_ptr, steamIDUser, pchName, out pData);
		}

		public virtual bool ISteamGameServerStats_GetUserStat0(
			ulong steamIDUser,
			string pchName,
			out float pData) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServerStats _ptr is null!");
			return Native.SteamAPI_ISteamGameServerStats_GetUserStat0(_ptr, steamIDUser, pchName, out pData);
		}

		public virtual bool ISteamGameServerStats_GetUserAchievement(
			ulong steamIDUser,
			string pchName,
			[MarshalAs(UnmanagedType.U1)] ref bool pbAchieved) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServerStats _ptr is null!");
			return Native.SteamAPI_ISteamGameServerStats_GetUserAchievement(_ptr, steamIDUser, pchName, ref pbAchieved);
		}

		public virtual bool ISteamGameServerStats_SetUserStat(
			ulong steamIDUser,
			string pchName,
			int nData) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServerStats _ptr is null!");
			return Native.SteamAPI_ISteamGameServerStats_SetUserStat(_ptr, steamIDUser, pchName, nData);
		}

		public virtual bool ISteamGameServerStats_SetUserStat0(
			ulong steamIDUser,
			string pchName,
			float fData) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServerStats _ptr is null!");
			return Native.SteamAPI_ISteamGameServerStats_SetUserStat0(_ptr, steamIDUser, pchName, fData);
		}

		public virtual bool ISteamGameServerStats_UpdateUserAvgRateStat(
			ulong steamIDUser,
			string pchName,
			float flCountThisSession,
			double dSessionLength) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServerStats _ptr is null!");
			return Native.SteamAPI_ISteamGameServerStats_UpdateUserAvgRateStat(_ptr, steamIDUser, pchName,
				flCountThisSession, dSessionLength);
		}

		public virtual bool ISteamGameServerStats_SetUserAchievement(
			ulong steamIDUser,
			string pchName) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServerStats _ptr is null!");
			return Native.SteamAPI_ISteamGameServerStats_SetUserAchievement(_ptr, steamIDUser, pchName);
		}

		public virtual bool ISteamGameServerStats_ClearUserAchievement(
			ulong steamIDUser,
			string pchName) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServerStats _ptr is null!");
			return Native.SteamAPI_ISteamGameServerStats_ClearUserAchievement(_ptr, steamIDUser, pchName);
		}

		public virtual SteamAPICall_t ISteamGameServerStats_StoreUserStats(ulong steamIDUser) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamGameServerStats_StoreUserStats(_ptr, steamIDUser)
				: throw new Exception("ISteamGameServerStats _ptr is null!");
		}

		public virtual bool SteamApi_SteamAPI_Init() {
			return Native.SteamAPI_Init();
		}

		public virtual void SteamApi_SteamAPI_RunCallbacks() {
			Native.SteamAPI_RunCallbacks();
		}

		public virtual void SteamApi_SteamGameServer_RunCallbacks() {
			Native.SteamGameServer_RunCallbacks();
		}

		public virtual void SteamApi_SteamAPI_RegisterCallback(IntPtr pCallback, int callback) {
			Native.SteamAPI_RegisterCallback(pCallback, callback);
		}

		public virtual void SteamApi_SteamAPI_UnregisterCallback(IntPtr pCallback) {
			Native.SteamAPI_UnregisterCallback(pCallback);
		}

		public virtual void SteamApi_SteamAPI_RegisterCallResult(IntPtr pCallback, ulong callback) {
			Native.SteamAPI_RegisterCallResult(pCallback, callback);
		}

		public virtual void SteamApi_SteamAPI_UnregisterCallResult(IntPtr pCallback, ulong callback) {
			Native.SteamAPI_UnregisterCallResult(pCallback, callback);
		}

		public virtual bool SteamApi_SteamInternal_GameServer_Init(
			uint unIP,
			ushort usPort,
			ushort usGamePort,
			ushort usQueryPort,
			int eServerMode,
			string pchVersionString) {
			return Native.SteamInternal_GameServer_Init(unIP, usPort, usGamePort, usQueryPort, eServerMode,
				pchVersionString);
		}

		public virtual void SteamApi_SteamAPI_Shutdown() {
			Native.SteamAPI_Shutdown();
		}

		public virtual void SteamApi_SteamGameServer_Shutdown() {
			Native.SteamGameServer_Shutdown();
		}

		public virtual HSteamUser SteamApi_SteamAPI_GetHSteamUser() {
			return Native.SteamAPI_GetHSteamUser();
		}

		public virtual HSteamPipe SteamApi_SteamAPI_GetHSteamPipe() {
			return Native.SteamAPI_GetHSteamPipe();
		}

		public virtual HSteamUser SteamApi_SteamGameServer_GetHSteamUser() {
			return Native.SteamGameServer_GetHSteamUser();
		}

		public virtual HSteamPipe SteamApi_SteamGameServer_GetHSteamPipe() {
			return Native.SteamGameServer_GetHSteamPipe();
		}

		public virtual IntPtr SteamApi_SteamInternal_CreateInterface(string version) {
			return Native.SteamInternal_CreateInterface(version);
		}

		public virtual bool SteamApi_SteamAPI_RestartAppIfNecessary(uint unOwnAppID) {
			return Native.SteamAPI_RestartAppIfNecessary(unOwnAppID);
		}

		internal static class Native {
			[DllImport("steam_api.dll")]
			internal static extern HSteamPipe SteamAPI_ISteamClient_CreateSteamPipe(IntPtr ISteamClient);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamClient_BReleaseSteamPipe(
				IntPtr ISteamClient,
				int hSteamPipe);

			[DllImport("steam_api.dll")]
			internal static extern HSteamUser SteamAPI_ISteamClient_ConnectToGlobalUser(
				IntPtr ISteamClient,
				int hSteamPipe);

			[DllImport("steam_api.dll")]
			internal static extern HSteamUser SteamAPI_ISteamClient_CreateLocalUser(
				IntPtr ISteamClient,
				out int phSteamPipe,
				AccountType eAccountType);

			[DllImport("steam_api.dll")]
			internal static extern void SteamAPI_ISteamClient_ReleaseUser(
				IntPtr ISteamClient,
				int hSteamPipe,
				int hUser);

			[DllImport("steam_api.dll")]
			internal static extern IntPtr SteamAPI_ISteamClient_GetISteamUser(
				IntPtr ISteamClient,
				int hSteamUser,
				int hSteamPipe,
				string pchVersion);

			[DllImport("steam_api.dll")]
			internal static extern IntPtr SteamAPI_ISteamClient_GetISteamGameServer(
				IntPtr ISteamClient,
				int hSteamUser,
				int hSteamPipe,
				string pchVersion);

			[DllImport("steam_api.dll")]
			internal static extern void SteamAPI_ISteamClient_SetLocalIPBinding(
				IntPtr ISteamClient,
				uint unIP,
				ushort usPort);

			[DllImport("steam_api.dll")]
			internal static extern IntPtr SteamAPI_ISteamClient_GetISteamFriends(
				IntPtr ISteamClient,
				int hSteamUser,
				int hSteamPipe,
				string pchVersion);

			[DllImport("steam_api.dll")]
			internal static extern IntPtr SteamAPI_ISteamClient_GetISteamUtils(
				IntPtr ISteamClient,
				int hSteamPipe,
				string pchVersion);

			[DllImport("steam_api.dll")]
			internal static extern IntPtr SteamAPI_ISteamClient_GetISteamMatchmaking(
				IntPtr ISteamClient,
				int hSteamUser,
				int hSteamPipe,
				string pchVersion);

			[DllImport("steam_api.dll")]
			internal static extern IntPtr SteamAPI_ISteamClient_GetISteamMatchmakingServers(
				IntPtr ISteamClient,
				int hSteamUser,
				int hSteamPipe,
				string pchVersion);

			[DllImport("steam_api.dll")]
			internal static extern IntPtr SteamAPI_ISteamClient_GetISteamGenericInterface(
				IntPtr ISteamClient,
				int hSteamUser,
				int hSteamPipe,
				string pchVersion);

			[DllImport("steam_api.dll")]
			internal static extern IntPtr SteamAPI_ISteamClient_GetISteamUserStats(
				IntPtr ISteamClient,
				int hSteamUser,
				int hSteamPipe,
				string pchVersion);

			[DllImport("steam_api.dll")]
			internal static extern IntPtr SteamAPI_ISteamClient_GetISteamGameServerStats(
				IntPtr ISteamClient,
				int hSteamuser,
				int hSteamPipe,
				string pchVersion);

			[DllImport("steam_api.dll")]
			internal static extern IntPtr SteamAPI_ISteamClient_GetISteamApps(
				IntPtr ISteamClient,
				int hSteamUser,
				int hSteamPipe,
				string pchVersion);

			[DllImport("steam_api.dll")]
			internal static extern IntPtr SteamAPI_ISteamClient_GetISteamNetworking(
				IntPtr ISteamClient,
				int hSteamUser,
				int hSteamPipe,
				string pchVersion);

			[DllImport("steam_api.dll")]
			internal static extern IntPtr SteamAPI_ISteamClient_GetISteamRemoteStorage(
				IntPtr ISteamClient,
				int hSteamuser,
				int hSteamPipe,
				string pchVersion);

			[DllImport("steam_api.dll")]
			internal static extern IntPtr SteamAPI_ISteamClient_GetISteamScreenshots(
				IntPtr ISteamClient,
				int hSteamuser,
				int hSteamPipe,
				string pchVersion);

			[DllImport("steam_api.dll")]
			internal static extern uint SteamAPI_ISteamClient_GetIPCCallCount(IntPtr ISteamClient);

			[DllImport("steam_api.dll")]
			internal static extern void SteamAPI_ISteamClient_SetWarningMessageHook(
				IntPtr ISteamClient,
				IntPtr pFunction);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamClient_BShutdownIfAllPipesClosed(
				IntPtr ISteamClient);

			[DllImport("steam_api.dll")]
			internal static extern IntPtr SteamAPI_ISteamClient_GetISteamHTTP(
				IntPtr ISteamClient,
				int hSteamuser,
				int hSteamPipe,
				string pchVersion);

			[DllImport("steam_api.dll")]
			internal static extern IntPtr SteamAPI_ISteamClient_GetISteamUnifiedMessages(
				IntPtr ISteamClient,
				int hSteamuser,
				int hSteamPipe,
				string pchVersion);

			[DllImport("steam_api.dll")]
			internal static extern IntPtr SteamAPI_ISteamClient_GetISteamController(
				IntPtr ISteamClient,
				int hSteamUser,
				int hSteamPipe,
				string pchVersion);

			[DllImport("steam_api.dll")]
			internal static extern IntPtr SteamAPI_ISteamClient_GetISteamUGC(
				IntPtr ISteamClient,
				int hSteamUser,
				int hSteamPipe,
				string pchVersion);

			[DllImport("steam_api.dll")]
			internal static extern IntPtr SteamAPI_ISteamClient_GetISteamAppList(
				IntPtr ISteamClient,
				int hSteamUser,
				int hSteamPipe,
				string pchVersion);

			[DllImport("steam_api.dll")]
			internal static extern IntPtr SteamAPI_ISteamClient_GetISteamMusic(
				IntPtr ISteamClient,
				int hSteamuser,
				int hSteamPipe,
				string pchVersion);

			[DllImport("steam_api.dll")]
			internal static extern IntPtr SteamAPI_ISteamClient_GetISteamMusicRemote(
				IntPtr ISteamClient,
				int hSteamuser,
				int hSteamPipe,
				string pchVersion);

			[DllImport("steam_api.dll")]
			internal static extern IntPtr SteamAPI_ISteamClient_GetISteamHTMLSurface(
				IntPtr ISteamClient,
				int hSteamuser,
				int hSteamPipe,
				string pchVersion);

			[DllImport("steam_api.dll")]
			internal static extern IntPtr SteamAPI_ISteamClient_GetISteamInventory(
				IntPtr ISteamClient,
				int hSteamuser,
				int hSteamPipe,
				string pchVersion);

			[DllImport("steam_api.dll")]
			internal static extern IntPtr SteamAPI_ISteamClient_GetISteamVideo(
				IntPtr ISteamClient,
				int hSteamuser,
				int hSteamPipe,
				string pchVersion);

			[DllImport("steam_api.dll")]
			internal static extern HSteamUser SteamAPI_ISteamUser_GetHSteamUser(IntPtr ISteamUser);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamUser_BLoggedOn(IntPtr ISteamUser);

			[DllImport("steam_api.dll")]
			internal static extern CSteamID SteamAPI_ISteamUser_GetSteamID(IntPtr ISteamUser);

			[DllImport("steam_api.dll")]
			internal static extern int SteamAPI_ISteamUser_InitiateGameConnection(
				IntPtr ISteamUser,
				IntPtr pAuthBlob,
				int cbMaxAuthBlob,
				ulong steamIDGameServer,
				uint unIPServer,
				ushort usPortServer,
				[MarshalAs(UnmanagedType.U1)] bool bSecure);

			[DllImport("steam_api.dll")]
			internal static extern void SteamAPI_ISteamUser_TerminateGameConnection(
				IntPtr ISteamUser,
				uint unIPServer,
				ushort usPortServer);

			[DllImport("steam_api.dll")]
			internal static extern void SteamAPI_ISteamUser_TrackAppUsageEvent(
				IntPtr ISteamUser,
				ulong gameID,
				int eAppUsageEvent,
				string pchExtraInfo);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamUser_GetUserDataFolder(
				IntPtr ISteamUser,
				StringBuilder pchBuffer,
				int cubBuffer);

			[DllImport("steam_api.dll")]
			internal static extern void SteamAPI_ISteamUser_StartVoiceRecording(IntPtr ISteamUser);

			[DllImport("steam_api.dll")]
			internal static extern void SteamAPI_ISteamUser_StopVoiceRecording(IntPtr ISteamUser);

			[DllImport("steam_api.dll")]
			internal static extern VoiceResult SteamAPI_ISteamUser_GetAvailableVoice(
				IntPtr ISteamUser,
				out uint pcbCompressed,
				out uint pcbUncompressed_Deprecated,
				uint nUncompressedVoiceDesiredSampleRate_Deprecated);

			[DllImport("steam_api.dll")]
			internal static extern VoiceResult SteamAPI_ISteamUser_GetVoice(
				IntPtr ISteamUser,
				[MarshalAs(UnmanagedType.U1)] bool bWantCompressed,
				IntPtr pDestBuffer,
				uint cbDestBufferSize,
				out uint nBytesWritten,
				[MarshalAs(UnmanagedType.U1)] bool bWantUncompressed_Deprecated,
				IntPtr pUncompressedDestBuffer_Deprecated,
				uint cbUncompressedDestBufferSize_Deprecated,
				out uint nUncompressBytesWritten_Deprecated,
				uint nUncompressedVoiceDesiredSampleRate_Deprecated);

			[DllImport("steam_api.dll")]
			internal static extern VoiceResult SteamAPI_ISteamUser_DecompressVoice(
				IntPtr ISteamUser,
				IntPtr pCompressed,
				uint cbCompressed,
				IntPtr pDestBuffer,
				uint cbDestBufferSize,
				out uint nBytesWritten,
				uint nDesiredSampleRate);

			[DllImport("steam_api.dll")]
			internal static extern uint SteamAPI_ISteamUser_GetVoiceOptimalSampleRate(IntPtr ISteamUser);

			[DllImport("steam_api.dll")]
			internal static extern HAuthTicket SteamAPI_ISteamUser_GetAuthSessionTicket(
				IntPtr ISteamUser,
				IntPtr pTicket,
				int cbMaxTicket,
				out uint pcbTicket);

			[DllImport("steam_api.dll")]
			internal static extern BeginAuthSessionResult SteamAPI_ISteamUser_BeginAuthSession(
				IntPtr ISteamUser,
				IntPtr pAuthTicket,
				int cbAuthTicket,
				ulong steamID);

			[DllImport("steam_api.dll")]
			internal static extern void SteamAPI_ISteamUser_EndAuthSession(
				IntPtr ISteamUser,
				ulong steamID);

			[DllImport("steam_api.dll")]
			internal static extern void SteamAPI_ISteamUser_CancelAuthTicket(
				IntPtr ISteamUser,
				uint hAuthTicket);

			[DllImport("steam_api.dll")]
			internal static extern UserHasLicenseForAppResult SteamAPI_ISteamUser_UserHasLicenseForApp(
				IntPtr ISteamUser,
				ulong steamID,
				uint appID);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamUser_BIsBehindNAT(IntPtr ISteamUser);

			[DllImport("steam_api.dll")]
			internal static extern void SteamAPI_ISteamUser_AdvertiseGame(
				IntPtr ISteamUser,
				ulong steamIDGameServer,
				uint unIPServer,
				ushort usPortServer);

			[DllImport("steam_api.dll")]
			internal static extern SteamAPICall_t SteamAPI_ISteamUser_RequestEncryptedAppTicket(
				IntPtr ISteamUser,
				IntPtr pDataToInclude,
				int cbDataToInclude);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamUser_GetEncryptedAppTicket(
				IntPtr ISteamUser,
				IntPtr pTicket,
				int cbMaxTicket,
				out uint pcbTicket);

			[DllImport("steam_api.dll")]
			internal static extern int SteamAPI_ISteamUser_GetGameBadgeLevel(
				IntPtr ISteamUser,
				int nSeries,
				[MarshalAs(UnmanagedType.U1)] bool bFoil);

			[DllImport("steam_api.dll")]
			internal static extern int SteamAPI_ISteamUser_GetPlayerSteamLevel(IntPtr ISteamUser);

			[DllImport("steam_api.dll")]
			internal static extern SteamAPICall_t SteamAPI_ISteamUser_RequestStoreAuthURL(
				IntPtr ISteamUser,
				string pchRedirectURL);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamUser_BIsPhoneVerified(IntPtr ISteamUser);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamUser_BIsTwoFactorEnabled(IntPtr ISteamUser);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamUser_BIsPhoneIdentifying(IntPtr ISteamUser);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamUser_BIsPhoneRequiringVerification(
				IntPtr ISteamUser);

			[DllImport("steam_api.dll")]
			internal static extern IntPtr SteamAPI_ISteamFriends_GetPersonaName(IntPtr ISteamFriends);

			[DllImport("steam_api.dll")]
			internal static extern SteamAPICall_t SteamAPI_ISteamFriends_SetPersonaName(
				IntPtr ISteamFriends,
				string pchPersonaName);

			[DllImport("steam_api.dll")]
			internal static extern PersonaState SteamAPI_ISteamFriends_GetPersonaState(
				IntPtr ISteamFriends);

			[DllImport("steam_api.dll")]
			internal static extern int SteamAPI_ISteamFriends_GetFriendCount(
				IntPtr ISteamFriends,
				int iFriendFlags);

			[DllImport("steam_api.dll")]
			internal static extern CSteamID SteamAPI_ISteamFriends_GetFriendByIndex(
				IntPtr ISteamFriends,
				int iFriend,
				int iFriendFlags);

			[DllImport("steam_api.dll")]
			internal static extern FriendRelationship SteamAPI_ISteamFriends_GetFriendRelationship(
				IntPtr ISteamFriends,
				ulong steamIDFriend);

			[DllImport("steam_api.dll")]
			internal static extern PersonaState SteamAPI_ISteamFriends_GetFriendPersonaState(
				IntPtr ISteamFriends,
				ulong steamIDFriend);

			[DllImport("steam_api.dll")]
			internal static extern IntPtr SteamAPI_ISteamFriends_GetFriendPersonaName(
				IntPtr ISteamFriends,
				ulong steamIDFriend);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamFriends_GetFriendGamePlayed(
				IntPtr ISteamFriends,
				ulong steamIDFriend,
				ref FriendGameInfo_t pFriendGameInfo);

			[DllImport("steam_api.dll")]
			internal static extern IntPtr SteamAPI_ISteamFriends_GetFriendPersonaNameHistory(
				IntPtr ISteamFriends,
				ulong steamIDFriend,
				int iPersonaName);

			[DllImport("steam_api.dll")]
			internal static extern int SteamAPI_ISteamFriends_GetFriendSteamLevel(
				IntPtr ISteamFriends,
				ulong steamIDFriend);

			[DllImport("steam_api.dll")]
			internal static extern IntPtr SteamAPI_ISteamFriends_GetPlayerNickname(
				IntPtr ISteamFriends,
				ulong steamIDPlayer);

			[DllImport("steam_api.dll")]
			internal static extern int SteamAPI_ISteamFriends_GetFriendsGroupCount(IntPtr ISteamFriends);

			[DllImport("steam_api.dll")]
			internal static extern FriendsGroupID_t SteamAPI_ISteamFriends_GetFriendsGroupIDByIndex(
				IntPtr ISteamFriends,
				int iFG);

			[DllImport("steam_api.dll")]
			internal static extern IntPtr SteamAPI_ISteamFriends_GetFriendsGroupName(
				IntPtr ISteamFriends,
				short friendsGroupID);

			[DllImport("steam_api.dll")]
			internal static extern int SteamAPI_ISteamFriends_GetFriendsGroupMembersCount(
				IntPtr ISteamFriends,
				short friendsGroupID);

			[DllImport("steam_api.dll")]
			internal static extern void SteamAPI_ISteamFriends_GetFriendsGroupMembersList(
				IntPtr ISteamFriends,
				short friendsGroupID,
				IntPtr pOutSteamIDMembers,
				int nMembersCount);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamFriends_HasFriend(
				IntPtr ISteamFriends,
				ulong steamIDFriend,
				int iFriendFlags);

			[DllImport("steam_api.dll")]
			internal static extern int SteamAPI_ISteamFriends_GetClanCount(IntPtr ISteamFriends);

			[DllImport("steam_api.dll")]
			internal static extern CSteamID SteamAPI_ISteamFriends_GetClanByIndex(
				IntPtr ISteamFriends,
				int iClan);

			[DllImport("steam_api.dll")]
			internal static extern IntPtr SteamAPI_ISteamFriends_GetClanName(
				IntPtr ISteamFriends,
				ulong steamIDClan);

			[DllImport("steam_api.dll")]
			internal static extern IntPtr SteamAPI_ISteamFriends_GetClanTag(
				IntPtr ISteamFriends,
				ulong steamIDClan);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamFriends_GetClanActivityCounts(
				IntPtr ISteamFriends,
				ulong steamIDClan,
				out int pnOnline,
				out int pnInGame,
				out int pnChatting);

			[DllImport("steam_api.dll")]
			internal static extern SteamAPICall_t SteamAPI_ISteamFriends_DownloadClanActivityCounts(
				IntPtr ISteamFriends,
				IntPtr psteamIDClans,
				int cClansToRequest);

			[DllImport("steam_api.dll")]
			internal static extern int SteamAPI_ISteamFriends_GetFriendCountFromSource(
				IntPtr ISteamFriends,
				ulong steamIDSource);

			[DllImport("steam_api.dll")]
			internal static extern CSteamID SteamAPI_ISteamFriends_GetFriendFromSourceByIndex(
				IntPtr ISteamFriends,
				ulong steamIDSource,
				int iFriend);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamFriends_IsUserInSource(
				IntPtr ISteamFriends,
				ulong steamIDUser,
				ulong steamIDSource);

			[DllImport("steam_api.dll")]
			internal static extern void SteamAPI_ISteamFriends_SetInGameVoiceSpeaking(
				IntPtr ISteamFriends,
				ulong steamIDUser,
				[MarshalAs(UnmanagedType.U1)] bool bSpeaking);

			[DllImport("steam_api.dll")]
			internal static extern void SteamAPI_ISteamFriends_ActivateGameOverlay(
				IntPtr ISteamFriends,
				string pchDialog);

			[DllImport("steam_api.dll")]
			internal static extern void SteamAPI_ISteamFriends_ActivateGameOverlayToUser(
				IntPtr ISteamFriends,
				string pchDialog,
				ulong steamID);

			[DllImport("steam_api.dll")]
			internal static extern void SteamAPI_ISteamFriends_ActivateGameOverlayToWebPage(
				IntPtr ISteamFriends,
				string pchURL);

			[DllImport("steam_api.dll")]
			internal static extern void SteamAPI_ISteamFriends_ActivateGameOverlayToStore(
				IntPtr ISteamFriends,
				uint nAppID,
				OverlayToStoreFlag eFlag);

			[DllImport("steam_api.dll")]
			internal static extern void SteamAPI_ISteamFriends_SetPlayedWith(
				IntPtr ISteamFriends,
				ulong steamIDUserPlayedWith);

			[DllImport("steam_api.dll")]
			internal static extern void SteamAPI_ISteamFriends_ActivateGameOverlayInviteDialog(
				IntPtr ISteamFriends,
				ulong steamIDLobby);

			[DllImport("steam_api.dll")]
			internal static extern int SteamAPI_ISteamFriends_GetSmallFriendAvatar(
				IntPtr ISteamFriends,
				ulong steamIDFriend);

			[DllImport("steam_api.dll")]
			internal static extern int SteamAPI_ISteamFriends_GetMediumFriendAvatar(
				IntPtr ISteamFriends,
				ulong steamIDFriend);

			[DllImport("steam_api.dll")]
			internal static extern int SteamAPI_ISteamFriends_GetLargeFriendAvatar(
				IntPtr ISteamFriends,
				ulong steamIDFriend);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamFriends_RequestUserInformation(
				IntPtr ISteamFriends,
				ulong steamIDUser,
				[MarshalAs(UnmanagedType.U1)] bool bRequireNameOnly);

			[DllImport("steam_api.dll")]
			internal static extern SteamAPICall_t SteamAPI_ISteamFriends_RequestClanOfficerList(
				IntPtr ISteamFriends,
				ulong steamIDClan);

			[DllImport("steam_api.dll")]
			internal static extern CSteamID SteamAPI_ISteamFriends_GetClanOwner(
				IntPtr ISteamFriends,
				ulong steamIDClan);

			[DllImport("steam_api.dll")]
			internal static extern int SteamAPI_ISteamFriends_GetClanOfficerCount(
				IntPtr ISteamFriends,
				ulong steamIDClan);

			[DllImport("steam_api.dll")]
			internal static extern CSteamID SteamAPI_ISteamFriends_GetClanOfficerByIndex(
				IntPtr ISteamFriends,
				ulong steamIDClan,
				int iOfficer);

			[DllImport("steam_api.dll")]
			internal static extern uint SteamAPI_ISteamFriends_GetUserRestrictions(IntPtr ISteamFriends);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamFriends_SetRichPresence(
				IntPtr ISteamFriends,
				string pchKey,
				string pchValue);

			[DllImport("steam_api.dll")]
			internal static extern void SteamAPI_ISteamFriends_ClearRichPresence(IntPtr ISteamFriends);

			[DllImport("steam_api.dll")]
			internal static extern IntPtr SteamAPI_ISteamFriends_GetFriendRichPresence(
				IntPtr ISteamFriends,
				ulong steamIDFriend,
				string pchKey);

			[DllImport("steam_api.dll")]
			internal static extern int SteamAPI_ISteamFriends_GetFriendRichPresenceKeyCount(
				IntPtr ISteamFriends,
				ulong steamIDFriend);

			[DllImport("steam_api.dll")]
			internal static extern IntPtr SteamAPI_ISteamFriends_GetFriendRichPresenceKeyByIndex(
				IntPtr ISteamFriends,
				ulong steamIDFriend,
				int iKey);

			[DllImport("steam_api.dll")]
			internal static extern void SteamAPI_ISteamFriends_RequestFriendRichPresence(
				IntPtr ISteamFriends,
				ulong steamIDFriend);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamFriends_InviteUserToGame(
				IntPtr ISteamFriends,
				ulong steamIDFriend,
				string pchConnectString);

			[DllImport("steam_api.dll")]
			internal static extern int SteamAPI_ISteamFriends_GetCoplayFriendCount(IntPtr ISteamFriends);

			[DllImport("steam_api.dll")]
			internal static extern CSteamID SteamAPI_ISteamFriends_GetCoplayFriend(
				IntPtr ISteamFriends,
				int iCoplayFriend);

			[DllImport("steam_api.dll")]
			internal static extern int SteamAPI_ISteamFriends_GetFriendCoplayTime(
				IntPtr ISteamFriends,
				ulong steamIDFriend);

			[DllImport("steam_api.dll")]
			internal static extern AppId_t SteamAPI_ISteamFriends_GetFriendCoplayGame(
				IntPtr ISteamFriends,
				ulong steamIDFriend);

			[DllImport("steam_api.dll")]
			internal static extern SteamAPICall_t SteamAPI_ISteamFriends_JoinClanChatRoom(
				IntPtr ISteamFriends,
				ulong steamIDClan);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamFriends_LeaveClanChatRoom(
				IntPtr ISteamFriends,
				ulong steamIDClan);

			[DllImport("steam_api.dll")]
			internal static extern int SteamAPI_ISteamFriends_GetClanChatMemberCount(
				IntPtr ISteamFriends,
				ulong steamIDClan);

			[DllImport("steam_api.dll")]
			internal static extern CSteamID SteamAPI_ISteamFriends_GetChatMemberByIndex(
				IntPtr ISteamFriends,
				ulong steamIDClan,
				int iUser);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamFriends_SendClanChatMessage(
				IntPtr ISteamFriends,
				ulong steamIDClanChat,
				string pchText);

			[DllImport("steam_api.dll")]
			internal static extern int SteamAPI_ISteamFriends_GetClanChatMessage(
				IntPtr ISteamFriends,
				ulong steamIDClanChat,
				int iMessage,
				IntPtr prgchText,
				int cchTextMax,
				out ChatEntryType peChatEntryType,
				out ulong psteamidChatter);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamFriends_IsClanChatAdmin(
				IntPtr ISteamFriends,
				ulong steamIDClanChat,
				ulong steamIDUser);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamFriends_IsClanChatWindowOpenInSteam(
				IntPtr ISteamFriends,
				ulong steamIDClanChat);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamFriends_OpenClanChatWindowInSteam(
				IntPtr ISteamFriends,
				ulong steamIDClanChat);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamFriends_CloseClanChatWindowInSteam(
				IntPtr ISteamFriends,
				ulong steamIDClanChat);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamFriends_SetListenForFriendsMessages(
				IntPtr ISteamFriends,
				[MarshalAs(UnmanagedType.U1)] bool bInterceptEnabled);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamFriends_ReplyToFriendMessage(
				IntPtr ISteamFriends,
				ulong steamIDFriend,
				string pchMsgToSend);

			[DllImport("steam_api.dll")]
			internal static extern int SteamAPI_ISteamFriends_GetFriendMessage(
				IntPtr ISteamFriends,
				ulong steamIDFriend,
				int iMessageID,
				IntPtr pvData,
				int cubData,
				out ChatEntryType peChatEntryType);

			[DllImport("steam_api.dll")]
			internal static extern SteamAPICall_t SteamAPI_ISteamFriends_GetFollowerCount(
				IntPtr ISteamFriends,
				ulong steamID);

			[DllImport("steam_api.dll")]
			internal static extern SteamAPICall_t SteamAPI_ISteamFriends_IsFollowing(
				IntPtr ISteamFriends,
				ulong steamID);

			[DllImport("steam_api.dll")]
			internal static extern SteamAPICall_t SteamAPI_ISteamFriends_EnumerateFollowingList(
				IntPtr ISteamFriends,
				uint unStartIndex);

			[DllImport("steam_api.dll")]
			internal static extern uint SteamAPI_ISteamUtils_GetSecondsSinceAppActive(IntPtr ISteamUtils);

			[DllImport("steam_api.dll")]
			internal static extern uint SteamAPI_ISteamUtils_GetSecondsSinceComputerActive(
				IntPtr ISteamUtils);

			[DllImport("steam_api.dll")]
			internal static extern Universe SteamAPI_ISteamUtils_GetConnectedUniverse(IntPtr ISteamUtils);

			[DllImport("steam_api.dll")]
			internal static extern uint SteamAPI_ISteamUtils_GetServerRealTime(IntPtr ISteamUtils);

			[DllImport("steam_api.dll")]
			internal static extern IntPtr SteamAPI_ISteamUtils_GetIPCountry(IntPtr ISteamUtils);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamUtils_GetImageSize(
				IntPtr ISteamUtils,
				int iImage,
				out uint pnWidth,
				out uint pnHeight);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamUtils_GetImageRGBA(
				IntPtr ISteamUtils,
				int iImage,
				IntPtr pubDest,
				int nDestBufferSize);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamUtils_GetCSERIPPort(
				IntPtr ISteamUtils,
				out uint unIP,
				out ushort usPort);

			[DllImport("steam_api.dll")]
			internal static extern byte SteamAPI_ISteamUtils_GetCurrentBatteryPower(IntPtr ISteamUtils);

			[DllImport("steam_api.dll")]
			internal static extern uint SteamAPI_ISteamUtils_GetAppID(IntPtr ISteamUtils);

			[DllImport("steam_api.dll")]
			internal static extern void SteamAPI_ISteamUtils_SetOverlayNotificationPosition(
				IntPtr ISteamUtils,
				NotificationPosition eNotificationPosition);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamUtils_IsAPICallCompleted(
				IntPtr ISteamUtils,
				ulong hSteamAPICall,
				[MarshalAs(UnmanagedType.U1)] ref bool pbFailed);

			[DllImport("steam_api.dll")]
			internal static extern SteamAPICallFailure SteamAPI_ISteamUtils_GetAPICallFailureReason(
				IntPtr ISteamUtils,
				ulong hSteamAPICall);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamUtils_GetAPICallResult(
				IntPtr ISteamUtils,
				ulong hSteamAPICall,
				IntPtr pCallback,
				int cubCallback,
				int iCallbackExpected,
				[MarshalAs(UnmanagedType.U1)] ref bool pbFailed);

			[DllImport("steam_api.dll")]
			internal static extern uint SteamAPI_ISteamUtils_GetIPCCallCount(IntPtr ISteamUtils);

			[DllImport("steam_api.dll")]
			internal static extern void SteamAPI_ISteamUtils_SetWarningMessageHook(
				IntPtr ISteamUtils,
				IntPtr pFunction);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamUtils_IsOverlayEnabled(IntPtr ISteamUtils);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamUtils_BOverlayNeedsPresent(IntPtr ISteamUtils);

			[DllImport("steam_api.dll")]
			internal static extern SteamAPICall_t SteamAPI_ISteamUtils_CheckFileSignature(
				IntPtr ISteamUtils,
				string szFileName);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamUtils_ShowGamepadTextInput(
				IntPtr ISteamUtils,
				GamepadTextInputMode eInputMode,
				GamepadTextInputLineMode eLineInputMode,
				string pchDescription,
				uint unCharMax,
				string pchExistingText);

			[DllImport("steam_api.dll")]
			internal static extern uint SteamAPI_ISteamUtils_GetEnteredGamepadTextLength(
				IntPtr ISteamUtils);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamUtils_GetEnteredGamepadTextInput(
				IntPtr ISteamUtils,
				StringBuilder pchText,
				uint cchText);

			[DllImport("steam_api.dll")]
			internal static extern IntPtr SteamAPI_ISteamUtils_GetSteamUILanguage(IntPtr ISteamUtils);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamUtils_IsSteamRunningInVR(IntPtr ISteamUtils);

			[DllImport("steam_api.dll")]
			internal static extern void SteamAPI_ISteamUtils_SetOverlayNotificationInset(
				IntPtr ISteamUtils,
				int nHorizontalInset,
				int nVerticalInset);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamUtils_IsSteamInBigPictureMode(IntPtr ISteamUtils);

			[DllImport("steam_api.dll")]
			internal static extern void SteamAPI_ISteamUtils_StartVRDashboard(IntPtr ISteamUtils);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamUtils_IsVRHeadsetStreamingEnabled(
				IntPtr ISteamUtils);

			[DllImport("steam_api.dll")]
			internal static extern void SteamAPI_ISteamUtils_SetVRHeadsetStreamingEnabled(
				IntPtr ISteamUtils,
				[MarshalAs(UnmanagedType.U1)] bool bEnabled);

			[DllImport("steam_api.dll")]
			internal static extern int SteamAPI_ISteamMatchmaking_GetFavoriteGameCount(
				IntPtr ISteamMatchmaking);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamMatchmaking_GetFavoriteGame(
				IntPtr ISteamMatchmaking,
				int iGame,
				ref uint pnAppID,
				out uint pnIP,
				out ushort pnConnPort,
				out ushort pnQueryPort,
				out uint punFlags,
				out uint pRTime32LastPlayedOnServer);

			[DllImport("steam_api.dll")]
			internal static extern int SteamAPI_ISteamMatchmaking_AddFavoriteGame(
				IntPtr ISteamMatchmaking,
				uint nAppID,
				uint nIP,
				ushort nConnPort,
				ushort nQueryPort,
				uint unFlags,
				uint rTime32LastPlayedOnServer);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamMatchmaking_RemoveFavoriteGame(
				IntPtr ISteamMatchmaking,
				uint nAppID,
				uint nIP,
				ushort nConnPort,
				ushort nQueryPort,
				uint unFlags);

			[DllImport("steam_api.dll")]
			internal static extern SteamAPICall_t SteamAPI_ISteamMatchmaking_RequestLobbyList(
				IntPtr ISteamMatchmaking);

			[DllImport("steam_api.dll")]
			internal static extern void SteamAPI_ISteamMatchmaking_AddRequestLobbyListStringFilter(
				IntPtr ISteamMatchmaking,
				string pchKeyToMatch,
				string pchValueToMatch,
				LobbyComparison eComparisonType);

			[DllImport("steam_api.dll")]
			internal static extern void SteamAPI_ISteamMatchmaking_AddRequestLobbyListNumericalFilter(
				IntPtr ISteamMatchmaking,
				string pchKeyToMatch,
				int nValueToMatch,
				LobbyComparison eComparisonType);

			[DllImport("steam_api.dll")]
			internal static extern void SteamAPI_ISteamMatchmaking_AddRequestLobbyListNearValueFilter(
				IntPtr ISteamMatchmaking,
				string pchKeyToMatch,
				int nValueToBeCloseTo);

			[DllImport("steam_api.dll")]
			internal static extern void SteamAPI_ISteamMatchmaking_AddRequestLobbyListFilterSlotsAvailable(
				IntPtr ISteamMatchmaking,
				int nSlotsAvailable);

			[DllImport("steam_api.dll")]
			internal static extern void SteamAPI_ISteamMatchmaking_AddRequestLobbyListDistanceFilter(
				IntPtr ISteamMatchmaking,
				LobbyDistanceFilter eLobbyDistanceFilter);

			[DllImport("steam_api.dll")]
			internal static extern void SteamAPI_ISteamMatchmaking_AddRequestLobbyListResultCountFilter(
				IntPtr ISteamMatchmaking,
				int cMaxResults);

			[DllImport("steam_api.dll")]
			internal static extern void SteamAPI_ISteamMatchmaking_AddRequestLobbyListCompatibleMembersFilter(
				IntPtr ISteamMatchmaking,
				ulong steamIDLobby);

			[DllImport("steam_api.dll")]
			internal static extern CSteamID SteamAPI_ISteamMatchmaking_GetLobbyByIndex(
				IntPtr ISteamMatchmaking,
				int iLobby);

			[DllImport("steam_api.dll")]
			internal static extern SteamAPICall_t SteamAPI_ISteamMatchmaking_CreateLobby(
				IntPtr ISteamMatchmaking,
				LobbyType eLobbyType,
				int cMaxMembers);

			[DllImport("steam_api.dll")]
			internal static extern SteamAPICall_t SteamAPI_ISteamMatchmaking_JoinLobby(
				IntPtr ISteamMatchmaking,
				ulong steamIDLobby);

			[DllImport("steam_api.dll")]
			internal static extern void SteamAPI_ISteamMatchmaking_LeaveLobby(
				IntPtr ISteamMatchmaking,
				ulong steamIDLobby);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamMatchmaking_InviteUserToLobby(
				IntPtr ISteamMatchmaking,
				ulong steamIDLobby,
				ulong steamIDInvitee);

			[DllImport("steam_api.dll")]
			internal static extern int SteamAPI_ISteamMatchmaking_GetNumLobbyMembers(
				IntPtr ISteamMatchmaking,
				ulong steamIDLobby);

			[DllImport("steam_api.dll")]
			internal static extern CSteamID SteamAPI_ISteamMatchmaking_GetLobbyMemberByIndex(
				IntPtr ISteamMatchmaking,
				ulong steamIDLobby,
				int iMember);

			[DllImport("steam_api.dll")]
			internal static extern IntPtr SteamAPI_ISteamMatchmaking_GetLobbyData(
				IntPtr ISteamMatchmaking,
				ulong steamIDLobby,
				string pchKey);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamMatchmaking_SetLobbyData(
				IntPtr ISteamMatchmaking,
				ulong steamIDLobby,
				string pchKey,
				string pchValue);

			[DllImport("steam_api.dll")]
			internal static extern int SteamAPI_ISteamMatchmaking_GetLobbyDataCount(
				IntPtr ISteamMatchmaking,
				ulong steamIDLobby);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamMatchmaking_GetLobbyDataByIndex(
				IntPtr ISteamMatchmaking,
				ulong steamIDLobby,
				int iLobbyData,
				StringBuilder pchKey,
				int cchKeyBufferSize,
				StringBuilder pchValue,
				int cchValueBufferSize);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamMatchmaking_DeleteLobbyData(
				IntPtr ISteamMatchmaking,
				ulong steamIDLobby,
				string pchKey);

			[DllImport("steam_api.dll")]
			internal static extern IntPtr SteamAPI_ISteamMatchmaking_GetLobbyMemberData(
				IntPtr ISteamMatchmaking,
				ulong steamIDLobby,
				ulong steamIDUser,
				string pchKey);

			[DllImport("steam_api.dll")]
			internal static extern void SteamAPI_ISteamMatchmaking_SetLobbyMemberData(
				IntPtr ISteamMatchmaking,
				ulong steamIDLobby,
				string pchKey,
				string pchValue);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamMatchmaking_SendLobbyChatMsg(
				IntPtr ISteamMatchmaking,
				ulong steamIDLobby,
				IntPtr pvMsgBody,
				int cubMsgBody);

			[DllImport("steam_api.dll")]
			internal static extern int SteamAPI_ISteamMatchmaking_GetLobbyChatEntry(
				IntPtr ISteamMatchmaking,
				ulong steamIDLobby,
				int iChatID,
				out ulong pSteamIDUser,
				IntPtr pvData,
				int cubData,
				out ChatEntryType peChatEntryType);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamMatchmaking_RequestLobbyData(
				IntPtr ISteamMatchmaking,
				ulong steamIDLobby);

			[DllImport("steam_api.dll")]
			internal static extern void SteamAPI_ISteamMatchmaking_SetLobbyGameServer(
				IntPtr ISteamMatchmaking,
				ulong steamIDLobby,
				uint unGameServerIP,
				ushort unGameServerPort,
				ulong steamIDGameServer);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamMatchmaking_GetLobbyGameServer(
				IntPtr ISteamMatchmaking,
				ulong steamIDLobby,
				out uint punGameServerIP,
				out ushort punGameServerPort,
				out ulong psteamIDGameServer);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamMatchmaking_SetLobbyMemberLimit(
				IntPtr ISteamMatchmaking,
				ulong steamIDLobby,
				int cMaxMembers);

			[DllImport("steam_api.dll")]
			internal static extern int SteamAPI_ISteamMatchmaking_GetLobbyMemberLimit(
				IntPtr ISteamMatchmaking,
				ulong steamIDLobby);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamMatchmaking_SetLobbyType(
				IntPtr ISteamMatchmaking,
				ulong steamIDLobby,
				LobbyType eLobbyType);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamMatchmaking_SetLobbyJoinable(
				IntPtr ISteamMatchmaking,
				ulong steamIDLobby,
				[MarshalAs(UnmanagedType.U1)] bool bLobbyJoinable);

			[DllImport("steam_api.dll")]
			internal static extern CSteamID SteamAPI_ISteamMatchmaking_GetLobbyOwner(
				IntPtr ISteamMatchmaking,
				ulong steamIDLobby);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamMatchmaking_SetLobbyOwner(
				IntPtr ISteamMatchmaking,
				ulong steamIDLobby,
				ulong steamIDNewOwner);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamMatchmaking_SetLinkedLobby(
				IntPtr ISteamMatchmaking,
				ulong steamIDLobby,
				ulong steamIDLobbyDependent);

			[DllImport("steam_api.dll")]
			internal static extern HServerListRequest SteamAPI_ISteamMatchmakingServers_RequestInternetServerList(
				IntPtr ISteamMatchmakingServers,
				uint iApp,
				IntPtr ppchFilters,
				uint nFilters,
				IntPtr pRequestServersResponse);

			[DllImport("steam_api.dll")]
			internal static extern HServerListRequest SteamAPI_ISteamMatchmakingServers_RequestLANServerList(
				IntPtr ISteamMatchmakingServers,
				uint iApp,
				IntPtr pRequestServersResponse);

			[DllImport("steam_api.dll")]
			internal static extern HServerListRequest SteamAPI_ISteamMatchmakingServers_RequestFriendsServerList(
				IntPtr ISteamMatchmakingServers,
				uint iApp,
				IntPtr ppchFilters,
				uint nFilters,
				IntPtr pRequestServersResponse);

			[DllImport("steam_api.dll")]
			internal static extern HServerListRequest SteamAPI_ISteamMatchmakingServers_RequestFavoritesServerList(
				IntPtr ISteamMatchmakingServers,
				uint iApp,
				IntPtr ppchFilters,
				uint nFilters,
				IntPtr pRequestServersResponse);

			[DllImport("steam_api.dll")]
			internal static extern HServerListRequest SteamAPI_ISteamMatchmakingServers_RequestHistoryServerList(
				IntPtr ISteamMatchmakingServers,
				uint iApp,
				IntPtr ppchFilters,
				uint nFilters,
				IntPtr pRequestServersResponse);

			[DllImport("steam_api.dll")]
			internal static extern HServerListRequest SteamAPI_ISteamMatchmakingServers_RequestSpectatorServerList(
				IntPtr ISteamMatchmakingServers,
				uint iApp,
				IntPtr ppchFilters,
				uint nFilters,
				IntPtr pRequestServersResponse);

			[DllImport("steam_api.dll")]
			internal static extern void SteamAPI_ISteamMatchmakingServers_ReleaseRequest(
				IntPtr ISteamMatchmakingServers,
				IntPtr hServerListRequest);

			[DllImport("steam_api.dll")]
			internal static extern IntPtr SteamAPI_ISteamMatchmakingServers_GetServerDetails(
				IntPtr ISteamMatchmakingServers,
				IntPtr hRequest,
				int iServer);

			[DllImport("steam_api.dll")]
			internal static extern void SteamAPI_ISteamMatchmakingServers_CancelQuery(
				IntPtr ISteamMatchmakingServers,
				IntPtr hRequest);

			[DllImport("steam_api.dll")]
			internal static extern void SteamAPI_ISteamMatchmakingServers_RefreshQuery(
				IntPtr ISteamMatchmakingServers,
				IntPtr hRequest);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamMatchmakingServers_IsRefreshing(
				IntPtr ISteamMatchmakingServers,
				IntPtr hRequest);

			[DllImport("steam_api.dll")]
			internal static extern int SteamAPI_ISteamMatchmakingServers_GetServerCount(
				IntPtr ISteamMatchmakingServers,
				IntPtr hRequest);

			[DllImport("steam_api.dll")]
			internal static extern void SteamAPI_ISteamMatchmakingServers_RefreshServer(
				IntPtr ISteamMatchmakingServers,
				IntPtr hRequest,
				int iServer);

			[DllImport("steam_api.dll")]
			internal static extern HServerQuery SteamAPI_ISteamMatchmakingServers_PingServer(
				IntPtr ISteamMatchmakingServers,
				uint unIP,
				ushort usPort,
				IntPtr pRequestServersResponse);

			[DllImport("steam_api.dll")]
			internal static extern HServerQuery SteamAPI_ISteamMatchmakingServers_PlayerDetails(
				IntPtr ISteamMatchmakingServers,
				uint unIP,
				ushort usPort,
				IntPtr pRequestServersResponse);

			[DllImport("steam_api.dll")]
			internal static extern HServerQuery SteamAPI_ISteamMatchmakingServers_ServerRules(
				IntPtr ISteamMatchmakingServers,
				uint unIP,
				ushort usPort,
				IntPtr pRequestServersResponse);

			[DllImport("steam_api.dll")]
			internal static extern void SteamAPI_ISteamMatchmakingServers_CancelServerQuery(
				IntPtr ISteamMatchmakingServers,
				int hServerQuery);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamRemoteStorage_FileWrite(
				IntPtr ISteamRemoteStorage,
				string pchFile,
				IntPtr pvData,
				int cubData);

			[DllImport("steam_api.dll")]
			internal static extern int SteamAPI_ISteamRemoteStorage_FileRead(
				IntPtr ISteamRemoteStorage,
				string pchFile,
				IntPtr pvData,
				int cubDataToRead);

			[DllImport("steam_api.dll")]
			internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_FileWriteAsync(
				IntPtr ISteamRemoteStorage,
				string pchFile,
				IntPtr pvData,
				uint cubData);

			[DllImport("steam_api.dll")]
			internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_FileReadAsync(
				IntPtr ISteamRemoteStorage,
				string pchFile,
				uint nOffset,
				uint cubToRead);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamRemoteStorage_FileReadAsyncComplete(
				IntPtr ISteamRemoteStorage,
				ulong hReadCall,
				IntPtr pvBuffer,
				uint cubToRead);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamRemoteStorage_FileForget(
				IntPtr ISteamRemoteStorage,
				string pchFile);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamRemoteStorage_FileDelete(
				IntPtr ISteamRemoteStorage,
				string pchFile);

			[DllImport("steam_api.dll")]
			internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_FileShare(
				IntPtr ISteamRemoteStorage,
				string pchFile);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamRemoteStorage_SetSyncPlatforms(
				IntPtr ISteamRemoteStorage,
				string pchFile,
				RemoteStoragePlatform eRemoteStoragePlatform);

			[DllImport("steam_api.dll")]
			internal static extern UGCFileWriteStreamHandle_t SteamAPI_ISteamRemoteStorage_FileWriteStreamOpen(
				IntPtr ISteamRemoteStorage,
				string pchFile);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamRemoteStorage_FileWriteStreamWriteChunk(
				IntPtr ISteamRemoteStorage,
				ulong writeHandle,
				IntPtr pvData,
				int cubData);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamRemoteStorage_FileWriteStreamClose(
				IntPtr ISteamRemoteStorage,
				ulong writeHandle);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamRemoteStorage_FileWriteStreamCancel(
				IntPtr ISteamRemoteStorage,
				ulong writeHandle);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamRemoteStorage_FileExists(
				IntPtr ISteamRemoteStorage,
				string pchFile);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamRemoteStorage_FilePersisted(
				IntPtr ISteamRemoteStorage,
				string pchFile);

			[DllImport("steam_api.dll")]
			internal static extern int SteamAPI_ISteamRemoteStorage_GetFileSize(
				IntPtr ISteamRemoteStorage,
				string pchFile);

			[DllImport("steam_api.dll")]
			internal static extern long SteamAPI_ISteamRemoteStorage_GetFileTimestamp(
				IntPtr ISteamRemoteStorage,
				string pchFile);

			[DllImport("steam_api.dll")]
			internal static extern RemoteStoragePlatform SteamAPI_ISteamRemoteStorage_GetSyncPlatforms(
				IntPtr ISteamRemoteStorage,
				string pchFile);

			[DllImport("steam_api.dll")]
			internal static extern int SteamAPI_ISteamRemoteStorage_GetFileCount(
				IntPtr ISteamRemoteStorage);

			[DllImport("steam_api.dll")]
			internal static extern IntPtr SteamAPI_ISteamRemoteStorage_GetFileNameAndSize(
				IntPtr ISteamRemoteStorage,
				int iFile,
				out int pnFileSizeInBytes);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamRemoteStorage_GetQuota(
				IntPtr ISteamRemoteStorage,
				out ulong pnTotalBytes,
				out ulong puAvailableBytes);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamRemoteStorage_IsCloudEnabledForAccount(
				IntPtr ISteamRemoteStorage);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamRemoteStorage_IsCloudEnabledForApp(
				IntPtr ISteamRemoteStorage);

			[DllImport("steam_api.dll")]
			internal static extern void SteamAPI_ISteamRemoteStorage_SetCloudEnabledForApp(
				IntPtr ISteamRemoteStorage,
				[MarshalAs(UnmanagedType.U1)] bool bEnabled);

			[DllImport("steam_api.dll")]
			internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_UGCDownload(
				IntPtr ISteamRemoteStorage,
				ulong hContent,
				uint unPriority);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamRemoteStorage_GetUGCDownloadProgress(
				IntPtr ISteamRemoteStorage,
				ulong hContent,
				out int pnBytesDownloaded,
				out int pnBytesExpected);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamRemoteStorage_GetUGCDetails(
				IntPtr ISteamRemoteStorage,
				ulong hContent,
				ref uint pnAppID,
				StringBuilder ppchName,
				out int pnFileSizeInBytes,
				out ulong pSteamIDOwner);

			[DllImport("steam_api.dll")]
			internal static extern int SteamAPI_ISteamRemoteStorage_UGCRead(
				IntPtr ISteamRemoteStorage,
				ulong hContent,
				IntPtr pvData,
				int cubDataToRead,
				uint cOffset,
				UGCReadAction eAction);

			[DllImport("steam_api.dll")]
			internal static extern int SteamAPI_ISteamRemoteStorage_GetCachedUGCCount(
				IntPtr ISteamRemoteStorage);

			[DllImport("steam_api.dll")]
			internal static extern UGCHandle_t SteamAPI_ISteamRemoteStorage_GetCachedUGCHandle(
				IntPtr ISteamRemoteStorage,
				int iCachedContent);

			[DllImport("steam_api.dll")]
			internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_PublishWorkshopFile(
				IntPtr ISteamRemoteStorage,
				string pchFile,
				string pchPreviewFile,
				uint nConsumerAppId,
				string pchTitle,
				string pchDescription,
				RemoteStoragePublishedFileVisibility eVisibility,
				ref SteamParamStringArray_t pTags,
				WorkshopFileType eWorkshopFileType);

			[DllImport("steam_api.dll")]
			internal static extern PublishedFileUpdateHandle_t
				SteamAPI_ISteamRemoteStorage_CreatePublishedFileUpdateRequest(
					IntPtr ISteamRemoteStorage,
					ulong unPublishedFileId);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamRemoteStorage_UpdatePublishedFileFile(
				IntPtr ISteamRemoteStorage,
				ulong updateHandle,
				string pchFile);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamRemoteStorage_UpdatePublishedFilePreviewFile(
				IntPtr ISteamRemoteStorage,
				ulong updateHandle,
				string pchPreviewFile);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamRemoteStorage_UpdatePublishedFileTitle(
				IntPtr ISteamRemoteStorage,
				ulong updateHandle,
				string pchTitle);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamRemoteStorage_UpdatePublishedFileDescription(
				IntPtr ISteamRemoteStorage,
				ulong updateHandle,
				string pchDescription);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamRemoteStorage_UpdatePublishedFileVisibility(
				IntPtr ISteamRemoteStorage,
				ulong updateHandle,
				RemoteStoragePublishedFileVisibility eVisibility);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamRemoteStorage_UpdatePublishedFileTags(
				IntPtr ISteamRemoteStorage,
				ulong updateHandle,
				ref SteamParamStringArray_t pTags);

			[DllImport("steam_api.dll")]
			internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_CommitPublishedFileUpdate(
				IntPtr ISteamRemoteStorage,
				ulong updateHandle);

			[DllImport("steam_api.dll")]
			internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_GetPublishedFileDetails(
				IntPtr ISteamRemoteStorage,
				ulong unPublishedFileId,
				uint unMaxSecondsOld);

			[DllImport("steam_api.dll")]
			internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_DeletePublishedFile(
				IntPtr ISteamRemoteStorage,
				ulong unPublishedFileId);

			[DllImport("steam_api.dll")]
			internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_EnumerateUserPublishedFiles(
				IntPtr ISteamRemoteStorage,
				uint unStartIndex);

			[DllImport("steam_api.dll")]
			internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_SubscribePublishedFile(
				IntPtr ISteamRemoteStorage,
				ulong unPublishedFileId);

			[DllImport("steam_api.dll")]
			internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_EnumerateUserSubscribedFiles(
				IntPtr ISteamRemoteStorage,
				uint unStartIndex);

			[DllImport("steam_api.dll")]
			internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_UnsubscribePublishedFile(
				IntPtr ISteamRemoteStorage,
				ulong unPublishedFileId);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamRemoteStorage_UpdatePublishedFileSetChangeDescription(
				IntPtr ISteamRemoteStorage,
				ulong updateHandle,
				string pchChangeDescription);

			[DllImport("steam_api.dll")]
			internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_GetPublishedItemVoteDetails(
				IntPtr ISteamRemoteStorage,
				ulong unPublishedFileId);

			[DllImport("steam_api.dll")]
			internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_UpdateUserPublishedItemVote(
				IntPtr ISteamRemoteStorage,
				ulong unPublishedFileId,
				[MarshalAs(UnmanagedType.U1)] bool bVoteUp);

			[DllImport("steam_api.dll")]
			internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_GetUserPublishedItemVoteDetails(
				IntPtr ISteamRemoteStorage,
				ulong unPublishedFileId);

			[DllImport("steam_api.dll")]
			internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_EnumerateUserSharedWorkshopFiles(
				IntPtr ISteamRemoteStorage,
				ulong steamId,
				uint unStartIndex,
				ref SteamParamStringArray_t pRequiredTags,
				ref SteamParamStringArray_t pExcludedTags);

			[DllImport("steam_api.dll")]
			internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_PublishVideo(
				IntPtr ISteamRemoteStorage,
				WorkshopVideoProvider eVideoProvider,
				string pchVideoAccount,
				string pchVideoIdentifier,
				string pchPreviewFile,
				uint nConsumerAppId,
				string pchTitle,
				string pchDescription,
				RemoteStoragePublishedFileVisibility eVisibility,
				ref SteamParamStringArray_t pTags);

			[DllImport("steam_api.dll")]
			internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_SetUserPublishedFileAction(
				IntPtr ISteamRemoteStorage,
				ulong unPublishedFileId,
				WorkshopFileAction eAction);

			[DllImport("steam_api.dll")]
			internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_EnumeratePublishedFilesByUserAction(
				IntPtr ISteamRemoteStorage,
				WorkshopFileAction eAction,
				uint unStartIndex);

			[DllImport("steam_api.dll")]
			internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_EnumeratePublishedWorkshopFiles(
				IntPtr ISteamRemoteStorage,
				WorkshopEnumerationType eEnumerationType,
				uint unStartIndex,
				uint unCount,
				uint unDays,
				ref SteamParamStringArray_t pTags,
				ref SteamParamStringArray_t pUserTags);

			[DllImport("steam_api.dll")]
			internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_UGCDownloadToLocation(
				IntPtr ISteamRemoteStorage,
				ulong hContent,
				string pchLocation,
				uint unPriority);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamUserStats_RequestCurrentStats(
				IntPtr ISteamUserStats);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamUserStats_GetStat(
				IntPtr ISteamUserStats,
				string pchName,
				out int pData);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamUserStats_GetStat0(
				IntPtr ISteamUserStats,
				string pchName,
				out float pData);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamUserStats_SetStat(
				IntPtr ISteamUserStats,
				string pchName,
				int nData);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamUserStats_SetStat0(
				IntPtr ISteamUserStats,
				string pchName,
				float fData);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamUserStats_UpdateAvgRateStat(
				IntPtr ISteamUserStats,
				string pchName,
				float flCountThisSession,
				double dSessionLength);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamUserStats_GetAchievement(
				IntPtr ISteamUserStats,
				string pchName,
				[MarshalAs(UnmanagedType.U1)] ref bool pbAchieved);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamUserStats_SetAchievement(
				IntPtr ISteamUserStats,
				string pchName);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamUserStats_ClearAchievement(
				IntPtr ISteamUserStats,
				string pchName);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamUserStats_GetAchievementAndUnlockTime(
				IntPtr ISteamUserStats,
				string pchName,
				[MarshalAs(UnmanagedType.U1)] ref bool pbAchieved,
				out uint punUnlockTime);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamUserStats_StoreStats(IntPtr ISteamUserStats);

			[DllImport("steam_api.dll")]
			internal static extern int SteamAPI_ISteamUserStats_GetAchievementIcon(
				IntPtr ISteamUserStats,
				string pchName);

			[DllImport("steam_api.dll")]
			internal static extern IntPtr SteamAPI_ISteamUserStats_GetAchievementDisplayAttribute(
				IntPtr ISteamUserStats,
				string pchName,
				string pchKey);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamUserStats_IndicateAchievementProgress(
				IntPtr ISteamUserStats,
				string pchName,
				uint nCurProgress,
				uint nMaxProgress);

			[DllImport("steam_api.dll")]
			internal static extern uint SteamAPI_ISteamUserStats_GetNumAchievements(
				IntPtr ISteamUserStats);

			[DllImport("steam_api.dll")]
			internal static extern IntPtr SteamAPI_ISteamUserStats_GetAchievementName(
				IntPtr ISteamUserStats,
				uint iAchievement);

			[DllImport("steam_api.dll")]
			internal static extern SteamAPICall_t SteamAPI_ISteamUserStats_RequestUserStats(
				IntPtr ISteamUserStats,
				ulong steamIDUser);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamUserStats_GetUserStat(
				IntPtr ISteamUserStats,
				ulong steamIDUser,
				string pchName,
				out int pData);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamUserStats_GetUserStat0(
				IntPtr ISteamUserStats,
				ulong steamIDUser,
				string pchName,
				out float pData);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamUserStats_GetUserAchievement(
				IntPtr ISteamUserStats,
				ulong steamIDUser,
				string pchName,
				[MarshalAs(UnmanagedType.U1)] ref bool pbAchieved);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamUserStats_GetUserAchievementAndUnlockTime(
				IntPtr ISteamUserStats,
				ulong steamIDUser,
				string pchName,
				[MarshalAs(UnmanagedType.U1)] ref bool pbAchieved,
				out uint punUnlockTime);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamUserStats_ResetAllStats(
				IntPtr ISteamUserStats,
				[MarshalAs(UnmanagedType.U1)] bool bAchievementsToo);

			[DllImport("steam_api.dll")]
			internal static extern SteamAPICall_t SteamAPI_ISteamUserStats_FindOrCreateLeaderboard(
				IntPtr ISteamUserStats,
				string pchLeaderboardName,
				LeaderboardSortMethod eLeaderboardSortMethod,
				LeaderboardDisplayType eLeaderboardDisplayType);

			[DllImport("steam_api.dll")]
			internal static extern SteamAPICall_t SteamAPI_ISteamUserStats_FindLeaderboard(
				IntPtr ISteamUserStats,
				string pchLeaderboardName);

			[DllImport("steam_api.dll")]
			internal static extern IntPtr SteamAPI_ISteamUserStats_GetLeaderboardName(
				IntPtr ISteamUserStats,
				ulong hSteamLeaderboard);

			[DllImport("steam_api.dll")]
			internal static extern int SteamAPI_ISteamUserStats_GetLeaderboardEntryCount(
				IntPtr ISteamUserStats,
				ulong hSteamLeaderboard);

			[DllImport("steam_api.dll")]
			internal static extern LeaderboardSortMethod SteamAPI_ISteamUserStats_GetLeaderboardSortMethod(
				IntPtr ISteamUserStats,
				ulong hSteamLeaderboard);

			[DllImport("steam_api.dll")]
			internal static extern LeaderboardDisplayType SteamAPI_ISteamUserStats_GetLeaderboardDisplayType(
				IntPtr ISteamUserStats,
				ulong hSteamLeaderboard);

			[DllImport("steam_api.dll")]
			internal static extern SteamAPICall_t SteamAPI_ISteamUserStats_DownloadLeaderboardEntries(
				IntPtr ISteamUserStats,
				ulong hSteamLeaderboard,
				LeaderboardDataRequest eLeaderboardDataRequest,
				int nRangeStart,
				int nRangeEnd);

			[DllImport("steam_api.dll")]
			internal static extern SteamAPICall_t SteamAPI_ISteamUserStats_DownloadLeaderboardEntriesForUsers(
				IntPtr ISteamUserStats,
				ulong hSteamLeaderboard,
				IntPtr prgUsers,
				int cUsers);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamUserStats_GetDownloadedLeaderboardEntry(
				IntPtr ISteamUserStats,
				ulong hSteamLeaderboardEntries,
				int index,
				ref LeaderboardEntry_t pLeaderboardEntry,
				IntPtr pDetails,
				int cDetailsMax);

			[DllImport("steam_api.dll")]
			internal static extern SteamAPICall_t SteamAPI_ISteamUserStats_UploadLeaderboardScore(
				IntPtr ISteamUserStats,
				ulong hSteamLeaderboard,
				LeaderboardUploadScoreMethod eLeaderboardUploadScoreMethod,
				int nScore,
				int[] pScoreDetails,
				int cScoreDetailsCount);

			[DllImport("steam_api.dll")]
			internal static extern SteamAPICall_t SteamAPI_ISteamUserStats_AttachLeaderboardUGC(
				IntPtr ISteamUserStats,
				ulong hSteamLeaderboard,
				ulong hUGC);

			[DllImport("steam_api.dll")]
			internal static extern SteamAPICall_t SteamAPI_ISteamUserStats_GetNumberOfCurrentPlayers(
				IntPtr ISteamUserStats);

			[DllImport("steam_api.dll")]
			internal static extern SteamAPICall_t SteamAPI_ISteamUserStats_RequestGlobalAchievementPercentages(
				IntPtr ISteamUserStats);

			[DllImport("steam_api.dll")]
			internal static extern int SteamAPI_ISteamUserStats_GetMostAchievedAchievementInfo(
				IntPtr ISteamUserStats,
				StringBuilder pchName,
				uint unNameBufLen,
				out float pflPercent,
				[MarshalAs(UnmanagedType.U1)] ref bool pbAchieved);

			[DllImport("steam_api.dll")]
			internal static extern int SteamAPI_ISteamUserStats_GetNextMostAchievedAchievementInfo(
				IntPtr ISteamUserStats,
				int iIteratorPrevious,
				StringBuilder pchName,
				uint unNameBufLen,
				out float pflPercent,
				[MarshalAs(UnmanagedType.U1)] ref bool pbAchieved);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamUserStats_GetAchievementAchievedPercent(
				IntPtr ISteamUserStats,
				string pchName,
				out float pflPercent);

			[DllImport("steam_api.dll")]
			internal static extern SteamAPICall_t SteamAPI_ISteamUserStats_RequestGlobalStats(
				IntPtr ISteamUserStats,
				int nHistoryDays);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamUserStats_GetGlobalStat(
				IntPtr ISteamUserStats,
				string pchStatName,
				out long pData);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamUserStats_GetGlobalStat0(
				IntPtr ISteamUserStats,
				string pchStatName,
				out double pData);

			[DllImport("steam_api.dll")]
			internal static extern int SteamAPI_ISteamUserStats_GetGlobalStatHistory(
				IntPtr ISteamUserStats,
				string pchStatName,
				out long pData,
				uint cubData);

			[DllImport("steam_api.dll")]
			internal static extern int SteamAPI_ISteamUserStats_GetGlobalStatHistory0(
				IntPtr ISteamUserStats,
				string pchStatName,
				out double pData,
				uint cubData);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamApps_BIsSubscribed(IntPtr ISteamApps);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamApps_BIsLowViolence(IntPtr ISteamApps);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamApps_BIsCybercafe(IntPtr ISteamApps);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamApps_BIsVACBanned(IntPtr ISteamApps);

			[DllImport("steam_api.dll")]
			internal static extern IntPtr SteamAPI_ISteamApps_GetCurrentGameLanguage(IntPtr ISteamApps);

			[DllImport("steam_api.dll")]
			internal static extern IntPtr SteamAPI_ISteamApps_GetAvailableGameLanguages(
				IntPtr ISteamApps);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamApps_BIsSubscribedApp(
				IntPtr ISteamApps,
				uint appID);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamApps_BIsDlcInstalled(
				IntPtr ISteamApps,
				uint appID);

			[DllImport("steam_api.dll")]
			internal static extern uint SteamAPI_ISteamApps_GetEarliestPurchaseUnixTime(
				IntPtr ISteamApps,
				uint nAppID);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamApps_BIsSubscribedFromFreeWeekend(
				IntPtr ISteamApps);

			[DllImport("steam_api.dll")]
			internal static extern int SteamAPI_ISteamApps_GetDLCCount(IntPtr ISteamApps);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamApps_BGetDLCDataByIndex(
				IntPtr ISteamApps,
				int iDLC,
				ref uint pAppID,
				[MarshalAs(UnmanagedType.U1)] ref bool pbAvailable,
				StringBuilder pchName,
				int cchNameBufferSize);

			[DllImport("steam_api.dll")]
			internal static extern void SteamAPI_ISteamApps_InstallDLC(IntPtr ISteamApps, uint nAppID);

			[DllImport("steam_api.dll")]
			internal static extern void SteamAPI_ISteamApps_UninstallDLC(IntPtr ISteamApps, uint nAppID);

			[DllImport("steam_api.dll")]
			internal static extern void SteamAPI_ISteamApps_RequestAppProofOfPurchaseKey(
				IntPtr ISteamApps,
				uint nAppID);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamApps_GetCurrentBetaName(
				IntPtr ISteamApps,
				StringBuilder pchName,
				int cchNameBufferSize);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamApps_MarkContentCorrupt(
				IntPtr ISteamApps,
				[MarshalAs(UnmanagedType.U1)] bool bMissingFilesOnly);

			[DllImport("steam_api.dll")]
			internal static extern uint SteamAPI_ISteamApps_GetInstalledDepots(
				IntPtr ISteamApps,
				uint appID,
				IntPtr pvecDepots,
				uint cMaxDepots);

			[DllImport("steam_api.dll")]
			internal static extern uint SteamAPI_ISteamApps_GetAppInstallDir(
				IntPtr ISteamApps,
				uint appID,
				StringBuilder pchFolder,
				uint cchFolderBufferSize);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamApps_BIsAppInstalled(
				IntPtr ISteamApps,
				uint appID);

			[DllImport("steam_api.dll")]
			internal static extern CSteamID SteamAPI_ISteamApps_GetAppOwner(IntPtr ISteamApps);

			[DllImport("steam_api.dll")]
			internal static extern IntPtr SteamAPI_ISteamApps_GetLaunchQueryParam(
				IntPtr ISteamApps,
				string pchKey);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamApps_GetDlcDownloadProgress(
				IntPtr ISteamApps,
				uint nAppID,
				out ulong punBytesDownloaded,
				out ulong punBytesTotal);

			[DllImport("steam_api.dll")]
			internal static extern int SteamAPI_ISteamApps_GetAppBuildId(IntPtr ISteamApps);

			[DllImport("steam_api.dll")]
			internal static extern void SteamAPI_ISteamApps_RequestAllProofOfPurchaseKeys(
				IntPtr ISteamApps);

			[DllImport("steam_api.dll")]
			internal static extern SteamAPICall_t SteamAPI_ISteamApps_GetFileDetails(
				IntPtr ISteamApps,
				string pszFileName);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamNetworking_SendP2PPacket(
				IntPtr ISteamNetworking,
				ulong steamIDRemote,
				IntPtr pubData,
				uint cubData,
				P2PSend eP2PSendType,
				int nChannel);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamNetworking_IsP2PPacketAvailable(
				IntPtr ISteamNetworking,
				out uint pcubMsgSize,
				int nChannel);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamNetworking_ReadP2PPacket(
				IntPtr ISteamNetworking,
				IntPtr pubDest,
				uint cubDest,
				out uint pcubMsgSize,
				out ulong psteamIDRemote,
				int nChannel);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamNetworking_AcceptP2PSessionWithUser(
				IntPtr ISteamNetworking,
				ulong steamIDRemote);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamNetworking_CloseP2PSessionWithUser(
				IntPtr ISteamNetworking,
				ulong steamIDRemote);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamNetworking_CloseP2PChannelWithUser(
				IntPtr ISteamNetworking,
				ulong steamIDRemote,
				int nChannel);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamNetworking_GetP2PSessionState(
				IntPtr ISteamNetworking,
				ulong steamIDRemote,
				ref P2PSessionState_t pConnectionState);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamNetworking_AllowP2PPacketRelay(
				IntPtr ISteamNetworking,
				[MarshalAs(UnmanagedType.U1)] bool bAllow);

			[DllImport("steam_api.dll")]
			internal static extern SNetListenSocket_t SteamAPI_ISteamNetworking_CreateListenSocket(
				IntPtr ISteamNetworking,
				int nVirtualP2PPort,
				uint nIP,
				ushort nPort,
				[MarshalAs(UnmanagedType.U1)] bool bAllowUseOfPacketRelay);

			[DllImport("steam_api.dll")]
			internal static extern SNetSocket_t SteamAPI_ISteamNetworking_CreateP2PConnectionSocket(
				IntPtr ISteamNetworking,
				ulong steamIDTarget,
				int nVirtualPort,
				int nTimeoutSec,
				[MarshalAs(UnmanagedType.U1)] bool bAllowUseOfPacketRelay);

			[DllImport("steam_api.dll")]
			internal static extern SNetSocket_t SteamAPI_ISteamNetworking_CreateConnectionSocket(
				IntPtr ISteamNetworking,
				uint nIP,
				ushort nPort,
				int nTimeoutSec);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamNetworking_DestroySocket(
				IntPtr ISteamNetworking,
				uint hSocket,
				[MarshalAs(UnmanagedType.U1)] bool bNotifyRemoteEnd);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamNetworking_DestroyListenSocket(
				IntPtr ISteamNetworking,
				uint hSocket,
				[MarshalAs(UnmanagedType.U1)] bool bNotifyRemoteEnd);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamNetworking_SendDataOnSocket(
				IntPtr ISteamNetworking,
				uint hSocket,
				IntPtr pubData,
				uint cubData,
				[MarshalAs(UnmanagedType.U1)] bool bReliable);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamNetworking_IsDataAvailableOnSocket(
				IntPtr ISteamNetworking,
				uint hSocket,
				out uint pcubMsgSize);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamNetworking_RetrieveDataFromSocket(
				IntPtr ISteamNetworking,
				uint hSocket,
				IntPtr pubDest,
				uint cubDest,
				out uint pcubMsgSize);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamNetworking_IsDataAvailable(
				IntPtr ISteamNetworking,
				uint hListenSocket,
				out uint pcubMsgSize,
				ref uint phSocket);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamNetworking_RetrieveData(
				IntPtr ISteamNetworking,
				uint hListenSocket,
				IntPtr pubDest,
				uint cubDest,
				out uint pcubMsgSize,
				ref uint phSocket);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamNetworking_GetSocketInfo(
				IntPtr ISteamNetworking,
				uint hSocket,
				out ulong pSteamIDRemote,
				IntPtr peSocketStatus,
				out uint punIPRemote,
				out ushort punPortRemote);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamNetworking_GetListenSocketInfo(
				IntPtr ISteamNetworking,
				uint hListenSocket,
				out uint pnIP,
				out ushort pnPort);

			[DllImport("steam_api.dll")]
			internal static extern SNetSocketConnectionType SteamAPI_ISteamNetworking_GetSocketConnectionType(
				IntPtr ISteamNetworking,
				uint hSocket);

			[DllImport("steam_api.dll")]
			internal static extern int SteamAPI_ISteamNetworking_GetMaxPacketSize(
				IntPtr ISteamNetworking,
				uint hSocket);

			[DllImport("steam_api.dll")]
			internal static extern ScreenshotHandle SteamAPI_ISteamScreenshots_WriteScreenshot(
				IntPtr ISteamScreenshots,
				IntPtr pubRGB,
				uint cubRGB,
				int nWidth,
				int nHeight);

			[DllImport("steam_api.dll")]
			internal static extern ScreenshotHandle SteamAPI_ISteamScreenshots_AddScreenshotToLibrary(
				IntPtr ISteamScreenshots,
				string pchFilename,
				string pchThumbnailFilename,
				int nWidth,
				int nHeight);

			[DllImport("steam_api.dll")]
			internal static extern void SteamAPI_ISteamScreenshots_TriggerScreenshot(
				IntPtr ISteamScreenshots);

			[DllImport("steam_api.dll")]
			internal static extern void SteamAPI_ISteamScreenshots_HookScreenshots(
				IntPtr ISteamScreenshots,
				[MarshalAs(UnmanagedType.U1)] bool bHook);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamScreenshots_SetLocation(
				IntPtr ISteamScreenshots,
				uint hScreenshot,
				string pchLocation);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamScreenshots_TagUser(
				IntPtr ISteamScreenshots,
				uint hScreenshot,
				ulong steamID);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamScreenshots_TagPublishedFile(
				IntPtr ISteamScreenshots,
				uint hScreenshot,
				ulong unPublishedFileID);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamScreenshots_IsScreenshotsHooked(
				IntPtr ISteamScreenshots);

			[DllImport("steam_api.dll")]
			internal static extern ScreenshotHandle SteamAPI_ISteamScreenshots_AddVRScreenshotToLibrary(
				IntPtr ISteamScreenshots,
				VRScreenshotType eType,
				string pchFilename,
				string pchVRFilename);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamMusic_BIsEnabled(IntPtr ISteamMusic);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamMusic_BIsPlaying(IntPtr ISteamMusic);

			[DllImport("steam_api.dll")]
			internal static extern AudioPlayback_Status SteamAPI_ISteamMusic_GetPlaybackStatus(
				IntPtr ISteamMusic);

			[DllImport("steam_api.dll")]
			internal static extern void SteamAPI_ISteamMusic_Play(IntPtr ISteamMusic);

			[DllImport("steam_api.dll")]
			internal static extern void SteamAPI_ISteamMusic_Pause(IntPtr ISteamMusic);

			[DllImport("steam_api.dll")]
			internal static extern void SteamAPI_ISteamMusic_PlayPrevious(IntPtr ISteamMusic);

			[DllImport("steam_api.dll")]
			internal static extern void SteamAPI_ISteamMusic_PlayNext(IntPtr ISteamMusic);

			[DllImport("steam_api.dll")]
			internal static extern void SteamAPI_ISteamMusic_SetVolume(
				IntPtr ISteamMusic,
				float flVolume);

			[DllImport("steam_api.dll")]
			internal static extern float SteamAPI_ISteamMusic_GetVolume(IntPtr ISteamMusic);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamMusicRemote_RegisterSteamMusicRemote(
				IntPtr ISteamMusicRemote,
				string pchName);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamMusicRemote_DeregisterSteamMusicRemote(
				IntPtr ISteamMusicRemote);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamMusicRemote_BIsCurrentMusicRemote(
				IntPtr ISteamMusicRemote);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamMusicRemote_BActivationSuccess(
				IntPtr ISteamMusicRemote,
				[MarshalAs(UnmanagedType.U1)] bool bValue);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamMusicRemote_SetDisplayName(
				IntPtr ISteamMusicRemote,
				string pchDisplayName);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamMusicRemote_SetPNGIcon_64x64(
				IntPtr ISteamMusicRemote,
				IntPtr pvBuffer,
				uint cbBufferLength);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamMusicRemote_EnablePlayPrevious(
				IntPtr ISteamMusicRemote,
				[MarshalAs(UnmanagedType.U1)] bool bValue);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamMusicRemote_EnablePlayNext(
				IntPtr ISteamMusicRemote,
				[MarshalAs(UnmanagedType.U1)] bool bValue);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamMusicRemote_EnableShuffled(
				IntPtr ISteamMusicRemote,
				[MarshalAs(UnmanagedType.U1)] bool bValue);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamMusicRemote_EnableLooped(
				IntPtr ISteamMusicRemote,
				[MarshalAs(UnmanagedType.U1)] bool bValue);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamMusicRemote_EnableQueue(
				IntPtr ISteamMusicRemote,
				[MarshalAs(UnmanagedType.U1)] bool bValue);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamMusicRemote_EnablePlaylists(
				IntPtr ISteamMusicRemote,
				[MarshalAs(UnmanagedType.U1)] bool bValue);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamMusicRemote_UpdatePlaybackStatus(
				IntPtr ISteamMusicRemote,
				AudioPlayback_Status nStatus);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamMusicRemote_UpdateShuffled(
				IntPtr ISteamMusicRemote,
				[MarshalAs(UnmanagedType.U1)] bool bValue);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamMusicRemote_UpdateLooped(
				IntPtr ISteamMusicRemote,
				[MarshalAs(UnmanagedType.U1)] bool bValue);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamMusicRemote_UpdateVolume(
				IntPtr ISteamMusicRemote,
				float flValue);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamMusicRemote_CurrentEntryWillChange(
				IntPtr ISteamMusicRemote);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamMusicRemote_CurrentEntryIsAvailable(
				IntPtr ISteamMusicRemote,
				[MarshalAs(UnmanagedType.U1)] bool bAvailable);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamMusicRemote_UpdateCurrentEntryText(
				IntPtr ISteamMusicRemote,
				string pchText);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamMusicRemote_UpdateCurrentEntryElapsedSeconds(
				IntPtr ISteamMusicRemote,
				int nValue);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamMusicRemote_UpdateCurrentEntryCoverArt(
				IntPtr ISteamMusicRemote,
				IntPtr pvBuffer,
				uint cbBufferLength);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamMusicRemote_CurrentEntryDidChange(
				IntPtr ISteamMusicRemote);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamMusicRemote_QueueWillChange(
				IntPtr ISteamMusicRemote);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamMusicRemote_ResetQueueEntries(
				IntPtr ISteamMusicRemote);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamMusicRemote_SetQueueEntry(
				IntPtr ISteamMusicRemote,
				int nID,
				int nPosition,
				string pchEntryText);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamMusicRemote_SetCurrentQueueEntry(
				IntPtr ISteamMusicRemote,
				int nID);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamMusicRemote_QueueDidChange(
				IntPtr ISteamMusicRemote);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamMusicRemote_PlaylistWillChange(
				IntPtr ISteamMusicRemote);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamMusicRemote_ResetPlaylistEntries(
				IntPtr ISteamMusicRemote);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamMusicRemote_SetPlaylistEntry(
				IntPtr ISteamMusicRemote,
				int nID,
				int nPosition,
				string pchEntryText);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamMusicRemote_SetCurrentPlaylistEntry(
				IntPtr ISteamMusicRemote,
				int nID);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamMusicRemote_PlaylistDidChange(
				IntPtr ISteamMusicRemote);

			[DllImport("steam_api.dll")]
			internal static extern HTTPRequestHandle SteamAPI_ISteamHTTP_CreateHTTPRequest(
				IntPtr ISteamHTTP,
				HTTPMethod eHTTPRequestMethod,
				string pchAbsoluteURL);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamHTTP_SetHTTPRequestContextValue(
				IntPtr ISteamHTTP,
				uint hRequest,
				ulong ulContextValue);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamHTTP_SetHTTPRequestNetworkActivityTimeout(
				IntPtr ISteamHTTP,
				uint hRequest,
				uint unTimeoutSeconds);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamHTTP_SetHTTPRequestHeaderValue(
				IntPtr ISteamHTTP,
				uint hRequest,
				string pchHeaderName,
				string pchHeaderValue);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamHTTP_SetHTTPRequestGetOrPostParameter(
				IntPtr ISteamHTTP,
				uint hRequest,
				string pchParamName,
				string pchParamValue);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamHTTP_SendHTTPRequest(
				IntPtr ISteamHTTP,
				uint hRequest,
				ref ulong pCallHandle);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamHTTP_SendHTTPRequestAndStreamResponse(
				IntPtr ISteamHTTP,
				uint hRequest,
				ref ulong pCallHandle);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamHTTP_DeferHTTPRequest(
				IntPtr ISteamHTTP,
				uint hRequest);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamHTTP_PrioritizeHTTPRequest(
				IntPtr ISteamHTTP,
				uint hRequest);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamHTTP_GetHTTPResponseHeaderSize(
				IntPtr ISteamHTTP,
				uint hRequest,
				string pchHeaderName,
				out uint unResponseHeaderSize);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamHTTP_GetHTTPResponseHeaderValue(
				IntPtr ISteamHTTP,
				uint hRequest,
				string pchHeaderName,
				out byte pHeaderValueBuffer,
				uint unBufferSize);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamHTTP_GetHTTPResponseBodySize(
				IntPtr ISteamHTTP,
				uint hRequest,
				out uint unBodySize);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamHTTP_GetHTTPResponseBodyData(
				IntPtr ISteamHTTP,
				uint hRequest,
				out byte pBodyDataBuffer,
				uint unBufferSize);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamHTTP_GetHTTPStreamingResponseBodyData(
				IntPtr ISteamHTTP,
				uint hRequest,
				uint cOffset,
				out byte pBodyDataBuffer,
				uint unBufferSize);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamHTTP_ReleaseHTTPRequest(
				IntPtr ISteamHTTP,
				uint hRequest);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamHTTP_GetHTTPDownloadProgressPct(
				IntPtr ISteamHTTP,
				uint hRequest,
				out float pflPercentOut);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamHTTP_SetHTTPRequestRawPostBody(
				IntPtr ISteamHTTP,
				uint hRequest,
				string pchContentType,
				out byte pubBody,
				uint unBodyLen);

			[DllImport("steam_api.dll")]
			internal static extern HTTPCookieContainerHandle SteamAPI_ISteamHTTP_CreateCookieContainer(
				IntPtr ISteamHTTP,
				[MarshalAs(UnmanagedType.U1)] bool bAllowResponsesToModify);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamHTTP_ReleaseCookieContainer(
				IntPtr ISteamHTTP,
				uint hCookieContainer);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamHTTP_SetCookie(
				IntPtr ISteamHTTP,
				uint hCookieContainer,
				string pchHost,
				string pchUrl,
				string pchCookie);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamHTTP_SetHTTPRequestCookieContainer(
				IntPtr ISteamHTTP,
				uint hRequest,
				uint hCookieContainer);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamHTTP_SetHTTPRequestUserAgentInfo(
				IntPtr ISteamHTTP,
				uint hRequest,
				string pchUserAgentInfo);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamHTTP_SetHTTPRequestRequiresVerifiedCertificate(
				IntPtr ISteamHTTP,
				uint hRequest,
				[MarshalAs(UnmanagedType.U1)] bool bRequireVerifiedCertificate);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamHTTP_SetHTTPRequestAbsoluteTimeoutMS(
				IntPtr ISteamHTTP,
				uint hRequest,
				uint unMilliseconds);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamHTTP_GetHTTPRequestWasTimedOut(
				IntPtr ISteamHTTP,
				uint hRequest,
				[MarshalAs(UnmanagedType.U1)] ref bool pbWasTimedOut);

			[DllImport("steam_api.dll")]
			internal static extern ClientUnifiedMessageHandle SteamAPI_ISteamUnifiedMessages_SendMethod(
				IntPtr ISteamUnifiedMessages,
				string pchServiceMethod,
				IntPtr pRequestBuffer,
				uint unRequestBufferSize,
				ulong unContext);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamUnifiedMessages_GetMethodResponseInfo(
				IntPtr ISteamUnifiedMessages,
				ulong hHandle,
				out uint punResponseSize,
				out Result peResult);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamUnifiedMessages_GetMethodResponseData(
				IntPtr ISteamUnifiedMessages,
				ulong hHandle,
				IntPtr pResponseBuffer,
				uint unResponseBufferSize,
				[MarshalAs(UnmanagedType.U1)] bool bAutoRelease);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamUnifiedMessages_ReleaseMethod(
				IntPtr ISteamUnifiedMessages,
				ulong hHandle);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamUnifiedMessages_SendNotification(
				IntPtr ISteamUnifiedMessages,
				string pchServiceNotification,
				IntPtr pNotificationBuffer,
				uint unNotificationBufferSize);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamController_Init(IntPtr ISteamController);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamController_Shutdown(IntPtr ISteamController);

			[DllImport("steam_api.dll")]
			internal static extern void SteamAPI_ISteamController_RunFrame(IntPtr ISteamController);

			[DllImport("steam_api.dll")]
			internal static extern int SteamAPI_ISteamController_GetConnectedControllers(
				IntPtr ISteamController,
				IntPtr handlesOut);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamController_ShowBindingPanel(
				IntPtr ISteamController,
				ulong controllerHandle);

			[DllImport("steam_api.dll")]
			internal static extern ControllerActionSetHandle_t SteamAPI_ISteamController_GetActionSetHandle(
				IntPtr ISteamController,
				string pszActionSetName);

			[DllImport("steam_api.dll")]
			internal static extern void SteamAPI_ISteamController_ActivateActionSet(
				IntPtr ISteamController,
				ulong controllerHandle,
				ulong actionSetHandle);

			[DllImport("steam_api.dll")]
			internal static extern ControllerActionSetHandle_t SteamAPI_ISteamController_GetCurrentActionSet(
				IntPtr ISteamController,
				ulong controllerHandle);

			[DllImport("steam_api.dll")]
			internal static extern ControllerDigitalActionHandle_t SteamAPI_ISteamController_GetDigitalActionHandle(
				IntPtr ISteamController,
				string pszActionName);

			[DllImport("steam_api.dll")]
			internal static extern ControllerDigitalActionData_t SteamAPI_ISteamController_GetDigitalActionData(
				IntPtr ISteamController,
				ulong controllerHandle,
				ulong digitalActionHandle);

			[DllImport("steam_api.dll")]
			internal static extern int SteamAPI_ISteamController_GetDigitalActionOrigins(
				IntPtr ISteamController,
				ulong controllerHandle,
				ulong actionSetHandle,
				ulong digitalActionHandle,
				out ControllerActionOrigin originsOut);

			[DllImport("steam_api.dll")]
			internal static extern ControllerAnalogActionHandle_t SteamAPI_ISteamController_GetAnalogActionHandle(
				IntPtr ISteamController,
				string pszActionName);

			[DllImport("steam_api.dll")]
			internal static extern ControllerAnalogActionData_t SteamAPI_ISteamController_GetAnalogActionData(
				IntPtr ISteamController,
				ulong controllerHandle,
				ulong analogActionHandle);

			[DllImport("steam_api.dll")]
			internal static extern int SteamAPI_ISteamController_GetAnalogActionOrigins(
				IntPtr ISteamController,
				ulong controllerHandle,
				ulong actionSetHandle,
				ulong analogActionHandle,
				out ControllerActionOrigin originsOut);

			[DllImport("steam_api.dll")]
			internal static extern void SteamAPI_ISteamController_StopAnalogActionMomentum(
				IntPtr ISteamController,
				ulong controllerHandle,
				ulong eAction);

			[DllImport("steam_api.dll")]
			internal static extern void SteamAPI_ISteamController_TriggerHapticPulse(
				IntPtr ISteamController,
				ulong controllerHandle,
				SteamControllerPad eTargetPad,
				ushort usDurationMicroSec);

			[DllImport("steam_api.dll")]
			internal static extern void SteamAPI_ISteamController_TriggerRepeatedHapticPulse(
				IntPtr ISteamController,
				ulong controllerHandle,
				SteamControllerPad eTargetPad,
				ushort usDurationMicroSec,
				ushort usOffMicroSec,
				ushort unRepeat,
				uint nFlags);

			[DllImport("steam_api.dll")]
			internal static extern void SteamAPI_ISteamController_TriggerVibration(
				IntPtr ISteamController,
				ulong controllerHandle,
				ushort usLeftSpeed,
				ushort usRightSpeed);

			[DllImport("steam_api.dll")]
			internal static extern void SteamAPI_ISteamController_SetLEDColor(
				IntPtr ISteamController,
				ulong controllerHandle,
				byte nColorR,
				byte nColorG,
				byte nColorB,
				uint nFlags);

			[DllImport("steam_api.dll")]
			internal static extern int SteamAPI_ISteamController_GetGamepadIndexForController(
				IntPtr ISteamController,
				ulong ulControllerHandle);

			[DllImport("steam_api.dll")]
			internal static extern ControllerHandle_t SteamAPI_ISteamController_GetControllerForGamepadIndex(
				IntPtr ISteamController,
				int nIndex);

			[DllImport("steam_api.dll")]
			internal static extern ControllerMotionData_t SteamAPI_ISteamController_GetMotionData(
				IntPtr ISteamController,
				ulong controllerHandle);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamController_ShowDigitalActionOrigins(
				IntPtr ISteamController,
				ulong controllerHandle,
				ulong digitalActionHandle,
				float flScale,
				float flXPosition,
				float flYPosition);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamController_ShowAnalogActionOrigins(
				IntPtr ISteamController,
				ulong controllerHandle,
				ulong analogActionHandle,
				float flScale,
				float flXPosition,
				float flYPosition);

			[DllImport("steam_api.dll")]
			internal static extern IntPtr SteamAPI_ISteamController_GetStringForActionOrigin(
				IntPtr ISteamController,
				ControllerActionOrigin eOrigin);

			[DllImport("steam_api.dll")]
			internal static extern IntPtr SteamAPI_ISteamController_GetGlyphForActionOrigin(
				IntPtr ISteamController,
				ControllerActionOrigin eOrigin);

			[DllImport("steam_api.dll")]
			internal static extern UGCQueryHandle_t SteamAPI_ISteamUGC_CreateQueryUserUGCRequest(
				IntPtr ISteamUGC,
				uint unAccountID,
				UserUGCList eListType,
				UGCMatchingUGCType eMatchingUGCType,
				UserUGCListSortOrder eSortOrder,
				uint nCreatorAppID,
				uint nConsumerAppID,
				uint unPage);

			[DllImport("steam_api.dll")]
			internal static extern UGCQueryHandle_t SteamAPI_ISteamUGC_CreateQueryAllUGCRequest(
				IntPtr ISteamUGC,
				UGCQuery eQueryType,
				UGCMatchingUGCType eMatchingeMatchingUGCTypeFileType,
				uint nCreatorAppID,
				uint nConsumerAppID,
				uint unPage);

			[DllImport("steam_api.dll")]
			internal static extern UGCQueryHandle_t SteamAPI_ISteamUGC_CreateQueryUGCDetailsRequest(
				IntPtr ISteamUGC,
				IntPtr pvecPublishedFileID,
				uint unNumPublishedFileIDs);

			[DllImport("steam_api.dll")]
			internal static extern SteamAPICall_t SteamAPI_ISteamUGC_SendQueryUGCRequest(
				IntPtr ISteamUGC,
				ulong handle);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamUGC_GetQueryUGCResult(
				IntPtr ISteamUGC,
				ulong handle,
				uint index,
				ref SteamUGCDetails_t pDetails);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamUGC_GetQueryUGCPreviewURL(
				IntPtr ISteamUGC,
				ulong handle,
				uint index,
				StringBuilder pchURL,
				uint cchURLSize);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamUGC_GetQueryUGCMetadata(
				IntPtr ISteamUGC,
				ulong handle,
				uint index,
				StringBuilder pchMetadata,
				uint cchMetadatasize);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamUGC_GetQueryUGCChildren(
				IntPtr ISteamUGC,
				ulong handle,
				uint index,
				IntPtr pvecPublishedFileID,
				uint cMaxEntries);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamUGC_GetQueryUGCStatistic(
				IntPtr ISteamUGC,
				ulong handle,
				uint index,
				ItemStatistic eStatType,
				out ulong pStatValue);

			[DllImport("steam_api.dll")]
			internal static extern uint SteamAPI_ISteamUGC_GetQueryUGCNumAdditionalPreviews(
				IntPtr ISteamUGC,
				ulong handle,
				uint index);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamUGC_GetQueryUGCAdditionalPreview(
				IntPtr ISteamUGC,
				ulong handle,
				uint index,
				uint previewIndex,
				StringBuilder pchURLOrVideoID,
				uint cchURLSize,
				StringBuilder pchOriginalFileName,
				uint cchOriginalFileNameSize,
				out ItemPreviewType pPreviewType);

			[DllImport("steam_api.dll")]
			internal static extern uint SteamAPI_ISteamUGC_GetQueryUGCNumKeyValueTags(
				IntPtr ISteamUGC,
				ulong handle,
				uint index);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamUGC_GetQueryUGCKeyValueTag(
				IntPtr ISteamUGC,
				ulong handle,
				uint index,
				uint keyValueTagIndex,
				StringBuilder pchKey,
				uint cchKeySize,
				StringBuilder pchValue,
				uint cchValueSize);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamUGC_ReleaseQueryUGCRequest(
				IntPtr ISteamUGC,
				ulong handle);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamUGC_AddRequiredTag(
				IntPtr ISteamUGC,
				ulong handle,
				string pTagName);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamUGC_AddExcludedTag(
				IntPtr ISteamUGC,
				ulong handle,
				string pTagName);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamUGC_SetReturnOnlyIDs(
				IntPtr ISteamUGC,
				ulong handle,
				[MarshalAs(UnmanagedType.U1)] bool bReturnOnlyIDs);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamUGC_SetReturnKeyValueTags(
				IntPtr ISteamUGC,
				ulong handle,
				[MarshalAs(UnmanagedType.U1)] bool bReturnKeyValueTags);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamUGC_SetReturnLongDescription(
				IntPtr ISteamUGC,
				ulong handle,
				[MarshalAs(UnmanagedType.U1)] bool bReturnLongDescription);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamUGC_SetReturnMetadata(
				IntPtr ISteamUGC,
				ulong handle,
				[MarshalAs(UnmanagedType.U1)] bool bReturnMetadata);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamUGC_SetReturnChildren(
				IntPtr ISteamUGC,
				ulong handle,
				[MarshalAs(UnmanagedType.U1)] bool bReturnChildren);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamUGC_SetReturnAdditionalPreviews(
				IntPtr ISteamUGC,
				ulong handle,
				[MarshalAs(UnmanagedType.U1)] bool bReturnAdditionalPreviews);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamUGC_SetReturnTotalOnly(
				IntPtr ISteamUGC,
				ulong handle,
				[MarshalAs(UnmanagedType.U1)] bool bReturnTotalOnly);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamUGC_SetReturnPlaytimeStats(
				IntPtr ISteamUGC,
				ulong handle,
				uint unDays);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamUGC_SetLanguage(
				IntPtr ISteamUGC,
				ulong handle,
				string pchLanguage);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamUGC_SetAllowCachedResponse(
				IntPtr ISteamUGC,
				ulong handle,
				uint unMaxAgeSeconds);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamUGC_SetCloudFileNameFilter(
				IntPtr ISteamUGC,
				ulong handle,
				string pMatchCloudFileName);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamUGC_SetMatchAnyTag(
				IntPtr ISteamUGC,
				ulong handle,
				[MarshalAs(UnmanagedType.U1)] bool bMatchAnyTag);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamUGC_SetSearchText(
				IntPtr ISteamUGC,
				ulong handle,
				string pSearchText);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamUGC_SetRankedByTrendDays(
				IntPtr ISteamUGC,
				ulong handle,
				uint unDays);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamUGC_AddRequiredKeyValueTag(
				IntPtr ISteamUGC,
				ulong handle,
				string pKey,
				string pValue);

			[DllImport("steam_api.dll")]
			internal static extern SteamAPICall_t SteamAPI_ISteamUGC_RequestUGCDetails(
				IntPtr ISteamUGC,
				ulong nPublishedFileID,
				uint unMaxAgeSeconds);

			[DllImport("steam_api.dll")]
			internal static extern SteamAPICall_t SteamAPI_ISteamUGC_CreateItem(
				IntPtr ISteamUGC,
				uint nConsumerAppId,
				WorkshopFileType eFileType);

			[DllImport("steam_api.dll")]
			internal static extern UGCUpdateHandle_t SteamAPI_ISteamUGC_StartItemUpdate(
				IntPtr ISteamUGC,
				uint nConsumerAppId,
				ulong nPublishedFileID);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamUGC_SetItemTitle(
				IntPtr ISteamUGC,
				ulong handle,
				string pchTitle);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamUGC_SetItemDescription(
				IntPtr ISteamUGC,
				ulong handle,
				string pchDescription);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamUGC_SetItemUpdateLanguage(
				IntPtr ISteamUGC,
				ulong handle,
				string pchLanguage);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamUGC_SetItemMetadata(
				IntPtr ISteamUGC,
				ulong handle,
				string pchMetaData);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamUGC_SetItemVisibility(
				IntPtr ISteamUGC,
				ulong handle,
				RemoteStoragePublishedFileVisibility eVisibility);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamUGC_SetItemTags(
				IntPtr ISteamUGC,
				ulong updateHandle,
				ref SteamParamStringArray_t pTags);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamUGC_SetItemContent(
				IntPtr ISteamUGC,
				ulong handle,
				string pszContentFolder);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamUGC_SetItemPreview(
				IntPtr ISteamUGC,
				ulong handle,
				string pszPreviewFile);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamUGC_RemoveItemKeyValueTags(
				IntPtr ISteamUGC,
				ulong handle,
				string pchKey);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamUGC_AddItemKeyValueTag(
				IntPtr ISteamUGC,
				ulong handle,
				string pchKey,
				string pchValue);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamUGC_AddItemPreviewFile(
				IntPtr ISteamUGC,
				ulong handle,
				string pszPreviewFile,
				ItemPreviewType type);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamUGC_AddItemPreviewVideo(
				IntPtr ISteamUGC,
				ulong handle,
				string pszVideoID);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamUGC_UpdateItemPreviewFile(
				IntPtr ISteamUGC,
				ulong handle,
				uint index,
				string pszPreviewFile);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamUGC_UpdateItemPreviewVideo(
				IntPtr ISteamUGC,
				ulong handle,
				uint index,
				string pszVideoID);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamUGC_RemoveItemPreview(
				IntPtr ISteamUGC,
				ulong handle,
				uint index);

			[DllImport("steam_api.dll")]
			internal static extern SteamAPICall_t SteamAPI_ISteamUGC_SubmitItemUpdate(
				IntPtr ISteamUGC,
				ulong handle,
				string pchChangeNote);

			[DllImport("steam_api.dll")]
			internal static extern ItemUpdateStatus SteamAPI_ISteamUGC_GetItemUpdateProgress(
				IntPtr ISteamUGC,
				ulong handle,
				out ulong punBytesProcessed,
				out ulong punBytesTotal);

			[DllImport("steam_api.dll")]
			internal static extern SteamAPICall_t SteamAPI_ISteamUGC_SetUserItemVote(
				IntPtr ISteamUGC,
				ulong nPublishedFileID,
				[MarshalAs(UnmanagedType.U1)] bool bVoteUp);

			[DllImport("steam_api.dll")]
			internal static extern SteamAPICall_t SteamAPI_ISteamUGC_GetUserItemVote(
				IntPtr ISteamUGC,
				ulong nPublishedFileID);

			[DllImport("steam_api.dll")]
			internal static extern SteamAPICall_t SteamAPI_ISteamUGC_AddItemToFavorites(
				IntPtr ISteamUGC,
				uint nAppId,
				ulong nPublishedFileID);

			[DllImport("steam_api.dll")]
			internal static extern SteamAPICall_t SteamAPI_ISteamUGC_RemoveItemFromFavorites(
				IntPtr ISteamUGC,
				uint nAppId,
				ulong nPublishedFileID);

			[DllImport("steam_api.dll")]
			internal static extern SteamAPICall_t SteamAPI_ISteamUGC_SubscribeItem(
				IntPtr ISteamUGC,
				ulong nPublishedFileID);

			[DllImport("steam_api.dll")]
			internal static extern SteamAPICall_t SteamAPI_ISteamUGC_UnsubscribeItem(
				IntPtr ISteamUGC,
				ulong nPublishedFileID);

			[DllImport("steam_api.dll")]
			internal static extern uint SteamAPI_ISteamUGC_GetNumSubscribedItems(IntPtr ISteamUGC);

			[DllImport("steam_api.dll")]
			internal static extern uint SteamAPI_ISteamUGC_GetSubscribedItems(
				IntPtr ISteamUGC,
				IntPtr pvecPublishedFileID,
				uint cMaxEntries);

			[DllImport("steam_api.dll")]
			internal static extern uint SteamAPI_ISteamUGC_GetItemState(
				IntPtr ISteamUGC,
				ulong nPublishedFileID);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamUGC_GetItemInstallInfo(
				IntPtr ISteamUGC,
				ulong nPublishedFileID,
				out ulong punSizeOnDisk,
				StringBuilder pchFolder,
				uint cchFolderSize,
				out uint punTimeStamp);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamUGC_GetItemDownloadInfo(
				IntPtr ISteamUGC,
				ulong nPublishedFileID,
				out ulong punBytesDownloaded,
				out ulong punBytesTotal);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamUGC_DownloadItem(
				IntPtr ISteamUGC,
				ulong nPublishedFileID,
				[MarshalAs(UnmanagedType.U1)] bool bHighPriority);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamUGC_BInitWorkshopForGameServer(
				IntPtr ISteamUGC,
				uint unWorkshopDepotID,
				string pszFolder);

			[DllImport("steam_api.dll")]
			internal static extern void SteamAPI_ISteamUGC_SuspendDownloads(
				IntPtr ISteamUGC,
				[MarshalAs(UnmanagedType.U1)] bool bSuspend);

			[DllImport("steam_api.dll")]
			internal static extern SteamAPICall_t SteamAPI_ISteamUGC_StartPlaytimeTracking(
				IntPtr ISteamUGC,
				IntPtr pvecPublishedFileID,
				uint unNumPublishedFileIDs);

			[DllImport("steam_api.dll")]
			internal static extern SteamAPICall_t SteamAPI_ISteamUGC_StopPlaytimeTracking(
				IntPtr ISteamUGC,
				IntPtr pvecPublishedFileID,
				uint unNumPublishedFileIDs);

			[DllImport("steam_api.dll")]
			internal static extern SteamAPICall_t SteamAPI_ISteamUGC_StopPlaytimeTrackingForAllItems(
				IntPtr ISteamUGC);

			[DllImport("steam_api.dll")]
			internal static extern SteamAPICall_t SteamAPI_ISteamUGC_AddDependency(
				IntPtr ISteamUGC,
				ulong nParentPublishedFileID,
				ulong nChildPublishedFileID);

			[DllImport("steam_api.dll")]
			internal static extern SteamAPICall_t SteamAPI_ISteamUGC_RemoveDependency(
				IntPtr ISteamUGC,
				ulong nParentPublishedFileID,
				ulong nChildPublishedFileID);

			[DllImport("steam_api.dll")]
			internal static extern uint SteamAPI_ISteamAppList_GetNumInstalledApps(IntPtr ISteamAppList);

			[DllImport("steam_api.dll")]
			internal static extern uint SteamAPI_ISteamAppList_GetInstalledApps(
				IntPtr ISteamAppList,
				IntPtr pvecAppID,
				uint unMaxAppIDs);

			[DllImport("steam_api.dll")]
			internal static extern int SteamAPI_ISteamAppList_GetAppName(
				IntPtr ISteamAppList,
				uint nAppID,
				StringBuilder pchName,
				int cchNameMax);

			[DllImport("steam_api.dll")]
			internal static extern int SteamAPI_ISteamAppList_GetAppInstallDir(
				IntPtr ISteamAppList,
				uint nAppID,
				StringBuilder pchDirectory,
				int cchNameMax);

			[DllImport("steam_api.dll")]
			internal static extern int SteamAPI_ISteamAppList_GetAppBuildId(
				IntPtr ISteamAppList,
				uint nAppID);

			[DllImport("steam_api.dll")]
			internal static extern void SteamAPI_ISteamHTMLSurface_DestructISteamHTMLSurface(
				IntPtr ISteamHTMLSurface);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamHTMLSurface_Init(IntPtr ISteamHTMLSurface);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamHTMLSurface_Shutdown(IntPtr ISteamHTMLSurface);

			[DllImport("steam_api.dll")]
			internal static extern SteamAPICall_t SteamAPI_ISteamHTMLSurface_CreateBrowser(
				IntPtr ISteamHTMLSurface,
				string pchUserAgent,
				string pchUserCSS);

			[DllImport("steam_api.dll")]
			internal static extern void SteamAPI_ISteamHTMLSurface_RemoveBrowser(
				IntPtr ISteamHTMLSurface,
				uint unBrowserHandle);

			[DllImport("steam_api.dll")]
			internal static extern void SteamAPI_ISteamHTMLSurface_LoadURL(
				IntPtr ISteamHTMLSurface,
				uint unBrowserHandle,
				string pchURL,
				string pchPostData);

			[DllImport("steam_api.dll")]
			internal static extern void SteamAPI_ISteamHTMLSurface_SetSize(
				IntPtr ISteamHTMLSurface,
				uint unBrowserHandle,
				uint unWidth,
				uint unHeight);

			[DllImport("steam_api.dll")]
			internal static extern void SteamAPI_ISteamHTMLSurface_StopLoad(
				IntPtr ISteamHTMLSurface,
				uint unBrowserHandle);

			[DllImport("steam_api.dll")]
			internal static extern void SteamAPI_ISteamHTMLSurface_Reload(
				IntPtr ISteamHTMLSurface,
				uint unBrowserHandle);

			[DllImport("steam_api.dll")]
			internal static extern void SteamAPI_ISteamHTMLSurface_GoBack(
				IntPtr ISteamHTMLSurface,
				uint unBrowserHandle);

			[DllImport("steam_api.dll")]
			internal static extern void SteamAPI_ISteamHTMLSurface_GoForward(
				IntPtr ISteamHTMLSurface,
				uint unBrowserHandle);

			[DllImport("steam_api.dll")]
			internal static extern void SteamAPI_ISteamHTMLSurface_AddHeader(
				IntPtr ISteamHTMLSurface,
				uint unBrowserHandle,
				string pchKey,
				string pchValue);

			[DllImport("steam_api.dll")]
			internal static extern void SteamAPI_ISteamHTMLSurface_ExecuteJavascript(
				IntPtr ISteamHTMLSurface,
				uint unBrowserHandle,
				string pchScript);

			[DllImport("steam_api.dll")]
			internal static extern void SteamAPI_ISteamHTMLSurface_MouseUp(
				IntPtr ISteamHTMLSurface,
				uint unBrowserHandle,
				HTMLMouseButton eMouseButton);

			[DllImport("steam_api.dll")]
			internal static extern void SteamAPI_ISteamHTMLSurface_MouseDown(
				IntPtr ISteamHTMLSurface,
				uint unBrowserHandle,
				HTMLMouseButton eMouseButton);

			[DllImport("steam_api.dll")]
			internal static extern void SteamAPI_ISteamHTMLSurface_MouseDoubleClick(
				IntPtr ISteamHTMLSurface,
				uint unBrowserHandle,
				HTMLMouseButton eMouseButton);

			[DllImport("steam_api.dll")]
			internal static extern void SteamAPI_ISteamHTMLSurface_MouseMove(
				IntPtr ISteamHTMLSurface,
				uint unBrowserHandle,
				int x,
				int y);

			[DllImport("steam_api.dll")]
			internal static extern void SteamAPI_ISteamHTMLSurface_MouseWheel(
				IntPtr ISteamHTMLSurface,
				uint unBrowserHandle,
				int nDelta);

			[DllImport("steam_api.dll")]
			internal static extern void SteamAPI_ISteamHTMLSurface_KeyDown(
				IntPtr ISteamHTMLSurface,
				uint unBrowserHandle,
				uint nNativeKeyCode,
				HTMLKeyModifiers eHTMLKeyModifiers);

			[DllImport("steam_api.dll")]
			internal static extern void SteamAPI_ISteamHTMLSurface_KeyUp(
				IntPtr ISteamHTMLSurface,
				uint unBrowserHandle,
				uint nNativeKeyCode,
				HTMLKeyModifiers eHTMLKeyModifiers);

			[DllImport("steam_api.dll")]
			internal static extern void SteamAPI_ISteamHTMLSurface_KeyChar(
				IntPtr ISteamHTMLSurface,
				uint unBrowserHandle,
				uint cUnicodeChar,
				HTMLKeyModifiers eHTMLKeyModifiers);

			[DllImport("steam_api.dll")]
			internal static extern void SteamAPI_ISteamHTMLSurface_SetHorizontalScroll(
				IntPtr ISteamHTMLSurface,
				uint unBrowserHandle,
				uint nAbsolutePixelScroll);

			[DllImport("steam_api.dll")]
			internal static extern void SteamAPI_ISteamHTMLSurface_SetVerticalScroll(
				IntPtr ISteamHTMLSurface,
				uint unBrowserHandle,
				uint nAbsolutePixelScroll);

			[DllImport("steam_api.dll")]
			internal static extern void SteamAPI_ISteamHTMLSurface_SetKeyFocus(
				IntPtr ISteamHTMLSurface,
				uint unBrowserHandle,
				[MarshalAs(UnmanagedType.U1)] bool bHasKeyFocus);

			[DllImport("steam_api.dll")]
			internal static extern void SteamAPI_ISteamHTMLSurface_ViewSource(
				IntPtr ISteamHTMLSurface,
				uint unBrowserHandle);

			[DllImport("steam_api.dll")]
			internal static extern void SteamAPI_ISteamHTMLSurface_CopyToClipboard(
				IntPtr ISteamHTMLSurface,
				uint unBrowserHandle);

			[DllImport("steam_api.dll")]
			internal static extern void SteamAPI_ISteamHTMLSurface_PasteFromClipboard(
				IntPtr ISteamHTMLSurface,
				uint unBrowserHandle);

			[DllImport("steam_api.dll")]
			internal static extern void SteamAPI_ISteamHTMLSurface_Find(
				IntPtr ISteamHTMLSurface,
				uint unBrowserHandle,
				string pchSearchStr,
				[MarshalAs(UnmanagedType.U1)] bool bCurrentlyInFind,
				[MarshalAs(UnmanagedType.U1)] bool bReverse);

			[DllImport("steam_api.dll")]
			internal static extern void SteamAPI_ISteamHTMLSurface_StopFind(
				IntPtr ISteamHTMLSurface,
				uint unBrowserHandle);

			[DllImport("steam_api.dll")]
			internal static extern void SteamAPI_ISteamHTMLSurface_GetLinkAtPosition(
				IntPtr ISteamHTMLSurface,
				uint unBrowserHandle,
				int x,
				int y);

			[DllImport("steam_api.dll")]
			internal static extern void SteamAPI_ISteamHTMLSurface_SetCookie(
				IntPtr ISteamHTMLSurface,
				string pchHostname,
				string pchKey,
				string pchValue,
				string pchPath,
				uint nExpires,
				[MarshalAs(UnmanagedType.U1)] bool bSecure,
				[MarshalAs(UnmanagedType.U1)] bool bHTTPOnly);

			[DllImport("steam_api.dll")]
			internal static extern void SteamAPI_ISteamHTMLSurface_SetPageScaleFactor(
				IntPtr ISteamHTMLSurface,
				uint unBrowserHandle,
				float flZoom,
				int nPointX,
				int nPointY);

			[DllImport("steam_api.dll")]
			internal static extern void SteamAPI_ISteamHTMLSurface_SetBackgroundMode(
				IntPtr ISteamHTMLSurface,
				uint unBrowserHandle,
				[MarshalAs(UnmanagedType.U1)] bool bBackgroundMode);

			[DllImport("steam_api.dll")]
			internal static extern void SteamAPI_ISteamHTMLSurface_AllowStartRequest(
				IntPtr ISteamHTMLSurface,
				uint unBrowserHandle,
				[MarshalAs(UnmanagedType.U1)] bool bAllowed);

			[DllImport("steam_api.dll")]
			internal static extern void SteamAPI_ISteamHTMLSurface_JSDialogResponse(
				IntPtr ISteamHTMLSurface,
				uint unBrowserHandle,
				[MarshalAs(UnmanagedType.U1)] bool bResult);

			[DllImport("steam_api.dll")]
			internal static extern Result SteamAPI_ISteamInventory_GetResultStatus(
				IntPtr ISteamInventory,
				int resultHandle);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamInventory_GetResultItems(
				IntPtr ISteamInventory,
				int resultHandle,
				IntPtr pOutItemsArray,
				out uint punOutItemsArraySize);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamInventory_GetResultItemProperty(
				IntPtr ISteamInventory,
				int resultHandle,
				uint unItemIndex,
				string pchPropertyName,
				StringBuilder pchValueBuffer,
				out uint punValueBufferSizeOut);

			[DllImport("steam_api.dll")]
			internal static extern uint SteamAPI_ISteamInventory_GetResultTimestamp(
				IntPtr ISteamInventory,
				int resultHandle);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamInventory_CheckResultSteamID(
				IntPtr ISteamInventory,
				int resultHandle,
				ulong steamIDExpected);

			[DllImport("steam_api.dll")]
			internal static extern void SteamAPI_ISteamInventory_DestroyResult(
				IntPtr ISteamInventory,
				int resultHandle);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamInventory_GetAllItems(
				IntPtr ISteamInventory,
				ref int pResultHandle);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamInventory_GetItemsByID(
				IntPtr ISteamInventory,
				ref int pResultHandle,
				ulong[] pInstanceIDs,
				uint unCountInstanceIDs);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamInventory_SerializeResult(
				IntPtr ISteamInventory,
				int resultHandle,
				IntPtr pOutBuffer,
				out uint punOutBufferSize);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamInventory_DeserializeResult(
				IntPtr ISteamInventory,
				ref int pOutResultHandle,
				IntPtr pBuffer,
				uint unBufferSize,
				[MarshalAs(UnmanagedType.U1)] bool bRESERVED_MUST_BE_FALSE);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamInventory_GenerateItems(
				IntPtr ISteamInventory,
				ref int pResultHandle,
				int[] pArrayItemDefs,
				uint[] punArrayQuantity,
				uint unArrayLength);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamInventory_GrantPromoItems(
				IntPtr ISteamInventory,
				ref int pResultHandle);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamInventory_AddPromoItem(
				IntPtr ISteamInventory,
				ref int pResultHandle,
				int itemDef);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamInventory_AddPromoItems(
				IntPtr ISteamInventory,
				ref int pResultHandle,
				int[] pArrayItemDefs,
				uint unArrayLength);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamInventory_ConsumeItem(
				IntPtr ISteamInventory,
				ref int pResultHandle,
				ulong itemConsume,
				uint unQuantity);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamInventory_ExchangeItems(
				IntPtr ISteamInventory,
				ref int pResultHandle,
				int[] pArrayGenerate,
				uint[] punArrayGenerateQuantity,
				uint unArrayGenerateLength,
				ulong[] pArrayDestroy,
				uint[] punArrayDestroyQuantity,
				uint unArrayDestroyLength);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamInventory_TransferItemQuantity(
				IntPtr ISteamInventory,
				ref int pResultHandle,
				ulong itemIdSource,
				uint unQuantity,
				ulong itemIdDest);

			[DllImport("steam_api.dll")]
			internal static extern void SteamAPI_ISteamInventory_SendItemDropHeartbeat(
				IntPtr ISteamInventory);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamInventory_TriggerItemDrop(
				IntPtr ISteamInventory,
				ref int pResultHandle,
				int dropListDefinition);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamInventory_TradeItems(
				IntPtr ISteamInventory,
				ref int pResultHandle,
				ulong steamIDTradePartner,
				ulong[] pArrayGive,
				uint[] pArrayGiveQuantity,
				uint nArrayGiveLength,
				ulong[] pArrayGet,
				uint[] pArrayGetQuantity,
				uint nArrayGetLength);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamInventory_LoadItemDefinitions(
				IntPtr ISteamInventory);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamInventory_GetItemDefinitionIDs(
				IntPtr ISteamInventory,
				IntPtr pItemDefIDs,
				out uint punItemDefIDsArraySize);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamInventory_GetItemDefinitionProperty(
				IntPtr ISteamInventory,
				int iDefinition,
				string pchPropertyName,
				StringBuilder pchValueBuffer,
				out uint punValueBufferSizeOut);

			[DllImport("steam_api.dll")]
			internal static extern SteamAPICall_t SteamAPI_ISteamInventory_RequestEligiblePromoItemDefinitionsIDs(
				IntPtr ISteamInventory,
				ulong steamID);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamInventory_GetEligiblePromoItemDefinitionIDs(
				IntPtr ISteamInventory,
				ulong steamID,
				IntPtr pItemDefIDs,
				out uint punItemDefIDsArraySize);

			[DllImport("steam_api.dll")]
			internal static extern void SteamAPI_ISteamVideo_GetVideoURL(
				IntPtr ISteamVideo,
				uint unVideoAppID);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamVideo_IsBroadcasting(
				IntPtr ISteamVideo,
				IntPtr pnNumViewers);

			[DllImport("steam_api.dll")]
			internal static extern void SteamAPI_ISteamVideo_GetOPFSettings(
				IntPtr ISteamVideo,
				uint unVideoAppID);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamVideo_GetOPFStringForApp(
				IntPtr ISteamVideo,
				uint unVideoAppID,
				StringBuilder pchBuffer,
				out int pnBufferSize);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamGameServer_InitGameServer(
				IntPtr ISteamGameServer,
				uint unIP,
				ushort usGamePort,
				ushort usQueryPort,
				uint unFlags,
				uint nGameAppId,
				string pchVersionString);

			[DllImport("steam_api.dll")]
			internal static extern void SteamAPI_ISteamGameServer_SetProduct(
				IntPtr ISteamGameServer,
				string pszProduct);

			[DllImport("steam_api.dll")]
			internal static extern void SteamAPI_ISteamGameServer_SetGameDescription(
				IntPtr ISteamGameServer,
				string pszGameDescription);

			[DllImport("steam_api.dll")]
			internal static extern void SteamAPI_ISteamGameServer_SetModDir(
				IntPtr ISteamGameServer,
				string pszModDir);

			[DllImport("steam_api.dll")]
			internal static extern void SteamAPI_ISteamGameServer_SetDedicatedServer(
				IntPtr ISteamGameServer,
				[MarshalAs(UnmanagedType.U1)] bool bDedicated);

			[DllImport("steam_api.dll")]
			internal static extern void SteamAPI_ISteamGameServer_LogOn(
				IntPtr ISteamGameServer,
				string pszToken);

			[DllImport("steam_api.dll")]
			internal static extern void SteamAPI_ISteamGameServer_LogOnAnonymous(IntPtr ISteamGameServer);

			[DllImport("steam_api.dll")]
			internal static extern void SteamAPI_ISteamGameServer_LogOff(IntPtr ISteamGameServer);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamGameServer_BLoggedOn(IntPtr ISteamGameServer);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamGameServer_BSecure(IntPtr ISteamGameServer);

			[DllImport("steam_api.dll")]
			internal static extern CSteamID SteamAPI_ISteamGameServer_GetSteamID(IntPtr ISteamGameServer);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamGameServer_WasRestartRequested(
				IntPtr ISteamGameServer);

			[DllImport("steam_api.dll")]
			internal static extern void SteamAPI_ISteamGameServer_SetMaxPlayerCount(
				IntPtr ISteamGameServer,
				int cPlayersMax);

			[DllImport("steam_api.dll")]
			internal static extern void SteamAPI_ISteamGameServer_SetBotPlayerCount(
				IntPtr ISteamGameServer,
				int cBotplayers);

			[DllImport("steam_api.dll")]
			internal static extern void SteamAPI_ISteamGameServer_SetServerName(
				IntPtr ISteamGameServer,
				string pszServerName);

			[DllImport("steam_api.dll")]
			internal static extern void SteamAPI_ISteamGameServer_SetMapName(
				IntPtr ISteamGameServer,
				string pszMapName);

			[DllImport("steam_api.dll")]
			internal static extern void SteamAPI_ISteamGameServer_SetPasswordProtected(
				IntPtr ISteamGameServer,
				[MarshalAs(UnmanagedType.U1)] bool bPasswordProtected);

			[DllImport("steam_api.dll")]
			internal static extern void SteamAPI_ISteamGameServer_SetSpectatorPort(
				IntPtr ISteamGameServer,
				ushort unSpectatorPort);

			[DllImport("steam_api.dll")]
			internal static extern void SteamAPI_ISteamGameServer_SetSpectatorServerName(
				IntPtr ISteamGameServer,
				string pszSpectatorServerName);

			[DllImport("steam_api.dll")]
			internal static extern void SteamAPI_ISteamGameServer_ClearAllKeyValues(
				IntPtr ISteamGameServer);

			[DllImport("steam_api.dll")]
			internal static extern void SteamAPI_ISteamGameServer_SetKeyValue(
				IntPtr ISteamGameServer,
				string pKey,
				string pValue);

			[DllImport("steam_api.dll")]
			internal static extern void SteamAPI_ISteamGameServer_SetGameTags(
				IntPtr ISteamGameServer,
				string pchGameTags);

			[DllImport("steam_api.dll")]
			internal static extern void SteamAPI_ISteamGameServer_SetGameData(
				IntPtr ISteamGameServer,
				string pchGameData);

			[DllImport("steam_api.dll")]
			internal static extern void SteamAPI_ISteamGameServer_SetRegion(
				IntPtr ISteamGameServer,
				string pszRegion);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamGameServer_SendUserConnectAndAuthenticate(
				IntPtr ISteamGameServer,
				uint unIPClient,
				IntPtr pvAuthBlob,
				uint cubAuthBlobSize,
				out ulong pSteamIDUser);

			[DllImport("steam_api.dll")]
			internal static extern CSteamID SteamAPI_ISteamGameServer_CreateUnauthenticatedUserConnection(
				IntPtr ISteamGameServer);

			[DllImport("steam_api.dll")]
			internal static extern void SteamAPI_ISteamGameServer_SendUserDisconnect(
				IntPtr ISteamGameServer,
				ulong steamIDUser);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamGameServer_BUpdateUserData(
				IntPtr ISteamGameServer,
				ulong steamIDUser,
				string pchPlayerName,
				uint uScore);

			[DllImport("steam_api.dll")]
			internal static extern HAuthTicket SteamAPI_ISteamGameServer_GetAuthSessionTicket(
				IntPtr ISteamGameServer,
				IntPtr pTicket,
				int cbMaxTicket,
				out uint pcbTicket);

			[DllImport("steam_api.dll")]
			internal static extern BeginAuthSessionResult SteamAPI_ISteamGameServer_BeginAuthSession(
				IntPtr ISteamGameServer,
				IntPtr pAuthTicket,
				int cbAuthTicket,
				ulong steamID);

			[DllImport("steam_api.dll")]
			internal static extern void SteamAPI_ISteamGameServer_EndAuthSession(
				IntPtr ISteamGameServer,
				ulong steamID);

			[DllImport("steam_api.dll")]
			internal static extern void SteamAPI_ISteamGameServer_CancelAuthTicket(
				IntPtr ISteamGameServer,
				uint hAuthTicket);

			[DllImport("steam_api.dll")]
			internal static extern UserHasLicenseForAppResult SteamAPI_ISteamGameServer_UserHasLicenseForApp(
				IntPtr ISteamGameServer,
				ulong steamID,
				uint appID);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamGameServer_RequestUserGroupStatus(
				IntPtr ISteamGameServer,
				ulong steamIDUser,
				ulong steamIDGroup);

			[DllImport("steam_api.dll")]
			internal static extern void SteamAPI_ISteamGameServer_GetGameplayStats(
				IntPtr ISteamGameServer);

			[DllImport("steam_api.dll")]
			internal static extern SteamAPICall_t SteamAPI_ISteamGameServer_GetServerReputation(
				IntPtr ISteamGameServer);

			[DllImport("steam_api.dll")]
			internal static extern uint SteamAPI_ISteamGameServer_GetPublicIP(IntPtr ISteamGameServer);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamGameServer_HandleIncomingPacket(
				IntPtr ISteamGameServer,
				IntPtr pData,
				int cbData,
				uint srcIP,
				ushort srcPort);

			[DllImport("steam_api.dll")]
			internal static extern int SteamAPI_ISteamGameServer_GetNextOutgoingPacket(
				IntPtr ISteamGameServer,
				IntPtr pOut,
				int cbMaxOut,
				out uint pNetAdr,
				out ushort pPort);

			[DllImport("steam_api.dll")]
			internal static extern void SteamAPI_ISteamGameServer_EnableHeartbeats(
				IntPtr ISteamGameServer,
				[MarshalAs(UnmanagedType.U1)] bool bActive);

			[DllImport("steam_api.dll")]
			internal static extern void SteamAPI_ISteamGameServer_SetHeartbeatInterval(
				IntPtr ISteamGameServer,
				int iHeartbeatInterval);

			[DllImport("steam_api.dll")]
			internal static extern void SteamAPI_ISteamGameServer_ForceHeartbeat(IntPtr ISteamGameServer);

			[DllImport("steam_api.dll")]
			internal static extern SteamAPICall_t SteamAPI_ISteamGameServer_AssociateWithClan(
				IntPtr ISteamGameServer,
				ulong steamIDClan);

			[DllImport("steam_api.dll")]
			internal static extern SteamAPICall_t SteamAPI_ISteamGameServer_ComputeNewPlayerCompatibility(
				IntPtr ISteamGameServer,
				ulong steamIDNewPlayer);

			[DllImport("steam_api.dll")]
			internal static extern SteamAPICall_t SteamAPI_ISteamGameServerStats_RequestUserStats(
				IntPtr ISteamGameServerStats,
				ulong steamIDUser);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamGameServerStats_GetUserStat(
				IntPtr ISteamGameServerStats,
				ulong steamIDUser,
				string pchName,
				out int pData);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamGameServerStats_GetUserStat0(
				IntPtr ISteamGameServerStats,
				ulong steamIDUser,
				string pchName,
				out float pData);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamGameServerStats_GetUserAchievement(
				IntPtr ISteamGameServerStats,
				ulong steamIDUser,
				string pchName,
				[MarshalAs(UnmanagedType.U1)] ref bool pbAchieved);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamGameServerStats_SetUserStat(
				IntPtr ISteamGameServerStats,
				ulong steamIDUser,
				string pchName,
				int nData);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamGameServerStats_SetUserStat0(
				IntPtr ISteamGameServerStats,
				ulong steamIDUser,
				string pchName,
				float fData);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamGameServerStats_UpdateUserAvgRateStat(
				IntPtr ISteamGameServerStats,
				ulong steamIDUser,
				string pchName,
				float flCountThisSession,
				double dSessionLength);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamGameServerStats_SetUserAchievement(
				IntPtr ISteamGameServerStats,
				ulong steamIDUser,
				string pchName);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_ISteamGameServerStats_ClearUserAchievement(
				IntPtr ISteamGameServerStats,
				ulong steamIDUser,
				string pchName);

			[DllImport("steam_api.dll")]
			internal static extern SteamAPICall_t SteamAPI_ISteamGameServerStats_StoreUserStats(
				IntPtr ISteamGameServerStats,
				ulong steamIDUser);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_Init();

			[DllImport("steam_api.dll")]
			internal static extern void SteamAPI_RunCallbacks();

			[DllImport("steam_api.dll")]
			internal static extern void SteamGameServer_RunCallbacks();

			[DllImport("steam_api.dll")]
			internal static extern void SteamAPI_RegisterCallback(IntPtr pCallback, int callback);

			[DllImport("steam_api.dll")]
			internal static extern void SteamAPI_UnregisterCallback(IntPtr pCallback);

			[DllImport("steam_api.dll")]
			internal static extern void SteamAPI_RegisterCallResult(IntPtr pCallback, ulong callback);

			[DllImport("steam_api.dll")]
			internal static extern void SteamAPI_UnregisterCallResult(IntPtr pCallback, ulong callback);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamInternal_GameServer_Init(
				uint unIP,
				ushort usPort,
				ushort usGamePort,
				ushort usQueryPort,
				int eServerMode,
				string pchVersionString);

			[DllImport("steam_api.dll")]
			internal static extern void SteamAPI_Shutdown();

			[DllImport("steam_api.dll")]
			internal static extern void SteamGameServer_Shutdown();

			[DllImport("steam_api.dll")]
			internal static extern HSteamUser SteamAPI_GetHSteamUser();

			[DllImport("steam_api.dll")]
			internal static extern HSteamPipe SteamAPI_GetHSteamPipe();

			[DllImport("steam_api.dll")]
			internal static extern HSteamUser SteamGameServer_GetHSteamUser();

			[DllImport("steam_api.dll")]
			internal static extern HSteamPipe SteamGameServer_GetHSteamPipe();

			[DllImport("steam_api.dll")]
			internal static extern IntPtr SteamInternal_CreateInterface(string version);

			[DllImport("steam_api.dll")]
			internal static extern bool SteamAPI_RestartAppIfNecessary(uint unOwnAppID);
		}
	}

	internal class Win64 : Interface, IDisposable {
		internal IntPtr _ptr;

		public bool IsValid => _ptr != IntPtr.Zero;

		internal Win64(IntPtr pointer) {
			_ptr = pointer;
		}

		public virtual void Dispose() {
			_ptr = IntPtr.Zero;
		}

		public virtual HSteamPipe ISteamClient_CreateSteamPipe() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamClient_CreateSteamPipe(_ptr)
				: throw new Exception("ISteamClient _ptr is null!");
		}

		public virtual bool ISteamClient_BReleaseSteamPipe(int hSteamPipe) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamClient_BReleaseSteamPipe(_ptr, hSteamPipe)
				: throw new Exception("ISteamClient _ptr is null!");
		}

		public virtual HSteamUser ISteamClient_ConnectToGlobalUser(int hSteamPipe) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamClient_ConnectToGlobalUser(_ptr, hSteamPipe)
				: throw new Exception("ISteamClient _ptr is null!");
		}

		public virtual HSteamUser ISteamClient_CreateLocalUser(
			out int phSteamPipe,
			AccountType eAccountType) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamClient_CreateLocalUser(_ptr, out phSteamPipe, eAccountType)
				: throw new Exception("ISteamClient _ptr is null!");
		}

		public virtual void ISteamClient_ReleaseUser(int hSteamPipe, int hUser) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamClient _ptr is null!");
			Native.SteamAPI_ISteamClient_ReleaseUser(_ptr, hSteamPipe, hUser);
		}

		public virtual IntPtr ISteamClient_GetISteamUser(
			int hSteamUser,
			int hSteamPipe,
			string pchVersion) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamClient _ptr is null!");
			return Native.SteamAPI_ISteamClient_GetISteamUser(_ptr, hSteamUser, hSteamPipe, pchVersion);
		}

		public virtual IntPtr ISteamClient_GetISteamGameServer(
			int hSteamUser,
			int hSteamPipe,
			string pchVersion) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamClient _ptr is null!");
			return Native.SteamAPI_ISteamClient_GetISteamGameServer(_ptr, hSteamUser, hSteamPipe, pchVersion);
		}

		public virtual void ISteamClient_SetLocalIPBinding(uint unIP, ushort usPort) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamClient _ptr is null!");
			Native.SteamAPI_ISteamClient_SetLocalIPBinding(_ptr, unIP, usPort);
		}

		public virtual IntPtr ISteamClient_GetISteamFriends(
			int hSteamUser,
			int hSteamPipe,
			string pchVersion) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamClient _ptr is null!");
			return Native.SteamAPI_ISteamClient_GetISteamFriends(_ptr, hSteamUser, hSteamPipe, pchVersion);
		}

		public virtual IntPtr ISteamClient_GetISteamUtils(int hSteamPipe, string pchVersion) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamClient _ptr is null!");
			return Native.SteamAPI_ISteamClient_GetISteamUtils(_ptr, hSteamPipe, pchVersion);
		}

		public virtual IntPtr ISteamClient_GetISteamMatchmaking(
			int hSteamUser,
			int hSteamPipe,
			string pchVersion) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamClient _ptr is null!");
			return Native.SteamAPI_ISteamClient_GetISteamMatchmaking(_ptr, hSteamUser, hSteamPipe, pchVersion);
		}

		public virtual IntPtr ISteamClient_GetISteamMatchmakingServers(
			int hSteamUser,
			int hSteamPipe,
			string pchVersion) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamClient _ptr is null!");
			return Native.SteamAPI_ISteamClient_GetISteamMatchmakingServers(_ptr, hSteamUser, hSteamPipe, pchVersion);
		}

		public virtual IntPtr ISteamClient_GetISteamGenericInterface(
			int hSteamUser,
			int hSteamPipe,
			string pchVersion) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamClient _ptr is null!");
			return Native.SteamAPI_ISteamClient_GetISteamGenericInterface(_ptr, hSteamUser, hSteamPipe, pchVersion);
		}

		public virtual IntPtr ISteamClient_GetISteamUserStats(
			int hSteamUser,
			int hSteamPipe,
			string pchVersion) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamClient _ptr is null!");
			return Native.SteamAPI_ISteamClient_GetISteamUserStats(_ptr, hSteamUser, hSteamPipe, pchVersion);
		}

		public virtual IntPtr ISteamClient_GetISteamGameServerStats(
			int hSteamuser,
			int hSteamPipe,
			string pchVersion) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamClient _ptr is null!");
			return Native.SteamAPI_ISteamClient_GetISteamGameServerStats(_ptr, hSteamuser, hSteamPipe, pchVersion);
		}

		public virtual IntPtr ISteamClient_GetISteamApps(
			int hSteamUser,
			int hSteamPipe,
			string pchVersion) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamClient _ptr is null!");
			return Native.SteamAPI_ISteamClient_GetISteamApps(_ptr, hSteamUser, hSteamPipe, pchVersion);
		}

		public virtual IntPtr ISteamClient_GetISteamNetworking(
			int hSteamUser,
			int hSteamPipe,
			string pchVersion) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamClient _ptr is null!");
			return Native.SteamAPI_ISteamClient_GetISteamNetworking(_ptr, hSteamUser, hSteamPipe, pchVersion);
		}

		public virtual IntPtr ISteamClient_GetISteamRemoteStorage(
			int hSteamuser,
			int hSteamPipe,
			string pchVersion) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamClient _ptr is null!");
			return Native.SteamAPI_ISteamClient_GetISteamRemoteStorage(_ptr, hSteamuser, hSteamPipe, pchVersion);
		}

		public virtual IntPtr ISteamClient_GetISteamScreenshots(
			int hSteamuser,
			int hSteamPipe,
			string pchVersion) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamClient _ptr is null!");
			return Native.SteamAPI_ISteamClient_GetISteamScreenshots(_ptr, hSteamuser, hSteamPipe, pchVersion);
		}

		public virtual uint ISteamClient_GetIPCCallCount() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamClient_GetIPCCallCount(_ptr)
				: throw new Exception("ISteamClient _ptr is null!");
		}

		public virtual void ISteamClient_SetWarningMessageHook(IntPtr pFunction) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamClient _ptr is null!");
			Native.SteamAPI_ISteamClient_SetWarningMessageHook(_ptr, pFunction);
		}

		public virtual bool ISteamClient_BShutdownIfAllPipesClosed() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamClient_BShutdownIfAllPipesClosed(_ptr)
				: throw new Exception("ISteamClient _ptr is null!");
		}

		public virtual IntPtr ISteamClient_GetISteamHTTP(
			int hSteamuser,
			int hSteamPipe,
			string pchVersion) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamClient _ptr is null!");
			return Native.SteamAPI_ISteamClient_GetISteamHTTP(_ptr, hSteamuser, hSteamPipe, pchVersion);
		}

		public virtual IntPtr ISteamClient_GetISteamUnifiedMessages(
			int hSteamuser,
			int hSteamPipe,
			string pchVersion) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamClient _ptr is null!");
			return Native.SteamAPI_ISteamClient_GetISteamUnifiedMessages(_ptr, hSteamuser, hSteamPipe, pchVersion);
		}

		public virtual IntPtr ISteamClient_GetISteamController(
			int hSteamUser,
			int hSteamPipe,
			string pchVersion) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamClient _ptr is null!");
			return Native.SteamAPI_ISteamClient_GetISteamController(_ptr, hSteamUser, hSteamPipe, pchVersion);
		}

		public virtual IntPtr ISteamClient_GetISteamUGC(
			int hSteamUser,
			int hSteamPipe,
			string pchVersion) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamClient _ptr is null!");
			return Native.SteamAPI_ISteamClient_GetISteamUGC(_ptr, hSteamUser, hSteamPipe, pchVersion);
		}

		public virtual IntPtr ISteamClient_GetISteamAppList(
			int hSteamUser,
			int hSteamPipe,
			string pchVersion) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamClient _ptr is null!");
			return Native.SteamAPI_ISteamClient_GetISteamAppList(_ptr, hSteamUser, hSteamPipe, pchVersion);
		}

		public virtual IntPtr ISteamClient_GetISteamMusic(
			int hSteamuser,
			int hSteamPipe,
			string pchVersion) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamClient _ptr is null!");
			return Native.SteamAPI_ISteamClient_GetISteamMusic(_ptr, hSteamuser, hSteamPipe, pchVersion);
		}

		public virtual IntPtr ISteamClient_GetISteamMusicRemote(
			int hSteamuser,
			int hSteamPipe,
			string pchVersion) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamClient _ptr is null!");
			return Native.SteamAPI_ISteamClient_GetISteamMusicRemote(_ptr, hSteamuser, hSteamPipe, pchVersion);
		}

		public virtual IntPtr ISteamClient_GetISteamHTMLSurface(
			int hSteamuser,
			int hSteamPipe,
			string pchVersion) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamClient _ptr is null!");
			return Native.SteamAPI_ISteamClient_GetISteamHTMLSurface(_ptr, hSteamuser, hSteamPipe, pchVersion);
		}

		public virtual IntPtr ISteamClient_GetISteamInventory(
			int hSteamuser,
			int hSteamPipe,
			string pchVersion) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamClient _ptr is null!");
			return Native.SteamAPI_ISteamClient_GetISteamInventory(_ptr, hSteamuser, hSteamPipe, pchVersion);
		}

		public virtual IntPtr ISteamClient_GetISteamVideo(
			int hSteamuser,
			int hSteamPipe,
			string pchVersion) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamClient _ptr is null!");
			return Native.SteamAPI_ISteamClient_GetISteamVideo(_ptr, hSteamuser, hSteamPipe, pchVersion);
		}

		public virtual HSteamUser ISteamUser_GetHSteamUser() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUser_GetHSteamUser(_ptr)
				: throw new Exception("ISteamUser _ptr is null!");
		}

		public virtual bool ISteamUser_BLoggedOn() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUser_BLoggedOn(_ptr)
				: throw new Exception("ISteamUser _ptr is null!");
		}

		public virtual CSteamID ISteamUser_GetSteamID() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUser_GetSteamID(_ptr)
				: throw new Exception("ISteamUser _ptr is null!");
		}

		public virtual int ISteamUser_InitiateGameConnection(
			IntPtr pAuthBlob,
			int cbMaxAuthBlob,
			ulong steamIDGameServer,
			uint unIPServer,
			ushort usPortServer,
			[MarshalAs(UnmanagedType.U1)] bool bSecure) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUser _ptr is null!");
			return Native.SteamAPI_ISteamUser_InitiateGameConnection(_ptr, pAuthBlob, cbMaxAuthBlob, steamIDGameServer,
				unIPServer, usPortServer, bSecure);
		}

		public virtual void ISteamUser_TerminateGameConnection(uint unIPServer, ushort usPortServer) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUser _ptr is null!");
			Native.SteamAPI_ISteamUser_TerminateGameConnection(_ptr, unIPServer, usPortServer);
		}

		public virtual void ISteamUser_TrackAppUsageEvent(
			ulong gameID,
			int eAppUsageEvent,
			string pchExtraInfo) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUser _ptr is null!");
			Native.SteamAPI_ISteamUser_TrackAppUsageEvent(_ptr, gameID, eAppUsageEvent, pchExtraInfo);
		}

		public virtual bool ISteamUser_GetUserDataFolder(StringBuilder pchBuffer, int cubBuffer) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUser _ptr is null!");
			return Native.SteamAPI_ISteamUser_GetUserDataFolder(_ptr, pchBuffer, cubBuffer);
		}

		public virtual void ISteamUser_StartVoiceRecording() {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUser _ptr is null!");
			Native.SteamAPI_ISteamUser_StartVoiceRecording(_ptr);
		}

		public virtual void ISteamUser_StopVoiceRecording() {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUser _ptr is null!");
			Native.SteamAPI_ISteamUser_StopVoiceRecording(_ptr);
		}

		public virtual VoiceResult ISteamUser_GetAvailableVoice(
			out uint pcbCompressed,
			out uint pcbUncompressed_Deprecated,
			uint nUncompressedVoiceDesiredSampleRate_Deprecated) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUser_GetAvailableVoice(_ptr, out pcbCompressed, out pcbUncompressed_Deprecated,
					nUncompressedVoiceDesiredSampleRate_Deprecated)
				: throw new Exception("ISteamUser _ptr is null!");
		}

		public virtual VoiceResult ISteamUser_GetVoice(
			[MarshalAs(UnmanagedType.U1)] bool bWantCompressed,
			IntPtr pDestBuffer,
			uint cbDestBufferSize,
			out uint nBytesWritten,
			[MarshalAs(UnmanagedType.U1)] bool bWantUncompressed_Deprecated,
			IntPtr pUncompressedDestBuffer_Deprecated,
			uint cbUncompressedDestBufferSize_Deprecated,
			out uint nUncompressBytesWritten_Deprecated,
			uint nUncompressedVoiceDesiredSampleRate_Deprecated) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUser _ptr is null!");
			return Native.SteamAPI_ISteamUser_GetVoice(_ptr, bWantCompressed, pDestBuffer, cbDestBufferSize,
				out nBytesWritten, bWantUncompressed_Deprecated, pUncompressedDestBuffer_Deprecated,
				cbUncompressedDestBufferSize_Deprecated, out nUncompressBytesWritten_Deprecated,
				nUncompressedVoiceDesiredSampleRate_Deprecated);
		}

		public virtual VoiceResult ISteamUser_DecompressVoice(
			IntPtr pCompressed,
			uint cbCompressed,
			IntPtr pDestBuffer,
			uint cbDestBufferSize,
			out uint nBytesWritten,
			uint nDesiredSampleRate) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUser _ptr is null!");
			return Native.SteamAPI_ISteamUser_DecompressVoice(_ptr, pCompressed, cbCompressed, pDestBuffer,
				cbDestBufferSize, out nBytesWritten, nDesiredSampleRate);
		}

		public virtual uint ISteamUser_GetVoiceOptimalSampleRate() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUser_GetVoiceOptimalSampleRate(_ptr)
				: throw new Exception("ISteamUser _ptr is null!");
		}

		public virtual HAuthTicket ISteamUser_GetAuthSessionTicket(
			IntPtr pTicket,
			int cbMaxTicket,
			out uint pcbTicket) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUser _ptr is null!");
			return Native.SteamAPI_ISteamUser_GetAuthSessionTicket(_ptr, pTicket, cbMaxTicket, out pcbTicket);
		}

		public virtual BeginAuthSessionResult ISteamUser_BeginAuthSession(
			IntPtr pAuthTicket,
			int cbAuthTicket,
			ulong steamID) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUser _ptr is null!");
			return Native.SteamAPI_ISteamUser_BeginAuthSession(_ptr, pAuthTicket, cbAuthTicket, steamID);
		}

		public virtual void ISteamUser_EndAuthSession(ulong steamID) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUser _ptr is null!");
			Native.SteamAPI_ISteamUser_EndAuthSession(_ptr, steamID);
		}

		public virtual void ISteamUser_CancelAuthTicket(uint hAuthTicket) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUser _ptr is null!");
			Native.SteamAPI_ISteamUser_CancelAuthTicket(_ptr, hAuthTicket);
		}

		public virtual UserHasLicenseForAppResult ISteamUser_UserHasLicenseForApp(
			ulong steamID,
			uint appID) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUser _ptr is null!");
			return Native.SteamAPI_ISteamUser_UserHasLicenseForApp(_ptr, steamID, appID);
		}

		public virtual bool ISteamUser_BIsBehindNAT() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUser_BIsBehindNAT(_ptr)
				: throw new Exception("ISteamUser _ptr is null!");
		}

		public virtual void ISteamUser_AdvertiseGame(
			ulong steamIDGameServer,
			uint unIPServer,
			ushort usPortServer) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUser _ptr is null!");
			Native.SteamAPI_ISteamUser_AdvertiseGame(_ptr, steamIDGameServer, unIPServer, usPortServer);
		}

		public virtual SteamAPICall_t ISteamUser_RequestEncryptedAppTicket(
			IntPtr pDataToInclude,
			int cbDataToInclude) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUser _ptr is null!");
			return Native.SteamAPI_ISteamUser_RequestEncryptedAppTicket(_ptr, pDataToInclude, cbDataToInclude);
		}

		public virtual bool ISteamUser_GetEncryptedAppTicket(
			IntPtr pTicket,
			int cbMaxTicket,
			out uint pcbTicket) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUser _ptr is null!");
			return Native.SteamAPI_ISteamUser_GetEncryptedAppTicket(_ptr, pTicket, cbMaxTicket, out pcbTicket);
		}

		public virtual int ISteamUser_GetGameBadgeLevel(int nSeries, [MarshalAs(UnmanagedType.U1)] bool bFoil) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUser _ptr is null!");
			return Native.SteamAPI_ISteamUser_GetGameBadgeLevel(_ptr, nSeries, bFoil);
		}

		public virtual int ISteamUser_GetPlayerSteamLevel() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUser_GetPlayerSteamLevel(_ptr)
				: throw new Exception("ISteamUser _ptr is null!");
		}

		public virtual SteamAPICall_t ISteamUser_RequestStoreAuthURL(string pchRedirectURL) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUser_RequestStoreAuthURL(_ptr, pchRedirectURL)
				: throw new Exception("ISteamUser _ptr is null!");
		}

		public virtual bool ISteamUser_BIsPhoneVerified() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUser_BIsPhoneVerified(_ptr)
				: throw new Exception("ISteamUser _ptr is null!");
		}

		public virtual bool ISteamUser_BIsTwoFactorEnabled() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUser_BIsTwoFactorEnabled(_ptr)
				: throw new Exception("ISteamUser _ptr is null!");
		}

		public virtual bool ISteamUser_BIsPhoneIdentifying() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUser_BIsPhoneIdentifying(_ptr)
				: throw new Exception("ISteamUser _ptr is null!");
		}

		public virtual bool ISteamUser_BIsPhoneRequiringVerification() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUser_BIsPhoneRequiringVerification(_ptr)
				: throw new Exception("ISteamUser _ptr is null!");
		}

		public virtual IntPtr ISteamFriends_GetPersonaName() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_GetPersonaName(_ptr)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual SteamAPICall_t ISteamFriends_SetPersonaName(string pchPersonaName) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_SetPersonaName(_ptr, pchPersonaName)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual PersonaState ISteamFriends_GetPersonaState() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_GetPersonaState(_ptr)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual int ISteamFriends_GetFriendCount(int iFriendFlags) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_GetFriendCount(_ptr, iFriendFlags)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual CSteamID ISteamFriends_GetFriendByIndex(int iFriend, int iFriendFlags) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamFriends _ptr is null!");
			return Native.SteamAPI_ISteamFriends_GetFriendByIndex(_ptr, iFriend, iFriendFlags);
		}

		public virtual FriendRelationship ISteamFriends_GetFriendRelationship(ulong steamIDFriend) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_GetFriendRelationship(_ptr, steamIDFriend)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual PersonaState ISteamFriends_GetFriendPersonaState(ulong steamIDFriend) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_GetFriendPersonaState(_ptr, steamIDFriend)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual IntPtr ISteamFriends_GetFriendPersonaName(ulong steamIDFriend) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_GetFriendPersonaName(_ptr, steamIDFriend)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual bool ISteamFriends_GetFriendGamePlayed(
			ulong steamIDFriend,
			ref FriendGameInfo_t pFriendGameInfo) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamFriends _ptr is null!");
			return Native.SteamAPI_ISteamFriends_GetFriendGamePlayed(_ptr, steamIDFriend, ref pFriendGameInfo);
		}

		public virtual IntPtr ISteamFriends_GetFriendPersonaNameHistory(
			ulong steamIDFriend,
			int iPersonaName) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamFriends _ptr is null!");
			return Native.SteamAPI_ISteamFriends_GetFriendPersonaNameHistory(_ptr, steamIDFriend, iPersonaName);
		}

		public virtual int ISteamFriends_GetFriendSteamLevel(ulong steamIDFriend) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_GetFriendSteamLevel(_ptr, steamIDFriend)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual IntPtr ISteamFriends_GetPlayerNickname(ulong steamIDPlayer) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_GetPlayerNickname(_ptr, steamIDPlayer)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual int ISteamFriends_GetFriendsGroupCount() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_GetFriendsGroupCount(_ptr)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual FriendsGroupID_t ISteamFriends_GetFriendsGroupIDByIndex(int iFG) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_GetFriendsGroupIDByIndex(_ptr, iFG)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual IntPtr ISteamFriends_GetFriendsGroupName(short friendsGroupID) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_GetFriendsGroupName(_ptr, friendsGroupID)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual int ISteamFriends_GetFriendsGroupMembersCount(short friendsGroupID) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_GetFriendsGroupMembersCount(_ptr, friendsGroupID)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual void ISteamFriends_GetFriendsGroupMembersList(
			short friendsGroupID,
			IntPtr pOutSteamIDMembers,
			int nMembersCount) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamFriends _ptr is null!");
			Native.SteamAPI_ISteamFriends_GetFriendsGroupMembersList(_ptr, friendsGroupID, pOutSteamIDMembers,
				nMembersCount);
		}

		public virtual bool ISteamFriends_HasFriend(ulong steamIDFriend, int iFriendFlags) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamFriends _ptr is null!");
			return Native.SteamAPI_ISteamFriends_HasFriend(_ptr, steamIDFriend, iFriendFlags);
		}

		public virtual int ISteamFriends_GetClanCount() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_GetClanCount(_ptr)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual CSteamID ISteamFriends_GetClanByIndex(int iClan) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_GetClanByIndex(_ptr, iClan)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual IntPtr ISteamFriends_GetClanName(ulong steamIDClan) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_GetClanName(_ptr, steamIDClan)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual IntPtr ISteamFriends_GetClanTag(ulong steamIDClan) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_GetClanTag(_ptr, steamIDClan)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual bool ISteamFriends_GetClanActivityCounts(
			ulong steamIDClan,
			out int pnOnline,
			out int pnInGame,
			out int pnChatting) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_GetClanActivityCounts(_ptr, steamIDClan, out pnOnline, out pnInGame,
					out pnChatting)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual SteamAPICall_t ISteamFriends_DownloadClanActivityCounts(
			IntPtr psteamIDClans,
			int cClansToRequest) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamFriends _ptr is null!");
			return Native.SteamAPI_ISteamFriends_DownloadClanActivityCounts(_ptr, psteamIDClans, cClansToRequest);
		}

		public virtual int ISteamFriends_GetFriendCountFromSource(ulong steamIDSource) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_GetFriendCountFromSource(_ptr, steamIDSource)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual CSteamID ISteamFriends_GetFriendFromSourceByIndex(
			ulong steamIDSource,
			int iFriend) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamFriends _ptr is null!");
			return Native.SteamAPI_ISteamFriends_GetFriendFromSourceByIndex(_ptr, steamIDSource, iFriend);
		}

		public virtual bool ISteamFriends_IsUserInSource(ulong steamIDUser, ulong steamIDSource) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamFriends _ptr is null!");
			return Native.SteamAPI_ISteamFriends_IsUserInSource(_ptr, steamIDUser, steamIDSource);
		}

		public virtual void ISteamFriends_SetInGameVoiceSpeaking(ulong steamIDUser,
			[MarshalAs(UnmanagedType.U1)] bool bSpeaking) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamFriends _ptr is null!");
			Native.SteamAPI_ISteamFriends_SetInGameVoiceSpeaking(_ptr, steamIDUser, bSpeaking);
		}

		public virtual void ISteamFriends_ActivateGameOverlay(string pchDialog) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamFriends _ptr is null!");
			Native.SteamAPI_ISteamFriends_ActivateGameOverlay(_ptr, pchDialog);
		}

		public virtual void ISteamFriends_ActivateGameOverlayToUser(string pchDialog, ulong steamID) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamFriends _ptr is null!");
			Native.SteamAPI_ISteamFriends_ActivateGameOverlayToUser(_ptr, pchDialog, steamID);
		}

		public virtual void ISteamFriends_ActivateGameOverlayToWebPage(string pchURL) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamFriends _ptr is null!");
			Native.SteamAPI_ISteamFriends_ActivateGameOverlayToWebPage(_ptr, pchURL);
		}

		public virtual void ISteamFriends_ActivateGameOverlayToStore(
			uint nAppID,
			OverlayToStoreFlag eFlag) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamFriends _ptr is null!");
			Native.SteamAPI_ISteamFriends_ActivateGameOverlayToStore(_ptr, nAppID, eFlag);
		}

		public virtual void ISteamFriends_SetPlayedWith(ulong steamIDUserPlayedWith) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamFriends _ptr is null!");
			Native.SteamAPI_ISteamFriends_SetPlayedWith(_ptr, steamIDUserPlayedWith);
		}

		public virtual void ISteamFriends_ActivateGameOverlayInviteDialog(ulong steamIDLobby) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamFriends _ptr is null!");
			Native.SteamAPI_ISteamFriends_ActivateGameOverlayInviteDialog(_ptr, steamIDLobby);
		}

		public virtual int ISteamFriends_GetSmallFriendAvatar(ulong steamIDFriend) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_GetSmallFriendAvatar(_ptr, steamIDFriend)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual int ISteamFriends_GetMediumFriendAvatar(ulong steamIDFriend) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_GetMediumFriendAvatar(_ptr, steamIDFriend)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual int ISteamFriends_GetLargeFriendAvatar(ulong steamIDFriend) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_GetLargeFriendAvatar(_ptr, steamIDFriend)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual bool ISteamFriends_RequestUserInformation(
			ulong steamIDUser,
			[MarshalAs(UnmanagedType.U1)] bool bRequireNameOnly) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamFriends _ptr is null!");
			return Native.SteamAPI_ISteamFriends_RequestUserInformation(_ptr, steamIDUser, bRequireNameOnly);
		}

		public virtual SteamAPICall_t ISteamFriends_RequestClanOfficerList(ulong steamIDClan) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_RequestClanOfficerList(_ptr, steamIDClan)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual CSteamID ISteamFriends_GetClanOwner(ulong steamIDClan) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_GetClanOwner(_ptr, steamIDClan)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual int ISteamFriends_GetClanOfficerCount(ulong steamIDClan) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_GetClanOfficerCount(_ptr, steamIDClan)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual CSteamID ISteamFriends_GetClanOfficerByIndex(ulong steamIDClan, int iOfficer) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamFriends _ptr is null!");
			return Native.SteamAPI_ISteamFriends_GetClanOfficerByIndex(_ptr, steamIDClan, iOfficer);
		}

		public virtual uint ISteamFriends_GetUserRestrictions() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_GetUserRestrictions(_ptr)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual bool ISteamFriends_SetRichPresence(string pchKey, string pchValue) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamFriends _ptr is null!");
			return Native.SteamAPI_ISteamFriends_SetRichPresence(_ptr, pchKey, pchValue);
		}

		public virtual void ISteamFriends_ClearRichPresence() {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamFriends _ptr is null!");
			Native.SteamAPI_ISteamFriends_ClearRichPresence(_ptr);
		}

		public virtual IntPtr ISteamFriends_GetFriendRichPresence(ulong steamIDFriend, string pchKey) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamFriends _ptr is null!");
			return Native.SteamAPI_ISteamFriends_GetFriendRichPresence(_ptr, steamIDFriend, pchKey);
		}

		public virtual int ISteamFriends_GetFriendRichPresenceKeyCount(ulong steamIDFriend) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_GetFriendRichPresenceKeyCount(_ptr, steamIDFriend)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual IntPtr ISteamFriends_GetFriendRichPresenceKeyByIndex(
			ulong steamIDFriend,
			int iKey) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamFriends _ptr is null!");
			return Native.SteamAPI_ISteamFriends_GetFriendRichPresenceKeyByIndex(_ptr, steamIDFriend, iKey);
		}

		public virtual void ISteamFriends_RequestFriendRichPresence(ulong steamIDFriend) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamFriends _ptr is null!");
			Native.SteamAPI_ISteamFriends_RequestFriendRichPresence(_ptr, steamIDFriend);
		}

		public virtual bool ISteamFriends_InviteUserToGame(
			ulong steamIDFriend,
			string pchConnectString) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamFriends _ptr is null!");
			return Native.SteamAPI_ISteamFriends_InviteUserToGame(_ptr, steamIDFriend, pchConnectString);
		}

		public virtual int ISteamFriends_GetCoplayFriendCount() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_GetCoplayFriendCount(_ptr)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual CSteamID ISteamFriends_GetCoplayFriend(int iCoplayFriend) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_GetCoplayFriend(_ptr, iCoplayFriend)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual int ISteamFriends_GetFriendCoplayTime(ulong steamIDFriend) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_GetFriendCoplayTime(_ptr, steamIDFriend)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual AppId_t ISteamFriends_GetFriendCoplayGame(ulong steamIDFriend) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_GetFriendCoplayGame(_ptr, steamIDFriend)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual SteamAPICall_t ISteamFriends_JoinClanChatRoom(ulong steamIDClan) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_JoinClanChatRoom(_ptr, steamIDClan)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual bool ISteamFriends_LeaveClanChatRoom(ulong steamIDClan) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_LeaveClanChatRoom(_ptr, steamIDClan)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual int ISteamFriends_GetClanChatMemberCount(ulong steamIDClan) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_GetClanChatMemberCount(_ptr, steamIDClan)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual CSteamID ISteamFriends_GetChatMemberByIndex(ulong steamIDClan, int iUser) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamFriends _ptr is null!");
			return Native.SteamAPI_ISteamFriends_GetChatMemberByIndex(_ptr, steamIDClan, iUser);
		}

		public virtual bool ISteamFriends_SendClanChatMessage(ulong steamIDClanChat, string pchText) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamFriends _ptr is null!");
			return Native.SteamAPI_ISteamFriends_SendClanChatMessage(_ptr, steamIDClanChat, pchText);
		}

		public virtual int ISteamFriends_GetClanChatMessage(
			ulong steamIDClanChat,
			int iMessage,
			IntPtr prgchText,
			int cchTextMax,
			out ChatEntryType peChatEntryType,
			out ulong psteamidChatter) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamFriends _ptr is null!");
			return Native.SteamAPI_ISteamFriends_GetClanChatMessage(_ptr, steamIDClanChat, iMessage, prgchText,
				cchTextMax, out peChatEntryType, out psteamidChatter);
		}

		public virtual bool ISteamFriends_IsClanChatAdmin(ulong steamIDClanChat, ulong steamIDUser) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamFriends _ptr is null!");
			return Native.SteamAPI_ISteamFriends_IsClanChatAdmin(_ptr, steamIDClanChat, steamIDUser);
		}

		public virtual bool ISteamFriends_IsClanChatWindowOpenInSteam(ulong steamIDClanChat) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_IsClanChatWindowOpenInSteam(_ptr, steamIDClanChat)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual bool ISteamFriends_OpenClanChatWindowInSteam(ulong steamIDClanChat) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_OpenClanChatWindowInSteam(_ptr, steamIDClanChat)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual bool ISteamFriends_CloseClanChatWindowInSteam(ulong steamIDClanChat) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_CloseClanChatWindowInSteam(_ptr, steamIDClanChat)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual bool ISteamFriends_SetListenForFriendsMessages(
			[MarshalAs(UnmanagedType.U1)] bool bInterceptEnabled) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_SetListenForFriendsMessages(_ptr, bInterceptEnabled)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual bool ISteamFriends_ReplyToFriendMessage(
			ulong steamIDFriend,
			string pchMsgToSend) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamFriends _ptr is null!");
			return Native.SteamAPI_ISteamFriends_ReplyToFriendMessage(_ptr, steamIDFriend, pchMsgToSend);
		}

		public virtual int ISteamFriends_GetFriendMessage(
			ulong steamIDFriend,
			int iMessageID,
			IntPtr pvData,
			int cubData,
			out ChatEntryType peChatEntryType) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamFriends _ptr is null!");
			return Native.SteamAPI_ISteamFriends_GetFriendMessage(_ptr, steamIDFriend, iMessageID, pvData, cubData,
				out peChatEntryType);
		}

		public virtual SteamAPICall_t ISteamFriends_GetFollowerCount(ulong steamID) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_GetFollowerCount(_ptr, steamID)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual SteamAPICall_t ISteamFriends_IsFollowing(ulong steamID) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_IsFollowing(_ptr, steamID)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual SteamAPICall_t ISteamFriends_EnumerateFollowingList(uint unStartIndex) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamFriends_EnumerateFollowingList(_ptr, unStartIndex)
				: throw new Exception("ISteamFriends _ptr is null!");
		}

		public virtual uint ISteamUtils_GetSecondsSinceAppActive() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUtils_GetSecondsSinceAppActive(_ptr)
				: throw new Exception("ISteamUtils _ptr is null!");
		}

		public virtual uint ISteamUtils_GetSecondsSinceComputerActive() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUtils_GetSecondsSinceComputerActive(_ptr)
				: throw new Exception("ISteamUtils _ptr is null!");
		}

		public virtual Universe ISteamUtils_GetConnectedUniverse() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUtils_GetConnectedUniverse(_ptr)
				: throw new Exception("ISteamUtils _ptr is null!");
		}

		public virtual uint ISteamUtils_GetServerRealTime() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUtils_GetServerRealTime(_ptr)
				: throw new Exception("ISteamUtils _ptr is null!");
		}

		public virtual IntPtr ISteamUtils_GetIPCountry() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUtils_GetIPCountry(_ptr)
				: throw new Exception("ISteamUtils _ptr is null!");
		}

		public virtual bool ISteamUtils_GetImageSize(int iImage, out uint pnWidth, out uint pnHeight) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUtils_GetImageSize(_ptr, iImage, out pnWidth, out pnHeight)
				: throw new Exception("ISteamUtils _ptr is null!");
		}

		public virtual bool ISteamUtils_GetImageRGBA(int iImage, IntPtr pubDest, int nDestBufferSize) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUtils _ptr is null!");
			return Native.SteamAPI_ISteamUtils_GetImageRGBA(_ptr, iImage, pubDest, nDestBufferSize);
		}

		public virtual bool ISteamUtils_GetCSERIPPort(out uint unIP, out ushort usPort) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUtils_GetCSERIPPort(_ptr, out unIP, out usPort)
				: throw new Exception("ISteamUtils _ptr is null!");
		}

		public virtual byte ISteamUtils_GetCurrentBatteryPower() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUtils_GetCurrentBatteryPower(_ptr)
				: throw new Exception("ISteamUtils _ptr is null!");
		}

		public virtual uint ISteamUtils_GetAppID() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUtils_GetAppID(_ptr)
				: throw new Exception("ISteamUtils _ptr is null!");
		}

		public virtual void ISteamUtils_SetOverlayNotificationPosition(
			NotificationPosition eNotificationPosition) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUtils _ptr is null!");
			Native.SteamAPI_ISteamUtils_SetOverlayNotificationPosition(_ptr, eNotificationPosition);
		}

		public virtual bool ISteamUtils_IsAPICallCompleted(ulong hSteamAPICall,
			[MarshalAs(UnmanagedType.U1)] ref bool pbFailed) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUtils _ptr is null!");
			return Native.SteamAPI_ISteamUtils_IsAPICallCompleted(_ptr, hSteamAPICall, ref pbFailed);
		}

		public virtual SteamAPICallFailure ISteamUtils_GetAPICallFailureReason(ulong hSteamAPICall) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUtils_GetAPICallFailureReason(_ptr, hSteamAPICall)
				: throw new Exception("ISteamUtils _ptr is null!");
		}

		public virtual bool ISteamUtils_GetAPICallResult(
			ulong hSteamAPICall,
			IntPtr pCallback,
			int cubCallback,
			int iCallbackExpected,
			[MarshalAs(UnmanagedType.U1)] ref bool pbFailed) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUtils _ptr is null!");
			return Native.SteamAPI_ISteamUtils_GetAPICallResult(_ptr, hSteamAPICall, pCallback, cubCallback,
				iCallbackExpected, ref pbFailed);
		}

		public virtual uint ISteamUtils_GetIPCCallCount() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUtils_GetIPCCallCount(_ptr)
				: throw new Exception("ISteamUtils _ptr is null!");
		}

		public virtual void ISteamUtils_SetWarningMessageHook(IntPtr pFunction) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUtils _ptr is null!");
			Native.SteamAPI_ISteamUtils_SetWarningMessageHook(_ptr, pFunction);
		}

		public virtual bool ISteamUtils_IsOverlayEnabled() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUtils_IsOverlayEnabled(_ptr)
				: throw new Exception("ISteamUtils _ptr is null!");
		}

		public virtual bool ISteamUtils_BOverlayNeedsPresent() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUtils_BOverlayNeedsPresent(_ptr)
				: throw new Exception("ISteamUtils _ptr is null!");
		}

		public virtual SteamAPICall_t ISteamUtils_CheckFileSignature(string szFileName) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUtils_CheckFileSignature(_ptr, szFileName)
				: throw new Exception("ISteamUtils _ptr is null!");
		}

		public virtual bool ISteamUtils_ShowGamepadTextInput(
			GamepadTextInputMode eInputMode,
			GamepadTextInputLineMode eLineInputMode,
			string pchDescription,
			uint unCharMax,
			string pchExistingText) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUtils _ptr is null!");
			return Native.SteamAPI_ISteamUtils_ShowGamepadTextInput(_ptr, eInputMode, eLineInputMode, pchDescription,
				unCharMax, pchExistingText);
		}

		public virtual uint ISteamUtils_GetEnteredGamepadTextLength() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUtils_GetEnteredGamepadTextLength(_ptr)
				: throw new Exception("ISteamUtils _ptr is null!");
		}

		public virtual bool ISteamUtils_GetEnteredGamepadTextInput(
			StringBuilder pchText,
			uint cchText) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUtils _ptr is null!");
			return Native.SteamAPI_ISteamUtils_GetEnteredGamepadTextInput(_ptr, pchText, cchText);
		}

		public virtual IntPtr ISteamUtils_GetSteamUILanguage() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUtils_GetSteamUILanguage(_ptr)
				: throw new Exception("ISteamUtils _ptr is null!");
		}

		public virtual bool ISteamUtils_IsSteamRunningInVR() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUtils_IsSteamRunningInVR(_ptr)
				: throw new Exception("ISteamUtils _ptr is null!");
		}

		public virtual void ISteamUtils_SetOverlayNotificationInset(
			int nHorizontalInset,
			int nVerticalInset) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUtils _ptr is null!");
			Native.SteamAPI_ISteamUtils_SetOverlayNotificationInset(_ptr, nHorizontalInset, nVerticalInset);
		}

		public virtual bool ISteamUtils_IsSteamInBigPictureMode() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUtils_IsSteamInBigPictureMode(_ptr)
				: throw new Exception("ISteamUtils _ptr is null!");
		}

		public virtual void ISteamUtils_StartVRDashboard() {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUtils _ptr is null!");
			Native.SteamAPI_ISteamUtils_StartVRDashboard(_ptr);
		}

		public virtual bool ISteamUtils_IsVRHeadsetStreamingEnabled() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUtils_IsVRHeadsetStreamingEnabled(_ptr)
				: throw new Exception("ISteamUtils _ptr is null!");
		}

		public virtual void ISteamUtils_SetVRHeadsetStreamingEnabled([MarshalAs(UnmanagedType.U1)] bool bEnabled) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUtils _ptr is null!");
			Native.SteamAPI_ISteamUtils_SetVRHeadsetStreamingEnabled(_ptr, bEnabled);
		}

		public virtual int ISteamMatchmaking_GetFavoriteGameCount() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMatchmaking_GetFavoriteGameCount(_ptr)
				: throw new Exception("ISteamMatchmaking _ptr is null!");
		}

		public virtual bool ISteamMatchmaking_GetFavoriteGame(
			int iGame,
			ref uint pnAppID,
			out uint pnIP,
			out ushort pnConnPort,
			out ushort pnQueryPort,
			out uint punFlags,
			out uint pRTime32LastPlayedOnServer) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmaking _ptr is null!");
			return Native.SteamAPI_ISteamMatchmaking_GetFavoriteGame(_ptr, iGame, ref pnAppID, out pnIP, out pnConnPort,
				out pnQueryPort, out punFlags, out pRTime32LastPlayedOnServer);
		}

		public virtual int ISteamMatchmaking_AddFavoriteGame(
			uint nAppID,
			uint nIP,
			ushort nConnPort,
			ushort nQueryPort,
			uint unFlags,
			uint rTime32LastPlayedOnServer) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmaking _ptr is null!");
			return Native.SteamAPI_ISteamMatchmaking_AddFavoriteGame(_ptr, nAppID, nIP, nConnPort, nQueryPort, unFlags,
				rTime32LastPlayedOnServer);
		}

		public virtual bool ISteamMatchmaking_RemoveFavoriteGame(
			uint nAppID,
			uint nIP,
			ushort nConnPort,
			ushort nQueryPort,
			uint unFlags) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmaking _ptr is null!");
			return Native.SteamAPI_ISteamMatchmaking_RemoveFavoriteGame(_ptr, nAppID, nIP, nConnPort, nQueryPort,
				unFlags);
		}

		public virtual SteamAPICall_t ISteamMatchmaking_RequestLobbyList() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMatchmaking_RequestLobbyList(_ptr)
				: throw new Exception("ISteamMatchmaking _ptr is null!");
		}

		public virtual void ISteamMatchmaking_AddRequestLobbyListStringFilter(
			string pchKeyToMatch,
			string pchValueToMatch,
			LobbyComparison eComparisonType) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmaking _ptr is null!");
			Native.SteamAPI_ISteamMatchmaking_AddRequestLobbyListStringFilter(_ptr, pchKeyToMatch, pchValueToMatch,
				eComparisonType);
		}

		public virtual void ISteamMatchmaking_AddRequestLobbyListNumericalFilter(
			string pchKeyToMatch,
			int nValueToMatch,
			LobbyComparison eComparisonType) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmaking _ptr is null!");
			Native.SteamAPI_ISteamMatchmaking_AddRequestLobbyListNumericalFilter(_ptr, pchKeyToMatch, nValueToMatch,
				eComparisonType);
		}

		public virtual void ISteamMatchmaking_AddRequestLobbyListNearValueFilter(
			string pchKeyToMatch,
			int nValueToBeCloseTo) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmaking _ptr is null!");
			Native.SteamAPI_ISteamMatchmaking_AddRequestLobbyListNearValueFilter(_ptr, pchKeyToMatch,
				nValueToBeCloseTo);
		}

		public virtual void ISteamMatchmaking_AddRequestLobbyListFilterSlotsAvailable(
			int nSlotsAvailable) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmaking _ptr is null!");
			Native.SteamAPI_ISteamMatchmaking_AddRequestLobbyListFilterSlotsAvailable(_ptr, nSlotsAvailable);
		}

		public virtual void ISteamMatchmaking_AddRequestLobbyListDistanceFilter(
			LobbyDistanceFilter eLobbyDistanceFilter) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmaking _ptr is null!");
			Native.SteamAPI_ISteamMatchmaking_AddRequestLobbyListDistanceFilter(_ptr, eLobbyDistanceFilter);
		}

		public virtual void ISteamMatchmaking_AddRequestLobbyListResultCountFilter(int cMaxResults) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmaking _ptr is null!");
			Native.SteamAPI_ISteamMatchmaking_AddRequestLobbyListResultCountFilter(_ptr, cMaxResults);
		}

		public virtual void ISteamMatchmaking_AddRequestLobbyListCompatibleMembersFilter(
			ulong steamIDLobby) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmaking _ptr is null!");
			Native.SteamAPI_ISteamMatchmaking_AddRequestLobbyListCompatibleMembersFilter(_ptr, steamIDLobby);
		}

		public virtual CSteamID ISteamMatchmaking_GetLobbyByIndex(int iLobby) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMatchmaking_GetLobbyByIndex(_ptr, iLobby)
				: throw new Exception("ISteamMatchmaking _ptr is null!");
		}

		public virtual SteamAPICall_t ISteamMatchmaking_CreateLobby(
			LobbyType eLobbyType,
			int cMaxMembers) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmaking _ptr is null!");
			return Native.SteamAPI_ISteamMatchmaking_CreateLobby(_ptr, eLobbyType, cMaxMembers);
		}

		public virtual SteamAPICall_t ISteamMatchmaking_JoinLobby(ulong steamIDLobby) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMatchmaking_JoinLobby(_ptr, steamIDLobby)
				: throw new Exception("ISteamMatchmaking _ptr is null!");
		}

		public virtual void ISteamMatchmaking_LeaveLobby(ulong steamIDLobby) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmaking _ptr is null!");
			Native.SteamAPI_ISteamMatchmaking_LeaveLobby(_ptr, steamIDLobby);
		}

		public virtual bool ISteamMatchmaking_InviteUserToLobby(
			ulong steamIDLobby,
			ulong steamIDInvitee) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmaking _ptr is null!");
			return Native.SteamAPI_ISteamMatchmaking_InviteUserToLobby(_ptr, steamIDLobby, steamIDInvitee);
		}

		public virtual int ISteamMatchmaking_GetNumLobbyMembers(ulong steamIDLobby) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMatchmaking_GetNumLobbyMembers(_ptr, steamIDLobby)
				: throw new Exception("ISteamMatchmaking _ptr is null!");
		}

		public virtual CSteamID ISteamMatchmaking_GetLobbyMemberByIndex(
			ulong steamIDLobby,
			int iMember) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmaking _ptr is null!");
			return Native.SteamAPI_ISteamMatchmaking_GetLobbyMemberByIndex(_ptr, steamIDLobby, iMember);
		}

		public virtual IntPtr ISteamMatchmaking_GetLobbyData(ulong steamIDLobby, string pchKey) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmaking _ptr is null!");
			return Native.SteamAPI_ISteamMatchmaking_GetLobbyData(_ptr, steamIDLobby, pchKey);
		}

		public virtual bool ISteamMatchmaking_SetLobbyData(
			ulong steamIDLobby,
			string pchKey,
			string pchValue) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmaking _ptr is null!");
			return Native.SteamAPI_ISteamMatchmaking_SetLobbyData(_ptr, steamIDLobby, pchKey, pchValue);
		}

		public virtual int ISteamMatchmaking_GetLobbyDataCount(ulong steamIDLobby) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMatchmaking_GetLobbyDataCount(_ptr, steamIDLobby)
				: throw new Exception("ISteamMatchmaking _ptr is null!");
		}

		public virtual bool ISteamMatchmaking_GetLobbyDataByIndex(
			ulong steamIDLobby,
			int iLobbyData,
			StringBuilder pchKey,
			int cchKeyBufferSize,
			StringBuilder pchValue,
			int cchValueBufferSize) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmaking _ptr is null!");
			return Native.SteamAPI_ISteamMatchmaking_GetLobbyDataByIndex(_ptr, steamIDLobby, iLobbyData, pchKey,
				cchKeyBufferSize, pchValue, cchValueBufferSize);
		}

		public virtual bool ISteamMatchmaking_DeleteLobbyData(ulong steamIDLobby, string pchKey) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmaking _ptr is null!");
			return Native.SteamAPI_ISteamMatchmaking_DeleteLobbyData(_ptr, steamIDLobby, pchKey);
		}

		public virtual IntPtr ISteamMatchmaking_GetLobbyMemberData(
			ulong steamIDLobby,
			ulong steamIDUser,
			string pchKey) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmaking _ptr is null!");
			return Native.SteamAPI_ISteamMatchmaking_GetLobbyMemberData(_ptr, steamIDLobby, steamIDUser, pchKey);
		}

		public virtual void ISteamMatchmaking_SetLobbyMemberData(
			ulong steamIDLobby,
			string pchKey,
			string pchValue) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmaking _ptr is null!");
			Native.SteamAPI_ISteamMatchmaking_SetLobbyMemberData(_ptr, steamIDLobby, pchKey, pchValue);
		}

		public virtual bool ISteamMatchmaking_SendLobbyChatMsg(
			ulong steamIDLobby,
			IntPtr pvMsgBody,
			int cubMsgBody) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmaking _ptr is null!");
			return Native.SteamAPI_ISteamMatchmaking_SendLobbyChatMsg(_ptr, steamIDLobby, pvMsgBody, cubMsgBody);
		}

		public virtual int ISteamMatchmaking_GetLobbyChatEntry(
			ulong steamIDLobby,
			int iChatID,
			out ulong pSteamIDUser,
			IntPtr pvData,
			int cubData,
			out ChatEntryType peChatEntryType) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmaking _ptr is null!");
			return Native.SteamAPI_ISteamMatchmaking_GetLobbyChatEntry(_ptr, steamIDLobby, iChatID, out pSteamIDUser,
				pvData, cubData, out peChatEntryType);
		}

		public virtual bool ISteamMatchmaking_RequestLobbyData(ulong steamIDLobby) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMatchmaking_RequestLobbyData(_ptr, steamIDLobby)
				: throw new Exception("ISteamMatchmaking _ptr is null!");
		}

		public virtual void ISteamMatchmaking_SetLobbyGameServer(
			ulong steamIDLobby,
			uint unGameServerIP,
			ushort unGameServerPort,
			ulong steamIDGameServer) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmaking _ptr is null!");
			Native.SteamAPI_ISteamMatchmaking_SetLobbyGameServer(_ptr, steamIDLobby, unGameServerIP, unGameServerPort,
				steamIDGameServer);
		}

		public virtual bool ISteamMatchmaking_GetLobbyGameServer(
			ulong steamIDLobby,
			out uint punGameServerIP,
			out ushort punGameServerPort,
			out ulong psteamIDGameServer) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMatchmaking_GetLobbyGameServer(_ptr, steamIDLobby, out punGameServerIP,
					out punGameServerPort, out psteamIDGameServer)
				: throw new Exception("ISteamMatchmaking _ptr is null!");
		}

		public virtual bool ISteamMatchmaking_SetLobbyMemberLimit(ulong steamIDLobby, int cMaxMembers) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmaking _ptr is null!");
			return Native.SteamAPI_ISteamMatchmaking_SetLobbyMemberLimit(_ptr, steamIDLobby, cMaxMembers);
		}

		public virtual int ISteamMatchmaking_GetLobbyMemberLimit(ulong steamIDLobby) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMatchmaking_GetLobbyMemberLimit(_ptr, steamIDLobby)
				: throw new Exception("ISteamMatchmaking _ptr is null!");
		}

		public virtual bool ISteamMatchmaking_SetLobbyType(ulong steamIDLobby, LobbyType eLobbyType) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmaking _ptr is null!");
			return Native.SteamAPI_ISteamMatchmaking_SetLobbyType(_ptr, steamIDLobby, eLobbyType);
		}

		public virtual bool ISteamMatchmaking_SetLobbyJoinable(
			ulong steamIDLobby,
			[MarshalAs(UnmanagedType.U1)] bool bLobbyJoinable) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmaking _ptr is null!");
			return Native.SteamAPI_ISteamMatchmaking_SetLobbyJoinable(_ptr, steamIDLobby, bLobbyJoinable);
		}

		public virtual CSteamID ISteamMatchmaking_GetLobbyOwner(ulong steamIDLobby) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMatchmaking_GetLobbyOwner(_ptr, steamIDLobby)
				: throw new Exception("ISteamMatchmaking _ptr is null!");
		}

		public virtual bool ISteamMatchmaking_SetLobbyOwner(ulong steamIDLobby, ulong steamIDNewOwner) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmaking _ptr is null!");
			return Native.SteamAPI_ISteamMatchmaking_SetLobbyOwner(_ptr, steamIDLobby, steamIDNewOwner);
		}

		public virtual bool ISteamMatchmaking_SetLinkedLobby(
			ulong steamIDLobby,
			ulong steamIDLobbyDependent) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmaking _ptr is null!");
			return Native.SteamAPI_ISteamMatchmaking_SetLinkedLobby(_ptr, steamIDLobby, steamIDLobbyDependent);
		}

		public virtual HServerListRequest ISteamMatchmakingServers_RequestInternetServerList(
			uint iApp,
			IntPtr ppchFilters,
			uint nFilters,
			IntPtr pRequestServersResponse) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmakingServers _ptr is null!");
			return Native.SteamAPI_ISteamMatchmakingServers_RequestInternetServerList(_ptr, iApp, ppchFilters, nFilters,
				pRequestServersResponse);
		}

		public virtual HServerListRequest ISteamMatchmakingServers_RequestLANServerList(
			uint iApp,
			IntPtr pRequestServersResponse) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmakingServers _ptr is null!");
			return Native.SteamAPI_ISteamMatchmakingServers_RequestLANServerList(_ptr, iApp, pRequestServersResponse);
		}

		public virtual HServerListRequest ISteamMatchmakingServers_RequestFriendsServerList(
			uint iApp,
			IntPtr ppchFilters,
			uint nFilters,
			IntPtr pRequestServersResponse) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmakingServers _ptr is null!");
			return Native.SteamAPI_ISteamMatchmakingServers_RequestFriendsServerList(_ptr, iApp, ppchFilters, nFilters,
				pRequestServersResponse);
		}

		public virtual HServerListRequest ISteamMatchmakingServers_RequestFavoritesServerList(
			uint iApp,
			IntPtr ppchFilters,
			uint nFilters,
			IntPtr pRequestServersResponse) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmakingServers _ptr is null!");
			return Native.SteamAPI_ISteamMatchmakingServers_RequestFavoritesServerList(_ptr, iApp, ppchFilters,
				nFilters, pRequestServersResponse);
		}

		public virtual HServerListRequest ISteamMatchmakingServers_RequestHistoryServerList(
			uint iApp,
			IntPtr ppchFilters,
			uint nFilters,
			IntPtr pRequestServersResponse) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmakingServers _ptr is null!");
			return Native.SteamAPI_ISteamMatchmakingServers_RequestHistoryServerList(_ptr, iApp, ppchFilters, nFilters,
				pRequestServersResponse);
		}

		public virtual HServerListRequest ISteamMatchmakingServers_RequestSpectatorServerList(
			uint iApp,
			IntPtr ppchFilters,
			uint nFilters,
			IntPtr pRequestServersResponse) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmakingServers _ptr is null!");
			return Native.SteamAPI_ISteamMatchmakingServers_RequestSpectatorServerList(_ptr, iApp, ppchFilters,
				nFilters, pRequestServersResponse);
		}

		public virtual void ISteamMatchmakingServers_ReleaseRequest(IntPtr hServerListRequest) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmakingServers _ptr is null!");
			Native.SteamAPI_ISteamMatchmakingServers_ReleaseRequest(_ptr, hServerListRequest);
		}

		public virtual IntPtr ISteamMatchmakingServers_GetServerDetails(IntPtr hRequest, int iServer) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmakingServers _ptr is null!");
			return Native.SteamAPI_ISteamMatchmakingServers_GetServerDetails(_ptr, hRequest, iServer);
		}

		public virtual void ISteamMatchmakingServers_CancelQuery(IntPtr hRequest) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmakingServers _ptr is null!");
			Native.SteamAPI_ISteamMatchmakingServers_CancelQuery(_ptr, hRequest);
		}

		public virtual void ISteamMatchmakingServers_RefreshQuery(IntPtr hRequest) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmakingServers _ptr is null!");
			Native.SteamAPI_ISteamMatchmakingServers_RefreshQuery(_ptr, hRequest);
		}

		public virtual bool ISteamMatchmakingServers_IsRefreshing(IntPtr hRequest) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMatchmakingServers_IsRefreshing(_ptr, hRequest)
				: throw new Exception("ISteamMatchmakingServers _ptr is null!");
		}

		public virtual int ISteamMatchmakingServers_GetServerCount(IntPtr hRequest) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMatchmakingServers_GetServerCount(_ptr, hRequest)
				: throw new Exception("ISteamMatchmakingServers _ptr is null!");
		}

		public virtual void ISteamMatchmakingServers_RefreshServer(IntPtr hRequest, int iServer) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmakingServers _ptr is null!");
			Native.SteamAPI_ISteamMatchmakingServers_RefreshServer(_ptr, hRequest, iServer);
		}

		public virtual HServerQuery ISteamMatchmakingServers_PingServer(
			uint unIP,
			ushort usPort,
			IntPtr pRequestServersResponse) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmakingServers _ptr is null!");
			return Native.SteamAPI_ISteamMatchmakingServers_PingServer(_ptr, unIP, usPort, pRequestServersResponse);
		}

		public virtual HServerQuery ISteamMatchmakingServers_PlayerDetails(
			uint unIP,
			ushort usPort,
			IntPtr pRequestServersResponse) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmakingServers _ptr is null!");
			return Native.SteamAPI_ISteamMatchmakingServers_PlayerDetails(_ptr, unIP, usPort, pRequestServersResponse);
		}

		public virtual HServerQuery ISteamMatchmakingServers_ServerRules(
			uint unIP,
			ushort usPort,
			IntPtr pRequestServersResponse) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmakingServers _ptr is null!");
			return Native.SteamAPI_ISteamMatchmakingServers_ServerRules(_ptr, unIP, usPort, pRequestServersResponse);
		}

		public virtual void ISteamMatchmakingServers_CancelServerQuery(int hServerQuery) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMatchmakingServers _ptr is null!");
			Native.SteamAPI_ISteamMatchmakingServers_CancelServerQuery(_ptr, hServerQuery);
		}

		public virtual bool ISteamRemoteStorage_FileWrite(string pchFile, IntPtr pvData, int cubData) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamRemoteStorage _ptr is null!");
			return Native.SteamAPI_ISteamRemoteStorage_FileWrite(_ptr, pchFile, pvData, cubData);
		}

		public virtual int ISteamRemoteStorage_FileRead(
			string pchFile,
			IntPtr pvData,
			int cubDataToRead) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamRemoteStorage _ptr is null!");
			return Native.SteamAPI_ISteamRemoteStorage_FileRead(_ptr, pchFile, pvData, cubDataToRead);
		}

		public virtual SteamAPICall_t ISteamRemoteStorage_FileWriteAsync(
			string pchFile,
			IntPtr pvData,
			uint cubData) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamRemoteStorage _ptr is null!");
			return Native.SteamAPI_ISteamRemoteStorage_FileWriteAsync(_ptr, pchFile, pvData, cubData);
		}

		public virtual SteamAPICall_t ISteamRemoteStorage_FileReadAsync(
			string pchFile,
			uint nOffset,
			uint cubToRead) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamRemoteStorage _ptr is null!");
			return Native.SteamAPI_ISteamRemoteStorage_FileReadAsync(_ptr, pchFile, nOffset, cubToRead);
		}

		public virtual bool ISteamRemoteStorage_FileReadAsyncComplete(
			ulong hReadCall,
			IntPtr pvBuffer,
			uint cubToRead) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamRemoteStorage _ptr is null!");
			return Native.SteamAPI_ISteamRemoteStorage_FileReadAsyncComplete(_ptr, hReadCall, pvBuffer, cubToRead);
		}

		public virtual bool ISteamRemoteStorage_FileForget(string pchFile) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamRemoteStorage_FileForget(_ptr, pchFile)
				: throw new Exception("ISteamRemoteStorage _ptr is null!");
		}

		public virtual bool ISteamRemoteStorage_FileDelete(string pchFile) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamRemoteStorage_FileDelete(_ptr, pchFile)
				: throw new Exception("ISteamRemoteStorage _ptr is null!");
		}

		public virtual SteamAPICall_t ISteamRemoteStorage_FileShare(string pchFile) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamRemoteStorage_FileShare(_ptr, pchFile)
				: throw new Exception("ISteamRemoteStorage _ptr is null!");
		}

		public virtual bool ISteamRemoteStorage_SetSyncPlatforms(
			string pchFile,
			RemoteStoragePlatform eRemoteStoragePlatform) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamRemoteStorage _ptr is null!");
			return Native.SteamAPI_ISteamRemoteStorage_SetSyncPlatforms(_ptr, pchFile, eRemoteStoragePlatform);
		}

		public virtual UGCFileWriteStreamHandle_t ISteamRemoteStorage_FileWriteStreamOpen(
			string pchFile) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamRemoteStorage_FileWriteStreamOpen(_ptr, pchFile)
				: throw new Exception("ISteamRemoteStorage _ptr is null!");
		}

		public virtual bool ISteamRemoteStorage_FileWriteStreamWriteChunk(
			ulong writeHandle,
			IntPtr pvData,
			int cubData) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamRemoteStorage _ptr is null!");
			return Native.SteamAPI_ISteamRemoteStorage_FileWriteStreamWriteChunk(_ptr, writeHandle, pvData, cubData);
		}

		public virtual bool ISteamRemoteStorage_FileWriteStreamClose(ulong writeHandle) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamRemoteStorage_FileWriteStreamClose(_ptr, writeHandle)
				: throw new Exception("ISteamRemoteStorage _ptr is null!");
		}

		public virtual bool ISteamRemoteStorage_FileWriteStreamCancel(ulong writeHandle) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamRemoteStorage_FileWriteStreamCancel(_ptr, writeHandle)
				: throw new Exception("ISteamRemoteStorage _ptr is null!");
		}

		public virtual bool ISteamRemoteStorage_FileExists(string pchFile) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamRemoteStorage_FileExists(_ptr, pchFile)
				: throw new Exception("ISteamRemoteStorage _ptr is null!");
		}

		public virtual bool ISteamRemoteStorage_FilePersisted(string pchFile) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamRemoteStorage_FilePersisted(_ptr, pchFile)
				: throw new Exception("ISteamRemoteStorage _ptr is null!");
		}

		public virtual int ISteamRemoteStorage_GetFileSize(string pchFile) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamRemoteStorage_GetFileSize(_ptr, pchFile)
				: throw new Exception("ISteamRemoteStorage _ptr is null!");
		}

		public virtual long ISteamRemoteStorage_GetFileTimestamp(string pchFile) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamRemoteStorage_GetFileTimestamp(_ptr, pchFile)
				: throw new Exception("ISteamRemoteStorage _ptr is null!");
		}

		public virtual RemoteStoragePlatform ISteamRemoteStorage_GetSyncPlatforms(string pchFile) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamRemoteStorage_GetSyncPlatforms(_ptr, pchFile)
				: throw new Exception("ISteamRemoteStorage _ptr is null!");
		}

		public virtual int ISteamRemoteStorage_GetFileCount() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamRemoteStorage_GetFileCount(_ptr)
				: throw new Exception("ISteamRemoteStorage _ptr is null!");
		}

		public virtual IntPtr ISteamRemoteStorage_GetFileNameAndSize(
			int iFile,
			out int pnFileSizeInBytes) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamRemoteStorage_GetFileNameAndSize(_ptr, iFile, out pnFileSizeInBytes)
				: throw new Exception("ISteamRemoteStorage _ptr is null!");
		}

		public virtual bool ISteamRemoteStorage_GetQuota(
			out ulong pnTotalBytes,
			out ulong puAvailableBytes) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamRemoteStorage_GetQuota(_ptr, out pnTotalBytes, out puAvailableBytes)
				: throw new Exception("ISteamRemoteStorage _ptr is null!");
		}

		public virtual bool ISteamRemoteStorage_IsCloudEnabledForAccount() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamRemoteStorage_IsCloudEnabledForAccount(_ptr)
				: throw new Exception("ISteamRemoteStorage _ptr is null!");
		}

		public virtual bool ISteamRemoteStorage_IsCloudEnabledForApp() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamRemoteStorage_IsCloudEnabledForApp(_ptr)
				: throw new Exception("ISteamRemoteStorage _ptr is null!");
		}

		public virtual void ISteamRemoteStorage_SetCloudEnabledForApp([MarshalAs(UnmanagedType.U1)] bool bEnabled) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamRemoteStorage _ptr is null!");
			Native.SteamAPI_ISteamRemoteStorage_SetCloudEnabledForApp(_ptr, bEnabled);
		}

		public virtual SteamAPICall_t ISteamRemoteStorage_UGCDownload(ulong hContent, uint unPriority) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamRemoteStorage _ptr is null!");
			return Native.SteamAPI_ISteamRemoteStorage_UGCDownload(_ptr, hContent, unPriority);
		}

		public virtual bool ISteamRemoteStorage_GetUGCDownloadProgress(
			ulong hContent,
			out int pnBytesDownloaded,
			out int pnBytesExpected) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamRemoteStorage_GetUGCDownloadProgress(_ptr, hContent, out pnBytesDownloaded,
					out pnBytesExpected)
				: throw new Exception("ISteamRemoteStorage _ptr is null!");
		}

		public virtual bool ISteamRemoteStorage_GetUGCDetails(
			ulong hContent,
			ref uint pnAppID,
			StringBuilder ppchName,
			out int pnFileSizeInBytes,
			out ulong pSteamIDOwner) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamRemoteStorage _ptr is null!");
			return Native.SteamAPI_ISteamRemoteStorage_GetUGCDetails(_ptr, hContent, ref pnAppID, ppchName,
				out pnFileSizeInBytes, out pSteamIDOwner);
		}

		public virtual int ISteamRemoteStorage_UGCRead(
			ulong hContent,
			IntPtr pvData,
			int cubDataToRead,
			uint cOffset,
			UGCReadAction eAction) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamRemoteStorage _ptr is null!");
			return Native.SteamAPI_ISteamRemoteStorage_UGCRead(_ptr, hContent, pvData, cubDataToRead, cOffset, eAction);
		}

		public virtual int ISteamRemoteStorage_GetCachedUGCCount() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamRemoteStorage_GetCachedUGCCount(_ptr)
				: throw new Exception("ISteamRemoteStorage _ptr is null!");
		}

		public virtual UGCHandle_t ISteamRemoteStorage_GetCachedUGCHandle(int iCachedContent) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamRemoteStorage_GetCachedUGCHandle(_ptr, iCachedContent)
				: throw new Exception("ISteamRemoteStorage _ptr is null!");
		}

		public virtual SteamAPICall_t ISteamRemoteStorage_PublishWorkshopFile(
			string pchFile,
			string pchPreviewFile,
			uint nConsumerAppId,
			string pchTitle,
			string pchDescription,
			RemoteStoragePublishedFileVisibility eVisibility,
			ref SteamParamStringArray_t pTags,
			WorkshopFileType eWorkshopFileType) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamRemoteStorage _ptr is null!");
			return Native.SteamAPI_ISteamRemoteStorage_PublishWorkshopFile(_ptr, pchFile, pchPreviewFile,
				nConsumerAppId, pchTitle, pchDescription, eVisibility, ref pTags, eWorkshopFileType);
		}

		public virtual PublishedFileUpdateHandle_t ISteamRemoteStorage_CreatePublishedFileUpdateRequest(
			ulong unPublishedFileId) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamRemoteStorage_CreatePublishedFileUpdateRequest(_ptr, unPublishedFileId)
				: throw new Exception("ISteamRemoteStorage _ptr is null!");
		}

		public virtual bool ISteamRemoteStorage_UpdatePublishedFileFile(
			ulong updateHandle,
			string pchFile) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamRemoteStorage _ptr is null!");
			return Native.SteamAPI_ISteamRemoteStorage_UpdatePublishedFileFile(_ptr, updateHandle, pchFile);
		}

		public virtual bool ISteamRemoteStorage_UpdatePublishedFilePreviewFile(
			ulong updateHandle,
			string pchPreviewFile) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamRemoteStorage _ptr is null!");
			return Native.SteamAPI_ISteamRemoteStorage_UpdatePublishedFilePreviewFile(_ptr, updateHandle,
				pchPreviewFile);
		}

		public virtual bool ISteamRemoteStorage_UpdatePublishedFileTitle(
			ulong updateHandle,
			string pchTitle) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamRemoteStorage _ptr is null!");
			return Native.SteamAPI_ISteamRemoteStorage_UpdatePublishedFileTitle(_ptr, updateHandle, pchTitle);
		}

		public virtual bool ISteamRemoteStorage_UpdatePublishedFileDescription(
			ulong updateHandle,
			string pchDescription) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamRemoteStorage _ptr is null!");
			return Native.SteamAPI_ISteamRemoteStorage_UpdatePublishedFileDescription(_ptr, updateHandle,
				pchDescription);
		}

		public virtual bool ISteamRemoteStorage_UpdatePublishedFileVisibility(
			ulong updateHandle,
			RemoteStoragePublishedFileVisibility eVisibility) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamRemoteStorage _ptr is null!");
			return Native.SteamAPI_ISteamRemoteStorage_UpdatePublishedFileVisibility(_ptr, updateHandle, eVisibility);
		}

		public virtual bool ISteamRemoteStorage_UpdatePublishedFileTags(
			ulong updateHandle,
			ref SteamParamStringArray_t pTags) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamRemoteStorage _ptr is null!");
			return Native.SteamAPI_ISteamRemoteStorage_UpdatePublishedFileTags(_ptr, updateHandle, ref pTags);
		}

		public virtual SteamAPICall_t ISteamRemoteStorage_CommitPublishedFileUpdate(ulong updateHandle) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamRemoteStorage_CommitPublishedFileUpdate(_ptr, updateHandle)
				: throw new Exception("ISteamRemoteStorage _ptr is null!");
		}

		public virtual SteamAPICall_t ISteamRemoteStorage_GetPublishedFileDetails(
			ulong unPublishedFileId,
			uint unMaxSecondsOld) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamRemoteStorage _ptr is null!");
			return Native.SteamAPI_ISteamRemoteStorage_GetPublishedFileDetails(_ptr, unPublishedFileId,
				unMaxSecondsOld);
		}

		public virtual SteamAPICall_t ISteamRemoteStorage_DeletePublishedFile(ulong unPublishedFileId) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamRemoteStorage_DeletePublishedFile(_ptr, unPublishedFileId)
				: throw new Exception("ISteamRemoteStorage _ptr is null!");
		}

		public virtual SteamAPICall_t ISteamRemoteStorage_EnumerateUserPublishedFiles(
			uint unStartIndex) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamRemoteStorage_EnumerateUserPublishedFiles(_ptr, unStartIndex)
				: throw new Exception("ISteamRemoteStorage _ptr is null!");
		}

		public virtual SteamAPICall_t ISteamRemoteStorage_SubscribePublishedFile(
			ulong unPublishedFileId) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamRemoteStorage_SubscribePublishedFile(_ptr, unPublishedFileId)
				: throw new Exception("ISteamRemoteStorage _ptr is null!");
		}

		public virtual SteamAPICall_t ISteamRemoteStorage_EnumerateUserSubscribedFiles(
			uint unStartIndex) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamRemoteStorage_EnumerateUserSubscribedFiles(_ptr, unStartIndex)
				: throw new Exception("ISteamRemoteStorage _ptr is null!");
		}

		public virtual SteamAPICall_t ISteamRemoteStorage_UnsubscribePublishedFile(
			ulong unPublishedFileId) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamRemoteStorage_UnsubscribePublishedFile(_ptr, unPublishedFileId)
				: throw new Exception("ISteamRemoteStorage _ptr is null!");
		}

		public virtual bool ISteamRemoteStorage_UpdatePublishedFileSetChangeDescription(
			ulong updateHandle,
			string pchChangeDescription) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamRemoteStorage _ptr is null!");
			return Native.SteamAPI_ISteamRemoteStorage_UpdatePublishedFileSetChangeDescription(_ptr, updateHandle,
				pchChangeDescription);
		}

		public virtual SteamAPICall_t ISteamRemoteStorage_GetPublishedItemVoteDetails(
			ulong unPublishedFileId) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamRemoteStorage_GetPublishedItemVoteDetails(_ptr, unPublishedFileId)
				: throw new Exception("ISteamRemoteStorage _ptr is null!");
		}

		public virtual SteamAPICall_t ISteamRemoteStorage_UpdateUserPublishedItemVote(
			ulong unPublishedFileId,
			[MarshalAs(UnmanagedType.U1)] bool bVoteUp) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamRemoteStorage _ptr is null!");
			return Native.SteamAPI_ISteamRemoteStorage_UpdateUserPublishedItemVote(_ptr, unPublishedFileId, bVoteUp);
		}

		public virtual SteamAPICall_t ISteamRemoteStorage_GetUserPublishedItemVoteDetails(
			ulong unPublishedFileId) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamRemoteStorage_GetUserPublishedItemVoteDetails(_ptr, unPublishedFileId)
				: throw new Exception("ISteamRemoteStorage _ptr is null!");
		}

		public virtual SteamAPICall_t ISteamRemoteStorage_EnumerateUserSharedWorkshopFiles(
			ulong steamId,
			uint unStartIndex,
			ref SteamParamStringArray_t pRequiredTags,
			ref SteamParamStringArray_t pExcludedTags) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamRemoteStorage _ptr is null!");
			return Native.SteamAPI_ISteamRemoteStorage_EnumerateUserSharedWorkshopFiles(_ptr, steamId, unStartIndex,
				ref pRequiredTags, ref pExcludedTags);
		}

		public virtual SteamAPICall_t ISteamRemoteStorage_PublishVideo(
			WorkshopVideoProvider eVideoProvider,
			string pchVideoAccount,
			string pchVideoIdentifier,
			string pchPreviewFile,
			uint nConsumerAppId,
			string pchTitle,
			string pchDescription,
			RemoteStoragePublishedFileVisibility eVisibility,
			ref SteamParamStringArray_t pTags) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamRemoteStorage _ptr is null!");
			return Native.SteamAPI_ISteamRemoteStorage_PublishVideo(_ptr, eVideoProvider, pchVideoAccount,
				pchVideoIdentifier, pchPreviewFile, nConsumerAppId, pchTitle, pchDescription, eVisibility, ref pTags);
		}

		public virtual SteamAPICall_t ISteamRemoteStorage_SetUserPublishedFileAction(
			ulong unPublishedFileId,
			WorkshopFileAction eAction) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamRemoteStorage _ptr is null!");
			return Native.SteamAPI_ISteamRemoteStorage_SetUserPublishedFileAction(_ptr, unPublishedFileId, eAction);
		}

		public virtual SteamAPICall_t ISteamRemoteStorage_EnumeratePublishedFilesByUserAction(
			WorkshopFileAction eAction,
			uint unStartIndex) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamRemoteStorage _ptr is null!");
			return Native.SteamAPI_ISteamRemoteStorage_EnumeratePublishedFilesByUserAction(_ptr, eAction, unStartIndex);
		}

		public virtual SteamAPICall_t ISteamRemoteStorage_EnumeratePublishedWorkshopFiles(
			WorkshopEnumerationType eEnumerationType,
			uint unStartIndex,
			uint unCount,
			uint unDays,
			ref SteamParamStringArray_t pTags,
			ref SteamParamStringArray_t pUserTags) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamRemoteStorage _ptr is null!");
			return Native.SteamAPI_ISteamRemoteStorage_EnumeratePublishedWorkshopFiles(_ptr, eEnumerationType,
				unStartIndex, unCount, unDays, ref pTags, ref pUserTags);
		}

		public virtual SteamAPICall_t ISteamRemoteStorage_UGCDownloadToLocation(
			ulong hContent,
			string pchLocation,
			uint unPriority) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamRemoteStorage _ptr is null!");
			return Native.SteamAPI_ISteamRemoteStorage_UGCDownloadToLocation(_ptr, hContent, pchLocation, unPriority);
		}

		public virtual bool ISteamUserStats_RequestCurrentStats() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUserStats_RequestCurrentStats(_ptr)
				: throw new Exception("ISteamUserStats _ptr is null!");
		}

		public virtual bool ISteamUserStats_GetStat(string pchName, out int pData) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUserStats_GetStat(_ptr, pchName, out pData)
				: throw new Exception("ISteamUserStats _ptr is null!");
		}

		public virtual bool ISteamUserStats_GetStat0(string pchName, out float pData) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUserStats_GetStat0(_ptr, pchName, out pData)
				: throw new Exception("ISteamUserStats _ptr is null!");
		}

		public virtual bool ISteamUserStats_SetStat(string pchName, int nData) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUserStats _ptr is null!");
			return Native.SteamAPI_ISteamUserStats_SetStat(_ptr, pchName, nData);
		}

		public virtual bool ISteamUserStats_SetStat0(string pchName, float fData) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUserStats _ptr is null!");
			return Native.SteamAPI_ISteamUserStats_SetStat0(_ptr, pchName, fData);
		}

		public virtual bool ISteamUserStats_UpdateAvgRateStat(
			string pchName,
			float flCountThisSession,
			double dSessionLength) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUserStats _ptr is null!");
			return Native.SteamAPI_ISteamUserStats_UpdateAvgRateStat(_ptr, pchName, flCountThisSession, dSessionLength);
		}

		public virtual bool ISteamUserStats_GetAchievement(string pchName,
			[MarshalAs(UnmanagedType.U1)] ref bool pbAchieved) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUserStats _ptr is null!");
			return Native.SteamAPI_ISteamUserStats_GetAchievement(_ptr, pchName, ref pbAchieved);
		}

		public virtual bool ISteamUserStats_SetAchievement(string pchName) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUserStats_SetAchievement(_ptr, pchName)
				: throw new Exception("ISteamUserStats _ptr is null!");
		}

		public virtual bool ISteamUserStats_ClearAchievement(string pchName) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUserStats_ClearAchievement(_ptr, pchName)
				: throw new Exception("ISteamUserStats _ptr is null!");
		}

		public virtual bool ISteamUserStats_GetAchievementAndUnlockTime(
			string pchName,
			[MarshalAs(UnmanagedType.U1)] ref bool pbAchieved,
			out uint punUnlockTime) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUserStats _ptr is null!");
			return Native.SteamAPI_ISteamUserStats_GetAchievementAndUnlockTime(_ptr, pchName, ref pbAchieved,
				out punUnlockTime);
		}

		public virtual bool ISteamUserStats_StoreStats() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUserStats_StoreStats(_ptr)
				: throw new Exception("ISteamUserStats _ptr is null!");
		}

		public virtual int ISteamUserStats_GetAchievementIcon(string pchName) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUserStats_GetAchievementIcon(_ptr, pchName)
				: throw new Exception("ISteamUserStats _ptr is null!");
		}

		public virtual IntPtr ISteamUserStats_GetAchievementDisplayAttribute(
			string pchName,
			string pchKey) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUserStats _ptr is null!");
			return Native.SteamAPI_ISteamUserStats_GetAchievementDisplayAttribute(_ptr, pchName, pchKey);
		}

		public virtual bool ISteamUserStats_IndicateAchievementProgress(
			string pchName,
			uint nCurProgress,
			uint nMaxProgress) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUserStats _ptr is null!");
			return Native.SteamAPI_ISteamUserStats_IndicateAchievementProgress(_ptr, pchName, nCurProgress,
				nMaxProgress);
		}

		public virtual uint ISteamUserStats_GetNumAchievements() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUserStats_GetNumAchievements(_ptr)
				: throw new Exception("ISteamUserStats _ptr is null!");
		}

		public virtual IntPtr ISteamUserStats_GetAchievementName(uint iAchievement) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUserStats_GetAchievementName(_ptr, iAchievement)
				: throw new Exception("ISteamUserStats _ptr is null!");
		}

		public virtual SteamAPICall_t ISteamUserStats_RequestUserStats(ulong steamIDUser) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUserStats_RequestUserStats(_ptr, steamIDUser)
				: throw new Exception("ISteamUserStats _ptr is null!");
		}

		public virtual bool ISteamUserStats_GetUserStat(
			ulong steamIDUser,
			string pchName,
			out int pData) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUserStats _ptr is null!");
			return Native.SteamAPI_ISteamUserStats_GetUserStat(_ptr, steamIDUser, pchName, out pData);
		}

		public virtual bool ISteamUserStats_GetUserStat0(
			ulong steamIDUser,
			string pchName,
			out float pData) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUserStats _ptr is null!");
			return Native.SteamAPI_ISteamUserStats_GetUserStat0(_ptr, steamIDUser, pchName, out pData);
		}

		public virtual bool ISteamUserStats_GetUserAchievement(
			ulong steamIDUser,
			string pchName,
			[MarshalAs(UnmanagedType.U1)] ref bool pbAchieved) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUserStats _ptr is null!");
			return Native.SteamAPI_ISteamUserStats_GetUserAchievement(_ptr, steamIDUser, pchName, ref pbAchieved);
		}

		public virtual bool ISteamUserStats_GetUserAchievementAndUnlockTime(
			ulong steamIDUser,
			string pchName,
			[MarshalAs(UnmanagedType.U1)] ref bool pbAchieved,
			out uint punUnlockTime) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUserStats _ptr is null!");
			return Native.SteamAPI_ISteamUserStats_GetUserAchievementAndUnlockTime(_ptr, steamIDUser, pchName,
				ref pbAchieved, out punUnlockTime);
		}

		public virtual bool ISteamUserStats_ResetAllStats([MarshalAs(UnmanagedType.U1)] bool bAchievementsToo) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUserStats_ResetAllStats(_ptr, bAchievementsToo)
				: throw new Exception("ISteamUserStats _ptr is null!");
		}

		public virtual SteamAPICall_t ISteamUserStats_FindOrCreateLeaderboard(
			string pchLeaderboardName,
			LeaderboardSortMethod eLeaderboardSortMethod,
			LeaderboardDisplayType eLeaderboardDisplayType) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUserStats _ptr is null!");
			return Native.SteamAPI_ISteamUserStats_FindOrCreateLeaderboard(_ptr, pchLeaderboardName,
				eLeaderboardSortMethod, eLeaderboardDisplayType);
		}

		public virtual SteamAPICall_t ISteamUserStats_FindLeaderboard(string pchLeaderboardName) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUserStats_FindLeaderboard(_ptr, pchLeaderboardName)
				: throw new Exception("ISteamUserStats _ptr is null!");
		}

		public virtual IntPtr ISteamUserStats_GetLeaderboardName(ulong hSteamLeaderboard) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUserStats_GetLeaderboardName(_ptr, hSteamLeaderboard)
				: throw new Exception("ISteamUserStats _ptr is null!");
		}

		public virtual int ISteamUserStats_GetLeaderboardEntryCount(ulong hSteamLeaderboard) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUserStats_GetLeaderboardEntryCount(_ptr, hSteamLeaderboard)
				: throw new Exception("ISteamUserStats _ptr is null!");
		}

		public virtual LeaderboardSortMethod ISteamUserStats_GetLeaderboardSortMethod(
			ulong hSteamLeaderboard) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUserStats_GetLeaderboardSortMethod(_ptr, hSteamLeaderboard)
				: throw new Exception("ISteamUserStats _ptr is null!");
		}

		public virtual LeaderboardDisplayType ISteamUserStats_GetLeaderboardDisplayType(
			ulong hSteamLeaderboard) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUserStats_GetLeaderboardDisplayType(_ptr, hSteamLeaderboard)
				: throw new Exception("ISteamUserStats _ptr is null!");
		}

		public virtual SteamAPICall_t ISteamUserStats_DownloadLeaderboardEntries(
			ulong hSteamLeaderboard,
			LeaderboardDataRequest eLeaderboardDataRequest,
			int nRangeStart,
			int nRangeEnd) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUserStats _ptr is null!");
			return Native.SteamAPI_ISteamUserStats_DownloadLeaderboardEntries(_ptr, hSteamLeaderboard,
				eLeaderboardDataRequest, nRangeStart, nRangeEnd);
		}

		public virtual SteamAPICall_t ISteamUserStats_DownloadLeaderboardEntriesForUsers(
			ulong hSteamLeaderboard,
			IntPtr prgUsers,
			int cUsers) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUserStats _ptr is null!");
			return Native.SteamAPI_ISteamUserStats_DownloadLeaderboardEntriesForUsers(_ptr, hSteamLeaderboard, prgUsers,
				cUsers);
		}

		public virtual bool ISteamUserStats_GetDownloadedLeaderboardEntry(
			ulong hSteamLeaderboardEntries,
			int index,
			ref LeaderboardEntry_t pLeaderboardEntry,
			IntPtr pDetails,
			int cDetailsMax) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUserStats _ptr is null!");
			return Native.SteamAPI_ISteamUserStats_GetDownloadedLeaderboardEntry(_ptr, hSteamLeaderboardEntries, index,
				ref pLeaderboardEntry, pDetails, cDetailsMax);
		}

		public virtual SteamAPICall_t ISteamUserStats_UploadLeaderboardScore(
			ulong hSteamLeaderboard,
			LeaderboardUploadScoreMethod eLeaderboardUploadScoreMethod,
			int nScore,
			int[] pScoreDetails,
			int cScoreDetailsCount) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUserStats _ptr is null!");
			return Native.SteamAPI_ISteamUserStats_UploadLeaderboardScore(_ptr, hSteamLeaderboard,
				eLeaderboardUploadScoreMethod, nScore, pScoreDetails, cScoreDetailsCount);
		}

		public virtual SteamAPICall_t ISteamUserStats_AttachLeaderboardUGC(
			ulong hSteamLeaderboard,
			ulong hUGC) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUserStats _ptr is null!");
			return Native.SteamAPI_ISteamUserStats_AttachLeaderboardUGC(_ptr, hSteamLeaderboard, hUGC);
		}

		public virtual SteamAPICall_t ISteamUserStats_GetNumberOfCurrentPlayers() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUserStats_GetNumberOfCurrentPlayers(_ptr)
				: throw new Exception("ISteamUserStats _ptr is null!");
		}

		public virtual SteamAPICall_t ISteamUserStats_RequestGlobalAchievementPercentages() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUserStats_RequestGlobalAchievementPercentages(_ptr)
				: throw new Exception("ISteamUserStats _ptr is null!");
		}

		public virtual int ISteamUserStats_GetMostAchievedAchievementInfo(
			StringBuilder pchName,
			uint unNameBufLen,
			out float pflPercent,
			[MarshalAs(UnmanagedType.U1)] ref bool pbAchieved) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUserStats _ptr is null!");
			return Native.SteamAPI_ISteamUserStats_GetMostAchievedAchievementInfo(_ptr, pchName, unNameBufLen,
				out pflPercent, ref pbAchieved);
		}

		public virtual int ISteamUserStats_GetNextMostAchievedAchievementInfo(
			int iIteratorPrevious,
			StringBuilder pchName,
			uint unNameBufLen,
			out float pflPercent,
			[MarshalAs(UnmanagedType.U1)] ref bool pbAchieved) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUserStats _ptr is null!");
			return Native.SteamAPI_ISteamUserStats_GetNextMostAchievedAchievementInfo(_ptr, iIteratorPrevious, pchName,
				unNameBufLen, out pflPercent, ref pbAchieved);
		}

		public virtual bool ISteamUserStats_GetAchievementAchievedPercent(
			string pchName,
			out float pflPercent) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUserStats_GetAchievementAchievedPercent(_ptr, pchName, out pflPercent)
				: throw new Exception("ISteamUserStats _ptr is null!");
		}

		public virtual SteamAPICall_t ISteamUserStats_RequestGlobalStats(int nHistoryDays) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUserStats_RequestGlobalStats(_ptr, nHistoryDays)
				: throw new Exception("ISteamUserStats _ptr is null!");
		}

		public virtual bool ISteamUserStats_GetGlobalStat(string pchStatName, out long pData) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUserStats_GetGlobalStat(_ptr, pchStatName, out pData)
				: throw new Exception("ISteamUserStats _ptr is null!");
		}

		public virtual bool ISteamUserStats_GetGlobalStat0(string pchStatName, out double pData) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUserStats_GetGlobalStat0(_ptr, pchStatName, out pData)
				: throw new Exception("ISteamUserStats _ptr is null!");
		}

		public virtual int ISteamUserStats_GetGlobalStatHistory(
			string pchStatName,
			out long pData,
			uint cubData) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUserStats _ptr is null!");
			return Native.SteamAPI_ISteamUserStats_GetGlobalStatHistory(_ptr, pchStatName, out pData, cubData);
		}

		public virtual int ISteamUserStats_GetGlobalStatHistory0(
			string pchStatName,
			out double pData,
			uint cubData) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUserStats _ptr is null!");
			return Native.SteamAPI_ISteamUserStats_GetGlobalStatHistory0(_ptr, pchStatName, out pData, cubData);
		}

		public virtual bool ISteamApps_BIsSubscribed() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamApps_BIsSubscribed(_ptr)
				: throw new Exception("ISteamApps _ptr is null!");
		}

		public virtual bool ISteamApps_BIsLowViolence() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamApps_BIsLowViolence(_ptr)
				: throw new Exception("ISteamApps _ptr is null!");
		}

		public virtual bool ISteamApps_BIsCybercafe() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamApps_BIsCybercafe(_ptr)
				: throw new Exception("ISteamApps _ptr is null!");
		}

		public virtual bool ISteamApps_BIsVACBanned() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamApps_BIsVACBanned(_ptr)
				: throw new Exception("ISteamApps _ptr is null!");
		}

		public virtual IntPtr ISteamApps_GetCurrentGameLanguage() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamApps_GetCurrentGameLanguage(_ptr)
				: throw new Exception("ISteamApps _ptr is null!");
		}

		public virtual IntPtr ISteamApps_GetAvailableGameLanguages() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamApps_GetAvailableGameLanguages(_ptr)
				: throw new Exception("ISteamApps _ptr is null!");
		}

		public virtual bool ISteamApps_BIsSubscribedApp(uint appID) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamApps_BIsSubscribedApp(_ptr, appID)
				: throw new Exception("ISteamApps _ptr is null!");
		}

		public virtual bool ISteamApps_BIsDlcInstalled(uint appID) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamApps_BIsDlcInstalled(_ptr, appID)
				: throw new Exception("ISteamApps _ptr is null!");
		}

		public virtual uint ISteamApps_GetEarliestPurchaseUnixTime(uint nAppID) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamApps_GetEarliestPurchaseUnixTime(_ptr, nAppID)
				: throw new Exception("ISteamApps _ptr is null!");
		}

		public virtual bool ISteamApps_BIsSubscribedFromFreeWeekend() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamApps_BIsSubscribedFromFreeWeekend(_ptr)
				: throw new Exception("ISteamApps _ptr is null!");
		}

		public virtual int ISteamApps_GetDLCCount() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamApps_GetDLCCount(_ptr)
				: throw new Exception("ISteamApps _ptr is null!");
		}

		public virtual bool ISteamApps_BGetDLCDataByIndex(
			int iDLC,
			ref uint pAppID,
			[MarshalAs(UnmanagedType.U1)] ref bool pbAvailable,
			StringBuilder pchName,
			int cchNameBufferSize) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamApps _ptr is null!");
			return Native.SteamAPI_ISteamApps_BGetDLCDataByIndex(_ptr, iDLC, ref pAppID, ref pbAvailable, pchName,
				cchNameBufferSize);
		}

		public virtual void ISteamApps_InstallDLC(uint nAppID) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamApps _ptr is null!");
			Native.SteamAPI_ISteamApps_InstallDLC(_ptr, nAppID);
		}

		public virtual void ISteamApps_UninstallDLC(uint nAppID) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamApps _ptr is null!");
			Native.SteamAPI_ISteamApps_UninstallDLC(_ptr, nAppID);
		}

		public virtual void ISteamApps_RequestAppProofOfPurchaseKey(uint nAppID) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamApps _ptr is null!");
			Native.SteamAPI_ISteamApps_RequestAppProofOfPurchaseKey(_ptr, nAppID);
		}

		public virtual bool ISteamApps_GetCurrentBetaName(
			StringBuilder pchName,
			int cchNameBufferSize) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamApps _ptr is null!");
			return Native.SteamAPI_ISteamApps_GetCurrentBetaName(_ptr, pchName, cchNameBufferSize);
		}

		public virtual bool ISteamApps_MarkContentCorrupt([MarshalAs(UnmanagedType.U1)] bool bMissingFilesOnly) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamApps_MarkContentCorrupt(_ptr, bMissingFilesOnly)
				: throw new Exception("ISteamApps _ptr is null!");
		}

		public virtual uint ISteamApps_GetInstalledDepots(
			uint appID,
			IntPtr pvecDepots,
			uint cMaxDepots) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamApps _ptr is null!");
			return Native.SteamAPI_ISteamApps_GetInstalledDepots(_ptr, appID, pvecDepots, cMaxDepots);
		}

		public virtual uint ISteamApps_GetAppInstallDir(
			uint appID,
			StringBuilder pchFolder,
			uint cchFolderBufferSize) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamApps _ptr is null!");
			return Native.SteamAPI_ISteamApps_GetAppInstallDir(_ptr, appID, pchFolder, cchFolderBufferSize);
		}

		public virtual bool ISteamApps_BIsAppInstalled(uint appID) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamApps_BIsAppInstalled(_ptr, appID)
				: throw new Exception("ISteamApps _ptr is null!");
		}

		public virtual CSteamID ISteamApps_GetAppOwner() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamApps_GetAppOwner(_ptr)
				: throw new Exception("ISteamApps _ptr is null!");
		}

		public virtual IntPtr ISteamApps_GetLaunchQueryParam(string pchKey) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamApps_GetLaunchQueryParam(_ptr, pchKey)
				: throw new Exception("ISteamApps _ptr is null!");
		}

		public virtual bool ISteamApps_GetDlcDownloadProgress(
			uint nAppID,
			out ulong punBytesDownloaded,
			out ulong punBytesTotal) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamApps_GetDlcDownloadProgress(_ptr, nAppID, out punBytesDownloaded,
					out punBytesTotal)
				: throw new Exception("ISteamApps _ptr is null!");
		}

		public virtual int ISteamApps_GetAppBuildId() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamApps_GetAppBuildId(_ptr)
				: throw new Exception("ISteamApps _ptr is null!");
		}

		public virtual void ISteamApps_RequestAllProofOfPurchaseKeys() {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamApps _ptr is null!");
			Native.SteamAPI_ISteamApps_RequestAllProofOfPurchaseKeys(_ptr);
		}

		public virtual SteamAPICall_t ISteamApps_GetFileDetails(string pszFileName) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamApps_GetFileDetails(_ptr, pszFileName)
				: throw new Exception("ISteamApps _ptr is null!");
		}

		public virtual bool ISteamNetworking_SendP2PPacket(
			ulong steamIDRemote,
			IntPtr pubData,
			uint cubData,
			P2PSend eP2PSendType,
			int nChannel) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamNetworking _ptr is null!");
			return Native.SteamAPI_ISteamNetworking_SendP2PPacket(_ptr, steamIDRemote, pubData, cubData, eP2PSendType,
				nChannel);
		}

		public virtual bool ISteamNetworking_IsP2PPacketAvailable(out uint pcubMsgSize, int nChannel) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamNetworking_IsP2PPacketAvailable(_ptr, out pcubMsgSize, nChannel)
				: throw new Exception("ISteamNetworking _ptr is null!");
		}

		public virtual bool ISteamNetworking_ReadP2PPacket(
			IntPtr pubDest,
			uint cubDest,
			out uint pcubMsgSize,
			out ulong psteamIDRemote,
			int nChannel) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamNetworking _ptr is null!");
			return Native.SteamAPI_ISteamNetworking_ReadP2PPacket(_ptr, pubDest, cubDest, out pcubMsgSize,
				out psteamIDRemote, nChannel);
		}

		public virtual bool ISteamNetworking_AcceptP2PSessionWithUser(ulong steamIDRemote) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamNetworking_AcceptP2PSessionWithUser(_ptr, steamIDRemote)
				: throw new Exception("ISteamNetworking _ptr is null!");
		}

		public virtual bool ISteamNetworking_CloseP2PSessionWithUser(ulong steamIDRemote) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamNetworking_CloseP2PSessionWithUser(_ptr, steamIDRemote)
				: throw new Exception("ISteamNetworking _ptr is null!");
		}

		public virtual bool ISteamNetworking_CloseP2PChannelWithUser(
			ulong steamIDRemote,
			int nChannel) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamNetworking _ptr is null!");
			return Native.SteamAPI_ISteamNetworking_CloseP2PChannelWithUser(_ptr, steamIDRemote, nChannel);
		}

		public virtual bool ISteamNetworking_GetP2PSessionState(
			ulong steamIDRemote,
			ref P2PSessionState_t pConnectionState) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamNetworking _ptr is null!");
			return Native.SteamAPI_ISteamNetworking_GetP2PSessionState(_ptr, steamIDRemote, ref pConnectionState);
		}

		public virtual bool ISteamNetworking_AllowP2PPacketRelay([MarshalAs(UnmanagedType.U1)] bool bAllow) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamNetworking_AllowP2PPacketRelay(_ptr, bAllow)
				: throw new Exception("ISteamNetworking _ptr is null!");
		}

		public virtual SNetListenSocket_t ISteamNetworking_CreateListenSocket(
			int nVirtualP2PPort,
			uint nIP,
			ushort nPort,
			[MarshalAs(UnmanagedType.U1)] bool bAllowUseOfPacketRelay) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamNetworking _ptr is null!");
			return Native.SteamAPI_ISteamNetworking_CreateListenSocket(_ptr, nVirtualP2PPort, nIP, nPort,
				bAllowUseOfPacketRelay);
		}

		public virtual SNetSocket_t ISteamNetworking_CreateP2PConnectionSocket(
			ulong steamIDTarget,
			int nVirtualPort,
			int nTimeoutSec,
			[MarshalAs(UnmanagedType.U1)] bool bAllowUseOfPacketRelay) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamNetworking _ptr is null!");
			return Native.SteamAPI_ISteamNetworking_CreateP2PConnectionSocket(_ptr, steamIDTarget, nVirtualPort,
				nTimeoutSec, bAllowUseOfPacketRelay);
		}

		public virtual SNetSocket_t ISteamNetworking_CreateConnectionSocket(
			uint nIP,
			ushort nPort,
			int nTimeoutSec) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamNetworking _ptr is null!");
			return Native.SteamAPI_ISteamNetworking_CreateConnectionSocket(_ptr, nIP, nPort, nTimeoutSec);
		}

		public virtual bool ISteamNetworking_DestroySocket(uint hSocket,
			[MarshalAs(UnmanagedType.U1)] bool bNotifyRemoteEnd) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamNetworking _ptr is null!");
			return Native.SteamAPI_ISteamNetworking_DestroySocket(_ptr, hSocket, bNotifyRemoteEnd);
		}

		public virtual bool ISteamNetworking_DestroyListenSocket(uint hSocket,
			[MarshalAs(UnmanagedType.U1)] bool bNotifyRemoteEnd) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamNetworking _ptr is null!");
			return Native.SteamAPI_ISteamNetworking_DestroyListenSocket(_ptr, hSocket, bNotifyRemoteEnd);
		}

		public virtual bool ISteamNetworking_SendDataOnSocket(
			uint hSocket,
			IntPtr pubData,
			uint cubData,
			[MarshalAs(UnmanagedType.U1)] bool bReliable) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamNetworking _ptr is null!");
			return Native.SteamAPI_ISteamNetworking_SendDataOnSocket(_ptr, hSocket, pubData, cubData, bReliable);
		}

		public virtual bool ISteamNetworking_IsDataAvailableOnSocket(
			uint hSocket,
			out uint pcubMsgSize) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamNetworking_IsDataAvailableOnSocket(_ptr, hSocket, out pcubMsgSize)
				: throw new Exception("ISteamNetworking _ptr is null!");
		}

		public virtual bool ISteamNetworking_RetrieveDataFromSocket(
			uint hSocket,
			IntPtr pubDest,
			uint cubDest,
			out uint pcubMsgSize) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamNetworking _ptr is null!");
			return Native.SteamAPI_ISteamNetworking_RetrieveDataFromSocket(_ptr, hSocket, pubDest, cubDest,
				out pcubMsgSize);
		}

		public virtual bool ISteamNetworking_IsDataAvailable(
			uint hListenSocket,
			out uint pcubMsgSize,
			ref uint phSocket) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamNetworking _ptr is null!");
			return Native.SteamAPI_ISteamNetworking_IsDataAvailable(_ptr, hListenSocket, out pcubMsgSize, ref phSocket);
		}

		public virtual bool ISteamNetworking_RetrieveData(
			uint hListenSocket,
			IntPtr pubDest,
			uint cubDest,
			out uint pcubMsgSize,
			ref uint phSocket) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamNetworking _ptr is null!");
			return Native.SteamAPI_ISteamNetworking_RetrieveData(_ptr, hListenSocket, pubDest, cubDest, out pcubMsgSize,
				ref phSocket);
		}

		public virtual bool ISteamNetworking_GetSocketInfo(
			uint hSocket,
			out ulong pSteamIDRemote,
			IntPtr peSocketStatus,
			out uint punIPRemote,
			out ushort punPortRemote) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamNetworking _ptr is null!");
			return Native.SteamAPI_ISteamNetworking_GetSocketInfo(_ptr, hSocket, out pSteamIDRemote, peSocketStatus,
				out punIPRemote, out punPortRemote);
		}

		public virtual bool ISteamNetworking_GetListenSocketInfo(
			uint hListenSocket,
			out uint pnIP,
			out ushort pnPort) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamNetworking_GetListenSocketInfo(_ptr, hListenSocket, out pnIP, out pnPort)
				: throw new Exception("ISteamNetworking _ptr is null!");
		}

		public virtual SNetSocketConnectionType ISteamNetworking_GetSocketConnectionType(uint hSocket) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamNetworking_GetSocketConnectionType(_ptr, hSocket)
				: throw new Exception("ISteamNetworking _ptr is null!");
		}

		public virtual int ISteamNetworking_GetMaxPacketSize(uint hSocket) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamNetworking_GetMaxPacketSize(_ptr, hSocket)
				: throw new Exception("ISteamNetworking _ptr is null!");
		}

		public virtual ScreenshotHandle ISteamScreenshots_WriteScreenshot(
			IntPtr pubRGB,
			uint cubRGB,
			int nWidth,
			int nHeight) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamScreenshots _ptr is null!");
			return Native.SteamAPI_ISteamScreenshots_WriteScreenshot(_ptr, pubRGB, cubRGB, nWidth, nHeight);
		}

		public virtual ScreenshotHandle ISteamScreenshots_AddScreenshotToLibrary(
			string pchFilename,
			string pchThumbnailFilename,
			int nWidth,
			int nHeight) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamScreenshots _ptr is null!");
			return Native.SteamAPI_ISteamScreenshots_AddScreenshotToLibrary(_ptr, pchFilename, pchThumbnailFilename,
				nWidth, nHeight);
		}

		public virtual void ISteamScreenshots_TriggerScreenshot() {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamScreenshots _ptr is null!");
			Native.SteamAPI_ISteamScreenshots_TriggerScreenshot(_ptr);
		}

		public virtual void ISteamScreenshots_HookScreenshots([MarshalAs(UnmanagedType.U1)] bool bHook) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamScreenshots _ptr is null!");
			Native.SteamAPI_ISteamScreenshots_HookScreenshots(_ptr, bHook);
		}

		public virtual bool ISteamScreenshots_SetLocation(uint hScreenshot, string pchLocation) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamScreenshots _ptr is null!");
			return Native.SteamAPI_ISteamScreenshots_SetLocation(_ptr, hScreenshot, pchLocation);
		}

		public virtual bool ISteamScreenshots_TagUser(uint hScreenshot, ulong steamID) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamScreenshots _ptr is null!");
			return Native.SteamAPI_ISteamScreenshots_TagUser(_ptr, hScreenshot, steamID);
		}

		public virtual bool ISteamScreenshots_TagPublishedFile(
			uint hScreenshot,
			ulong unPublishedFileID) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamScreenshots _ptr is null!");
			return Native.SteamAPI_ISteamScreenshots_TagPublishedFile(_ptr, hScreenshot, unPublishedFileID);
		}

		public virtual bool ISteamScreenshots_IsScreenshotsHooked() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamScreenshots_IsScreenshotsHooked(_ptr)
				: throw new Exception("ISteamScreenshots _ptr is null!");
		}

		public virtual ScreenshotHandle ISteamScreenshots_AddVRScreenshotToLibrary(
			VRScreenshotType eType,
			string pchFilename,
			string pchVRFilename) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamScreenshots _ptr is null!");
			return Native.SteamAPI_ISteamScreenshots_AddVRScreenshotToLibrary(_ptr, eType, pchFilename, pchVRFilename);
		}

		public virtual bool ISteamMusic_BIsEnabled() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMusic_BIsEnabled(_ptr)
				: throw new Exception("ISteamMusic _ptr is null!");
		}

		public virtual bool ISteamMusic_BIsPlaying() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMusic_BIsPlaying(_ptr)
				: throw new Exception("ISteamMusic _ptr is null!");
		}

		public virtual AudioPlayback_Status ISteamMusic_GetPlaybackStatus() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMusic_GetPlaybackStatus(_ptr)
				: throw new Exception("ISteamMusic _ptr is null!");
		}

		public virtual void ISteamMusic_Play() {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMusic _ptr is null!");
			Native.SteamAPI_ISteamMusic_Play(_ptr);
		}

		public virtual void ISteamMusic_Pause() {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMusic _ptr is null!");
			Native.SteamAPI_ISteamMusic_Pause(_ptr);
		}

		public virtual void ISteamMusic_PlayPrevious() {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMusic _ptr is null!");
			Native.SteamAPI_ISteamMusic_PlayPrevious(_ptr);
		}

		public virtual void ISteamMusic_PlayNext() {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMusic _ptr is null!");
			Native.SteamAPI_ISteamMusic_PlayNext(_ptr);
		}

		public virtual void ISteamMusic_SetVolume(float flVolume) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMusic _ptr is null!");
			Native.SteamAPI_ISteamMusic_SetVolume(_ptr, flVolume);
		}

		public virtual float ISteamMusic_GetVolume() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMusic_GetVolume(_ptr)
				: throw new Exception("ISteamMusic _ptr is null!");
		}

		public virtual bool ISteamMusicRemote_RegisterSteamMusicRemote(string pchName) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMusicRemote_RegisterSteamMusicRemote(_ptr, pchName)
				: throw new Exception("ISteamMusicRemote _ptr is null!");
		}

		public virtual bool ISteamMusicRemote_DeregisterSteamMusicRemote() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMusicRemote_DeregisterSteamMusicRemote(_ptr)
				: throw new Exception("ISteamMusicRemote _ptr is null!");
		}

		public virtual bool ISteamMusicRemote_BIsCurrentMusicRemote() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMusicRemote_BIsCurrentMusicRemote(_ptr)
				: throw new Exception("ISteamMusicRemote _ptr is null!");
		}

		public virtual bool ISteamMusicRemote_BActivationSuccess([MarshalAs(UnmanagedType.U1)] bool bValue) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMusicRemote_BActivationSuccess(_ptr, bValue)
				: throw new Exception("ISteamMusicRemote _ptr is null!");
		}

		public virtual bool ISteamMusicRemote_SetDisplayName(string pchDisplayName) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMusicRemote_SetDisplayName(_ptr, pchDisplayName)
				: throw new Exception("ISteamMusicRemote _ptr is null!");
		}

		public virtual bool ISteamMusicRemote_SetPNGIcon_64x64(IntPtr pvBuffer, uint cbBufferLength) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMusicRemote _ptr is null!");
			return Native.SteamAPI_ISteamMusicRemote_SetPNGIcon_64x64(_ptr, pvBuffer, cbBufferLength);
		}

		public virtual bool ISteamMusicRemote_EnablePlayPrevious([MarshalAs(UnmanagedType.U1)] bool bValue) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMusicRemote_EnablePlayPrevious(_ptr, bValue)
				: throw new Exception("ISteamMusicRemote _ptr is null!");
		}

		public virtual bool ISteamMusicRemote_EnablePlayNext([MarshalAs(UnmanagedType.U1)] bool bValue) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMusicRemote_EnablePlayNext(_ptr, bValue)
				: throw new Exception("ISteamMusicRemote _ptr is null!");
		}

		public virtual bool ISteamMusicRemote_EnableShuffled([MarshalAs(UnmanagedType.U1)] bool bValue) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMusicRemote_EnableShuffled(_ptr, bValue)
				: throw new Exception("ISteamMusicRemote _ptr is null!");
		}

		public virtual bool ISteamMusicRemote_EnableLooped([MarshalAs(UnmanagedType.U1)] bool bValue) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMusicRemote_EnableLooped(_ptr, bValue)
				: throw new Exception("ISteamMusicRemote _ptr is null!");
		}

		public virtual bool ISteamMusicRemote_EnableQueue([MarshalAs(UnmanagedType.U1)] bool bValue) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMusicRemote_EnableQueue(_ptr, bValue)
				: throw new Exception("ISteamMusicRemote _ptr is null!");
		}

		public virtual bool ISteamMusicRemote_EnablePlaylists([MarshalAs(UnmanagedType.U1)] bool bValue) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMusicRemote_EnablePlaylists(_ptr, bValue)
				: throw new Exception("ISteamMusicRemote _ptr is null!");
		}

		public virtual bool ISteamMusicRemote_UpdatePlaybackStatus(AudioPlayback_Status nStatus) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMusicRemote_UpdatePlaybackStatus(_ptr, nStatus)
				: throw new Exception("ISteamMusicRemote _ptr is null!");
		}

		public virtual bool ISteamMusicRemote_UpdateShuffled([MarshalAs(UnmanagedType.U1)] bool bValue) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMusicRemote_UpdateShuffled(_ptr, bValue)
				: throw new Exception("ISteamMusicRemote _ptr is null!");
		}

		public virtual bool ISteamMusicRemote_UpdateLooped([MarshalAs(UnmanagedType.U1)] bool bValue) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMusicRemote_UpdateLooped(_ptr, bValue)
				: throw new Exception("ISteamMusicRemote _ptr is null!");
		}

		public virtual bool ISteamMusicRemote_UpdateVolume(float flValue) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMusicRemote_UpdateVolume(_ptr, flValue)
				: throw new Exception("ISteamMusicRemote _ptr is null!");
		}

		public virtual bool ISteamMusicRemote_CurrentEntryWillChange() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMusicRemote_CurrentEntryWillChange(_ptr)
				: throw new Exception("ISteamMusicRemote _ptr is null!");
		}

		public virtual bool ISteamMusicRemote_CurrentEntryIsAvailable([MarshalAs(UnmanagedType.U1)] bool bAvailable) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMusicRemote_CurrentEntryIsAvailable(_ptr, bAvailable)
				: throw new Exception("ISteamMusicRemote _ptr is null!");
		}

		public virtual bool ISteamMusicRemote_UpdateCurrentEntryText(string pchText) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMusicRemote_UpdateCurrentEntryText(_ptr, pchText)
				: throw new Exception("ISteamMusicRemote _ptr is null!");
		}

		public virtual bool ISteamMusicRemote_UpdateCurrentEntryElapsedSeconds(int nValue) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMusicRemote_UpdateCurrentEntryElapsedSeconds(_ptr, nValue)
				: throw new Exception("ISteamMusicRemote _ptr is null!");
		}

		public virtual bool ISteamMusicRemote_UpdateCurrentEntryCoverArt(
			IntPtr pvBuffer,
			uint cbBufferLength) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMusicRemote _ptr is null!");
			return Native.SteamAPI_ISteamMusicRemote_UpdateCurrentEntryCoverArt(_ptr, pvBuffer, cbBufferLength);
		}

		public virtual bool ISteamMusicRemote_CurrentEntryDidChange() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMusicRemote_CurrentEntryDidChange(_ptr)
				: throw new Exception("ISteamMusicRemote _ptr is null!");
		}

		public virtual bool ISteamMusicRemote_QueueWillChange() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMusicRemote_QueueWillChange(_ptr)
				: throw new Exception("ISteamMusicRemote _ptr is null!");
		}

		public virtual bool ISteamMusicRemote_ResetQueueEntries() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMusicRemote_ResetQueueEntries(_ptr)
				: throw new Exception("ISteamMusicRemote _ptr is null!");
		}

		public virtual bool ISteamMusicRemote_SetQueueEntry(
			int nID,
			int nPosition,
			string pchEntryText) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMusicRemote _ptr is null!");
			return Native.SteamAPI_ISteamMusicRemote_SetQueueEntry(_ptr, nID, nPosition, pchEntryText);
		}

		public virtual bool ISteamMusicRemote_SetCurrentQueueEntry(int nID) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMusicRemote_SetCurrentQueueEntry(_ptr, nID)
				: throw new Exception("ISteamMusicRemote _ptr is null!");
		}

		public virtual bool ISteamMusicRemote_QueueDidChange() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMusicRemote_QueueDidChange(_ptr)
				: throw new Exception("ISteamMusicRemote _ptr is null!");
		}

		public virtual bool ISteamMusicRemote_PlaylistWillChange() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMusicRemote_PlaylistWillChange(_ptr)
				: throw new Exception("ISteamMusicRemote _ptr is null!");
		}

		public virtual bool ISteamMusicRemote_ResetPlaylistEntries() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMusicRemote_ResetPlaylistEntries(_ptr)
				: throw new Exception("ISteamMusicRemote _ptr is null!");
		}

		public virtual bool ISteamMusicRemote_SetPlaylistEntry(
			int nID,
			int nPosition,
			string pchEntryText) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamMusicRemote _ptr is null!");
			return Native.SteamAPI_ISteamMusicRemote_SetPlaylistEntry(_ptr, nID, nPosition, pchEntryText);
		}

		public virtual bool ISteamMusicRemote_SetCurrentPlaylistEntry(int nID) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMusicRemote_SetCurrentPlaylistEntry(_ptr, nID)
				: throw new Exception("ISteamMusicRemote _ptr is null!");
		}

		public virtual bool ISteamMusicRemote_PlaylistDidChange() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamMusicRemote_PlaylistDidChange(_ptr)
				: throw new Exception("ISteamMusicRemote _ptr is null!");
		}

		public virtual HTTPRequestHandle ISteamHTTP_CreateHTTPRequest(
			HTTPMethod eHTTPRequestMethod,
			string pchAbsoluteURL) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTTP _ptr is null!");
			return Native.SteamAPI_ISteamHTTP_CreateHTTPRequest(_ptr, eHTTPRequestMethod, pchAbsoluteURL);
		}

		public virtual bool ISteamHTTP_SetHTTPRequestContextValue(uint hRequest, ulong ulContextValue) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTTP _ptr is null!");
			return Native.SteamAPI_ISteamHTTP_SetHTTPRequestContextValue(_ptr, hRequest, ulContextValue);
		}

		public virtual bool ISteamHTTP_SetHTTPRequestNetworkActivityTimeout(
			uint hRequest,
			uint unTimeoutSeconds) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTTP _ptr is null!");
			return Native.SteamAPI_ISteamHTTP_SetHTTPRequestNetworkActivityTimeout(_ptr, hRequest, unTimeoutSeconds);
		}

		public virtual bool ISteamHTTP_SetHTTPRequestHeaderValue(
			uint hRequest,
			string pchHeaderName,
			string pchHeaderValue) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTTP _ptr is null!");
			return Native.SteamAPI_ISteamHTTP_SetHTTPRequestHeaderValue(_ptr, hRequest, pchHeaderName, pchHeaderValue);
		}

		public virtual bool ISteamHTTP_SetHTTPRequestGetOrPostParameter(
			uint hRequest,
			string pchParamName,
			string pchParamValue) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTTP _ptr is null!");
			return Native.SteamAPI_ISteamHTTP_SetHTTPRequestGetOrPostParameter(_ptr, hRequest, pchParamName,
				pchParamValue);
		}

		public virtual bool ISteamHTTP_SendHTTPRequest(uint hRequest, ref ulong pCallHandle) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTTP _ptr is null!");
			return Native.SteamAPI_ISteamHTTP_SendHTTPRequest(_ptr, hRequest, ref pCallHandle);
		}

		public virtual bool ISteamHTTP_SendHTTPRequestAndStreamResponse(
			uint hRequest,
			ref ulong pCallHandle) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTTP _ptr is null!");
			return Native.SteamAPI_ISteamHTTP_SendHTTPRequestAndStreamResponse(_ptr, hRequest, ref pCallHandle);
		}

		public virtual bool ISteamHTTP_DeferHTTPRequest(uint hRequest) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamHTTP_DeferHTTPRequest(_ptr, hRequest)
				: throw new Exception("ISteamHTTP _ptr is null!");
		}

		public virtual bool ISteamHTTP_PrioritizeHTTPRequest(uint hRequest) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamHTTP_PrioritizeHTTPRequest(_ptr, hRequest)
				: throw new Exception("ISteamHTTP _ptr is null!");
		}

		public virtual bool ISteamHTTP_GetHTTPResponseHeaderSize(
			uint hRequest,
			string pchHeaderName,
			out uint unResponseHeaderSize) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTTP _ptr is null!");
			return Native.SteamAPI_ISteamHTTP_GetHTTPResponseHeaderSize(_ptr, hRequest, pchHeaderName,
				out unResponseHeaderSize);
		}

		public virtual bool ISteamHTTP_GetHTTPResponseHeaderValue(
			uint hRequest,
			string pchHeaderName,
			out byte pHeaderValueBuffer,
			uint unBufferSize) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTTP _ptr is null!");
			return Native.SteamAPI_ISteamHTTP_GetHTTPResponseHeaderValue(_ptr, hRequest, pchHeaderName,
				out pHeaderValueBuffer, unBufferSize);
		}

		public virtual bool ISteamHTTP_GetHTTPResponseBodySize(uint hRequest, out uint unBodySize) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamHTTP_GetHTTPResponseBodySize(_ptr, hRequest, out unBodySize)
				: throw new Exception("ISteamHTTP _ptr is null!");
		}

		public virtual bool ISteamHTTP_GetHTTPResponseBodyData(
			uint hRequest,
			out byte pBodyDataBuffer,
			uint unBufferSize) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTTP _ptr is null!");
			return Native.SteamAPI_ISteamHTTP_GetHTTPResponseBodyData(_ptr, hRequest, out pBodyDataBuffer,
				unBufferSize);
		}

		public virtual bool ISteamHTTP_GetHTTPStreamingResponseBodyData(
			uint hRequest,
			uint cOffset,
			out byte pBodyDataBuffer,
			uint unBufferSize) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTTP _ptr is null!");
			return Native.SteamAPI_ISteamHTTP_GetHTTPStreamingResponseBodyData(_ptr, hRequest, cOffset,
				out pBodyDataBuffer, unBufferSize);
		}

		public virtual bool ISteamHTTP_ReleaseHTTPRequest(uint hRequest) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamHTTP_ReleaseHTTPRequest(_ptr, hRequest)
				: throw new Exception("ISteamHTTP _ptr is null!");
		}

		public virtual bool ISteamHTTP_GetHTTPDownloadProgressPct(
			uint hRequest,
			out float pflPercentOut) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamHTTP_GetHTTPDownloadProgressPct(_ptr, hRequest, out pflPercentOut)
				: throw new Exception("ISteamHTTP _ptr is null!");
		}

		public virtual bool ISteamHTTP_SetHTTPRequestRawPostBody(
			uint hRequest,
			string pchContentType,
			out byte pubBody,
			uint unBodyLen) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTTP _ptr is null!");
			return Native.SteamAPI_ISteamHTTP_SetHTTPRequestRawPostBody(_ptr, hRequest, pchContentType, out pubBody,
				unBodyLen);
		}

		public virtual HTTPCookieContainerHandle ISteamHTTP_CreateCookieContainer(
			[MarshalAs(UnmanagedType.U1)] bool bAllowResponsesToModify) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamHTTP_CreateCookieContainer(_ptr, bAllowResponsesToModify)
				: throw new Exception("ISteamHTTP _ptr is null!");
		}

		public virtual bool ISteamHTTP_ReleaseCookieContainer(uint hCookieContainer) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamHTTP_ReleaseCookieContainer(_ptr, hCookieContainer)
				: throw new Exception("ISteamHTTP _ptr is null!");
		}

		public virtual bool ISteamHTTP_SetCookie(
			uint hCookieContainer,
			string pchHost,
			string pchUrl,
			string pchCookie) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTTP _ptr is null!");
			return Native.SteamAPI_ISteamHTTP_SetCookie(_ptr, hCookieContainer, pchHost, pchUrl, pchCookie);
		}

		public virtual bool ISteamHTTP_SetHTTPRequestCookieContainer(
			uint hRequest,
			uint hCookieContainer) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTTP _ptr is null!");
			return Native.SteamAPI_ISteamHTTP_SetHTTPRequestCookieContainer(_ptr, hRequest, hCookieContainer);
		}

		public virtual bool ISteamHTTP_SetHTTPRequestUserAgentInfo(
			uint hRequest,
			string pchUserAgentInfo) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTTP _ptr is null!");
			return Native.SteamAPI_ISteamHTTP_SetHTTPRequestUserAgentInfo(_ptr, hRequest, pchUserAgentInfo);
		}

		public virtual bool ISteamHTTP_SetHTTPRequestRequiresVerifiedCertificate(
			uint hRequest,
			[MarshalAs(UnmanagedType.U1)] bool bRequireVerifiedCertificate) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTTP _ptr is null!");
			return Native.SteamAPI_ISteamHTTP_SetHTTPRequestRequiresVerifiedCertificate(_ptr, hRequest,
				bRequireVerifiedCertificate);
		}

		public virtual bool ISteamHTTP_SetHTTPRequestAbsoluteTimeoutMS(
			uint hRequest,
			uint unMilliseconds) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTTP _ptr is null!");
			return Native.SteamAPI_ISteamHTTP_SetHTTPRequestAbsoluteTimeoutMS(_ptr, hRequest, unMilliseconds);
		}

		public virtual bool ISteamHTTP_GetHTTPRequestWasTimedOut(
			uint hRequest,
			[MarshalAs(UnmanagedType.U1)] ref bool pbWasTimedOut) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTTP _ptr is null!");
			return Native.SteamAPI_ISteamHTTP_GetHTTPRequestWasTimedOut(_ptr, hRequest, ref pbWasTimedOut);
		}

		public virtual ClientUnifiedMessageHandle ISteamUnifiedMessages_SendMethod(
			string pchServiceMethod,
			IntPtr pRequestBuffer,
			uint unRequestBufferSize,
			ulong unContext) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUnifiedMessages _ptr is null!");
			return Native.SteamAPI_ISteamUnifiedMessages_SendMethod(_ptr, pchServiceMethod, pRequestBuffer,
				unRequestBufferSize, unContext);
		}

		public virtual bool ISteamUnifiedMessages_GetMethodResponseInfo(
			ulong hHandle,
			out uint punResponseSize,
			out Result peResult) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUnifiedMessages_GetMethodResponseInfo(_ptr, hHandle, out punResponseSize,
					out peResult)
				: throw new Exception("ISteamUnifiedMessages _ptr is null!");
		}

		public virtual bool ISteamUnifiedMessages_GetMethodResponseData(
			ulong hHandle,
			IntPtr pResponseBuffer,
			uint unResponseBufferSize,
			[MarshalAs(UnmanagedType.U1)] bool bAutoRelease) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUnifiedMessages _ptr is null!");
			return Native.SteamAPI_ISteamUnifiedMessages_GetMethodResponseData(_ptr, hHandle, pResponseBuffer,
				unResponseBufferSize, bAutoRelease);
		}

		public virtual bool ISteamUnifiedMessages_ReleaseMethod(ulong hHandle) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUnifiedMessages_ReleaseMethod(_ptr, hHandle)
				: throw new Exception("ISteamUnifiedMessages _ptr is null!");
		}

		public virtual bool ISteamUnifiedMessages_SendNotification(
			string pchServiceNotification,
			IntPtr pNotificationBuffer,
			uint unNotificationBufferSize) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUnifiedMessages _ptr is null!");
			return Native.SteamAPI_ISteamUnifiedMessages_SendNotification(_ptr, pchServiceNotification,
				pNotificationBuffer, unNotificationBufferSize);
		}

		public virtual bool ISteamController_Init() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamController_Init(_ptr)
				: throw new Exception("ISteamController _ptr is null!");
		}

		public virtual bool ISteamController_Shutdown() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamController_Shutdown(_ptr)
				: throw new Exception("ISteamController _ptr is null!");
		}

		public virtual void ISteamController_RunFrame() {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamController _ptr is null!");
			Native.SteamAPI_ISteamController_RunFrame(_ptr);
		}

		public virtual int ISteamController_GetConnectedControllers(IntPtr handlesOut) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamController_GetConnectedControllers(_ptr, handlesOut)
				: throw new Exception("ISteamController _ptr is null!");
		}

		public virtual bool ISteamController_ShowBindingPanel(ulong controllerHandle) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamController_ShowBindingPanel(_ptr, controllerHandle)
				: throw new Exception("ISteamController _ptr is null!");
		}

		public virtual ControllerActionSetHandle_t ISteamController_GetActionSetHandle(
			string pszActionSetName) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamController_GetActionSetHandle(_ptr, pszActionSetName)
				: throw new Exception("ISteamController _ptr is null!");
		}

		public virtual void ISteamController_ActivateActionSet(
			ulong controllerHandle,
			ulong actionSetHandle) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamController _ptr is null!");
			Native.SteamAPI_ISteamController_ActivateActionSet(_ptr, controllerHandle, actionSetHandle);
		}

		public virtual ControllerActionSetHandle_t ISteamController_GetCurrentActionSet(
			ulong controllerHandle) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamController_GetCurrentActionSet(_ptr, controllerHandle)
				: throw new Exception("ISteamController _ptr is null!");
		}

		public virtual ControllerDigitalActionHandle_t ISteamController_GetDigitalActionHandle(
			string pszActionName) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamController_GetDigitalActionHandle(_ptr, pszActionName)
				: throw new Exception("ISteamController _ptr is null!");
		}

		public virtual ControllerDigitalActionData_t ISteamController_GetDigitalActionData(
			ulong controllerHandle,
			ulong digitalActionHandle) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamController _ptr is null!");
			return Native.SteamAPI_ISteamController_GetDigitalActionData(_ptr, controllerHandle, digitalActionHandle);
		}

		public virtual int ISteamController_GetDigitalActionOrigins(
			ulong controllerHandle,
			ulong actionSetHandle,
			ulong digitalActionHandle,
			out ControllerActionOrigin originsOut) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamController _ptr is null!");
			return Native.SteamAPI_ISteamController_GetDigitalActionOrigins(_ptr, controllerHandle, actionSetHandle,
				digitalActionHandle, out originsOut);
		}

		public virtual ControllerAnalogActionHandle_t ISteamController_GetAnalogActionHandle(
			string pszActionName) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamController_GetAnalogActionHandle(_ptr, pszActionName)
				: throw new Exception("ISteamController _ptr is null!");
		}

		public virtual ControllerAnalogActionData_t ISteamController_GetAnalogActionData(
			ulong controllerHandle,
			ulong analogActionHandle) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamController _ptr is null!");
			return Native.SteamAPI_ISteamController_GetAnalogActionData(_ptr, controllerHandle, analogActionHandle);
		}

		public virtual int ISteamController_GetAnalogActionOrigins(
			ulong controllerHandle,
			ulong actionSetHandle,
			ulong analogActionHandle,
			out ControllerActionOrigin originsOut) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamController _ptr is null!");
			return Native.SteamAPI_ISteamController_GetAnalogActionOrigins(_ptr, controllerHandle, actionSetHandle,
				analogActionHandle, out originsOut);
		}

		public virtual void ISteamController_StopAnalogActionMomentum(
			ulong controllerHandle,
			ulong eAction) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamController _ptr is null!");
			Native.SteamAPI_ISteamController_StopAnalogActionMomentum(_ptr, controllerHandle, eAction);
		}

		public virtual void ISteamController_TriggerHapticPulse(
			ulong controllerHandle,
			SteamControllerPad eTargetPad,
			ushort usDurationMicroSec) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamController _ptr is null!");
			Native.SteamAPI_ISteamController_TriggerHapticPulse(_ptr, controllerHandle, eTargetPad, usDurationMicroSec);
		}

		public virtual void ISteamController_TriggerRepeatedHapticPulse(
			ulong controllerHandle,
			SteamControllerPad eTargetPad,
			ushort usDurationMicroSec,
			ushort usOffMicroSec,
			ushort unRepeat,
			uint nFlags) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamController _ptr is null!");
			Native.SteamAPI_ISteamController_TriggerRepeatedHapticPulse(_ptr, controllerHandle, eTargetPad,
				usDurationMicroSec, usOffMicroSec, unRepeat, nFlags);
		}

		public virtual void ISteamController_TriggerVibration(
			ulong controllerHandle,
			ushort usLeftSpeed,
			ushort usRightSpeed) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamController _ptr is null!");
			Native.SteamAPI_ISteamController_TriggerVibration(_ptr, controllerHandle, usLeftSpeed, usRightSpeed);
		}

		public virtual void ISteamController_SetLEDColor(
			ulong controllerHandle,
			byte nColorR,
			byte nColorG,
			byte nColorB,
			uint nFlags) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamController _ptr is null!");
			Native.SteamAPI_ISteamController_SetLEDColor(_ptr, controllerHandle, nColorR, nColorG, nColorB, nFlags);
		}

		public virtual int ISteamController_GetGamepadIndexForController(ulong ulControllerHandle) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamController_GetGamepadIndexForController(_ptr, ulControllerHandle)
				: throw new Exception("ISteamController _ptr is null!");
		}

		public virtual ControllerHandle_t ISteamController_GetControllerForGamepadIndex(int nIndex) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamController_GetControllerForGamepadIndex(_ptr, nIndex)
				: throw new Exception("ISteamController _ptr is null!");
		}

		public virtual ControllerMotionData_t ISteamController_GetMotionData(ulong controllerHandle) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamController_GetMotionData(_ptr, controllerHandle)
				: throw new Exception("ISteamController _ptr is null!");
		}

		public virtual bool ISteamController_ShowDigitalActionOrigins(
			ulong controllerHandle,
			ulong digitalActionHandle,
			float flScale,
			float flXPosition,
			float flYPosition) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamController _ptr is null!");
			return Native.SteamAPI_ISteamController_ShowDigitalActionOrigins(_ptr, controllerHandle,
				digitalActionHandle, flScale, flXPosition, flYPosition);
		}

		public virtual bool ISteamController_ShowAnalogActionOrigins(
			ulong controllerHandle,
			ulong analogActionHandle,
			float flScale,
			float flXPosition,
			float flYPosition) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamController _ptr is null!");
			return Native.SteamAPI_ISteamController_ShowAnalogActionOrigins(_ptr, controllerHandle, analogActionHandle,
				flScale, flXPosition, flYPosition);
		}

		public virtual IntPtr ISteamController_GetStringForActionOrigin(ControllerActionOrigin eOrigin) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamController_GetStringForActionOrigin(_ptr, eOrigin)
				: throw new Exception("ISteamController _ptr is null!");
		}

		public virtual IntPtr ISteamController_GetGlyphForActionOrigin(ControllerActionOrigin eOrigin) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamController_GetGlyphForActionOrigin(_ptr, eOrigin)
				: throw new Exception("ISteamController _ptr is null!");
		}

		public virtual UGCQueryHandle_t ISteamUGC_CreateQueryUserUGCRequest(
			uint unAccountID,
			UserUGCList eListType,
			UGCMatchingUGCType eMatchingUGCType,
			UserUGCListSortOrder eSortOrder,
			uint nCreatorAppID,
			uint nConsumerAppID,
			uint unPage) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_CreateQueryUserUGCRequest(_ptr, unAccountID, eListType, eMatchingUGCType,
				eSortOrder, nCreatorAppID, nConsumerAppID, unPage);
		}

		public virtual UGCQueryHandle_t ISteamUGC_CreateQueryAllUGCRequest(
			UGCQuery eQueryType,
			UGCMatchingUGCType eMatchingeMatchingUGCTypeFileType,
			uint nCreatorAppID,
			uint nConsumerAppID,
			uint unPage) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_CreateQueryAllUGCRequest(_ptr, eQueryType,
				eMatchingeMatchingUGCTypeFileType, nCreatorAppID, nConsumerAppID, unPage);
		}

		public virtual UGCQueryHandle_t ISteamUGC_CreateQueryUGCDetailsRequest(
			IntPtr pvecPublishedFileID,
			uint unNumPublishedFileIDs) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_CreateQueryUGCDetailsRequest(_ptr, pvecPublishedFileID,
				unNumPublishedFileIDs);
		}

		public virtual SteamAPICall_t ISteamUGC_SendQueryUGCRequest(ulong handle) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUGC_SendQueryUGCRequest(_ptr, handle)
				: throw new Exception("ISteamUGC _ptr is null!");
		}

		public virtual bool ISteamUGC_GetQueryUGCResult(
			ulong handle,
			uint index,
			ref SteamUGCDetails_t pDetails) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_GetQueryUGCResult(_ptr, handle, index, ref pDetails);
		}

		public virtual bool ISteamUGC_GetQueryUGCPreviewURL(
			ulong handle,
			uint index,
			StringBuilder pchURL,
			uint cchURLSize) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_GetQueryUGCPreviewURL(_ptr, handle, index, pchURL, cchURLSize);
		}

		public virtual bool ISteamUGC_GetQueryUGCMetadata(
			ulong handle,
			uint index,
			StringBuilder pchMetadata,
			uint cchMetadatasize) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_GetQueryUGCMetadata(_ptr, handle, index, pchMetadata, cchMetadatasize);
		}

		public virtual bool ISteamUGC_GetQueryUGCChildren(
			ulong handle,
			uint index,
			IntPtr pvecPublishedFileID,
			uint cMaxEntries) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_GetQueryUGCChildren(_ptr, handle, index, pvecPublishedFileID, cMaxEntries);
		}

		public virtual bool ISteamUGC_GetQueryUGCStatistic(
			ulong handle,
			uint index,
			ItemStatistic eStatType,
			out ulong pStatValue) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_GetQueryUGCStatistic(_ptr, handle, index, eStatType, out pStatValue);
		}

		public virtual uint ISteamUGC_GetQueryUGCNumAdditionalPreviews(ulong handle, uint index) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_GetQueryUGCNumAdditionalPreviews(_ptr, handle, index);
		}

		public virtual bool ISteamUGC_GetQueryUGCAdditionalPreview(
			ulong handle,
			uint index,
			uint previewIndex,
			StringBuilder pchURLOrVideoID,
			uint cchURLSize,
			StringBuilder pchOriginalFileName,
			uint cchOriginalFileNameSize,
			out ItemPreviewType pPreviewType) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_GetQueryUGCAdditionalPreview(_ptr, handle, index, previewIndex,
				pchURLOrVideoID, cchURLSize, pchOriginalFileName, cchOriginalFileNameSize, out pPreviewType);
		}

		public virtual uint ISteamUGC_GetQueryUGCNumKeyValueTags(ulong handle, uint index) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_GetQueryUGCNumKeyValueTags(_ptr, handle, index);
		}

		public virtual bool ISteamUGC_GetQueryUGCKeyValueTag(
			ulong handle,
			uint index,
			uint keyValueTagIndex,
			StringBuilder pchKey,
			uint cchKeySize,
			StringBuilder pchValue,
			uint cchValueSize) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_GetQueryUGCKeyValueTag(_ptr, handle, index, keyValueTagIndex, pchKey,
				cchKeySize, pchValue, cchValueSize);
		}

		public virtual bool ISteamUGC_ReleaseQueryUGCRequest(ulong handle) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUGC_ReleaseQueryUGCRequest(_ptr, handle)
				: throw new Exception("ISteamUGC _ptr is null!");
		}

		public virtual bool ISteamUGC_AddRequiredTag(ulong handle, string pTagName) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_AddRequiredTag(_ptr, handle, pTagName);
		}

		public virtual bool ISteamUGC_AddExcludedTag(ulong handle, string pTagName) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_AddExcludedTag(_ptr, handle, pTagName);
		}

		public virtual bool
			ISteamUGC_SetReturnOnlyIDs(ulong handle, [MarshalAs(UnmanagedType.U1)] bool bReturnOnlyIDs) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_SetReturnOnlyIDs(_ptr, handle, bReturnOnlyIDs);
		}

		public virtual bool ISteamUGC_SetReturnKeyValueTags(ulong handle,
			[MarshalAs(UnmanagedType.U1)] bool bReturnKeyValueTags) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_SetReturnKeyValueTags(_ptr, handle, bReturnKeyValueTags);
		}

		public virtual bool ISteamUGC_SetReturnLongDescription(
			ulong handle,
			[MarshalAs(UnmanagedType.U1)] bool bReturnLongDescription) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_SetReturnLongDescription(_ptr, handle, bReturnLongDescription);
		}

		public virtual bool ISteamUGC_SetReturnMetadata(ulong handle,
			[MarshalAs(UnmanagedType.U1)] bool bReturnMetadata) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_SetReturnMetadata(_ptr, handle, bReturnMetadata);
		}

		public virtual bool ISteamUGC_SetReturnChildren(ulong handle,
			[MarshalAs(UnmanagedType.U1)] bool bReturnChildren) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_SetReturnChildren(_ptr, handle, bReturnChildren);
		}

		public virtual bool ISteamUGC_SetReturnAdditionalPreviews(
			ulong handle,
			[MarshalAs(UnmanagedType.U1)] bool bReturnAdditionalPreviews) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_SetReturnAdditionalPreviews(_ptr, handle, bReturnAdditionalPreviews);
		}

		public virtual bool ISteamUGC_SetReturnTotalOnly(ulong handle,
			[MarshalAs(UnmanagedType.U1)] bool bReturnTotalOnly) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_SetReturnTotalOnly(_ptr, handle, bReturnTotalOnly);
		}

		public virtual bool ISteamUGC_SetReturnPlaytimeStats(ulong handle, uint unDays) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_SetReturnPlaytimeStats(_ptr, handle, unDays);
		}

		public virtual bool ISteamUGC_SetLanguage(ulong handle, string pchLanguage) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_SetLanguage(_ptr, handle, pchLanguage);
		}

		public virtual bool ISteamUGC_SetAllowCachedResponse(ulong handle, uint unMaxAgeSeconds) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_SetAllowCachedResponse(_ptr, handle, unMaxAgeSeconds);
		}

		public virtual bool ISteamUGC_SetCloudFileNameFilter(ulong handle, string pMatchCloudFileName) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_SetCloudFileNameFilter(_ptr, handle, pMatchCloudFileName);
		}

		public virtual bool ISteamUGC_SetMatchAnyTag(ulong handle, [MarshalAs(UnmanagedType.U1)] bool bMatchAnyTag) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_SetMatchAnyTag(_ptr, handle, bMatchAnyTag);
		}

		public virtual bool ISteamUGC_SetSearchText(ulong handle, string pSearchText) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_SetSearchText(_ptr, handle, pSearchText);
		}

		public virtual bool ISteamUGC_SetRankedByTrendDays(ulong handle, uint unDays) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_SetRankedByTrendDays(_ptr, handle, unDays);
		}

		public virtual bool ISteamUGC_AddRequiredKeyValueTag(
			ulong handle,
			string pKey,
			string pValue) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_AddRequiredKeyValueTag(_ptr, handle, pKey, pValue);
		}

		public virtual SteamAPICall_t ISteamUGC_RequestUGCDetails(
			ulong nPublishedFileID,
			uint unMaxAgeSeconds) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_RequestUGCDetails(_ptr, nPublishedFileID, unMaxAgeSeconds);
		}

		public virtual SteamAPICall_t ISteamUGC_CreateItem(
			uint nConsumerAppId,
			WorkshopFileType eFileType) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_CreateItem(_ptr, nConsumerAppId, eFileType);
		}

		public virtual UGCUpdateHandle_t ISteamUGC_StartItemUpdate(
			uint nConsumerAppId,
			ulong nPublishedFileID) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_StartItemUpdate(_ptr, nConsumerAppId, nPublishedFileID);
		}

		public virtual bool ISteamUGC_SetItemTitle(ulong handle, string pchTitle) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_SetItemTitle(_ptr, handle, pchTitle);
		}

		public virtual bool ISteamUGC_SetItemDescription(ulong handle, string pchDescription) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_SetItemDescription(_ptr, handle, pchDescription);
		}

		public virtual bool ISteamUGC_SetItemUpdateLanguage(ulong handle, string pchLanguage) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_SetItemUpdateLanguage(_ptr, handle, pchLanguage);
		}

		public virtual bool ISteamUGC_SetItemMetadata(ulong handle, string pchMetaData) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_SetItemMetadata(_ptr, handle, pchMetaData);
		}

		public virtual bool ISteamUGC_SetItemVisibility(
			ulong handle,
			RemoteStoragePublishedFileVisibility eVisibility) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_SetItemVisibility(_ptr, handle, eVisibility);
		}

		public virtual bool ISteamUGC_SetItemTags(
			ulong updateHandle,
			ref SteamParamStringArray_t pTags) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_SetItemTags(_ptr, updateHandle, ref pTags);
		}

		public virtual bool ISteamUGC_SetItemContent(ulong handle, string pszContentFolder) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_SetItemContent(_ptr, handle, pszContentFolder);
		}

		public virtual bool ISteamUGC_SetItemPreview(ulong handle, string pszPreviewFile) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_SetItemPreview(_ptr, handle, pszPreviewFile);
		}

		public virtual bool ISteamUGC_RemoveItemKeyValueTags(ulong handle, string pchKey) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_RemoveItemKeyValueTags(_ptr, handle, pchKey);
		}

		public virtual bool ISteamUGC_AddItemKeyValueTag(
			ulong handle,
			string pchKey,
			string pchValue) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_AddItemKeyValueTag(_ptr, handle, pchKey, pchValue);
		}

		public virtual bool ISteamUGC_AddItemPreviewFile(
			ulong handle,
			string pszPreviewFile,
			ItemPreviewType type) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_AddItemPreviewFile(_ptr, handle, pszPreviewFile, type);
		}

		public virtual bool ISteamUGC_AddItemPreviewVideo(ulong handle, string pszVideoID) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_AddItemPreviewVideo(_ptr, handle, pszVideoID);
		}

		public virtual bool ISteamUGC_UpdateItemPreviewFile(
			ulong handle,
			uint index,
			string pszPreviewFile) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_UpdateItemPreviewFile(_ptr, handle, index, pszPreviewFile);
		}

		public virtual bool ISteamUGC_UpdateItemPreviewVideo(
			ulong handle,
			uint index,
			string pszVideoID) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_UpdateItemPreviewVideo(_ptr, handle, index, pszVideoID);
		}

		public virtual bool ISteamUGC_RemoveItemPreview(ulong handle, uint index) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_RemoveItemPreview(_ptr, handle, index);
		}

		public virtual SteamAPICall_t ISteamUGC_SubmitItemUpdate(ulong handle, string pchChangeNote) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_SubmitItemUpdate(_ptr, handle, pchChangeNote);
		}

		public virtual ItemUpdateStatus ISteamUGC_GetItemUpdateProgress(
			ulong handle,
			out ulong punBytesProcessed,
			out ulong punBytesTotal) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUGC_GetItemUpdateProgress(_ptr, handle, out punBytesProcessed,
					out punBytesTotal)
				: throw new Exception("ISteamUGC _ptr is null!");
		}

		public virtual SteamAPICall_t ISteamUGC_SetUserItemVote(ulong nPublishedFileID,
			[MarshalAs(UnmanagedType.U1)] bool bVoteUp) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_SetUserItemVote(_ptr, nPublishedFileID, bVoteUp);
		}

		public virtual SteamAPICall_t ISteamUGC_GetUserItemVote(ulong nPublishedFileID) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUGC_GetUserItemVote(_ptr, nPublishedFileID)
				: throw new Exception("ISteamUGC _ptr is null!");
		}

		public virtual SteamAPICall_t ISteamUGC_AddItemToFavorites(
			uint nAppId,
			ulong nPublishedFileID) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_AddItemToFavorites(_ptr, nAppId, nPublishedFileID);
		}

		public virtual SteamAPICall_t ISteamUGC_RemoveItemFromFavorites(
			uint nAppId,
			ulong nPublishedFileID) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_RemoveItemFromFavorites(_ptr, nAppId, nPublishedFileID);
		}

		public virtual SteamAPICall_t ISteamUGC_SubscribeItem(ulong nPublishedFileID) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUGC_SubscribeItem(_ptr, nPublishedFileID)
				: throw new Exception("ISteamUGC _ptr is null!");
		}

		public virtual SteamAPICall_t ISteamUGC_UnsubscribeItem(ulong nPublishedFileID) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUGC_UnsubscribeItem(_ptr, nPublishedFileID)
				: throw new Exception("ISteamUGC _ptr is null!");
		}

		public virtual uint ISteamUGC_GetNumSubscribedItems() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUGC_GetNumSubscribedItems(_ptr)
				: throw new Exception("ISteamUGC _ptr is null!");
		}

		public virtual uint ISteamUGC_GetSubscribedItems(IntPtr pvecPublishedFileID, uint cMaxEntries) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_GetSubscribedItems(_ptr, pvecPublishedFileID, cMaxEntries);
		}

		public virtual uint ISteamUGC_GetItemState(ulong nPublishedFileID) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUGC_GetItemState(_ptr, nPublishedFileID)
				: throw new Exception("ISteamUGC _ptr is null!");
		}

		public virtual bool ISteamUGC_GetItemInstallInfo(
			ulong nPublishedFileID,
			out ulong punSizeOnDisk,
			StringBuilder pchFolder,
			uint cchFolderSize,
			out uint punTimeStamp) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_GetItemInstallInfo(_ptr, nPublishedFileID, out punSizeOnDisk, pchFolder,
				cchFolderSize, out punTimeStamp);
		}

		public virtual bool ISteamUGC_GetItemDownloadInfo(
			ulong nPublishedFileID,
			out ulong punBytesDownloaded,
			out ulong punBytesTotal) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUGC_GetItemDownloadInfo(_ptr, nPublishedFileID, out punBytesDownloaded,
					out punBytesTotal)
				: throw new Exception("ISteamUGC _ptr is null!");
		}

		public virtual bool ISteamUGC_DownloadItem(ulong nPublishedFileID,
			[MarshalAs(UnmanagedType.U1)] bool bHighPriority) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_DownloadItem(_ptr, nPublishedFileID, bHighPriority);
		}

		public virtual bool ISteamUGC_BInitWorkshopForGameServer(
			uint unWorkshopDepotID,
			string pszFolder) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_BInitWorkshopForGameServer(_ptr, unWorkshopDepotID, pszFolder);
		}

		public virtual void ISteamUGC_SuspendDownloads([MarshalAs(UnmanagedType.U1)] bool bSuspend) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			Native.SteamAPI_ISteamUGC_SuspendDownloads(_ptr, bSuspend);
		}

		public virtual SteamAPICall_t ISteamUGC_StartPlaytimeTracking(
			IntPtr pvecPublishedFileID,
			uint unNumPublishedFileIDs) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_StartPlaytimeTracking(_ptr, pvecPublishedFileID, unNumPublishedFileIDs);
		}

		public virtual SteamAPICall_t ISteamUGC_StopPlaytimeTracking(
			IntPtr pvecPublishedFileID,
			uint unNumPublishedFileIDs) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_StopPlaytimeTracking(_ptr, pvecPublishedFileID, unNumPublishedFileIDs);
		}

		public virtual SteamAPICall_t ISteamUGC_StopPlaytimeTrackingForAllItems() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamUGC_StopPlaytimeTrackingForAllItems(_ptr)
				: throw new Exception("ISteamUGC _ptr is null!");
		}

		public virtual SteamAPICall_t ISteamUGC_AddDependency(
			ulong nParentPublishedFileID,
			ulong nChildPublishedFileID) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_AddDependency(_ptr, nParentPublishedFileID, nChildPublishedFileID);
		}

		public virtual SteamAPICall_t ISteamUGC_RemoveDependency(
			ulong nParentPublishedFileID,
			ulong nChildPublishedFileID) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamUGC _ptr is null!");
			return Native.SteamAPI_ISteamUGC_RemoveDependency(_ptr, nParentPublishedFileID, nChildPublishedFileID);
		}

		public virtual uint ISteamAppList_GetNumInstalledApps() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamAppList_GetNumInstalledApps(_ptr)
				: throw new Exception("ISteamAppList _ptr is null!");
		}

		public virtual uint ISteamAppList_GetInstalledApps(IntPtr pvecAppID, uint unMaxAppIDs) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamAppList _ptr is null!");
			return Native.SteamAPI_ISteamAppList_GetInstalledApps(_ptr, pvecAppID, unMaxAppIDs);
		}

		public virtual int ISteamAppList_GetAppName(
			uint nAppID,
			StringBuilder pchName,
			int cchNameMax) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamAppList _ptr is null!");
			return Native.SteamAPI_ISteamAppList_GetAppName(_ptr, nAppID, pchName, cchNameMax);
		}

		public virtual int ISteamAppList_GetAppInstallDir(
			uint nAppID,
			StringBuilder pchDirectory,
			int cchNameMax) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamAppList _ptr is null!");
			return Native.SteamAPI_ISteamAppList_GetAppInstallDir(_ptr, nAppID, pchDirectory, cchNameMax);
		}

		public virtual int ISteamAppList_GetAppBuildId(uint nAppID) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamAppList_GetAppBuildId(_ptr, nAppID)
				: throw new Exception("ISteamAppList _ptr is null!");
		}

		public virtual void ISteamHTMLSurface_DestructISteamHTMLSurface() {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTMLSurface _ptr is null!");
			Native.SteamAPI_ISteamHTMLSurface_DestructISteamHTMLSurface(_ptr);
		}

		public virtual bool ISteamHTMLSurface_Init() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamHTMLSurface_Init(_ptr)
				: throw new Exception("ISteamHTMLSurface _ptr is null!");
		}

		public virtual bool ISteamHTMLSurface_Shutdown() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamHTMLSurface_Shutdown(_ptr)
				: throw new Exception("ISteamHTMLSurface _ptr is null!");
		}

		public virtual SteamAPICall_t ISteamHTMLSurface_CreateBrowser(
			string pchUserAgent,
			string pchUserCSS) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTMLSurface _ptr is null!");
			return Native.SteamAPI_ISteamHTMLSurface_CreateBrowser(_ptr, pchUserAgent, pchUserCSS);
		}

		public virtual void ISteamHTMLSurface_RemoveBrowser(uint unBrowserHandle) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTMLSurface _ptr is null!");
			Native.SteamAPI_ISteamHTMLSurface_RemoveBrowser(_ptr, unBrowserHandle);
		}

		public virtual void ISteamHTMLSurface_LoadURL(
			uint unBrowserHandle,
			string pchURL,
			string pchPostData) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTMLSurface _ptr is null!");
			Native.SteamAPI_ISteamHTMLSurface_LoadURL(_ptr, unBrowserHandle, pchURL, pchPostData);
		}

		public virtual void ISteamHTMLSurface_SetSize(
			uint unBrowserHandle,
			uint unWidth,
			uint unHeight) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTMLSurface _ptr is null!");
			Native.SteamAPI_ISteamHTMLSurface_SetSize(_ptr, unBrowserHandle, unWidth, unHeight);
		}

		public virtual void ISteamHTMLSurface_StopLoad(uint unBrowserHandle) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTMLSurface _ptr is null!");
			Native.SteamAPI_ISteamHTMLSurface_StopLoad(_ptr, unBrowserHandle);
		}

		public virtual void ISteamHTMLSurface_Reload(uint unBrowserHandle) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTMLSurface _ptr is null!");
			Native.SteamAPI_ISteamHTMLSurface_Reload(_ptr, unBrowserHandle);
		}

		public virtual void ISteamHTMLSurface_GoBack(uint unBrowserHandle) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTMLSurface _ptr is null!");
			Native.SteamAPI_ISteamHTMLSurface_GoBack(_ptr, unBrowserHandle);
		}

		public virtual void ISteamHTMLSurface_GoForward(uint unBrowserHandle) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTMLSurface _ptr is null!");
			Native.SteamAPI_ISteamHTMLSurface_GoForward(_ptr, unBrowserHandle);
		}

		public virtual void ISteamHTMLSurface_AddHeader(
			uint unBrowserHandle,
			string pchKey,
			string pchValue) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTMLSurface _ptr is null!");
			Native.SteamAPI_ISteamHTMLSurface_AddHeader(_ptr, unBrowserHandle, pchKey, pchValue);
		}

		public virtual void ISteamHTMLSurface_ExecuteJavascript(
			uint unBrowserHandle,
			string pchScript) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTMLSurface _ptr is null!");
			Native.SteamAPI_ISteamHTMLSurface_ExecuteJavascript(_ptr, unBrowserHandle, pchScript);
		}

		public virtual void ISteamHTMLSurface_MouseUp(
			uint unBrowserHandle,
			HTMLMouseButton eMouseButton) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTMLSurface _ptr is null!");
			Native.SteamAPI_ISteamHTMLSurface_MouseUp(_ptr, unBrowserHandle, eMouseButton);
		}

		public virtual void ISteamHTMLSurface_MouseDown(
			uint unBrowserHandle,
			HTMLMouseButton eMouseButton) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTMLSurface _ptr is null!");
			Native.SteamAPI_ISteamHTMLSurface_MouseDown(_ptr, unBrowserHandle, eMouseButton);
		}

		public virtual void ISteamHTMLSurface_MouseDoubleClick(
			uint unBrowserHandle,
			HTMLMouseButton eMouseButton) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTMLSurface _ptr is null!");
			Native.SteamAPI_ISteamHTMLSurface_MouseDoubleClick(_ptr, unBrowserHandle, eMouseButton);
		}

		public virtual void ISteamHTMLSurface_MouseMove(uint unBrowserHandle, int x, int y) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTMLSurface _ptr is null!");
			Native.SteamAPI_ISteamHTMLSurface_MouseMove(_ptr, unBrowserHandle, x, y);
		}

		public virtual void ISteamHTMLSurface_MouseWheel(uint unBrowserHandle, int nDelta) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTMLSurface _ptr is null!");
			Native.SteamAPI_ISteamHTMLSurface_MouseWheel(_ptr, unBrowserHandle, nDelta);
		}

		public virtual void ISteamHTMLSurface_KeyDown(
			uint unBrowserHandle,
			uint nNativeKeyCode,
			HTMLKeyModifiers eHTMLKeyModifiers) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTMLSurface _ptr is null!");
			Native.SteamAPI_ISteamHTMLSurface_KeyDown(_ptr, unBrowserHandle, nNativeKeyCode, eHTMLKeyModifiers);
		}

		public virtual void ISteamHTMLSurface_KeyUp(
			uint unBrowserHandle,
			uint nNativeKeyCode,
			HTMLKeyModifiers eHTMLKeyModifiers) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTMLSurface _ptr is null!");
			Native.SteamAPI_ISteamHTMLSurface_KeyUp(_ptr, unBrowserHandle, nNativeKeyCode, eHTMLKeyModifiers);
		}

		public virtual void ISteamHTMLSurface_KeyChar(
			uint unBrowserHandle,
			uint cUnicodeChar,
			HTMLKeyModifiers eHTMLKeyModifiers) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTMLSurface _ptr is null!");
			Native.SteamAPI_ISteamHTMLSurface_KeyChar(_ptr, unBrowserHandle, cUnicodeChar, eHTMLKeyModifiers);
		}

		public virtual void ISteamHTMLSurface_SetHorizontalScroll(
			uint unBrowserHandle,
			uint nAbsolutePixelScroll) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTMLSurface _ptr is null!");
			Native.SteamAPI_ISteamHTMLSurface_SetHorizontalScroll(_ptr, unBrowserHandle, nAbsolutePixelScroll);
		}

		public virtual void ISteamHTMLSurface_SetVerticalScroll(
			uint unBrowserHandle,
			uint nAbsolutePixelScroll) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTMLSurface _ptr is null!");
			Native.SteamAPI_ISteamHTMLSurface_SetVerticalScroll(_ptr, unBrowserHandle, nAbsolutePixelScroll);
		}

		public virtual void ISteamHTMLSurface_SetKeyFocus(uint unBrowserHandle,
			[MarshalAs(UnmanagedType.U1)] bool bHasKeyFocus) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTMLSurface _ptr is null!");
			Native.SteamAPI_ISteamHTMLSurface_SetKeyFocus(_ptr, unBrowserHandle, bHasKeyFocus);
		}

		public virtual void ISteamHTMLSurface_ViewSource(uint unBrowserHandle) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTMLSurface _ptr is null!");
			Native.SteamAPI_ISteamHTMLSurface_ViewSource(_ptr, unBrowserHandle);
		}

		public virtual void ISteamHTMLSurface_CopyToClipboard(uint unBrowserHandle) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTMLSurface _ptr is null!");
			Native.SteamAPI_ISteamHTMLSurface_CopyToClipboard(_ptr, unBrowserHandle);
		}

		public virtual void ISteamHTMLSurface_PasteFromClipboard(uint unBrowserHandle) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTMLSurface _ptr is null!");
			Native.SteamAPI_ISteamHTMLSurface_PasteFromClipboard(_ptr, unBrowserHandle);
		}

		public virtual void ISteamHTMLSurface_Find(
			uint unBrowserHandle,
			string pchSearchStr,
			[MarshalAs(UnmanagedType.U1)] bool bCurrentlyInFind,
			[MarshalAs(UnmanagedType.U1)] bool bReverse) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTMLSurface _ptr is null!");
			Native.SteamAPI_ISteamHTMLSurface_Find(_ptr, unBrowserHandle, pchSearchStr, bCurrentlyInFind, bReverse);
		}

		public virtual void ISteamHTMLSurface_StopFind(uint unBrowserHandle) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTMLSurface _ptr is null!");
			Native.SteamAPI_ISteamHTMLSurface_StopFind(_ptr, unBrowserHandle);
		}

		public virtual void ISteamHTMLSurface_GetLinkAtPosition(uint unBrowserHandle, int x, int y) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTMLSurface _ptr is null!");
			Native.SteamAPI_ISteamHTMLSurface_GetLinkAtPosition(_ptr, unBrowserHandle, x, y);
		}

		public virtual void ISteamHTMLSurface_SetCookie(
			string pchHostname,
			string pchKey,
			string pchValue,
			string pchPath,
			uint nExpires,
			[MarshalAs(UnmanagedType.U1)] bool bSecure,
			[MarshalAs(UnmanagedType.U1)] bool bHTTPOnly) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTMLSurface _ptr is null!");
			Native.SteamAPI_ISteamHTMLSurface_SetCookie(_ptr, pchHostname, pchKey, pchValue, pchPath, nExpires, bSecure,
				bHTTPOnly);
		}

		public virtual void ISteamHTMLSurface_SetPageScaleFactor(
			uint unBrowserHandle,
			float flZoom,
			int nPointX,
			int nPointY) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTMLSurface _ptr is null!");
			Native.SteamAPI_ISteamHTMLSurface_SetPageScaleFactor(_ptr, unBrowserHandle, flZoom, nPointX, nPointY);
		}

		public virtual void ISteamHTMLSurface_SetBackgroundMode(
			uint unBrowserHandle,
			[MarshalAs(UnmanagedType.U1)] bool bBackgroundMode) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTMLSurface _ptr is null!");
			Native.SteamAPI_ISteamHTMLSurface_SetBackgroundMode(_ptr, unBrowserHandle, bBackgroundMode);
		}

		public virtual void ISteamHTMLSurface_AllowStartRequest(uint unBrowserHandle,
			[MarshalAs(UnmanagedType.U1)] bool bAllowed) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTMLSurface _ptr is null!");
			Native.SteamAPI_ISteamHTMLSurface_AllowStartRequest(_ptr, unBrowserHandle, bAllowed);
		}

		public virtual void ISteamHTMLSurface_JSDialogResponse(uint unBrowserHandle,
			[MarshalAs(UnmanagedType.U1)] bool bResult) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamHTMLSurface _ptr is null!");
			Native.SteamAPI_ISteamHTMLSurface_JSDialogResponse(_ptr, unBrowserHandle, bResult);
		}

		public virtual Result ISteamInventory_GetResultStatus(int resultHandle) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamInventory_GetResultStatus(_ptr, resultHandle)
				: throw new Exception("ISteamInventory _ptr is null!");
		}

		public virtual bool ISteamInventory_GetResultItems(
			int resultHandle,
			IntPtr pOutItemsArray,
			out uint punOutItemsArraySize) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamInventory _ptr is null!");
			return Native.SteamAPI_ISteamInventory_GetResultItems(_ptr, resultHandle, pOutItemsArray,
				out punOutItemsArraySize);
		}

		public virtual bool ISteamInventory_GetResultItemProperty(
			int resultHandle,
			uint unItemIndex,
			string pchPropertyName,
			StringBuilder pchValueBuffer,
			out uint punValueBufferSizeOut) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamInventory _ptr is null!");
			return Native.SteamAPI_ISteamInventory_GetResultItemProperty(_ptr, resultHandle, unItemIndex,
				pchPropertyName, pchValueBuffer, out punValueBufferSizeOut);
		}

		public virtual uint ISteamInventory_GetResultTimestamp(int resultHandle) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamInventory_GetResultTimestamp(_ptr, resultHandle)
				: throw new Exception("ISteamInventory _ptr is null!");
		}

		public virtual bool ISteamInventory_CheckResultSteamID(
			int resultHandle,
			ulong steamIDExpected) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamInventory _ptr is null!");
			return Native.SteamAPI_ISteamInventory_CheckResultSteamID(_ptr, resultHandle, steamIDExpected);
		}

		public virtual void ISteamInventory_DestroyResult(int resultHandle) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamInventory _ptr is null!");
			Native.SteamAPI_ISteamInventory_DestroyResult(_ptr, resultHandle);
		}

		public virtual bool ISteamInventory_GetAllItems(ref int pResultHandle) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamInventory_GetAllItems(_ptr, ref pResultHandle)
				: throw new Exception("ISteamInventory _ptr is null!");
		}

		public virtual bool ISteamInventory_GetItemsByID(
			ref int pResultHandle,
			ulong[] pInstanceIDs,
			uint unCountInstanceIDs) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamInventory _ptr is null!");
			return Native.SteamAPI_ISteamInventory_GetItemsByID(_ptr, ref pResultHandle, pInstanceIDs,
				unCountInstanceIDs);
		}

		public virtual bool ISteamInventory_SerializeResult(
			int resultHandle,
			IntPtr pOutBuffer,
			out uint punOutBufferSize) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamInventory _ptr is null!");
			return Native.SteamAPI_ISteamInventory_SerializeResult(_ptr, resultHandle, pOutBuffer,
				out punOutBufferSize);
		}

		public virtual bool ISteamInventory_DeserializeResult(
			ref int pOutResultHandle,
			IntPtr pBuffer,
			uint unBufferSize,
			[MarshalAs(UnmanagedType.U1)] bool bRESERVED_MUST_BE_FALSE) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamInventory _ptr is null!");
			return Native.SteamAPI_ISteamInventory_DeserializeResult(_ptr, ref pOutResultHandle, pBuffer, unBufferSize,
				bRESERVED_MUST_BE_FALSE);
		}

		public virtual bool ISteamInventory_GenerateItems(
			ref int pResultHandle,
			int[] pArrayItemDefs,
			uint[] punArrayQuantity,
			uint unArrayLength) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamInventory _ptr is null!");
			return Native.SteamAPI_ISteamInventory_GenerateItems(_ptr, ref pResultHandle, pArrayItemDefs,
				punArrayQuantity, unArrayLength);
		}

		public virtual bool ISteamInventory_GrantPromoItems(ref int pResultHandle) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamInventory_GrantPromoItems(_ptr, ref pResultHandle)
				: throw new Exception("ISteamInventory _ptr is null!");
		}

		public virtual bool ISteamInventory_AddPromoItem(ref int pResultHandle, int itemDef) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamInventory _ptr is null!");
			return Native.SteamAPI_ISteamInventory_AddPromoItem(_ptr, ref pResultHandle, itemDef);
		}

		public virtual bool ISteamInventory_AddPromoItems(
			ref int pResultHandle,
			int[] pArrayItemDefs,
			uint unArrayLength) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamInventory _ptr is null!");
			return Native.SteamAPI_ISteamInventory_AddPromoItems(_ptr, ref pResultHandle, pArrayItemDefs,
				unArrayLength);
		}

		public virtual bool ISteamInventory_ConsumeItem(
			ref int pResultHandle,
			ulong itemConsume,
			uint unQuantity) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamInventory _ptr is null!");
			return Native.SteamAPI_ISteamInventory_ConsumeItem(_ptr, ref pResultHandle, itemConsume, unQuantity);
		}

		public virtual bool ISteamInventory_ExchangeItems(
			ref int pResultHandle,
			int[] pArrayGenerate,
			uint[] punArrayGenerateQuantity,
			uint unArrayGenerateLength,
			ulong[] pArrayDestroy,
			uint[] punArrayDestroyQuantity,
			uint unArrayDestroyLength) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamInventory _ptr is null!");
			return Native.SteamAPI_ISteamInventory_ExchangeItems(_ptr, ref pResultHandle, pArrayGenerate,
				punArrayGenerateQuantity, unArrayGenerateLength, pArrayDestroy, punArrayDestroyQuantity,
				unArrayDestroyLength);
		}

		public virtual bool ISteamInventory_TransferItemQuantity(
			ref int pResultHandle,
			ulong itemIdSource,
			uint unQuantity,
			ulong itemIdDest) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamInventory _ptr is null!");
			return Native.SteamAPI_ISteamInventory_TransferItemQuantity(_ptr, ref pResultHandle, itemIdSource,
				unQuantity, itemIdDest);
		}

		public virtual void ISteamInventory_SendItemDropHeartbeat() {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamInventory _ptr is null!");
			Native.SteamAPI_ISteamInventory_SendItemDropHeartbeat(_ptr);
		}

		public virtual bool ISteamInventory_TriggerItemDrop(
			ref int pResultHandle,
			int dropListDefinition) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamInventory _ptr is null!");
			return Native.SteamAPI_ISteamInventory_TriggerItemDrop(_ptr, ref pResultHandle, dropListDefinition);
		}

		public virtual bool ISteamInventory_TradeItems(
			ref int pResultHandle,
			ulong steamIDTradePartner,
			ulong[] pArrayGive,
			uint[] pArrayGiveQuantity,
			uint nArrayGiveLength,
			ulong[] pArrayGet,
			uint[] pArrayGetQuantity,
			uint nArrayGetLength) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamInventory _ptr is null!");
			return Native.SteamAPI_ISteamInventory_TradeItems(_ptr, ref pResultHandle, steamIDTradePartner, pArrayGive,
				pArrayGiveQuantity, nArrayGiveLength, pArrayGet, pArrayGetQuantity, nArrayGetLength);
		}

		public virtual bool ISteamInventory_LoadItemDefinitions() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamInventory_LoadItemDefinitions(_ptr)
				: throw new Exception("ISteamInventory _ptr is null!");
		}

		public virtual bool ISteamInventory_GetItemDefinitionIDs(
			IntPtr pItemDefIDs,
			out uint punItemDefIDsArraySize) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamInventory_GetItemDefinitionIDs(_ptr, pItemDefIDs, out punItemDefIDsArraySize)
				: throw new Exception("ISteamInventory _ptr is null!");
		}

		public virtual bool ISteamInventory_GetItemDefinitionProperty(
			int iDefinition,
			string pchPropertyName,
			StringBuilder pchValueBuffer,
			out uint punValueBufferSizeOut) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamInventory _ptr is null!");
			return Native.SteamAPI_ISteamInventory_GetItemDefinitionProperty(_ptr, iDefinition, pchPropertyName,
				pchValueBuffer, out punValueBufferSizeOut);
		}

		public virtual SteamAPICall_t ISteamInventory_RequestEligiblePromoItemDefinitionsIDs(
			ulong steamID) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamInventory_RequestEligiblePromoItemDefinitionsIDs(_ptr, steamID)
				: throw new Exception("ISteamInventory _ptr is null!");
		}

		public virtual bool ISteamInventory_GetEligiblePromoItemDefinitionIDs(
			ulong steamID,
			IntPtr pItemDefIDs,
			out uint punItemDefIDsArraySize) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamInventory _ptr is null!");
			return Native.SteamAPI_ISteamInventory_GetEligiblePromoItemDefinitionIDs(_ptr, steamID, pItemDefIDs,
				out punItemDefIDsArraySize);
		}

		public virtual void ISteamVideo_GetVideoURL(uint unVideoAppID) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamVideo _ptr is null!");
			Native.SteamAPI_ISteamVideo_GetVideoURL(_ptr, unVideoAppID);
		}

		public virtual bool ISteamVideo_IsBroadcasting(IntPtr pnNumViewers) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamVideo_IsBroadcasting(_ptr, pnNumViewers)
				: throw new Exception("ISteamVideo _ptr is null!");
		}

		public virtual void ISteamVideo_GetOPFSettings(uint unVideoAppID) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamVideo _ptr is null!");
			Native.SteamAPI_ISteamVideo_GetOPFSettings(_ptr, unVideoAppID);
		}

		public virtual bool ISteamVideo_GetOPFStringForApp(
			uint unVideoAppID,
			StringBuilder pchBuffer,
			out int pnBufferSize) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamVideo _ptr is null!");
			return Native.SteamAPI_ISteamVideo_GetOPFStringForApp(_ptr, unVideoAppID, pchBuffer, out pnBufferSize);
		}

		public virtual bool ISteamGameServer_InitGameServer(
			uint unIP,
			ushort usGamePort,
			ushort usQueryPort,
			uint unFlags,
			uint nGameAppId,
			string pchVersionString) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServer _ptr is null!");
			return Native.SteamAPI_ISteamGameServer_InitGameServer(_ptr, unIP, usGamePort, usQueryPort, unFlags,
				nGameAppId, pchVersionString);
		}

		public virtual void ISteamGameServer_SetProduct(string pszProduct) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServer _ptr is null!");
			Native.SteamAPI_ISteamGameServer_SetProduct(_ptr, pszProduct);
		}

		public virtual void ISteamGameServer_SetGameDescription(string pszGameDescription) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServer _ptr is null!");
			Native.SteamAPI_ISteamGameServer_SetGameDescription(_ptr, pszGameDescription);
		}

		public virtual void ISteamGameServer_SetModDir(string pszModDir) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServer _ptr is null!");
			Native.SteamAPI_ISteamGameServer_SetModDir(_ptr, pszModDir);
		}

		public virtual void ISteamGameServer_SetDedicatedServer([MarshalAs(UnmanagedType.U1)] bool bDedicated) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServer _ptr is null!");
			Native.SteamAPI_ISteamGameServer_SetDedicatedServer(_ptr, bDedicated);
		}

		public virtual void ISteamGameServer_LogOn(string pszToken) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServer _ptr is null!");
			Native.SteamAPI_ISteamGameServer_LogOn(_ptr, pszToken);
		}

		public virtual void ISteamGameServer_LogOnAnonymous() {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServer _ptr is null!");
			Native.SteamAPI_ISteamGameServer_LogOnAnonymous(_ptr);
		}

		public virtual void ISteamGameServer_LogOff() {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServer _ptr is null!");
			Native.SteamAPI_ISteamGameServer_LogOff(_ptr);
		}

		public virtual bool ISteamGameServer_BLoggedOn() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamGameServer_BLoggedOn(_ptr)
				: throw new Exception("ISteamGameServer _ptr is null!");
		}

		public virtual bool ISteamGameServer_BSecure() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamGameServer_BSecure(_ptr)
				: throw new Exception("ISteamGameServer _ptr is null!");
		}

		public virtual CSteamID ISteamGameServer_GetSteamID() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamGameServer_GetSteamID(_ptr)
				: throw new Exception("ISteamGameServer _ptr is null!");
		}

		public virtual bool ISteamGameServer_WasRestartRequested() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamGameServer_WasRestartRequested(_ptr)
				: throw new Exception("ISteamGameServer _ptr is null!");
		}

		public virtual void ISteamGameServer_SetMaxPlayerCount(int cPlayersMax) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServer _ptr is null!");
			Native.SteamAPI_ISteamGameServer_SetMaxPlayerCount(_ptr, cPlayersMax);
		}

		public virtual void ISteamGameServer_SetBotPlayerCount(int cBotplayers) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServer _ptr is null!");
			Native.SteamAPI_ISteamGameServer_SetBotPlayerCount(_ptr, cBotplayers);
		}

		public virtual void ISteamGameServer_SetServerName(string pszServerName) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServer _ptr is null!");
			Native.SteamAPI_ISteamGameServer_SetServerName(_ptr, pszServerName);
		}

		public virtual void ISteamGameServer_SetMapName(string pszMapName) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServer _ptr is null!");
			Native.SteamAPI_ISteamGameServer_SetMapName(_ptr, pszMapName);
		}

		public virtual void
			ISteamGameServer_SetPasswordProtected([MarshalAs(UnmanagedType.U1)] bool bPasswordProtected) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServer _ptr is null!");
			Native.SteamAPI_ISteamGameServer_SetPasswordProtected(_ptr, bPasswordProtected);
		}

		public virtual void ISteamGameServer_SetSpectatorPort(ushort unSpectatorPort) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServer _ptr is null!");
			Native.SteamAPI_ISteamGameServer_SetSpectatorPort(_ptr, unSpectatorPort);
		}

		public virtual void ISteamGameServer_SetSpectatorServerName(string pszSpectatorServerName) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServer _ptr is null!");
			Native.SteamAPI_ISteamGameServer_SetSpectatorServerName(_ptr, pszSpectatorServerName);
		}

		public virtual void ISteamGameServer_ClearAllKeyValues() {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServer _ptr is null!");
			Native.SteamAPI_ISteamGameServer_ClearAllKeyValues(_ptr);
		}

		public virtual void ISteamGameServer_SetKeyValue(string pKey, string pValue) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServer _ptr is null!");
			Native.SteamAPI_ISteamGameServer_SetKeyValue(_ptr, pKey, pValue);
		}

		public virtual void ISteamGameServer_SetGameTags(string pchGameTags) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServer _ptr is null!");
			Native.SteamAPI_ISteamGameServer_SetGameTags(_ptr, pchGameTags);
		}

		public virtual void ISteamGameServer_SetGameData(string pchGameData) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServer _ptr is null!");
			Native.SteamAPI_ISteamGameServer_SetGameData(_ptr, pchGameData);
		}

		public virtual void ISteamGameServer_SetRegion(string pszRegion) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServer _ptr is null!");
			Native.SteamAPI_ISteamGameServer_SetRegion(_ptr, pszRegion);
		}

		public virtual bool ISteamGameServer_SendUserConnectAndAuthenticate(
			uint unIPClient,
			IntPtr pvAuthBlob,
			uint cubAuthBlobSize,
			out ulong pSteamIDUser) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServer _ptr is null!");
			return Native.SteamAPI_ISteamGameServer_SendUserConnectAndAuthenticate(_ptr, unIPClient, pvAuthBlob,
				cubAuthBlobSize, out pSteamIDUser);
		}

		public virtual CSteamID ISteamGameServer_CreateUnauthenticatedUserConnection() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamGameServer_CreateUnauthenticatedUserConnection(_ptr)
				: throw new Exception("ISteamGameServer _ptr is null!");
		}

		public virtual void ISteamGameServer_SendUserDisconnect(ulong steamIDUser) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServer _ptr is null!");
			Native.SteamAPI_ISteamGameServer_SendUserDisconnect(_ptr, steamIDUser);
		}

		public virtual bool ISteamGameServer_BUpdateUserData(
			ulong steamIDUser,
			string pchPlayerName,
			uint uScore) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServer _ptr is null!");
			return Native.SteamAPI_ISteamGameServer_BUpdateUserData(_ptr, steamIDUser, pchPlayerName, uScore);
		}

		public virtual HAuthTicket ISteamGameServer_GetAuthSessionTicket(
			IntPtr pTicket,
			int cbMaxTicket,
			out uint pcbTicket) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServer _ptr is null!");
			return Native.SteamAPI_ISteamGameServer_GetAuthSessionTicket(_ptr, pTicket, cbMaxTicket, out pcbTicket);
		}

		public virtual BeginAuthSessionResult ISteamGameServer_BeginAuthSession(
			IntPtr pAuthTicket,
			int cbAuthTicket,
			ulong steamID) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServer _ptr is null!");
			return Native.SteamAPI_ISteamGameServer_BeginAuthSession(_ptr, pAuthTicket, cbAuthTicket, steamID);
		}

		public virtual void ISteamGameServer_EndAuthSession(ulong steamID) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServer _ptr is null!");
			Native.SteamAPI_ISteamGameServer_EndAuthSession(_ptr, steamID);
		}

		public virtual void ISteamGameServer_CancelAuthTicket(uint hAuthTicket) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServer _ptr is null!");
			Native.SteamAPI_ISteamGameServer_CancelAuthTicket(_ptr, hAuthTicket);
		}

		public virtual UserHasLicenseForAppResult ISteamGameServer_UserHasLicenseForApp(
			ulong steamID,
			uint appID) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServer _ptr is null!");
			return Native.SteamAPI_ISteamGameServer_UserHasLicenseForApp(_ptr, steamID, appID);
		}

		public virtual bool ISteamGameServer_RequestUserGroupStatus(
			ulong steamIDUser,
			ulong steamIDGroup) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServer _ptr is null!");
			return Native.SteamAPI_ISteamGameServer_RequestUserGroupStatus(_ptr, steamIDUser, steamIDGroup);
		}

		public virtual void ISteamGameServer_GetGameplayStats() {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServer _ptr is null!");
			Native.SteamAPI_ISteamGameServer_GetGameplayStats(_ptr);
		}

		public virtual SteamAPICall_t ISteamGameServer_GetServerReputation() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamGameServer_GetServerReputation(_ptr)
				: throw new Exception("ISteamGameServer _ptr is null!");
		}

		public virtual uint ISteamGameServer_GetPublicIP() {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamGameServer_GetPublicIP(_ptr)
				: throw new Exception("ISteamGameServer _ptr is null!");
		}

		public virtual bool ISteamGameServer_HandleIncomingPacket(
			IntPtr pData,
			int cbData,
			uint srcIP,
			ushort srcPort) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServer _ptr is null!");
			return Native.SteamAPI_ISteamGameServer_HandleIncomingPacket(_ptr, pData, cbData, srcIP, srcPort);
		}

		public virtual int ISteamGameServer_GetNextOutgoingPacket(
			IntPtr pOut,
			int cbMaxOut,
			out uint pNetAdr,
			out ushort pPort) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServer _ptr is null!");
			return Native.SteamAPI_ISteamGameServer_GetNextOutgoingPacket(_ptr, pOut, cbMaxOut, out pNetAdr, out pPort);
		}

		public virtual void ISteamGameServer_EnableHeartbeats([MarshalAs(UnmanagedType.U1)] bool bActive) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServer _ptr is null!");
			Native.SteamAPI_ISteamGameServer_EnableHeartbeats(_ptr, bActive);
		}

		public virtual void ISteamGameServer_SetHeartbeatInterval(int iHeartbeatInterval) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServer _ptr is null!");
			Native.SteamAPI_ISteamGameServer_SetHeartbeatInterval(_ptr, iHeartbeatInterval);
		}

		public virtual void ISteamGameServer_ForceHeartbeat() {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServer _ptr is null!");
			Native.SteamAPI_ISteamGameServer_ForceHeartbeat(_ptr);
		}

		public virtual SteamAPICall_t ISteamGameServer_AssociateWithClan(ulong steamIDClan) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamGameServer_AssociateWithClan(_ptr, steamIDClan)
				: throw new Exception("ISteamGameServer _ptr is null!");
		}

		public virtual SteamAPICall_t ISteamGameServer_ComputeNewPlayerCompatibility(
			ulong steamIDNewPlayer) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamGameServer_ComputeNewPlayerCompatibility(_ptr, steamIDNewPlayer)
				: throw new Exception("ISteamGameServer _ptr is null!");
		}

		public virtual SteamAPICall_t ISteamGameServerStats_RequestUserStats(ulong steamIDUser) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamGameServerStats_RequestUserStats(_ptr, steamIDUser)
				: throw new Exception("ISteamGameServerStats _ptr is null!");
		}

		public virtual bool ISteamGameServerStats_GetUserStat(
			ulong steamIDUser,
			string pchName,
			out int pData) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServerStats _ptr is null!");
			return Native.SteamAPI_ISteamGameServerStats_GetUserStat(_ptr, steamIDUser, pchName, out pData);
		}

		public virtual bool ISteamGameServerStats_GetUserStat0(
			ulong steamIDUser,
			string pchName,
			out float pData) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServerStats _ptr is null!");
			return Native.SteamAPI_ISteamGameServerStats_GetUserStat0(_ptr, steamIDUser, pchName, out pData);
		}

		public virtual bool ISteamGameServerStats_GetUserAchievement(
			ulong steamIDUser,
			string pchName,
			[MarshalAs(UnmanagedType.U1)] ref bool pbAchieved) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServerStats _ptr is null!");
			return Native.SteamAPI_ISteamGameServerStats_GetUserAchievement(_ptr, steamIDUser, pchName, ref pbAchieved);
		}

		public virtual bool ISteamGameServerStats_SetUserStat(
			ulong steamIDUser,
			string pchName,
			int nData) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServerStats _ptr is null!");
			return Native.SteamAPI_ISteamGameServerStats_SetUserStat(_ptr, steamIDUser, pchName, nData);
		}

		public virtual bool ISteamGameServerStats_SetUserStat0(
			ulong steamIDUser,
			string pchName,
			float fData) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServerStats _ptr is null!");
			return Native.SteamAPI_ISteamGameServerStats_SetUserStat0(_ptr, steamIDUser, pchName, fData);
		}

		public virtual bool ISteamGameServerStats_UpdateUserAvgRateStat(
			ulong steamIDUser,
			string pchName,
			float flCountThisSession,
			double dSessionLength) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServerStats _ptr is null!");
			return Native.SteamAPI_ISteamGameServerStats_UpdateUserAvgRateStat(_ptr, steamIDUser, pchName,
				flCountThisSession, dSessionLength);
		}

		public virtual bool ISteamGameServerStats_SetUserAchievement(
			ulong steamIDUser,
			string pchName) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServerStats _ptr is null!");
			return Native.SteamAPI_ISteamGameServerStats_SetUserAchievement(_ptr, steamIDUser, pchName);
		}

		public virtual bool ISteamGameServerStats_ClearUserAchievement(
			ulong steamIDUser,
			string pchName) {
			if (_ptr == IntPtr.Zero)
				throw new Exception("ISteamGameServerStats _ptr is null!");
			return Native.SteamAPI_ISteamGameServerStats_ClearUserAchievement(_ptr, steamIDUser, pchName);
		}

		public virtual SteamAPICall_t ISteamGameServerStats_StoreUserStats(ulong steamIDUser) {
			return !(_ptr == IntPtr.Zero)
				? Native.SteamAPI_ISteamGameServerStats_StoreUserStats(_ptr, steamIDUser)
				: throw new Exception("ISteamGameServerStats _ptr is null!");
		}

		public virtual bool SteamApi_SteamAPI_Init() {
			return Native.SteamAPI_Init();
		}

		public virtual void SteamApi_SteamAPI_RunCallbacks() {
			Native.SteamAPI_RunCallbacks();
		}

		public virtual void SteamApi_SteamGameServer_RunCallbacks() {
			Native.SteamGameServer_RunCallbacks();
		}

		public virtual void SteamApi_SteamAPI_RegisterCallback(IntPtr pCallback, int callback) {
			Native.SteamAPI_RegisterCallback(pCallback, callback);
		}

		public virtual void SteamApi_SteamAPI_UnregisterCallback(IntPtr pCallback) {
			Native.SteamAPI_UnregisterCallback(pCallback);
		}

		public virtual void SteamApi_SteamAPI_RegisterCallResult(IntPtr pCallback, ulong callback) {
			Native.SteamAPI_RegisterCallResult(pCallback, callback);
		}

		public virtual void SteamApi_SteamAPI_UnregisterCallResult(IntPtr pCallback, ulong callback) {
			Native.SteamAPI_UnregisterCallResult(pCallback, callback);
		}

		public virtual bool SteamApi_SteamInternal_GameServer_Init(
			uint unIP,
			ushort usPort,
			ushort usGamePort,
			ushort usQueryPort,
			int eServerMode,
			string pchVersionString) {
			return Native.SteamInternal_GameServer_Init(unIP, usPort, usGamePort, usQueryPort, eServerMode,
				pchVersionString);
		}

		public virtual void SteamApi_SteamAPI_Shutdown() {
			Native.SteamAPI_Shutdown();
		}

		public virtual void SteamApi_SteamGameServer_Shutdown() {
			Native.SteamGameServer_Shutdown();
		}

		public virtual HSteamUser SteamApi_SteamAPI_GetHSteamUser() {
			return Native.SteamAPI_GetHSteamUser();
		}

		public virtual HSteamPipe SteamApi_SteamAPI_GetHSteamPipe() {
			return Native.SteamAPI_GetHSteamPipe();
		}

		public virtual HSteamUser SteamApi_SteamGameServer_GetHSteamUser() {
			return Native.SteamGameServer_GetHSteamUser();
		}

		public virtual HSteamPipe SteamApi_SteamGameServer_GetHSteamPipe() {
			return Native.SteamGameServer_GetHSteamPipe();
		}

		public virtual IntPtr SteamApi_SteamInternal_CreateInterface(string version) {
			return Native.SteamInternal_CreateInterface(version);
		}

		public virtual bool SteamApi_SteamAPI_RestartAppIfNecessary(uint unOwnAppID) {
			return Native.SteamAPI_RestartAppIfNecessary(unOwnAppID);
		}

		internal static class Native {
			[DllImport("steam_api64.dll")]
			internal static extern HSteamPipe SteamAPI_ISteamClient_CreateSteamPipe(IntPtr ISteamClient);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamClient_BReleaseSteamPipe(
				IntPtr ISteamClient,
				int hSteamPipe);

			[DllImport("steam_api64.dll")]
			internal static extern HSteamUser SteamAPI_ISteamClient_ConnectToGlobalUser(
				IntPtr ISteamClient,
				int hSteamPipe);

			[DllImport("steam_api64.dll")]
			internal static extern HSteamUser SteamAPI_ISteamClient_CreateLocalUser(
				IntPtr ISteamClient,
				out int phSteamPipe,
				AccountType eAccountType);

			[DllImport("steam_api64.dll")]
			internal static extern void SteamAPI_ISteamClient_ReleaseUser(
				IntPtr ISteamClient,
				int hSteamPipe,
				int hUser);

			[DllImport("steam_api64.dll")]
			internal static extern IntPtr SteamAPI_ISteamClient_GetISteamUser(
				IntPtr ISteamClient,
				int hSteamUser,
				int hSteamPipe,
				string pchVersion);

			[DllImport("steam_api64.dll")]
			internal static extern IntPtr SteamAPI_ISteamClient_GetISteamGameServer(
				IntPtr ISteamClient,
				int hSteamUser,
				int hSteamPipe,
				string pchVersion);

			[DllImport("steam_api64.dll")]
			internal static extern void SteamAPI_ISteamClient_SetLocalIPBinding(
				IntPtr ISteamClient,
				uint unIP,
				ushort usPort);

			[DllImport("steam_api64.dll")]
			internal static extern IntPtr SteamAPI_ISteamClient_GetISteamFriends(
				IntPtr ISteamClient,
				int hSteamUser,
				int hSteamPipe,
				string pchVersion);

			[DllImport("steam_api64.dll")]
			internal static extern IntPtr SteamAPI_ISteamClient_GetISteamUtils(
				IntPtr ISteamClient,
				int hSteamPipe,
				string pchVersion);

			[DllImport("steam_api64.dll")]
			internal static extern IntPtr SteamAPI_ISteamClient_GetISteamMatchmaking(
				IntPtr ISteamClient,
				int hSteamUser,
				int hSteamPipe,
				string pchVersion);

			[DllImport("steam_api64.dll")]
			internal static extern IntPtr SteamAPI_ISteamClient_GetISteamMatchmakingServers(
				IntPtr ISteamClient,
				int hSteamUser,
				int hSteamPipe,
				string pchVersion);

			[DllImport("steam_api64.dll")]
			internal static extern IntPtr SteamAPI_ISteamClient_GetISteamGenericInterface(
				IntPtr ISteamClient,
				int hSteamUser,
				int hSteamPipe,
				string pchVersion);

			[DllImport("steam_api64.dll")]
			internal static extern IntPtr SteamAPI_ISteamClient_GetISteamUserStats(
				IntPtr ISteamClient,
				int hSteamUser,
				int hSteamPipe,
				string pchVersion);

			[DllImport("steam_api64.dll")]
			internal static extern IntPtr SteamAPI_ISteamClient_GetISteamGameServerStats(
				IntPtr ISteamClient,
				int hSteamuser,
				int hSteamPipe,
				string pchVersion);

			[DllImport("steam_api64.dll")]
			internal static extern IntPtr SteamAPI_ISteamClient_GetISteamApps(
				IntPtr ISteamClient,
				int hSteamUser,
				int hSteamPipe,
				string pchVersion);

			[DllImport("steam_api64.dll")]
			internal static extern IntPtr SteamAPI_ISteamClient_GetISteamNetworking(
				IntPtr ISteamClient,
				int hSteamUser,
				int hSteamPipe,
				string pchVersion);

			[DllImport("steam_api64.dll")]
			internal static extern IntPtr SteamAPI_ISteamClient_GetISteamRemoteStorage(
				IntPtr ISteamClient,
				int hSteamuser,
				int hSteamPipe,
				string pchVersion);

			[DllImport("steam_api64.dll")]
			internal static extern IntPtr SteamAPI_ISteamClient_GetISteamScreenshots(
				IntPtr ISteamClient,
				int hSteamuser,
				int hSteamPipe,
				string pchVersion);

			[DllImport("steam_api64.dll")]
			internal static extern uint SteamAPI_ISteamClient_GetIPCCallCount(IntPtr ISteamClient);

			[DllImport("steam_api64.dll")]
			internal static extern void SteamAPI_ISteamClient_SetWarningMessageHook(
				IntPtr ISteamClient,
				IntPtr pFunction);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamClient_BShutdownIfAllPipesClosed(
				IntPtr ISteamClient);

			[DllImport("steam_api64.dll")]
			internal static extern IntPtr SteamAPI_ISteamClient_GetISteamHTTP(
				IntPtr ISteamClient,
				int hSteamuser,
				int hSteamPipe,
				string pchVersion);

			[DllImport("steam_api64.dll")]
			internal static extern IntPtr SteamAPI_ISteamClient_GetISteamUnifiedMessages(
				IntPtr ISteamClient,
				int hSteamuser,
				int hSteamPipe,
				string pchVersion);

			[DllImport("steam_api64.dll")]
			internal static extern IntPtr SteamAPI_ISteamClient_GetISteamController(
				IntPtr ISteamClient,
				int hSteamUser,
				int hSteamPipe,
				string pchVersion);

			[DllImport("steam_api64.dll")]
			internal static extern IntPtr SteamAPI_ISteamClient_GetISteamUGC(
				IntPtr ISteamClient,
				int hSteamUser,
				int hSteamPipe,
				string pchVersion);

			[DllImport("steam_api64.dll")]
			internal static extern IntPtr SteamAPI_ISteamClient_GetISteamAppList(
				IntPtr ISteamClient,
				int hSteamUser,
				int hSteamPipe,
				string pchVersion);

			[DllImport("steam_api64.dll")]
			internal static extern IntPtr SteamAPI_ISteamClient_GetISteamMusic(
				IntPtr ISteamClient,
				int hSteamuser,
				int hSteamPipe,
				string pchVersion);

			[DllImport("steam_api64.dll")]
			internal static extern IntPtr SteamAPI_ISteamClient_GetISteamMusicRemote(
				IntPtr ISteamClient,
				int hSteamuser,
				int hSteamPipe,
				string pchVersion);

			[DllImport("steam_api64.dll")]
			internal static extern IntPtr SteamAPI_ISteamClient_GetISteamHTMLSurface(
				IntPtr ISteamClient,
				int hSteamuser,
				int hSteamPipe,
				string pchVersion);

			[DllImport("steam_api64.dll")]
			internal static extern IntPtr SteamAPI_ISteamClient_GetISteamInventory(
				IntPtr ISteamClient,
				int hSteamuser,
				int hSteamPipe,
				string pchVersion);

			[DllImport("steam_api64.dll")]
			internal static extern IntPtr SteamAPI_ISteamClient_GetISteamVideo(
				IntPtr ISteamClient,
				int hSteamuser,
				int hSteamPipe,
				string pchVersion);

			[DllImport("steam_api64.dll")]
			internal static extern HSteamUser SteamAPI_ISteamUser_GetHSteamUser(IntPtr ISteamUser);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamUser_BLoggedOn(IntPtr ISteamUser);

			[DllImport("steam_api64.dll")]
			internal static extern CSteamID SteamAPI_ISteamUser_GetSteamID(IntPtr ISteamUser);

			[DllImport("steam_api64.dll")]
			internal static extern int SteamAPI_ISteamUser_InitiateGameConnection(
				IntPtr ISteamUser,
				IntPtr pAuthBlob,
				int cbMaxAuthBlob,
				ulong steamIDGameServer,
				uint unIPServer,
				ushort usPortServer,
				[MarshalAs(UnmanagedType.U1)] bool bSecure);

			[DllImport("steam_api64.dll")]
			internal static extern void SteamAPI_ISteamUser_TerminateGameConnection(
				IntPtr ISteamUser,
				uint unIPServer,
				ushort usPortServer);

			[DllImport("steam_api64.dll")]
			internal static extern void SteamAPI_ISteamUser_TrackAppUsageEvent(
				IntPtr ISteamUser,
				ulong gameID,
				int eAppUsageEvent,
				string pchExtraInfo);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamUser_GetUserDataFolder(
				IntPtr ISteamUser,
				StringBuilder pchBuffer,
				int cubBuffer);

			[DllImport("steam_api64.dll")]
			internal static extern void SteamAPI_ISteamUser_StartVoiceRecording(IntPtr ISteamUser);

			[DllImport("steam_api64.dll")]
			internal static extern void SteamAPI_ISteamUser_StopVoiceRecording(IntPtr ISteamUser);

			[DllImport("steam_api64.dll")]
			internal static extern VoiceResult SteamAPI_ISteamUser_GetAvailableVoice(
				IntPtr ISteamUser,
				out uint pcbCompressed,
				out uint pcbUncompressed_Deprecated,
				uint nUncompressedVoiceDesiredSampleRate_Deprecated);

			[DllImport("steam_api64.dll")]
			internal static extern VoiceResult SteamAPI_ISteamUser_GetVoice(
				IntPtr ISteamUser,
				[MarshalAs(UnmanagedType.U1)] bool bWantCompressed,
				IntPtr pDestBuffer,
				uint cbDestBufferSize,
				out uint nBytesWritten,
				[MarshalAs(UnmanagedType.U1)] bool bWantUncompressed_Deprecated,
				IntPtr pUncompressedDestBuffer_Deprecated,
				uint cbUncompressedDestBufferSize_Deprecated,
				out uint nUncompressBytesWritten_Deprecated,
				uint nUncompressedVoiceDesiredSampleRate_Deprecated);

			[DllImport("steam_api64.dll")]
			internal static extern VoiceResult SteamAPI_ISteamUser_DecompressVoice(
				IntPtr ISteamUser,
				IntPtr pCompressed,
				uint cbCompressed,
				IntPtr pDestBuffer,
				uint cbDestBufferSize,
				out uint nBytesWritten,
				uint nDesiredSampleRate);

			[DllImport("steam_api64.dll")]
			internal static extern uint SteamAPI_ISteamUser_GetVoiceOptimalSampleRate(IntPtr ISteamUser);

			[DllImport("steam_api64.dll")]
			internal static extern HAuthTicket SteamAPI_ISteamUser_GetAuthSessionTicket(
				IntPtr ISteamUser,
				IntPtr pTicket,
				int cbMaxTicket,
				out uint pcbTicket);

			[DllImport("steam_api64.dll")]
			internal static extern BeginAuthSessionResult SteamAPI_ISteamUser_BeginAuthSession(
				IntPtr ISteamUser,
				IntPtr pAuthTicket,
				int cbAuthTicket,
				ulong steamID);

			[DllImport("steam_api64.dll")]
			internal static extern void SteamAPI_ISteamUser_EndAuthSession(
				IntPtr ISteamUser,
				ulong steamID);

			[DllImport("steam_api64.dll")]
			internal static extern void SteamAPI_ISteamUser_CancelAuthTicket(
				IntPtr ISteamUser,
				uint hAuthTicket);

			[DllImport("steam_api64.dll")]
			internal static extern UserHasLicenseForAppResult SteamAPI_ISteamUser_UserHasLicenseForApp(
				IntPtr ISteamUser,
				ulong steamID,
				uint appID);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamUser_BIsBehindNAT(IntPtr ISteamUser);

			[DllImport("steam_api64.dll")]
			internal static extern void SteamAPI_ISteamUser_AdvertiseGame(
				IntPtr ISteamUser,
				ulong steamIDGameServer,
				uint unIPServer,
				ushort usPortServer);

			[DllImport("steam_api64.dll")]
			internal static extern SteamAPICall_t SteamAPI_ISteamUser_RequestEncryptedAppTicket(
				IntPtr ISteamUser,
				IntPtr pDataToInclude,
				int cbDataToInclude);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamUser_GetEncryptedAppTicket(
				IntPtr ISteamUser,
				IntPtr pTicket,
				int cbMaxTicket,
				out uint pcbTicket);

			[DllImport("steam_api64.dll")]
			internal static extern int SteamAPI_ISteamUser_GetGameBadgeLevel(
				IntPtr ISteamUser,
				int nSeries,
				[MarshalAs(UnmanagedType.U1)] bool bFoil);

			[DllImport("steam_api64.dll")]
			internal static extern int SteamAPI_ISteamUser_GetPlayerSteamLevel(IntPtr ISteamUser);

			[DllImport("steam_api64.dll")]
			internal static extern SteamAPICall_t SteamAPI_ISteamUser_RequestStoreAuthURL(
				IntPtr ISteamUser,
				string pchRedirectURL);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamUser_BIsPhoneVerified(IntPtr ISteamUser);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamUser_BIsTwoFactorEnabled(IntPtr ISteamUser);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamUser_BIsPhoneIdentifying(IntPtr ISteamUser);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamUser_BIsPhoneRequiringVerification(
				IntPtr ISteamUser);

			[DllImport("steam_api64.dll")]
			internal static extern IntPtr SteamAPI_ISteamFriends_GetPersonaName(IntPtr ISteamFriends);

			[DllImport("steam_api64.dll")]
			internal static extern SteamAPICall_t SteamAPI_ISteamFriends_SetPersonaName(
				IntPtr ISteamFriends,
				string pchPersonaName);

			[DllImport("steam_api64.dll")]
			internal static extern PersonaState SteamAPI_ISteamFriends_GetPersonaState(
				IntPtr ISteamFriends);

			[DllImport("steam_api64.dll")]
			internal static extern int SteamAPI_ISteamFriends_GetFriendCount(
				IntPtr ISteamFriends,
				int iFriendFlags);

			[DllImport("steam_api64.dll")]
			internal static extern CSteamID SteamAPI_ISteamFriends_GetFriendByIndex(
				IntPtr ISteamFriends,
				int iFriend,
				int iFriendFlags);

			[DllImport("steam_api64.dll")]
			internal static extern FriendRelationship SteamAPI_ISteamFriends_GetFriendRelationship(
				IntPtr ISteamFriends,
				ulong steamIDFriend);

			[DllImport("steam_api64.dll")]
			internal static extern PersonaState SteamAPI_ISteamFriends_GetFriendPersonaState(
				IntPtr ISteamFriends,
				ulong steamIDFriend);

			[DllImport("steam_api64.dll")]
			internal static extern IntPtr SteamAPI_ISteamFriends_GetFriendPersonaName(
				IntPtr ISteamFriends,
				ulong steamIDFriend);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamFriends_GetFriendGamePlayed(
				IntPtr ISteamFriends,
				ulong steamIDFriend,
				ref FriendGameInfo_t pFriendGameInfo);

			[DllImport("steam_api64.dll")]
			internal static extern IntPtr SteamAPI_ISteamFriends_GetFriendPersonaNameHistory(
				IntPtr ISteamFriends,
				ulong steamIDFriend,
				int iPersonaName);

			[DllImport("steam_api64.dll")]
			internal static extern int SteamAPI_ISteamFriends_GetFriendSteamLevel(
				IntPtr ISteamFriends,
				ulong steamIDFriend);

			[DllImport("steam_api64.dll")]
			internal static extern IntPtr SteamAPI_ISteamFriends_GetPlayerNickname(
				IntPtr ISteamFriends,
				ulong steamIDPlayer);

			[DllImport("steam_api64.dll")]
			internal static extern int SteamAPI_ISteamFriends_GetFriendsGroupCount(IntPtr ISteamFriends);

			[DllImport("steam_api64.dll")]
			internal static extern FriendsGroupID_t SteamAPI_ISteamFriends_GetFriendsGroupIDByIndex(
				IntPtr ISteamFriends,
				int iFG);

			[DllImport("steam_api64.dll")]
			internal static extern IntPtr SteamAPI_ISteamFriends_GetFriendsGroupName(
				IntPtr ISteamFriends,
				short friendsGroupID);

			[DllImport("steam_api64.dll")]
			internal static extern int SteamAPI_ISteamFriends_GetFriendsGroupMembersCount(
				IntPtr ISteamFriends,
				short friendsGroupID);

			[DllImport("steam_api64.dll")]
			internal static extern void SteamAPI_ISteamFriends_GetFriendsGroupMembersList(
				IntPtr ISteamFriends,
				short friendsGroupID,
				IntPtr pOutSteamIDMembers,
				int nMembersCount);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamFriends_HasFriend(
				IntPtr ISteamFriends,
				ulong steamIDFriend,
				int iFriendFlags);

			[DllImport("steam_api64.dll")]
			internal static extern int SteamAPI_ISteamFriends_GetClanCount(IntPtr ISteamFriends);

			[DllImport("steam_api64.dll")]
			internal static extern CSteamID SteamAPI_ISteamFriends_GetClanByIndex(
				IntPtr ISteamFriends,
				int iClan);

			[DllImport("steam_api64.dll")]
			internal static extern IntPtr SteamAPI_ISteamFriends_GetClanName(
				IntPtr ISteamFriends,
				ulong steamIDClan);

			[DllImport("steam_api64.dll")]
			internal static extern IntPtr SteamAPI_ISteamFriends_GetClanTag(
				IntPtr ISteamFriends,
				ulong steamIDClan);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamFriends_GetClanActivityCounts(
				IntPtr ISteamFriends,
				ulong steamIDClan,
				out int pnOnline,
				out int pnInGame,
				out int pnChatting);

			[DllImport("steam_api64.dll")]
			internal static extern SteamAPICall_t SteamAPI_ISteamFriends_DownloadClanActivityCounts(
				IntPtr ISteamFriends,
				IntPtr psteamIDClans,
				int cClansToRequest);

			[DllImport("steam_api64.dll")]
			internal static extern int SteamAPI_ISteamFriends_GetFriendCountFromSource(
				IntPtr ISteamFriends,
				ulong steamIDSource);

			[DllImport("steam_api64.dll")]
			internal static extern CSteamID SteamAPI_ISteamFriends_GetFriendFromSourceByIndex(
				IntPtr ISteamFriends,
				ulong steamIDSource,
				int iFriend);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamFriends_IsUserInSource(
				IntPtr ISteamFriends,
				ulong steamIDUser,
				ulong steamIDSource);

			[DllImport("steam_api64.dll")]
			internal static extern void SteamAPI_ISteamFriends_SetInGameVoiceSpeaking(
				IntPtr ISteamFriends,
				ulong steamIDUser,
				[MarshalAs(UnmanagedType.U1)] bool bSpeaking);

			[DllImport("steam_api64.dll")]
			internal static extern void SteamAPI_ISteamFriends_ActivateGameOverlay(
				IntPtr ISteamFriends,
				string pchDialog);

			[DllImport("steam_api64.dll")]
			internal static extern void SteamAPI_ISteamFriends_ActivateGameOverlayToUser(
				IntPtr ISteamFriends,
				string pchDialog,
				ulong steamID);

			[DllImport("steam_api64.dll")]
			internal static extern void SteamAPI_ISteamFriends_ActivateGameOverlayToWebPage(
				IntPtr ISteamFriends,
				string pchURL);

			[DllImport("steam_api64.dll")]
			internal static extern void SteamAPI_ISteamFriends_ActivateGameOverlayToStore(
				IntPtr ISteamFriends,
				uint nAppID,
				OverlayToStoreFlag eFlag);

			[DllImport("steam_api64.dll")]
			internal static extern void SteamAPI_ISteamFriends_SetPlayedWith(
				IntPtr ISteamFriends,
				ulong steamIDUserPlayedWith);

			[DllImport("steam_api64.dll")]
			internal static extern void SteamAPI_ISteamFriends_ActivateGameOverlayInviteDialog(
				IntPtr ISteamFriends,
				ulong steamIDLobby);

			[DllImport("steam_api64.dll")]
			internal static extern int SteamAPI_ISteamFriends_GetSmallFriendAvatar(
				IntPtr ISteamFriends,
				ulong steamIDFriend);

			[DllImport("steam_api64.dll")]
			internal static extern int SteamAPI_ISteamFriends_GetMediumFriendAvatar(
				IntPtr ISteamFriends,
				ulong steamIDFriend);

			[DllImport("steam_api64.dll")]
			internal static extern int SteamAPI_ISteamFriends_GetLargeFriendAvatar(
				IntPtr ISteamFriends,
				ulong steamIDFriend);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamFriends_RequestUserInformation(
				IntPtr ISteamFriends,
				ulong steamIDUser,
				[MarshalAs(UnmanagedType.U1)] bool bRequireNameOnly);

			[DllImport("steam_api64.dll")]
			internal static extern SteamAPICall_t SteamAPI_ISteamFriends_RequestClanOfficerList(
				IntPtr ISteamFriends,
				ulong steamIDClan);

			[DllImport("steam_api64.dll")]
			internal static extern CSteamID SteamAPI_ISteamFriends_GetClanOwner(
				IntPtr ISteamFriends,
				ulong steamIDClan);

			[DllImport("steam_api64.dll")]
			internal static extern int SteamAPI_ISteamFriends_GetClanOfficerCount(
				IntPtr ISteamFriends,
				ulong steamIDClan);

			[DllImport("steam_api64.dll")]
			internal static extern CSteamID SteamAPI_ISteamFriends_GetClanOfficerByIndex(
				IntPtr ISteamFriends,
				ulong steamIDClan,
				int iOfficer);

			[DllImport("steam_api64.dll")]
			internal static extern uint SteamAPI_ISteamFriends_GetUserRestrictions(IntPtr ISteamFriends);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamFriends_SetRichPresence(
				IntPtr ISteamFriends,
				string pchKey,
				string pchValue);

			[DllImport("steam_api64.dll")]
			internal static extern void SteamAPI_ISteamFriends_ClearRichPresence(IntPtr ISteamFriends);

			[DllImport("steam_api64.dll")]
			internal static extern IntPtr SteamAPI_ISteamFriends_GetFriendRichPresence(
				IntPtr ISteamFriends,
				ulong steamIDFriend,
				string pchKey);

			[DllImport("steam_api64.dll")]
			internal static extern int SteamAPI_ISteamFriends_GetFriendRichPresenceKeyCount(
				IntPtr ISteamFriends,
				ulong steamIDFriend);

			[DllImport("steam_api64.dll")]
			internal static extern IntPtr SteamAPI_ISteamFriends_GetFriendRichPresenceKeyByIndex(
				IntPtr ISteamFriends,
				ulong steamIDFriend,
				int iKey);

			[DllImport("steam_api64.dll")]
			internal static extern void SteamAPI_ISteamFriends_RequestFriendRichPresence(
				IntPtr ISteamFriends,
				ulong steamIDFriend);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamFriends_InviteUserToGame(
				IntPtr ISteamFriends,
				ulong steamIDFriend,
				string pchConnectString);

			[DllImport("steam_api64.dll")]
			internal static extern int SteamAPI_ISteamFriends_GetCoplayFriendCount(IntPtr ISteamFriends);

			[DllImport("steam_api64.dll")]
			internal static extern CSteamID SteamAPI_ISteamFriends_GetCoplayFriend(
				IntPtr ISteamFriends,
				int iCoplayFriend);

			[DllImport("steam_api64.dll")]
			internal static extern int SteamAPI_ISteamFriends_GetFriendCoplayTime(
				IntPtr ISteamFriends,
				ulong steamIDFriend);

			[DllImport("steam_api64.dll")]
			internal static extern AppId_t SteamAPI_ISteamFriends_GetFriendCoplayGame(
				IntPtr ISteamFriends,
				ulong steamIDFriend);

			[DllImport("steam_api64.dll")]
			internal static extern SteamAPICall_t SteamAPI_ISteamFriends_JoinClanChatRoom(
				IntPtr ISteamFriends,
				ulong steamIDClan);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamFriends_LeaveClanChatRoom(
				IntPtr ISteamFriends,
				ulong steamIDClan);

			[DllImport("steam_api64.dll")]
			internal static extern int SteamAPI_ISteamFriends_GetClanChatMemberCount(
				IntPtr ISteamFriends,
				ulong steamIDClan);

			[DllImport("steam_api64.dll")]
			internal static extern CSteamID SteamAPI_ISteamFriends_GetChatMemberByIndex(
				IntPtr ISteamFriends,
				ulong steamIDClan,
				int iUser);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamFriends_SendClanChatMessage(
				IntPtr ISteamFriends,
				ulong steamIDClanChat,
				string pchText);

			[DllImport("steam_api64.dll")]
			internal static extern int SteamAPI_ISteamFriends_GetClanChatMessage(
				IntPtr ISteamFriends,
				ulong steamIDClanChat,
				int iMessage,
				IntPtr prgchText,
				int cchTextMax,
				out ChatEntryType peChatEntryType,
				out ulong psteamidChatter);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamFriends_IsClanChatAdmin(
				IntPtr ISteamFriends,
				ulong steamIDClanChat,
				ulong steamIDUser);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamFriends_IsClanChatWindowOpenInSteam(
				IntPtr ISteamFriends,
				ulong steamIDClanChat);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamFriends_OpenClanChatWindowInSteam(
				IntPtr ISteamFriends,
				ulong steamIDClanChat);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamFriends_CloseClanChatWindowInSteam(
				IntPtr ISteamFriends,
				ulong steamIDClanChat);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamFriends_SetListenForFriendsMessages(
				IntPtr ISteamFriends,
				[MarshalAs(UnmanagedType.U1)] bool bInterceptEnabled);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamFriends_ReplyToFriendMessage(
				IntPtr ISteamFriends,
				ulong steamIDFriend,
				string pchMsgToSend);

			[DllImport("steam_api64.dll")]
			internal static extern int SteamAPI_ISteamFriends_GetFriendMessage(
				IntPtr ISteamFriends,
				ulong steamIDFriend,
				int iMessageID,
				IntPtr pvData,
				int cubData,
				out ChatEntryType peChatEntryType);

			[DllImport("steam_api64.dll")]
			internal static extern SteamAPICall_t SteamAPI_ISteamFriends_GetFollowerCount(
				IntPtr ISteamFriends,
				ulong steamID);

			[DllImport("steam_api64.dll")]
			internal static extern SteamAPICall_t SteamAPI_ISteamFriends_IsFollowing(
				IntPtr ISteamFriends,
				ulong steamID);

			[DllImport("steam_api64.dll")]
			internal static extern SteamAPICall_t SteamAPI_ISteamFriends_EnumerateFollowingList(
				IntPtr ISteamFriends,
				uint unStartIndex);

			[DllImport("steam_api64.dll")]
			internal static extern uint SteamAPI_ISteamUtils_GetSecondsSinceAppActive(IntPtr ISteamUtils);

			[DllImport("steam_api64.dll")]
			internal static extern uint SteamAPI_ISteamUtils_GetSecondsSinceComputerActive(
				IntPtr ISteamUtils);

			[DllImport("steam_api64.dll")]
			internal static extern Universe SteamAPI_ISteamUtils_GetConnectedUniverse(IntPtr ISteamUtils);

			[DllImport("steam_api64.dll")]
			internal static extern uint SteamAPI_ISteamUtils_GetServerRealTime(IntPtr ISteamUtils);

			[DllImport("steam_api64.dll")]
			internal static extern IntPtr SteamAPI_ISteamUtils_GetIPCountry(IntPtr ISteamUtils);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamUtils_GetImageSize(
				IntPtr ISteamUtils,
				int iImage,
				out uint pnWidth,
				out uint pnHeight);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamUtils_GetImageRGBA(
				IntPtr ISteamUtils,
				int iImage,
				IntPtr pubDest,
				int nDestBufferSize);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamUtils_GetCSERIPPort(
				IntPtr ISteamUtils,
				out uint unIP,
				out ushort usPort);

			[DllImport("steam_api64.dll")]
			internal static extern byte SteamAPI_ISteamUtils_GetCurrentBatteryPower(IntPtr ISteamUtils);

			[DllImport("steam_api64.dll")]
			internal static extern uint SteamAPI_ISteamUtils_GetAppID(IntPtr ISteamUtils);

			[DllImport("steam_api64.dll")]
			internal static extern void SteamAPI_ISteamUtils_SetOverlayNotificationPosition(
				IntPtr ISteamUtils,
				NotificationPosition eNotificationPosition);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamUtils_IsAPICallCompleted(
				IntPtr ISteamUtils,
				ulong hSteamAPICall,
				[MarshalAs(UnmanagedType.U1)] ref bool pbFailed);

			[DllImport("steam_api64.dll")]
			internal static extern SteamAPICallFailure SteamAPI_ISteamUtils_GetAPICallFailureReason(
				IntPtr ISteamUtils,
				ulong hSteamAPICall);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamUtils_GetAPICallResult(
				IntPtr ISteamUtils,
				ulong hSteamAPICall,
				IntPtr pCallback,
				int cubCallback,
				int iCallbackExpected,
				[MarshalAs(UnmanagedType.U1)] ref bool pbFailed);

			[DllImport("steam_api64.dll")]
			internal static extern uint SteamAPI_ISteamUtils_GetIPCCallCount(IntPtr ISteamUtils);

			[DllImport("steam_api64.dll")]
			internal static extern void SteamAPI_ISteamUtils_SetWarningMessageHook(
				IntPtr ISteamUtils,
				IntPtr pFunction);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamUtils_IsOverlayEnabled(IntPtr ISteamUtils);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamUtils_BOverlayNeedsPresent(IntPtr ISteamUtils);

			[DllImport("steam_api64.dll")]
			internal static extern SteamAPICall_t SteamAPI_ISteamUtils_CheckFileSignature(
				IntPtr ISteamUtils,
				string szFileName);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamUtils_ShowGamepadTextInput(
				IntPtr ISteamUtils,
				GamepadTextInputMode eInputMode,
				GamepadTextInputLineMode eLineInputMode,
				string pchDescription,
				uint unCharMax,
				string pchExistingText);

			[DllImport("steam_api64.dll")]
			internal static extern uint SteamAPI_ISteamUtils_GetEnteredGamepadTextLength(
				IntPtr ISteamUtils);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamUtils_GetEnteredGamepadTextInput(
				IntPtr ISteamUtils,
				StringBuilder pchText,
				uint cchText);

			[DllImport("steam_api64.dll")]
			internal static extern IntPtr SteamAPI_ISteamUtils_GetSteamUILanguage(IntPtr ISteamUtils);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamUtils_IsSteamRunningInVR(IntPtr ISteamUtils);

			[DllImport("steam_api64.dll")]
			internal static extern void SteamAPI_ISteamUtils_SetOverlayNotificationInset(
				IntPtr ISteamUtils,
				int nHorizontalInset,
				int nVerticalInset);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamUtils_IsSteamInBigPictureMode(IntPtr ISteamUtils);

			[DllImport("steam_api64.dll")]
			internal static extern void SteamAPI_ISteamUtils_StartVRDashboard(IntPtr ISteamUtils);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamUtils_IsVRHeadsetStreamingEnabled(
				IntPtr ISteamUtils);

			[DllImport("steam_api64.dll")]
			internal static extern void SteamAPI_ISteamUtils_SetVRHeadsetStreamingEnabled(
				IntPtr ISteamUtils,
				[MarshalAs(UnmanagedType.U1)] bool bEnabled);

			[DllImport("steam_api64.dll")]
			internal static extern int SteamAPI_ISteamMatchmaking_GetFavoriteGameCount(
				IntPtr ISteamMatchmaking);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamMatchmaking_GetFavoriteGame(
				IntPtr ISteamMatchmaking,
				int iGame,
				ref uint pnAppID,
				out uint pnIP,
				out ushort pnConnPort,
				out ushort pnQueryPort,
				out uint punFlags,
				out uint pRTime32LastPlayedOnServer);

			[DllImport("steam_api64.dll")]
			internal static extern int SteamAPI_ISteamMatchmaking_AddFavoriteGame(
				IntPtr ISteamMatchmaking,
				uint nAppID,
				uint nIP,
				ushort nConnPort,
				ushort nQueryPort,
				uint unFlags,
				uint rTime32LastPlayedOnServer);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamMatchmaking_RemoveFavoriteGame(
				IntPtr ISteamMatchmaking,
				uint nAppID,
				uint nIP,
				ushort nConnPort,
				ushort nQueryPort,
				uint unFlags);

			[DllImport("steam_api64.dll")]
			internal static extern SteamAPICall_t SteamAPI_ISteamMatchmaking_RequestLobbyList(
				IntPtr ISteamMatchmaking);

			[DllImport("steam_api64.dll")]
			internal static extern void SteamAPI_ISteamMatchmaking_AddRequestLobbyListStringFilter(
				IntPtr ISteamMatchmaking,
				string pchKeyToMatch,
				string pchValueToMatch,
				LobbyComparison eComparisonType);

			[DllImport("steam_api64.dll")]
			internal static extern void SteamAPI_ISteamMatchmaking_AddRequestLobbyListNumericalFilter(
				IntPtr ISteamMatchmaking,
				string pchKeyToMatch,
				int nValueToMatch,
				LobbyComparison eComparisonType);

			[DllImport("steam_api64.dll")]
			internal static extern void SteamAPI_ISteamMatchmaking_AddRequestLobbyListNearValueFilter(
				IntPtr ISteamMatchmaking,
				string pchKeyToMatch,
				int nValueToBeCloseTo);

			[DllImport("steam_api64.dll")]
			internal static extern void SteamAPI_ISteamMatchmaking_AddRequestLobbyListFilterSlotsAvailable(
				IntPtr ISteamMatchmaking,
				int nSlotsAvailable);

			[DllImport("steam_api64.dll")]
			internal static extern void SteamAPI_ISteamMatchmaking_AddRequestLobbyListDistanceFilter(
				IntPtr ISteamMatchmaking,
				LobbyDistanceFilter eLobbyDistanceFilter);

			[DllImport("steam_api64.dll")]
			internal static extern void SteamAPI_ISteamMatchmaking_AddRequestLobbyListResultCountFilter(
				IntPtr ISteamMatchmaking,
				int cMaxResults);

			[DllImport("steam_api64.dll")]
			internal static extern void SteamAPI_ISteamMatchmaking_AddRequestLobbyListCompatibleMembersFilter(
				IntPtr ISteamMatchmaking,
				ulong steamIDLobby);

			[DllImport("steam_api64.dll")]
			internal static extern CSteamID SteamAPI_ISteamMatchmaking_GetLobbyByIndex(
				IntPtr ISteamMatchmaking,
				int iLobby);

			[DllImport("steam_api64.dll")]
			internal static extern SteamAPICall_t SteamAPI_ISteamMatchmaking_CreateLobby(
				IntPtr ISteamMatchmaking,
				LobbyType eLobbyType,
				int cMaxMembers);

			[DllImport("steam_api64.dll")]
			internal static extern SteamAPICall_t SteamAPI_ISteamMatchmaking_JoinLobby(
				IntPtr ISteamMatchmaking,
				ulong steamIDLobby);

			[DllImport("steam_api64.dll")]
			internal static extern void SteamAPI_ISteamMatchmaking_LeaveLobby(
				IntPtr ISteamMatchmaking,
				ulong steamIDLobby);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamMatchmaking_InviteUserToLobby(
				IntPtr ISteamMatchmaking,
				ulong steamIDLobby,
				ulong steamIDInvitee);

			[DllImport("steam_api64.dll")]
			internal static extern int SteamAPI_ISteamMatchmaking_GetNumLobbyMembers(
				IntPtr ISteamMatchmaking,
				ulong steamIDLobby);

			[DllImport("steam_api64.dll")]
			internal static extern CSteamID SteamAPI_ISteamMatchmaking_GetLobbyMemberByIndex(
				IntPtr ISteamMatchmaking,
				ulong steamIDLobby,
				int iMember);

			[DllImport("steam_api64.dll")]
			internal static extern IntPtr SteamAPI_ISteamMatchmaking_GetLobbyData(
				IntPtr ISteamMatchmaking,
				ulong steamIDLobby,
				string pchKey);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamMatchmaking_SetLobbyData(
				IntPtr ISteamMatchmaking,
				ulong steamIDLobby,
				string pchKey,
				string pchValue);

			[DllImport("steam_api64.dll")]
			internal static extern int SteamAPI_ISteamMatchmaking_GetLobbyDataCount(
				IntPtr ISteamMatchmaking,
				ulong steamIDLobby);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamMatchmaking_GetLobbyDataByIndex(
				IntPtr ISteamMatchmaking,
				ulong steamIDLobby,
				int iLobbyData,
				StringBuilder pchKey,
				int cchKeyBufferSize,
				StringBuilder pchValue,
				int cchValueBufferSize);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamMatchmaking_DeleteLobbyData(
				IntPtr ISteamMatchmaking,
				ulong steamIDLobby,
				string pchKey);

			[DllImport("steam_api64.dll")]
			internal static extern IntPtr SteamAPI_ISteamMatchmaking_GetLobbyMemberData(
				IntPtr ISteamMatchmaking,
				ulong steamIDLobby,
				ulong steamIDUser,
				string pchKey);

			[DllImport("steam_api64.dll")]
			internal static extern void SteamAPI_ISteamMatchmaking_SetLobbyMemberData(
				IntPtr ISteamMatchmaking,
				ulong steamIDLobby,
				string pchKey,
				string pchValue);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamMatchmaking_SendLobbyChatMsg(
				IntPtr ISteamMatchmaking,
				ulong steamIDLobby,
				IntPtr pvMsgBody,
				int cubMsgBody);

			[DllImport("steam_api64.dll")]
			internal static extern int SteamAPI_ISteamMatchmaking_GetLobbyChatEntry(
				IntPtr ISteamMatchmaking,
				ulong steamIDLobby,
				int iChatID,
				out ulong pSteamIDUser,
				IntPtr pvData,
				int cubData,
				out ChatEntryType peChatEntryType);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamMatchmaking_RequestLobbyData(
				IntPtr ISteamMatchmaking,
				ulong steamIDLobby);

			[DllImport("steam_api64.dll")]
			internal static extern void SteamAPI_ISteamMatchmaking_SetLobbyGameServer(
				IntPtr ISteamMatchmaking,
				ulong steamIDLobby,
				uint unGameServerIP,
				ushort unGameServerPort,
				ulong steamIDGameServer);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamMatchmaking_GetLobbyGameServer(
				IntPtr ISteamMatchmaking,
				ulong steamIDLobby,
				out uint punGameServerIP,
				out ushort punGameServerPort,
				out ulong psteamIDGameServer);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamMatchmaking_SetLobbyMemberLimit(
				IntPtr ISteamMatchmaking,
				ulong steamIDLobby,
				int cMaxMembers);

			[DllImport("steam_api64.dll")]
			internal static extern int SteamAPI_ISteamMatchmaking_GetLobbyMemberLimit(
				IntPtr ISteamMatchmaking,
				ulong steamIDLobby);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamMatchmaking_SetLobbyType(
				IntPtr ISteamMatchmaking,
				ulong steamIDLobby,
				LobbyType eLobbyType);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamMatchmaking_SetLobbyJoinable(
				IntPtr ISteamMatchmaking,
				ulong steamIDLobby,
				[MarshalAs(UnmanagedType.U1)] bool bLobbyJoinable);

			[DllImport("steam_api64.dll")]
			internal static extern CSteamID SteamAPI_ISteamMatchmaking_GetLobbyOwner(
				IntPtr ISteamMatchmaking,
				ulong steamIDLobby);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamMatchmaking_SetLobbyOwner(
				IntPtr ISteamMatchmaking,
				ulong steamIDLobby,
				ulong steamIDNewOwner);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamMatchmaking_SetLinkedLobby(
				IntPtr ISteamMatchmaking,
				ulong steamIDLobby,
				ulong steamIDLobbyDependent);

			[DllImport("steam_api64.dll")]
			internal static extern HServerListRequest SteamAPI_ISteamMatchmakingServers_RequestInternetServerList(
				IntPtr ISteamMatchmakingServers,
				uint iApp,
				IntPtr ppchFilters,
				uint nFilters,
				IntPtr pRequestServersResponse);

			[DllImport("steam_api64.dll")]
			internal static extern HServerListRequest SteamAPI_ISteamMatchmakingServers_RequestLANServerList(
				IntPtr ISteamMatchmakingServers,
				uint iApp,
				IntPtr pRequestServersResponse);

			[DllImport("steam_api64.dll")]
			internal static extern HServerListRequest SteamAPI_ISteamMatchmakingServers_RequestFriendsServerList(
				IntPtr ISteamMatchmakingServers,
				uint iApp,
				IntPtr ppchFilters,
				uint nFilters,
				IntPtr pRequestServersResponse);

			[DllImport("steam_api64.dll")]
			internal static extern HServerListRequest SteamAPI_ISteamMatchmakingServers_RequestFavoritesServerList(
				IntPtr ISteamMatchmakingServers,
				uint iApp,
				IntPtr ppchFilters,
				uint nFilters,
				IntPtr pRequestServersResponse);

			[DllImport("steam_api64.dll")]
			internal static extern HServerListRequest SteamAPI_ISteamMatchmakingServers_RequestHistoryServerList(
				IntPtr ISteamMatchmakingServers,
				uint iApp,
				IntPtr ppchFilters,
				uint nFilters,
				IntPtr pRequestServersResponse);

			[DllImport("steam_api64.dll")]
			internal static extern HServerListRequest SteamAPI_ISteamMatchmakingServers_RequestSpectatorServerList(
				IntPtr ISteamMatchmakingServers,
				uint iApp,
				IntPtr ppchFilters,
				uint nFilters,
				IntPtr pRequestServersResponse);

			[DllImport("steam_api64.dll")]
			internal static extern void SteamAPI_ISteamMatchmakingServers_ReleaseRequest(
				IntPtr ISteamMatchmakingServers,
				IntPtr hServerListRequest);

			[DllImport("steam_api64.dll")]
			internal static extern IntPtr SteamAPI_ISteamMatchmakingServers_GetServerDetails(
				IntPtr ISteamMatchmakingServers,
				IntPtr hRequest,
				int iServer);

			[DllImport("steam_api64.dll")]
			internal static extern void SteamAPI_ISteamMatchmakingServers_CancelQuery(
				IntPtr ISteamMatchmakingServers,
				IntPtr hRequest);

			[DllImport("steam_api64.dll")]
			internal static extern void SteamAPI_ISteamMatchmakingServers_RefreshQuery(
				IntPtr ISteamMatchmakingServers,
				IntPtr hRequest);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamMatchmakingServers_IsRefreshing(
				IntPtr ISteamMatchmakingServers,
				IntPtr hRequest);

			[DllImport("steam_api64.dll")]
			internal static extern int SteamAPI_ISteamMatchmakingServers_GetServerCount(
				IntPtr ISteamMatchmakingServers,
				IntPtr hRequest);

			[DllImport("steam_api64.dll")]
			internal static extern void SteamAPI_ISteamMatchmakingServers_RefreshServer(
				IntPtr ISteamMatchmakingServers,
				IntPtr hRequest,
				int iServer);

			[DllImport("steam_api64.dll")]
			internal static extern HServerQuery SteamAPI_ISteamMatchmakingServers_PingServer(
				IntPtr ISteamMatchmakingServers,
				uint unIP,
				ushort usPort,
				IntPtr pRequestServersResponse);

			[DllImport("steam_api64.dll")]
			internal static extern HServerQuery SteamAPI_ISteamMatchmakingServers_PlayerDetails(
				IntPtr ISteamMatchmakingServers,
				uint unIP,
				ushort usPort,
				IntPtr pRequestServersResponse);

			[DllImport("steam_api64.dll")]
			internal static extern HServerQuery SteamAPI_ISteamMatchmakingServers_ServerRules(
				IntPtr ISteamMatchmakingServers,
				uint unIP,
				ushort usPort,
				IntPtr pRequestServersResponse);

			[DllImport("steam_api64.dll")]
			internal static extern void SteamAPI_ISteamMatchmakingServers_CancelServerQuery(
				IntPtr ISteamMatchmakingServers,
				int hServerQuery);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamRemoteStorage_FileWrite(
				IntPtr ISteamRemoteStorage,
				string pchFile,
				IntPtr pvData,
				int cubData);

			[DllImport("steam_api64.dll")]
			internal static extern int SteamAPI_ISteamRemoteStorage_FileRead(
				IntPtr ISteamRemoteStorage,
				string pchFile,
				IntPtr pvData,
				int cubDataToRead);

			[DllImport("steam_api64.dll")]
			internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_FileWriteAsync(
				IntPtr ISteamRemoteStorage,
				string pchFile,
				IntPtr pvData,
				uint cubData);

			[DllImport("steam_api64.dll")]
			internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_FileReadAsync(
				IntPtr ISteamRemoteStorage,
				string pchFile,
				uint nOffset,
				uint cubToRead);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamRemoteStorage_FileReadAsyncComplete(
				IntPtr ISteamRemoteStorage,
				ulong hReadCall,
				IntPtr pvBuffer,
				uint cubToRead);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamRemoteStorage_FileForget(
				IntPtr ISteamRemoteStorage,
				string pchFile);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamRemoteStorage_FileDelete(
				IntPtr ISteamRemoteStorage,
				string pchFile);

			[DllImport("steam_api64.dll")]
			internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_FileShare(
				IntPtr ISteamRemoteStorage,
				string pchFile);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamRemoteStorage_SetSyncPlatforms(
				IntPtr ISteamRemoteStorage,
				string pchFile,
				RemoteStoragePlatform eRemoteStoragePlatform);

			[DllImport("steam_api64.dll")]
			internal static extern UGCFileWriteStreamHandle_t SteamAPI_ISteamRemoteStorage_FileWriteStreamOpen(
				IntPtr ISteamRemoteStorage,
				string pchFile);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamRemoteStorage_FileWriteStreamWriteChunk(
				IntPtr ISteamRemoteStorage,
				ulong writeHandle,
				IntPtr pvData,
				int cubData);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamRemoteStorage_FileWriteStreamClose(
				IntPtr ISteamRemoteStorage,
				ulong writeHandle);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamRemoteStorage_FileWriteStreamCancel(
				IntPtr ISteamRemoteStorage,
				ulong writeHandle);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamRemoteStorage_FileExists(
				IntPtr ISteamRemoteStorage,
				string pchFile);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamRemoteStorage_FilePersisted(
				IntPtr ISteamRemoteStorage,
				string pchFile);

			[DllImport("steam_api64.dll")]
			internal static extern int SteamAPI_ISteamRemoteStorage_GetFileSize(
				IntPtr ISteamRemoteStorage,
				string pchFile);

			[DllImport("steam_api64.dll")]
			internal static extern long SteamAPI_ISteamRemoteStorage_GetFileTimestamp(
				IntPtr ISteamRemoteStorage,
				string pchFile);

			[DllImport("steam_api64.dll")]
			internal static extern RemoteStoragePlatform SteamAPI_ISteamRemoteStorage_GetSyncPlatforms(
				IntPtr ISteamRemoteStorage,
				string pchFile);

			[DllImport("steam_api64.dll")]
			internal static extern int SteamAPI_ISteamRemoteStorage_GetFileCount(
				IntPtr ISteamRemoteStorage);

			[DllImport("steam_api64.dll")]
			internal static extern IntPtr SteamAPI_ISteamRemoteStorage_GetFileNameAndSize(
				IntPtr ISteamRemoteStorage,
				int iFile,
				out int pnFileSizeInBytes);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamRemoteStorage_GetQuota(
				IntPtr ISteamRemoteStorage,
				out ulong pnTotalBytes,
				out ulong puAvailableBytes);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamRemoteStorage_IsCloudEnabledForAccount(
				IntPtr ISteamRemoteStorage);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamRemoteStorage_IsCloudEnabledForApp(
				IntPtr ISteamRemoteStorage);

			[DllImport("steam_api64.dll")]
			internal static extern void SteamAPI_ISteamRemoteStorage_SetCloudEnabledForApp(
				IntPtr ISteamRemoteStorage,
				[MarshalAs(UnmanagedType.U1)] bool bEnabled);

			[DllImport("steam_api64.dll")]
			internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_UGCDownload(
				IntPtr ISteamRemoteStorage,
				ulong hContent,
				uint unPriority);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamRemoteStorage_GetUGCDownloadProgress(
				IntPtr ISteamRemoteStorage,
				ulong hContent,
				out int pnBytesDownloaded,
				out int pnBytesExpected);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamRemoteStorage_GetUGCDetails(
				IntPtr ISteamRemoteStorage,
				ulong hContent,
				ref uint pnAppID,
				StringBuilder ppchName,
				out int pnFileSizeInBytes,
				out ulong pSteamIDOwner);

			[DllImport("steam_api64.dll")]
			internal static extern int SteamAPI_ISteamRemoteStorage_UGCRead(
				IntPtr ISteamRemoteStorage,
				ulong hContent,
				IntPtr pvData,
				int cubDataToRead,
				uint cOffset,
				UGCReadAction eAction);

			[DllImport("steam_api64.dll")]
			internal static extern int SteamAPI_ISteamRemoteStorage_GetCachedUGCCount(
				IntPtr ISteamRemoteStorage);

			[DllImport("steam_api64.dll")]
			internal static extern UGCHandle_t SteamAPI_ISteamRemoteStorage_GetCachedUGCHandle(
				IntPtr ISteamRemoteStorage,
				int iCachedContent);

			[DllImport("steam_api64.dll")]
			internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_PublishWorkshopFile(
				IntPtr ISteamRemoteStorage,
				string pchFile,
				string pchPreviewFile,
				uint nConsumerAppId,
				string pchTitle,
				string pchDescription,
				RemoteStoragePublishedFileVisibility eVisibility,
				ref SteamParamStringArray_t pTags,
				WorkshopFileType eWorkshopFileType);

			[DllImport("steam_api64.dll")]
			internal static extern PublishedFileUpdateHandle_t
				SteamAPI_ISteamRemoteStorage_CreatePublishedFileUpdateRequest(
					IntPtr ISteamRemoteStorage,
					ulong unPublishedFileId);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamRemoteStorage_UpdatePublishedFileFile(
				IntPtr ISteamRemoteStorage,
				ulong updateHandle,
				string pchFile);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamRemoteStorage_UpdatePublishedFilePreviewFile(
				IntPtr ISteamRemoteStorage,
				ulong updateHandle,
				string pchPreviewFile);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamRemoteStorage_UpdatePublishedFileTitle(
				IntPtr ISteamRemoteStorage,
				ulong updateHandle,
				string pchTitle);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamRemoteStorage_UpdatePublishedFileDescription(
				IntPtr ISteamRemoteStorage,
				ulong updateHandle,
				string pchDescription);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamRemoteStorage_UpdatePublishedFileVisibility(
				IntPtr ISteamRemoteStorage,
				ulong updateHandle,
				RemoteStoragePublishedFileVisibility eVisibility);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamRemoteStorage_UpdatePublishedFileTags(
				IntPtr ISteamRemoteStorage,
				ulong updateHandle,
				ref SteamParamStringArray_t pTags);

			[DllImport("steam_api64.dll")]
			internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_CommitPublishedFileUpdate(
				IntPtr ISteamRemoteStorage,
				ulong updateHandle);

			[DllImport("steam_api64.dll")]
			internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_GetPublishedFileDetails(
				IntPtr ISteamRemoteStorage,
				ulong unPublishedFileId,
				uint unMaxSecondsOld);

			[DllImport("steam_api64.dll")]
			internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_DeletePublishedFile(
				IntPtr ISteamRemoteStorage,
				ulong unPublishedFileId);

			[DllImport("steam_api64.dll")]
			internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_EnumerateUserPublishedFiles(
				IntPtr ISteamRemoteStorage,
				uint unStartIndex);

			[DllImport("steam_api64.dll")]
			internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_SubscribePublishedFile(
				IntPtr ISteamRemoteStorage,
				ulong unPublishedFileId);

			[DllImport("steam_api64.dll")]
			internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_EnumerateUserSubscribedFiles(
				IntPtr ISteamRemoteStorage,
				uint unStartIndex);

			[DllImport("steam_api64.dll")]
			internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_UnsubscribePublishedFile(
				IntPtr ISteamRemoteStorage,
				ulong unPublishedFileId);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamRemoteStorage_UpdatePublishedFileSetChangeDescription(
				IntPtr ISteamRemoteStorage,
				ulong updateHandle,
				string pchChangeDescription);

			[DllImport("steam_api64.dll")]
			internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_GetPublishedItemVoteDetails(
				IntPtr ISteamRemoteStorage,
				ulong unPublishedFileId);

			[DllImport("steam_api64.dll")]
			internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_UpdateUserPublishedItemVote(
				IntPtr ISteamRemoteStorage,
				ulong unPublishedFileId,
				[MarshalAs(UnmanagedType.U1)] bool bVoteUp);

			[DllImport("steam_api64.dll")]
			internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_GetUserPublishedItemVoteDetails(
				IntPtr ISteamRemoteStorage,
				ulong unPublishedFileId);

			[DllImport("steam_api64.dll")]
			internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_EnumerateUserSharedWorkshopFiles(
				IntPtr ISteamRemoteStorage,
				ulong steamId,
				uint unStartIndex,
				ref SteamParamStringArray_t pRequiredTags,
				ref SteamParamStringArray_t pExcludedTags);

			[DllImport("steam_api64.dll")]
			internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_PublishVideo(
				IntPtr ISteamRemoteStorage,
				WorkshopVideoProvider eVideoProvider,
				string pchVideoAccount,
				string pchVideoIdentifier,
				string pchPreviewFile,
				uint nConsumerAppId,
				string pchTitle,
				string pchDescription,
				RemoteStoragePublishedFileVisibility eVisibility,
				ref SteamParamStringArray_t pTags);

			[DllImport("steam_api64.dll")]
			internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_SetUserPublishedFileAction(
				IntPtr ISteamRemoteStorage,
				ulong unPublishedFileId,
				WorkshopFileAction eAction);

			[DllImport("steam_api64.dll")]
			internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_EnumeratePublishedFilesByUserAction(
				IntPtr ISteamRemoteStorage,
				WorkshopFileAction eAction,
				uint unStartIndex);

			[DllImport("steam_api64.dll")]
			internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_EnumeratePublishedWorkshopFiles(
				IntPtr ISteamRemoteStorage,
				WorkshopEnumerationType eEnumerationType,
				uint unStartIndex,
				uint unCount,
				uint unDays,
				ref SteamParamStringArray_t pTags,
				ref SteamParamStringArray_t pUserTags);

			[DllImport("steam_api64.dll")]
			internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_UGCDownloadToLocation(
				IntPtr ISteamRemoteStorage,
				ulong hContent,
				string pchLocation,
				uint unPriority);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamUserStats_RequestCurrentStats(
				IntPtr ISteamUserStats);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamUserStats_GetStat(
				IntPtr ISteamUserStats,
				string pchName,
				out int pData);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamUserStats_GetStat0(
				IntPtr ISteamUserStats,
				string pchName,
				out float pData);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamUserStats_SetStat(
				IntPtr ISteamUserStats,
				string pchName,
				int nData);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamUserStats_SetStat0(
				IntPtr ISteamUserStats,
				string pchName,
				float fData);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamUserStats_UpdateAvgRateStat(
				IntPtr ISteamUserStats,
				string pchName,
				float flCountThisSession,
				double dSessionLength);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamUserStats_GetAchievement(
				IntPtr ISteamUserStats,
				string pchName,
				[MarshalAs(UnmanagedType.U1)] ref bool pbAchieved);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamUserStats_SetAchievement(
				IntPtr ISteamUserStats,
				string pchName);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamUserStats_ClearAchievement(
				IntPtr ISteamUserStats,
				string pchName);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamUserStats_GetAchievementAndUnlockTime(
				IntPtr ISteamUserStats,
				string pchName,
				[MarshalAs(UnmanagedType.U1)] ref bool pbAchieved,
				out uint punUnlockTime);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamUserStats_StoreStats(IntPtr ISteamUserStats);

			[DllImport("steam_api64.dll")]
			internal static extern int SteamAPI_ISteamUserStats_GetAchievementIcon(
				IntPtr ISteamUserStats,
				string pchName);

			[DllImport("steam_api64.dll")]
			internal static extern IntPtr SteamAPI_ISteamUserStats_GetAchievementDisplayAttribute(
				IntPtr ISteamUserStats,
				string pchName,
				string pchKey);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamUserStats_IndicateAchievementProgress(
				IntPtr ISteamUserStats,
				string pchName,
				uint nCurProgress,
				uint nMaxProgress);

			[DllImport("steam_api64.dll")]
			internal static extern uint SteamAPI_ISteamUserStats_GetNumAchievements(
				IntPtr ISteamUserStats);

			[DllImport("steam_api64.dll")]
			internal static extern IntPtr SteamAPI_ISteamUserStats_GetAchievementName(
				IntPtr ISteamUserStats,
				uint iAchievement);

			[DllImport("steam_api64.dll")]
			internal static extern SteamAPICall_t SteamAPI_ISteamUserStats_RequestUserStats(
				IntPtr ISteamUserStats,
				ulong steamIDUser);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamUserStats_GetUserStat(
				IntPtr ISteamUserStats,
				ulong steamIDUser,
				string pchName,
				out int pData);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamUserStats_GetUserStat0(
				IntPtr ISteamUserStats,
				ulong steamIDUser,
				string pchName,
				out float pData);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamUserStats_GetUserAchievement(
				IntPtr ISteamUserStats,
				ulong steamIDUser,
				string pchName,
				[MarshalAs(UnmanagedType.U1)] ref bool pbAchieved);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamUserStats_GetUserAchievementAndUnlockTime(
				IntPtr ISteamUserStats,
				ulong steamIDUser,
				string pchName,
				[MarshalAs(UnmanagedType.U1)] ref bool pbAchieved,
				out uint punUnlockTime);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamUserStats_ResetAllStats(
				IntPtr ISteamUserStats,
				[MarshalAs(UnmanagedType.U1)] bool bAchievementsToo);

			[DllImport("steam_api64.dll")]
			internal static extern SteamAPICall_t SteamAPI_ISteamUserStats_FindOrCreateLeaderboard(
				IntPtr ISteamUserStats,
				string pchLeaderboardName,
				LeaderboardSortMethod eLeaderboardSortMethod,
				LeaderboardDisplayType eLeaderboardDisplayType);

			[DllImport("steam_api64.dll")]
			internal static extern SteamAPICall_t SteamAPI_ISteamUserStats_FindLeaderboard(
				IntPtr ISteamUserStats,
				string pchLeaderboardName);

			[DllImport("steam_api64.dll")]
			internal static extern IntPtr SteamAPI_ISteamUserStats_GetLeaderboardName(
				IntPtr ISteamUserStats,
				ulong hSteamLeaderboard);

			[DllImport("steam_api64.dll")]
			internal static extern int SteamAPI_ISteamUserStats_GetLeaderboardEntryCount(
				IntPtr ISteamUserStats,
				ulong hSteamLeaderboard);

			[DllImport("steam_api64.dll")]
			internal static extern LeaderboardSortMethod SteamAPI_ISteamUserStats_GetLeaderboardSortMethod(
				IntPtr ISteamUserStats,
				ulong hSteamLeaderboard);

			[DllImport("steam_api64.dll")]
			internal static extern LeaderboardDisplayType SteamAPI_ISteamUserStats_GetLeaderboardDisplayType(
				IntPtr ISteamUserStats,
				ulong hSteamLeaderboard);

			[DllImport("steam_api64.dll")]
			internal static extern SteamAPICall_t SteamAPI_ISteamUserStats_DownloadLeaderboardEntries(
				IntPtr ISteamUserStats,
				ulong hSteamLeaderboard,
				LeaderboardDataRequest eLeaderboardDataRequest,
				int nRangeStart,
				int nRangeEnd);

			[DllImport("steam_api64.dll")]
			internal static extern SteamAPICall_t SteamAPI_ISteamUserStats_DownloadLeaderboardEntriesForUsers(
				IntPtr ISteamUserStats,
				ulong hSteamLeaderboard,
				IntPtr prgUsers,
				int cUsers);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamUserStats_GetDownloadedLeaderboardEntry(
				IntPtr ISteamUserStats,
				ulong hSteamLeaderboardEntries,
				int index,
				ref LeaderboardEntry_t pLeaderboardEntry,
				IntPtr pDetails,
				int cDetailsMax);

			[DllImport("steam_api64.dll")]
			internal static extern SteamAPICall_t SteamAPI_ISteamUserStats_UploadLeaderboardScore(
				IntPtr ISteamUserStats,
				ulong hSteamLeaderboard,
				LeaderboardUploadScoreMethod eLeaderboardUploadScoreMethod,
				int nScore,
				int[] pScoreDetails,
				int cScoreDetailsCount);

			[DllImport("steam_api64.dll")]
			internal static extern SteamAPICall_t SteamAPI_ISteamUserStats_AttachLeaderboardUGC(
				IntPtr ISteamUserStats,
				ulong hSteamLeaderboard,
				ulong hUGC);

			[DllImport("steam_api64.dll")]
			internal static extern SteamAPICall_t SteamAPI_ISteamUserStats_GetNumberOfCurrentPlayers(
				IntPtr ISteamUserStats);

			[DllImport("steam_api64.dll")]
			internal static extern SteamAPICall_t SteamAPI_ISteamUserStats_RequestGlobalAchievementPercentages(
				IntPtr ISteamUserStats);

			[DllImport("steam_api64.dll")]
			internal static extern int SteamAPI_ISteamUserStats_GetMostAchievedAchievementInfo(
				IntPtr ISteamUserStats,
				StringBuilder pchName,
				uint unNameBufLen,
				out float pflPercent,
				[MarshalAs(UnmanagedType.U1)] ref bool pbAchieved);

			[DllImport("steam_api64.dll")]
			internal static extern int SteamAPI_ISteamUserStats_GetNextMostAchievedAchievementInfo(
				IntPtr ISteamUserStats,
				int iIteratorPrevious,
				StringBuilder pchName,
				uint unNameBufLen,
				out float pflPercent,
				[MarshalAs(UnmanagedType.U1)] ref bool pbAchieved);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamUserStats_GetAchievementAchievedPercent(
				IntPtr ISteamUserStats,
				string pchName,
				out float pflPercent);

			[DllImport("steam_api64.dll")]
			internal static extern SteamAPICall_t SteamAPI_ISteamUserStats_RequestGlobalStats(
				IntPtr ISteamUserStats,
				int nHistoryDays);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamUserStats_GetGlobalStat(
				IntPtr ISteamUserStats,
				string pchStatName,
				out long pData);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamUserStats_GetGlobalStat0(
				IntPtr ISteamUserStats,
				string pchStatName,
				out double pData);

			[DllImport("steam_api64.dll")]
			internal static extern int SteamAPI_ISteamUserStats_GetGlobalStatHistory(
				IntPtr ISteamUserStats,
				string pchStatName,
				out long pData,
				uint cubData);

			[DllImport("steam_api64.dll")]
			internal static extern int SteamAPI_ISteamUserStats_GetGlobalStatHistory0(
				IntPtr ISteamUserStats,
				string pchStatName,
				out double pData,
				uint cubData);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamApps_BIsSubscribed(IntPtr ISteamApps);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamApps_BIsLowViolence(IntPtr ISteamApps);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamApps_BIsCybercafe(IntPtr ISteamApps);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamApps_BIsVACBanned(IntPtr ISteamApps);

			[DllImport("steam_api64.dll")]
			internal static extern IntPtr SteamAPI_ISteamApps_GetCurrentGameLanguage(IntPtr ISteamApps);

			[DllImport("steam_api64.dll")]
			internal static extern IntPtr SteamAPI_ISteamApps_GetAvailableGameLanguages(
				IntPtr ISteamApps);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamApps_BIsSubscribedApp(
				IntPtr ISteamApps,
				uint appID);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamApps_BIsDlcInstalled(
				IntPtr ISteamApps,
				uint appID);

			[DllImport("steam_api64.dll")]
			internal static extern uint SteamAPI_ISteamApps_GetEarliestPurchaseUnixTime(
				IntPtr ISteamApps,
				uint nAppID);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamApps_BIsSubscribedFromFreeWeekend(
				IntPtr ISteamApps);

			[DllImport("steam_api64.dll")]
			internal static extern int SteamAPI_ISteamApps_GetDLCCount(IntPtr ISteamApps);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamApps_BGetDLCDataByIndex(
				IntPtr ISteamApps,
				int iDLC,
				ref uint pAppID,
				[MarshalAs(UnmanagedType.U1)] ref bool pbAvailable,
				StringBuilder pchName,
				int cchNameBufferSize);

			[DllImport("steam_api64.dll")]
			internal static extern void SteamAPI_ISteamApps_InstallDLC(IntPtr ISteamApps, uint nAppID);

			[DllImport("steam_api64.dll")]
			internal static extern void SteamAPI_ISteamApps_UninstallDLC(IntPtr ISteamApps, uint nAppID);

			[DllImport("steam_api64.dll")]
			internal static extern void SteamAPI_ISteamApps_RequestAppProofOfPurchaseKey(
				IntPtr ISteamApps,
				uint nAppID);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamApps_GetCurrentBetaName(
				IntPtr ISteamApps,
				StringBuilder pchName,
				int cchNameBufferSize);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamApps_MarkContentCorrupt(
				IntPtr ISteamApps,
				[MarshalAs(UnmanagedType.U1)] bool bMissingFilesOnly);

			[DllImport("steam_api64.dll")]
			internal static extern uint SteamAPI_ISteamApps_GetInstalledDepots(
				IntPtr ISteamApps,
				uint appID,
				IntPtr pvecDepots,
				uint cMaxDepots);

			[DllImport("steam_api64.dll")]
			internal static extern uint SteamAPI_ISteamApps_GetAppInstallDir(
				IntPtr ISteamApps,
				uint appID,
				StringBuilder pchFolder,
				uint cchFolderBufferSize);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamApps_BIsAppInstalled(
				IntPtr ISteamApps,
				uint appID);

			[DllImport("steam_api64.dll")]
			internal static extern CSteamID SteamAPI_ISteamApps_GetAppOwner(IntPtr ISteamApps);

			[DllImport("steam_api64.dll")]
			internal static extern IntPtr SteamAPI_ISteamApps_GetLaunchQueryParam(
				IntPtr ISteamApps,
				string pchKey);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamApps_GetDlcDownloadProgress(
				IntPtr ISteamApps,
				uint nAppID,
				out ulong punBytesDownloaded,
				out ulong punBytesTotal);

			[DllImport("steam_api64.dll")]
			internal static extern int SteamAPI_ISteamApps_GetAppBuildId(IntPtr ISteamApps);

			[DllImport("steam_api64.dll")]
			internal static extern void SteamAPI_ISteamApps_RequestAllProofOfPurchaseKeys(
				IntPtr ISteamApps);

			[DllImport("steam_api64.dll")]
			internal static extern SteamAPICall_t SteamAPI_ISteamApps_GetFileDetails(
				IntPtr ISteamApps,
				string pszFileName);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamNetworking_SendP2PPacket(
				IntPtr ISteamNetworking,
				ulong steamIDRemote,
				IntPtr pubData,
				uint cubData,
				P2PSend eP2PSendType,
				int nChannel);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamNetworking_IsP2PPacketAvailable(
				IntPtr ISteamNetworking,
				out uint pcubMsgSize,
				int nChannel);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamNetworking_ReadP2PPacket(
				IntPtr ISteamNetworking,
				IntPtr pubDest,
				uint cubDest,
				out uint pcubMsgSize,
				out ulong psteamIDRemote,
				int nChannel);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamNetworking_AcceptP2PSessionWithUser(
				IntPtr ISteamNetworking,
				ulong steamIDRemote);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamNetworking_CloseP2PSessionWithUser(
				IntPtr ISteamNetworking,
				ulong steamIDRemote);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamNetworking_CloseP2PChannelWithUser(
				IntPtr ISteamNetworking,
				ulong steamIDRemote,
				int nChannel);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamNetworking_GetP2PSessionState(
				IntPtr ISteamNetworking,
				ulong steamIDRemote,
				ref P2PSessionState_t pConnectionState);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamNetworking_AllowP2PPacketRelay(
				IntPtr ISteamNetworking,
				[MarshalAs(UnmanagedType.U1)] bool bAllow);

			[DllImport("steam_api64.dll")]
			internal static extern SNetListenSocket_t SteamAPI_ISteamNetworking_CreateListenSocket(
				IntPtr ISteamNetworking,
				int nVirtualP2PPort,
				uint nIP,
				ushort nPort,
				[MarshalAs(UnmanagedType.U1)] bool bAllowUseOfPacketRelay);

			[DllImport("steam_api64.dll")]
			internal static extern SNetSocket_t SteamAPI_ISteamNetworking_CreateP2PConnectionSocket(
				IntPtr ISteamNetworking,
				ulong steamIDTarget,
				int nVirtualPort,
				int nTimeoutSec,
				[MarshalAs(UnmanagedType.U1)] bool bAllowUseOfPacketRelay);

			[DllImport("steam_api64.dll")]
			internal static extern SNetSocket_t SteamAPI_ISteamNetworking_CreateConnectionSocket(
				IntPtr ISteamNetworking,
				uint nIP,
				ushort nPort,
				int nTimeoutSec);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamNetworking_DestroySocket(
				IntPtr ISteamNetworking,
				uint hSocket,
				[MarshalAs(UnmanagedType.U1)] bool bNotifyRemoteEnd);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamNetworking_DestroyListenSocket(
				IntPtr ISteamNetworking,
				uint hSocket,
				[MarshalAs(UnmanagedType.U1)] bool bNotifyRemoteEnd);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamNetworking_SendDataOnSocket(
				IntPtr ISteamNetworking,
				uint hSocket,
				IntPtr pubData,
				uint cubData,
				[MarshalAs(UnmanagedType.U1)] bool bReliable);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamNetworking_IsDataAvailableOnSocket(
				IntPtr ISteamNetworking,
				uint hSocket,
				out uint pcubMsgSize);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamNetworking_RetrieveDataFromSocket(
				IntPtr ISteamNetworking,
				uint hSocket,
				IntPtr pubDest,
				uint cubDest,
				out uint pcubMsgSize);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamNetworking_IsDataAvailable(
				IntPtr ISteamNetworking,
				uint hListenSocket,
				out uint pcubMsgSize,
				ref uint phSocket);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamNetworking_RetrieveData(
				IntPtr ISteamNetworking,
				uint hListenSocket,
				IntPtr pubDest,
				uint cubDest,
				out uint pcubMsgSize,
				ref uint phSocket);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamNetworking_GetSocketInfo(
				IntPtr ISteamNetworking,
				uint hSocket,
				out ulong pSteamIDRemote,
				IntPtr peSocketStatus,
				out uint punIPRemote,
				out ushort punPortRemote);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamNetworking_GetListenSocketInfo(
				IntPtr ISteamNetworking,
				uint hListenSocket,
				out uint pnIP,
				out ushort pnPort);

			[DllImport("steam_api64.dll")]
			internal static extern SNetSocketConnectionType SteamAPI_ISteamNetworking_GetSocketConnectionType(
				IntPtr ISteamNetworking,
				uint hSocket);

			[DllImport("steam_api64.dll")]
			internal static extern int SteamAPI_ISteamNetworking_GetMaxPacketSize(
				IntPtr ISteamNetworking,
				uint hSocket);

			[DllImport("steam_api64.dll")]
			internal static extern ScreenshotHandle SteamAPI_ISteamScreenshots_WriteScreenshot(
				IntPtr ISteamScreenshots,
				IntPtr pubRGB,
				uint cubRGB,
				int nWidth,
				int nHeight);

			[DllImport("steam_api64.dll")]
			internal static extern ScreenshotHandle SteamAPI_ISteamScreenshots_AddScreenshotToLibrary(
				IntPtr ISteamScreenshots,
				string pchFilename,
				string pchThumbnailFilename,
				int nWidth,
				int nHeight);

			[DllImport("steam_api64.dll")]
			internal static extern void SteamAPI_ISteamScreenshots_TriggerScreenshot(
				IntPtr ISteamScreenshots);

			[DllImport("steam_api64.dll")]
			internal static extern void SteamAPI_ISteamScreenshots_HookScreenshots(
				IntPtr ISteamScreenshots,
				[MarshalAs(UnmanagedType.U1)] bool bHook);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamScreenshots_SetLocation(
				IntPtr ISteamScreenshots,
				uint hScreenshot,
				string pchLocation);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamScreenshots_TagUser(
				IntPtr ISteamScreenshots,
				uint hScreenshot,
				ulong steamID);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamScreenshots_TagPublishedFile(
				IntPtr ISteamScreenshots,
				uint hScreenshot,
				ulong unPublishedFileID);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamScreenshots_IsScreenshotsHooked(
				IntPtr ISteamScreenshots);

			[DllImport("steam_api64.dll")]
			internal static extern ScreenshotHandle SteamAPI_ISteamScreenshots_AddVRScreenshotToLibrary(
				IntPtr ISteamScreenshots,
				VRScreenshotType eType,
				string pchFilename,
				string pchVRFilename);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamMusic_BIsEnabled(IntPtr ISteamMusic);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamMusic_BIsPlaying(IntPtr ISteamMusic);

			[DllImport("steam_api64.dll")]
			internal static extern AudioPlayback_Status SteamAPI_ISteamMusic_GetPlaybackStatus(
				IntPtr ISteamMusic);

			[DllImport("steam_api64.dll")]
			internal static extern void SteamAPI_ISteamMusic_Play(IntPtr ISteamMusic);

			[DllImport("steam_api64.dll")]
			internal static extern void SteamAPI_ISteamMusic_Pause(IntPtr ISteamMusic);

			[DllImport("steam_api64.dll")]
			internal static extern void SteamAPI_ISteamMusic_PlayPrevious(IntPtr ISteamMusic);

			[DllImport("steam_api64.dll")]
			internal static extern void SteamAPI_ISteamMusic_PlayNext(IntPtr ISteamMusic);

			[DllImport("steam_api64.dll")]
			internal static extern void SteamAPI_ISteamMusic_SetVolume(
				IntPtr ISteamMusic,
				float flVolume);

			[DllImport("steam_api64.dll")]
			internal static extern float SteamAPI_ISteamMusic_GetVolume(IntPtr ISteamMusic);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamMusicRemote_RegisterSteamMusicRemote(
				IntPtr ISteamMusicRemote,
				string pchName);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamMusicRemote_DeregisterSteamMusicRemote(
				IntPtr ISteamMusicRemote);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamMusicRemote_BIsCurrentMusicRemote(
				IntPtr ISteamMusicRemote);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamMusicRemote_BActivationSuccess(
				IntPtr ISteamMusicRemote,
				[MarshalAs(UnmanagedType.U1)] bool bValue);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamMusicRemote_SetDisplayName(
				IntPtr ISteamMusicRemote,
				string pchDisplayName);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamMusicRemote_SetPNGIcon_64x64(
				IntPtr ISteamMusicRemote,
				IntPtr pvBuffer,
				uint cbBufferLength);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamMusicRemote_EnablePlayPrevious(
				IntPtr ISteamMusicRemote,
				[MarshalAs(UnmanagedType.U1)] bool bValue);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamMusicRemote_EnablePlayNext(
				IntPtr ISteamMusicRemote,
				[MarshalAs(UnmanagedType.U1)] bool bValue);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamMusicRemote_EnableShuffled(
				IntPtr ISteamMusicRemote,
				[MarshalAs(UnmanagedType.U1)] bool bValue);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamMusicRemote_EnableLooped(
				IntPtr ISteamMusicRemote,
				[MarshalAs(UnmanagedType.U1)] bool bValue);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamMusicRemote_EnableQueue(
				IntPtr ISteamMusicRemote,
				[MarshalAs(UnmanagedType.U1)] bool bValue);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamMusicRemote_EnablePlaylists(
				IntPtr ISteamMusicRemote,
				[MarshalAs(UnmanagedType.U1)] bool bValue);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamMusicRemote_UpdatePlaybackStatus(
				IntPtr ISteamMusicRemote,
				AudioPlayback_Status nStatus);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamMusicRemote_UpdateShuffled(
				IntPtr ISteamMusicRemote,
				[MarshalAs(UnmanagedType.U1)] bool bValue);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamMusicRemote_UpdateLooped(
				IntPtr ISteamMusicRemote,
				[MarshalAs(UnmanagedType.U1)] bool bValue);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamMusicRemote_UpdateVolume(
				IntPtr ISteamMusicRemote,
				float flValue);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamMusicRemote_CurrentEntryWillChange(
				IntPtr ISteamMusicRemote);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamMusicRemote_CurrentEntryIsAvailable(
				IntPtr ISteamMusicRemote,
				[MarshalAs(UnmanagedType.U1)] bool bAvailable);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamMusicRemote_UpdateCurrentEntryText(
				IntPtr ISteamMusicRemote,
				string pchText);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamMusicRemote_UpdateCurrentEntryElapsedSeconds(
				IntPtr ISteamMusicRemote,
				int nValue);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamMusicRemote_UpdateCurrentEntryCoverArt(
				IntPtr ISteamMusicRemote,
				IntPtr pvBuffer,
				uint cbBufferLength);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamMusicRemote_CurrentEntryDidChange(
				IntPtr ISteamMusicRemote);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamMusicRemote_QueueWillChange(
				IntPtr ISteamMusicRemote);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamMusicRemote_ResetQueueEntries(
				IntPtr ISteamMusicRemote);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamMusicRemote_SetQueueEntry(
				IntPtr ISteamMusicRemote,
				int nID,
				int nPosition,
				string pchEntryText);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamMusicRemote_SetCurrentQueueEntry(
				IntPtr ISteamMusicRemote,
				int nID);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamMusicRemote_QueueDidChange(
				IntPtr ISteamMusicRemote);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamMusicRemote_PlaylistWillChange(
				IntPtr ISteamMusicRemote);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamMusicRemote_ResetPlaylistEntries(
				IntPtr ISteamMusicRemote);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamMusicRemote_SetPlaylistEntry(
				IntPtr ISteamMusicRemote,
				int nID,
				int nPosition,
				string pchEntryText);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamMusicRemote_SetCurrentPlaylistEntry(
				IntPtr ISteamMusicRemote,
				int nID);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamMusicRemote_PlaylistDidChange(
				IntPtr ISteamMusicRemote);

			[DllImport("steam_api64.dll")]
			internal static extern HTTPRequestHandle SteamAPI_ISteamHTTP_CreateHTTPRequest(
				IntPtr ISteamHTTP,
				HTTPMethod eHTTPRequestMethod,
				string pchAbsoluteURL);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamHTTP_SetHTTPRequestContextValue(
				IntPtr ISteamHTTP,
				uint hRequest,
				ulong ulContextValue);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamHTTP_SetHTTPRequestNetworkActivityTimeout(
				IntPtr ISteamHTTP,
				uint hRequest,
				uint unTimeoutSeconds);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamHTTP_SetHTTPRequestHeaderValue(
				IntPtr ISteamHTTP,
				uint hRequest,
				string pchHeaderName,
				string pchHeaderValue);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamHTTP_SetHTTPRequestGetOrPostParameter(
				IntPtr ISteamHTTP,
				uint hRequest,
				string pchParamName,
				string pchParamValue);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamHTTP_SendHTTPRequest(
				IntPtr ISteamHTTP,
				uint hRequest,
				ref ulong pCallHandle);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamHTTP_SendHTTPRequestAndStreamResponse(
				IntPtr ISteamHTTP,
				uint hRequest,
				ref ulong pCallHandle);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamHTTP_DeferHTTPRequest(
				IntPtr ISteamHTTP,
				uint hRequest);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamHTTP_PrioritizeHTTPRequest(
				IntPtr ISteamHTTP,
				uint hRequest);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamHTTP_GetHTTPResponseHeaderSize(
				IntPtr ISteamHTTP,
				uint hRequest,
				string pchHeaderName,
				out uint unResponseHeaderSize);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamHTTP_GetHTTPResponseHeaderValue(
				IntPtr ISteamHTTP,
				uint hRequest,
				string pchHeaderName,
				out byte pHeaderValueBuffer,
				uint unBufferSize);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamHTTP_GetHTTPResponseBodySize(
				IntPtr ISteamHTTP,
				uint hRequest,
				out uint unBodySize);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamHTTP_GetHTTPResponseBodyData(
				IntPtr ISteamHTTP,
				uint hRequest,
				out byte pBodyDataBuffer,
				uint unBufferSize);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamHTTP_GetHTTPStreamingResponseBodyData(
				IntPtr ISteamHTTP,
				uint hRequest,
				uint cOffset,
				out byte pBodyDataBuffer,
				uint unBufferSize);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamHTTP_ReleaseHTTPRequest(
				IntPtr ISteamHTTP,
				uint hRequest);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamHTTP_GetHTTPDownloadProgressPct(
				IntPtr ISteamHTTP,
				uint hRequest,
				out float pflPercentOut);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamHTTP_SetHTTPRequestRawPostBody(
				IntPtr ISteamHTTP,
				uint hRequest,
				string pchContentType,
				out byte pubBody,
				uint unBodyLen);

			[DllImport("steam_api64.dll")]
			internal static extern HTTPCookieContainerHandle SteamAPI_ISteamHTTP_CreateCookieContainer(
				IntPtr ISteamHTTP,
				[MarshalAs(UnmanagedType.U1)] bool bAllowResponsesToModify);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamHTTP_ReleaseCookieContainer(
				IntPtr ISteamHTTP,
				uint hCookieContainer);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamHTTP_SetCookie(
				IntPtr ISteamHTTP,
				uint hCookieContainer,
				string pchHost,
				string pchUrl,
				string pchCookie);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamHTTP_SetHTTPRequestCookieContainer(
				IntPtr ISteamHTTP,
				uint hRequest,
				uint hCookieContainer);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamHTTP_SetHTTPRequestUserAgentInfo(
				IntPtr ISteamHTTP,
				uint hRequest,
				string pchUserAgentInfo);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamHTTP_SetHTTPRequestRequiresVerifiedCertificate(
				IntPtr ISteamHTTP,
				uint hRequest,
				[MarshalAs(UnmanagedType.U1)] bool bRequireVerifiedCertificate);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamHTTP_SetHTTPRequestAbsoluteTimeoutMS(
				IntPtr ISteamHTTP,
				uint hRequest,
				uint unMilliseconds);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamHTTP_GetHTTPRequestWasTimedOut(
				IntPtr ISteamHTTP,
				uint hRequest,
				[MarshalAs(UnmanagedType.U1)] ref bool pbWasTimedOut);

			[DllImport("steam_api64.dll")]
			internal static extern ClientUnifiedMessageHandle SteamAPI_ISteamUnifiedMessages_SendMethod(
				IntPtr ISteamUnifiedMessages,
				string pchServiceMethod,
				IntPtr pRequestBuffer,
				uint unRequestBufferSize,
				ulong unContext);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamUnifiedMessages_GetMethodResponseInfo(
				IntPtr ISteamUnifiedMessages,
				ulong hHandle,
				out uint punResponseSize,
				out Result peResult);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamUnifiedMessages_GetMethodResponseData(
				IntPtr ISteamUnifiedMessages,
				ulong hHandle,
				IntPtr pResponseBuffer,
				uint unResponseBufferSize,
				[MarshalAs(UnmanagedType.U1)] bool bAutoRelease);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamUnifiedMessages_ReleaseMethod(
				IntPtr ISteamUnifiedMessages,
				ulong hHandle);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamUnifiedMessages_SendNotification(
				IntPtr ISteamUnifiedMessages,
				string pchServiceNotification,
				IntPtr pNotificationBuffer,
				uint unNotificationBufferSize);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamController_Init(IntPtr ISteamController);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamController_Shutdown(IntPtr ISteamController);

			[DllImport("steam_api64.dll")]
			internal static extern void SteamAPI_ISteamController_RunFrame(IntPtr ISteamController);

			[DllImport("steam_api64.dll")]
			internal static extern int SteamAPI_ISteamController_GetConnectedControllers(
				IntPtr ISteamController,
				IntPtr handlesOut);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamController_ShowBindingPanel(
				IntPtr ISteamController,
				ulong controllerHandle);

			[DllImport("steam_api64.dll")]
			internal static extern ControllerActionSetHandle_t SteamAPI_ISteamController_GetActionSetHandle(
				IntPtr ISteamController,
				string pszActionSetName);

			[DllImport("steam_api64.dll")]
			internal static extern void SteamAPI_ISteamController_ActivateActionSet(
				IntPtr ISteamController,
				ulong controllerHandle,
				ulong actionSetHandle);

			[DllImport("steam_api64.dll")]
			internal static extern ControllerActionSetHandle_t SteamAPI_ISteamController_GetCurrentActionSet(
				IntPtr ISteamController,
				ulong controllerHandle);

			[DllImport("steam_api64.dll")]
			internal static extern ControllerDigitalActionHandle_t SteamAPI_ISteamController_GetDigitalActionHandle(
				IntPtr ISteamController,
				string pszActionName);

			[DllImport("steam_api64.dll")]
			internal static extern ControllerDigitalActionData_t SteamAPI_ISteamController_GetDigitalActionData(
				IntPtr ISteamController,
				ulong controllerHandle,
				ulong digitalActionHandle);

			[DllImport("steam_api64.dll")]
			internal static extern int SteamAPI_ISteamController_GetDigitalActionOrigins(
				IntPtr ISteamController,
				ulong controllerHandle,
				ulong actionSetHandle,
				ulong digitalActionHandle,
				out ControllerActionOrigin originsOut);

			[DllImport("steam_api64.dll")]
			internal static extern ControllerAnalogActionHandle_t SteamAPI_ISteamController_GetAnalogActionHandle(
				IntPtr ISteamController,
				string pszActionName);

			[DllImport("steam_api64.dll")]
			internal static extern ControllerAnalogActionData_t SteamAPI_ISteamController_GetAnalogActionData(
				IntPtr ISteamController,
				ulong controllerHandle,
				ulong analogActionHandle);

			[DllImport("steam_api64.dll")]
			internal static extern int SteamAPI_ISteamController_GetAnalogActionOrigins(
				IntPtr ISteamController,
				ulong controllerHandle,
				ulong actionSetHandle,
				ulong analogActionHandle,
				out ControllerActionOrigin originsOut);

			[DllImport("steam_api64.dll")]
			internal static extern void SteamAPI_ISteamController_StopAnalogActionMomentum(
				IntPtr ISteamController,
				ulong controllerHandle,
				ulong eAction);

			[DllImport("steam_api64.dll")]
			internal static extern void SteamAPI_ISteamController_TriggerHapticPulse(
				IntPtr ISteamController,
				ulong controllerHandle,
				SteamControllerPad eTargetPad,
				ushort usDurationMicroSec);

			[DllImport("steam_api64.dll")]
			internal static extern void SteamAPI_ISteamController_TriggerRepeatedHapticPulse(
				IntPtr ISteamController,
				ulong controllerHandle,
				SteamControllerPad eTargetPad,
				ushort usDurationMicroSec,
				ushort usOffMicroSec,
				ushort unRepeat,
				uint nFlags);

			[DllImport("steam_api64.dll")]
			internal static extern void SteamAPI_ISteamController_TriggerVibration(
				IntPtr ISteamController,
				ulong controllerHandle,
				ushort usLeftSpeed,
				ushort usRightSpeed);

			[DllImport("steam_api64.dll")]
			internal static extern void SteamAPI_ISteamController_SetLEDColor(
				IntPtr ISteamController,
				ulong controllerHandle,
				byte nColorR,
				byte nColorG,
				byte nColorB,
				uint nFlags);

			[DllImport("steam_api64.dll")]
			internal static extern int SteamAPI_ISteamController_GetGamepadIndexForController(
				IntPtr ISteamController,
				ulong ulControllerHandle);

			[DllImport("steam_api64.dll")]
			internal static extern ControllerHandle_t SteamAPI_ISteamController_GetControllerForGamepadIndex(
				IntPtr ISteamController,
				int nIndex);

			[DllImport("steam_api64.dll")]
			internal static extern ControllerMotionData_t SteamAPI_ISteamController_GetMotionData(
				IntPtr ISteamController,
				ulong controllerHandle);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamController_ShowDigitalActionOrigins(
				IntPtr ISteamController,
				ulong controllerHandle,
				ulong digitalActionHandle,
				float flScale,
				float flXPosition,
				float flYPosition);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamController_ShowAnalogActionOrigins(
				IntPtr ISteamController,
				ulong controllerHandle,
				ulong analogActionHandle,
				float flScale,
				float flXPosition,
				float flYPosition);

			[DllImport("steam_api64.dll")]
			internal static extern IntPtr SteamAPI_ISteamController_GetStringForActionOrigin(
				IntPtr ISteamController,
				ControllerActionOrigin eOrigin);

			[DllImport("steam_api64.dll")]
			internal static extern IntPtr SteamAPI_ISteamController_GetGlyphForActionOrigin(
				IntPtr ISteamController,
				ControllerActionOrigin eOrigin);

			[DllImport("steam_api64.dll")]
			internal static extern UGCQueryHandle_t SteamAPI_ISteamUGC_CreateQueryUserUGCRequest(
				IntPtr ISteamUGC,
				uint unAccountID,
				UserUGCList eListType,
				UGCMatchingUGCType eMatchingUGCType,
				UserUGCListSortOrder eSortOrder,
				uint nCreatorAppID,
				uint nConsumerAppID,
				uint unPage);

			[DllImport("steam_api64.dll")]
			internal static extern UGCQueryHandle_t SteamAPI_ISteamUGC_CreateQueryAllUGCRequest(
				IntPtr ISteamUGC,
				UGCQuery eQueryType,
				UGCMatchingUGCType eMatchingeMatchingUGCTypeFileType,
				uint nCreatorAppID,
				uint nConsumerAppID,
				uint unPage);

			[DllImport("steam_api64.dll")]
			internal static extern UGCQueryHandle_t SteamAPI_ISteamUGC_CreateQueryUGCDetailsRequest(
				IntPtr ISteamUGC,
				IntPtr pvecPublishedFileID,
				uint unNumPublishedFileIDs);

			[DllImport("steam_api64.dll")]
			internal static extern SteamAPICall_t SteamAPI_ISteamUGC_SendQueryUGCRequest(
				IntPtr ISteamUGC,
				ulong handle);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamUGC_GetQueryUGCResult(
				IntPtr ISteamUGC,
				ulong handle,
				uint index,
				ref SteamUGCDetails_t pDetails);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamUGC_GetQueryUGCPreviewURL(
				IntPtr ISteamUGC,
				ulong handle,
				uint index,
				StringBuilder pchURL,
				uint cchURLSize);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamUGC_GetQueryUGCMetadata(
				IntPtr ISteamUGC,
				ulong handle,
				uint index,
				StringBuilder pchMetadata,
				uint cchMetadatasize);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamUGC_GetQueryUGCChildren(
				IntPtr ISteamUGC,
				ulong handle,
				uint index,
				IntPtr pvecPublishedFileID,
				uint cMaxEntries);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamUGC_GetQueryUGCStatistic(
				IntPtr ISteamUGC,
				ulong handle,
				uint index,
				ItemStatistic eStatType,
				out ulong pStatValue);

			[DllImport("steam_api64.dll")]
			internal static extern uint SteamAPI_ISteamUGC_GetQueryUGCNumAdditionalPreviews(
				IntPtr ISteamUGC,
				ulong handle,
				uint index);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamUGC_GetQueryUGCAdditionalPreview(
				IntPtr ISteamUGC,
				ulong handle,
				uint index,
				uint previewIndex,
				StringBuilder pchURLOrVideoID,
				uint cchURLSize,
				StringBuilder pchOriginalFileName,
				uint cchOriginalFileNameSize,
				out ItemPreviewType pPreviewType);

			[DllImport("steam_api64.dll")]
			internal static extern uint SteamAPI_ISteamUGC_GetQueryUGCNumKeyValueTags(
				IntPtr ISteamUGC,
				ulong handle,
				uint index);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamUGC_GetQueryUGCKeyValueTag(
				IntPtr ISteamUGC,
				ulong handle,
				uint index,
				uint keyValueTagIndex,
				StringBuilder pchKey,
				uint cchKeySize,
				StringBuilder pchValue,
				uint cchValueSize);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamUGC_ReleaseQueryUGCRequest(
				IntPtr ISteamUGC,
				ulong handle);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamUGC_AddRequiredTag(
				IntPtr ISteamUGC,
				ulong handle,
				string pTagName);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamUGC_AddExcludedTag(
				IntPtr ISteamUGC,
				ulong handle,
				string pTagName);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamUGC_SetReturnOnlyIDs(
				IntPtr ISteamUGC,
				ulong handle,
				[MarshalAs(UnmanagedType.U1)] bool bReturnOnlyIDs);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamUGC_SetReturnKeyValueTags(
				IntPtr ISteamUGC,
				ulong handle,
				[MarshalAs(UnmanagedType.U1)] bool bReturnKeyValueTags);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamUGC_SetReturnLongDescription(
				IntPtr ISteamUGC,
				ulong handle,
				[MarshalAs(UnmanagedType.U1)] bool bReturnLongDescription);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamUGC_SetReturnMetadata(
				IntPtr ISteamUGC,
				ulong handle,
				[MarshalAs(UnmanagedType.U1)] bool bReturnMetadata);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamUGC_SetReturnChildren(
				IntPtr ISteamUGC,
				ulong handle,
				[MarshalAs(UnmanagedType.U1)] bool bReturnChildren);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamUGC_SetReturnAdditionalPreviews(
				IntPtr ISteamUGC,
				ulong handle,
				[MarshalAs(UnmanagedType.U1)] bool bReturnAdditionalPreviews);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamUGC_SetReturnTotalOnly(
				IntPtr ISteamUGC,
				ulong handle,
				[MarshalAs(UnmanagedType.U1)] bool bReturnTotalOnly);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamUGC_SetReturnPlaytimeStats(
				IntPtr ISteamUGC,
				ulong handle,
				uint unDays);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamUGC_SetLanguage(
				IntPtr ISteamUGC,
				ulong handle,
				string pchLanguage);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamUGC_SetAllowCachedResponse(
				IntPtr ISteamUGC,
				ulong handle,
				uint unMaxAgeSeconds);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamUGC_SetCloudFileNameFilter(
				IntPtr ISteamUGC,
				ulong handle,
				string pMatchCloudFileName);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamUGC_SetMatchAnyTag(
				IntPtr ISteamUGC,
				ulong handle,
				[MarshalAs(UnmanagedType.U1)] bool bMatchAnyTag);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamUGC_SetSearchText(
				IntPtr ISteamUGC,
				ulong handle,
				string pSearchText);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamUGC_SetRankedByTrendDays(
				IntPtr ISteamUGC,
				ulong handle,
				uint unDays);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamUGC_AddRequiredKeyValueTag(
				IntPtr ISteamUGC,
				ulong handle,
				string pKey,
				string pValue);

			[DllImport("steam_api64.dll")]
			internal static extern SteamAPICall_t SteamAPI_ISteamUGC_RequestUGCDetails(
				IntPtr ISteamUGC,
				ulong nPublishedFileID,
				uint unMaxAgeSeconds);

			[DllImport("steam_api64.dll")]
			internal static extern SteamAPICall_t SteamAPI_ISteamUGC_CreateItem(
				IntPtr ISteamUGC,
				uint nConsumerAppId,
				WorkshopFileType eFileType);

			[DllImport("steam_api64.dll")]
			internal static extern UGCUpdateHandle_t SteamAPI_ISteamUGC_StartItemUpdate(
				IntPtr ISteamUGC,
				uint nConsumerAppId,
				ulong nPublishedFileID);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamUGC_SetItemTitle(
				IntPtr ISteamUGC,
				ulong handle,
				string pchTitle);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamUGC_SetItemDescription(
				IntPtr ISteamUGC,
				ulong handle,
				string pchDescription);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamUGC_SetItemUpdateLanguage(
				IntPtr ISteamUGC,
				ulong handle,
				string pchLanguage);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamUGC_SetItemMetadata(
				IntPtr ISteamUGC,
				ulong handle,
				string pchMetaData);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamUGC_SetItemVisibility(
				IntPtr ISteamUGC,
				ulong handle,
				RemoteStoragePublishedFileVisibility eVisibility);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamUGC_SetItemTags(
				IntPtr ISteamUGC,
				ulong updateHandle,
				ref SteamParamStringArray_t pTags);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamUGC_SetItemContent(
				IntPtr ISteamUGC,
				ulong handle,
				string pszContentFolder);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamUGC_SetItemPreview(
				IntPtr ISteamUGC,
				ulong handle,
				string pszPreviewFile);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamUGC_RemoveItemKeyValueTags(
				IntPtr ISteamUGC,
				ulong handle,
				string pchKey);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamUGC_AddItemKeyValueTag(
				IntPtr ISteamUGC,
				ulong handle,
				string pchKey,
				string pchValue);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamUGC_AddItemPreviewFile(
				IntPtr ISteamUGC,
				ulong handle,
				string pszPreviewFile,
				ItemPreviewType type);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamUGC_AddItemPreviewVideo(
				IntPtr ISteamUGC,
				ulong handle,
				string pszVideoID);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamUGC_UpdateItemPreviewFile(
				IntPtr ISteamUGC,
				ulong handle,
				uint index,
				string pszPreviewFile);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamUGC_UpdateItemPreviewVideo(
				IntPtr ISteamUGC,
				ulong handle,
				uint index,
				string pszVideoID);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamUGC_RemoveItemPreview(
				IntPtr ISteamUGC,
				ulong handle,
				uint index);

			[DllImport("steam_api64.dll")]
			internal static extern SteamAPICall_t SteamAPI_ISteamUGC_SubmitItemUpdate(
				IntPtr ISteamUGC,
				ulong handle,
				string pchChangeNote);

			[DllImport("steam_api64.dll")]
			internal static extern ItemUpdateStatus SteamAPI_ISteamUGC_GetItemUpdateProgress(
				IntPtr ISteamUGC,
				ulong handle,
				out ulong punBytesProcessed,
				out ulong punBytesTotal);

			[DllImport("steam_api64.dll")]
			internal static extern SteamAPICall_t SteamAPI_ISteamUGC_SetUserItemVote(
				IntPtr ISteamUGC,
				ulong nPublishedFileID,
				[MarshalAs(UnmanagedType.U1)] bool bVoteUp);

			[DllImport("steam_api64.dll")]
			internal static extern SteamAPICall_t SteamAPI_ISteamUGC_GetUserItemVote(
				IntPtr ISteamUGC,
				ulong nPublishedFileID);

			[DllImport("steam_api64.dll")]
			internal static extern SteamAPICall_t SteamAPI_ISteamUGC_AddItemToFavorites(
				IntPtr ISteamUGC,
				uint nAppId,
				ulong nPublishedFileID);

			[DllImport("steam_api64.dll")]
			internal static extern SteamAPICall_t SteamAPI_ISteamUGC_RemoveItemFromFavorites(
				IntPtr ISteamUGC,
				uint nAppId,
				ulong nPublishedFileID);

			[DllImport("steam_api64.dll")]
			internal static extern SteamAPICall_t SteamAPI_ISteamUGC_SubscribeItem(
				IntPtr ISteamUGC,
				ulong nPublishedFileID);

			[DllImport("steam_api64.dll")]
			internal static extern SteamAPICall_t SteamAPI_ISteamUGC_UnsubscribeItem(
				IntPtr ISteamUGC,
				ulong nPublishedFileID);

			[DllImport("steam_api64.dll")]
			internal static extern uint SteamAPI_ISteamUGC_GetNumSubscribedItems(IntPtr ISteamUGC);

			[DllImport("steam_api64.dll")]
			internal static extern uint SteamAPI_ISteamUGC_GetSubscribedItems(
				IntPtr ISteamUGC,
				IntPtr pvecPublishedFileID,
				uint cMaxEntries);

			[DllImport("steam_api64.dll")]
			internal static extern uint SteamAPI_ISteamUGC_GetItemState(
				IntPtr ISteamUGC,
				ulong nPublishedFileID);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamUGC_GetItemInstallInfo(
				IntPtr ISteamUGC,
				ulong nPublishedFileID,
				out ulong punSizeOnDisk,
				StringBuilder pchFolder,
				uint cchFolderSize,
				out uint punTimeStamp);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamUGC_GetItemDownloadInfo(
				IntPtr ISteamUGC,
				ulong nPublishedFileID,
				out ulong punBytesDownloaded,
				out ulong punBytesTotal);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamUGC_DownloadItem(
				IntPtr ISteamUGC,
				ulong nPublishedFileID,
				[MarshalAs(UnmanagedType.U1)] bool bHighPriority);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamUGC_BInitWorkshopForGameServer(
				IntPtr ISteamUGC,
				uint unWorkshopDepotID,
				string pszFolder);

			[DllImport("steam_api64.dll")]
			internal static extern void SteamAPI_ISteamUGC_SuspendDownloads(
				IntPtr ISteamUGC,
				[MarshalAs(UnmanagedType.U1)] bool bSuspend);

			[DllImport("steam_api64.dll")]
			internal static extern SteamAPICall_t SteamAPI_ISteamUGC_StartPlaytimeTracking(
				IntPtr ISteamUGC,
				IntPtr pvecPublishedFileID,
				uint unNumPublishedFileIDs);

			[DllImport("steam_api64.dll")]
			internal static extern SteamAPICall_t SteamAPI_ISteamUGC_StopPlaytimeTracking(
				IntPtr ISteamUGC,
				IntPtr pvecPublishedFileID,
				uint unNumPublishedFileIDs);

			[DllImport("steam_api64.dll")]
			internal static extern SteamAPICall_t SteamAPI_ISteamUGC_StopPlaytimeTrackingForAllItems(
				IntPtr ISteamUGC);

			[DllImport("steam_api64.dll")]
			internal static extern SteamAPICall_t SteamAPI_ISteamUGC_AddDependency(
				IntPtr ISteamUGC,
				ulong nParentPublishedFileID,
				ulong nChildPublishedFileID);

			[DllImport("steam_api64.dll")]
			internal static extern SteamAPICall_t SteamAPI_ISteamUGC_RemoveDependency(
				IntPtr ISteamUGC,
				ulong nParentPublishedFileID,
				ulong nChildPublishedFileID);

			[DllImport("steam_api64.dll")]
			internal static extern uint SteamAPI_ISteamAppList_GetNumInstalledApps(IntPtr ISteamAppList);

			[DllImport("steam_api64.dll")]
			internal static extern uint SteamAPI_ISteamAppList_GetInstalledApps(
				IntPtr ISteamAppList,
				IntPtr pvecAppID,
				uint unMaxAppIDs);

			[DllImport("steam_api64.dll")]
			internal static extern int SteamAPI_ISteamAppList_GetAppName(
				IntPtr ISteamAppList,
				uint nAppID,
				StringBuilder pchName,
				int cchNameMax);

			[DllImport("steam_api64.dll")]
			internal static extern int SteamAPI_ISteamAppList_GetAppInstallDir(
				IntPtr ISteamAppList,
				uint nAppID,
				StringBuilder pchDirectory,
				int cchNameMax);

			[DllImport("steam_api64.dll")]
			internal static extern int SteamAPI_ISteamAppList_GetAppBuildId(
				IntPtr ISteamAppList,
				uint nAppID);

			[DllImport("steam_api64.dll")]
			internal static extern void SteamAPI_ISteamHTMLSurface_DestructISteamHTMLSurface(
				IntPtr ISteamHTMLSurface);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamHTMLSurface_Init(IntPtr ISteamHTMLSurface);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamHTMLSurface_Shutdown(IntPtr ISteamHTMLSurface);

			[DllImport("steam_api64.dll")]
			internal static extern SteamAPICall_t SteamAPI_ISteamHTMLSurface_CreateBrowser(
				IntPtr ISteamHTMLSurface,
				string pchUserAgent,
				string pchUserCSS);

			[DllImport("steam_api64.dll")]
			internal static extern void SteamAPI_ISteamHTMLSurface_RemoveBrowser(
				IntPtr ISteamHTMLSurface,
				uint unBrowserHandle);

			[DllImport("steam_api64.dll")]
			internal static extern void SteamAPI_ISteamHTMLSurface_LoadURL(
				IntPtr ISteamHTMLSurface,
				uint unBrowserHandle,
				string pchURL,
				string pchPostData);

			[DllImport("steam_api64.dll")]
			internal static extern void SteamAPI_ISteamHTMLSurface_SetSize(
				IntPtr ISteamHTMLSurface,
				uint unBrowserHandle,
				uint unWidth,
				uint unHeight);

			[DllImport("steam_api64.dll")]
			internal static extern void SteamAPI_ISteamHTMLSurface_StopLoad(
				IntPtr ISteamHTMLSurface,
				uint unBrowserHandle);

			[DllImport("steam_api64.dll")]
			internal static extern void SteamAPI_ISteamHTMLSurface_Reload(
				IntPtr ISteamHTMLSurface,
				uint unBrowserHandle);

			[DllImport("steam_api64.dll")]
			internal static extern void SteamAPI_ISteamHTMLSurface_GoBack(
				IntPtr ISteamHTMLSurface,
				uint unBrowserHandle);

			[DllImport("steam_api64.dll")]
			internal static extern void SteamAPI_ISteamHTMLSurface_GoForward(
				IntPtr ISteamHTMLSurface,
				uint unBrowserHandle);

			[DllImport("steam_api64.dll")]
			internal static extern void SteamAPI_ISteamHTMLSurface_AddHeader(
				IntPtr ISteamHTMLSurface,
				uint unBrowserHandle,
				string pchKey,
				string pchValue);

			[DllImport("steam_api64.dll")]
			internal static extern void SteamAPI_ISteamHTMLSurface_ExecuteJavascript(
				IntPtr ISteamHTMLSurface,
				uint unBrowserHandle,
				string pchScript);

			[DllImport("steam_api64.dll")]
			internal static extern void SteamAPI_ISteamHTMLSurface_MouseUp(
				IntPtr ISteamHTMLSurface,
				uint unBrowserHandle,
				HTMLMouseButton eMouseButton);

			[DllImport("steam_api64.dll")]
			internal static extern void SteamAPI_ISteamHTMLSurface_MouseDown(
				IntPtr ISteamHTMLSurface,
				uint unBrowserHandle,
				HTMLMouseButton eMouseButton);

			[DllImport("steam_api64.dll")]
			internal static extern void SteamAPI_ISteamHTMLSurface_MouseDoubleClick(
				IntPtr ISteamHTMLSurface,
				uint unBrowserHandle,
				HTMLMouseButton eMouseButton);

			[DllImport("steam_api64.dll")]
			internal static extern void SteamAPI_ISteamHTMLSurface_MouseMove(
				IntPtr ISteamHTMLSurface,
				uint unBrowserHandle,
				int x,
				int y);

			[DllImport("steam_api64.dll")]
			internal static extern void SteamAPI_ISteamHTMLSurface_MouseWheel(
				IntPtr ISteamHTMLSurface,
				uint unBrowserHandle,
				int nDelta);

			[DllImport("steam_api64.dll")]
			internal static extern void SteamAPI_ISteamHTMLSurface_KeyDown(
				IntPtr ISteamHTMLSurface,
				uint unBrowserHandle,
				uint nNativeKeyCode,
				HTMLKeyModifiers eHTMLKeyModifiers);

			[DllImport("steam_api64.dll")]
			internal static extern void SteamAPI_ISteamHTMLSurface_KeyUp(
				IntPtr ISteamHTMLSurface,
				uint unBrowserHandle,
				uint nNativeKeyCode,
				HTMLKeyModifiers eHTMLKeyModifiers);

			[DllImport("steam_api64.dll")]
			internal static extern void SteamAPI_ISteamHTMLSurface_KeyChar(
				IntPtr ISteamHTMLSurface,
				uint unBrowserHandle,
				uint cUnicodeChar,
				HTMLKeyModifiers eHTMLKeyModifiers);

			[DllImport("steam_api64.dll")]
			internal static extern void SteamAPI_ISteamHTMLSurface_SetHorizontalScroll(
				IntPtr ISteamHTMLSurface,
				uint unBrowserHandle,
				uint nAbsolutePixelScroll);

			[DllImport("steam_api64.dll")]
			internal static extern void SteamAPI_ISteamHTMLSurface_SetVerticalScroll(
				IntPtr ISteamHTMLSurface,
				uint unBrowserHandle,
				uint nAbsolutePixelScroll);

			[DllImport("steam_api64.dll")]
			internal static extern void SteamAPI_ISteamHTMLSurface_SetKeyFocus(
				IntPtr ISteamHTMLSurface,
				uint unBrowserHandle,
				[MarshalAs(UnmanagedType.U1)] bool bHasKeyFocus);

			[DllImport("steam_api64.dll")]
			internal static extern void SteamAPI_ISteamHTMLSurface_ViewSource(
				IntPtr ISteamHTMLSurface,
				uint unBrowserHandle);

			[DllImport("steam_api64.dll")]
			internal static extern void SteamAPI_ISteamHTMLSurface_CopyToClipboard(
				IntPtr ISteamHTMLSurface,
				uint unBrowserHandle);

			[DllImport("steam_api64.dll")]
			internal static extern void SteamAPI_ISteamHTMLSurface_PasteFromClipboard(
				IntPtr ISteamHTMLSurface,
				uint unBrowserHandle);

			[DllImport("steam_api64.dll")]
			internal static extern void SteamAPI_ISteamHTMLSurface_Find(
				IntPtr ISteamHTMLSurface,
				uint unBrowserHandle,
				string pchSearchStr,
				[MarshalAs(UnmanagedType.U1)] bool bCurrentlyInFind,
				[MarshalAs(UnmanagedType.U1)] bool bReverse);

			[DllImport("steam_api64.dll")]
			internal static extern void SteamAPI_ISteamHTMLSurface_StopFind(
				IntPtr ISteamHTMLSurface,
				uint unBrowserHandle);

			[DllImport("steam_api64.dll")]
			internal static extern void SteamAPI_ISteamHTMLSurface_GetLinkAtPosition(
				IntPtr ISteamHTMLSurface,
				uint unBrowserHandle,
				int x,
				int y);

			[DllImport("steam_api64.dll")]
			internal static extern void SteamAPI_ISteamHTMLSurface_SetCookie(
				IntPtr ISteamHTMLSurface,
				string pchHostname,
				string pchKey,
				string pchValue,
				string pchPath,
				uint nExpires,
				[MarshalAs(UnmanagedType.U1)] bool bSecure,
				[MarshalAs(UnmanagedType.U1)] bool bHTTPOnly);

			[DllImport("steam_api64.dll")]
			internal static extern void SteamAPI_ISteamHTMLSurface_SetPageScaleFactor(
				IntPtr ISteamHTMLSurface,
				uint unBrowserHandle,
				float flZoom,
				int nPointX,
				int nPointY);

			[DllImport("steam_api64.dll")]
			internal static extern void SteamAPI_ISteamHTMLSurface_SetBackgroundMode(
				IntPtr ISteamHTMLSurface,
				uint unBrowserHandle,
				[MarshalAs(UnmanagedType.U1)] bool bBackgroundMode);

			[DllImport("steam_api64.dll")]
			internal static extern void SteamAPI_ISteamHTMLSurface_AllowStartRequest(
				IntPtr ISteamHTMLSurface,
				uint unBrowserHandle,
				[MarshalAs(UnmanagedType.U1)] bool bAllowed);

			[DllImport("steam_api64.dll")]
			internal static extern void SteamAPI_ISteamHTMLSurface_JSDialogResponse(
				IntPtr ISteamHTMLSurface,
				uint unBrowserHandle,
				[MarshalAs(UnmanagedType.U1)] bool bResult);

			[DllImport("steam_api64.dll")]
			internal static extern Result SteamAPI_ISteamInventory_GetResultStatus(
				IntPtr ISteamInventory,
				int resultHandle);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamInventory_GetResultItems(
				IntPtr ISteamInventory,
				int resultHandle,
				IntPtr pOutItemsArray,
				out uint punOutItemsArraySize);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamInventory_GetResultItemProperty(
				IntPtr ISteamInventory,
				int resultHandle,
				uint unItemIndex,
				string pchPropertyName,
				StringBuilder pchValueBuffer,
				out uint punValueBufferSizeOut);

			[DllImport("steam_api64.dll")]
			internal static extern uint SteamAPI_ISteamInventory_GetResultTimestamp(
				IntPtr ISteamInventory,
				int resultHandle);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamInventory_CheckResultSteamID(
				IntPtr ISteamInventory,
				int resultHandle,
				ulong steamIDExpected);

			[DllImport("steam_api64.dll")]
			internal static extern void SteamAPI_ISteamInventory_DestroyResult(
				IntPtr ISteamInventory,
				int resultHandle);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamInventory_GetAllItems(
				IntPtr ISteamInventory,
				ref int pResultHandle);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamInventory_GetItemsByID(
				IntPtr ISteamInventory,
				ref int pResultHandle,
				ulong[] pInstanceIDs,
				uint unCountInstanceIDs);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamInventory_SerializeResult(
				IntPtr ISteamInventory,
				int resultHandle,
				IntPtr pOutBuffer,
				out uint punOutBufferSize);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamInventory_DeserializeResult(
				IntPtr ISteamInventory,
				ref int pOutResultHandle,
				IntPtr pBuffer,
				uint unBufferSize,
				[MarshalAs(UnmanagedType.U1)] bool bRESERVED_MUST_BE_FALSE);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamInventory_GenerateItems(
				IntPtr ISteamInventory,
				ref int pResultHandle,
				int[] pArrayItemDefs,
				uint[] punArrayQuantity,
				uint unArrayLength);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamInventory_GrantPromoItems(
				IntPtr ISteamInventory,
				ref int pResultHandle);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamInventory_AddPromoItem(
				IntPtr ISteamInventory,
				ref int pResultHandle,
				int itemDef);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamInventory_AddPromoItems(
				IntPtr ISteamInventory,
				ref int pResultHandle,
				int[] pArrayItemDefs,
				uint unArrayLength);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamInventory_ConsumeItem(
				IntPtr ISteamInventory,
				ref int pResultHandle,
				ulong itemConsume,
				uint unQuantity);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamInventory_ExchangeItems(
				IntPtr ISteamInventory,
				ref int pResultHandle,
				int[] pArrayGenerate,
				uint[] punArrayGenerateQuantity,
				uint unArrayGenerateLength,
				ulong[] pArrayDestroy,
				uint[] punArrayDestroyQuantity,
				uint unArrayDestroyLength);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamInventory_TransferItemQuantity(
				IntPtr ISteamInventory,
				ref int pResultHandle,
				ulong itemIdSource,
				uint unQuantity,
				ulong itemIdDest);

			[DllImport("steam_api64.dll")]
			internal static extern void SteamAPI_ISteamInventory_SendItemDropHeartbeat(
				IntPtr ISteamInventory);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamInventory_TriggerItemDrop(
				IntPtr ISteamInventory,
				ref int pResultHandle,
				int dropListDefinition);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamInventory_TradeItems(
				IntPtr ISteamInventory,
				ref int pResultHandle,
				ulong steamIDTradePartner,
				ulong[] pArrayGive,
				uint[] pArrayGiveQuantity,
				uint nArrayGiveLength,
				ulong[] pArrayGet,
				uint[] pArrayGetQuantity,
				uint nArrayGetLength);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamInventory_LoadItemDefinitions(
				IntPtr ISteamInventory);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamInventory_GetItemDefinitionIDs(
				IntPtr ISteamInventory,
				IntPtr pItemDefIDs,
				out uint punItemDefIDsArraySize);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamInventory_GetItemDefinitionProperty(
				IntPtr ISteamInventory,
				int iDefinition,
				string pchPropertyName,
				StringBuilder pchValueBuffer,
				out uint punValueBufferSizeOut);

			[DllImport("steam_api64.dll")]
			internal static extern SteamAPICall_t SteamAPI_ISteamInventory_RequestEligiblePromoItemDefinitionsIDs(
				IntPtr ISteamInventory,
				ulong steamID);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamInventory_GetEligiblePromoItemDefinitionIDs(
				IntPtr ISteamInventory,
				ulong steamID,
				IntPtr pItemDefIDs,
				out uint punItemDefIDsArraySize);

			[DllImport("steam_api64.dll")]
			internal static extern void SteamAPI_ISteamVideo_GetVideoURL(
				IntPtr ISteamVideo,
				uint unVideoAppID);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamVideo_IsBroadcasting(
				IntPtr ISteamVideo,
				IntPtr pnNumViewers);

			[DllImport("steam_api64.dll")]
			internal static extern void SteamAPI_ISteamVideo_GetOPFSettings(
				IntPtr ISteamVideo,
				uint unVideoAppID);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamVideo_GetOPFStringForApp(
				IntPtr ISteamVideo,
				uint unVideoAppID,
				StringBuilder pchBuffer,
				out int pnBufferSize);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamGameServer_InitGameServer(
				IntPtr ISteamGameServer,
				uint unIP,
				ushort usGamePort,
				ushort usQueryPort,
				uint unFlags,
				uint nGameAppId,
				string pchVersionString);

			[DllImport("steam_api64.dll")]
			internal static extern void SteamAPI_ISteamGameServer_SetProduct(
				IntPtr ISteamGameServer,
				string pszProduct);

			[DllImport("steam_api64.dll")]
			internal static extern void SteamAPI_ISteamGameServer_SetGameDescription(
				IntPtr ISteamGameServer,
				string pszGameDescription);

			[DllImport("steam_api64.dll")]
			internal static extern void SteamAPI_ISteamGameServer_SetModDir(
				IntPtr ISteamGameServer,
				string pszModDir);

			[DllImport("steam_api64.dll")]
			internal static extern void SteamAPI_ISteamGameServer_SetDedicatedServer(
				IntPtr ISteamGameServer,
				[MarshalAs(UnmanagedType.U1)] bool bDedicated);

			[DllImport("steam_api64.dll")]
			internal static extern void SteamAPI_ISteamGameServer_LogOn(
				IntPtr ISteamGameServer,
				string pszToken);

			[DllImport("steam_api64.dll")]
			internal static extern void SteamAPI_ISteamGameServer_LogOnAnonymous(IntPtr ISteamGameServer);

			[DllImport("steam_api64.dll")]
			internal static extern void SteamAPI_ISteamGameServer_LogOff(IntPtr ISteamGameServer);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamGameServer_BLoggedOn(IntPtr ISteamGameServer);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamGameServer_BSecure(IntPtr ISteamGameServer);

			[DllImport("steam_api64.dll")]
			internal static extern CSteamID SteamAPI_ISteamGameServer_GetSteamID(IntPtr ISteamGameServer);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamGameServer_WasRestartRequested(
				IntPtr ISteamGameServer);

			[DllImport("steam_api64.dll")]
			internal static extern void SteamAPI_ISteamGameServer_SetMaxPlayerCount(
				IntPtr ISteamGameServer,
				int cPlayersMax);

			[DllImport("steam_api64.dll")]
			internal static extern void SteamAPI_ISteamGameServer_SetBotPlayerCount(
				IntPtr ISteamGameServer,
				int cBotplayers);

			[DllImport("steam_api64.dll")]
			internal static extern void SteamAPI_ISteamGameServer_SetServerName(
				IntPtr ISteamGameServer,
				string pszServerName);

			[DllImport("steam_api64.dll")]
			internal static extern void SteamAPI_ISteamGameServer_SetMapName(
				IntPtr ISteamGameServer,
				string pszMapName);

			[DllImport("steam_api64.dll")]
			internal static extern void SteamAPI_ISteamGameServer_SetPasswordProtected(
				IntPtr ISteamGameServer,
				[MarshalAs(UnmanagedType.U1)] bool bPasswordProtected);

			[DllImport("steam_api64.dll")]
			internal static extern void SteamAPI_ISteamGameServer_SetSpectatorPort(
				IntPtr ISteamGameServer,
				ushort unSpectatorPort);

			[DllImport("steam_api64.dll")]
			internal static extern void SteamAPI_ISteamGameServer_SetSpectatorServerName(
				IntPtr ISteamGameServer,
				string pszSpectatorServerName);

			[DllImport("steam_api64.dll")]
			internal static extern void SteamAPI_ISteamGameServer_ClearAllKeyValues(
				IntPtr ISteamGameServer);

			[DllImport("steam_api64.dll")]
			internal static extern void SteamAPI_ISteamGameServer_SetKeyValue(
				IntPtr ISteamGameServer,
				string pKey,
				string pValue);

			[DllImport("steam_api64.dll")]
			internal static extern void SteamAPI_ISteamGameServer_SetGameTags(
				IntPtr ISteamGameServer,
				string pchGameTags);

			[DllImport("steam_api64.dll")]
			internal static extern void SteamAPI_ISteamGameServer_SetGameData(
				IntPtr ISteamGameServer,
				string pchGameData);

			[DllImport("steam_api64.dll")]
			internal static extern void SteamAPI_ISteamGameServer_SetRegion(
				IntPtr ISteamGameServer,
				string pszRegion);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamGameServer_SendUserConnectAndAuthenticate(
				IntPtr ISteamGameServer,
				uint unIPClient,
				IntPtr pvAuthBlob,
				uint cubAuthBlobSize,
				out ulong pSteamIDUser);

			[DllImport("steam_api64.dll")]
			internal static extern CSteamID SteamAPI_ISteamGameServer_CreateUnauthenticatedUserConnection(
				IntPtr ISteamGameServer);

			[DllImport("steam_api64.dll")]
			internal static extern void SteamAPI_ISteamGameServer_SendUserDisconnect(
				IntPtr ISteamGameServer,
				ulong steamIDUser);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamGameServer_BUpdateUserData(
				IntPtr ISteamGameServer,
				ulong steamIDUser,
				string pchPlayerName,
				uint uScore);

			[DllImport("steam_api64.dll")]
			internal static extern HAuthTicket SteamAPI_ISteamGameServer_GetAuthSessionTicket(
				IntPtr ISteamGameServer,
				IntPtr pTicket,
				int cbMaxTicket,
				out uint pcbTicket);

			[DllImport("steam_api64.dll")]
			internal static extern BeginAuthSessionResult SteamAPI_ISteamGameServer_BeginAuthSession(
				IntPtr ISteamGameServer,
				IntPtr pAuthTicket,
				int cbAuthTicket,
				ulong steamID);

			[DllImport("steam_api64.dll")]
			internal static extern void SteamAPI_ISteamGameServer_EndAuthSession(
				IntPtr ISteamGameServer,
				ulong steamID);

			[DllImport("steam_api64.dll")]
			internal static extern void SteamAPI_ISteamGameServer_CancelAuthTicket(
				IntPtr ISteamGameServer,
				uint hAuthTicket);

			[DllImport("steam_api64.dll")]
			internal static extern UserHasLicenseForAppResult SteamAPI_ISteamGameServer_UserHasLicenseForApp(
				IntPtr ISteamGameServer,
				ulong steamID,
				uint appID);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamGameServer_RequestUserGroupStatus(
				IntPtr ISteamGameServer,
				ulong steamIDUser,
				ulong steamIDGroup);

			[DllImport("steam_api64.dll")]
			internal static extern void SteamAPI_ISteamGameServer_GetGameplayStats(
				IntPtr ISteamGameServer);

			[DllImport("steam_api64.dll")]
			internal static extern SteamAPICall_t SteamAPI_ISteamGameServer_GetServerReputation(
				IntPtr ISteamGameServer);

			[DllImport("steam_api64.dll")]
			internal static extern uint SteamAPI_ISteamGameServer_GetPublicIP(IntPtr ISteamGameServer);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamGameServer_HandleIncomingPacket(
				IntPtr ISteamGameServer,
				IntPtr pData,
				int cbData,
				uint srcIP,
				ushort srcPort);

			[DllImport("steam_api64.dll")]
			internal static extern int SteamAPI_ISteamGameServer_GetNextOutgoingPacket(
				IntPtr ISteamGameServer,
				IntPtr pOut,
				int cbMaxOut,
				out uint pNetAdr,
				out ushort pPort);

			[DllImport("steam_api64.dll")]
			internal static extern void SteamAPI_ISteamGameServer_EnableHeartbeats(
				IntPtr ISteamGameServer,
				[MarshalAs(UnmanagedType.U1)] bool bActive);

			[DllImport("steam_api64.dll")]
			internal static extern void SteamAPI_ISteamGameServer_SetHeartbeatInterval(
				IntPtr ISteamGameServer,
				int iHeartbeatInterval);

			[DllImport("steam_api64.dll")]
			internal static extern void SteamAPI_ISteamGameServer_ForceHeartbeat(IntPtr ISteamGameServer);

			[DllImport("steam_api64.dll")]
			internal static extern SteamAPICall_t SteamAPI_ISteamGameServer_AssociateWithClan(
				IntPtr ISteamGameServer,
				ulong steamIDClan);

			[DllImport("steam_api64.dll")]
			internal static extern SteamAPICall_t SteamAPI_ISteamGameServer_ComputeNewPlayerCompatibility(
				IntPtr ISteamGameServer,
				ulong steamIDNewPlayer);

			[DllImport("steam_api64.dll")]
			internal static extern SteamAPICall_t SteamAPI_ISteamGameServerStats_RequestUserStats(
				IntPtr ISteamGameServerStats,
				ulong steamIDUser);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamGameServerStats_GetUserStat(
				IntPtr ISteamGameServerStats,
				ulong steamIDUser,
				string pchName,
				out int pData);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamGameServerStats_GetUserStat0(
				IntPtr ISteamGameServerStats,
				ulong steamIDUser,
				string pchName,
				out float pData);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamGameServerStats_GetUserAchievement(
				IntPtr ISteamGameServerStats,
				ulong steamIDUser,
				string pchName,
				[MarshalAs(UnmanagedType.U1)] ref bool pbAchieved);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamGameServerStats_SetUserStat(
				IntPtr ISteamGameServerStats,
				ulong steamIDUser,
				string pchName,
				int nData);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamGameServerStats_SetUserStat0(
				IntPtr ISteamGameServerStats,
				ulong steamIDUser,
				string pchName,
				float fData);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamGameServerStats_UpdateUserAvgRateStat(
				IntPtr ISteamGameServerStats,
				ulong steamIDUser,
				string pchName,
				float flCountThisSession,
				double dSessionLength);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamGameServerStats_SetUserAchievement(
				IntPtr ISteamGameServerStats,
				ulong steamIDUser,
				string pchName);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_ISteamGameServerStats_ClearUserAchievement(
				IntPtr ISteamGameServerStats,
				ulong steamIDUser,
				string pchName);

			[DllImport("steam_api64.dll")]
			internal static extern SteamAPICall_t SteamAPI_ISteamGameServerStats_StoreUserStats(
				IntPtr ISteamGameServerStats,
				ulong steamIDUser);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_Init();

			[DllImport("steam_api64.dll")]
			internal static extern void SteamAPI_RunCallbacks();

			[DllImport("steam_api64.dll")]
			internal static extern void SteamGameServer_RunCallbacks();

			[DllImport("steam_api64.dll")]
			internal static extern void SteamAPI_RegisterCallback(IntPtr pCallback, int callback);

			[DllImport("steam_api64.dll")]
			internal static extern void SteamAPI_UnregisterCallback(IntPtr pCallback);

			[DllImport("steam_api64.dll")]
			internal static extern void SteamAPI_RegisterCallResult(IntPtr pCallback, ulong callback);

			[DllImport("steam_api64.dll")]
			internal static extern void SteamAPI_UnregisterCallResult(IntPtr pCallback, ulong callback);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamInternal_GameServer_Init(
				uint unIP,
				ushort usPort,
				ushort usGamePort,
				ushort usQueryPort,
				int eServerMode,
				string pchVersionString);

			[DllImport("steam_api64.dll")]
			internal static extern void SteamAPI_Shutdown();

			[DllImport("steam_api64.dll")]
			internal static extern void SteamGameServer_Shutdown();

			[DllImport("steam_api64.dll")]
			internal static extern HSteamUser SteamAPI_GetHSteamUser();

			[DllImport("steam_api64.dll")]
			internal static extern HSteamPipe SteamAPI_GetHSteamPipe();

			[DllImport("steam_api64.dll")]
			internal static extern HSteamUser SteamGameServer_GetHSteamUser();

			[DllImport("steam_api64.dll")]
			internal static extern HSteamPipe SteamGameServer_GetHSteamPipe();

			[DllImport("steam_api64.dll")]
			internal static extern IntPtr SteamInternal_CreateInterface(string version);

			[DllImport("steam_api64.dll")]
			internal static extern bool SteamAPI_RestartAppIfNecessary(uint unOwnAppID);
		}
	}
}